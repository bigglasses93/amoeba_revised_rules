<<<<<<< HEAD
#include "amoeba_local_rules.h"
#include "local_rules_225.h"
void update_L(two_bit_t L[N_VARIABLE+1][2], largeX_t LargeX[N_VARIABLE+1][2], one_bit_t x[N_VARIABLE+1], one_bit_t satisfiable[N_VARIABLE+1][2]){
=======
<<<<<<< HEAD
#include "amoeba_local_rules.h"
#include "local_rules_1238.h"
void update_L(two_bit_t L[N_VARIABLE+1][2], largeX_t LargeX[N_VARIABLE+1][2], one_bit_t x[N_VARIABLE+1], one_bit_t satisfiable[N_VARIABLE+1][2]){
	//Check all rules of unit[7][0]
	L[7][0] = LargeX[7][1]>0 ? 1 : 0;
	satisfiable[7][0]=1; 
	for(int i=0;i<95;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit7_0[i][0] ][ unit7_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit7_0[i][2] ][ unit7_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit7_0[i][4] ][ unit7_0[i][5] ] >0);
		X_contra = ( LargeX[7][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit7_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[7][1]=0; L[7][0]=1;}
			satisfiable[7][0]=satisfiable[7][0] & ((x[7] ^ 0) | (x[ unit7_0[i][0] ] ^ unit7_0[i][1]) |(x[ unit7_0[i][2] ] ^ unit7_0[i][3]));
			}
		if(X_contra>0) L[7][0]=2;
		}
	//Check all rules of unit[7][1]
	L[7][1] = LargeX[7][0]>0 ? 1 : 0;
	satisfiable[7][1]=1; 
	for(int i=0;i<42;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit7_1[i][0] ][ unit7_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit7_1[i][2] ][ unit7_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit7_1[i][4] ][ unit7_1[i][5] ] >0);
		X_contra = ( LargeX[7][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit7_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[7][0]=0; L[7][1]=1;}
			satisfiable[7][1]=satisfiable[7][1] & ((x[7] ^ 1) | (x[ unit7_1[i][0] ] ^ unit7_1[i][1]) |(x[ unit7_1[i][2] ] ^ unit7_1[i][3]));
			}
		if(X_contra>0) L[7][1]=2;
		}
	//Check all rules of unit[8][0]
	L[8][0] = LargeX[8][1]>0 ? 1 : 0;
	satisfiable[8][0]=1; 
	for(int i=0;i<101;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit8_0[i][0] ][ unit8_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit8_0[i][2] ][ unit8_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit8_0[i][4] ][ unit8_0[i][5] ] >0);
		X_contra = ( LargeX[8][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit8_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[8][1]=0; L[8][0]=1;}
			satisfiable[8][0]=satisfiable[8][0] & ((x[8] ^ 0) | (x[ unit8_0[i][0] ] ^ unit8_0[i][1]) |(x[ unit8_0[i][2] ] ^ unit8_0[i][3]));
			}
		if(X_contra>0) L[8][0]=2;
		}
	//Check all rules of unit[8][1]
	L[8][1] = LargeX[8][0]>0 ? 1 : 0;
	satisfiable[8][1]=1; 
	for(int i=0;i<54;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit8_1[i][0] ][ unit8_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit8_1[i][2] ][ unit8_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit8_1[i][4] ][ unit8_1[i][5] ] >0);
		X_contra = ( LargeX[8][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit8_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[8][0]=0; L[8][1]=1;}
			satisfiable[8][1]=satisfiable[8][1] & ((x[8] ^ 1) | (x[ unit8_1[i][0] ] ^ unit8_1[i][1]) |(x[ unit8_1[i][2] ] ^ unit8_1[i][3]));
			}
		if(X_contra>0) L[8][1]=2;
		}
	//Check all rules of unit[13][0]
	L[13][0] = LargeX[13][1]>0 ? 1 : 0;
	satisfiable[13][0]=1; 
	for(int i=0;i<77;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit13_0[i][0] ][ unit13_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit13_0[i][2] ][ unit13_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit13_0[i][4] ][ unit13_0[i][5] ] >0);
		X_contra = ( LargeX[13][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit13_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[13][1]=0; L[13][0]=1;}
			satisfiable[13][0]=satisfiable[13][0] & ((x[13] ^ 0) | (x[ unit13_0[i][0] ] ^ unit13_0[i][1]) |(x[ unit13_0[i][2] ] ^ unit13_0[i][3]));
			}
		if(X_contra>0) L[13][0]=2;
		}
	//Check all rules of unit[13][1]
	L[13][1] = LargeX[13][0]>0 ? 1 : 0;
	satisfiable[13][1]=1; 
	for(int i=0;i<433;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit13_1[i][0] ][ unit13_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit13_1[i][2] ][ unit13_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit13_1[i][4] ][ unit13_1[i][5] ] >0);
		X_contra = ( LargeX[13][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit13_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[13][0]=0; L[13][1]=1;}
			satisfiable[13][1]=satisfiable[13][1] & ((x[13] ^ 1) | (x[ unit13_1[i][0] ] ^ unit13_1[i][1]) |(x[ unit13_1[i][2] ] ^ unit13_1[i][3]));
			}
		if(X_contra>0) L[13][1]=2;
		}
	//Check all rules of unit[14][0]
	L[14][0] = LargeX[14][1]>0 ? 1 : 0;
	satisfiable[14][0]=1; 
	for(int i=0;i<68;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit14_0[i][0] ][ unit14_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit14_0[i][2] ][ unit14_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit14_0[i][4] ][ unit14_0[i][5] ] >0);
		X_contra = ( LargeX[14][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit14_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[14][1]=0; L[14][0]=1;}
			satisfiable[14][0]=satisfiable[14][0] & ((x[14] ^ 0) | (x[ unit14_0[i][0] ] ^ unit14_0[i][1]) |(x[ unit14_0[i][2] ] ^ unit14_0[i][3]));
			}
		if(X_contra>0) L[14][0]=2;
		}
	//Check all rules of unit[14][1]
	L[14][1] = LargeX[14][0]>0 ? 1 : 0;
	satisfiable[14][1]=1; 
	for(int i=0;i<459;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit14_1[i][0] ][ unit14_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit14_1[i][2] ][ unit14_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit14_1[i][4] ][ unit14_1[i][5] ] >0);
		X_contra = ( LargeX[14][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit14_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[14][0]=0; L[14][1]=1;}
			satisfiable[14][1]=satisfiable[14][1] & ((x[14] ^ 1) | (x[ unit14_1[i][0] ] ^ unit14_1[i][1]) |(x[ unit14_1[i][2] ] ^ unit14_1[i][3]));
			}
		if(X_contra>0) L[14][1]=2;
		}
	//Check all rules of unit[15][0]
	L[15][0] = LargeX[15][1]>0 ? 1 : 0;
	satisfiable[15][0]=1; 
	for(int i=0;i<105;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit15_0[i][0] ][ unit15_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit15_0[i][2] ][ unit15_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit15_0[i][4] ][ unit15_0[i][5] ] >0);
		X_contra = ( LargeX[15][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit15_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[15][1]=0; L[15][0]=1;}
			satisfiable[15][0]=satisfiable[15][0] & ((x[15] ^ 0) | (x[ unit15_0[i][0] ] ^ unit15_0[i][1]) |(x[ unit15_0[i][2] ] ^ unit15_0[i][3]));
			}
		if(X_contra>0) L[15][0]=2;
		}
	//Check all rules of unit[15][1]
	L[15][1] = LargeX[15][0]>0 ? 1 : 0;
	satisfiable[15][1]=1; 
	for(int i=0;i<279;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit15_1[i][0] ][ unit15_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit15_1[i][2] ][ unit15_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit15_1[i][4] ][ unit15_1[i][5] ] >0);
		X_contra = ( LargeX[15][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit15_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[15][0]=0; L[15][1]=1;}
			satisfiable[15][1]=satisfiable[15][1] & ((x[15] ^ 1) | (x[ unit15_1[i][0] ] ^ unit15_1[i][1]) |(x[ unit15_1[i][2] ] ^ unit15_1[i][3]));
			}
		if(X_contra>0) L[15][1]=2;
		}
	//Check all rules of unit[16][0]
	L[16][0] = LargeX[16][1]>0 ? 1 : 0;
	satisfiable[16][0]=1; 
	for(int i=0;i<105;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit16_0[i][0] ][ unit16_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit16_0[i][2] ][ unit16_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit16_0[i][4] ][ unit16_0[i][5] ] >0);
		X_contra = ( LargeX[16][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit16_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[16][1]=0; L[16][0]=1;}
			satisfiable[16][0]=satisfiable[16][0] & ((x[16] ^ 0) | (x[ unit16_0[i][0] ] ^ unit16_0[i][1]) |(x[ unit16_0[i][2] ] ^ unit16_0[i][3]));
			}
		if(X_contra>0) L[16][0]=2;
		}
	//Check all rules of unit[16][1]
	L[16][1] = LargeX[16][0]>0 ? 1 : 0;
	satisfiable[16][1]=1; 
	for(int i=0;i<213;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit16_1[i][0] ][ unit16_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit16_1[i][2] ][ unit16_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit16_1[i][4] ][ unit16_1[i][5] ] >0);
		X_contra = ( LargeX[16][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit16_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[16][0]=0; L[16][1]=1;}
			satisfiable[16][1]=satisfiable[16][1] & ((x[16] ^ 1) | (x[ unit16_1[i][0] ] ^ unit16_1[i][1]) |(x[ unit16_1[i][2] ] ^ unit16_1[i][3]));
			}
		if(X_contra>0) L[16][1]=2;
		}
	//Check all rules of unit[17][0]
	L[17][0] = LargeX[17][1]>0 ? 1 : 0;
	satisfiable[17][0]=1; 
	for(int i=0;i<92;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit17_0[i][0] ][ unit17_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit17_0[i][2] ][ unit17_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit17_0[i][4] ][ unit17_0[i][5] ] >0);
		X_contra = ( LargeX[17][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit17_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[17][1]=0; L[17][0]=1;}
			satisfiable[17][0]=satisfiable[17][0] & ((x[17] ^ 0) | (x[ unit17_0[i][0] ] ^ unit17_0[i][1]) |(x[ unit17_0[i][2] ] ^ unit17_0[i][3]));
			}
		if(X_contra>0) L[17][0]=2;
		}
	//Check all rules of unit[17][1]
	L[17][1] = LargeX[17][0]>0 ? 1 : 0;
	satisfiable[17][1]=1; 
	for(int i=0;i<146;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit17_1[i][0] ][ unit17_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit17_1[i][2] ][ unit17_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit17_1[i][4] ][ unit17_1[i][5] ] >0);
		X_contra = ( LargeX[17][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit17_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[17][0]=0; L[17][1]=1;}
			satisfiable[17][1]=satisfiable[17][1] & ((x[17] ^ 1) | (x[ unit17_1[i][0] ] ^ unit17_1[i][1]) |(x[ unit17_1[i][2] ] ^ unit17_1[i][3]));
			}
		if(X_contra>0) L[17][1]=2;
		}
	//Check all rules of unit[18][0]
	L[18][0] = LargeX[18][1]>0 ? 1 : 0;
	satisfiable[18][0]=1; 
	for(int i=0;i<104;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit18_0[i][0] ][ unit18_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit18_0[i][2] ][ unit18_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit18_0[i][4] ][ unit18_0[i][5] ] >0);
		X_contra = ( LargeX[18][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit18_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[18][1]=0; L[18][0]=1;}
			satisfiable[18][0]=satisfiable[18][0] & ((x[18] ^ 0) | (x[ unit18_0[i][0] ] ^ unit18_0[i][1]) |(x[ unit18_0[i][2] ] ^ unit18_0[i][3]));
			}
		if(X_contra>0) L[18][0]=2;
		}
	//Check all rules of unit[18][1]
	L[18][1] = LargeX[18][0]>0 ? 1 : 0;
	satisfiable[18][1]=1; 
	for(int i=0;i<46;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit18_1[i][0] ][ unit18_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit18_1[i][2] ][ unit18_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit18_1[i][4] ][ unit18_1[i][5] ] >0);
		X_contra = ( LargeX[18][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit18_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[18][0]=0; L[18][1]=1;}
			satisfiable[18][1]=satisfiable[18][1] & ((x[18] ^ 1) | (x[ unit18_1[i][0] ] ^ unit18_1[i][1]) |(x[ unit18_1[i][2] ] ^ unit18_1[i][3]));
			}
		if(X_contra>0) L[18][1]=2;
		}
	//Check all rules of unit[19][0]
	L[19][0] = LargeX[19][1]>0 ? 1 : 0;
	satisfiable[19][0]=1; 
	for(int i=0;i<127;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit19_0[i][0] ][ unit19_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit19_0[i][2] ][ unit19_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit19_0[i][4] ][ unit19_0[i][5] ] >0);
		X_contra = ( LargeX[19][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit19_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[19][1]=0; L[19][0]=1;}
			satisfiable[19][0]=satisfiable[19][0] & ((x[19] ^ 0) | (x[ unit19_0[i][0] ] ^ unit19_0[i][1]) |(x[ unit19_0[i][2] ] ^ unit19_0[i][3]));
			}
		if(X_contra>0) L[19][0]=2;
		}
	//Check all rules of unit[19][1]
	L[19][1] = LargeX[19][0]>0 ? 1 : 0;
	satisfiable[19][1]=1; 
	for(int i=0;i<606;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit19_1[i][0] ][ unit19_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit19_1[i][2] ][ unit19_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit19_1[i][4] ][ unit19_1[i][5] ] >0);
		X_contra = ( LargeX[19][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit19_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[19][0]=0; L[19][1]=1;}
			satisfiable[19][1]=satisfiable[19][1] & ((x[19] ^ 1) | (x[ unit19_1[i][0] ] ^ unit19_1[i][1]) |(x[ unit19_1[i][2] ] ^ unit19_1[i][3]));
			}
		if(X_contra>0) L[19][1]=2;
		}
	//Check all rules of unit[20][0]
	L[20][0] = LargeX[20][1]>0 ? 1 : 0;
	satisfiable[20][0]=1; 
	for(int i=0;i<134;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit20_0[i][0] ][ unit20_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit20_0[i][2] ][ unit20_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit20_0[i][4] ][ unit20_0[i][5] ] >0);
		X_contra = ( LargeX[20][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit20_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[20][1]=0; L[20][0]=1;}
			satisfiable[20][0]=satisfiable[20][0] & ((x[20] ^ 0) | (x[ unit20_0[i][0] ] ^ unit20_0[i][1]) |(x[ unit20_0[i][2] ] ^ unit20_0[i][3]));
			}
		if(X_contra>0) L[20][0]=2;
		}
	//Check all rules of unit[20][1]
	L[20][1] = LargeX[20][0]>0 ? 1 : 0;
	satisfiable[20][1]=1; 
	for(int i=0;i<608;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit20_1[i][0] ][ unit20_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit20_1[i][2] ][ unit20_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit20_1[i][4] ][ unit20_1[i][5] ] >0);
		X_contra = ( LargeX[20][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit20_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[20][0]=0; L[20][1]=1;}
			satisfiable[20][1]=satisfiable[20][1] & ((x[20] ^ 1) | (x[ unit20_1[i][0] ] ^ unit20_1[i][1]) |(x[ unit20_1[i][2] ] ^ unit20_1[i][3]));
			}
		if(X_contra>0) L[20][1]=2;
		}
	//Check all rules of unit[21][0]
	L[21][0] = LargeX[21][1]>0 ? 1 : 0;
	satisfiable[21][0]=1; 
	for(int i=0;i<63;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit21_0[i][0] ][ unit21_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit21_0[i][2] ][ unit21_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit21_0[i][4] ][ unit21_0[i][5] ] >0);
		X_contra = ( LargeX[21][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit21_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[21][1]=0; L[21][0]=1;}
			satisfiable[21][0]=satisfiable[21][0] & ((x[21] ^ 0) | (x[ unit21_0[i][0] ] ^ unit21_0[i][1]) |(x[ unit21_0[i][2] ] ^ unit21_0[i][3]));
			}
		if(X_contra>0) L[21][0]=2;
		}
	//Check all rules of unit[21][1]
	L[21][1] = LargeX[21][0]>0 ? 1 : 0;
	satisfiable[21][1]=1; 
	for(int i=0;i<661;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit21_1[i][0] ][ unit21_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit21_1[i][2] ][ unit21_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit21_1[i][4] ][ unit21_1[i][5] ] >0);
		X_contra = ( LargeX[21][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit21_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[21][0]=0; L[21][1]=1;}
			satisfiable[21][1]=satisfiable[21][1] & ((x[21] ^ 1) | (x[ unit21_1[i][0] ] ^ unit21_1[i][1]) |(x[ unit21_1[i][2] ] ^ unit21_1[i][3]));
			}
		if(X_contra>0) L[21][1]=2;
		}
	//Check all rules of unit[22][0]
	L[22][0] = LargeX[22][1]>0 ? 1 : 0;
	satisfiable[22][0]=1; 
	for(int i=0;i<89;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit22_0[i][0] ][ unit22_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit22_0[i][2] ][ unit22_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit22_0[i][4] ][ unit22_0[i][5] ] >0);
		X_contra = ( LargeX[22][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit22_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[22][1]=0; L[22][0]=1;}
			satisfiable[22][0]=satisfiable[22][0] & ((x[22] ^ 0) | (x[ unit22_0[i][0] ] ^ unit22_0[i][1]) |(x[ unit22_0[i][2] ] ^ unit22_0[i][3]));
			}
		if(X_contra>0) L[22][0]=2;
		}
	//Check all rules of unit[22][1]
	L[22][1] = LargeX[22][0]>0 ? 1 : 0;
	satisfiable[22][1]=1; 
	for(int i=0;i<595;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit22_1[i][0] ][ unit22_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit22_1[i][2] ][ unit22_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit22_1[i][4] ][ unit22_1[i][5] ] >0);
		X_contra = ( LargeX[22][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit22_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[22][0]=0; L[22][1]=1;}
			satisfiable[22][1]=satisfiable[22][1] & ((x[22] ^ 1) | (x[ unit22_1[i][0] ] ^ unit22_1[i][1]) |(x[ unit22_1[i][2] ] ^ unit22_1[i][3]));
			}
		if(X_contra>0) L[22][1]=2;
		}
	//Check all rules of unit[23][0]
	L[23][0] = LargeX[23][1]>0 ? 1 : 0;
	satisfiable[23][0]=1; 
	for(int i=0;i<113;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit23_0[i][0] ][ unit23_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit23_0[i][2] ][ unit23_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit23_0[i][4] ][ unit23_0[i][5] ] >0);
		X_contra = ( LargeX[23][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit23_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[23][1]=0; L[23][0]=1;}
			satisfiable[23][0]=satisfiable[23][0] & ((x[23] ^ 0) | (x[ unit23_0[i][0] ] ^ unit23_0[i][1]) |(x[ unit23_0[i][2] ] ^ unit23_0[i][3]));
			}
		if(X_contra>0) L[23][0]=2;
		}
	//Check all rules of unit[23][1]
	L[23][1] = LargeX[23][0]>0 ? 1 : 0;
	satisfiable[23][1]=1; 
	for(int i=0;i<552;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit23_1[i][0] ][ unit23_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit23_1[i][2] ][ unit23_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit23_1[i][4] ][ unit23_1[i][5] ] >0);
		X_contra = ( LargeX[23][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit23_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[23][0]=0; L[23][1]=1;}
			satisfiable[23][1]=satisfiable[23][1] & ((x[23] ^ 1) | (x[ unit23_1[i][0] ] ^ unit23_1[i][1]) |(x[ unit23_1[i][2] ] ^ unit23_1[i][3]));
			}
		if(X_contra>0) L[23][1]=2;
		}
	//Check all rules of unit[24][0]
	L[24][0] = LargeX[24][1]>0 ? 1 : 0;
	satisfiable[24][0]=1; 
	for(int i=0;i<107;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit24_0[i][0] ][ unit24_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit24_0[i][2] ][ unit24_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit24_0[i][4] ][ unit24_0[i][5] ] >0);
		X_contra = ( LargeX[24][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit24_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[24][1]=0; L[24][0]=1;}
			satisfiable[24][0]=satisfiable[24][0] & ((x[24] ^ 0) | (x[ unit24_0[i][0] ] ^ unit24_0[i][1]) |(x[ unit24_0[i][2] ] ^ unit24_0[i][3]));
			}
		if(X_contra>0) L[24][0]=2;
		}
	//Check all rules of unit[24][1]
	L[24][1] = LargeX[24][0]>0 ? 1 : 0;
	satisfiable[24][1]=1; 
	for(int i=0;i<505;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit24_1[i][0] ][ unit24_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit24_1[i][2] ][ unit24_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit24_1[i][4] ][ unit24_1[i][5] ] >0);
		X_contra = ( LargeX[24][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit24_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[24][0]=0; L[24][1]=1;}
			satisfiable[24][1]=satisfiable[24][1] & ((x[24] ^ 1) | (x[ unit24_1[i][0] ] ^ unit24_1[i][1]) |(x[ unit24_1[i][2] ] ^ unit24_1[i][3]));
			}
		if(X_contra>0) L[24][1]=2;
		}
	//Check all rules of unit[25][0]
	L[25][0] = LargeX[25][1]>0 ? 1 : 0;
	satisfiable[25][0]=1; 
	for(int i=0;i<84;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit25_0[i][0] ][ unit25_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit25_0[i][2] ][ unit25_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit25_0[i][4] ][ unit25_0[i][5] ] >0);
		X_contra = ( LargeX[25][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit25_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[25][1]=0; L[25][0]=1;}
			satisfiable[25][0]=satisfiable[25][0] & ((x[25] ^ 0) | (x[ unit25_0[i][0] ] ^ unit25_0[i][1]) |(x[ unit25_0[i][2] ] ^ unit25_0[i][3]));
			}
		if(X_contra>0) L[25][0]=2;
		}
	//Check all rules of unit[25][1]
	L[25][1] = LargeX[25][0]>0 ? 1 : 0;
	satisfiable[25][1]=1; 
	for(int i=0;i<598;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit25_1[i][0] ][ unit25_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit25_1[i][2] ][ unit25_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit25_1[i][4] ][ unit25_1[i][5] ] >0);
		X_contra = ( LargeX[25][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit25_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[25][0]=0; L[25][1]=1;}
			satisfiable[25][1]=satisfiable[25][1] & ((x[25] ^ 1) | (x[ unit25_1[i][0] ] ^ unit25_1[i][1]) |(x[ unit25_1[i][2] ] ^ unit25_1[i][3]));
			}
		if(X_contra>0) L[25][1]=2;
		}
	//Check all rules of unit[26][0]
	L[26][0] = LargeX[26][1]>0 ? 1 : 0;
	satisfiable[26][0]=1; 
	for(int i=0;i<77;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit26_0[i][0] ][ unit26_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit26_0[i][2] ][ unit26_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit26_0[i][4] ][ unit26_0[i][5] ] >0);
		X_contra = ( LargeX[26][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit26_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[26][1]=0; L[26][0]=1;}
			satisfiable[26][0]=satisfiable[26][0] & ((x[26] ^ 0) | (x[ unit26_0[i][0] ] ^ unit26_0[i][1]) |(x[ unit26_0[i][2] ] ^ unit26_0[i][3]));
			}
		if(X_contra>0) L[26][0]=2;
		}
	//Check all rules of unit[26][1]
	L[26][1] = LargeX[26][0]>0 ? 1 : 0;
	satisfiable[26][1]=1; 
	for(int i=0;i<548;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit26_1[i][0] ][ unit26_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit26_1[i][2] ][ unit26_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit26_1[i][4] ][ unit26_1[i][5] ] >0);
		X_contra = ( LargeX[26][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit26_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[26][0]=0; L[26][1]=1;}
			satisfiable[26][1]=satisfiable[26][1] & ((x[26] ^ 1) | (x[ unit26_1[i][0] ] ^ unit26_1[i][1]) |(x[ unit26_1[i][2] ] ^ unit26_1[i][3]));
			}
		if(X_contra>0) L[26][1]=2;
		}
	//Check all rules of unit[27][0]
	L[27][0] = LargeX[27][1]>0 ? 1 : 0;
	satisfiable[27][0]=1; 
	for(int i=0;i<140;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit27_0[i][0] ][ unit27_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit27_0[i][2] ][ unit27_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit27_0[i][4] ][ unit27_0[i][5] ] >0);
		X_contra = ( LargeX[27][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit27_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[27][1]=0; L[27][0]=1;}
			satisfiable[27][0]=satisfiable[27][0] & ((x[27] ^ 0) | (x[ unit27_0[i][0] ] ^ unit27_0[i][1]) |(x[ unit27_0[i][2] ] ^ unit27_0[i][3]));
			}
		if(X_contra>0) L[27][0]=2;
		}
	//Check all rules of unit[27][1]
	L[27][1] = LargeX[27][0]>0 ? 1 : 0;
	satisfiable[27][1]=1; 
	for(int i=0;i<468;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit27_1[i][0] ][ unit27_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit27_1[i][2] ][ unit27_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit27_1[i][4] ][ unit27_1[i][5] ] >0);
		X_contra = ( LargeX[27][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit27_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[27][0]=0; L[27][1]=1;}
			satisfiable[27][1]=satisfiable[27][1] & ((x[27] ^ 1) | (x[ unit27_1[i][0] ] ^ unit27_1[i][1]) |(x[ unit27_1[i][2] ] ^ unit27_1[i][3]));
			}
		if(X_contra>0) L[27][1]=2;
		}
	//Check all rules of unit[28][0]
	L[28][0] = LargeX[28][1]>0 ? 1 : 0;
	satisfiable[28][0]=1; 
	for(int i=0;i<136;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit28_0[i][0] ][ unit28_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit28_0[i][2] ][ unit28_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit28_0[i][4] ][ unit28_0[i][5] ] >0);
		X_contra = ( LargeX[28][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit28_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[28][1]=0; L[28][0]=1;}
			satisfiable[28][0]=satisfiable[28][0] & ((x[28] ^ 0) | (x[ unit28_0[i][0] ] ^ unit28_0[i][1]) |(x[ unit28_0[i][2] ] ^ unit28_0[i][3]));
			}
		if(X_contra>0) L[28][0]=2;
		}
	//Check all rules of unit[28][1]
	L[28][1] = LargeX[28][0]>0 ? 1 : 0;
	satisfiable[28][1]=1; 
	for(int i=0;i<528;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit28_1[i][0] ][ unit28_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit28_1[i][2] ][ unit28_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit28_1[i][4] ][ unit28_1[i][5] ] >0);
		X_contra = ( LargeX[28][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit28_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[28][0]=0; L[28][1]=1;}
			satisfiable[28][1]=satisfiable[28][1] & ((x[28] ^ 1) | (x[ unit28_1[i][0] ] ^ unit28_1[i][1]) |(x[ unit28_1[i][2] ] ^ unit28_1[i][3]));
			}
		if(X_contra>0) L[28][1]=2;
		}
	//Check all rules of unit[29][0]
	L[29][0] = LargeX[29][1]>0 ? 1 : 0;
	satisfiable[29][0]=1; 
	for(int i=0;i<133;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit29_0[i][0] ][ unit29_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit29_0[i][2] ][ unit29_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit29_0[i][4] ][ unit29_0[i][5] ] >0);
		X_contra = ( LargeX[29][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit29_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[29][1]=0; L[29][0]=1;}
			satisfiable[29][0]=satisfiable[29][0] & ((x[29] ^ 0) | (x[ unit29_0[i][0] ] ^ unit29_0[i][1]) |(x[ unit29_0[i][2] ] ^ unit29_0[i][3]));
			}
		if(X_contra>0) L[29][0]=2;
		}
	//Check all rules of unit[29][1]
	L[29][1] = LargeX[29][0]>0 ? 1 : 0;
	satisfiable[29][1]=1; 
	for(int i=0;i<642;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit29_1[i][0] ][ unit29_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit29_1[i][2] ][ unit29_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit29_1[i][4] ][ unit29_1[i][5] ] >0);
		X_contra = ( LargeX[29][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit29_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[29][0]=0; L[29][1]=1;}
			satisfiable[29][1]=satisfiable[29][1] & ((x[29] ^ 1) | (x[ unit29_1[i][0] ] ^ unit29_1[i][1]) |(x[ unit29_1[i][2] ] ^ unit29_1[i][3]));
			}
		if(X_contra>0) L[29][1]=2;
		}
	//Check all rules of unit[30][0]
	L[30][0] = LargeX[30][1]>0 ? 1 : 0;
	satisfiable[30][0]=1; 
	for(int i=0;i<142;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit30_0[i][0] ][ unit30_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit30_0[i][2] ][ unit30_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit30_0[i][4] ][ unit30_0[i][5] ] >0);
		X_contra = ( LargeX[30][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit30_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[30][1]=0; L[30][0]=1;}
			satisfiable[30][0]=satisfiable[30][0] & ((x[30] ^ 0) | (x[ unit30_0[i][0] ] ^ unit30_0[i][1]) |(x[ unit30_0[i][2] ] ^ unit30_0[i][3]));
			}
		if(X_contra>0) L[30][0]=2;
		}
	//Check all rules of unit[30][1]
	L[30][1] = LargeX[30][0]>0 ? 1 : 0;
	satisfiable[30][1]=1; 
	for(int i=0;i<752;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit30_1[i][0] ][ unit30_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit30_1[i][2] ][ unit30_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit30_1[i][4] ][ unit30_1[i][5] ] >0);
		X_contra = ( LargeX[30][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit30_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[30][0]=0; L[30][1]=1;}
			satisfiable[30][1]=satisfiable[30][1] & ((x[30] ^ 1) | (x[ unit30_1[i][0] ] ^ unit30_1[i][1]) |(x[ unit30_1[i][2] ] ^ unit30_1[i][3]));
			}
		if(X_contra>0) L[30][1]=2;
		}
	//Check all rules of unit[31][0]
	L[31][0] = LargeX[31][1]>0 ? 1 : 0;
	satisfiable[31][0]=1; 
	for(int i=0;i<103;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit31_0[i][0] ][ unit31_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit31_0[i][2] ][ unit31_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit31_0[i][4] ][ unit31_0[i][5] ] >0);
		X_contra = ( LargeX[31][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit31_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[31][1]=0; L[31][0]=1;}
			satisfiable[31][0]=satisfiable[31][0] & ((x[31] ^ 0) | (x[ unit31_0[i][0] ] ^ unit31_0[i][1]) |(x[ unit31_0[i][2] ] ^ unit31_0[i][3]));
			}
		if(X_contra>0) L[31][0]=2;
		}
	//Check all rules of unit[31][1]
	L[31][1] = LargeX[31][0]>0 ? 1 : 0;
	satisfiable[31][1]=1; 
	for(int i=0;i<32;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit31_1[i][0] ][ unit31_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit31_1[i][2] ][ unit31_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit31_1[i][4] ][ unit31_1[i][5] ] >0);
		X_contra = ( LargeX[31][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit31_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[31][0]=0; L[31][1]=1;}
			satisfiable[31][1]=satisfiable[31][1] & ((x[31] ^ 1) | (x[ unit31_1[i][0] ] ^ unit31_1[i][1]) |(x[ unit31_1[i][2] ] ^ unit31_1[i][3]));
			}
		if(X_contra>0) L[31][1]=2;
		}
	//Check all rules of unit[32][0]
	L[32][0] = LargeX[32][1]>0 ? 1 : 0;
	satisfiable[32][0]=1; 
	for(int i=0;i<100;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit32_0[i][0] ][ unit32_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit32_0[i][2] ][ unit32_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit32_0[i][4] ][ unit32_0[i][5] ] >0);
		X_contra = ( LargeX[32][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit32_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[32][1]=0; L[32][0]=1;}
			satisfiable[32][0]=satisfiable[32][0] & ((x[32] ^ 0) | (x[ unit32_0[i][0] ] ^ unit32_0[i][1]) |(x[ unit32_0[i][2] ] ^ unit32_0[i][3]));
			}
		if(X_contra>0) L[32][0]=2;
		}
	//Check all rules of unit[32][1]
	L[32][1] = LargeX[32][0]>0 ? 1 : 0;
	satisfiable[32][1]=1; 
	for(int i=0;i<153;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit32_1[i][0] ][ unit32_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit32_1[i][2] ][ unit32_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit32_1[i][4] ][ unit32_1[i][5] ] >0);
		X_contra = ( LargeX[32][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit32_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[32][0]=0; L[32][1]=1;}
			satisfiable[32][1]=satisfiable[32][1] & ((x[32] ^ 1) | (x[ unit32_1[i][0] ] ^ unit32_1[i][1]) |(x[ unit32_1[i][2] ] ^ unit32_1[i][3]));
			}
		if(X_contra>0) L[32][1]=2;
		}
	//Check all rules of unit[33][0]
	L[33][0] = LargeX[33][1]>0 ? 1 : 0;
	satisfiable[33][0]=1; 
	for(int i=0;i<53;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit33_0[i][0] ][ unit33_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit33_0[i][2] ][ unit33_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit33_0[i][4] ][ unit33_0[i][5] ] >0);
		X_contra = ( LargeX[33][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit33_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[33][1]=0; L[33][0]=1;}
			satisfiable[33][0]=satisfiable[33][0] & ((x[33] ^ 0) | (x[ unit33_0[i][0] ] ^ unit33_0[i][1]) |(x[ unit33_0[i][2] ] ^ unit33_0[i][3]));
			}
		if(X_contra>0) L[33][0]=2;
		}
	//Check all rules of unit[33][1]
	L[33][1] = LargeX[33][0]>0 ? 1 : 0;
	satisfiable[33][1]=1; 
	for(int i=0;i<236;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit33_1[i][0] ][ unit33_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit33_1[i][2] ][ unit33_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit33_1[i][4] ][ unit33_1[i][5] ] >0);
		X_contra = ( LargeX[33][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit33_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[33][0]=0; L[33][1]=1;}
			satisfiable[33][1]=satisfiable[33][1] & ((x[33] ^ 1) | (x[ unit33_1[i][0] ] ^ unit33_1[i][1]) |(x[ unit33_1[i][2] ] ^ unit33_1[i][3]));
			}
		if(X_contra>0) L[33][1]=2;
		}
	//Check all rules of unit[34][0]
	L[34][0] = LargeX[34][1]>0 ? 1 : 0;
	satisfiable[34][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit34_0[i][0] ][ unit34_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit34_0[i][2] ][ unit34_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit34_0[i][4] ][ unit34_0[i][5] ] >0);
		X_contra = ( LargeX[34][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit34_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[34][1]=0; L[34][0]=1;}
			satisfiable[34][0]=satisfiable[34][0] & ((x[34] ^ 0) | (x[ unit34_0[i][0] ] ^ unit34_0[i][1]) |(x[ unit34_0[i][2] ] ^ unit34_0[i][3]));
			}
		if(X_contra>0) L[34][0]=2;
		}
	//Check all rules of unit[34][1]
	L[34][1] = LargeX[34][0]>0 ? 1 : 0;
	satisfiable[34][1]=1; 
	for(int i=0;i<308;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit34_1[i][0] ][ unit34_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit34_1[i][2] ][ unit34_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit34_1[i][4] ][ unit34_1[i][5] ] >0);
		X_contra = ( LargeX[34][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit34_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[34][0]=0; L[34][1]=1;}
			satisfiable[34][1]=satisfiable[34][1] & ((x[34] ^ 1) | (x[ unit34_1[i][0] ] ^ unit34_1[i][1]) |(x[ unit34_1[i][2] ] ^ unit34_1[i][3]));
			}
		if(X_contra>0) L[34][1]=2;
		}
	//Check all rules of unit[35][0]
	L[35][0] = LargeX[35][1]>0 ? 1 : 0;
	satisfiable[35][0]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit35_0[i][0] ][ unit35_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit35_0[i][2] ][ unit35_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit35_0[i][4] ][ unit35_0[i][5] ] >0);
		X_contra = ( LargeX[35][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit35_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[35][1]=0; L[35][0]=1;}
			satisfiable[35][0]=satisfiable[35][0] & ((x[35] ^ 0) | (x[ unit35_0[i][0] ] ^ unit35_0[i][1]) |(x[ unit35_0[i][2] ] ^ unit35_0[i][3]));
			}
		if(X_contra>0) L[35][0]=2;
		}
	//Check all rules of unit[35][1]
	L[35][1] = LargeX[35][0]>0 ? 1 : 0;
	satisfiable[35][1]=1; 
	for(int i=0;i<325;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit35_1[i][0] ][ unit35_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit35_1[i][2] ][ unit35_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit35_1[i][4] ][ unit35_1[i][5] ] >0);
		X_contra = ( LargeX[35][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit35_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[35][0]=0; L[35][1]=1;}
			satisfiable[35][1]=satisfiable[35][1] & ((x[35] ^ 1) | (x[ unit35_1[i][0] ] ^ unit35_1[i][1]) |(x[ unit35_1[i][2] ] ^ unit35_1[i][3]));
			}
		if(X_contra>0) L[35][1]=2;
		}
	//Check all rules of unit[36][0]
	L[36][0] = LargeX[36][1]>0 ? 1 : 0;
	satisfiable[36][0]=1; 
	for(int i=0;i<136;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit36_0[i][0] ][ unit36_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit36_0[i][2] ][ unit36_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit36_0[i][4] ][ unit36_0[i][5] ] >0);
		X_contra = ( LargeX[36][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit36_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[36][1]=0; L[36][0]=1;}
			satisfiable[36][0]=satisfiable[36][0] & ((x[36] ^ 0) | (x[ unit36_0[i][0] ] ^ unit36_0[i][1]) |(x[ unit36_0[i][2] ] ^ unit36_0[i][3]));
			}
		if(X_contra>0) L[36][0]=2;
		}
	//Check all rules of unit[36][1]
	L[36][1] = LargeX[36][0]>0 ? 1 : 0;
	satisfiable[36][1]=1; 
	for(int i=0;i<397;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit36_1[i][0] ][ unit36_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit36_1[i][2] ][ unit36_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit36_1[i][4] ][ unit36_1[i][5] ] >0);
		X_contra = ( LargeX[36][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit36_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[36][0]=0; L[36][1]=1;}
			satisfiable[36][1]=satisfiable[36][1] & ((x[36] ^ 1) | (x[ unit36_1[i][0] ] ^ unit36_1[i][1]) |(x[ unit36_1[i][2] ] ^ unit36_1[i][3]));
			}
		if(X_contra>0) L[36][1]=2;
		}
	//Check all rules of unit[43][0]
	L[43][0] = LargeX[43][1]>0 ? 1 : 0;
	satisfiable[43][0]=1; 
	for(int i=0;i<102;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit43_0[i][0] ][ unit43_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit43_0[i][2] ][ unit43_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit43_0[i][4] ][ unit43_0[i][5] ] >0);
		X_contra = ( LargeX[43][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit43_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[43][1]=0; L[43][0]=1;}
			satisfiable[43][0]=satisfiable[43][0] & ((x[43] ^ 0) | (x[ unit43_0[i][0] ] ^ unit43_0[i][1]) |(x[ unit43_0[i][2] ] ^ unit43_0[i][3]));
			}
		if(X_contra>0) L[43][0]=2;
		}
	//Check all rules of unit[43][1]
	L[43][1] = LargeX[43][0]>0 ? 1 : 0;
	satisfiable[43][1]=1; 
	for(int i=0;i<44;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit43_1[i][0] ][ unit43_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit43_1[i][2] ][ unit43_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit43_1[i][4] ][ unit43_1[i][5] ] >0);
		X_contra = ( LargeX[43][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit43_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[43][0]=0; L[43][1]=1;}
			satisfiable[43][1]=satisfiable[43][1] & ((x[43] ^ 1) | (x[ unit43_1[i][0] ] ^ unit43_1[i][1]) |(x[ unit43_1[i][2] ] ^ unit43_1[i][3]));
			}
		if(X_contra>0) L[43][1]=2;
		}
	//Check all rules of unit[44][0]
	L[44][0] = LargeX[44][1]>0 ? 1 : 0;
	satisfiable[44][0]=1; 
	for(int i=0;i<107;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit44_0[i][0] ][ unit44_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit44_0[i][2] ][ unit44_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit44_0[i][4] ][ unit44_0[i][5] ] >0);
		X_contra = ( LargeX[44][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit44_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[44][1]=0; L[44][0]=1;}
			satisfiable[44][0]=satisfiable[44][0] & ((x[44] ^ 0) | (x[ unit44_0[i][0] ] ^ unit44_0[i][1]) |(x[ unit44_0[i][2] ] ^ unit44_0[i][3]));
			}
		if(X_contra>0) L[44][0]=2;
		}
	//Check all rules of unit[44][1]
	L[44][1] = LargeX[44][0]>0 ? 1 : 0;
	satisfiable[44][1]=1; 
	for(int i=0;i<39;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit44_1[i][0] ][ unit44_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit44_1[i][2] ][ unit44_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit44_1[i][4] ][ unit44_1[i][5] ] >0);
		X_contra = ( LargeX[44][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit44_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[44][0]=0; L[44][1]=1;}
			satisfiable[44][1]=satisfiable[44][1] & ((x[44] ^ 1) | (x[ unit44_1[i][0] ] ^ unit44_1[i][1]) |(x[ unit44_1[i][2] ] ^ unit44_1[i][3]));
			}
		if(X_contra>0) L[44][1]=2;
		}
	//Check all rules of unit[47][0]
	L[47][0] = LargeX[47][1]>0 ? 1 : 0;
	satisfiable[47][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit47_0[i][0] ][ unit47_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit47_0[i][2] ][ unit47_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit47_0[i][4] ][ unit47_0[i][5] ] >0);
		X_contra = ( LargeX[47][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit47_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[47][1]=0; L[47][0]=1;}
			satisfiable[47][0]=satisfiable[47][0] & ((x[47] ^ 0) | (x[ unit47_0[i][0] ] ^ unit47_0[i][1]) |(x[ unit47_0[i][2] ] ^ unit47_0[i][3]));
			}
		if(X_contra>0) L[47][0]=2;
		}
	//Check all rules of unit[47][1]
	L[47][1] = LargeX[47][0]>0 ? 1 : 0;
	satisfiable[47][1]=1; 
	for(int i=0;i<22;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit47_1[i][0] ][ unit47_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit47_1[i][2] ][ unit47_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit47_1[i][4] ][ unit47_1[i][5] ] >0);
		X_contra = ( LargeX[47][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit47_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[47][0]=0; L[47][1]=1;}
			satisfiable[47][1]=satisfiable[47][1] & ((x[47] ^ 1) | (x[ unit47_1[i][0] ] ^ unit47_1[i][1]) |(x[ unit47_1[i][2] ] ^ unit47_1[i][3]));
			}
		if(X_contra>0) L[47][1]=2;
		}
	//Check all rules of unit[49][0]
	L[49][0] = LargeX[49][1]>0 ? 1 : 0;
	satisfiable[49][0]=1; 
	for(int i=0;i<103;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit49_0[i][0] ][ unit49_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit49_0[i][2] ][ unit49_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit49_0[i][4] ][ unit49_0[i][5] ] >0);
		X_contra = ( LargeX[49][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit49_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[49][1]=0; L[49][0]=1;}
			satisfiable[49][0]=satisfiable[49][0] & ((x[49] ^ 0) | (x[ unit49_0[i][0] ] ^ unit49_0[i][1]) |(x[ unit49_0[i][2] ] ^ unit49_0[i][3]));
			}
		if(X_contra>0) L[49][0]=2;
		}
	//Check all rules of unit[49][1]
	L[49][1] = LargeX[49][0]>0 ? 1 : 0;
	satisfiable[49][1]=1; 
	for(int i=0;i<136;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit49_1[i][0] ][ unit49_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit49_1[i][2] ][ unit49_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit49_1[i][4] ][ unit49_1[i][5] ] >0);
		X_contra = ( LargeX[49][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit49_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[49][0]=0; L[49][1]=1;}
			satisfiable[49][1]=satisfiable[49][1] & ((x[49] ^ 1) | (x[ unit49_1[i][0] ] ^ unit49_1[i][1]) |(x[ unit49_1[i][2] ] ^ unit49_1[i][3]));
			}
		if(X_contra>0) L[49][1]=2;
		}
	//Check all rules of unit[50][0]
	L[50][0] = LargeX[50][1]>0 ? 1 : 0;
	satisfiable[50][0]=1; 
	for(int i=0;i<86;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit50_0[i][0] ][ unit50_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit50_0[i][2] ][ unit50_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit50_0[i][4] ][ unit50_0[i][5] ] >0);
		X_contra = ( LargeX[50][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit50_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[50][1]=0; L[50][0]=1;}
			satisfiable[50][0]=satisfiable[50][0] & ((x[50] ^ 0) | (x[ unit50_0[i][0] ] ^ unit50_0[i][1]) |(x[ unit50_0[i][2] ] ^ unit50_0[i][3]));
			}
		if(X_contra>0) L[50][0]=2;
		}
	//Check all rules of unit[50][1]
	L[50][1] = LargeX[50][0]>0 ? 1 : 0;
	satisfiable[50][1]=1; 
	for(int i=0;i<122;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit50_1[i][0] ][ unit50_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit50_1[i][2] ][ unit50_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit50_1[i][4] ][ unit50_1[i][5] ] >0);
		X_contra = ( LargeX[50][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit50_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[50][0]=0; L[50][1]=1;}
			satisfiable[50][1]=satisfiable[50][1] & ((x[50] ^ 1) | (x[ unit50_1[i][0] ] ^ unit50_1[i][1]) |(x[ unit50_1[i][2] ] ^ unit50_1[i][3]));
			}
		if(X_contra>0) L[50][1]=2;
		}
	//Check all rules of unit[51][0]
	L[51][0] = LargeX[51][1]>0 ? 1 : 0;
	satisfiable[51][0]=1; 
	for(int i=0;i<143;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit51_0[i][0] ][ unit51_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit51_0[i][2] ][ unit51_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit51_0[i][4] ][ unit51_0[i][5] ] >0);
		X_contra = ( LargeX[51][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit51_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[51][1]=0; L[51][0]=1;}
			satisfiable[51][0]=satisfiable[51][0] & ((x[51] ^ 0) | (x[ unit51_0[i][0] ] ^ unit51_0[i][1]) |(x[ unit51_0[i][2] ] ^ unit51_0[i][3]));
			}
		if(X_contra>0) L[51][0]=2;
		}
	//Check all rules of unit[51][1]
	L[51][1] = LargeX[51][0]>0 ? 1 : 0;
	satisfiable[51][1]=1; 
	for(int i=0;i<98;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit51_1[i][0] ][ unit51_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit51_1[i][2] ][ unit51_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit51_1[i][4] ][ unit51_1[i][5] ] >0);
		X_contra = ( LargeX[51][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit51_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[51][0]=0; L[51][1]=1;}
			satisfiable[51][1]=satisfiable[51][1] & ((x[51] ^ 1) | (x[ unit51_1[i][0] ] ^ unit51_1[i][1]) |(x[ unit51_1[i][2] ] ^ unit51_1[i][3]));
			}
		if(X_contra>0) L[51][1]=2;
		}
	//Check all rules of unit[52][0]
	L[52][0] = LargeX[52][1]>0 ? 1 : 0;
	satisfiable[52][0]=1; 
	for(int i=0;i<148;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit52_0[i][0] ][ unit52_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit52_0[i][2] ][ unit52_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit52_0[i][4] ][ unit52_0[i][5] ] >0);
		X_contra = ( LargeX[52][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit52_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[52][1]=0; L[52][0]=1;}
			satisfiable[52][0]=satisfiable[52][0] & ((x[52] ^ 0) | (x[ unit52_0[i][0] ] ^ unit52_0[i][1]) |(x[ unit52_0[i][2] ] ^ unit52_0[i][3]));
			}
		if(X_contra>0) L[52][0]=2;
		}
	//Check all rules of unit[52][1]
	L[52][1] = LargeX[52][0]>0 ? 1 : 0;
	satisfiable[52][1]=1; 
	for(int i=0;i<82;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit52_1[i][0] ][ unit52_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit52_1[i][2] ][ unit52_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit52_1[i][4] ][ unit52_1[i][5] ] >0);
		X_contra = ( LargeX[52][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit52_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[52][0]=0; L[52][1]=1;}
			satisfiable[52][1]=satisfiable[52][1] & ((x[52] ^ 1) | (x[ unit52_1[i][0] ] ^ unit52_1[i][1]) |(x[ unit52_1[i][2] ] ^ unit52_1[i][3]));
			}
		if(X_contra>0) L[52][1]=2;
		}
	//Check all rules of unit[53][0]
	L[53][0] = LargeX[53][1]>0 ? 1 : 0;
	satisfiable[53][0]=1; 
	for(int i=0;i<137;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit53_0[i][0] ][ unit53_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit53_0[i][2] ][ unit53_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit53_0[i][4] ][ unit53_0[i][5] ] >0);
		X_contra = ( LargeX[53][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit53_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[53][1]=0; L[53][0]=1;}
			satisfiable[53][0]=satisfiable[53][0] & ((x[53] ^ 0) | (x[ unit53_0[i][0] ] ^ unit53_0[i][1]) |(x[ unit53_0[i][2] ] ^ unit53_0[i][3]));
			}
		if(X_contra>0) L[53][0]=2;
		}
	//Check all rules of unit[53][1]
	L[53][1] = LargeX[53][0]>0 ? 1 : 0;
	satisfiable[53][1]=1; 
	for(int i=0;i<66;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit53_1[i][0] ][ unit53_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit53_1[i][2] ][ unit53_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit53_1[i][4] ][ unit53_1[i][5] ] >0);
		X_contra = ( LargeX[53][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit53_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[53][0]=0; L[53][1]=1;}
			satisfiable[53][1]=satisfiable[53][1] & ((x[53] ^ 1) | (x[ unit53_1[i][0] ] ^ unit53_1[i][1]) |(x[ unit53_1[i][2] ] ^ unit53_1[i][3]));
			}
		if(X_contra>0) L[53][1]=2;
		}
	//Check all rules of unit[54][0]
	L[54][0] = LargeX[54][1]>0 ? 1 : 0;
	satisfiable[54][0]=1; 
	for(int i=0;i<75;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit54_0[i][0] ][ unit54_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit54_0[i][2] ][ unit54_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit54_0[i][4] ][ unit54_0[i][5] ] >0);
		X_contra = ( LargeX[54][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit54_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[54][1]=0; L[54][0]=1;}
			satisfiable[54][0]=satisfiable[54][0] & ((x[54] ^ 0) | (x[ unit54_0[i][0] ] ^ unit54_0[i][1]) |(x[ unit54_0[i][2] ] ^ unit54_0[i][3]));
			}
		if(X_contra>0) L[54][0]=2;
		}
	//Check all rules of unit[54][1]
	L[54][1] = LargeX[54][0]>0 ? 1 : 0;
	satisfiable[54][1]=1; 
	for(int i=0;i<49;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit54_1[i][0] ][ unit54_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit54_1[i][2] ][ unit54_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit54_1[i][4] ][ unit54_1[i][5] ] >0);
		X_contra = ( LargeX[54][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit54_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[54][0]=0; L[54][1]=1;}
			satisfiable[54][1]=satisfiable[54][1] & ((x[54] ^ 1) | (x[ unit54_1[i][0] ] ^ unit54_1[i][1]) |(x[ unit54_1[i][2] ] ^ unit54_1[i][3]));
			}
		if(X_contra>0) L[54][1]=2;
		}
	//Check all rules of unit[55][0]
	L[55][0] = LargeX[55][1]>0 ? 1 : 0;
	satisfiable[55][0]=1; 
	for(int i=0;i<114;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit55_0[i][0] ][ unit55_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit55_0[i][2] ][ unit55_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit55_0[i][4] ][ unit55_0[i][5] ] >0);
		X_contra = ( LargeX[55][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit55_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[55][1]=0; L[55][0]=1;}
			satisfiable[55][0]=satisfiable[55][0] & ((x[55] ^ 0) | (x[ unit55_0[i][0] ] ^ unit55_0[i][1]) |(x[ unit55_0[i][2] ] ^ unit55_0[i][3]));
			}
		if(X_contra>0) L[55][0]=2;
		}
	//Check all rules of unit[55][1]
	L[55][1] = LargeX[55][0]>0 ? 1 : 0;
	satisfiable[55][1]=1; 
	for(int i=0;i<167;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit55_1[i][0] ][ unit55_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit55_1[i][2] ][ unit55_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit55_1[i][4] ][ unit55_1[i][5] ] >0);
		X_contra = ( LargeX[55][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit55_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[55][0]=0; L[55][1]=1;}
			satisfiable[55][1]=satisfiable[55][1] & ((x[55] ^ 1) | (x[ unit55_1[i][0] ] ^ unit55_1[i][1]) |(x[ unit55_1[i][2] ] ^ unit55_1[i][3]));
			}
		if(X_contra>0) L[55][1]=2;
		}
	//Check all rules of unit[56][0]
	L[56][0] = LargeX[56][1]>0 ? 1 : 0;
	satisfiable[56][0]=1; 
	for(int i=0;i<141;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit56_0[i][0] ][ unit56_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit56_0[i][2] ][ unit56_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit56_0[i][4] ][ unit56_0[i][5] ] >0);
		X_contra = ( LargeX[56][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit56_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[56][1]=0; L[56][0]=1;}
			satisfiable[56][0]=satisfiable[56][0] & ((x[56] ^ 0) | (x[ unit56_0[i][0] ] ^ unit56_0[i][1]) |(x[ unit56_0[i][2] ] ^ unit56_0[i][3]));
			}
		if(X_contra>0) L[56][0]=2;
		}
	//Check all rules of unit[56][1]
	L[56][1] = LargeX[56][0]>0 ? 1 : 0;
	satisfiable[56][1]=1; 
	for(int i=0;i<160;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit56_1[i][0] ][ unit56_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit56_1[i][2] ][ unit56_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit56_1[i][4] ][ unit56_1[i][5] ] >0);
		X_contra = ( LargeX[56][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit56_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[56][0]=0; L[56][1]=1;}
			satisfiable[56][1]=satisfiable[56][1] & ((x[56] ^ 1) | (x[ unit56_1[i][0] ] ^ unit56_1[i][1]) |(x[ unit56_1[i][2] ] ^ unit56_1[i][3]));
			}
		if(X_contra>0) L[56][1]=2;
		}
	//Check all rules of unit[57][0]
	L[57][0] = LargeX[57][1]>0 ? 1 : 0;
	satisfiable[57][0]=1; 
	for(int i=0;i<138;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit57_0[i][0] ][ unit57_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit57_0[i][2] ][ unit57_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit57_0[i][4] ][ unit57_0[i][5] ] >0);
		X_contra = ( LargeX[57][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit57_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[57][1]=0; L[57][0]=1;}
			satisfiable[57][0]=satisfiable[57][0] & ((x[57] ^ 0) | (x[ unit57_0[i][0] ] ^ unit57_0[i][1]) |(x[ unit57_0[i][2] ] ^ unit57_0[i][3]));
			}
		if(X_contra>0) L[57][0]=2;
		}
	//Check all rules of unit[57][1]
	L[57][1] = LargeX[57][0]>0 ? 1 : 0;
	satisfiable[57][1]=1; 
	for(int i=0;i<158;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit57_1[i][0] ][ unit57_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit57_1[i][2] ][ unit57_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit57_1[i][4] ][ unit57_1[i][5] ] >0);
		X_contra = ( LargeX[57][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit57_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[57][0]=0; L[57][1]=1;}
			satisfiable[57][1]=satisfiable[57][1] & ((x[57] ^ 1) | (x[ unit57_1[i][0] ] ^ unit57_1[i][1]) |(x[ unit57_1[i][2] ] ^ unit57_1[i][3]));
			}
		if(X_contra>0) L[57][1]=2;
		}
	//Check all rules of unit[58][0]
	L[58][0] = LargeX[58][1]>0 ? 1 : 0;
	satisfiable[58][0]=1; 
	for(int i=0;i<138;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit58_0[i][0] ][ unit58_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit58_0[i][2] ][ unit58_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit58_0[i][4] ][ unit58_0[i][5] ] >0);
		X_contra = ( LargeX[58][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit58_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[58][1]=0; L[58][0]=1;}
			satisfiable[58][0]=satisfiable[58][0] & ((x[58] ^ 0) | (x[ unit58_0[i][0] ] ^ unit58_0[i][1]) |(x[ unit58_0[i][2] ] ^ unit58_0[i][3]));
			}
		if(X_contra>0) L[58][0]=2;
		}
	//Check all rules of unit[58][1]
	L[58][1] = LargeX[58][0]>0 ? 1 : 0;
	satisfiable[58][1]=1; 
	for(int i=0;i<149;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit58_1[i][0] ][ unit58_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit58_1[i][2] ][ unit58_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit58_1[i][4] ][ unit58_1[i][5] ] >0);
		X_contra = ( LargeX[58][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit58_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[58][0]=0; L[58][1]=1;}
			satisfiable[58][1]=satisfiable[58][1] & ((x[58] ^ 1) | (x[ unit58_1[i][0] ] ^ unit58_1[i][1]) |(x[ unit58_1[i][2] ] ^ unit58_1[i][3]));
			}
		if(X_contra>0) L[58][1]=2;
		}
	//Check all rules of unit[59][0]
	L[59][0] = LargeX[59][1]>0 ? 1 : 0;
	satisfiable[59][0]=1; 
	for(int i=0;i<112;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit59_0[i][0] ][ unit59_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit59_0[i][2] ][ unit59_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit59_0[i][4] ][ unit59_0[i][5] ] >0);
		X_contra = ( LargeX[59][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit59_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[59][1]=0; L[59][0]=1;}
			satisfiable[59][0]=satisfiable[59][0] & ((x[59] ^ 0) | (x[ unit59_0[i][0] ] ^ unit59_0[i][1]) |(x[ unit59_0[i][2] ] ^ unit59_0[i][3]));
			}
		if(X_contra>0) L[59][0]=2;
		}
	//Check all rules of unit[59][1]
	L[59][1] = LargeX[59][0]>0 ? 1 : 0;
	satisfiable[59][1]=1; 
	for(int i=0;i<144;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit59_1[i][0] ][ unit59_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit59_1[i][2] ][ unit59_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit59_1[i][4] ][ unit59_1[i][5] ] >0);
		X_contra = ( LargeX[59][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit59_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[59][0]=0; L[59][1]=1;}
			satisfiable[59][1]=satisfiable[59][1] & ((x[59] ^ 1) | (x[ unit59_1[i][0] ] ^ unit59_1[i][1]) |(x[ unit59_1[i][2] ] ^ unit59_1[i][3]));
			}
		if(X_contra>0) L[59][1]=2;
		}
	//Check all rules of unit[60][0]
	L[60][0] = LargeX[60][1]>0 ? 1 : 0;
	satisfiable[60][0]=1; 
	for(int i=0;i<144;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit60_0[i][0] ][ unit60_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit60_0[i][2] ][ unit60_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit60_0[i][4] ][ unit60_0[i][5] ] >0);
		X_contra = ( LargeX[60][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit60_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[60][1]=0; L[60][0]=1;}
			satisfiable[60][0]=satisfiable[60][0] & ((x[60] ^ 0) | (x[ unit60_0[i][0] ] ^ unit60_0[i][1]) |(x[ unit60_0[i][2] ] ^ unit60_0[i][3]));
			}
		if(X_contra>0) L[60][0]=2;
		}
	//Check all rules of unit[60][1]
	L[60][1] = LargeX[60][0]>0 ? 1 : 0;
	satisfiable[60][1]=1; 
	for(int i=0;i<140;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit60_1[i][0] ][ unit60_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit60_1[i][2] ][ unit60_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit60_1[i][4] ][ unit60_1[i][5] ] >0);
		X_contra = ( LargeX[60][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit60_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[60][0]=0; L[60][1]=1;}
			satisfiable[60][1]=satisfiable[60][1] & ((x[60] ^ 1) | (x[ unit60_1[i][0] ] ^ unit60_1[i][1]) |(x[ unit60_1[i][2] ] ^ unit60_1[i][3]));
			}
		if(X_contra>0) L[60][1]=2;
		}
	//Check all rules of unit[61][0]
	L[61][0] = LargeX[61][1]>0 ? 1 : 0;
	satisfiable[61][0]=1; 
	for(int i=0;i<144;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit61_0[i][0] ][ unit61_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit61_0[i][2] ][ unit61_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit61_0[i][4] ][ unit61_0[i][5] ] >0);
		X_contra = ( LargeX[61][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit61_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[61][1]=0; L[61][0]=1;}
			satisfiable[61][0]=satisfiable[61][0] & ((x[61] ^ 0) | (x[ unit61_0[i][0] ] ^ unit61_0[i][1]) |(x[ unit61_0[i][2] ] ^ unit61_0[i][3]));
			}
		if(X_contra>0) L[61][0]=2;
		}
	//Check all rules of unit[61][1]
	L[61][1] = LargeX[61][0]>0 ? 1 : 0;
	satisfiable[61][1]=1; 
	for(int i=0;i<178;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit61_1[i][0] ][ unit61_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit61_1[i][2] ][ unit61_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit61_1[i][4] ][ unit61_1[i][5] ] >0);
		X_contra = ( LargeX[61][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit61_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[61][0]=0; L[61][1]=1;}
			satisfiable[61][1]=satisfiable[61][1] & ((x[61] ^ 1) | (x[ unit61_1[i][0] ] ^ unit61_1[i][1]) |(x[ unit61_1[i][2] ] ^ unit61_1[i][3]));
			}
		if(X_contra>0) L[61][1]=2;
		}
	//Check all rules of unit[62][0]
	L[62][0] = LargeX[62][1]>0 ? 1 : 0;
	satisfiable[62][0]=1; 
	for(int i=0;i<146;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit62_0[i][0] ][ unit62_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit62_0[i][2] ][ unit62_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit62_0[i][4] ][ unit62_0[i][5] ] >0);
		X_contra = ( LargeX[62][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit62_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[62][1]=0; L[62][0]=1;}
			satisfiable[62][0]=satisfiable[62][0] & ((x[62] ^ 0) | (x[ unit62_0[i][0] ] ^ unit62_0[i][1]) |(x[ unit62_0[i][2] ] ^ unit62_0[i][3]));
			}
		if(X_contra>0) L[62][0]=2;
		}
	//Check all rules of unit[62][1]
	L[62][1] = LargeX[62][0]>0 ? 1 : 0;
	satisfiable[62][1]=1; 
	for(int i=0;i<175;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit62_1[i][0] ][ unit62_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit62_1[i][2] ][ unit62_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit62_1[i][4] ][ unit62_1[i][5] ] >0);
		X_contra = ( LargeX[62][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit62_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[62][0]=0; L[62][1]=1;}
			satisfiable[62][1]=satisfiable[62][1] & ((x[62] ^ 1) | (x[ unit62_1[i][0] ] ^ unit62_1[i][1]) |(x[ unit62_1[i][2] ] ^ unit62_1[i][3]));
			}
		if(X_contra>0) L[62][1]=2;
		}
	//Check all rules of unit[63][0]
	L[63][0] = LargeX[63][1]>0 ? 1 : 0;
	satisfiable[63][0]=1; 
	for(int i=0;i<110;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit63_0[i][0] ][ unit63_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit63_0[i][2] ][ unit63_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit63_0[i][4] ][ unit63_0[i][5] ] >0);
		X_contra = ( LargeX[63][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit63_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[63][1]=0; L[63][0]=1;}
			satisfiable[63][0]=satisfiable[63][0] & ((x[63] ^ 0) | (x[ unit63_0[i][0] ] ^ unit63_0[i][1]) |(x[ unit63_0[i][2] ] ^ unit63_0[i][3]));
			}
		if(X_contra>0) L[63][0]=2;
		}
	//Check all rules of unit[63][1]
	L[63][1] = LargeX[63][0]>0 ? 1 : 0;
	satisfiable[63][1]=1; 
	for(int i=0;i<181;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit63_1[i][0] ][ unit63_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit63_1[i][2] ][ unit63_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit63_1[i][4] ][ unit63_1[i][5] ] >0);
		X_contra = ( LargeX[63][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit63_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[63][0]=0; L[63][1]=1;}
			satisfiable[63][1]=satisfiable[63][1] & ((x[63] ^ 1) | (x[ unit63_1[i][0] ] ^ unit63_1[i][1]) |(x[ unit63_1[i][2] ] ^ unit63_1[i][3]));
			}
		if(X_contra>0) L[63][1]=2;
		}
	//Check all rules of unit[64][0]
	L[64][0] = LargeX[64][1]>0 ? 1 : 0;
	satisfiable[64][0]=1; 
	for(int i=0;i<134;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit64_0[i][0] ][ unit64_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit64_0[i][2] ][ unit64_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit64_0[i][4] ][ unit64_0[i][5] ] >0);
		X_contra = ( LargeX[64][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit64_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[64][1]=0; L[64][0]=1;}
			satisfiable[64][0]=satisfiable[64][0] & ((x[64] ^ 0) | (x[ unit64_0[i][0] ] ^ unit64_0[i][1]) |(x[ unit64_0[i][2] ] ^ unit64_0[i][3]));
			}
		if(X_contra>0) L[64][0]=2;
		}
	//Check all rules of unit[64][1]
	L[64][1] = LargeX[64][0]>0 ? 1 : 0;
	satisfiable[64][1]=1; 
	for(int i=0;i<182;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit64_1[i][0] ][ unit64_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit64_1[i][2] ][ unit64_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit64_1[i][4] ][ unit64_1[i][5] ] >0);
		X_contra = ( LargeX[64][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit64_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[64][0]=0; L[64][1]=1;}
			satisfiable[64][1]=satisfiable[64][1] & ((x[64] ^ 1) | (x[ unit64_1[i][0] ] ^ unit64_1[i][1]) |(x[ unit64_1[i][2] ] ^ unit64_1[i][3]));
			}
		if(X_contra>0) L[64][1]=2;
		}
	//Check all rules of unit[65][0]
	L[65][0] = LargeX[65][1]>0 ? 1 : 0;
	satisfiable[65][0]=1; 
	for(int i=0;i<160;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit65_0[i][0] ][ unit65_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit65_0[i][2] ][ unit65_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit65_0[i][4] ][ unit65_0[i][5] ] >0);
		X_contra = ( LargeX[65][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit65_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[65][1]=0; L[65][0]=1;}
			satisfiable[65][0]=satisfiable[65][0] & ((x[65] ^ 0) | (x[ unit65_0[i][0] ] ^ unit65_0[i][1]) |(x[ unit65_0[i][2] ] ^ unit65_0[i][3]));
			}
		if(X_contra>0) L[65][0]=2;
		}
	//Check all rules of unit[65][1]
	L[65][1] = LargeX[65][0]>0 ? 1 : 0;
	satisfiable[65][1]=1; 
	for(int i=0;i<174;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit65_1[i][0] ][ unit65_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit65_1[i][2] ][ unit65_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit65_1[i][4] ][ unit65_1[i][5] ] >0);
		X_contra = ( LargeX[65][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit65_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[65][0]=0; L[65][1]=1;}
			satisfiable[65][1]=satisfiable[65][1] & ((x[65] ^ 1) | (x[ unit65_1[i][0] ] ^ unit65_1[i][1]) |(x[ unit65_1[i][2] ] ^ unit65_1[i][3]));
			}
		if(X_contra>0) L[65][1]=2;
		}
	//Check all rules of unit[66][0]
	L[66][0] = LargeX[66][1]>0 ? 1 : 0;
	satisfiable[66][0]=1; 
	for(int i=0;i<163;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit66_0[i][0] ][ unit66_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit66_0[i][2] ][ unit66_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit66_0[i][4] ][ unit66_0[i][5] ] >0);
		X_contra = ( LargeX[66][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit66_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[66][1]=0; L[66][0]=1;}
			satisfiable[66][0]=satisfiable[66][0] & ((x[66] ^ 0) | (x[ unit66_0[i][0] ] ^ unit66_0[i][1]) |(x[ unit66_0[i][2] ] ^ unit66_0[i][3]));
			}
		if(X_contra>0) L[66][0]=2;
		}
	//Check all rules of unit[66][1]
	L[66][1] = LargeX[66][0]>0 ? 1 : 0;
	satisfiable[66][1]=1; 
	for(int i=0;i<171;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit66_1[i][0] ][ unit66_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit66_1[i][2] ][ unit66_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit66_1[i][4] ][ unit66_1[i][5] ] >0);
		X_contra = ( LargeX[66][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit66_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[66][0]=0; L[66][1]=1;}
			satisfiable[66][1]=satisfiable[66][1] & ((x[66] ^ 1) | (x[ unit66_1[i][0] ] ^ unit66_1[i][1]) |(x[ unit66_1[i][2] ] ^ unit66_1[i][3]));
			}
		if(X_contra>0) L[66][1]=2;
		}
	//Check all rules of unit[67][0]
	L[67][0] = LargeX[67][1]>0 ? 1 : 0;
	satisfiable[67][0]=1; 
	for(int i=0;i<110;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit67_0[i][0] ][ unit67_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit67_0[i][2] ][ unit67_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit67_0[i][4] ][ unit67_0[i][5] ] >0);
		X_contra = ( LargeX[67][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit67_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[67][1]=0; L[67][0]=1;}
			satisfiable[67][0]=satisfiable[67][0] & ((x[67] ^ 0) | (x[ unit67_0[i][0] ] ^ unit67_0[i][1]) |(x[ unit67_0[i][2] ] ^ unit67_0[i][3]));
			}
		if(X_contra>0) L[67][0]=2;
		}
	//Check all rules of unit[67][1]
	L[67][1] = LargeX[67][0]>0 ? 1 : 0;
	satisfiable[67][1]=1; 
	for(int i=0;i<32;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit67_1[i][0] ][ unit67_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit67_1[i][2] ][ unit67_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit67_1[i][4] ][ unit67_1[i][5] ] >0);
		X_contra = ( LargeX[67][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit67_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[67][0]=0; L[67][1]=1;}
			satisfiable[67][1]=satisfiable[67][1] & ((x[67] ^ 1) | (x[ unit67_1[i][0] ] ^ unit67_1[i][1]) |(x[ unit67_1[i][2] ] ^ unit67_1[i][3]));
			}
		if(X_contra>0) L[67][1]=2;
		}
	//Check all rules of unit[68][0]
	L[68][0] = LargeX[68][1]>0 ? 1 : 0;
	satisfiable[68][0]=1; 
	for(int i=0;i<98;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit68_0[i][0] ][ unit68_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit68_0[i][2] ][ unit68_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit68_0[i][4] ][ unit68_0[i][5] ] >0);
		X_contra = ( LargeX[68][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit68_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[68][1]=0; L[68][0]=1;}
			satisfiable[68][0]=satisfiable[68][0] & ((x[68] ^ 0) | (x[ unit68_0[i][0] ] ^ unit68_0[i][1]) |(x[ unit68_0[i][2] ] ^ unit68_0[i][3]));
			}
		if(X_contra>0) L[68][0]=2;
		}
	//Check all rules of unit[68][1]
	L[68][1] = LargeX[68][0]>0 ? 1 : 0;
	satisfiable[68][1]=1; 
	for(int i=0;i<56;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit68_1[i][0] ][ unit68_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit68_1[i][2] ][ unit68_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit68_1[i][4] ][ unit68_1[i][5] ] >0);
		X_contra = ( LargeX[68][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit68_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[68][0]=0; L[68][1]=1;}
			satisfiable[68][1]=satisfiable[68][1] & ((x[68] ^ 1) | (x[ unit68_1[i][0] ] ^ unit68_1[i][1]) |(x[ unit68_1[i][2] ] ^ unit68_1[i][3]));
			}
		if(X_contra>0) L[68][1]=2;
		}
	//Check all rules of unit[69][0]
	L[69][0] = LargeX[69][1]>0 ? 1 : 0;
	satisfiable[69][0]=1; 
	for(int i=0;i<153;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit69_0[i][0] ][ unit69_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit69_0[i][2] ][ unit69_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit69_0[i][4] ][ unit69_0[i][5] ] >0);
		X_contra = ( LargeX[69][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit69_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[69][1]=0; L[69][0]=1;}
			satisfiable[69][0]=satisfiable[69][0] & ((x[69] ^ 0) | (x[ unit69_0[i][0] ] ^ unit69_0[i][1]) |(x[ unit69_0[i][2] ] ^ unit69_0[i][3]));
			}
		if(X_contra>0) L[69][0]=2;
		}
	//Check all rules of unit[69][1]
	L[69][1] = LargeX[69][0]>0 ? 1 : 0;
	satisfiable[69][1]=1; 
	for(int i=0;i<81;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit69_1[i][0] ][ unit69_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit69_1[i][2] ][ unit69_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit69_1[i][4] ][ unit69_1[i][5] ] >0);
		X_contra = ( LargeX[69][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit69_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[69][0]=0; L[69][1]=1;}
			satisfiable[69][1]=satisfiable[69][1] & ((x[69] ^ 1) | (x[ unit69_1[i][0] ] ^ unit69_1[i][1]) |(x[ unit69_1[i][2] ] ^ unit69_1[i][3]));
			}
		if(X_contra>0) L[69][1]=2;
		}
	//Check all rules of unit[70][0]
	L[70][0] = LargeX[70][1]>0 ? 1 : 0;
	satisfiable[70][0]=1; 
	for(int i=0;i<148;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit70_0[i][0] ][ unit70_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit70_0[i][2] ][ unit70_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit70_0[i][4] ][ unit70_0[i][5] ] >0);
		X_contra = ( LargeX[70][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit70_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[70][1]=0; L[70][0]=1;}
			satisfiable[70][0]=satisfiable[70][0] & ((x[70] ^ 0) | (x[ unit70_0[i][0] ] ^ unit70_0[i][1]) |(x[ unit70_0[i][2] ] ^ unit70_0[i][3]));
			}
		if(X_contra>0) L[70][0]=2;
		}
	//Check all rules of unit[70][1]
	L[70][1] = LargeX[70][0]>0 ? 1 : 0;
	satisfiable[70][1]=1; 
	for(int i=0;i<106;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit70_1[i][0] ][ unit70_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit70_1[i][2] ][ unit70_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit70_1[i][4] ][ unit70_1[i][5] ] >0);
		X_contra = ( LargeX[70][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit70_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[70][0]=0; L[70][1]=1;}
			satisfiable[70][1]=satisfiable[70][1] & ((x[70] ^ 1) | (x[ unit70_1[i][0] ] ^ unit70_1[i][1]) |(x[ unit70_1[i][2] ] ^ unit70_1[i][3]));
			}
		if(X_contra>0) L[70][1]=2;
		}
	//Check all rules of unit[71][0]
	L[71][0] = LargeX[71][1]>0 ? 1 : 0;
	satisfiable[71][0]=1; 
	for(int i=0;i<209;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit71_0[i][0] ][ unit71_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit71_0[i][2] ][ unit71_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit71_0[i][4] ][ unit71_0[i][5] ] >0);
		X_contra = ( LargeX[71][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit71_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[71][1]=0; L[71][0]=1;}
			satisfiable[71][0]=satisfiable[71][0] & ((x[71] ^ 0) | (x[ unit71_0[i][0] ] ^ unit71_0[i][1]) |(x[ unit71_0[i][2] ] ^ unit71_0[i][3]));
			}
		if(X_contra>0) L[71][0]=2;
		}
	//Check all rules of unit[71][1]
	L[71][1] = LargeX[71][0]>0 ? 1 : 0;
	satisfiable[71][1]=1; 
	for(int i=0;i<129;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit71_1[i][0] ][ unit71_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit71_1[i][2] ][ unit71_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit71_1[i][4] ][ unit71_1[i][5] ] >0);
		X_contra = ( LargeX[71][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit71_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[71][0]=0; L[71][1]=1;}
			satisfiable[71][1]=satisfiable[71][1] & ((x[71] ^ 1) | (x[ unit71_1[i][0] ] ^ unit71_1[i][1]) |(x[ unit71_1[i][2] ] ^ unit71_1[i][3]));
			}
		if(X_contra>0) L[71][1]=2;
		}
	//Check all rules of unit[72][0]
	L[72][0] = LargeX[72][1]>0 ? 1 : 0;
	satisfiable[72][0]=1; 
	for(int i=0;i<132;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit72_0[i][0] ][ unit72_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit72_0[i][2] ][ unit72_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit72_0[i][4] ][ unit72_0[i][5] ] >0);
		X_contra = ( LargeX[72][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit72_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[72][1]=0; L[72][0]=1;}
			satisfiable[72][0]=satisfiable[72][0] & ((x[72] ^ 0) | (x[ unit72_0[i][0] ] ^ unit72_0[i][1]) |(x[ unit72_0[i][2] ] ^ unit72_0[i][3]));
			}
		if(X_contra>0) L[72][0]=2;
		}
	//Check all rules of unit[72][1]
	L[72][1] = LargeX[72][0]>0 ? 1 : 0;
	satisfiable[72][1]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit72_1[i][0] ][ unit72_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit72_1[i][2] ][ unit72_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit72_1[i][4] ][ unit72_1[i][5] ] >0);
		X_contra = ( LargeX[72][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit72_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[72][0]=0; L[72][1]=1;}
			satisfiable[72][1]=satisfiable[72][1] & ((x[72] ^ 1) | (x[ unit72_1[i][0] ] ^ unit72_1[i][1]) |(x[ unit72_1[i][2] ] ^ unit72_1[i][3]));
			}
		if(X_contra>0) L[72][1]=2;
		}
	//Check all rules of unit[81][0]
	L[81][0] = LargeX[81][1]>0 ? 1 : 0;
	satisfiable[81][0]=1; 
	for(int i=0;i<13;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit81_0[i][0] ][ unit81_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit81_0[i][2] ][ unit81_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit81_0[i][4] ][ unit81_0[i][5] ] >0);
		X_contra = ( LargeX[81][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit81_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[81][1]=0; L[81][0]=1;}
			satisfiable[81][0]=satisfiable[81][0] & ((x[81] ^ 0) | (x[ unit81_0[i][0] ] ^ unit81_0[i][1]) |(x[ unit81_0[i][2] ] ^ unit81_0[i][3]));
			}
		if(X_contra>0) L[81][0]=2;
		}
	//Check all rules of unit[81][1]
	L[81][1] = LargeX[81][0]>0 ? 1 : 0;
	satisfiable[81][1]=1; 
	for(int i=0;i<36;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit81_1[i][0] ][ unit81_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit81_1[i][2] ][ unit81_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit81_1[i][4] ][ unit81_1[i][5] ] >0);
		X_contra = ( LargeX[81][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit81_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[81][0]=0; L[81][1]=1;}
			satisfiable[81][1]=satisfiable[81][1] & ((x[81] ^ 1) | (x[ unit81_1[i][0] ] ^ unit81_1[i][1]) |(x[ unit81_1[i][2] ] ^ unit81_1[i][3]));
			}
		if(X_contra>0) L[81][1]=2;
		}
	//Check all rules of unit[82][0]
	L[82][0] = LargeX[82][1]>0 ? 1 : 0;
	satisfiable[82][0]=1; 
	for(int i=0;i<15;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit82_0[i][0] ][ unit82_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit82_0[i][2] ][ unit82_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit82_0[i][4] ][ unit82_0[i][5] ] >0);
		X_contra = ( LargeX[82][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit82_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[82][1]=0; L[82][0]=1;}
			satisfiable[82][0]=satisfiable[82][0] & ((x[82] ^ 0) | (x[ unit82_0[i][0] ] ^ unit82_0[i][1]) |(x[ unit82_0[i][2] ] ^ unit82_0[i][3]));
			}
		if(X_contra>0) L[82][0]=2;
		}
	//Check all rules of unit[82][1]
	L[82][1] = LargeX[82][0]>0 ? 1 : 0;
	satisfiable[82][1]=1; 
	for(int i=0;i<27;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit82_1[i][0] ][ unit82_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit82_1[i][2] ][ unit82_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit82_1[i][4] ][ unit82_1[i][5] ] >0);
		X_contra = ( LargeX[82][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit82_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[82][0]=0; L[82][1]=1;}
			satisfiable[82][1]=satisfiable[82][1] & ((x[82] ^ 1) | (x[ unit82_1[i][0] ] ^ unit82_1[i][1]) |(x[ unit82_1[i][2] ] ^ unit82_1[i][3]));
			}
		if(X_contra>0) L[82][1]=2;
		}
	//Check all rules of unit[85][0]
	L[85][0] = LargeX[85][1]>0 ? 1 : 0;
	satisfiable[85][0]=1; 
	for(int i=0;i<74;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit85_0[i][0] ][ unit85_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit85_0[i][2] ][ unit85_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit85_0[i][4] ][ unit85_0[i][5] ] >0);
		X_contra = ( LargeX[85][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit85_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[85][1]=0; L[85][0]=1;}
			satisfiable[85][0]=satisfiable[85][0] & ((x[85] ^ 0) | (x[ unit85_0[i][0] ] ^ unit85_0[i][1]) |(x[ unit85_0[i][2] ] ^ unit85_0[i][3]));
			}
		if(X_contra>0) L[85][0]=2;
		}
	//Check all rules of unit[85][1]
	L[85][1] = LargeX[85][0]>0 ? 1 : 0;
	satisfiable[85][1]=1; 
	for(int i=0;i<142;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit85_1[i][0] ][ unit85_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit85_1[i][2] ][ unit85_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit85_1[i][4] ][ unit85_1[i][5] ] >0);
		X_contra = ( LargeX[85][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit85_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[85][0]=0; L[85][1]=1;}
			satisfiable[85][1]=satisfiable[85][1] & ((x[85] ^ 1) | (x[ unit85_1[i][0] ] ^ unit85_1[i][1]) |(x[ unit85_1[i][2] ] ^ unit85_1[i][3]));
			}
		if(X_contra>0) L[85][1]=2;
		}
	//Check all rules of unit[86][0]
	L[86][0] = LargeX[86][1]>0 ? 1 : 0;
	satisfiable[86][0]=1; 
	for(int i=0;i<80;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit86_0[i][0] ][ unit86_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit86_0[i][2] ][ unit86_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit86_0[i][4] ][ unit86_0[i][5] ] >0);
		X_contra = ( LargeX[86][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit86_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[86][1]=0; L[86][0]=1;}
			satisfiable[86][0]=satisfiable[86][0] & ((x[86] ^ 0) | (x[ unit86_0[i][0] ] ^ unit86_0[i][1]) |(x[ unit86_0[i][2] ] ^ unit86_0[i][3]));
			}
		if(X_contra>0) L[86][0]=2;
		}
	//Check all rules of unit[86][1]
	L[86][1] = LargeX[86][0]>0 ? 1 : 0;
	satisfiable[86][1]=1; 
	for(int i=0;i<118;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit86_1[i][0] ][ unit86_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit86_1[i][2] ][ unit86_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit86_1[i][4] ][ unit86_1[i][5] ] >0);
		X_contra = ( LargeX[86][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit86_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[86][0]=0; L[86][1]=1;}
			satisfiable[86][1]=satisfiable[86][1] & ((x[86] ^ 1) | (x[ unit86_1[i][0] ] ^ unit86_1[i][1]) |(x[ unit86_1[i][2] ] ^ unit86_1[i][3]));
			}
		if(X_contra>0) L[86][1]=2;
		}
	//Check all rules of unit[87][0]
	L[87][0] = LargeX[87][1]>0 ? 1 : 0;
	satisfiable[87][0]=1; 
	for(int i=0;i<69;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit87_0[i][0] ][ unit87_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit87_0[i][2] ][ unit87_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit87_0[i][4] ][ unit87_0[i][5] ] >0);
		X_contra = ( LargeX[87][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit87_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[87][1]=0; L[87][0]=1;}
			satisfiable[87][0]=satisfiable[87][0] & ((x[87] ^ 0) | (x[ unit87_0[i][0] ] ^ unit87_0[i][1]) |(x[ unit87_0[i][2] ] ^ unit87_0[i][3]));
			}
		if(X_contra>0) L[87][0]=2;
		}
	//Check all rules of unit[87][1]
	L[87][1] = LargeX[87][0]>0 ? 1 : 0;
	satisfiable[87][1]=1; 
	for(int i=0;i<82;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit87_1[i][0] ][ unit87_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit87_1[i][2] ][ unit87_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit87_1[i][4] ][ unit87_1[i][5] ] >0);
		X_contra = ( LargeX[87][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit87_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[87][0]=0; L[87][1]=1;}
			satisfiable[87][1]=satisfiable[87][1] & ((x[87] ^ 1) | (x[ unit87_1[i][0] ] ^ unit87_1[i][1]) |(x[ unit87_1[i][2] ] ^ unit87_1[i][3]));
			}
		if(X_contra>0) L[87][1]=2;
		}
	//Check all rules of unit[88][0]
	L[88][0] = LargeX[88][1]>0 ? 1 : 0;
	satisfiable[88][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit88_0[i][0] ][ unit88_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit88_0[i][2] ][ unit88_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit88_0[i][4] ][ unit88_0[i][5] ] >0);
		X_contra = ( LargeX[88][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit88_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[88][1]=0; L[88][0]=1;}
			satisfiable[88][0]=satisfiable[88][0] & ((x[88] ^ 0) | (x[ unit88_0[i][0] ] ^ unit88_0[i][1]) |(x[ unit88_0[i][2] ] ^ unit88_0[i][3]));
			}
		if(X_contra>0) L[88][0]=2;
		}
	//Check all rules of unit[88][1]
	L[88][1] = LargeX[88][0]>0 ? 1 : 0;
	satisfiable[88][1]=1; 
	for(int i=0;i<74;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit88_1[i][0] ][ unit88_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit88_1[i][2] ][ unit88_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit88_1[i][4] ][ unit88_1[i][5] ] >0);
		X_contra = ( LargeX[88][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit88_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[88][0]=0; L[88][1]=1;}
			satisfiable[88][1]=satisfiable[88][1] & ((x[88] ^ 1) | (x[ unit88_1[i][0] ] ^ unit88_1[i][1]) |(x[ unit88_1[i][2] ] ^ unit88_1[i][3]));
			}
		if(X_contra>0) L[88][1]=2;
		}
	//Check all rules of unit[89][0]
	L[89][0] = LargeX[89][1]>0 ? 1 : 0;
	satisfiable[89][0]=1; 
	for(int i=0;i<63;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit89_0[i][0] ][ unit89_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit89_0[i][2] ][ unit89_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit89_0[i][4] ][ unit89_0[i][5] ] >0);
		X_contra = ( LargeX[89][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit89_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[89][1]=0; L[89][0]=1;}
			satisfiable[89][0]=satisfiable[89][0] & ((x[89] ^ 0) | (x[ unit89_0[i][0] ] ^ unit89_0[i][1]) |(x[ unit89_0[i][2] ] ^ unit89_0[i][3]));
			}
		if(X_contra>0) L[89][0]=2;
		}
	//Check all rules of unit[89][1]
	L[89][1] = LargeX[89][0]>0 ? 1 : 0;
	satisfiable[89][1]=1; 
	for(int i=0;i<66;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit89_1[i][0] ][ unit89_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit89_1[i][2] ][ unit89_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit89_1[i][4] ][ unit89_1[i][5] ] >0);
		X_contra = ( LargeX[89][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit89_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[89][0]=0; L[89][1]=1;}
			satisfiable[89][1]=satisfiable[89][1] & ((x[89] ^ 1) | (x[ unit89_1[i][0] ] ^ unit89_1[i][1]) |(x[ unit89_1[i][2] ] ^ unit89_1[i][3]));
			}
		if(X_contra>0) L[89][1]=2;
		}
	//Check all rules of unit[90][0]
	L[90][0] = LargeX[90][1]>0 ? 1 : 0;
	satisfiable[90][0]=1; 
	for(int i=0;i<67;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit90_0[i][0] ][ unit90_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit90_0[i][2] ][ unit90_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit90_0[i][4] ][ unit90_0[i][5] ] >0);
		X_contra = ( LargeX[90][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit90_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[90][1]=0; L[90][0]=1;}
			satisfiable[90][0]=satisfiable[90][0] & ((x[90] ^ 0) | (x[ unit90_0[i][0] ] ^ unit90_0[i][1]) |(x[ unit90_0[i][2] ] ^ unit90_0[i][3]));
			}
		if(X_contra>0) L[90][0]=2;
		}
	//Check all rules of unit[90][1]
	L[90][1] = LargeX[90][0]>0 ? 1 : 0;
	satisfiable[90][1]=1; 
	for(int i=0;i<48;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit90_1[i][0] ][ unit90_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit90_1[i][2] ][ unit90_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit90_1[i][4] ][ unit90_1[i][5] ] >0);
		X_contra = ( LargeX[90][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit90_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[90][0]=0; L[90][1]=1;}
			satisfiable[90][1]=satisfiable[90][1] & ((x[90] ^ 1) | (x[ unit90_1[i][0] ] ^ unit90_1[i][1]) |(x[ unit90_1[i][2] ] ^ unit90_1[i][3]));
			}
		if(X_contra>0) L[90][1]=2;
		}
	//Check all rules of unit[91][0]
	L[91][0] = LargeX[91][1]>0 ? 1 : 0;
	satisfiable[91][0]=1; 
	for(int i=0;i<91;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit91_0[i][0] ][ unit91_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit91_0[i][2] ][ unit91_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit91_0[i][4] ][ unit91_0[i][5] ] >0);
		X_contra = ( LargeX[91][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit91_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[91][1]=0; L[91][0]=1;}
			satisfiable[91][0]=satisfiable[91][0] & ((x[91] ^ 0) | (x[ unit91_0[i][0] ] ^ unit91_0[i][1]) |(x[ unit91_0[i][2] ] ^ unit91_0[i][3]));
			}
		if(X_contra>0) L[91][0]=2;
		}
	//Check all rules of unit[91][1]
	L[91][1] = LargeX[91][0]>0 ? 1 : 0;
	satisfiable[91][1]=1; 
	for(int i=0;i<165;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit91_1[i][0] ][ unit91_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit91_1[i][2] ][ unit91_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit91_1[i][4] ][ unit91_1[i][5] ] >0);
		X_contra = ( LargeX[91][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit91_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[91][0]=0; L[91][1]=1;}
			satisfiable[91][1]=satisfiable[91][1] & ((x[91] ^ 1) | (x[ unit91_1[i][0] ] ^ unit91_1[i][1]) |(x[ unit91_1[i][2] ] ^ unit91_1[i][3]));
			}
		if(X_contra>0) L[91][1]=2;
		}
	//Check all rules of unit[92][0]
	L[92][0] = LargeX[92][1]>0 ? 1 : 0;
	satisfiable[92][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit92_0[i][0] ][ unit92_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit92_0[i][2] ][ unit92_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit92_0[i][4] ][ unit92_0[i][5] ] >0);
		X_contra = ( LargeX[92][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit92_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[92][1]=0; L[92][0]=1;}
			satisfiable[92][0]=satisfiable[92][0] & ((x[92] ^ 0) | (x[ unit92_0[i][0] ] ^ unit92_0[i][1]) |(x[ unit92_0[i][2] ] ^ unit92_0[i][3]));
			}
		if(X_contra>0) L[92][0]=2;
		}
	//Check all rules of unit[92][1]
	L[92][1] = LargeX[92][0]>0 ? 1 : 0;
	satisfiable[92][1]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit92_1[i][0] ][ unit92_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit92_1[i][2] ][ unit92_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit92_1[i][4] ][ unit92_1[i][5] ] >0);
		X_contra = ( LargeX[92][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit92_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[92][0]=0; L[92][1]=1;}
			satisfiable[92][1]=satisfiable[92][1] & ((x[92] ^ 1) | (x[ unit92_1[i][0] ] ^ unit92_1[i][1]) |(x[ unit92_1[i][2] ] ^ unit92_1[i][3]));
			}
		if(X_contra>0) L[92][1]=2;
		}
	//Check all rules of unit[93][0]
	L[93][0] = LargeX[93][1]>0 ? 1 : 0;
	satisfiable[93][0]=1; 
	for(int i=0;i<89;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit93_0[i][0] ][ unit93_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit93_0[i][2] ][ unit93_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit93_0[i][4] ][ unit93_0[i][5] ] >0);
		X_contra = ( LargeX[93][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit93_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[93][1]=0; L[93][0]=1;}
			satisfiable[93][0]=satisfiable[93][0] & ((x[93] ^ 0) | (x[ unit93_0[i][0] ] ^ unit93_0[i][1]) |(x[ unit93_0[i][2] ] ^ unit93_0[i][3]));
			}
		if(X_contra>0) L[93][0]=2;
		}
	//Check all rules of unit[93][1]
	L[93][1] = LargeX[93][0]>0 ? 1 : 0;
	satisfiable[93][1]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit93_1[i][0] ][ unit93_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit93_1[i][2] ][ unit93_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit93_1[i][4] ][ unit93_1[i][5] ] >0);
		X_contra = ( LargeX[93][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit93_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[93][0]=0; L[93][1]=1;}
			satisfiable[93][1]=satisfiable[93][1] & ((x[93] ^ 1) | (x[ unit93_1[i][0] ] ^ unit93_1[i][1]) |(x[ unit93_1[i][2] ] ^ unit93_1[i][3]));
			}
		if(X_contra>0) L[93][1]=2;
		}
	//Check all rules of unit[94][0]
	L[94][0] = LargeX[94][1]>0 ? 1 : 0;
	satisfiable[94][0]=1; 
	for(int i=0;i<91;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit94_0[i][0] ][ unit94_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit94_0[i][2] ][ unit94_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit94_0[i][4] ][ unit94_0[i][5] ] >0);
		X_contra = ( LargeX[94][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit94_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[94][1]=0; L[94][0]=1;}
			satisfiable[94][0]=satisfiable[94][0] & ((x[94] ^ 0) | (x[ unit94_0[i][0] ] ^ unit94_0[i][1]) |(x[ unit94_0[i][2] ] ^ unit94_0[i][3]));
			}
		if(X_contra>0) L[94][0]=2;
		}
	//Check all rules of unit[94][1]
	L[94][1] = LargeX[94][0]>0 ? 1 : 0;
	satisfiable[94][1]=1; 
	for(int i=0;i<150;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit94_1[i][0] ][ unit94_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit94_1[i][2] ][ unit94_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit94_1[i][4] ][ unit94_1[i][5] ] >0);
		X_contra = ( LargeX[94][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit94_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[94][0]=0; L[94][1]=1;}
			satisfiable[94][1]=satisfiable[94][1] & ((x[94] ^ 1) | (x[ unit94_1[i][0] ] ^ unit94_1[i][1]) |(x[ unit94_1[i][2] ] ^ unit94_1[i][3]));
			}
		if(X_contra>0) L[94][1]=2;
		}
	//Check all rules of unit[95][0]
	L[95][0] = LargeX[95][1]>0 ? 1 : 0;
	satisfiable[95][0]=1; 
	for(int i=0;i<88;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit95_0[i][0] ][ unit95_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit95_0[i][2] ][ unit95_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit95_0[i][4] ][ unit95_0[i][5] ] >0);
		X_contra = ( LargeX[95][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit95_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[95][1]=0; L[95][0]=1;}
			satisfiable[95][0]=satisfiable[95][0] & ((x[95] ^ 0) | (x[ unit95_0[i][0] ] ^ unit95_0[i][1]) |(x[ unit95_0[i][2] ] ^ unit95_0[i][3]));
			}
		if(X_contra>0) L[95][0]=2;
		}
	//Check all rules of unit[95][1]
	L[95][1] = LargeX[95][0]>0 ? 1 : 0;
	satisfiable[95][1]=1; 
	for(int i=0;i<146;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit95_1[i][0] ][ unit95_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit95_1[i][2] ][ unit95_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit95_1[i][4] ][ unit95_1[i][5] ] >0);
		X_contra = ( LargeX[95][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit95_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[95][0]=0; L[95][1]=1;}
			satisfiable[95][1]=satisfiable[95][1] & ((x[95] ^ 1) | (x[ unit95_1[i][0] ] ^ unit95_1[i][1]) |(x[ unit95_1[i][2] ] ^ unit95_1[i][3]));
			}
		if(X_contra>0) L[95][1]=2;
		}
	//Check all rules of unit[96][0]
	L[96][0] = LargeX[96][1]>0 ? 1 : 0;
	satisfiable[96][0]=1; 
	for(int i=0;i<89;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit96_0[i][0] ][ unit96_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit96_0[i][2] ][ unit96_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit96_0[i][4] ][ unit96_0[i][5] ] >0);
		X_contra = ( LargeX[96][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit96_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[96][1]=0; L[96][0]=1;}
			satisfiable[96][0]=satisfiable[96][0] & ((x[96] ^ 0) | (x[ unit96_0[i][0] ] ^ unit96_0[i][1]) |(x[ unit96_0[i][2] ] ^ unit96_0[i][3]));
			}
		if(X_contra>0) L[96][0]=2;
		}
	//Check all rules of unit[96][1]
	L[96][1] = LargeX[96][0]>0 ? 1 : 0;
	satisfiable[96][1]=1; 
	for(int i=0;i<143;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit96_1[i][0] ][ unit96_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit96_1[i][2] ][ unit96_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit96_1[i][4] ][ unit96_1[i][5] ] >0);
		X_contra = ( LargeX[96][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit96_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[96][0]=0; L[96][1]=1;}
			satisfiable[96][1]=satisfiable[96][1] & ((x[96] ^ 1) | (x[ unit96_1[i][0] ] ^ unit96_1[i][1]) |(x[ unit96_1[i][2] ] ^ unit96_1[i][3]));
			}
		if(X_contra>0) L[96][1]=2;
		}
	//Check all rules of unit[97][0]
	L[97][0] = LargeX[97][1]>0 ? 1 : 0;
	satisfiable[97][0]=1; 
	for(int i=0;i<94;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit97_0[i][0] ][ unit97_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit97_0[i][2] ][ unit97_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit97_0[i][4] ][ unit97_0[i][5] ] >0);
		X_contra = ( LargeX[97][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit97_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[97][1]=0; L[97][0]=1;}
			satisfiable[97][0]=satisfiable[97][0] & ((x[97] ^ 0) | (x[ unit97_0[i][0] ] ^ unit97_0[i][1]) |(x[ unit97_0[i][2] ] ^ unit97_0[i][3]));
			}
		if(X_contra>0) L[97][0]=2;
		}
	//Check all rules of unit[97][1]
	L[97][1] = LargeX[97][0]>0 ? 1 : 0;
	satisfiable[97][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit97_1[i][0] ][ unit97_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit97_1[i][2] ][ unit97_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit97_1[i][4] ][ unit97_1[i][5] ] >0);
		X_contra = ( LargeX[97][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit97_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[97][0]=0; L[97][1]=1;}
			satisfiable[97][1]=satisfiable[97][1] & ((x[97] ^ 1) | (x[ unit97_1[i][0] ] ^ unit97_1[i][1]) |(x[ unit97_1[i][2] ] ^ unit97_1[i][3]));
			}
		if(X_contra>0) L[97][1]=2;
		}
	//Check all rules of unit[98][0]
	L[98][0] = LargeX[98][1]>0 ? 1 : 0;
	satisfiable[98][0]=1; 
	for(int i=0;i<95;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit98_0[i][0] ][ unit98_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit98_0[i][2] ][ unit98_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit98_0[i][4] ][ unit98_0[i][5] ] >0);
		X_contra = ( LargeX[98][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit98_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[98][1]=0; L[98][0]=1;}
			satisfiable[98][0]=satisfiable[98][0] & ((x[98] ^ 0) | (x[ unit98_0[i][0] ] ^ unit98_0[i][1]) |(x[ unit98_0[i][2] ] ^ unit98_0[i][3]));
			}
		if(X_contra>0) L[98][0]=2;
		}
	//Check all rules of unit[98][1]
	L[98][1] = LargeX[98][0]>0 ? 1 : 0;
	satisfiable[98][1]=1; 
	for(int i=0;i<175;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit98_1[i][0] ][ unit98_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit98_1[i][2] ][ unit98_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit98_1[i][4] ][ unit98_1[i][5] ] >0);
		X_contra = ( LargeX[98][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit98_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[98][0]=0; L[98][1]=1;}
			satisfiable[98][1]=satisfiable[98][1] & ((x[98] ^ 1) | (x[ unit98_1[i][0] ] ^ unit98_1[i][1]) |(x[ unit98_1[i][2] ] ^ unit98_1[i][3]));
			}
		if(X_contra>0) L[98][1]=2;
		}
	//Check all rules of unit[99][0]
	L[99][0] = LargeX[99][1]>0 ? 1 : 0;
	satisfiable[99][0]=1; 
	for(int i=0;i<59;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit99_0[i][0] ][ unit99_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit99_0[i][2] ][ unit99_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit99_0[i][4] ][ unit99_0[i][5] ] >0);
		X_contra = ( LargeX[99][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit99_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[99][1]=0; L[99][0]=1;}
			satisfiable[99][0]=satisfiable[99][0] & ((x[99] ^ 0) | (x[ unit99_0[i][0] ] ^ unit99_0[i][1]) |(x[ unit99_0[i][2] ] ^ unit99_0[i][3]));
			}
		if(X_contra>0) L[99][0]=2;
		}
	//Check all rules of unit[99][1]
	L[99][1] = LargeX[99][0]>0 ? 1 : 0;
	satisfiable[99][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit99_1[i][0] ][ unit99_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit99_1[i][2] ][ unit99_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit99_1[i][4] ][ unit99_1[i][5] ] >0);
		X_contra = ( LargeX[99][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit99_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[99][0]=0; L[99][1]=1;}
			satisfiable[99][1]=satisfiable[99][1] & ((x[99] ^ 1) | (x[ unit99_1[i][0] ] ^ unit99_1[i][1]) |(x[ unit99_1[i][2] ] ^ unit99_1[i][3]));
			}
		if(X_contra>0) L[99][1]=2;
		}
	//Check all rules of unit[100][0]
	L[100][0] = LargeX[100][1]>0 ? 1 : 0;
	satisfiable[100][0]=1; 
	for(int i=0;i<59;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit100_0[i][0] ][ unit100_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit100_0[i][2] ][ unit100_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit100_0[i][4] ][ unit100_0[i][5] ] >0);
		X_contra = ( LargeX[100][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit100_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[100][1]=0; L[100][0]=1;}
			satisfiable[100][0]=satisfiable[100][0] & ((x[100] ^ 0) | (x[ unit100_0[i][0] ] ^ unit100_0[i][1]) |(x[ unit100_0[i][2] ] ^ unit100_0[i][3]));
			}
		if(X_contra>0) L[100][0]=2;
		}
	//Check all rules of unit[100][1]
	L[100][1] = LargeX[100][0]>0 ? 1 : 0;
	satisfiable[100][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit100_1[i][0] ][ unit100_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit100_1[i][2] ][ unit100_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit100_1[i][4] ][ unit100_1[i][5] ] >0);
		X_contra = ( LargeX[100][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit100_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[100][0]=0; L[100][1]=1;}
			satisfiable[100][1]=satisfiable[100][1] & ((x[100] ^ 1) | (x[ unit100_1[i][0] ] ^ unit100_1[i][1]) |(x[ unit100_1[i][2] ] ^ unit100_1[i][3]));
			}
		if(X_contra>0) L[100][1]=2;
		}
	//Check all rules of unit[101][0]
	L[101][0] = LargeX[101][1]>0 ? 1 : 0;
	satisfiable[101][0]=1; 
	for(int i=0;i<67;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit101_0[i][0] ][ unit101_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit101_0[i][2] ][ unit101_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit101_0[i][4] ][ unit101_0[i][5] ] >0);
		X_contra = ( LargeX[101][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit101_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[101][1]=0; L[101][0]=1;}
			satisfiable[101][0]=satisfiable[101][0] & ((x[101] ^ 0) | (x[ unit101_0[i][0] ] ^ unit101_0[i][1]) |(x[ unit101_0[i][2] ] ^ unit101_0[i][3]));
			}
		if(X_contra>0) L[101][0]=2;
		}
	//Check all rules of unit[101][1]
	L[101][1] = LargeX[101][0]>0 ? 1 : 0;
	satisfiable[101][1]=1; 
	for(int i=0;i<173;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit101_1[i][0] ][ unit101_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit101_1[i][2] ][ unit101_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit101_1[i][4] ][ unit101_1[i][5] ] >0);
		X_contra = ( LargeX[101][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit101_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[101][0]=0; L[101][1]=1;}
			satisfiable[101][1]=satisfiable[101][1] & ((x[101] ^ 1) | (x[ unit101_1[i][0] ] ^ unit101_1[i][1]) |(x[ unit101_1[i][2] ] ^ unit101_1[i][3]));
			}
		if(X_contra>0) L[101][1]=2;
		}
	//Check all rules of unit[102][0]
	L[102][0] = LargeX[102][1]>0 ? 1 : 0;
	satisfiable[102][0]=1; 
	for(int i=0;i<66;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit102_0[i][0] ][ unit102_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit102_0[i][2] ][ unit102_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit102_0[i][4] ][ unit102_0[i][5] ] >0);
		X_contra = ( LargeX[102][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit102_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[102][1]=0; L[102][0]=1;}
			satisfiable[102][0]=satisfiable[102][0] & ((x[102] ^ 0) | (x[ unit102_0[i][0] ] ^ unit102_0[i][1]) |(x[ unit102_0[i][2] ] ^ unit102_0[i][3]));
			}
		if(X_contra>0) L[102][0]=2;
		}
	//Check all rules of unit[102][1]
	L[102][1] = LargeX[102][0]>0 ? 1 : 0;
	satisfiable[102][1]=1; 
	for(int i=0;i<170;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit102_1[i][0] ][ unit102_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit102_1[i][2] ][ unit102_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit102_1[i][4] ][ unit102_1[i][5] ] >0);
		X_contra = ( LargeX[102][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit102_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[102][0]=0; L[102][1]=1;}
			satisfiable[102][1]=satisfiable[102][1] & ((x[102] ^ 1) | (x[ unit102_1[i][0] ] ^ unit102_1[i][1]) |(x[ unit102_1[i][2] ] ^ unit102_1[i][3]));
			}
		if(X_contra>0) L[102][1]=2;
		}
	//Check all rules of unit[103][0]
	L[103][0] = LargeX[103][1]>0 ? 1 : 0;
	satisfiable[103][0]=1; 
	for(int i=0;i<43;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit103_0[i][0] ][ unit103_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit103_0[i][2] ][ unit103_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit103_0[i][4] ][ unit103_0[i][5] ] >0);
		X_contra = ( LargeX[103][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit103_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[103][1]=0; L[103][0]=1;}
			satisfiable[103][0]=satisfiable[103][0] & ((x[103] ^ 0) | (x[ unit103_0[i][0] ] ^ unit103_0[i][1]) |(x[ unit103_0[i][2] ] ^ unit103_0[i][3]));
			}
		if(X_contra>0) L[103][0]=2;
		}
	//Check all rules of unit[103][1]
	L[103][1] = LargeX[103][0]>0 ? 1 : 0;
	satisfiable[103][1]=1; 
	for(int i=0;i<33;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit103_1[i][0] ][ unit103_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit103_1[i][2] ][ unit103_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit103_1[i][4] ][ unit103_1[i][5] ] >0);
		X_contra = ( LargeX[103][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit103_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[103][0]=0; L[103][1]=1;}
			satisfiable[103][1]=satisfiable[103][1] & ((x[103] ^ 1) | (x[ unit103_1[i][0] ] ^ unit103_1[i][1]) |(x[ unit103_1[i][2] ] ^ unit103_1[i][3]));
			}
		if(X_contra>0) L[103][1]=2;
		}
	//Check all rules of unit[104][0]
	L[104][0] = LargeX[104][1]>0 ? 1 : 0;
	satisfiable[104][0]=1; 
	for(int i=0;i<37;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit104_0[i][0] ][ unit104_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit104_0[i][2] ][ unit104_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit104_0[i][4] ][ unit104_0[i][5] ] >0);
		X_contra = ( LargeX[104][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit104_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[104][1]=0; L[104][0]=1;}
			satisfiable[104][0]=satisfiable[104][0] & ((x[104] ^ 0) | (x[ unit104_0[i][0] ] ^ unit104_0[i][1]) |(x[ unit104_0[i][2] ] ^ unit104_0[i][3]));
			}
		if(X_contra>0) L[104][0]=2;
		}
	//Check all rules of unit[104][1]
	L[104][1] = LargeX[104][0]>0 ? 1 : 0;
	satisfiable[104][1]=1; 
	for(int i=0;i<57;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit104_1[i][0] ][ unit104_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit104_1[i][2] ][ unit104_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit104_1[i][4] ][ unit104_1[i][5] ] >0);
		X_contra = ( LargeX[104][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit104_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[104][0]=0; L[104][1]=1;}
			satisfiable[104][1]=satisfiable[104][1] & ((x[104] ^ 1) | (x[ unit104_1[i][0] ] ^ unit104_1[i][1]) |(x[ unit104_1[i][2] ] ^ unit104_1[i][3]));
			}
		if(X_contra>0) L[104][1]=2;
		}
	//Check all rules of unit[105][0]
	L[105][0] = LargeX[105][1]>0 ? 1 : 0;
	satisfiable[105][0]=1; 
	for(int i=0;i<61;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit105_0[i][0] ][ unit105_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit105_0[i][2] ][ unit105_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit105_0[i][4] ][ unit105_0[i][5] ] >0);
		X_contra = ( LargeX[105][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit105_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[105][1]=0; L[105][0]=1;}
			satisfiable[105][0]=satisfiable[105][0] & ((x[105] ^ 0) | (x[ unit105_0[i][0] ] ^ unit105_0[i][1]) |(x[ unit105_0[i][2] ] ^ unit105_0[i][3]));
			}
		if(X_contra>0) L[105][0]=2;
		}
	//Check all rules of unit[105][1]
	L[105][1] = LargeX[105][0]>0 ? 1 : 0;
	satisfiable[105][1]=1; 
	for(int i=0;i<81;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit105_1[i][0] ][ unit105_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit105_1[i][2] ][ unit105_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit105_1[i][4] ][ unit105_1[i][5] ] >0);
		X_contra = ( LargeX[105][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit105_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[105][0]=0; L[105][1]=1;}
			satisfiable[105][1]=satisfiable[105][1] & ((x[105] ^ 1) | (x[ unit105_1[i][0] ] ^ unit105_1[i][1]) |(x[ unit105_1[i][2] ] ^ unit105_1[i][3]));
			}
		if(X_contra>0) L[105][1]=2;
		}
	//Check all rules of unit[106][0]
	L[106][0] = LargeX[106][1]>0 ? 1 : 0;
	satisfiable[106][0]=1; 
	for(int i=0;i<55;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit106_0[i][0] ][ unit106_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit106_0[i][2] ][ unit106_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit106_0[i][4] ][ unit106_0[i][5] ] >0);
		X_contra = ( LargeX[106][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit106_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[106][1]=0; L[106][0]=1;}
			satisfiable[106][0]=satisfiable[106][0] & ((x[106] ^ 0) | (x[ unit106_0[i][0] ] ^ unit106_0[i][1]) |(x[ unit106_0[i][2] ] ^ unit106_0[i][3]));
			}
		if(X_contra>0) L[106][0]=2;
		}
	//Check all rules of unit[106][1]
	L[106][1] = LargeX[106][0]>0 ? 1 : 0;
	satisfiable[106][1]=1; 
	for(int i=0;i<105;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit106_1[i][0] ][ unit106_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit106_1[i][2] ][ unit106_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit106_1[i][4] ][ unit106_1[i][5] ] >0);
		X_contra = ( LargeX[106][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit106_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[106][0]=0; L[106][1]=1;}
			satisfiable[106][1]=satisfiable[106][1] & ((x[106] ^ 1) | (x[ unit106_1[i][0] ] ^ unit106_1[i][1]) |(x[ unit106_1[i][2] ] ^ unit106_1[i][3]));
			}
		if(X_contra>0) L[106][1]=2;
		}
	//Check all rules of unit[107][0]
	L[107][0] = LargeX[107][1]>0 ? 1 : 0;
	satisfiable[107][0]=1; 
	for(int i=0;i<121;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit107_0[i][0] ][ unit107_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit107_0[i][2] ][ unit107_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit107_0[i][4] ][ unit107_0[i][5] ] >0);
		X_contra = ( LargeX[107][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit107_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[107][1]=0; L[107][0]=1;}
			satisfiable[107][0]=satisfiable[107][0] & ((x[107] ^ 0) | (x[ unit107_0[i][0] ] ^ unit107_0[i][1]) |(x[ unit107_0[i][2] ] ^ unit107_0[i][3]));
			}
		if(X_contra>0) L[107][0]=2;
		}
	//Check all rules of unit[107][1]
	L[107][1] = LargeX[107][0]>0 ? 1 : 0;
	satisfiable[107][1]=1; 
	for(int i=0;i<127;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit107_1[i][0] ][ unit107_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit107_1[i][2] ][ unit107_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit107_1[i][4] ][ unit107_1[i][5] ] >0);
		X_contra = ( LargeX[107][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit107_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[107][0]=0; L[107][1]=1;}
			satisfiable[107][1]=satisfiable[107][1] & ((x[107] ^ 1) | (x[ unit107_1[i][0] ] ^ unit107_1[i][1]) |(x[ unit107_1[i][2] ] ^ unit107_1[i][3]));
			}
		if(X_contra>0) L[107][1]=2;
		}
	//Check all rules of unit[108][0]
	L[108][0] = LargeX[108][1]>0 ? 1 : 0;
	satisfiable[108][0]=1; 
	for(int i=0;i<107;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit108_0[i][0] ][ unit108_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit108_0[i][2] ][ unit108_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit108_0[i][4] ][ unit108_0[i][5] ] >0);
		X_contra = ( LargeX[108][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit108_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[108][1]=0; L[108][0]=1;}
			satisfiable[108][0]=satisfiable[108][0] & ((x[108] ^ 0) | (x[ unit108_0[i][0] ] ^ unit108_0[i][1]) |(x[ unit108_0[i][2] ] ^ unit108_0[i][3]));
			}
		if(X_contra>0) L[108][0]=2;
		}
	//Check all rules of unit[108][1]
	L[108][1] = LargeX[108][0]>0 ? 1 : 0;
	satisfiable[108][1]=1; 
	for(int i=0;i<154;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit108_1[i][0] ][ unit108_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit108_1[i][2] ][ unit108_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit108_1[i][4] ][ unit108_1[i][5] ] >0);
		X_contra = ( LargeX[108][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit108_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[108][0]=0; L[108][1]=1;}
			satisfiable[108][1]=satisfiable[108][1] & ((x[108] ^ 1) | (x[ unit108_1[i][0] ] ^ unit108_1[i][1]) |(x[ unit108_1[i][2] ] ^ unit108_1[i][3]));
			}
		if(X_contra>0) L[108][1]=2;
		}
	//Check all rules of unit[117][0]
	L[117][0] = LargeX[117][1]>0 ? 1 : 0;
	satisfiable[117][0]=1; 
	for(int i=0;i<14;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit117_0[i][0] ][ unit117_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit117_0[i][2] ][ unit117_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit117_0[i][4] ][ unit117_0[i][5] ] >0);
		X_contra = ( LargeX[117][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit117_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[117][1]=0; L[117][0]=1;}
			satisfiable[117][0]=satisfiable[117][0] & ((x[117] ^ 0) | (x[ unit117_0[i][0] ] ^ unit117_0[i][1]) |(x[ unit117_0[i][2] ] ^ unit117_0[i][3]));
			}
		if(X_contra>0) L[117][0]=2;
		}
	//Check all rules of unit[117][1]
	L[117][1] = LargeX[117][0]>0 ? 1 : 0;
	satisfiable[117][1]=1; 
	for(int i=0;i<37;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit117_1[i][0] ][ unit117_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit117_1[i][2] ][ unit117_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit117_1[i][4] ][ unit117_1[i][5] ] >0);
		X_contra = ( LargeX[117][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit117_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[117][0]=0; L[117][1]=1;}
			satisfiable[117][1]=satisfiable[117][1] & ((x[117] ^ 1) | (x[ unit117_1[i][0] ] ^ unit117_1[i][1]) |(x[ unit117_1[i][2] ] ^ unit117_1[i][3]));
			}
		if(X_contra>0) L[117][1]=2;
		}
	//Check all rules of unit[118][0]
	L[118][0] = LargeX[118][1]>0 ? 1 : 0;
	satisfiable[118][0]=1; 
	for(int i=0;i<16;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit118_0[i][0] ][ unit118_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit118_0[i][2] ][ unit118_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit118_0[i][4] ][ unit118_0[i][5] ] >0);
		X_contra = ( LargeX[118][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit118_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[118][1]=0; L[118][0]=1;}
			satisfiable[118][0]=satisfiable[118][0] & ((x[118] ^ 0) | (x[ unit118_0[i][0] ] ^ unit118_0[i][1]) |(x[ unit118_0[i][2] ] ^ unit118_0[i][3]));
			}
		if(X_contra>0) L[118][0]=2;
		}
	//Check all rules of unit[118][1]
	L[118][1] = LargeX[118][0]>0 ? 1 : 0;
	satisfiable[118][1]=1; 
	for(int i=0;i<28;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit118_1[i][0] ][ unit118_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit118_1[i][2] ][ unit118_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit118_1[i][4] ][ unit118_1[i][5] ] >0);
		X_contra = ( LargeX[118][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit118_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[118][0]=0; L[118][1]=1;}
			satisfiable[118][1]=satisfiable[118][1] & ((x[118] ^ 1) | (x[ unit118_1[i][0] ] ^ unit118_1[i][1]) |(x[ unit118_1[i][2] ] ^ unit118_1[i][3]));
			}
		if(X_contra>0) L[118][1]=2;
		}
	//Check all rules of unit[121][0]
	L[121][0] = LargeX[121][1]>0 ? 1 : 0;
	satisfiable[121][0]=1; 
	for(int i=0;i<78;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit121_0[i][0] ][ unit121_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit121_0[i][2] ][ unit121_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit121_0[i][4] ][ unit121_0[i][5] ] >0);
		X_contra = ( LargeX[121][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit121_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[121][1]=0; L[121][0]=1;}
			satisfiable[121][0]=satisfiable[121][0] & ((x[121] ^ 0) | (x[ unit121_0[i][0] ] ^ unit121_0[i][1]) |(x[ unit121_0[i][2] ] ^ unit121_0[i][3]));
			}
		if(X_contra>0) L[121][0]=2;
		}
	//Check all rules of unit[121][1]
	L[121][1] = LargeX[121][0]>0 ? 1 : 0;
	satisfiable[121][1]=1; 
	for(int i=0;i<138;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit121_1[i][0] ][ unit121_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit121_1[i][2] ][ unit121_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit121_1[i][4] ][ unit121_1[i][5] ] >0);
		X_contra = ( LargeX[121][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit121_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[121][0]=0; L[121][1]=1;}
			satisfiable[121][1]=satisfiable[121][1] & ((x[121] ^ 1) | (x[ unit121_1[i][0] ] ^ unit121_1[i][1]) |(x[ unit121_1[i][2] ] ^ unit121_1[i][3]));
			}
		if(X_contra>0) L[121][1]=2;
		}
	//Check all rules of unit[122][0]
	L[122][0] = LargeX[122][1]>0 ? 1 : 0;
	satisfiable[122][0]=1; 
	for(int i=0;i<83;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit122_0[i][0] ][ unit122_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit122_0[i][2] ][ unit122_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit122_0[i][4] ][ unit122_0[i][5] ] >0);
		X_contra = ( LargeX[122][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit122_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[122][1]=0; L[122][0]=1;}
			satisfiable[122][0]=satisfiable[122][0] & ((x[122] ^ 0) | (x[ unit122_0[i][0] ] ^ unit122_0[i][1]) |(x[ unit122_0[i][2] ] ^ unit122_0[i][3]));
			}
		if(X_contra>0) L[122][0]=2;
		}
	//Check all rules of unit[122][1]
	L[122][1] = LargeX[122][0]>0 ? 1 : 0;
	satisfiable[122][1]=1; 
	for(int i=0;i<115;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit122_1[i][0] ][ unit122_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit122_1[i][2] ][ unit122_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit122_1[i][4] ][ unit122_1[i][5] ] >0);
		X_contra = ( LargeX[122][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit122_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[122][0]=0; L[122][1]=1;}
			satisfiable[122][1]=satisfiable[122][1] & ((x[122] ^ 1) | (x[ unit122_1[i][0] ] ^ unit122_1[i][1]) |(x[ unit122_1[i][2] ] ^ unit122_1[i][3]));
			}
		if(X_contra>0) L[122][1]=2;
		}
	//Check all rules of unit[123][0]
	L[123][0] = LargeX[123][1]>0 ? 1 : 0;
	satisfiable[123][0]=1; 
	for(int i=0;i<26;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit123_0[i][0] ][ unit123_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit123_0[i][2] ][ unit123_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit123_0[i][4] ][ unit123_0[i][5] ] >0);
		X_contra = ( LargeX[123][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit123_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[123][1]=0; L[123][0]=1;}
			satisfiable[123][0]=satisfiable[123][0] & ((x[123] ^ 0) | (x[ unit123_0[i][0] ] ^ unit123_0[i][1]) |(x[ unit123_0[i][2] ] ^ unit123_0[i][3]));
			}
		if(X_contra>0) L[123][0]=2;
		}
	//Check all rules of unit[123][1]
	L[123][1] = LargeX[123][0]>0 ? 1 : 0;
	satisfiable[123][1]=1; 
	for(int i=0;i<79;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit123_1[i][0] ][ unit123_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit123_1[i][2] ][ unit123_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit123_1[i][4] ][ unit123_1[i][5] ] >0);
		X_contra = ( LargeX[123][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit123_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[123][0]=0; L[123][1]=1;}
			satisfiable[123][1]=satisfiable[123][1] & ((x[123] ^ 1) | (x[ unit123_1[i][0] ] ^ unit123_1[i][1]) |(x[ unit123_1[i][2] ] ^ unit123_1[i][3]));
			}
		if(X_contra>0) L[123][1]=2;
		}
	//Check all rules of unit[124][0]
	L[124][0] = LargeX[124][1]>0 ? 1 : 0;
	satisfiable[124][0]=1; 
	for(int i=0;i<29;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit124_0[i][0] ][ unit124_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit124_0[i][2] ][ unit124_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit124_0[i][4] ][ unit124_0[i][5] ] >0);
		X_contra = ( LargeX[124][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit124_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[124][1]=0; L[124][0]=1;}
			satisfiable[124][0]=satisfiable[124][0] & ((x[124] ^ 0) | (x[ unit124_0[i][0] ] ^ unit124_0[i][1]) |(x[ unit124_0[i][2] ] ^ unit124_0[i][3]));
			}
		if(X_contra>0) L[124][0]=2;
		}
	//Check all rules of unit[124][1]
	L[124][1] = LargeX[124][0]>0 ? 1 : 0;
	satisfiable[124][1]=1; 
	for(int i=0;i<73;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit124_1[i][0] ][ unit124_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit124_1[i][2] ][ unit124_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit124_1[i][4] ][ unit124_1[i][5] ] >0);
		X_contra = ( LargeX[124][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit124_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[124][0]=0; L[124][1]=1;}
			satisfiable[124][1]=satisfiable[124][1] & ((x[124] ^ 1) | (x[ unit124_1[i][0] ] ^ unit124_1[i][1]) |(x[ unit124_1[i][2] ] ^ unit124_1[i][3]));
			}
		if(X_contra>0) L[124][1]=2;
		}
	//Check all rules of unit[125][0]
	L[125][0] = LargeX[125][1]>0 ? 1 : 0;
	satisfiable[125][0]=1; 
	for(int i=0;i<22;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit125_0[i][0] ][ unit125_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit125_0[i][2] ][ unit125_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit125_0[i][4] ][ unit125_0[i][5] ] >0);
		X_contra = ( LargeX[125][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit125_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[125][1]=0; L[125][0]=1;}
			satisfiable[125][0]=satisfiable[125][0] & ((x[125] ^ 0) | (x[ unit125_0[i][0] ] ^ unit125_0[i][1]) |(x[ unit125_0[i][2] ] ^ unit125_0[i][3]));
			}
		if(X_contra>0) L[125][0]=2;
		}
	//Check all rules of unit[125][1]
	L[125][1] = LargeX[125][0]>0 ? 1 : 0;
	satisfiable[125][1]=1; 
	for(int i=0;i<65;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit125_1[i][0] ][ unit125_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit125_1[i][2] ][ unit125_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit125_1[i][4] ][ unit125_1[i][5] ] >0);
		X_contra = ( LargeX[125][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit125_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[125][0]=0; L[125][1]=1;}
			satisfiable[125][1]=satisfiable[125][1] & ((x[125] ^ 1) | (x[ unit125_1[i][0] ] ^ unit125_1[i][1]) |(x[ unit125_1[i][2] ] ^ unit125_1[i][3]));
			}
		if(X_contra>0) L[125][1]=2;
		}
	//Check all rules of unit[126][0]
	L[126][0] = LargeX[126][1]>0 ? 1 : 0;
	satisfiable[126][0]=1; 
	for(int i=0;i<26;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit126_0[i][0] ][ unit126_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit126_0[i][2] ][ unit126_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit126_0[i][4] ][ unit126_0[i][5] ] >0);
		X_contra = ( LargeX[126][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit126_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[126][1]=0; L[126][0]=1;}
			satisfiable[126][0]=satisfiable[126][0] & ((x[126] ^ 0) | (x[ unit126_0[i][0] ] ^ unit126_0[i][1]) |(x[ unit126_0[i][2] ] ^ unit126_0[i][3]));
			}
		if(X_contra>0) L[126][0]=2;
		}
	//Check all rules of unit[126][1]
	L[126][1] = LargeX[126][0]>0 ? 1 : 0;
	satisfiable[126][1]=1; 
	for(int i=0;i<49;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit126_1[i][0] ][ unit126_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit126_1[i][2] ][ unit126_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit126_1[i][4] ][ unit126_1[i][5] ] >0);
		X_contra = ( LargeX[126][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit126_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[126][0]=0; L[126][1]=1;}
			satisfiable[126][1]=satisfiable[126][1] & ((x[126] ^ 1) | (x[ unit126_1[i][0] ] ^ unit126_1[i][1]) |(x[ unit126_1[i][2] ] ^ unit126_1[i][3]));
			}
		if(X_contra>0) L[126][1]=2;
		}
	//Check all rules of unit[127][0]
	L[127][0] = LargeX[127][1]>0 ? 1 : 0;
	satisfiable[127][0]=1; 
	for(int i=0;i<49;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit127_0[i][0] ][ unit127_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit127_0[i][2] ][ unit127_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit127_0[i][4] ][ unit127_0[i][5] ] >0);
		X_contra = ( LargeX[127][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit127_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[127][1]=0; L[127][0]=1;}
			satisfiable[127][0]=satisfiable[127][0] & ((x[127] ^ 0) | (x[ unit127_0[i][0] ] ^ unit127_0[i][1]) |(x[ unit127_0[i][2] ] ^ unit127_0[i][3]));
			}
		if(X_contra>0) L[127][0]=2;
		}
	//Check all rules of unit[127][1]
	L[127][1] = LargeX[127][0]>0 ? 1 : 0;
	satisfiable[127][1]=1; 
	for(int i=0;i<164;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit127_1[i][0] ][ unit127_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit127_1[i][2] ][ unit127_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit127_1[i][4] ][ unit127_1[i][5] ] >0);
		X_contra = ( LargeX[127][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit127_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[127][0]=0; L[127][1]=1;}
			satisfiable[127][1]=satisfiable[127][1] & ((x[127] ^ 1) | (x[ unit127_1[i][0] ] ^ unit127_1[i][1]) |(x[ unit127_1[i][2] ] ^ unit127_1[i][3]));
			}
		if(X_contra>0) L[127][1]=2;
		}
	//Check all rules of unit[128][0]
	L[128][0] = LargeX[128][1]>0 ? 1 : 0;
	satisfiable[128][0]=1; 
	for(int i=0;i<51;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit128_0[i][0] ][ unit128_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit128_0[i][2] ][ unit128_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit128_0[i][4] ][ unit128_0[i][5] ] >0);
		X_contra = ( LargeX[128][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit128_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[128][1]=0; L[128][0]=1;}
			satisfiable[128][0]=satisfiable[128][0] & ((x[128] ^ 0) | (x[ unit128_0[i][0] ] ^ unit128_0[i][1]) |(x[ unit128_0[i][2] ] ^ unit128_0[i][3]));
			}
		if(X_contra>0) L[128][0]=2;
		}
	//Check all rules of unit[128][1]
	L[128][1] = LargeX[128][0]>0 ? 1 : 0;
	satisfiable[128][1]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit128_1[i][0] ][ unit128_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit128_1[i][2] ][ unit128_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit128_1[i][4] ][ unit128_1[i][5] ] >0);
		X_contra = ( LargeX[128][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit128_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[128][0]=0; L[128][1]=1;}
			satisfiable[128][1]=satisfiable[128][1] & ((x[128] ^ 1) | (x[ unit128_1[i][0] ] ^ unit128_1[i][1]) |(x[ unit128_1[i][2] ] ^ unit128_1[i][3]));
			}
		if(X_contra>0) L[128][1]=2;
		}
	//Check all rules of unit[129][0]
	L[129][0] = LargeX[129][1]>0 ? 1 : 0;
	satisfiable[129][0]=1; 
	for(int i=0;i<46;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit129_0[i][0] ][ unit129_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit129_0[i][2] ][ unit129_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit129_0[i][4] ][ unit129_0[i][5] ] >0);
		X_contra = ( LargeX[129][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit129_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[129][1]=0; L[129][0]=1;}
			satisfiable[129][0]=satisfiable[129][0] & ((x[129] ^ 0) | (x[ unit129_0[i][0] ] ^ unit129_0[i][1]) |(x[ unit129_0[i][2] ] ^ unit129_0[i][3]));
			}
		if(X_contra>0) L[129][0]=2;
		}
	//Check all rules of unit[129][1]
	L[129][1] = LargeX[129][0]>0 ? 1 : 0;
	satisfiable[129][1]=1; 
	for(int i=0;i<155;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit129_1[i][0] ][ unit129_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit129_1[i][2] ][ unit129_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit129_1[i][4] ][ unit129_1[i][5] ] >0);
		X_contra = ( LargeX[129][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit129_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[129][0]=0; L[129][1]=1;}
			satisfiable[129][1]=satisfiable[129][1] & ((x[129] ^ 1) | (x[ unit129_1[i][0] ] ^ unit129_1[i][1]) |(x[ unit129_1[i][2] ] ^ unit129_1[i][3]));
			}
		if(X_contra>0) L[129][1]=2;
		}
	//Check all rules of unit[130][0]
	L[130][0] = LargeX[130][1]>0 ? 1 : 0;
	satisfiable[130][0]=1; 
	for(int i=0;i<48;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit130_0[i][0] ][ unit130_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit130_0[i][2] ][ unit130_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit130_0[i][4] ][ unit130_0[i][5] ] >0);
		X_contra = ( LargeX[130][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit130_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[130][1]=0; L[130][0]=1;}
			satisfiable[130][0]=satisfiable[130][0] & ((x[130] ^ 0) | (x[ unit130_0[i][0] ] ^ unit130_0[i][1]) |(x[ unit130_0[i][2] ] ^ unit130_0[i][3]));
			}
		if(X_contra>0) L[130][0]=2;
		}
	//Check all rules of unit[130][1]
	L[130][1] = LargeX[130][0]>0 ? 1 : 0;
	satisfiable[130][1]=1; 
	for(int i=0;i<147;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit130_1[i][0] ][ unit130_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit130_1[i][2] ][ unit130_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit130_1[i][4] ][ unit130_1[i][5] ] >0);
		X_contra = ( LargeX[130][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit130_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[130][0]=0; L[130][1]=1;}
			satisfiable[130][1]=satisfiable[130][1] & ((x[130] ^ 1) | (x[ unit130_1[i][0] ] ^ unit130_1[i][1]) |(x[ unit130_1[i][2] ] ^ unit130_1[i][3]));
			}
		if(X_contra>0) L[130][1]=2;
		}
	//Check all rules of unit[131][0]
	L[131][0] = LargeX[131][1]>0 ? 1 : 0;
	satisfiable[131][0]=1; 
	for(int i=0;i<44;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit131_0[i][0] ][ unit131_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit131_0[i][2] ][ unit131_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit131_0[i][4] ][ unit131_0[i][5] ] >0);
		X_contra = ( LargeX[131][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit131_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[131][1]=0; L[131][0]=1;}
			satisfiable[131][0]=satisfiable[131][0] & ((x[131] ^ 0) | (x[ unit131_0[i][0] ] ^ unit131_0[i][1]) |(x[ unit131_0[i][2] ] ^ unit131_0[i][3]));
			}
		if(X_contra>0) L[131][0]=2;
		}
	//Check all rules of unit[131][1]
	L[131][1] = LargeX[131][0]>0 ? 1 : 0;
	satisfiable[131][1]=1; 
	for(int i=0;i<142;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit131_1[i][0] ][ unit131_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit131_1[i][2] ][ unit131_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit131_1[i][4] ][ unit131_1[i][5] ] >0);
		X_contra = ( LargeX[131][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit131_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[131][0]=0; L[131][1]=1;}
			satisfiable[131][1]=satisfiable[131][1] & ((x[131] ^ 1) | (x[ unit131_1[i][0] ] ^ unit131_1[i][1]) |(x[ unit131_1[i][2] ] ^ unit131_1[i][3]));
			}
		if(X_contra>0) L[131][1]=2;
		}
	//Check all rules of unit[132][0]
	L[132][0] = LargeX[132][1]>0 ? 1 : 0;
	satisfiable[132][0]=1; 
	for(int i=0;i<45;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit132_0[i][0] ][ unit132_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit132_0[i][2] ][ unit132_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit132_0[i][4] ][ unit132_0[i][5] ] >0);
		X_contra = ( LargeX[132][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit132_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[132][1]=0; L[132][0]=1;}
			satisfiable[132][0]=satisfiable[132][0] & ((x[132] ^ 0) | (x[ unit132_0[i][0] ] ^ unit132_0[i][1]) |(x[ unit132_0[i][2] ] ^ unit132_0[i][3]));
			}
		if(X_contra>0) L[132][0]=2;
		}
	//Check all rules of unit[132][1]
	L[132][1] = LargeX[132][0]>0 ? 1 : 0;
	satisfiable[132][1]=1; 
	for(int i=0;i<137;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit132_1[i][0] ][ unit132_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit132_1[i][2] ][ unit132_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit132_1[i][4] ][ unit132_1[i][5] ] >0);
		X_contra = ( LargeX[132][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit132_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[132][0]=0; L[132][1]=1;}
			satisfiable[132][1]=satisfiable[132][1] & ((x[132] ^ 1) | (x[ unit132_1[i][0] ] ^ unit132_1[i][1]) |(x[ unit132_1[i][2] ] ^ unit132_1[i][3]));
			}
		if(X_contra>0) L[132][1]=2;
		}
	//Check all rules of unit[133][0]
	L[133][0] = LargeX[133][1]>0 ? 1 : 0;
	satisfiable[133][0]=1; 
	for(int i=0;i<49;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit133_0[i][0] ][ unit133_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit133_0[i][2] ][ unit133_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit133_0[i][4] ][ unit133_0[i][5] ] >0);
		X_contra = ( LargeX[133][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit133_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[133][1]=0; L[133][0]=1;}
			satisfiable[133][0]=satisfiable[133][0] & ((x[133] ^ 0) | (x[ unit133_0[i][0] ] ^ unit133_0[i][1]) |(x[ unit133_0[i][2] ] ^ unit133_0[i][3]));
			}
		if(X_contra>0) L[133][0]=2;
		}
	//Check all rules of unit[133][1]
	L[133][1] = LargeX[133][0]>0 ? 1 : 0;
	satisfiable[133][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit133_1[i][0] ][ unit133_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit133_1[i][2] ][ unit133_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit133_1[i][4] ][ unit133_1[i][5] ] >0);
		X_contra = ( LargeX[133][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit133_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[133][0]=0; L[133][1]=1;}
			satisfiable[133][1]=satisfiable[133][1] & ((x[133] ^ 1) | (x[ unit133_1[i][0] ] ^ unit133_1[i][1]) |(x[ unit133_1[i][2] ] ^ unit133_1[i][3]));
			}
		if(X_contra>0) L[133][1]=2;
		}
	//Check all rules of unit[134][0]
	L[134][0] = LargeX[134][1]>0 ? 1 : 0;
	satisfiable[134][0]=1; 
	for(int i=0;i<50;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit134_0[i][0] ][ unit134_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit134_0[i][2] ][ unit134_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit134_0[i][4] ][ unit134_0[i][5] ] >0);
		X_contra = ( LargeX[134][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit134_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[134][1]=0; L[134][0]=1;}
			satisfiable[134][0]=satisfiable[134][0] & ((x[134] ^ 0) | (x[ unit134_0[i][0] ] ^ unit134_0[i][1]) |(x[ unit134_0[i][2] ] ^ unit134_0[i][3]));
			}
		if(X_contra>0) L[134][0]=2;
		}
	//Check all rules of unit[134][1]
	L[134][1] = LargeX[134][0]>0 ? 1 : 0;
	satisfiable[134][1]=1; 
	for(int i=0;i<173;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit134_1[i][0] ][ unit134_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit134_1[i][2] ][ unit134_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit134_1[i][4] ][ unit134_1[i][5] ] >0);
		X_contra = ( LargeX[134][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit134_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[134][0]=0; L[134][1]=1;}
			satisfiable[134][1]=satisfiable[134][1] & ((x[134] ^ 1) | (x[ unit134_1[i][0] ] ^ unit134_1[i][1]) |(x[ unit134_1[i][2] ] ^ unit134_1[i][3]));
			}
		if(X_contra>0) L[134][1]=2;
		}
	//Check all rules of unit[135][0]
	L[135][0] = LargeX[135][1]>0 ? 1 : 0;
	satisfiable[135][0]=1; 
	for(int i=0;i<62;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit135_0[i][0] ][ unit135_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit135_0[i][2] ][ unit135_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit135_0[i][4] ][ unit135_0[i][5] ] >0);
		X_contra = ( LargeX[135][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit135_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[135][1]=0; L[135][0]=1;}
			satisfiable[135][0]=satisfiable[135][0] & ((x[135] ^ 0) | (x[ unit135_0[i][0] ] ^ unit135_0[i][1]) |(x[ unit135_0[i][2] ] ^ unit135_0[i][3]));
			}
		if(X_contra>0) L[135][0]=2;
		}
	//Check all rules of unit[135][1]
	L[135][1] = LargeX[135][0]>0 ? 1 : 0;
	satisfiable[135][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit135_1[i][0] ][ unit135_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit135_1[i][2] ][ unit135_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit135_1[i][4] ][ unit135_1[i][5] ] >0);
		X_contra = ( LargeX[135][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit135_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[135][0]=0; L[135][1]=1;}
			satisfiable[135][1]=satisfiable[135][1] & ((x[135] ^ 1) | (x[ unit135_1[i][0] ] ^ unit135_1[i][1]) |(x[ unit135_1[i][2] ] ^ unit135_1[i][3]));
			}
		if(X_contra>0) L[135][1]=2;
		}
	//Check all rules of unit[136][0]
	L[136][0] = LargeX[136][1]>0 ? 1 : 0;
	satisfiable[136][0]=1; 
	for(int i=0;i<62;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit136_0[i][0] ][ unit136_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit136_0[i][2] ][ unit136_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit136_0[i][4] ][ unit136_0[i][5] ] >0);
		X_contra = ( LargeX[136][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit136_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[136][1]=0; L[136][0]=1;}
			satisfiable[136][0]=satisfiable[136][0] & ((x[136] ^ 0) | (x[ unit136_0[i][0] ] ^ unit136_0[i][1]) |(x[ unit136_0[i][2] ] ^ unit136_0[i][3]));
			}
		if(X_contra>0) L[136][0]=2;
		}
	//Check all rules of unit[136][1]
	L[136][1] = LargeX[136][0]>0 ? 1 : 0;
	satisfiable[136][1]=1; 
	for(int i=0;i<178;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit136_1[i][0] ][ unit136_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit136_1[i][2] ][ unit136_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit136_1[i][4] ][ unit136_1[i][5] ] >0);
		X_contra = ( LargeX[136][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit136_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[136][0]=0; L[136][1]=1;}
			satisfiable[136][1]=satisfiable[136][1] & ((x[136] ^ 1) | (x[ unit136_1[i][0] ] ^ unit136_1[i][1]) |(x[ unit136_1[i][2] ] ^ unit136_1[i][3]));
			}
		if(X_contra>0) L[136][1]=2;
		}
	//Check all rules of unit[137][0]
	L[137][0] = LargeX[137][1]>0 ? 1 : 0;
	satisfiable[137][0]=1; 
	for(int i=0;i<62;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit137_0[i][0] ][ unit137_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit137_0[i][2] ][ unit137_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit137_0[i][4] ][ unit137_0[i][5] ] >0);
		X_contra = ( LargeX[137][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit137_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[137][1]=0; L[137][0]=1;}
			satisfiable[137][0]=satisfiable[137][0] & ((x[137] ^ 0) | (x[ unit137_0[i][0] ] ^ unit137_0[i][1]) |(x[ unit137_0[i][2] ] ^ unit137_0[i][3]));
			}
		if(X_contra>0) L[137][0]=2;
		}
	//Check all rules of unit[137][1]
	L[137][1] = LargeX[137][0]>0 ? 1 : 0;
	satisfiable[137][1]=1; 
	for(int i=0;i<174;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit137_1[i][0] ][ unit137_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit137_1[i][2] ][ unit137_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit137_1[i][4] ][ unit137_1[i][5] ] >0);
		X_contra = ( LargeX[137][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit137_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[137][0]=0; L[137][1]=1;}
			satisfiable[137][1]=satisfiable[137][1] & ((x[137] ^ 1) | (x[ unit137_1[i][0] ] ^ unit137_1[i][1]) |(x[ unit137_1[i][2] ] ^ unit137_1[i][3]));
			}
		if(X_contra>0) L[137][1]=2;
		}
	//Check all rules of unit[138][0]
	L[138][0] = LargeX[138][1]>0 ? 1 : 0;
	satisfiable[138][0]=1; 
	for(int i=0;i<61;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit138_0[i][0] ][ unit138_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit138_0[i][2] ][ unit138_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit138_0[i][4] ][ unit138_0[i][5] ] >0);
		X_contra = ( LargeX[138][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit138_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[138][1]=0; L[138][0]=1;}
			satisfiable[138][0]=satisfiable[138][0] & ((x[138] ^ 0) | (x[ unit138_0[i][0] ] ^ unit138_0[i][1]) |(x[ unit138_0[i][2] ] ^ unit138_0[i][3]));
			}
		if(X_contra>0) L[138][0]=2;
		}
	//Check all rules of unit[138][1]
	L[138][1] = LargeX[138][0]>0 ? 1 : 0;
	satisfiable[138][1]=1; 
	for(int i=0;i<170;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit138_1[i][0] ][ unit138_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit138_1[i][2] ][ unit138_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit138_1[i][4] ][ unit138_1[i][5] ] >0);
		X_contra = ( LargeX[138][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit138_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[138][0]=0; L[138][1]=1;}
			satisfiable[138][1]=satisfiable[138][1] & ((x[138] ^ 1) | (x[ unit138_1[i][0] ] ^ unit138_1[i][1]) |(x[ unit138_1[i][2] ] ^ unit138_1[i][3]));
			}
		if(X_contra>0) L[138][1]=2;
		}
	//Check all rules of unit[139][0]
	L[139][0] = LargeX[139][1]>0 ? 1 : 0;
	satisfiable[139][0]=1; 
	for(int i=0;i<22;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit139_0[i][0] ][ unit139_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit139_0[i][2] ][ unit139_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit139_0[i][4] ][ unit139_0[i][5] ] >0);
		X_contra = ( LargeX[139][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit139_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[139][1]=0; L[139][0]=1;}
			satisfiable[139][0]=satisfiable[139][0] & ((x[139] ^ 0) | (x[ unit139_0[i][0] ] ^ unit139_0[i][1]) |(x[ unit139_0[i][2] ] ^ unit139_0[i][3]));
			}
		if(X_contra>0) L[139][0]=2;
		}
	//Check all rules of unit[139][1]
	L[139][1] = LargeX[139][0]>0 ? 1 : 0;
	satisfiable[139][1]=1; 
	for(int i=0;i<33;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit139_1[i][0] ][ unit139_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit139_1[i][2] ][ unit139_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit139_1[i][4] ][ unit139_1[i][5] ] >0);
		X_contra = ( LargeX[139][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit139_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[139][0]=0; L[139][1]=1;}
			satisfiable[139][1]=satisfiable[139][1] & ((x[139] ^ 1) | (x[ unit139_1[i][0] ] ^ unit139_1[i][1]) |(x[ unit139_1[i][2] ] ^ unit139_1[i][3]));
			}
		if(X_contra>0) L[139][1]=2;
		}
	//Check all rules of unit[140][0]
	L[140][0] = LargeX[140][1]>0 ? 1 : 0;
	satisfiable[140][0]=1; 
	for(int i=0;i<16;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit140_0[i][0] ][ unit140_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit140_0[i][2] ][ unit140_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit140_0[i][4] ][ unit140_0[i][5] ] >0);
		X_contra = ( LargeX[140][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit140_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[140][1]=0; L[140][0]=1;}
			satisfiable[140][0]=satisfiable[140][0] & ((x[140] ^ 0) | (x[ unit140_0[i][0] ] ^ unit140_0[i][1]) |(x[ unit140_0[i][2] ] ^ unit140_0[i][3]));
			}
		if(X_contra>0) L[140][0]=2;
		}
	//Check all rules of unit[140][1]
	L[140][1] = LargeX[140][0]>0 ? 1 : 0;
	satisfiable[140][1]=1; 
	for(int i=0;i<57;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit140_1[i][0] ][ unit140_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit140_1[i][2] ][ unit140_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit140_1[i][4] ][ unit140_1[i][5] ] >0);
		X_contra = ( LargeX[140][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit140_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[140][0]=0; L[140][1]=1;}
			satisfiable[140][1]=satisfiable[140][1] & ((x[140] ^ 1) | (x[ unit140_1[i][0] ] ^ unit140_1[i][1]) |(x[ unit140_1[i][2] ] ^ unit140_1[i][3]));
			}
		if(X_contra>0) L[140][1]=2;
		}
	//Check all rules of unit[141][0]
	L[141][0] = LargeX[141][1]>0 ? 1 : 0;
	satisfiable[141][0]=1; 
	for(int i=0;i<34;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit141_0[i][0] ][ unit141_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit141_0[i][2] ][ unit141_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit141_0[i][4] ][ unit141_0[i][5] ] >0);
		X_contra = ( LargeX[141][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit141_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[141][1]=0; L[141][0]=1;}
			satisfiable[141][0]=satisfiable[141][0] & ((x[141] ^ 0) | (x[ unit141_0[i][0] ] ^ unit141_0[i][1]) |(x[ unit141_0[i][2] ] ^ unit141_0[i][3]));
			}
		if(X_contra>0) L[141][0]=2;
		}
	//Check all rules of unit[141][1]
	L[141][1] = LargeX[141][0]>0 ? 1 : 0;
	satisfiable[141][1]=1; 
	for(int i=0;i<81;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit141_1[i][0] ][ unit141_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit141_1[i][2] ][ unit141_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit141_1[i][4] ][ unit141_1[i][5] ] >0);
		X_contra = ( LargeX[141][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit141_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[141][0]=0; L[141][1]=1;}
			satisfiable[141][1]=satisfiable[141][1] & ((x[141] ^ 1) | (x[ unit141_1[i][0] ] ^ unit141_1[i][1]) |(x[ unit141_1[i][2] ] ^ unit141_1[i][3]));
			}
		if(X_contra>0) L[141][1]=2;
		}
	//Check all rules of unit[142][0]
	L[142][0] = LargeX[142][1]>0 ? 1 : 0;
	satisfiable[142][0]=1; 
	for(int i=0;i<28;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit142_0[i][0] ][ unit142_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit142_0[i][2] ][ unit142_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit142_0[i][4] ][ unit142_0[i][5] ] >0);
		X_contra = ( LargeX[142][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit142_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[142][1]=0; L[142][0]=1;}
			satisfiable[142][0]=satisfiable[142][0] & ((x[142] ^ 0) | (x[ unit142_0[i][0] ] ^ unit142_0[i][1]) |(x[ unit142_0[i][2] ] ^ unit142_0[i][3]));
			}
		if(X_contra>0) L[142][0]=2;
		}
	//Check all rules of unit[142][1]
	L[142][1] = LargeX[142][0]>0 ? 1 : 0;
	satisfiable[142][1]=1; 
	for(int i=0;i<105;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit142_1[i][0] ][ unit142_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit142_1[i][2] ][ unit142_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit142_1[i][4] ][ unit142_1[i][5] ] >0);
		X_contra = ( LargeX[142][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit142_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[142][0]=0; L[142][1]=1;}
			satisfiable[142][1]=satisfiable[142][1] & ((x[142] ^ 1) | (x[ unit142_1[i][0] ] ^ unit142_1[i][1]) |(x[ unit142_1[i][2] ] ^ unit142_1[i][3]));
			}
		if(X_contra>0) L[142][1]=2;
		}
	//Check all rules of unit[143][0]
	L[143][0] = LargeX[143][1]>0 ? 1 : 0;
	satisfiable[143][0]=1; 
	for(int i=0;i<95;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit143_0[i][0] ][ unit143_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit143_0[i][2] ][ unit143_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit143_0[i][4] ][ unit143_0[i][5] ] >0);
		X_contra = ( LargeX[143][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit143_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[143][1]=0; L[143][0]=1;}
			satisfiable[143][0]=satisfiable[143][0] & ((x[143] ^ 0) | (x[ unit143_0[i][0] ] ^ unit143_0[i][1]) |(x[ unit143_0[i][2] ] ^ unit143_0[i][3]));
			}
		if(X_contra>0) L[143][0]=2;
		}
	//Check all rules of unit[143][1]
	L[143][1] = LargeX[143][0]>0 ? 1 : 0;
	satisfiable[143][1]=1; 
	for(int i=0;i<127;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit143_1[i][0] ][ unit143_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit143_1[i][2] ][ unit143_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit143_1[i][4] ][ unit143_1[i][5] ] >0);
		X_contra = ( LargeX[143][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit143_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[143][0]=0; L[143][1]=1;}
			satisfiable[143][1]=satisfiable[143][1] & ((x[143] ^ 1) | (x[ unit143_1[i][0] ] ^ unit143_1[i][1]) |(x[ unit143_1[i][2] ] ^ unit143_1[i][3]));
			}
		if(X_contra>0) L[143][1]=2;
		}
	//Check all rules of unit[144][0]
	L[144][0] = LargeX[144][1]>0 ? 1 : 0;
	satisfiable[144][0]=1; 
	for(int i=0;i<81;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit144_0[i][0] ][ unit144_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit144_0[i][2] ][ unit144_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit144_0[i][4] ][ unit144_0[i][5] ] >0);
		X_contra = ( LargeX[144][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit144_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[144][1]=0; L[144][0]=1;}
			satisfiable[144][0]=satisfiable[144][0] & ((x[144] ^ 0) | (x[ unit144_0[i][0] ] ^ unit144_0[i][1]) |(x[ unit144_0[i][2] ] ^ unit144_0[i][3]));
			}
		if(X_contra>0) L[144][0]=2;
		}
	//Check all rules of unit[144][1]
	L[144][1] = LargeX[144][0]>0 ? 1 : 0;
	satisfiable[144][1]=1; 
	for(int i=0;i<156;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit144_1[i][0] ][ unit144_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit144_1[i][2] ][ unit144_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit144_1[i][4] ][ unit144_1[i][5] ] >0);
		X_contra = ( LargeX[144][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit144_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[144][0]=0; L[144][1]=1;}
			satisfiable[144][1]=satisfiable[144][1] & ((x[144] ^ 1) | (x[ unit144_1[i][0] ] ^ unit144_1[i][1]) |(x[ unit144_1[i][2] ] ^ unit144_1[i][3]));
			}
		if(X_contra>0) L[144][1]=2;
		}
	//Check all rules of unit[217][0]
	L[217][0] = LargeX[217][1]>0 ? 1 : 0;
	satisfiable[217][0]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit217_0[i][0] ][ unit217_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit217_0[i][2] ][ unit217_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit217_0[i][4] ][ unit217_0[i][5] ] >0);
		X_contra = ( LargeX[217][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit217_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[217][1]=0; L[217][0]=1;}
			satisfiable[217][0]=satisfiable[217][0] & ((x[217] ^ 0) | (x[ unit217_0[i][0] ] ^ unit217_0[i][1]) |(x[ unit217_0[i][2] ] ^ unit217_0[i][3]));
			}
		if(X_contra>0) L[217][0]=2;
		}
	//Check all rules of unit[217][1]
	L[217][1] = LargeX[217][0]>0 ? 1 : 0;
	satisfiable[217][1]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit217_1[i][0] ][ unit217_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit217_1[i][2] ][ unit217_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit217_1[i][4] ][ unit217_1[i][5] ] >0);
		X_contra = ( LargeX[217][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit217_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[217][0]=0; L[217][1]=1;}
			satisfiable[217][1]=satisfiable[217][1] & ((x[217] ^ 1) | (x[ unit217_1[i][0] ] ^ unit217_1[i][1]) |(x[ unit217_1[i][2] ] ^ unit217_1[i][3]));
			}
		if(X_contra>0) L[217][1]=2;
		}
	//Check all rules of unit[218][0]
	L[218][0] = LargeX[218][1]>0 ? 1 : 0;
	satisfiable[218][0]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit218_0[i][0] ][ unit218_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit218_0[i][2] ][ unit218_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit218_0[i][4] ][ unit218_0[i][5] ] >0);
		X_contra = ( LargeX[218][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit218_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[218][1]=0; L[218][0]=1;}
			satisfiable[218][0]=satisfiable[218][0] & ((x[218] ^ 0) | (x[ unit218_0[i][0] ] ^ unit218_0[i][1]) |(x[ unit218_0[i][2] ] ^ unit218_0[i][3]));
			}
		if(X_contra>0) L[218][0]=2;
		}
	//Check all rules of unit[218][1]
	L[218][1] = LargeX[218][0]>0 ? 1 : 0;
	satisfiable[218][1]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit218_1[i][0] ][ unit218_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit218_1[i][2] ][ unit218_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit218_1[i][4] ][ unit218_1[i][5] ] >0);
		X_contra = ( LargeX[218][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit218_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[218][0]=0; L[218][1]=1;}
			satisfiable[218][1]=satisfiable[218][1] & ((x[218] ^ 1) | (x[ unit218_1[i][0] ] ^ unit218_1[i][1]) |(x[ unit218_1[i][2] ] ^ unit218_1[i][3]));
			}
		if(X_contra>0) L[218][1]=2;
		}
	//Check all rules of unit[229][0]
	L[229][0] = LargeX[229][1]>0 ? 1 : 0;
	satisfiable[229][0]=1; 
	for(int i=0;i<32;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit229_0[i][0] ][ unit229_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit229_0[i][2] ][ unit229_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit229_0[i][4] ][ unit229_0[i][5] ] >0);
		X_contra = ( LargeX[229][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit229_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[229][1]=0; L[229][0]=1;}
			satisfiable[229][0]=satisfiable[229][0] & ((x[229] ^ 0) | (x[ unit229_0[i][0] ] ^ unit229_0[i][1]) |(x[ unit229_0[i][2] ] ^ unit229_0[i][3]));
			}
		if(X_contra>0) L[229][0]=2;
		}
	//Check all rules of unit[229][1]
	L[229][1] = LargeX[229][0]>0 ? 1 : 0;
	satisfiable[229][1]=1; 
	for(int i=0;i<119;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit229_1[i][0] ][ unit229_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit229_1[i][2] ][ unit229_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit229_1[i][4] ][ unit229_1[i][5] ] >0);
		X_contra = ( LargeX[229][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit229_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[229][0]=0; L[229][1]=1;}
			satisfiable[229][1]=satisfiable[229][1] & ((x[229] ^ 1) | (x[ unit229_1[i][0] ] ^ unit229_1[i][1]) |(x[ unit229_1[i][2] ] ^ unit229_1[i][3]));
			}
		if(X_contra>0) L[229][1]=2;
		}
	//Check all rules of unit[230][0]
	L[230][0] = LargeX[230][1]>0 ? 1 : 0;
	satisfiable[230][0]=1; 
	for(int i=0;i<36;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit230_0[i][0] ][ unit230_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit230_0[i][2] ][ unit230_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit230_0[i][4] ][ unit230_0[i][5] ] >0);
		X_contra = ( LargeX[230][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit230_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[230][1]=0; L[230][0]=1;}
			satisfiable[230][0]=satisfiable[230][0] & ((x[230] ^ 0) | (x[ unit230_0[i][0] ] ^ unit230_0[i][1]) |(x[ unit230_0[i][2] ] ^ unit230_0[i][3]));
			}
		if(X_contra>0) L[230][0]=2;
		}
	//Check all rules of unit[230][1]
	L[230][1] = LargeX[230][0]>0 ? 1 : 0;
	satisfiable[230][1]=1; 
	for(int i=0;i<106;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit230_1[i][0] ][ unit230_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit230_1[i][2] ][ unit230_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit230_1[i][4] ][ unit230_1[i][5] ] >0);
		X_contra = ( LargeX[230][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit230_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[230][0]=0; L[230][1]=1;}
			satisfiable[230][1]=satisfiable[230][1] & ((x[230] ^ 1) | (x[ unit230_1[i][0] ] ^ unit230_1[i][1]) |(x[ unit230_1[i][2] ] ^ unit230_1[i][3]));
			}
		if(X_contra>0) L[230][1]=2;
		}
	//Check all rules of unit[235][0]
	L[235][0] = LargeX[235][1]>0 ? 1 : 0;
	satisfiable[235][0]=1; 
	for(int i=0;i<43;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit235_0[i][0] ][ unit235_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit235_0[i][2] ][ unit235_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit235_0[i][4] ][ unit235_0[i][5] ] >0);
		X_contra = ( LargeX[235][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit235_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[235][1]=0; L[235][0]=1;}
			satisfiable[235][0]=satisfiable[235][0] & ((x[235] ^ 0) | (x[ unit235_0[i][0] ] ^ unit235_0[i][1]) |(x[ unit235_0[i][2] ] ^ unit235_0[i][3]));
			}
		if(X_contra>0) L[235][0]=2;
		}
	//Check all rules of unit[235][1]
	L[235][1] = LargeX[235][0]>0 ? 1 : 0;
	satisfiable[235][1]=1; 
	for(int i=0;i<152;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit235_1[i][0] ][ unit235_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit235_1[i][2] ][ unit235_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit235_1[i][4] ][ unit235_1[i][5] ] >0);
		X_contra = ( LargeX[235][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit235_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[235][0]=0; L[235][1]=1;}
			satisfiable[235][1]=satisfiable[235][1] & ((x[235] ^ 1) | (x[ unit235_1[i][0] ] ^ unit235_1[i][1]) |(x[ unit235_1[i][2] ] ^ unit235_1[i][3]));
			}
		if(X_contra>0) L[235][1]=2;
		}
	//Check all rules of unit[236][0]
	L[236][0] = LargeX[236][1]>0 ? 1 : 0;
	satisfiable[236][0]=1; 
	for(int i=0;i<45;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit236_0[i][0] ][ unit236_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit236_0[i][2] ][ unit236_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit236_0[i][4] ][ unit236_0[i][5] ] >0);
		X_contra = ( LargeX[236][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit236_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[236][1]=0; L[236][0]=1;}
			satisfiable[236][0]=satisfiable[236][0] & ((x[236] ^ 0) | (x[ unit236_0[i][0] ] ^ unit236_0[i][1]) |(x[ unit236_0[i][2] ] ^ unit236_0[i][3]));
			}
		if(X_contra>0) L[236][0]=2;
		}
	//Check all rules of unit[236][1]
	L[236][1] = LargeX[236][0]>0 ? 1 : 0;
	satisfiable[236][1]=1; 
	for(int i=0;i<143;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit236_1[i][0] ][ unit236_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit236_1[i][2] ][ unit236_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit236_1[i][4] ][ unit236_1[i][5] ] >0);
		X_contra = ( LargeX[236][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit236_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[236][0]=0; L[236][1]=1;}
			satisfiable[236][1]=satisfiable[236][1] & ((x[236] ^ 1) | (x[ unit236_1[i][0] ] ^ unit236_1[i][1]) |(x[ unit236_1[i][2] ] ^ unit236_1[i][3]));
			}
		if(X_contra>0) L[236][1]=2;
		}
	//Check all rules of unit[237][0]
	L[237][0] = LargeX[237][1]>0 ? 1 : 0;
	satisfiable[237][0]=1; 
	for(int i=0;i<74;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit237_0[i][0] ][ unit237_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit237_0[i][2] ][ unit237_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit237_0[i][4] ][ unit237_0[i][5] ] >0);
		X_contra = ( LargeX[237][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit237_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[237][1]=0; L[237][0]=1;}
			satisfiable[237][0]=satisfiable[237][0] & ((x[237] ^ 0) | (x[ unit237_0[i][0] ] ^ unit237_0[i][1]) |(x[ unit237_0[i][2] ] ^ unit237_0[i][3]));
			}
		if(X_contra>0) L[237][0]=2;
		}
	//Check all rules of unit[237][1]
	L[237][1] = LargeX[237][0]>0 ? 1 : 0;
	satisfiable[237][1]=1; 
	for(int i=0;i<149;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit237_1[i][0] ][ unit237_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit237_1[i][2] ][ unit237_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit237_1[i][4] ][ unit237_1[i][5] ] >0);
		X_contra = ( LargeX[237][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit237_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[237][0]=0; L[237][1]=1;}
			satisfiable[237][1]=satisfiable[237][1] & ((x[237] ^ 1) | (x[ unit237_1[i][0] ] ^ unit237_1[i][1]) |(x[ unit237_1[i][2] ] ^ unit237_1[i][3]));
			}
		if(X_contra>0) L[237][1]=2;
		}
	//Check all rules of unit[238][0]
	L[238][0] = LargeX[238][1]>0 ? 1 : 0;
	satisfiable[238][0]=1; 
	for(int i=0;i<80;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit238_0[i][0] ][ unit238_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit238_0[i][2] ][ unit238_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit238_0[i][4] ][ unit238_0[i][5] ] >0);
		X_contra = ( LargeX[238][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit238_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[238][1]=0; L[238][0]=1;}
			satisfiable[238][0]=satisfiable[238][0] & ((x[238] ^ 0) | (x[ unit238_0[i][0] ] ^ unit238_0[i][1]) |(x[ unit238_0[i][2] ] ^ unit238_0[i][3]));
			}
		if(X_contra>0) L[238][0]=2;
		}
	//Check all rules of unit[238][1]
	L[238][1] = LargeX[238][0]>0 ? 1 : 0;
	satisfiable[238][1]=1; 
	for(int i=0;i<126;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit238_1[i][0] ][ unit238_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit238_1[i][2] ][ unit238_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit238_1[i][4] ][ unit238_1[i][5] ] >0);
		X_contra = ( LargeX[238][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit238_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[238][0]=0; L[238][1]=1;}
			satisfiable[238][1]=satisfiable[238][1] & ((x[238] ^ 1) | (x[ unit238_1[i][0] ] ^ unit238_1[i][1]) |(x[ unit238_1[i][2] ] ^ unit238_1[i][3]));
			}
		if(X_contra>0) L[238][1]=2;
		}
	//Check all rules of unit[239][0]
	L[239][0] = LargeX[239][1]>0 ? 1 : 0;
	satisfiable[239][0]=1; 
	for(int i=0;i<60;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit239_0[i][0] ][ unit239_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit239_0[i][2] ][ unit239_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit239_0[i][4] ][ unit239_0[i][5] ] >0);
		X_contra = ( LargeX[239][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit239_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[239][1]=0; L[239][0]=1;}
			satisfiable[239][0]=satisfiable[239][0] & ((x[239] ^ 0) | (x[ unit239_0[i][0] ] ^ unit239_0[i][1]) |(x[ unit239_0[i][2] ] ^ unit239_0[i][3]));
			}
		if(X_contra>0) L[239][0]=2;
		}
	//Check all rules of unit[239][1]
	L[239][1] = LargeX[239][0]>0 ? 1 : 0;
	satisfiable[239][1]=1; 
	for(int i=0;i<102;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit239_1[i][0] ][ unit239_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit239_1[i][2] ][ unit239_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit239_1[i][4] ][ unit239_1[i][5] ] >0);
		X_contra = ( LargeX[239][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit239_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[239][0]=0; L[239][1]=1;}
			satisfiable[239][1]=satisfiable[239][1] & ((x[239] ^ 1) | (x[ unit239_1[i][0] ] ^ unit239_1[i][1]) |(x[ unit239_1[i][2] ] ^ unit239_1[i][3]));
			}
		if(X_contra>0) L[239][1]=2;
		}
	//Check all rules of unit[240][0]
	L[240][0] = LargeX[240][1]>0 ? 1 : 0;
	satisfiable[240][0]=1; 
	for(int i=0;i<65;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit240_0[i][0] ][ unit240_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit240_0[i][2] ][ unit240_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit240_0[i][4] ][ unit240_0[i][5] ] >0);
		X_contra = ( LargeX[240][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit240_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[240][1]=0; L[240][0]=1;}
			satisfiable[240][0]=satisfiable[240][0] & ((x[240] ^ 0) | (x[ unit240_0[i][0] ] ^ unit240_0[i][1]) |(x[ unit240_0[i][2] ] ^ unit240_0[i][3]));
			}
		if(X_contra>0) L[240][0]=2;
		}
	//Check all rules of unit[240][1]
	L[240][1] = LargeX[240][0]>0 ? 1 : 0;
	satisfiable[240][1]=1; 
	for(int i=0;i<80;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit240_1[i][0] ][ unit240_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit240_1[i][2] ][ unit240_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit240_1[i][4] ][ unit240_1[i][5] ] >0);
		X_contra = ( LargeX[240][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit240_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[240][0]=0; L[240][1]=1;}
			satisfiable[240][1]=satisfiable[240][1] & ((x[240] ^ 1) | (x[ unit240_1[i][0] ] ^ unit240_1[i][1]) |(x[ unit240_1[i][2] ] ^ unit240_1[i][3]));
			}
		if(X_contra>0) L[240][1]=2;
		}
	//Check all rules of unit[241][0]
	L[241][0] = LargeX[241][1]>0 ? 1 : 0;
	satisfiable[241][0]=1; 
	for(int i=0;i<75;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit241_0[i][0] ][ unit241_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit241_0[i][2] ][ unit241_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit241_0[i][4] ][ unit241_0[i][5] ] >0);
		X_contra = ( LargeX[241][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit241_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[241][1]=0; L[241][0]=1;}
			satisfiable[241][0]=satisfiable[241][0] & ((x[241] ^ 0) | (x[ unit241_0[i][0] ] ^ unit241_0[i][1]) |(x[ unit241_0[i][2] ] ^ unit241_0[i][3]));
			}
		if(X_contra>0) L[241][0]=2;
		}
	//Check all rules of unit[241][1]
	L[241][1] = LargeX[241][0]>0 ? 1 : 0;
	satisfiable[241][1]=1; 
	for(int i=0;i<182;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit241_1[i][0] ][ unit241_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit241_1[i][2] ][ unit241_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit241_1[i][4] ][ unit241_1[i][5] ] >0);
		X_contra = ( LargeX[241][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit241_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[241][0]=0; L[241][1]=1;}
			satisfiable[241][1]=satisfiable[241][1] & ((x[241] ^ 1) | (x[ unit241_1[i][0] ] ^ unit241_1[i][1]) |(x[ unit241_1[i][2] ] ^ unit241_1[i][3]));
			}
		if(X_contra>0) L[241][1]=2;
		}
	//Check all rules of unit[242][0]
	L[242][0] = LargeX[242][1]>0 ? 1 : 0;
	satisfiable[242][0]=1; 
	for(int i=0;i<76;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit242_0[i][0] ][ unit242_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit242_0[i][2] ][ unit242_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit242_0[i][4] ][ unit242_0[i][5] ] >0);
		X_contra = ( LargeX[242][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit242_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[242][1]=0; L[242][0]=1;}
			satisfiable[242][0]=satisfiable[242][0] & ((x[242] ^ 0) | (x[ unit242_0[i][0] ] ^ unit242_0[i][1]) |(x[ unit242_0[i][2] ] ^ unit242_0[i][3]));
			}
		if(X_contra>0) L[242][0]=2;
		}
	//Check all rules of unit[242][1]
	L[242][1] = LargeX[242][0]>0 ? 1 : 0;
	satisfiable[242][1]=1; 
	for(int i=0;i<172;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit242_1[i][0] ][ unit242_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit242_1[i][2] ][ unit242_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit242_1[i][4] ][ unit242_1[i][5] ] >0);
		X_contra = ( LargeX[242][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit242_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[242][0]=0; L[242][1]=1;}
			satisfiable[242][1]=satisfiable[242][1] & ((x[242] ^ 1) | (x[ unit242_1[i][0] ] ^ unit242_1[i][1]) |(x[ unit242_1[i][2] ] ^ unit242_1[i][3]));
			}
		if(X_contra>0) L[242][1]=2;
		}
	//Check all rules of unit[243][0]
	L[243][0] = LargeX[243][1]>0 ? 1 : 0;
	satisfiable[243][0]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit243_0[i][0] ][ unit243_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit243_0[i][2] ][ unit243_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit243_0[i][4] ][ unit243_0[i][5] ] >0);
		X_contra = ( LargeX[243][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit243_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[243][1]=0; L[243][0]=1;}
			satisfiable[243][0]=satisfiable[243][0] & ((x[243] ^ 0) | (x[ unit243_0[i][0] ] ^ unit243_0[i][1]) |(x[ unit243_0[i][2] ] ^ unit243_0[i][3]));
			}
		if(X_contra>0) L[243][0]=2;
		}
	//Check all rules of unit[243][1]
	L[243][1] = LargeX[243][0]>0 ? 1 : 0;
	satisfiable[243][1]=1; 
	for(int i=0;i<182;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit243_1[i][0] ][ unit243_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit243_1[i][2] ][ unit243_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit243_1[i][4] ][ unit243_1[i][5] ] >0);
		X_contra = ( LargeX[243][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit243_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[243][0]=0; L[243][1]=1;}
			satisfiable[243][1]=satisfiable[243][1] & ((x[243] ^ 1) | (x[ unit243_1[i][0] ] ^ unit243_1[i][1]) |(x[ unit243_1[i][2] ] ^ unit243_1[i][3]));
			}
		if(X_contra>0) L[243][1]=2;
		}
	//Check all rules of unit[244][0]
	L[244][0] = LargeX[244][1]>0 ? 1 : 0;
	satisfiable[244][0]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit244_0[i][0] ][ unit244_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit244_0[i][2] ][ unit244_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit244_0[i][4] ][ unit244_0[i][5] ] >0);
		X_contra = ( LargeX[244][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit244_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[244][1]=0; L[244][0]=1;}
			satisfiable[244][0]=satisfiable[244][0] & ((x[244] ^ 0) | (x[ unit244_0[i][0] ] ^ unit244_0[i][1]) |(x[ unit244_0[i][2] ] ^ unit244_0[i][3]));
			}
		if(X_contra>0) L[244][0]=2;
		}
	//Check all rules of unit[244][1]
	L[244][1] = LargeX[244][0]>0 ? 1 : 0;
	satisfiable[244][1]=1; 
	for(int i=0;i<179;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit244_1[i][0] ][ unit244_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit244_1[i][2] ][ unit244_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit244_1[i][4] ][ unit244_1[i][5] ] >0);
		X_contra = ( LargeX[244][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit244_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[244][0]=0; L[244][1]=1;}
			satisfiable[244][1]=satisfiable[244][1] & ((x[244] ^ 1) | (x[ unit244_1[i][0] ] ^ unit244_1[i][1]) |(x[ unit244_1[i][2] ] ^ unit244_1[i][3]));
			}
		if(X_contra>0) L[244][1]=2;
		}
	//Check all rules of unit[245][0]
	L[245][0] = LargeX[245][1]>0 ? 1 : 0;
	satisfiable[245][0]=1; 
	for(int i=0;i<70;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit245_0[i][0] ][ unit245_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit245_0[i][2] ][ unit245_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit245_0[i][4] ][ unit245_0[i][5] ] >0);
		X_contra = ( LargeX[245][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit245_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[245][1]=0; L[245][0]=1;}
			satisfiable[245][0]=satisfiable[245][0] & ((x[245] ^ 0) | (x[ unit245_0[i][0] ] ^ unit245_0[i][1]) |(x[ unit245_0[i][2] ] ^ unit245_0[i][3]));
			}
		if(X_contra>0) L[245][0]=2;
		}
	//Check all rules of unit[245][1]
	L[245][1] = LargeX[245][0]>0 ? 1 : 0;
	satisfiable[245][1]=1; 
	for(int i=0;i<172;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit245_1[i][0] ][ unit245_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit245_1[i][2] ][ unit245_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit245_1[i][4] ][ unit245_1[i][5] ] >0);
		X_contra = ( LargeX[245][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit245_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[245][0]=0; L[245][1]=1;}
			satisfiable[245][1]=satisfiable[245][1] & ((x[245] ^ 1) | (x[ unit245_1[i][0] ] ^ unit245_1[i][1]) |(x[ unit245_1[i][2] ] ^ unit245_1[i][3]));
			}
		if(X_contra>0) L[245][1]=2;
		}
	//Check all rules of unit[246][0]
	L[246][0] = LargeX[246][1]>0 ? 1 : 0;
	satisfiable[246][0]=1; 
	for(int i=0;i<70;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit246_0[i][0] ][ unit246_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit246_0[i][2] ][ unit246_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit246_0[i][4] ][ unit246_0[i][5] ] >0);
		X_contra = ( LargeX[246][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit246_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[246][1]=0; L[246][0]=1;}
			satisfiable[246][0]=satisfiable[246][0] & ((x[246] ^ 0) | (x[ unit246_0[i][0] ] ^ unit246_0[i][1]) |(x[ unit246_0[i][2] ] ^ unit246_0[i][3]));
			}
		if(X_contra>0) L[246][0]=2;
		}
	//Check all rules of unit[246][1]
	L[246][1] = LargeX[246][0]>0 ? 1 : 0;
	satisfiable[246][1]=1; 
	for(int i=0;i<175;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit246_1[i][0] ][ unit246_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit246_1[i][2] ][ unit246_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit246_1[i][4] ][ unit246_1[i][5] ] >0);
		X_contra = ( LargeX[246][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit246_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[246][0]=0; L[246][1]=1;}
			satisfiable[246][1]=satisfiable[246][1] & ((x[246] ^ 1) | (x[ unit246_1[i][0] ] ^ unit246_1[i][1]) |(x[ unit246_1[i][2] ] ^ unit246_1[i][3]));
			}
		if(X_contra>0) L[246][1]=2;
		}
	//Check all rules of unit[247][0]
	L[247][0] = LargeX[247][1]>0 ? 1 : 0;
	satisfiable[247][0]=1; 
	for(int i=0;i<38;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit247_0[i][0] ][ unit247_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit247_0[i][2] ][ unit247_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit247_0[i][4] ][ unit247_0[i][5] ] >0);
		X_contra = ( LargeX[247][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit247_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[247][1]=0; L[247][0]=1;}
			satisfiable[247][0]=satisfiable[247][0] & ((x[247] ^ 0) | (x[ unit247_0[i][0] ] ^ unit247_0[i][1]) |(x[ unit247_0[i][2] ] ^ unit247_0[i][3]));
			}
		if(X_contra>0) L[247][0]=2;
		}
	//Check all rules of unit[247][1]
	L[247][1] = LargeX[247][0]>0 ? 1 : 0;
	satisfiable[247][1]=1; 
	for(int i=0;i<34;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit247_1[i][0] ][ unit247_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit247_1[i][2] ][ unit247_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit247_1[i][4] ][ unit247_1[i][5] ] >0);
		X_contra = ( LargeX[247][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit247_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[247][0]=0; L[247][1]=1;}
			satisfiable[247][1]=satisfiable[247][1] & ((x[247] ^ 1) | (x[ unit247_1[i][0] ] ^ unit247_1[i][1]) |(x[ unit247_1[i][2] ] ^ unit247_1[i][3]));
			}
		if(X_contra>0) L[247][1]=2;
		}
	//Check all rules of unit[248][0]
	L[248][0] = LargeX[248][1]>0 ? 1 : 0;
	satisfiable[248][0]=1; 
	for(int i=0;i<31;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit248_0[i][0] ][ unit248_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit248_0[i][2] ][ unit248_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit248_0[i][4] ][ unit248_0[i][5] ] >0);
		X_contra = ( LargeX[248][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit248_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[248][1]=0; L[248][0]=1;}
			satisfiable[248][0]=satisfiable[248][0] & ((x[248] ^ 0) | (x[ unit248_0[i][0] ] ^ unit248_0[i][1]) |(x[ unit248_0[i][2] ] ^ unit248_0[i][3]));
			}
		if(X_contra>0) L[248][0]=2;
		}
	//Check all rules of unit[248][1]
	L[248][1] = LargeX[248][0]>0 ? 1 : 0;
	satisfiable[248][1]=1; 
	for(int i=0;i<58;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit248_1[i][0] ][ unit248_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit248_1[i][2] ][ unit248_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit248_1[i][4] ][ unit248_1[i][5] ] >0);
		X_contra = ( LargeX[248][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit248_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[248][0]=0; L[248][1]=1;}
			satisfiable[248][1]=satisfiable[248][1] & ((x[248] ^ 1) | (x[ unit248_1[i][0] ] ^ unit248_1[i][1]) |(x[ unit248_1[i][2] ] ^ unit248_1[i][3]));
			}
		if(X_contra>0) L[248][1]=2;
		}
	//Check all rules of unit[249][0]
	L[249][0] = LargeX[249][1]>0 ? 1 : 0;
	satisfiable[249][0]=1; 
	for(int i=0;i<76;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit249_0[i][0] ][ unit249_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit249_0[i][2] ][ unit249_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit249_0[i][4] ][ unit249_0[i][5] ] >0);
		X_contra = ( LargeX[249][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit249_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[249][1]=0; L[249][0]=1;}
			satisfiable[249][0]=satisfiable[249][0] & ((x[249] ^ 0) | (x[ unit249_0[i][0] ] ^ unit249_0[i][1]) |(x[ unit249_0[i][2] ] ^ unit249_0[i][3]));
			}
		if(X_contra>0) L[249][0]=2;
		}
	//Check all rules of unit[249][1]
	L[249][1] = LargeX[249][0]>0 ? 1 : 0;
	satisfiable[249][1]=1; 
	for(int i=0;i<82;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit249_1[i][0] ][ unit249_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit249_1[i][2] ][ unit249_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit249_1[i][4] ][ unit249_1[i][5] ] >0);
		X_contra = ( LargeX[249][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit249_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[249][0]=0; L[249][1]=1;}
			satisfiable[249][1]=satisfiable[249][1] & ((x[249] ^ 1) | (x[ unit249_1[i][0] ] ^ unit249_1[i][1]) |(x[ unit249_1[i][2] ] ^ unit249_1[i][3]));
			}
		if(X_contra>0) L[249][1]=2;
		}
	//Check all rules of unit[250][0]
	L[250][0] = LargeX[250][1]>0 ? 1 : 0;
	satisfiable[250][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit250_0[i][0] ][ unit250_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit250_0[i][2] ][ unit250_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit250_0[i][4] ][ unit250_0[i][5] ] >0);
		X_contra = ( LargeX[250][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit250_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[250][1]=0; L[250][0]=1;}
			satisfiable[250][0]=satisfiable[250][0] & ((x[250] ^ 0) | (x[ unit250_0[i][0] ] ^ unit250_0[i][1]) |(x[ unit250_0[i][2] ] ^ unit250_0[i][3]));
			}
		if(X_contra>0) L[250][0]=2;
		}
	//Check all rules of unit[250][1]
	L[250][1] = LargeX[250][0]>0 ? 1 : 0;
	satisfiable[250][1]=1; 
	for(int i=0;i<109;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit250_1[i][0] ][ unit250_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit250_1[i][2] ][ unit250_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit250_1[i][4] ][ unit250_1[i][5] ] >0);
		X_contra = ( LargeX[250][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit250_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[250][0]=0; L[250][1]=1;}
			satisfiable[250][1]=satisfiable[250][1] & ((x[250] ^ 1) | (x[ unit250_1[i][0] ] ^ unit250_1[i][1]) |(x[ unit250_1[i][2] ] ^ unit250_1[i][3]));
			}
		if(X_contra>0) L[250][1]=2;
		}
	//Check all rules of unit[251][0]
	L[251][0] = LargeX[251][1]>0 ? 1 : 0;
	satisfiable[251][0]=1; 
	for(int i=0;i<128;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit251_0[i][0] ][ unit251_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit251_0[i][2] ][ unit251_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit251_0[i][4] ][ unit251_0[i][5] ] >0);
		X_contra = ( LargeX[251][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit251_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[251][1]=0; L[251][0]=1;}
			satisfiable[251][0]=satisfiable[251][0] & ((x[251] ^ 0) | (x[ unit251_0[i][0] ] ^ unit251_0[i][1]) |(x[ unit251_0[i][2] ] ^ unit251_0[i][3]));
			}
		if(X_contra>0) L[251][0]=2;
		}
	//Check all rules of unit[251][1]
	L[251][1] = LargeX[251][0]>0 ? 1 : 0;
	satisfiable[251][1]=1; 
	for(int i=0;i<129;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit251_1[i][0] ][ unit251_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit251_1[i][2] ][ unit251_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit251_1[i][4] ][ unit251_1[i][5] ] >0);
		X_contra = ( LargeX[251][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit251_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[251][0]=0; L[251][1]=1;}
			satisfiable[251][1]=satisfiable[251][1] & ((x[251] ^ 1) | (x[ unit251_1[i][0] ] ^ unit251_1[i][1]) |(x[ unit251_1[i][2] ] ^ unit251_1[i][3]));
			}
		if(X_contra>0) L[251][1]=2;
		}
	//Check all rules of unit[252][0]
	L[252][0] = LargeX[252][1]>0 ? 1 : 0;
	satisfiable[252][0]=1; 
	for(int i=0;i<113;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit252_0[i][0] ][ unit252_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit252_0[i][2] ][ unit252_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit252_0[i][4] ][ unit252_0[i][5] ] >0);
		X_contra = ( LargeX[252][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit252_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[252][1]=0; L[252][0]=1;}
			satisfiable[252][0]=satisfiable[252][0] & ((x[252] ^ 0) | (x[ unit252_0[i][0] ] ^ unit252_0[i][1]) |(x[ unit252_0[i][2] ] ^ unit252_0[i][3]));
			}
		if(X_contra>0) L[252][0]=2;
		}
	//Check all rules of unit[252][1]
	L[252][1] = LargeX[252][0]>0 ? 1 : 0;
	satisfiable[252][1]=1; 
	for(int i=0;i<156;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit252_1[i][0] ][ unit252_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit252_1[i][2] ][ unit252_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit252_1[i][4] ][ unit252_1[i][5] ] >0);
		X_contra = ( LargeX[252][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit252_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[252][0]=0; L[252][1]=1;}
			satisfiable[252][1]=satisfiable[252][1] & ((x[252] ^ 1) | (x[ unit252_1[i][0] ] ^ unit252_1[i][1]) |(x[ unit252_1[i][2] ] ^ unit252_1[i][3]));
			}
		if(X_contra>0) L[252][1]=2;
		}
	//Check all rules of unit[253][0]
	L[253][0] = LargeX[253][1]>0 ? 1 : 0;
	satisfiable[253][0]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit253_0[i][0] ][ unit253_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit253_0[i][2] ][ unit253_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit253_0[i][4] ][ unit253_0[i][5] ] >0);
		X_contra = ( LargeX[253][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit253_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[253][1]=0; L[253][0]=1;}
			satisfiable[253][0]=satisfiable[253][0] & ((x[253] ^ 0) | (x[ unit253_0[i][0] ] ^ unit253_0[i][1]) |(x[ unit253_0[i][2] ] ^ unit253_0[i][3]));
			}
		if(X_contra>0) L[253][0]=2;
		}
	//Check all rules of unit[253][1]
	L[253][1] = LargeX[253][0]>0 ? 1 : 0;
	satisfiable[253][1]=1; 
	for(int i=0;i<11;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit253_1[i][0] ][ unit253_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit253_1[i][2] ][ unit253_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit253_1[i][4] ][ unit253_1[i][5] ] >0);
		X_contra = ( LargeX[253][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit253_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[253][0]=0; L[253][1]=1;}
			satisfiable[253][1]=satisfiable[253][1] & ((x[253] ^ 1) | (x[ unit253_1[i][0] ] ^ unit253_1[i][1]) |(x[ unit253_1[i][2] ] ^ unit253_1[i][3]));
			}
		if(X_contra>0) L[253][1]=2;
		}
	//Check all rules of unit[254][0]
	L[254][0] = LargeX[254][1]>0 ? 1 : 0;
	satisfiable[254][0]=1; 
	for(int i=0;i<9;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit254_0[i][0] ][ unit254_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit254_0[i][2] ][ unit254_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit254_0[i][4] ][ unit254_0[i][5] ] >0);
		X_contra = ( LargeX[254][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit254_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[254][1]=0; L[254][0]=1;}
			satisfiable[254][0]=satisfiable[254][0] & ((x[254] ^ 0) | (x[ unit254_0[i][0] ] ^ unit254_0[i][1]) |(x[ unit254_0[i][2] ] ^ unit254_0[i][3]));
			}
		if(X_contra>0) L[254][0]=2;
		}
	//Check all rules of unit[254][1]
	L[254][1] = LargeX[254][0]>0 ? 1 : 0;
	satisfiable[254][1]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit254_1[i][0] ][ unit254_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit254_1[i][2] ][ unit254_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit254_1[i][4] ][ unit254_1[i][5] ] >0);
		X_contra = ( LargeX[254][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit254_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[254][0]=0; L[254][1]=1;}
			satisfiable[254][1]=satisfiable[254][1] & ((x[254] ^ 1) | (x[ unit254_1[i][0] ] ^ unit254_1[i][1]) |(x[ unit254_1[i][2] ] ^ unit254_1[i][3]));
			}
		if(X_contra>0) L[254][1]=2;
		}
	//Check all rules of unit[265][0]
	L[265][0] = LargeX[265][1]>0 ? 1 : 0;
	satisfiable[265][0]=1; 
	for(int i=0;i<41;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit265_0[i][0] ][ unit265_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit265_0[i][2] ][ unit265_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit265_0[i][4] ][ unit265_0[i][5] ] >0);
		X_contra = ( LargeX[265][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit265_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[265][1]=0; L[265][0]=1;}
			satisfiable[265][0]=satisfiable[265][0] & ((x[265] ^ 0) | (x[ unit265_0[i][0] ] ^ unit265_0[i][1]) |(x[ unit265_0[i][2] ] ^ unit265_0[i][3]));
			}
		if(X_contra>0) L[265][0]=2;
		}
	//Check all rules of unit[265][1]
	L[265][1] = LargeX[265][0]>0 ? 1 : 0;
	satisfiable[265][1]=1; 
	for(int i=0;i<120;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit265_1[i][0] ][ unit265_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit265_1[i][2] ][ unit265_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit265_1[i][4] ][ unit265_1[i][5] ] >0);
		X_contra = ( LargeX[265][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit265_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[265][0]=0; L[265][1]=1;}
			satisfiable[265][1]=satisfiable[265][1] & ((x[265] ^ 1) | (x[ unit265_1[i][0] ] ^ unit265_1[i][1]) |(x[ unit265_1[i][2] ] ^ unit265_1[i][3]));
			}
		if(X_contra>0) L[265][1]=2;
		}
	//Check all rules of unit[266][0]
	L[266][0] = LargeX[266][1]>0 ? 1 : 0;
	satisfiable[266][0]=1; 
	for(int i=0;i<47;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit266_0[i][0] ][ unit266_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit266_0[i][2] ][ unit266_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit266_0[i][4] ][ unit266_0[i][5] ] >0);
		X_contra = ( LargeX[266][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit266_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[266][1]=0; L[266][0]=1;}
			satisfiable[266][0]=satisfiable[266][0] & ((x[266] ^ 0) | (x[ unit266_0[i][0] ] ^ unit266_0[i][1]) |(x[ unit266_0[i][2] ] ^ unit266_0[i][3]));
			}
		if(X_contra>0) L[266][0]=2;
		}
	//Check all rules of unit[266][1]
	L[266][1] = LargeX[266][0]>0 ? 1 : 0;
	satisfiable[266][1]=1; 
	for(int i=0;i<97;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit266_1[i][0] ][ unit266_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit266_1[i][2] ][ unit266_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit266_1[i][4] ][ unit266_1[i][5] ] >0);
		X_contra = ( LargeX[266][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit266_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[266][0]=0; L[266][1]=1;}
			satisfiable[266][1]=satisfiable[266][1] & ((x[266] ^ 1) | (x[ unit266_1[i][0] ] ^ unit266_1[i][1]) |(x[ unit266_1[i][2] ] ^ unit266_1[i][3]));
			}
		if(X_contra>0) L[266][1]=2;
		}
	//Check all rules of unit[269][0]
	L[269][0] = LargeX[269][1]>0 ? 1 : 0;
	satisfiable[269][0]=1; 
	for(int i=0;i<58;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit269_0[i][0] ][ unit269_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit269_0[i][2] ][ unit269_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit269_0[i][4] ][ unit269_0[i][5] ] >0);
		X_contra = ( LargeX[269][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit269_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[269][1]=0; L[269][0]=1;}
			satisfiable[269][0]=satisfiable[269][0] & ((x[269] ^ 0) | (x[ unit269_0[i][0] ] ^ unit269_0[i][1]) |(x[ unit269_0[i][2] ] ^ unit269_0[i][3]));
			}
		if(X_contra>0) L[269][0]=2;
		}
	//Check all rules of unit[269][1]
	L[269][1] = LargeX[269][0]>0 ? 1 : 0;
	satisfiable[269][1]=1; 
	for(int i=0;i<50;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit269_1[i][0] ][ unit269_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit269_1[i][2] ][ unit269_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit269_1[i][4] ][ unit269_1[i][5] ] >0);
		X_contra = ( LargeX[269][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit269_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[269][0]=0; L[269][1]=1;}
			satisfiable[269][1]=satisfiable[269][1] & ((x[269] ^ 1) | (x[ unit269_1[i][0] ] ^ unit269_1[i][1]) |(x[ unit269_1[i][2] ] ^ unit269_1[i][3]));
			}
		if(X_contra>0) L[269][1]=2;
		}
	//Check all rules of unit[271][0]
	L[271][0] = LargeX[271][1]>0 ? 1 : 0;
	satisfiable[271][0]=1; 
	for(int i=0;i<85;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit271_0[i][0] ][ unit271_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit271_0[i][2] ][ unit271_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit271_0[i][4] ][ unit271_0[i][5] ] >0);
		X_contra = ( LargeX[271][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit271_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[271][1]=0; L[271][0]=1;}
			satisfiable[271][0]=satisfiable[271][0] & ((x[271] ^ 0) | (x[ unit271_0[i][0] ] ^ unit271_0[i][1]) |(x[ unit271_0[i][2] ] ^ unit271_0[i][3]));
			}
		if(X_contra>0) L[271][0]=2;
		}
	//Check all rules of unit[271][1]
	L[271][1] = LargeX[271][0]>0 ? 1 : 0;
	satisfiable[271][1]=1; 
	for(int i=0;i<154;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit271_1[i][0] ][ unit271_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit271_1[i][2] ][ unit271_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit271_1[i][4] ][ unit271_1[i][5] ] >0);
		X_contra = ( LargeX[271][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit271_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[271][0]=0; L[271][1]=1;}
			satisfiable[271][1]=satisfiable[271][1] & ((x[271] ^ 1) | (x[ unit271_1[i][0] ] ^ unit271_1[i][1]) |(x[ unit271_1[i][2] ] ^ unit271_1[i][3]));
			}
		if(X_contra>0) L[271][1]=2;
		}
	//Check all rules of unit[272][0]
	L[272][0] = LargeX[272][1]>0 ? 1 : 0;
	satisfiable[272][0]=1; 
	for(int i=0;i<87;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit272_0[i][0] ][ unit272_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit272_0[i][2] ][ unit272_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit272_0[i][4] ][ unit272_0[i][5] ] >0);
		X_contra = ( LargeX[272][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit272_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[272][1]=0; L[272][0]=1;}
			satisfiable[272][0]=satisfiable[272][0] & ((x[272] ^ 0) | (x[ unit272_0[i][0] ] ^ unit272_0[i][1]) |(x[ unit272_0[i][2] ] ^ unit272_0[i][3]));
			}
		if(X_contra>0) L[272][0]=2;
		}
	//Check all rules of unit[272][1]
	L[272][1] = LargeX[272][0]>0 ? 1 : 0;
	satisfiable[272][1]=1; 
	for(int i=0;i<150;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit272_1[i][0] ][ unit272_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit272_1[i][2] ][ unit272_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit272_1[i][4] ][ unit272_1[i][5] ] >0);
		X_contra = ( LargeX[272][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit272_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[272][0]=0; L[272][1]=1;}
			satisfiable[272][1]=satisfiable[272][1] & ((x[272] ^ 1) | (x[ unit272_1[i][0] ] ^ unit272_1[i][1]) |(x[ unit272_1[i][2] ] ^ unit272_1[i][3]));
			}
		if(X_contra>0) L[272][1]=2;
		}
	//Check all rules of unit[273][0]
	L[273][0] = LargeX[273][1]>0 ? 1 : 0;
	satisfiable[273][0]=1; 
	for(int i=0;i<80;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit273_0[i][0] ][ unit273_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit273_0[i][2] ][ unit273_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit273_0[i][4] ][ unit273_0[i][5] ] >0);
		X_contra = ( LargeX[273][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit273_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[273][1]=0; L[273][0]=1;}
			satisfiable[273][0]=satisfiable[273][0] & ((x[273] ^ 0) | (x[ unit273_0[i][0] ] ^ unit273_0[i][1]) |(x[ unit273_0[i][2] ] ^ unit273_0[i][3]));
			}
		if(X_contra>0) L[273][0]=2;
		}
	//Check all rules of unit[273][1]
	L[273][1] = LargeX[273][0]>0 ? 1 : 0;
	satisfiable[273][1]=1; 
	for(int i=0;i<155;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit273_1[i][0] ][ unit273_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit273_1[i][2] ][ unit273_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit273_1[i][4] ][ unit273_1[i][5] ] >0);
		X_contra = ( LargeX[273][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit273_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[273][0]=0; L[273][1]=1;}
			satisfiable[273][1]=satisfiable[273][1] & ((x[273] ^ 1) | (x[ unit273_1[i][0] ] ^ unit273_1[i][1]) |(x[ unit273_1[i][2] ] ^ unit273_1[i][3]));
			}
		if(X_contra>0) L[273][1]=2;
		}
	//Check all rules of unit[274][0]
	L[274][0] = LargeX[274][1]>0 ? 1 : 0;
	satisfiable[274][0]=1; 
	for(int i=0;i<86;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit274_0[i][0] ][ unit274_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit274_0[i][2] ][ unit274_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit274_0[i][4] ][ unit274_0[i][5] ] >0);
		X_contra = ( LargeX[274][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit274_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[274][1]=0; L[274][0]=1;}
			satisfiable[274][0]=satisfiable[274][0] & ((x[274] ^ 0) | (x[ unit274_0[i][0] ] ^ unit274_0[i][1]) |(x[ unit274_0[i][2] ] ^ unit274_0[i][3]));
			}
		if(X_contra>0) L[274][0]=2;
		}
	//Check all rules of unit[274][1]
	L[274][1] = LargeX[274][0]>0 ? 1 : 0;
	satisfiable[274][1]=1; 
	for(int i=0;i<128;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit274_1[i][0] ][ unit274_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit274_1[i][2] ][ unit274_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit274_1[i][4] ][ unit274_1[i][5] ] >0);
		X_contra = ( LargeX[274][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit274_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[274][0]=0; L[274][1]=1;}
			satisfiable[274][1]=satisfiable[274][1] & ((x[274] ^ 1) | (x[ unit274_1[i][0] ] ^ unit274_1[i][1]) |(x[ unit274_1[i][2] ] ^ unit274_1[i][3]));
			}
		if(X_contra>0) L[274][1]=2;
		}
	//Check all rules of unit[275][0]
	L[275][0] = LargeX[275][1]>0 ? 1 : 0;
	satisfiable[275][0]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit275_0[i][0] ][ unit275_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit275_0[i][2] ][ unit275_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit275_0[i][4] ][ unit275_0[i][5] ] >0);
		X_contra = ( LargeX[275][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit275_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[275][1]=0; L[275][0]=1;}
			satisfiable[275][0]=satisfiable[275][0] & ((x[275] ^ 0) | (x[ unit275_0[i][0] ] ^ unit275_0[i][1]) |(x[ unit275_0[i][2] ] ^ unit275_0[i][3]));
			}
		if(X_contra>0) L[275][0]=2;
		}
	//Check all rules of unit[275][1]
	L[275][1] = LargeX[275][0]>0 ? 1 : 0;
	satisfiable[275][1]=1; 
	for(int i=0;i<101;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit275_1[i][0] ][ unit275_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit275_1[i][2] ][ unit275_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit275_1[i][4] ][ unit275_1[i][5] ] >0);
		X_contra = ( LargeX[275][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit275_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[275][0]=0; L[275][1]=1;}
			satisfiable[275][1]=satisfiable[275][1] & ((x[275] ^ 1) | (x[ unit275_1[i][0] ] ^ unit275_1[i][1]) |(x[ unit275_1[i][2] ] ^ unit275_1[i][3]));
			}
		if(X_contra>0) L[275][1]=2;
		}
	//Check all rules of unit[276][0]
	L[276][0] = LargeX[276][1]>0 ? 1 : 0;
	satisfiable[276][0]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit276_0[i][0] ][ unit276_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit276_0[i][2] ][ unit276_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit276_0[i][4] ][ unit276_0[i][5] ] >0);
		X_contra = ( LargeX[276][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit276_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[276][1]=0; L[276][0]=1;}
			satisfiable[276][0]=satisfiable[276][0] & ((x[276] ^ 0) | (x[ unit276_0[i][0] ] ^ unit276_0[i][1]) |(x[ unit276_0[i][2] ] ^ unit276_0[i][3]));
			}
		if(X_contra>0) L[276][0]=2;
		}
	//Check all rules of unit[276][1]
	L[276][1] = LargeX[276][0]>0 ? 1 : 0;
	satisfiable[276][1]=1; 
	for(int i=0;i<100;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit276_1[i][0] ][ unit276_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit276_1[i][2] ][ unit276_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit276_1[i][4] ][ unit276_1[i][5] ] >0);
		X_contra = ( LargeX[276][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit276_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[276][0]=0; L[276][1]=1;}
			satisfiable[276][1]=satisfiable[276][1] & ((x[276] ^ 1) | (x[ unit276_1[i][0] ] ^ unit276_1[i][1]) |(x[ unit276_1[i][2] ] ^ unit276_1[i][3]));
			}
		if(X_contra>0) L[276][1]=2;
		}
	//Check all rules of unit[277][0]
	L[277][0] = LargeX[277][1]>0 ? 1 : 0;
	satisfiable[277][0]=1; 
	for(int i=0;i<86;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit277_0[i][0] ][ unit277_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit277_0[i][2] ][ unit277_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit277_0[i][4] ][ unit277_0[i][5] ] >0);
		X_contra = ( LargeX[277][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit277_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[277][1]=0; L[277][0]=1;}
			satisfiable[277][0]=satisfiable[277][0] & ((x[277] ^ 0) | (x[ unit277_0[i][0] ] ^ unit277_0[i][1]) |(x[ unit277_0[i][2] ] ^ unit277_0[i][3]));
			}
		if(X_contra>0) L[277][0]=2;
		}
	//Check all rules of unit[277][1]
	L[277][1] = LargeX[277][0]>0 ? 1 : 0;
	satisfiable[277][1]=1; 
	for(int i=0;i<175;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit277_1[i][0] ][ unit277_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit277_1[i][2] ][ unit277_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit277_1[i][4] ][ unit277_1[i][5] ] >0);
		X_contra = ( LargeX[277][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit277_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[277][0]=0; L[277][1]=1;}
			satisfiable[277][1]=satisfiable[277][1] & ((x[277] ^ 1) | (x[ unit277_1[i][0] ] ^ unit277_1[i][1]) |(x[ unit277_1[i][2] ] ^ unit277_1[i][3]));
			}
		if(X_contra>0) L[277][1]=2;
		}
	//Check all rules of unit[278][0]
	L[278][0] = LargeX[278][1]>0 ? 1 : 0;
	satisfiable[278][0]=1; 
	for(int i=0;i<87;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit278_0[i][0] ][ unit278_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit278_0[i][2] ][ unit278_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit278_0[i][4] ][ unit278_0[i][5] ] >0);
		X_contra = ( LargeX[278][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit278_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[278][1]=0; L[278][0]=1;}
			satisfiable[278][0]=satisfiable[278][0] & ((x[278] ^ 0) | (x[ unit278_0[i][0] ] ^ unit278_0[i][1]) |(x[ unit278_0[i][2] ] ^ unit278_0[i][3]));
			}
		if(X_contra>0) L[278][0]=2;
		}
	//Check all rules of unit[278][1]
	L[278][1] = LargeX[278][0]>0 ? 1 : 0;
	satisfiable[278][1]=1; 
	for(int i=0;i<176;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit278_1[i][0] ][ unit278_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit278_1[i][2] ][ unit278_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit278_1[i][4] ][ unit278_1[i][5] ] >0);
		X_contra = ( LargeX[278][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit278_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[278][0]=0; L[278][1]=1;}
			satisfiable[278][1]=satisfiable[278][1] & ((x[278] ^ 1) | (x[ unit278_1[i][0] ] ^ unit278_1[i][1]) |(x[ unit278_1[i][2] ] ^ unit278_1[i][3]));
			}
		if(X_contra>0) L[278][1]=2;
		}
	//Check all rules of unit[279][0]
	L[279][0] = LargeX[279][1]>0 ? 1 : 0;
	satisfiable[279][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit279_0[i][0] ][ unit279_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit279_0[i][2] ][ unit279_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit279_0[i][4] ][ unit279_0[i][5] ] >0);
		X_contra = ( LargeX[279][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit279_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[279][1]=0; L[279][0]=1;}
			satisfiable[279][0]=satisfiable[279][0] & ((x[279] ^ 0) | (x[ unit279_0[i][0] ] ^ unit279_0[i][1]) |(x[ unit279_0[i][2] ] ^ unit279_0[i][3]));
			}
		if(X_contra>0) L[279][0]=2;
		}
	//Check all rules of unit[279][1]
	L[279][1] = LargeX[279][0]>0 ? 1 : 0;
	satisfiable[279][1]=1; 
	for(int i=0;i<180;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit279_1[i][0] ][ unit279_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit279_1[i][2] ][ unit279_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit279_1[i][4] ][ unit279_1[i][5] ] >0);
		X_contra = ( LargeX[279][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit279_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[279][0]=0; L[279][1]=1;}
			satisfiable[279][1]=satisfiable[279][1] & ((x[279] ^ 1) | (x[ unit279_1[i][0] ] ^ unit279_1[i][1]) |(x[ unit279_1[i][2] ] ^ unit279_1[i][3]));
			}
		if(X_contra>0) L[279][1]=2;
		}
	//Check all rules of unit[280][0]
	L[280][0] = LargeX[280][1]>0 ? 1 : 0;
	satisfiable[280][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit280_0[i][0] ][ unit280_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit280_0[i][2] ][ unit280_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit280_0[i][4] ][ unit280_0[i][5] ] >0);
		X_contra = ( LargeX[280][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit280_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[280][1]=0; L[280][0]=1;}
			satisfiable[280][0]=satisfiable[280][0] & ((x[280] ^ 0) | (x[ unit280_0[i][0] ] ^ unit280_0[i][1]) |(x[ unit280_0[i][2] ] ^ unit280_0[i][3]));
			}
		if(X_contra>0) L[280][0]=2;
		}
	//Check all rules of unit[280][1]
	L[280][1] = LargeX[280][0]>0 ? 1 : 0;
	satisfiable[280][1]=1; 
	for(int i=0;i<179;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit280_1[i][0] ][ unit280_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit280_1[i][2] ][ unit280_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit280_1[i][4] ][ unit280_1[i][5] ] >0);
		X_contra = ( LargeX[280][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit280_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[280][0]=0; L[280][1]=1;}
			satisfiable[280][1]=satisfiable[280][1] & ((x[280] ^ 1) | (x[ unit280_1[i][0] ] ^ unit280_1[i][1]) |(x[ unit280_1[i][2] ] ^ unit280_1[i][3]));
			}
		if(X_contra>0) L[280][1]=2;
		}
	//Check all rules of unit[281][0]
	L[281][0] = LargeX[281][1]>0 ? 1 : 0;
	satisfiable[281][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit281_0[i][0] ][ unit281_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit281_0[i][2] ][ unit281_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit281_0[i][4] ][ unit281_0[i][5] ] >0);
		X_contra = ( LargeX[281][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit281_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[281][1]=0; L[281][0]=1;}
			satisfiable[281][0]=satisfiable[281][0] & ((x[281] ^ 0) | (x[ unit281_0[i][0] ] ^ unit281_0[i][1]) |(x[ unit281_0[i][2] ] ^ unit281_0[i][3]));
			}
		if(X_contra>0) L[281][0]=2;
		}
	//Check all rules of unit[281][1]
	L[281][1] = LargeX[281][0]>0 ? 1 : 0;
	satisfiable[281][1]=1; 
	for(int i=0;i<176;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit281_1[i][0] ][ unit281_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit281_1[i][2] ][ unit281_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit281_1[i][4] ][ unit281_1[i][5] ] >0);
		X_contra = ( LargeX[281][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit281_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[281][0]=0; L[281][1]=1;}
			satisfiable[281][1]=satisfiable[281][1] & ((x[281] ^ 1) | (x[ unit281_1[i][0] ] ^ unit281_1[i][1]) |(x[ unit281_1[i][2] ] ^ unit281_1[i][3]));
			}
		if(X_contra>0) L[281][1]=2;
		}
	//Check all rules of unit[282][0]
	L[282][0] = LargeX[282][1]>0 ? 1 : 0;
	satisfiable[282][0]=1; 
	for(int i=0;i<92;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit282_0[i][0] ][ unit282_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit282_0[i][2] ][ unit282_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit282_0[i][4] ][ unit282_0[i][5] ] >0);
		X_contra = ( LargeX[282][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit282_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[282][1]=0; L[282][0]=1;}
			satisfiable[282][0]=satisfiable[282][0] & ((x[282] ^ 0) | (x[ unit282_0[i][0] ] ^ unit282_0[i][1]) |(x[ unit282_0[i][2] ] ^ unit282_0[i][3]));
			}
		if(X_contra>0) L[282][0]=2;
		}
	//Check all rules of unit[282][1]
	L[282][1] = LargeX[282][0]>0 ? 1 : 0;
	satisfiable[282][1]=1; 
	for(int i=0;i<170;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit282_1[i][0] ][ unit282_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit282_1[i][2] ][ unit282_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit282_1[i][4] ][ unit282_1[i][5] ] >0);
		X_contra = ( LargeX[282][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit282_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[282][0]=0; L[282][1]=1;}
			satisfiable[282][1]=satisfiable[282][1] & ((x[282] ^ 1) | (x[ unit282_1[i][0] ] ^ unit282_1[i][1]) |(x[ unit282_1[i][2] ] ^ unit282_1[i][3]));
			}
		if(X_contra>0) L[282][1]=2;
		}
	//Check all rules of unit[283][0]
	L[283][0] = LargeX[283][1]>0 ? 1 : 0;
	satisfiable[283][0]=1; 
	for(int i=0;i<64;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit283_0[i][0] ][ unit283_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit283_0[i][2] ][ unit283_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit283_0[i][4] ][ unit283_0[i][5] ] >0);
		X_contra = ( LargeX[283][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit283_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[283][1]=0; L[283][0]=1;}
			satisfiable[283][0]=satisfiable[283][0] & ((x[283] ^ 0) | (x[ unit283_0[i][0] ] ^ unit283_0[i][1]) |(x[ unit283_0[i][2] ] ^ unit283_0[i][3]));
			}
		if(X_contra>0) L[283][0]=2;
		}
	//Check all rules of unit[283][1]
	L[283][1] = LargeX[283][0]>0 ? 1 : 0;
	satisfiable[283][1]=1; 
	for(int i=0;i<32;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit283_1[i][0] ][ unit283_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit283_1[i][2] ][ unit283_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit283_1[i][4] ][ unit283_1[i][5] ] >0);
		X_contra = ( LargeX[283][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit283_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[283][0]=0; L[283][1]=1;}
			satisfiable[283][1]=satisfiable[283][1] & ((x[283] ^ 1) | (x[ unit283_1[i][0] ] ^ unit283_1[i][1]) |(x[ unit283_1[i][2] ] ^ unit283_1[i][3]));
			}
		if(X_contra>0) L[283][1]=2;
		}
	//Check all rules of unit[284][0]
	L[284][0] = LargeX[284][1]>0 ? 1 : 0;
	satisfiable[284][0]=1; 
	for(int i=0;i<58;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit284_0[i][0] ][ unit284_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit284_0[i][2] ][ unit284_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit284_0[i][4] ][ unit284_0[i][5] ] >0);
		X_contra = ( LargeX[284][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit284_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[284][1]=0; L[284][0]=1;}
			satisfiable[284][0]=satisfiable[284][0] & ((x[284] ^ 0) | (x[ unit284_0[i][0] ] ^ unit284_0[i][1]) |(x[ unit284_0[i][2] ] ^ unit284_0[i][3]));
			}
		if(X_contra>0) L[284][0]=2;
		}
	//Check all rules of unit[284][1]
	L[284][1] = LargeX[284][0]>0 ? 1 : 0;
	satisfiable[284][1]=1; 
	for(int i=0;i<57;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit284_1[i][0] ][ unit284_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit284_1[i][2] ][ unit284_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit284_1[i][4] ][ unit284_1[i][5] ] >0);
		X_contra = ( LargeX[284][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit284_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[284][0]=0; L[284][1]=1;}
			satisfiable[284][1]=satisfiable[284][1] & ((x[284] ^ 1) | (x[ unit284_1[i][0] ] ^ unit284_1[i][1]) |(x[ unit284_1[i][2] ] ^ unit284_1[i][3]));
			}
		if(X_contra>0) L[284][1]=2;
		}
	//Check all rules of unit[285][0]
	L[285][0] = LargeX[285][1]>0 ? 1 : 0;
	satisfiable[285][0]=1; 
	for(int i=0;i<76;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit285_0[i][0] ][ unit285_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit285_0[i][2] ][ unit285_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit285_0[i][4] ][ unit285_0[i][5] ] >0);
		X_contra = ( LargeX[285][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit285_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[285][1]=0; L[285][0]=1;}
			satisfiable[285][0]=satisfiable[285][0] & ((x[285] ^ 0) | (x[ unit285_0[i][0] ] ^ unit285_0[i][1]) |(x[ unit285_0[i][2] ] ^ unit285_0[i][3]));
			}
		if(X_contra>0) L[285][0]=2;
		}
	//Check all rules of unit[285][1]
	L[285][1] = LargeX[285][0]>0 ? 1 : 0;
	satisfiable[285][1]=1; 
	for(int i=0;i<83;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit285_1[i][0] ][ unit285_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit285_1[i][2] ][ unit285_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit285_1[i][4] ][ unit285_1[i][5] ] >0);
		X_contra = ( LargeX[285][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit285_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[285][0]=0; L[285][1]=1;}
			satisfiable[285][1]=satisfiable[285][1] & ((x[285] ^ 1) | (x[ unit285_1[i][0] ] ^ unit285_1[i][1]) |(x[ unit285_1[i][2] ] ^ unit285_1[i][3]));
			}
		if(X_contra>0) L[285][1]=2;
		}
	//Check all rules of unit[286][0]
	L[286][0] = LargeX[286][1]>0 ? 1 : 0;
	satisfiable[286][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit286_0[i][0] ][ unit286_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit286_0[i][2] ][ unit286_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit286_0[i][4] ][ unit286_0[i][5] ] >0);
		X_contra = ( LargeX[286][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit286_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[286][1]=0; L[286][0]=1;}
			satisfiable[286][0]=satisfiable[286][0] & ((x[286] ^ 0) | (x[ unit286_0[i][0] ] ^ unit286_0[i][1]) |(x[ unit286_0[i][2] ] ^ unit286_0[i][3]));
			}
		if(X_contra>0) L[286][0]=2;
		}
	//Check all rules of unit[286][1]
	L[286][1] = LargeX[286][0]>0 ? 1 : 0;
	satisfiable[286][1]=1; 
	for(int i=0;i<107;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit286_1[i][0] ][ unit286_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit286_1[i][2] ][ unit286_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit286_1[i][4] ][ unit286_1[i][5] ] >0);
		X_contra = ( LargeX[286][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit286_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[286][0]=0; L[286][1]=1;}
			satisfiable[286][1]=satisfiable[286][1] & ((x[286] ^ 1) | (x[ unit286_1[i][0] ] ^ unit286_1[i][1]) |(x[ unit286_1[i][2] ] ^ unit286_1[i][3]));
			}
		if(X_contra>0) L[286][1]=2;
		}
	//Check all rules of unit[287][0]
	L[287][0] = LargeX[287][1]>0 ? 1 : 0;
	satisfiable[287][0]=1; 
	for(int i=0;i<131;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit287_0[i][0] ][ unit287_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit287_0[i][2] ][ unit287_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit287_0[i][4] ][ unit287_0[i][5] ] >0);
		X_contra = ( LargeX[287][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit287_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[287][1]=0; L[287][0]=1;}
			satisfiable[287][0]=satisfiable[287][0] & ((x[287] ^ 0) | (x[ unit287_0[i][0] ] ^ unit287_0[i][1]) |(x[ unit287_0[i][2] ] ^ unit287_0[i][3]));
			}
		if(X_contra>0) L[287][0]=2;
		}
	//Check all rules of unit[287][1]
	L[287][1] = LargeX[287][0]>0 ? 1 : 0;
	satisfiable[287][1]=1; 
	for(int i=0;i<127;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit287_1[i][0] ][ unit287_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit287_1[i][2] ][ unit287_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit287_1[i][4] ][ unit287_1[i][5] ] >0);
		X_contra = ( LargeX[287][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit287_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[287][0]=0; L[287][1]=1;}
			satisfiable[287][1]=satisfiable[287][1] & ((x[287] ^ 1) | (x[ unit287_1[i][0] ] ^ unit287_1[i][1]) |(x[ unit287_1[i][2] ] ^ unit287_1[i][3]));
			}
		if(X_contra>0) L[287][1]=2;
		}
	//Check all rules of unit[288][0]
	L[288][0] = LargeX[288][1]>0 ? 1 : 0;
	satisfiable[288][0]=1; 
	for(int i=0;i<116;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit288_0[i][0] ][ unit288_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit288_0[i][2] ][ unit288_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit288_0[i][4] ][ unit288_0[i][5] ] >0);
		X_contra = ( LargeX[288][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit288_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[288][1]=0; L[288][0]=1;}
			satisfiable[288][0]=satisfiable[288][0] & ((x[288] ^ 0) | (x[ unit288_0[i][0] ] ^ unit288_0[i][1]) |(x[ unit288_0[i][2] ] ^ unit288_0[i][3]));
			}
		if(X_contra>0) L[288][0]=2;
		}
	//Check all rules of unit[288][1]
	L[288][1] = LargeX[288][0]>0 ? 1 : 0;
	satisfiable[288][1]=1; 
	for(int i=0;i<155;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit288_1[i][0] ][ unit288_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit288_1[i][2] ][ unit288_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit288_1[i][4] ][ unit288_1[i][5] ] >0);
		X_contra = ( LargeX[288][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit288_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[288][0]=0; L[288][1]=1;}
			satisfiable[288][1]=satisfiable[288][1] & ((x[288] ^ 1) | (x[ unit288_1[i][0] ] ^ unit288_1[i][1]) |(x[ unit288_1[i][2] ] ^ unit288_1[i][3]));
			}
		if(X_contra>0) L[288][1]=2;
		}
	//Check all rules of unit[291][0]
	L[291][0] = LargeX[291][1]>0 ? 1 : 0;
	satisfiable[291][0]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit291_0[i][0] ][ unit291_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit291_0[i][2] ][ unit291_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit291_0[i][4] ][ unit291_0[i][5] ] >0);
		X_contra = ( LargeX[291][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit291_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[291][1]=0; L[291][0]=1;}
			satisfiable[291][0]=satisfiable[291][0] & ((x[291] ^ 0) | (x[ unit291_0[i][0] ] ^ unit291_0[i][1]) |(x[ unit291_0[i][2] ] ^ unit291_0[i][3]));
			}
		if(X_contra>0) L[291][0]=2;
		}
	//Check all rules of unit[291][1]
	L[291][1] = LargeX[291][0]>0 ? 1 : 0;
	satisfiable[291][1]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit291_1[i][0] ][ unit291_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit291_1[i][2] ][ unit291_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit291_1[i][4] ][ unit291_1[i][5] ] >0);
		X_contra = ( LargeX[291][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit291_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[291][0]=0; L[291][1]=1;}
			satisfiable[291][1]=satisfiable[291][1] & ((x[291] ^ 1) | (x[ unit291_1[i][0] ] ^ unit291_1[i][1]) |(x[ unit291_1[i][2] ] ^ unit291_1[i][3]));
			}
		if(X_contra>0) L[291][1]=2;
		}
	//Check all rules of unit[292][0]
	L[292][0] = LargeX[292][1]>0 ? 1 : 0;
	satisfiable[292][0]=1; 
	for(int i=0;i<7;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit292_0[i][0] ][ unit292_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit292_0[i][2] ][ unit292_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit292_0[i][4] ][ unit292_0[i][5] ] >0);
		X_contra = ( LargeX[292][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit292_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[292][1]=0; L[292][0]=1;}
			satisfiable[292][0]=satisfiable[292][0] & ((x[292] ^ 0) | (x[ unit292_0[i][0] ] ^ unit292_0[i][1]) |(x[ unit292_0[i][2] ] ^ unit292_0[i][3]));
			}
		if(X_contra>0) L[292][0]=2;
		}
	//Check all rules of unit[292][1]
	L[292][1] = LargeX[292][0]>0 ? 1 : 0;
	satisfiable[292][1]=1; 
	for(int i=0;i<7;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit292_1[i][0] ][ unit292_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit292_1[i][2] ][ unit292_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit292_1[i][4] ][ unit292_1[i][5] ] >0);
		X_contra = ( LargeX[292][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit292_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[292][0]=0; L[292][1]=1;}
			satisfiable[292][1]=satisfiable[292][1] & ((x[292] ^ 1) | (x[ unit292_1[i][0] ] ^ unit292_1[i][1]) |(x[ unit292_1[i][2] ] ^ unit292_1[i][3]));
			}
		if(X_contra>0) L[292][1]=2;
		}
	//Check all rules of unit[303][0]
	L[303][0] = LargeX[303][1]>0 ? 1 : 0;
	satisfiable[303][0]=1; 
	for(int i=0;i<21;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit303_0[i][0] ][ unit303_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit303_0[i][2] ][ unit303_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit303_0[i][4] ][ unit303_0[i][5] ] >0);
		X_contra = ( LargeX[303][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit303_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[303][1]=0; L[303][0]=1;}
			satisfiable[303][0]=satisfiable[303][0] & ((x[303] ^ 0) | (x[ unit303_0[i][0] ] ^ unit303_0[i][1]) |(x[ unit303_0[i][2] ] ^ unit303_0[i][3]));
			}
		if(X_contra>0) L[303][0]=2;
		}
	//Check all rules of unit[303][1]
	L[303][1] = LargeX[303][0]>0 ? 1 : 0;
	satisfiable[303][1]=1; 
	for(int i=0;i<67;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit303_1[i][0] ][ unit303_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit303_1[i][2] ][ unit303_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit303_1[i][4] ][ unit303_1[i][5] ] >0);
		X_contra = ( LargeX[303][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit303_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[303][0]=0; L[303][1]=1;}
			satisfiable[303][1]=satisfiable[303][1] & ((x[303] ^ 1) | (x[ unit303_1[i][0] ] ^ unit303_1[i][1]) |(x[ unit303_1[i][2] ] ^ unit303_1[i][3]));
			}
		if(X_contra>0) L[303][1]=2;
		}
	//Check all rules of unit[304][0]
	L[304][0] = LargeX[304][1]>0 ? 1 : 0;
	satisfiable[304][0]=1; 
	for(int i=0;i<23;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit304_0[i][0] ][ unit304_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit304_0[i][2] ][ unit304_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit304_0[i][4] ][ unit304_0[i][5] ] >0);
		X_contra = ( LargeX[304][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit304_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[304][1]=0; L[304][0]=1;}
			satisfiable[304][0]=satisfiable[304][0] & ((x[304] ^ 0) | (x[ unit304_0[i][0] ] ^ unit304_0[i][1]) |(x[ unit304_0[i][2] ] ^ unit304_0[i][3]));
			}
		if(X_contra>0) L[304][0]=2;
		}
	//Check all rules of unit[304][1]
	L[304][1] = LargeX[304][0]>0 ? 1 : 0;
	satisfiable[304][1]=1; 
	for(int i=0;i<61;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit304_1[i][0] ][ unit304_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit304_1[i][2] ][ unit304_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit304_1[i][4] ][ unit304_1[i][5] ] >0);
		X_contra = ( LargeX[304][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit304_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[304][0]=0; L[304][1]=1;}
			satisfiable[304][1]=satisfiable[304][1] & ((x[304] ^ 1) | (x[ unit304_1[i][0] ] ^ unit304_1[i][1]) |(x[ unit304_1[i][2] ] ^ unit304_1[i][3]));
			}
		if(X_contra>0) L[304][1]=2;
		}
	//Check all rules of unit[307][0]
	L[307][0] = LargeX[307][1]>0 ? 1 : 0;
	satisfiable[307][0]=1; 
	for(int i=0;i<86;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit307_0[i][0] ][ unit307_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit307_0[i][2] ][ unit307_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit307_0[i][4] ][ unit307_0[i][5] ] >0);
		X_contra = ( LargeX[307][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit307_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[307][1]=0; L[307][0]=1;}
			satisfiable[307][0]=satisfiable[307][0] & ((x[307] ^ 0) | (x[ unit307_0[i][0] ] ^ unit307_0[i][1]) |(x[ unit307_0[i][2] ] ^ unit307_0[i][3]));
			}
		if(X_contra>0) L[307][0]=2;
		}
	//Check all rules of unit[307][1]
	L[307][1] = LargeX[307][0]>0 ? 1 : 0;
	satisfiable[307][1]=1; 
	for(int i=0;i<158;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit307_1[i][0] ][ unit307_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit307_1[i][2] ][ unit307_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit307_1[i][4] ][ unit307_1[i][5] ] >0);
		X_contra = ( LargeX[307][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit307_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[307][0]=0; L[307][1]=1;}
			satisfiable[307][1]=satisfiable[307][1] & ((x[307] ^ 1) | (x[ unit307_1[i][0] ] ^ unit307_1[i][1]) |(x[ unit307_1[i][2] ] ^ unit307_1[i][3]));
			}
		if(X_contra>0) L[307][1]=2;
		}
	//Check all rules of unit[308][0]
	L[308][0] = LargeX[308][1]>0 ? 1 : 0;
	satisfiable[308][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit308_0[i][0] ][ unit308_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit308_0[i][2] ][ unit308_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit308_0[i][4] ][ unit308_0[i][5] ] >0);
		X_contra = ( LargeX[308][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit308_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[308][1]=0; L[308][0]=1;}
			satisfiable[308][0]=satisfiable[308][0] & ((x[308] ^ 0) | (x[ unit308_0[i][0] ] ^ unit308_0[i][1]) |(x[ unit308_0[i][2] ] ^ unit308_0[i][3]));
			}
		if(X_contra>0) L[308][0]=2;
		}
	//Check all rules of unit[308][1]
	L[308][1] = LargeX[308][0]>0 ? 1 : 0;
	satisfiable[308][1]=1; 
	for(int i=0;i<132;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit308_1[i][0] ][ unit308_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit308_1[i][2] ][ unit308_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit308_1[i][4] ][ unit308_1[i][5] ] >0);
		X_contra = ( LargeX[308][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit308_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[308][0]=0; L[308][1]=1;}
			satisfiable[308][1]=satisfiable[308][1] & ((x[308] ^ 1) | (x[ unit308_1[i][0] ] ^ unit308_1[i][1]) |(x[ unit308_1[i][2] ] ^ unit308_1[i][3]));
			}
		if(X_contra>0) L[308][1]=2;
		}
	//Check all rules of unit[309][0]
	L[309][0] = LargeX[309][1]>0 ? 1 : 0;
	satisfiable[309][0]=1; 
	for(int i=0;i<41;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit309_0[i][0] ][ unit309_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit309_0[i][2] ][ unit309_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit309_0[i][4] ][ unit309_0[i][5] ] >0);
		X_contra = ( LargeX[309][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit309_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[309][1]=0; L[309][0]=1;}
			satisfiable[309][0]=satisfiable[309][0] & ((x[309] ^ 0) | (x[ unit309_0[i][0] ] ^ unit309_0[i][1]) |(x[ unit309_0[i][2] ] ^ unit309_0[i][3]));
			}
		if(X_contra>0) L[309][0]=2;
		}
	//Check all rules of unit[309][1]
	L[309][1] = LargeX[309][0]>0 ? 1 : 0;
	satisfiable[309][1]=1; 
	for(int i=0;i<106;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit309_1[i][0] ][ unit309_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit309_1[i][2] ][ unit309_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit309_1[i][4] ][ unit309_1[i][5] ] >0);
		X_contra = ( LargeX[309][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit309_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[309][0]=0; L[309][1]=1;}
			satisfiable[309][1]=satisfiable[309][1] & ((x[309] ^ 1) | (x[ unit309_1[i][0] ] ^ unit309_1[i][1]) |(x[ unit309_1[i][2] ] ^ unit309_1[i][3]));
			}
		if(X_contra>0) L[309][1]=2;
		}
	//Check all rules of unit[310][0]
	L[310][0] = LargeX[310][1]>0 ? 1 : 0;
	satisfiable[310][0]=1; 
	for(int i=0;i<43;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit310_0[i][0] ][ unit310_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit310_0[i][2] ][ unit310_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit310_0[i][4] ][ unit310_0[i][5] ] >0);
		X_contra = ( LargeX[310][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit310_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[310][1]=0; L[310][0]=1;}
			satisfiable[310][0]=satisfiable[310][0] & ((x[310] ^ 0) | (x[ unit310_0[i][0] ] ^ unit310_0[i][1]) |(x[ unit310_0[i][2] ] ^ unit310_0[i][3]));
			}
		if(X_contra>0) L[310][0]=2;
		}
	//Check all rules of unit[310][1]
	L[310][1] = LargeX[310][0]>0 ? 1 : 0;
	satisfiable[310][1]=1; 
	for(int i=0;i<97;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit310_1[i][0] ][ unit310_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit310_1[i][2] ][ unit310_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit310_1[i][4] ][ unit310_1[i][5] ] >0);
		X_contra = ( LargeX[310][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit310_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[310][0]=0; L[310][1]=1;}
			satisfiable[310][1]=satisfiable[310][1] & ((x[310] ^ 1) | (x[ unit310_1[i][0] ] ^ unit310_1[i][1]) |(x[ unit310_1[i][2] ] ^ unit310_1[i][3]));
			}
		if(X_contra>0) L[310][1]=2;
		}
	//Check all rules of unit[311][0]
	L[311][0] = LargeX[311][1]>0 ? 1 : 0;
	satisfiable[311][0]=1; 
	for(int i=0;i<42;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit311_0[i][0] ][ unit311_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit311_0[i][2] ][ unit311_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit311_0[i][4] ][ unit311_0[i][5] ] >0);
		X_contra = ( LargeX[311][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit311_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[311][1]=0; L[311][0]=1;}
			satisfiable[311][0]=satisfiable[311][0] & ((x[311] ^ 0) | (x[ unit311_0[i][0] ] ^ unit311_0[i][1]) |(x[ unit311_0[i][2] ] ^ unit311_0[i][3]));
			}
		if(X_contra>0) L[311][0]=2;
		}
	//Check all rules of unit[311][1]
	L[311][1] = LargeX[311][0]>0 ? 1 : 0;
	satisfiable[311][1]=1; 
	for(int i=0;i<95;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit311_1[i][0] ][ unit311_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit311_1[i][2] ][ unit311_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit311_1[i][4] ][ unit311_1[i][5] ] >0);
		X_contra = ( LargeX[311][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit311_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[311][0]=0; L[311][1]=1;}
			satisfiable[311][1]=satisfiable[311][1] & ((x[311] ^ 1) | (x[ unit311_1[i][0] ] ^ unit311_1[i][1]) |(x[ unit311_1[i][2] ] ^ unit311_1[i][3]));
			}
		if(X_contra>0) L[311][1]=2;
		}
	//Check all rules of unit[312][0]
	L[312][0] = LargeX[312][1]>0 ? 1 : 0;
	satisfiable[312][0]=1; 
	for(int i=0;i<48;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit312_0[i][0] ][ unit312_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit312_0[i][2] ][ unit312_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit312_0[i][4] ][ unit312_0[i][5] ] >0);
		X_contra = ( LargeX[312][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit312_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[312][1]=0; L[312][0]=1;}
			satisfiable[312][0]=satisfiable[312][0] & ((x[312] ^ 0) | (x[ unit312_0[i][0] ] ^ unit312_0[i][1]) |(x[ unit312_0[i][2] ] ^ unit312_0[i][3]));
			}
		if(X_contra>0) L[312][0]=2;
		}
	//Check all rules of unit[312][1]
	L[312][1] = LargeX[312][0]>0 ? 1 : 0;
	satisfiable[312][1]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit312_1[i][0] ][ unit312_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit312_1[i][2] ][ unit312_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit312_1[i][4] ][ unit312_1[i][5] ] >0);
		X_contra = ( LargeX[312][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit312_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[312][0]=0; L[312][1]=1;}
			satisfiable[312][1]=satisfiable[312][1] & ((x[312] ^ 1) | (x[ unit312_1[i][0] ] ^ unit312_1[i][1]) |(x[ unit312_1[i][2] ] ^ unit312_1[i][3]));
			}
		if(X_contra>0) L[312][1]=2;
		}
	//Check all rules of unit[313][0]
	L[313][0] = LargeX[313][1]>0 ? 1 : 0;
	satisfiable[313][0]=1; 
	for(int i=0;i<70;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit313_0[i][0] ][ unit313_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit313_0[i][2] ][ unit313_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit313_0[i][4] ][ unit313_0[i][5] ] >0);
		X_contra = ( LargeX[313][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit313_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[313][1]=0; L[313][0]=1;}
			satisfiable[313][0]=satisfiable[313][0] & ((x[313] ^ 0) | (x[ unit313_0[i][0] ] ^ unit313_0[i][1]) |(x[ unit313_0[i][2] ] ^ unit313_0[i][3]));
			}
		if(X_contra>0) L[313][0]=2;
		}
	//Check all rules of unit[313][1]
	L[313][1] = LargeX[313][0]>0 ? 1 : 0;
	satisfiable[313][1]=1; 
	for(int i=0;i<182;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit313_1[i][0] ][ unit313_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit313_1[i][2] ][ unit313_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit313_1[i][4] ][ unit313_1[i][5] ] >0);
		X_contra = ( LargeX[313][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit313_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[313][0]=0; L[313][1]=1;}
			satisfiable[313][1]=satisfiable[313][1] & ((x[313] ^ 1) | (x[ unit313_1[i][0] ] ^ unit313_1[i][1]) |(x[ unit313_1[i][2] ] ^ unit313_1[i][3]));
			}
		if(X_contra>0) L[313][1]=2;
		}
	//Check all rules of unit[314][0]
	L[314][0] = LargeX[314][1]>0 ? 1 : 0;
	satisfiable[314][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit314_0[i][0] ][ unit314_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit314_0[i][2] ][ unit314_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit314_0[i][4] ][ unit314_0[i][5] ] >0);
		X_contra = ( LargeX[314][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit314_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[314][1]=0; L[314][0]=1;}
			satisfiable[314][0]=satisfiable[314][0] & ((x[314] ^ 0) | (x[ unit314_0[i][0] ] ^ unit314_0[i][1]) |(x[ unit314_0[i][2] ] ^ unit314_0[i][3]));
			}
		if(X_contra>0) L[314][0]=2;
		}
	//Check all rules of unit[314][1]
	L[314][1] = LargeX[314][0]>0 ? 1 : 0;
	satisfiable[314][1]=1; 
	for(int i=0;i<178;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit314_1[i][0] ][ unit314_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit314_1[i][2] ][ unit314_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit314_1[i][4] ][ unit314_1[i][5] ] >0);
		X_contra = ( LargeX[314][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit314_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[314][0]=0; L[314][1]=1;}
			satisfiable[314][1]=satisfiable[314][1] & ((x[314] ^ 1) | (x[ unit314_1[i][0] ] ^ unit314_1[i][1]) |(x[ unit314_1[i][2] ] ^ unit314_1[i][3]));
			}
		if(X_contra>0) L[314][1]=2;
		}
	//Check all rules of unit[315][0]
	L[315][0] = LargeX[315][1]>0 ? 1 : 0;
	satisfiable[315][0]=1; 
	for(int i=0;i<77;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit315_0[i][0] ][ unit315_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit315_0[i][2] ][ unit315_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit315_0[i][4] ][ unit315_0[i][5] ] >0);
		X_contra = ( LargeX[315][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit315_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[315][1]=0; L[315][0]=1;}
			satisfiable[315][0]=satisfiable[315][0] & ((x[315] ^ 0) | (x[ unit315_0[i][0] ] ^ unit315_0[i][1]) |(x[ unit315_0[i][2] ] ^ unit315_0[i][3]));
			}
		if(X_contra>0) L[315][0]=2;
		}
	//Check all rules of unit[315][1]
	L[315][1] = LargeX[315][0]>0 ? 1 : 0;
	satisfiable[315][1]=1; 
	for(int i=0;i<179;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit315_1[i][0] ][ unit315_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit315_1[i][2] ][ unit315_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit315_1[i][4] ][ unit315_1[i][5] ] >0);
		X_contra = ( LargeX[315][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit315_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[315][0]=0; L[315][1]=1;}
			satisfiable[315][1]=satisfiable[315][1] & ((x[315] ^ 1) | (x[ unit315_1[i][0] ] ^ unit315_1[i][1]) |(x[ unit315_1[i][2] ] ^ unit315_1[i][3]));
			}
		if(X_contra>0) L[315][1]=2;
		}
	//Check all rules of unit[316][0]
	L[316][0] = LargeX[316][1]>0 ? 1 : 0;
	satisfiable[316][0]=1; 
	for(int i=0;i<77;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit316_0[i][0] ][ unit316_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit316_0[i][2] ][ unit316_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit316_0[i][4] ][ unit316_0[i][5] ] >0);
		X_contra = ( LargeX[316][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit316_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[316][1]=0; L[316][0]=1;}
			satisfiable[316][0]=satisfiable[316][0] & ((x[316] ^ 0) | (x[ unit316_0[i][0] ] ^ unit316_0[i][1]) |(x[ unit316_0[i][2] ] ^ unit316_0[i][3]));
			}
		if(X_contra>0) L[316][0]=2;
		}
	//Check all rules of unit[316][1]
	L[316][1] = LargeX[316][0]>0 ? 1 : 0;
	satisfiable[316][1]=1; 
	for(int i=0;i<179;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit316_1[i][0] ][ unit316_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit316_1[i][2] ][ unit316_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit316_1[i][4] ][ unit316_1[i][5] ] >0);
		X_contra = ( LargeX[316][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit316_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[316][0]=0; L[316][1]=1;}
			satisfiable[316][1]=satisfiable[316][1] & ((x[316] ^ 1) | (x[ unit316_1[i][0] ] ^ unit316_1[i][1]) |(x[ unit316_1[i][2] ] ^ unit316_1[i][3]));
			}
		if(X_contra>0) L[316][1]=2;
		}
	//Check all rules of unit[318][0]
	L[318][0] = LargeX[318][1]>0 ? 1 : 0;
	satisfiable[318][0]=1; 
	for(int i=0;i<83;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit318_0[i][0] ][ unit318_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit318_0[i][2] ][ unit318_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit318_0[i][4] ][ unit318_0[i][5] ] >0);
		X_contra = ( LargeX[318][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit318_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[318][1]=0; L[318][0]=1;}
			satisfiable[318][0]=satisfiable[318][0] & ((x[318] ^ 0) | (x[ unit318_0[i][0] ] ^ unit318_0[i][1]) |(x[ unit318_0[i][2] ] ^ unit318_0[i][3]));
			}
		if(X_contra>0) L[318][0]=2;
		}
	//Check all rules of unit[318][1]
	L[318][1] = LargeX[318][0]>0 ? 1 : 0;
	satisfiable[318][1]=1; 
	for(int i=0;i<174;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit318_1[i][0] ][ unit318_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit318_1[i][2] ][ unit318_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit318_1[i][4] ][ unit318_1[i][5] ] >0);
		X_contra = ( LargeX[318][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit318_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[318][0]=0; L[318][1]=1;}
			satisfiable[318][1]=satisfiable[318][1] & ((x[318] ^ 1) | (x[ unit318_1[i][0] ] ^ unit318_1[i][1]) |(x[ unit318_1[i][2] ] ^ unit318_1[i][3]));
			}
		if(X_contra>0) L[318][1]=2;
		}
	//Check all rules of unit[319][0]
	L[319][0] = LargeX[319][1]>0 ? 1 : 0;
	satisfiable[319][0]=1; 
	for(int i=0;i<62;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit319_0[i][0] ][ unit319_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit319_0[i][2] ][ unit319_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit319_0[i][4] ][ unit319_0[i][5] ] >0);
		X_contra = ( LargeX[319][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit319_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[319][1]=0; L[319][0]=1;}
			satisfiable[319][0]=satisfiable[319][0] & ((x[319] ^ 0) | (x[ unit319_0[i][0] ] ^ unit319_0[i][1]) |(x[ unit319_0[i][2] ] ^ unit319_0[i][3]));
			}
		if(X_contra>0) L[319][0]=2;
		}
	//Check all rules of unit[319][1]
	L[319][1] = LargeX[319][0]>0 ? 1 : 0;
	satisfiable[319][1]=1; 
	for(int i=0;i<33;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit319_1[i][0] ][ unit319_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit319_1[i][2] ][ unit319_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit319_1[i][4] ][ unit319_1[i][5] ] >0);
		X_contra = ( LargeX[319][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit319_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[319][0]=0; L[319][1]=1;}
			satisfiable[319][1]=satisfiable[319][1] & ((x[319] ^ 1) | (x[ unit319_1[i][0] ] ^ unit319_1[i][1]) |(x[ unit319_1[i][2] ] ^ unit319_1[i][3]));
			}
		if(X_contra>0) L[319][1]=2;
		}
	//Check all rules of unit[320][0]
	L[320][0] = LargeX[320][1]>0 ? 1 : 0;
	satisfiable[320][0]=1; 
	for(int i=0;i<56;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit320_0[i][0] ][ unit320_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit320_0[i][2] ][ unit320_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit320_0[i][4] ][ unit320_0[i][5] ] >0);
		X_contra = ( LargeX[320][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit320_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[320][1]=0; L[320][0]=1;}
			satisfiable[320][0]=satisfiable[320][0] & ((x[320] ^ 0) | (x[ unit320_0[i][0] ] ^ unit320_0[i][1]) |(x[ unit320_0[i][2] ] ^ unit320_0[i][3]));
			}
		if(X_contra>0) L[320][0]=2;
		}
	//Check all rules of unit[320][1]
	L[320][1] = LargeX[320][0]>0 ? 1 : 0;
	satisfiable[320][1]=1; 
	for(int i=0;i<58;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit320_1[i][0] ][ unit320_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit320_1[i][2] ][ unit320_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit320_1[i][4] ][ unit320_1[i][5] ] >0);
		X_contra = ( LargeX[320][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit320_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[320][0]=0; L[320][1]=1;}
			satisfiable[320][1]=satisfiable[320][1] & ((x[320] ^ 1) | (x[ unit320_1[i][0] ] ^ unit320_1[i][1]) |(x[ unit320_1[i][2] ] ^ unit320_1[i][3]));
			}
		if(X_contra>0) L[320][1]=2;
		}
	//Check all rules of unit[321][0]
	L[321][0] = LargeX[321][1]>0 ? 1 : 0;
	satisfiable[321][0]=1; 
	for(int i=0;i<35;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit321_0[i][0] ][ unit321_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit321_0[i][2] ][ unit321_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit321_0[i][4] ][ unit321_0[i][5] ] >0);
		X_contra = ( LargeX[321][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit321_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[321][1]=0; L[321][0]=1;}
			satisfiable[321][0]=satisfiable[321][0] & ((x[321] ^ 0) | (x[ unit321_0[i][0] ] ^ unit321_0[i][1]) |(x[ unit321_0[i][2] ] ^ unit321_0[i][3]));
			}
		if(X_contra>0) L[321][0]=2;
		}
	//Check all rules of unit[321][1]
	L[321][1] = LargeX[321][0]>0 ? 1 : 0;
	satisfiable[321][1]=1; 
	for(int i=0;i<85;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit321_1[i][0] ][ unit321_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit321_1[i][2] ][ unit321_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit321_1[i][4] ][ unit321_1[i][5] ] >0);
		X_contra = ( LargeX[321][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit321_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[321][0]=0; L[321][1]=1;}
			satisfiable[321][1]=satisfiable[321][1] & ((x[321] ^ 1) | (x[ unit321_1[i][0] ] ^ unit321_1[i][1]) |(x[ unit321_1[i][2] ] ^ unit321_1[i][3]));
			}
		if(X_contra>0) L[321][1]=2;
		}
	//Check all rules of unit[322][0]
	L[322][0] = LargeX[322][1]>0 ? 1 : 0;
	satisfiable[322][0]=1; 
	for(int i=0;i<29;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit322_0[i][0] ][ unit322_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit322_0[i][2] ][ unit322_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit322_0[i][4] ][ unit322_0[i][5] ] >0);
		X_contra = ( LargeX[322][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit322_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[322][1]=0; L[322][0]=1;}
			satisfiable[322][0]=satisfiable[322][0] & ((x[322] ^ 0) | (x[ unit322_0[i][0] ] ^ unit322_0[i][1]) |(x[ unit322_0[i][2] ] ^ unit322_0[i][3]));
			}
		if(X_contra>0) L[322][0]=2;
		}
	//Check all rules of unit[322][1]
	L[322][1] = LargeX[322][0]>0 ? 1 : 0;
	satisfiable[322][1]=1; 
	for(int i=0;i<109;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit322_1[i][0] ][ unit322_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit322_1[i][2] ][ unit322_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit322_1[i][4] ][ unit322_1[i][5] ] >0);
		X_contra = ( LargeX[322][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit322_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[322][0]=0; L[322][1]=1;}
			satisfiable[322][1]=satisfiable[322][1] & ((x[322] ^ 1) | (x[ unit322_1[i][0] ] ^ unit322_1[i][1]) |(x[ unit322_1[i][2] ] ^ unit322_1[i][3]));
			}
		if(X_contra>0) L[322][1]=2;
		}
	//Check all rules of unit[323][0]
	L[323][0] = LargeX[323][1]>0 ? 1 : 0;
	satisfiable[323][0]=1; 
	for(int i=0;i<88;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit323_0[i][0] ][ unit323_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit323_0[i][2] ][ unit323_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit323_0[i][4] ][ unit323_0[i][5] ] >0);
		X_contra = ( LargeX[323][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit323_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[323][1]=0; L[323][0]=1;}
			satisfiable[323][0]=satisfiable[323][0] & ((x[323] ^ 0) | (x[ unit323_0[i][0] ] ^ unit323_0[i][1]) |(x[ unit323_0[i][2] ] ^ unit323_0[i][3]));
			}
		if(X_contra>0) L[323][0]=2;
		}
	//Check all rules of unit[323][1]
	L[323][1] = LargeX[323][0]>0 ? 1 : 0;
	satisfiable[323][1]=1; 
	for(int i=0;i<128;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit323_1[i][0] ][ unit323_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit323_1[i][2] ][ unit323_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit323_1[i][4] ][ unit323_1[i][5] ] >0);
		X_contra = ( LargeX[323][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit323_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[323][0]=0; L[323][1]=1;}
			satisfiable[323][1]=satisfiable[323][1] & ((x[323] ^ 1) | (x[ unit323_1[i][0] ] ^ unit323_1[i][1]) |(x[ unit323_1[i][2] ] ^ unit323_1[i][3]));
			}
		if(X_contra>0) L[323][1]=2;
		}
	//Check all rules of unit[324][0]
	L[324][0] = LargeX[324][1]>0 ? 1 : 0;
	satisfiable[324][0]=1; 
	for(int i=0;i<74;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit324_0[i][0] ][ unit324_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit324_0[i][2] ][ unit324_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit324_0[i][4] ][ unit324_0[i][5] ] >0);
		X_contra = ( LargeX[324][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit324_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[324][1]=0; L[324][0]=1;}
			satisfiable[324][0]=satisfiable[324][0] & ((x[324] ^ 0) | (x[ unit324_0[i][0] ] ^ unit324_0[i][1]) |(x[ unit324_0[i][2] ] ^ unit324_0[i][3]));
			}
		if(X_contra>0) L[324][0]=2;
		}
	//Check all rules of unit[324][1]
	L[324][1] = LargeX[324][0]>0 ? 1 : 0;
	satisfiable[324][1]=1; 
	for(int i=0;i<155;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit324_1[i][0] ][ unit324_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit324_1[i][2] ][ unit324_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit324_1[i][4] ][ unit324_1[i][5] ] >0);
		X_contra = ( LargeX[324][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit324_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[324][0]=0; L[324][1]=1;}
			satisfiable[324][1]=satisfiable[324][1] & ((x[324] ^ 1) | (x[ unit324_1[i][0] ] ^ unit324_1[i][1]) |(x[ unit324_1[i][2] ] ^ unit324_1[i][3]));
			}
		if(X_contra>0) L[324][1]=2;
		}
	//Check all rules of unit[325][0]
	L[325][0] = LargeX[325][1]>0 ? 1 : 0;
	satisfiable[325][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit325_0[i][0] ][ unit325_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit325_0[i][2] ][ unit325_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit325_0[i][4] ][ unit325_0[i][5] ] >0);
		X_contra = ( LargeX[325][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit325_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[325][1]=0; L[325][0]=1;}
			satisfiable[325][0]=satisfiable[325][0] & ((x[325] ^ 0) | (x[ unit325_0[i][0] ] ^ unit325_0[i][1]) |(x[ unit325_0[i][2] ] ^ unit325_0[i][3]));
			}
		if(X_contra>0) L[325][0]=2;
		}
	//Check all rules of unit[325][1]
	L[325][1] = LargeX[325][0]>0 ? 1 : 0;
	satisfiable[325][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit325_1[i][0] ][ unit325_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit325_1[i][2] ][ unit325_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit325_1[i][4] ][ unit325_1[i][5] ] >0);
		X_contra = ( LargeX[325][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit325_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[325][0]=0; L[325][1]=1;}
			satisfiable[325][1]=satisfiable[325][1] & ((x[325] ^ 1) | (x[ unit325_1[i][0] ] ^ unit325_1[i][1]) |(x[ unit325_1[i][2] ] ^ unit325_1[i][3]));
			}
		if(X_contra>0) L[325][1]=2;
		}
	//Check all rules of unit[326][0]
	L[326][0] = LargeX[326][1]>0 ? 1 : 0;
	satisfiable[326][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit326_0[i][0] ][ unit326_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit326_0[i][2] ][ unit326_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit326_0[i][4] ][ unit326_0[i][5] ] >0);
		X_contra = ( LargeX[326][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit326_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[326][1]=0; L[326][0]=1;}
			satisfiable[326][0]=satisfiable[326][0] & ((x[326] ^ 0) | (x[ unit326_0[i][0] ] ^ unit326_0[i][1]) |(x[ unit326_0[i][2] ] ^ unit326_0[i][3]));
			}
		if(X_contra>0) L[326][0]=2;
		}
	//Check all rules of unit[326][1]
	L[326][1] = LargeX[326][0]>0 ? 1 : 0;
	satisfiable[326][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit326_1[i][0] ][ unit326_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit326_1[i][2] ][ unit326_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit326_1[i][4] ][ unit326_1[i][5] ] >0);
		X_contra = ( LargeX[326][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit326_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[326][0]=0; L[326][1]=1;}
			satisfiable[326][1]=satisfiable[326][1] & ((x[326] ^ 1) | (x[ unit326_1[i][0] ] ^ unit326_1[i][1]) |(x[ unit326_1[i][2] ] ^ unit326_1[i][3]));
			}
		if(X_contra>0) L[326][1]=2;
		}
	//Check all rules of unit[327][0]
	L[327][0] = LargeX[327][1]>0 ? 1 : 0;
	satisfiable[327][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit327_0[i][0] ][ unit327_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit327_0[i][2] ][ unit327_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit327_0[i][4] ][ unit327_0[i][5] ] >0);
		X_contra = ( LargeX[327][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit327_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[327][1]=0; L[327][0]=1;}
			satisfiable[327][0]=satisfiable[327][0] & ((x[327] ^ 0) | (x[ unit327_0[i][0] ] ^ unit327_0[i][1]) |(x[ unit327_0[i][2] ] ^ unit327_0[i][3]));
			}
		if(X_contra>0) L[327][0]=2;
		}
	//Check all rules of unit[327][1]
	L[327][1] = LargeX[327][0]>0 ? 1 : 0;
	satisfiable[327][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit327_1[i][0] ][ unit327_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit327_1[i][2] ][ unit327_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit327_1[i][4] ][ unit327_1[i][5] ] >0);
		X_contra = ( LargeX[327][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit327_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[327][0]=0; L[327][1]=1;}
			satisfiable[327][1]=satisfiable[327][1] & ((x[327] ^ 1) | (x[ unit327_1[i][0] ] ^ unit327_1[i][1]) |(x[ unit327_1[i][2] ] ^ unit327_1[i][3]));
			}
		if(X_contra>0) L[327][1]=2;
		}
	//Check all rules of unit[328][0]
	L[328][0] = LargeX[328][1]>0 ? 1 : 0;
	satisfiable[328][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit328_0[i][0] ][ unit328_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit328_0[i][2] ][ unit328_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit328_0[i][4] ][ unit328_0[i][5] ] >0);
		X_contra = ( LargeX[328][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit328_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[328][1]=0; L[328][0]=1;}
			satisfiable[328][0]=satisfiable[328][0] & ((x[328] ^ 0) | (x[ unit328_0[i][0] ] ^ unit328_0[i][1]) |(x[ unit328_0[i][2] ] ^ unit328_0[i][3]));
			}
		if(X_contra>0) L[328][0]=2;
		}
	//Check all rules of unit[328][1]
	L[328][1] = LargeX[328][0]>0 ? 1 : 0;
	satisfiable[328][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit328_1[i][0] ][ unit328_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit328_1[i][2] ][ unit328_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit328_1[i][4] ][ unit328_1[i][5] ] >0);
		X_contra = ( LargeX[328][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit328_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[328][0]=0; L[328][1]=1;}
			satisfiable[328][1]=satisfiable[328][1] & ((x[328] ^ 1) | (x[ unit328_1[i][0] ] ^ unit328_1[i][1]) |(x[ unit328_1[i][2] ] ^ unit328_1[i][3]));
			}
		if(X_contra>0) L[328][1]=2;
		}
	//Check all rules of unit[329][0]
	L[329][0] = LargeX[329][1]>0 ? 1 : 0;
	satisfiable[329][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit329_0[i][0] ][ unit329_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit329_0[i][2] ][ unit329_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit329_0[i][4] ][ unit329_0[i][5] ] >0);
		X_contra = ( LargeX[329][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit329_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[329][1]=0; L[329][0]=1;}
			satisfiable[329][0]=satisfiable[329][0] & ((x[329] ^ 0) | (x[ unit329_0[i][0] ] ^ unit329_0[i][1]) |(x[ unit329_0[i][2] ] ^ unit329_0[i][3]));
			}
		if(X_contra>0) L[329][0]=2;
		}
	//Check all rules of unit[329][1]
	L[329][1] = LargeX[329][0]>0 ? 1 : 0;
	satisfiable[329][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit329_1[i][0] ][ unit329_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit329_1[i][2] ][ unit329_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit329_1[i][4] ][ unit329_1[i][5] ] >0);
		X_contra = ( LargeX[329][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit329_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[329][0]=0; L[329][1]=1;}
			satisfiable[329][1]=satisfiable[329][1] & ((x[329] ^ 1) | (x[ unit329_1[i][0] ] ^ unit329_1[i][1]) |(x[ unit329_1[i][2] ] ^ unit329_1[i][3]));
			}
		if(X_contra>0) L[329][1]=2;
		}
	//Check all rules of unit[330][0]
	L[330][0] = LargeX[330][1]>0 ? 1 : 0;
	satisfiable[330][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit330_0[i][0] ][ unit330_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit330_0[i][2] ][ unit330_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit330_0[i][4] ][ unit330_0[i][5] ] >0);
		X_contra = ( LargeX[330][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit330_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[330][1]=0; L[330][0]=1;}
			satisfiable[330][0]=satisfiable[330][0] & ((x[330] ^ 0) | (x[ unit330_0[i][0] ] ^ unit330_0[i][1]) |(x[ unit330_0[i][2] ] ^ unit330_0[i][3]));
			}
		if(X_contra>0) L[330][0]=2;
		}
	//Check all rules of unit[330][1]
	L[330][1] = LargeX[330][0]>0 ? 1 : 0;
	satisfiable[330][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit330_1[i][0] ][ unit330_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit330_1[i][2] ][ unit330_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit330_1[i][4] ][ unit330_1[i][5] ] >0);
		X_contra = ( LargeX[330][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit330_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[330][0]=0; L[330][1]=1;}
			satisfiable[330][1]=satisfiable[330][1] & ((x[330] ^ 1) | (x[ unit330_1[i][0] ] ^ unit330_1[i][1]) |(x[ unit330_1[i][2] ] ^ unit330_1[i][3]));
			}
		if(X_contra>0) L[330][1]=2;
		}
	//Check all rules of unit[331][0]
	L[331][0] = LargeX[331][1]>0 ? 1 : 0;
	satisfiable[331][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit331_0[i][0] ][ unit331_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit331_0[i][2] ][ unit331_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit331_0[i][4] ][ unit331_0[i][5] ] >0);
		X_contra = ( LargeX[331][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit331_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[331][1]=0; L[331][0]=1;}
			satisfiable[331][0]=satisfiable[331][0] & ((x[331] ^ 0) | (x[ unit331_0[i][0] ] ^ unit331_0[i][1]) |(x[ unit331_0[i][2] ] ^ unit331_0[i][3]));
			}
		if(X_contra>0) L[331][0]=2;
		}
	//Check all rules of unit[331][1]
	L[331][1] = LargeX[331][0]>0 ? 1 : 0;
	satisfiable[331][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit331_1[i][0] ][ unit331_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit331_1[i][2] ][ unit331_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit331_1[i][4] ][ unit331_1[i][5] ] >0);
		X_contra = ( LargeX[331][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit331_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[331][0]=0; L[331][1]=1;}
			satisfiable[331][1]=satisfiable[331][1] & ((x[331] ^ 1) | (x[ unit331_1[i][0] ] ^ unit331_1[i][1]) |(x[ unit331_1[i][2] ] ^ unit331_1[i][3]));
			}
		if(X_contra>0) L[331][1]=2;
		}
	//Check all rules of unit[332][0]
	L[332][0] = LargeX[332][1]>0 ? 1 : 0;
	satisfiable[332][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit332_0[i][0] ][ unit332_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit332_0[i][2] ][ unit332_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit332_0[i][4] ][ unit332_0[i][5] ] >0);
		X_contra = ( LargeX[332][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit332_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[332][1]=0; L[332][0]=1;}
			satisfiable[332][0]=satisfiable[332][0] & ((x[332] ^ 0) | (x[ unit332_0[i][0] ] ^ unit332_0[i][1]) |(x[ unit332_0[i][2] ] ^ unit332_0[i][3]));
			}
		if(X_contra>0) L[332][0]=2;
		}
	//Check all rules of unit[332][1]
	L[332][1] = LargeX[332][0]>0 ? 1 : 0;
	satisfiable[332][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit332_1[i][0] ][ unit332_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit332_1[i][2] ][ unit332_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit332_1[i][4] ][ unit332_1[i][5] ] >0);
		X_contra = ( LargeX[332][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit332_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[332][0]=0; L[332][1]=1;}
			satisfiable[332][1]=satisfiable[332][1] & ((x[332] ^ 1) | (x[ unit332_1[i][0] ] ^ unit332_1[i][1]) |(x[ unit332_1[i][2] ] ^ unit332_1[i][3]));
			}
		if(X_contra>0) L[332][1]=2;
		}
	//Check all rules of unit[333][0]
	L[333][0] = LargeX[333][1]>0 ? 1 : 0;
	satisfiable[333][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit333_0[i][0] ][ unit333_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit333_0[i][2] ][ unit333_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit333_0[i][4] ][ unit333_0[i][5] ] >0);
		X_contra = ( LargeX[333][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit333_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[333][1]=0; L[333][0]=1;}
			satisfiable[333][0]=satisfiable[333][0] & ((x[333] ^ 0) | (x[ unit333_0[i][0] ] ^ unit333_0[i][1]) |(x[ unit333_0[i][2] ] ^ unit333_0[i][3]));
			}
		if(X_contra>0) L[333][0]=2;
		}
	//Check all rules of unit[333][1]
	L[333][1] = LargeX[333][0]>0 ? 1 : 0;
	satisfiable[333][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit333_1[i][0] ][ unit333_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit333_1[i][2] ][ unit333_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit333_1[i][4] ][ unit333_1[i][5] ] >0);
		X_contra = ( LargeX[333][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit333_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[333][0]=0; L[333][1]=1;}
			satisfiable[333][1]=satisfiable[333][1] & ((x[333] ^ 1) | (x[ unit333_1[i][0] ] ^ unit333_1[i][1]) |(x[ unit333_1[i][2] ] ^ unit333_1[i][3]));
			}
		if(X_contra>0) L[333][1]=2;
		}
	//Check all rules of unit[334][0]
	L[334][0] = LargeX[334][1]>0 ? 1 : 0;
	satisfiable[334][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit334_0[i][0] ][ unit334_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit334_0[i][2] ][ unit334_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit334_0[i][4] ][ unit334_0[i][5] ] >0);
		X_contra = ( LargeX[334][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit334_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[334][1]=0; L[334][0]=1;}
			satisfiable[334][0]=satisfiable[334][0] & ((x[334] ^ 0) | (x[ unit334_0[i][0] ] ^ unit334_0[i][1]) |(x[ unit334_0[i][2] ] ^ unit334_0[i][3]));
			}
		if(X_contra>0) L[334][0]=2;
		}
	//Check all rules of unit[334][1]
	L[334][1] = LargeX[334][0]>0 ? 1 : 0;
	satisfiable[334][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit334_1[i][0] ][ unit334_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit334_1[i][2] ][ unit334_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit334_1[i][4] ][ unit334_1[i][5] ] >0);
		X_contra = ( LargeX[334][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit334_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[334][0]=0; L[334][1]=1;}
			satisfiable[334][1]=satisfiable[334][1] & ((x[334] ^ 1) | (x[ unit334_1[i][0] ] ^ unit334_1[i][1]) |(x[ unit334_1[i][2] ] ^ unit334_1[i][3]));
			}
		if(X_contra>0) L[334][1]=2;
		}
	//Check all rules of unit[335][0]
	L[335][0] = LargeX[335][1]>0 ? 1 : 0;
	satisfiable[335][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit335_0[i][0] ][ unit335_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit335_0[i][2] ][ unit335_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit335_0[i][4] ][ unit335_0[i][5] ] >0);
		X_contra = ( LargeX[335][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit335_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[335][1]=0; L[335][0]=1;}
			satisfiable[335][0]=satisfiable[335][0] & ((x[335] ^ 0) | (x[ unit335_0[i][0] ] ^ unit335_0[i][1]) |(x[ unit335_0[i][2] ] ^ unit335_0[i][3]));
			}
		if(X_contra>0) L[335][0]=2;
		}
	//Check all rules of unit[335][1]
	L[335][1] = LargeX[335][0]>0 ? 1 : 0;
	satisfiable[335][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit335_1[i][0] ][ unit335_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit335_1[i][2] ][ unit335_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit335_1[i][4] ][ unit335_1[i][5] ] >0);
		X_contra = ( LargeX[335][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit335_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[335][0]=0; L[335][1]=1;}
			satisfiable[335][1]=satisfiable[335][1] & ((x[335] ^ 1) | (x[ unit335_1[i][0] ] ^ unit335_1[i][1]) |(x[ unit335_1[i][2] ] ^ unit335_1[i][3]));
			}
		if(X_contra>0) L[335][1]=2;
		}
	//Check all rules of unit[336][0]
	L[336][0] = LargeX[336][1]>0 ? 1 : 0;
	satisfiable[336][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit336_0[i][0] ][ unit336_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit336_0[i][2] ][ unit336_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit336_0[i][4] ][ unit336_0[i][5] ] >0);
		X_contra = ( LargeX[336][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit336_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[336][1]=0; L[336][0]=1;}
			satisfiable[336][0]=satisfiable[336][0] & ((x[336] ^ 0) | (x[ unit336_0[i][0] ] ^ unit336_0[i][1]) |(x[ unit336_0[i][2] ] ^ unit336_0[i][3]));
			}
		if(X_contra>0) L[336][0]=2;
		}
	//Check all rules of unit[336][1]
	L[336][1] = LargeX[336][0]>0 ? 1 : 0;
	satisfiable[336][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit336_1[i][0] ][ unit336_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit336_1[i][2] ][ unit336_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit336_1[i][4] ][ unit336_1[i][5] ] >0);
		X_contra = ( LargeX[336][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit336_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[336][0]=0; L[336][1]=1;}
			satisfiable[336][1]=satisfiable[336][1] & ((x[336] ^ 1) | (x[ unit336_1[i][0] ] ^ unit336_1[i][1]) |(x[ unit336_1[i][2] ] ^ unit336_1[i][3]));
			}
		if(X_contra>0) L[336][1]=2;
		}
	//Check all rules of unit[337][0]
	L[337][0] = LargeX[337][1]>0 ? 1 : 0;
	satisfiable[337][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit337_0[i][0] ][ unit337_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit337_0[i][2] ][ unit337_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit337_0[i][4] ][ unit337_0[i][5] ] >0);
		X_contra = ( LargeX[337][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit337_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[337][1]=0; L[337][0]=1;}
			satisfiable[337][0]=satisfiable[337][0] & ((x[337] ^ 0) | (x[ unit337_0[i][0] ] ^ unit337_0[i][1]) |(x[ unit337_0[i][2] ] ^ unit337_0[i][3]));
			}
		if(X_contra>0) L[337][0]=2;
		}
	//Check all rules of unit[337][1]
	L[337][1] = LargeX[337][0]>0 ? 1 : 0;
	satisfiable[337][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit337_1[i][0] ][ unit337_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit337_1[i][2] ][ unit337_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit337_1[i][4] ][ unit337_1[i][5] ] >0);
		X_contra = ( LargeX[337][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit337_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[337][0]=0; L[337][1]=1;}
			satisfiable[337][1]=satisfiable[337][1] & ((x[337] ^ 1) | (x[ unit337_1[i][0] ] ^ unit337_1[i][1]) |(x[ unit337_1[i][2] ] ^ unit337_1[i][3]));
			}
		if(X_contra>0) L[337][1]=2;
		}
	//Check all rules of unit[338][0]
	L[338][0] = LargeX[338][1]>0 ? 1 : 0;
	satisfiable[338][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit338_0[i][0] ][ unit338_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit338_0[i][2] ][ unit338_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit338_0[i][4] ][ unit338_0[i][5] ] >0);
		X_contra = ( LargeX[338][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit338_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[338][1]=0; L[338][0]=1;}
			satisfiable[338][0]=satisfiable[338][0] & ((x[338] ^ 0) | (x[ unit338_0[i][0] ] ^ unit338_0[i][1]) |(x[ unit338_0[i][2] ] ^ unit338_0[i][3]));
			}
		if(X_contra>0) L[338][0]=2;
		}
	//Check all rules of unit[338][1]
	L[338][1] = LargeX[338][0]>0 ? 1 : 0;
	satisfiable[338][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit338_1[i][0] ][ unit338_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit338_1[i][2] ][ unit338_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit338_1[i][4] ][ unit338_1[i][5] ] >0);
		X_contra = ( LargeX[338][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit338_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[338][0]=0; L[338][1]=1;}
			satisfiable[338][1]=satisfiable[338][1] & ((x[338] ^ 1) | (x[ unit338_1[i][0] ] ^ unit338_1[i][1]) |(x[ unit338_1[i][2] ] ^ unit338_1[i][3]));
			}
		if(X_contra>0) L[338][1]=2;
		}
	//Check all rules of unit[339][0]
	L[339][0] = LargeX[339][1]>0 ? 1 : 0;
	satisfiable[339][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit339_0[i][0] ][ unit339_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit339_0[i][2] ][ unit339_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit339_0[i][4] ][ unit339_0[i][5] ] >0);
		X_contra = ( LargeX[339][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit339_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[339][1]=0; L[339][0]=1;}
			satisfiable[339][0]=satisfiable[339][0] & ((x[339] ^ 0) | (x[ unit339_0[i][0] ] ^ unit339_0[i][1]) |(x[ unit339_0[i][2] ] ^ unit339_0[i][3]));
			}
		if(X_contra>0) L[339][0]=2;
		}
	//Check all rules of unit[339][1]
	L[339][1] = LargeX[339][0]>0 ? 1 : 0;
	satisfiable[339][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit339_1[i][0] ][ unit339_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit339_1[i][2] ][ unit339_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit339_1[i][4] ][ unit339_1[i][5] ] >0);
		X_contra = ( LargeX[339][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit339_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[339][0]=0; L[339][1]=1;}
			satisfiable[339][1]=satisfiable[339][1] & ((x[339] ^ 1) | (x[ unit339_1[i][0] ] ^ unit339_1[i][1]) |(x[ unit339_1[i][2] ] ^ unit339_1[i][3]));
			}
		if(X_contra>0) L[339][1]=2;
		}
	//Check all rules of unit[340][0]
	L[340][0] = LargeX[340][1]>0 ? 1 : 0;
	satisfiable[340][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit340_0[i][0] ][ unit340_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit340_0[i][2] ][ unit340_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit340_0[i][4] ][ unit340_0[i][5] ] >0);
		X_contra = ( LargeX[340][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit340_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[340][1]=0; L[340][0]=1;}
			satisfiable[340][0]=satisfiable[340][0] & ((x[340] ^ 0) | (x[ unit340_0[i][0] ] ^ unit340_0[i][1]) |(x[ unit340_0[i][2] ] ^ unit340_0[i][3]));
			}
		if(X_contra>0) L[340][0]=2;
		}
	//Check all rules of unit[340][1]
	L[340][1] = LargeX[340][0]>0 ? 1 : 0;
	satisfiable[340][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit340_1[i][0] ][ unit340_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit340_1[i][2] ][ unit340_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit340_1[i][4] ][ unit340_1[i][5] ] >0);
		X_contra = ( LargeX[340][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit340_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[340][0]=0; L[340][1]=1;}
			satisfiable[340][1]=satisfiable[340][1] & ((x[340] ^ 1) | (x[ unit340_1[i][0] ] ^ unit340_1[i][1]) |(x[ unit340_1[i][2] ] ^ unit340_1[i][3]));
			}
		if(X_contra>0) L[340][1]=2;
		}
	//Check all rules of unit[341][0]
	L[341][0] = LargeX[341][1]>0 ? 1 : 0;
	satisfiable[341][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit341_0[i][0] ][ unit341_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit341_0[i][2] ][ unit341_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit341_0[i][4] ][ unit341_0[i][5] ] >0);
		X_contra = ( LargeX[341][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit341_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[341][1]=0; L[341][0]=1;}
			satisfiable[341][0]=satisfiable[341][0] & ((x[341] ^ 0) | (x[ unit341_0[i][0] ] ^ unit341_0[i][1]) |(x[ unit341_0[i][2] ] ^ unit341_0[i][3]));
			}
		if(X_contra>0) L[341][0]=2;
		}
	//Check all rules of unit[341][1]
	L[341][1] = LargeX[341][0]>0 ? 1 : 0;
	satisfiable[341][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit341_1[i][0] ][ unit341_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit341_1[i][2] ][ unit341_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit341_1[i][4] ][ unit341_1[i][5] ] >0);
		X_contra = ( LargeX[341][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit341_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[341][0]=0; L[341][1]=1;}
			satisfiable[341][1]=satisfiable[341][1] & ((x[341] ^ 1) | (x[ unit341_1[i][0] ] ^ unit341_1[i][1]) |(x[ unit341_1[i][2] ] ^ unit341_1[i][3]));
			}
		if(X_contra>0) L[341][1]=2;
		}
	//Check all rules of unit[342][0]
	L[342][0] = LargeX[342][1]>0 ? 1 : 0;
	satisfiable[342][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit342_0[i][0] ][ unit342_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit342_0[i][2] ][ unit342_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit342_0[i][4] ][ unit342_0[i][5] ] >0);
		X_contra = ( LargeX[342][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit342_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[342][1]=0; L[342][0]=1;}
			satisfiable[342][0]=satisfiable[342][0] & ((x[342] ^ 0) | (x[ unit342_0[i][0] ] ^ unit342_0[i][1]) |(x[ unit342_0[i][2] ] ^ unit342_0[i][3]));
			}
		if(X_contra>0) L[342][0]=2;
		}
	//Check all rules of unit[342][1]
	L[342][1] = LargeX[342][0]>0 ? 1 : 0;
	satisfiable[342][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit342_1[i][0] ][ unit342_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit342_1[i][2] ][ unit342_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit342_1[i][4] ][ unit342_1[i][5] ] >0);
		X_contra = ( LargeX[342][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit342_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[342][0]=0; L[342][1]=1;}
			satisfiable[342][1]=satisfiable[342][1] & ((x[342] ^ 1) | (x[ unit342_1[i][0] ] ^ unit342_1[i][1]) |(x[ unit342_1[i][2] ] ^ unit342_1[i][3]));
			}
		if(X_contra>0) L[342][1]=2;
		}
	//Check all rules of unit[343][0]
	L[343][0] = LargeX[343][1]>0 ? 1 : 0;
	satisfiable[343][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit343_0[i][0] ][ unit343_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit343_0[i][2] ][ unit343_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit343_0[i][4] ][ unit343_0[i][5] ] >0);
		X_contra = ( LargeX[343][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit343_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[343][1]=0; L[343][0]=1;}
			satisfiable[343][0]=satisfiable[343][0] & ((x[343] ^ 0) | (x[ unit343_0[i][0] ] ^ unit343_0[i][1]) |(x[ unit343_0[i][2] ] ^ unit343_0[i][3]));
			}
		if(X_contra>0) L[343][0]=2;
		}
	//Check all rules of unit[343][1]
	L[343][1] = LargeX[343][0]>0 ? 1 : 0;
	satisfiable[343][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit343_1[i][0] ][ unit343_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit343_1[i][2] ][ unit343_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit343_1[i][4] ][ unit343_1[i][5] ] >0);
		X_contra = ( LargeX[343][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit343_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[343][0]=0; L[343][1]=1;}
			satisfiable[343][1]=satisfiable[343][1] & ((x[343] ^ 1) | (x[ unit343_1[i][0] ] ^ unit343_1[i][1]) |(x[ unit343_1[i][2] ] ^ unit343_1[i][3]));
			}
		if(X_contra>0) L[343][1]=2;
		}
	//Check all rules of unit[344][0]
	L[344][0] = LargeX[344][1]>0 ? 1 : 0;
	satisfiable[344][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit344_0[i][0] ][ unit344_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit344_0[i][2] ][ unit344_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit344_0[i][4] ][ unit344_0[i][5] ] >0);
		X_contra = ( LargeX[344][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit344_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[344][1]=0; L[344][0]=1;}
			satisfiable[344][0]=satisfiable[344][0] & ((x[344] ^ 0) | (x[ unit344_0[i][0] ] ^ unit344_0[i][1]) |(x[ unit344_0[i][2] ] ^ unit344_0[i][3]));
			}
		if(X_contra>0) L[344][0]=2;
		}
	//Check all rules of unit[344][1]
	L[344][1] = LargeX[344][0]>0 ? 1 : 0;
	satisfiable[344][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit344_1[i][0] ][ unit344_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit344_1[i][2] ][ unit344_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit344_1[i][4] ][ unit344_1[i][5] ] >0);
		X_contra = ( LargeX[344][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit344_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[344][0]=0; L[344][1]=1;}
			satisfiable[344][1]=satisfiable[344][1] & ((x[344] ^ 1) | (x[ unit344_1[i][0] ] ^ unit344_1[i][1]) |(x[ unit344_1[i][2] ] ^ unit344_1[i][3]));
			}
		if(X_contra>0) L[344][1]=2;
		}
	//Check all rules of unit[345][0]
	L[345][0] = LargeX[345][1]>0 ? 1 : 0;
	satisfiable[345][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit345_0[i][0] ][ unit345_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit345_0[i][2] ][ unit345_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit345_0[i][4] ][ unit345_0[i][5] ] >0);
		X_contra = ( LargeX[345][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit345_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[345][1]=0; L[345][0]=1;}
			satisfiable[345][0]=satisfiable[345][0] & ((x[345] ^ 0) | (x[ unit345_0[i][0] ] ^ unit345_0[i][1]) |(x[ unit345_0[i][2] ] ^ unit345_0[i][3]));
			}
		if(X_contra>0) L[345][0]=2;
		}
	//Check all rules of unit[345][1]
	L[345][1] = LargeX[345][0]>0 ? 1 : 0;
	satisfiable[345][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit345_1[i][0] ][ unit345_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit345_1[i][2] ][ unit345_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit345_1[i][4] ][ unit345_1[i][5] ] >0);
		X_contra = ( LargeX[345][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit345_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[345][0]=0; L[345][1]=1;}
			satisfiable[345][1]=satisfiable[345][1] & ((x[345] ^ 1) | (x[ unit345_1[i][0] ] ^ unit345_1[i][1]) |(x[ unit345_1[i][2] ] ^ unit345_1[i][3]));
			}
		if(X_contra>0) L[345][1]=2;
		}
	//Check all rules of unit[346][0]
	L[346][0] = LargeX[346][1]>0 ? 1 : 0;
	satisfiable[346][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit346_0[i][0] ][ unit346_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit346_0[i][2] ][ unit346_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit346_0[i][4] ][ unit346_0[i][5] ] >0);
		X_contra = ( LargeX[346][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit346_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[346][1]=0; L[346][0]=1;}
			satisfiable[346][0]=satisfiable[346][0] & ((x[346] ^ 0) | (x[ unit346_0[i][0] ] ^ unit346_0[i][1]) |(x[ unit346_0[i][2] ] ^ unit346_0[i][3]));
			}
		if(X_contra>0) L[346][0]=2;
		}
	//Check all rules of unit[346][1]
	L[346][1] = LargeX[346][0]>0 ? 1 : 0;
	satisfiable[346][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit346_1[i][0] ][ unit346_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit346_1[i][2] ][ unit346_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit346_1[i][4] ][ unit346_1[i][5] ] >0);
		X_contra = ( LargeX[346][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit346_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[346][0]=0; L[346][1]=1;}
			satisfiable[346][1]=satisfiable[346][1] & ((x[346] ^ 1) | (x[ unit346_1[i][0] ] ^ unit346_1[i][1]) |(x[ unit346_1[i][2] ] ^ unit346_1[i][3]));
			}
		if(X_contra>0) L[346][1]=2;
		}
	//Check all rules of unit[347][0]
	L[347][0] = LargeX[347][1]>0 ? 1 : 0;
	satisfiable[347][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit347_0[i][0] ][ unit347_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit347_0[i][2] ][ unit347_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit347_0[i][4] ][ unit347_0[i][5] ] >0);
		X_contra = ( LargeX[347][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit347_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[347][1]=0; L[347][0]=1;}
			satisfiable[347][0]=satisfiable[347][0] & ((x[347] ^ 0) | (x[ unit347_0[i][0] ] ^ unit347_0[i][1]) |(x[ unit347_0[i][2] ] ^ unit347_0[i][3]));
			}
		if(X_contra>0) L[347][0]=2;
		}
	//Check all rules of unit[347][1]
	L[347][1] = LargeX[347][0]>0 ? 1 : 0;
	satisfiable[347][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit347_1[i][0] ][ unit347_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit347_1[i][2] ][ unit347_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit347_1[i][4] ][ unit347_1[i][5] ] >0);
		X_contra = ( LargeX[347][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit347_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[347][0]=0; L[347][1]=1;}
			satisfiable[347][1]=satisfiable[347][1] & ((x[347] ^ 1) | (x[ unit347_1[i][0] ] ^ unit347_1[i][1]) |(x[ unit347_1[i][2] ] ^ unit347_1[i][3]));
			}
		if(X_contra>0) L[347][1]=2;
		}
	//Check all rules of unit[348][0]
	L[348][0] = LargeX[348][1]>0 ? 1 : 0;
	satisfiable[348][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit348_0[i][0] ][ unit348_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit348_0[i][2] ][ unit348_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit348_0[i][4] ][ unit348_0[i][5] ] >0);
		X_contra = ( LargeX[348][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit348_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[348][1]=0; L[348][0]=1;}
			satisfiable[348][0]=satisfiable[348][0] & ((x[348] ^ 0) | (x[ unit348_0[i][0] ] ^ unit348_0[i][1]) |(x[ unit348_0[i][2] ] ^ unit348_0[i][3]));
			}
		if(X_contra>0) L[348][0]=2;
		}
	//Check all rules of unit[348][1]
	L[348][1] = LargeX[348][0]>0 ? 1 : 0;
	satisfiable[348][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit348_1[i][0] ][ unit348_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit348_1[i][2] ][ unit348_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit348_1[i][4] ][ unit348_1[i][5] ] >0);
		X_contra = ( LargeX[348][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit348_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[348][0]=0; L[348][1]=1;}
			satisfiable[348][1]=satisfiable[348][1] & ((x[348] ^ 1) | (x[ unit348_1[i][0] ] ^ unit348_1[i][1]) |(x[ unit348_1[i][2] ] ^ unit348_1[i][3]));
			}
		if(X_contra>0) L[348][1]=2;
		}
	//Check all rules of unit[349][0]
	L[349][0] = LargeX[349][1]>0 ? 1 : 0;
	satisfiable[349][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit349_0[i][0] ][ unit349_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit349_0[i][2] ][ unit349_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit349_0[i][4] ][ unit349_0[i][5] ] >0);
		X_contra = ( LargeX[349][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit349_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[349][1]=0; L[349][0]=1;}
			satisfiable[349][0]=satisfiable[349][0] & ((x[349] ^ 0) | (x[ unit349_0[i][0] ] ^ unit349_0[i][1]) |(x[ unit349_0[i][2] ] ^ unit349_0[i][3]));
			}
		if(X_contra>0) L[349][0]=2;
		}
	//Check all rules of unit[349][1]
	L[349][1] = LargeX[349][0]>0 ? 1 : 0;
	satisfiable[349][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit349_1[i][0] ][ unit349_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit349_1[i][2] ][ unit349_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit349_1[i][4] ][ unit349_1[i][5] ] >0);
		X_contra = ( LargeX[349][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit349_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[349][0]=0; L[349][1]=1;}
			satisfiable[349][1]=satisfiable[349][1] & ((x[349] ^ 1) | (x[ unit349_1[i][0] ] ^ unit349_1[i][1]) |(x[ unit349_1[i][2] ] ^ unit349_1[i][3]));
			}
		if(X_contra>0) L[349][1]=2;
		}
	//Check all rules of unit[350][0]
	L[350][0] = LargeX[350][1]>0 ? 1 : 0;
	satisfiable[350][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit350_0[i][0] ][ unit350_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit350_0[i][2] ][ unit350_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit350_0[i][4] ][ unit350_0[i][5] ] >0);
		X_contra = ( LargeX[350][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit350_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[350][1]=0; L[350][0]=1;}
			satisfiable[350][0]=satisfiable[350][0] & ((x[350] ^ 0) | (x[ unit350_0[i][0] ] ^ unit350_0[i][1]) |(x[ unit350_0[i][2] ] ^ unit350_0[i][3]));
			}
		if(X_contra>0) L[350][0]=2;
		}
	//Check all rules of unit[350][1]
	L[350][1] = LargeX[350][0]>0 ? 1 : 0;
	satisfiable[350][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit350_1[i][0] ][ unit350_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit350_1[i][2] ][ unit350_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit350_1[i][4] ][ unit350_1[i][5] ] >0);
		X_contra = ( LargeX[350][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit350_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[350][0]=0; L[350][1]=1;}
			satisfiable[350][1]=satisfiable[350][1] & ((x[350] ^ 1) | (x[ unit350_1[i][0] ] ^ unit350_1[i][1]) |(x[ unit350_1[i][2] ] ^ unit350_1[i][3]));
			}
		if(X_contra>0) L[350][1]=2;
		}
	//Check all rules of unit[351][0]
	L[351][0] = LargeX[351][1]>0 ? 1 : 0;
	satisfiable[351][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit351_0[i][0] ][ unit351_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit351_0[i][2] ][ unit351_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit351_0[i][4] ][ unit351_0[i][5] ] >0);
		X_contra = ( LargeX[351][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit351_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[351][1]=0; L[351][0]=1;}
			satisfiable[351][0]=satisfiable[351][0] & ((x[351] ^ 0) | (x[ unit351_0[i][0] ] ^ unit351_0[i][1]) |(x[ unit351_0[i][2] ] ^ unit351_0[i][3]));
			}
		if(X_contra>0) L[351][0]=2;
		}
	//Check all rules of unit[351][1]
	L[351][1] = LargeX[351][0]>0 ? 1 : 0;
	satisfiable[351][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit351_1[i][0] ][ unit351_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit351_1[i][2] ][ unit351_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit351_1[i][4] ][ unit351_1[i][5] ] >0);
		X_contra = ( LargeX[351][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit351_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[351][0]=0; L[351][1]=1;}
			satisfiable[351][1]=satisfiable[351][1] & ((x[351] ^ 1) | (x[ unit351_1[i][0] ] ^ unit351_1[i][1]) |(x[ unit351_1[i][2] ] ^ unit351_1[i][3]));
			}
		if(X_contra>0) L[351][1]=2;
		}
	//Check all rules of unit[352][0]
	L[352][0] = LargeX[352][1]>0 ? 1 : 0;
	satisfiable[352][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit352_0[i][0] ][ unit352_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit352_0[i][2] ][ unit352_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit352_0[i][4] ][ unit352_0[i][5] ] >0);
		X_contra = ( LargeX[352][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit352_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[352][1]=0; L[352][0]=1;}
			satisfiable[352][0]=satisfiable[352][0] & ((x[352] ^ 0) | (x[ unit352_0[i][0] ] ^ unit352_0[i][1]) |(x[ unit352_0[i][2] ] ^ unit352_0[i][3]));
			}
		if(X_contra>0) L[352][0]=2;
		}
	//Check all rules of unit[352][1]
	L[352][1] = LargeX[352][0]>0 ? 1 : 0;
	satisfiable[352][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit352_1[i][0] ][ unit352_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit352_1[i][2] ][ unit352_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit352_1[i][4] ][ unit352_1[i][5] ] >0);
		X_contra = ( LargeX[352][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit352_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[352][0]=0; L[352][1]=1;}
			satisfiable[352][1]=satisfiable[352][1] & ((x[352] ^ 1) | (x[ unit352_1[i][0] ] ^ unit352_1[i][1]) |(x[ unit352_1[i][2] ] ^ unit352_1[i][3]));
			}
		if(X_contra>0) L[352][1]=2;
		}
	//Check all rules of unit[353][0]
	L[353][0] = LargeX[353][1]>0 ? 1 : 0;
	satisfiable[353][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit353_0[i][0] ][ unit353_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit353_0[i][2] ][ unit353_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit353_0[i][4] ][ unit353_0[i][5] ] >0);
		X_contra = ( LargeX[353][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit353_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[353][1]=0; L[353][0]=1;}
			satisfiable[353][0]=satisfiable[353][0] & ((x[353] ^ 0) | (x[ unit353_0[i][0] ] ^ unit353_0[i][1]) |(x[ unit353_0[i][2] ] ^ unit353_0[i][3]));
			}
		if(X_contra>0) L[353][0]=2;
		}
	//Check all rules of unit[353][1]
	L[353][1] = LargeX[353][0]>0 ? 1 : 0;
	satisfiable[353][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit353_1[i][0] ][ unit353_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit353_1[i][2] ][ unit353_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit353_1[i][4] ][ unit353_1[i][5] ] >0);
		X_contra = ( LargeX[353][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit353_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[353][0]=0; L[353][1]=1;}
			satisfiable[353][1]=satisfiable[353][1] & ((x[353] ^ 1) | (x[ unit353_1[i][0] ] ^ unit353_1[i][1]) |(x[ unit353_1[i][2] ] ^ unit353_1[i][3]));
			}
		if(X_contra>0) L[353][1]=2;
		}
	//Check all rules of unit[354][0]
	L[354][0] = LargeX[354][1]>0 ? 1 : 0;
	satisfiable[354][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit354_0[i][0] ][ unit354_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit354_0[i][2] ][ unit354_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit354_0[i][4] ][ unit354_0[i][5] ] >0);
		X_contra = ( LargeX[354][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit354_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[354][1]=0; L[354][0]=1;}
			satisfiable[354][0]=satisfiable[354][0] & ((x[354] ^ 0) | (x[ unit354_0[i][0] ] ^ unit354_0[i][1]) |(x[ unit354_0[i][2] ] ^ unit354_0[i][3]));
			}
		if(X_contra>0) L[354][0]=2;
		}
	//Check all rules of unit[354][1]
	L[354][1] = LargeX[354][0]>0 ? 1 : 0;
	satisfiable[354][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit354_1[i][0] ][ unit354_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit354_1[i][2] ][ unit354_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit354_1[i][4] ][ unit354_1[i][5] ] >0);
		X_contra = ( LargeX[354][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit354_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[354][0]=0; L[354][1]=1;}
			satisfiable[354][1]=satisfiable[354][1] & ((x[354] ^ 1) | (x[ unit354_1[i][0] ] ^ unit354_1[i][1]) |(x[ unit354_1[i][2] ] ^ unit354_1[i][3]));
			}
		if(X_contra>0) L[354][1]=2;
		}
	//Check all rules of unit[355][0]
	L[355][0] = LargeX[355][1]>0 ? 1 : 0;
	satisfiable[355][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit355_0[i][0] ][ unit355_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit355_0[i][2] ][ unit355_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit355_0[i][4] ][ unit355_0[i][5] ] >0);
		X_contra = ( LargeX[355][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit355_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[355][1]=0; L[355][0]=1;}
			satisfiable[355][0]=satisfiable[355][0] & ((x[355] ^ 0) | (x[ unit355_0[i][0] ] ^ unit355_0[i][1]) |(x[ unit355_0[i][2] ] ^ unit355_0[i][3]));
			}
		if(X_contra>0) L[355][0]=2;
		}
	//Check all rules of unit[355][1]
	L[355][1] = LargeX[355][0]>0 ? 1 : 0;
	satisfiable[355][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit355_1[i][0] ][ unit355_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit355_1[i][2] ][ unit355_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit355_1[i][4] ][ unit355_1[i][5] ] >0);
		X_contra = ( LargeX[355][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit355_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[355][0]=0; L[355][1]=1;}
			satisfiable[355][1]=satisfiable[355][1] & ((x[355] ^ 1) | (x[ unit355_1[i][0] ] ^ unit355_1[i][1]) |(x[ unit355_1[i][2] ] ^ unit355_1[i][3]));
			}
		if(X_contra>0) L[355][1]=2;
		}
	//Check all rules of unit[356][0]
	L[356][0] = LargeX[356][1]>0 ? 1 : 0;
	satisfiable[356][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit356_0[i][0] ][ unit356_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit356_0[i][2] ][ unit356_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit356_0[i][4] ][ unit356_0[i][5] ] >0);
		X_contra = ( LargeX[356][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit356_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[356][1]=0; L[356][0]=1;}
			satisfiable[356][0]=satisfiable[356][0] & ((x[356] ^ 0) | (x[ unit356_0[i][0] ] ^ unit356_0[i][1]) |(x[ unit356_0[i][2] ] ^ unit356_0[i][3]));
			}
		if(X_contra>0) L[356][0]=2;
		}
	//Check all rules of unit[356][1]
	L[356][1] = LargeX[356][0]>0 ? 1 : 0;
	satisfiable[356][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit356_1[i][0] ][ unit356_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit356_1[i][2] ][ unit356_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit356_1[i][4] ][ unit356_1[i][5] ] >0);
		X_contra = ( LargeX[356][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit356_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[356][0]=0; L[356][1]=1;}
			satisfiable[356][1]=satisfiable[356][1] & ((x[356] ^ 1) | (x[ unit356_1[i][0] ] ^ unit356_1[i][1]) |(x[ unit356_1[i][2] ] ^ unit356_1[i][3]));
			}
		if(X_contra>0) L[356][1]=2;
		}
	//Check all rules of unit[357][0]
	L[357][0] = LargeX[357][1]>0 ? 1 : 0;
	satisfiable[357][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit357_0[i][0] ][ unit357_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit357_0[i][2] ][ unit357_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit357_0[i][4] ][ unit357_0[i][5] ] >0);
		X_contra = ( LargeX[357][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit357_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[357][1]=0; L[357][0]=1;}
			satisfiable[357][0]=satisfiable[357][0] & ((x[357] ^ 0) | (x[ unit357_0[i][0] ] ^ unit357_0[i][1]) |(x[ unit357_0[i][2] ] ^ unit357_0[i][3]));
			}
		if(X_contra>0) L[357][0]=2;
		}
	//Check all rules of unit[357][1]
	L[357][1] = LargeX[357][0]>0 ? 1 : 0;
	satisfiable[357][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit357_1[i][0] ][ unit357_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit357_1[i][2] ][ unit357_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit357_1[i][4] ][ unit357_1[i][5] ] >0);
		X_contra = ( LargeX[357][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit357_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[357][0]=0; L[357][1]=1;}
			satisfiable[357][1]=satisfiable[357][1] & ((x[357] ^ 1) | (x[ unit357_1[i][0] ] ^ unit357_1[i][1]) |(x[ unit357_1[i][2] ] ^ unit357_1[i][3]));
			}
		if(X_contra>0) L[357][1]=2;
		}
	//Check all rules of unit[358][0]
	L[358][0] = LargeX[358][1]>0 ? 1 : 0;
	satisfiable[358][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit358_0[i][0] ][ unit358_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit358_0[i][2] ][ unit358_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit358_0[i][4] ][ unit358_0[i][5] ] >0);
		X_contra = ( LargeX[358][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit358_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[358][1]=0; L[358][0]=1;}
			satisfiable[358][0]=satisfiable[358][0] & ((x[358] ^ 0) | (x[ unit358_0[i][0] ] ^ unit358_0[i][1]) |(x[ unit358_0[i][2] ] ^ unit358_0[i][3]));
			}
		if(X_contra>0) L[358][0]=2;
		}
	//Check all rules of unit[358][1]
	L[358][1] = LargeX[358][0]>0 ? 1 : 0;
	satisfiable[358][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit358_1[i][0] ][ unit358_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit358_1[i][2] ][ unit358_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit358_1[i][4] ][ unit358_1[i][5] ] >0);
		X_contra = ( LargeX[358][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit358_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[358][0]=0; L[358][1]=1;}
			satisfiable[358][1]=satisfiable[358][1] & ((x[358] ^ 1) | (x[ unit358_1[i][0] ] ^ unit358_1[i][1]) |(x[ unit358_1[i][2] ] ^ unit358_1[i][3]));
			}
		if(X_contra>0) L[358][1]=2;
		}
	//Check all rules of unit[359][0]
	L[359][0] = LargeX[359][1]>0 ? 1 : 0;
	satisfiable[359][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit359_0[i][0] ][ unit359_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit359_0[i][2] ][ unit359_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit359_0[i][4] ][ unit359_0[i][5] ] >0);
		X_contra = ( LargeX[359][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit359_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[359][1]=0; L[359][0]=1;}
			satisfiable[359][0]=satisfiable[359][0] & ((x[359] ^ 0) | (x[ unit359_0[i][0] ] ^ unit359_0[i][1]) |(x[ unit359_0[i][2] ] ^ unit359_0[i][3]));
			}
		if(X_contra>0) L[359][0]=2;
		}
	//Check all rules of unit[359][1]
	L[359][1] = LargeX[359][0]>0 ? 1 : 0;
	satisfiable[359][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit359_1[i][0] ][ unit359_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit359_1[i][2] ][ unit359_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit359_1[i][4] ][ unit359_1[i][5] ] >0);
		X_contra = ( LargeX[359][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit359_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[359][0]=0; L[359][1]=1;}
			satisfiable[359][1]=satisfiable[359][1] & ((x[359] ^ 1) | (x[ unit359_1[i][0] ] ^ unit359_1[i][1]) |(x[ unit359_1[i][2] ] ^ unit359_1[i][3]));
			}
		if(X_contra>0) L[359][1]=2;
		}
	//Check all rules of unit[360][0]
	L[360][0] = LargeX[360][1]>0 ? 1 : 0;
	satisfiable[360][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit360_0[i][0] ][ unit360_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit360_0[i][2] ][ unit360_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit360_0[i][4] ][ unit360_0[i][5] ] >0);
		X_contra = ( LargeX[360][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit360_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[360][1]=0; L[360][0]=1;}
			satisfiable[360][0]=satisfiable[360][0] & ((x[360] ^ 0) | (x[ unit360_0[i][0] ] ^ unit360_0[i][1]) |(x[ unit360_0[i][2] ] ^ unit360_0[i][3]));
			}
		if(X_contra>0) L[360][0]=2;
		}
	//Check all rules of unit[360][1]
	L[360][1] = LargeX[360][0]>0 ? 1 : 0;
	satisfiable[360][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit360_1[i][0] ][ unit360_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit360_1[i][2] ][ unit360_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit360_1[i][4] ][ unit360_1[i][5] ] >0);
		X_contra = ( LargeX[360][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit360_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[360][0]=0; L[360][1]=1;}
			satisfiable[360][1]=satisfiable[360][1] & ((x[360] ^ 1) | (x[ unit360_1[i][0] ] ^ unit360_1[i][1]) |(x[ unit360_1[i][2] ] ^ unit360_1[i][3]));
			}
		if(X_contra>0) L[360][1]=2;
		}
	//Check all rules of unit[361][0]
	L[361][0] = LargeX[361][1]>0 ? 1 : 0;
	satisfiable[361][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit361_0[i][0] ][ unit361_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit361_0[i][2] ][ unit361_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit361_0[i][4] ][ unit361_0[i][5] ] >0);
		X_contra = ( LargeX[361][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit361_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[361][1]=0; L[361][0]=1;}
			satisfiable[361][0]=satisfiable[361][0] & ((x[361] ^ 0) | (x[ unit361_0[i][0] ] ^ unit361_0[i][1]) |(x[ unit361_0[i][2] ] ^ unit361_0[i][3]));
			}
		if(X_contra>0) L[361][0]=2;
		}
	//Check all rules of unit[361][1]
	L[361][1] = LargeX[361][0]>0 ? 1 : 0;
	satisfiable[361][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit361_1[i][0] ][ unit361_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit361_1[i][2] ][ unit361_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit361_1[i][4] ][ unit361_1[i][5] ] >0);
		X_contra = ( LargeX[361][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit361_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[361][0]=0; L[361][1]=1;}
			satisfiable[361][1]=satisfiable[361][1] & ((x[361] ^ 1) | (x[ unit361_1[i][0] ] ^ unit361_1[i][1]) |(x[ unit361_1[i][2] ] ^ unit361_1[i][3]));
			}
		if(X_contra>0) L[361][1]=2;
		}
	//Check all rules of unit[362][0]
	L[362][0] = LargeX[362][1]>0 ? 1 : 0;
	satisfiable[362][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit362_0[i][0] ][ unit362_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit362_0[i][2] ][ unit362_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit362_0[i][4] ][ unit362_0[i][5] ] >0);
		X_contra = ( LargeX[362][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit362_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[362][1]=0; L[362][0]=1;}
			satisfiable[362][0]=satisfiable[362][0] & ((x[362] ^ 0) | (x[ unit362_0[i][0] ] ^ unit362_0[i][1]) |(x[ unit362_0[i][2] ] ^ unit362_0[i][3]));
			}
		if(X_contra>0) L[362][0]=2;
		}
	//Check all rules of unit[362][1]
	L[362][1] = LargeX[362][0]>0 ? 1 : 0;
	satisfiable[362][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit362_1[i][0] ][ unit362_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit362_1[i][2] ][ unit362_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit362_1[i][4] ][ unit362_1[i][5] ] >0);
		X_contra = ( LargeX[362][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit362_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[362][0]=0; L[362][1]=1;}
			satisfiable[362][1]=satisfiable[362][1] & ((x[362] ^ 1) | (x[ unit362_1[i][0] ] ^ unit362_1[i][1]) |(x[ unit362_1[i][2] ] ^ unit362_1[i][3]));
			}
		if(X_contra>0) L[362][1]=2;
		}
	//Check all rules of unit[363][0]
	L[363][0] = LargeX[363][1]>0 ? 1 : 0;
	satisfiable[363][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit363_0[i][0] ][ unit363_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit363_0[i][2] ][ unit363_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit363_0[i][4] ][ unit363_0[i][5] ] >0);
		X_contra = ( LargeX[363][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit363_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[363][1]=0; L[363][0]=1;}
			satisfiable[363][0]=satisfiable[363][0] & ((x[363] ^ 0) | (x[ unit363_0[i][0] ] ^ unit363_0[i][1]) |(x[ unit363_0[i][2] ] ^ unit363_0[i][3]));
			}
		if(X_contra>0) L[363][0]=2;
		}
	//Check all rules of unit[363][1]
	L[363][1] = LargeX[363][0]>0 ? 1 : 0;
	satisfiable[363][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit363_1[i][0] ][ unit363_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit363_1[i][2] ][ unit363_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit363_1[i][4] ][ unit363_1[i][5] ] >0);
		X_contra = ( LargeX[363][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit363_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[363][0]=0; L[363][1]=1;}
			satisfiable[363][1]=satisfiable[363][1] & ((x[363] ^ 1) | (x[ unit363_1[i][0] ] ^ unit363_1[i][1]) |(x[ unit363_1[i][2] ] ^ unit363_1[i][3]));
			}
		if(X_contra>0) L[363][1]=2;
		}
	//Check all rules of unit[364][0]
	L[364][0] = LargeX[364][1]>0 ? 1 : 0;
	satisfiable[364][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit364_0[i][0] ][ unit364_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit364_0[i][2] ][ unit364_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit364_0[i][4] ][ unit364_0[i][5] ] >0);
		X_contra = ( LargeX[364][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit364_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[364][1]=0; L[364][0]=1;}
			satisfiable[364][0]=satisfiable[364][0] & ((x[364] ^ 0) | (x[ unit364_0[i][0] ] ^ unit364_0[i][1]) |(x[ unit364_0[i][2] ] ^ unit364_0[i][3]));
			}
		if(X_contra>0) L[364][0]=2;
		}
	//Check all rules of unit[364][1]
	L[364][1] = LargeX[364][0]>0 ? 1 : 0;
	satisfiable[364][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit364_1[i][0] ][ unit364_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit364_1[i][2] ][ unit364_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit364_1[i][4] ][ unit364_1[i][5] ] >0);
		X_contra = ( LargeX[364][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit364_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[364][0]=0; L[364][1]=1;}
			satisfiable[364][1]=satisfiable[364][1] & ((x[364] ^ 1) | (x[ unit364_1[i][0] ] ^ unit364_1[i][1]) |(x[ unit364_1[i][2] ] ^ unit364_1[i][3]));
			}
		if(X_contra>0) L[364][1]=2;
		}
	//Check all rules of unit[365][0]
	L[365][0] = LargeX[365][1]>0 ? 1 : 0;
	satisfiable[365][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit365_0[i][0] ][ unit365_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit365_0[i][2] ][ unit365_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit365_0[i][4] ][ unit365_0[i][5] ] >0);
		X_contra = ( LargeX[365][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit365_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[365][1]=0; L[365][0]=1;}
			satisfiable[365][0]=satisfiable[365][0] & ((x[365] ^ 0) | (x[ unit365_0[i][0] ] ^ unit365_0[i][1]) |(x[ unit365_0[i][2] ] ^ unit365_0[i][3]));
			}
		if(X_contra>0) L[365][0]=2;
		}
	//Check all rules of unit[365][1]
	L[365][1] = LargeX[365][0]>0 ? 1 : 0;
	satisfiable[365][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit365_1[i][0] ][ unit365_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit365_1[i][2] ][ unit365_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit365_1[i][4] ][ unit365_1[i][5] ] >0);
		X_contra = ( LargeX[365][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit365_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[365][0]=0; L[365][1]=1;}
			satisfiable[365][1]=satisfiable[365][1] & ((x[365] ^ 1) | (x[ unit365_1[i][0] ] ^ unit365_1[i][1]) |(x[ unit365_1[i][2] ] ^ unit365_1[i][3]));
			}
		if(X_contra>0) L[365][1]=2;
		}
	//Check all rules of unit[366][0]
	L[366][0] = LargeX[366][1]>0 ? 1 : 0;
	satisfiable[366][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit366_0[i][0] ][ unit366_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit366_0[i][2] ][ unit366_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit366_0[i][4] ][ unit366_0[i][5] ] >0);
		X_contra = ( LargeX[366][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit366_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[366][1]=0; L[366][0]=1;}
			satisfiable[366][0]=satisfiable[366][0] & ((x[366] ^ 0) | (x[ unit366_0[i][0] ] ^ unit366_0[i][1]) |(x[ unit366_0[i][2] ] ^ unit366_0[i][3]));
			}
		if(X_contra>0) L[366][0]=2;
		}
	//Check all rules of unit[366][1]
	L[366][1] = LargeX[366][0]>0 ? 1 : 0;
	satisfiable[366][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit366_1[i][0] ][ unit366_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit366_1[i][2] ][ unit366_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit366_1[i][4] ][ unit366_1[i][5] ] >0);
		X_contra = ( LargeX[366][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit366_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[366][0]=0; L[366][1]=1;}
			satisfiable[366][1]=satisfiable[366][1] & ((x[366] ^ 1) | (x[ unit366_1[i][0] ] ^ unit366_1[i][1]) |(x[ unit366_1[i][2] ] ^ unit366_1[i][3]));
			}
		if(X_contra>0) L[366][1]=2;
		}
	//Check all rules of unit[367][0]
	L[367][0] = LargeX[367][1]>0 ? 1 : 0;
	satisfiable[367][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit367_0[i][0] ][ unit367_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit367_0[i][2] ][ unit367_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit367_0[i][4] ][ unit367_0[i][5] ] >0);
		X_contra = ( LargeX[367][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit367_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[367][1]=0; L[367][0]=1;}
			satisfiable[367][0]=satisfiable[367][0] & ((x[367] ^ 0) | (x[ unit367_0[i][0] ] ^ unit367_0[i][1]) |(x[ unit367_0[i][2] ] ^ unit367_0[i][3]));
			}
		if(X_contra>0) L[367][0]=2;
		}
	//Check all rules of unit[367][1]
	L[367][1] = LargeX[367][0]>0 ? 1 : 0;
	satisfiable[367][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit367_1[i][0] ][ unit367_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit367_1[i][2] ][ unit367_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit367_1[i][4] ][ unit367_1[i][5] ] >0);
		X_contra = ( LargeX[367][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit367_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[367][0]=0; L[367][1]=1;}
			satisfiable[367][1]=satisfiable[367][1] & ((x[367] ^ 1) | (x[ unit367_1[i][0] ] ^ unit367_1[i][1]) |(x[ unit367_1[i][2] ] ^ unit367_1[i][3]));
			}
		if(X_contra>0) L[367][1]=2;
		}
	//Check all rules of unit[368][0]
	L[368][0] = LargeX[368][1]>0 ? 1 : 0;
	satisfiable[368][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit368_0[i][0] ][ unit368_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit368_0[i][2] ][ unit368_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit368_0[i][4] ][ unit368_0[i][5] ] >0);
		X_contra = ( LargeX[368][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit368_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[368][1]=0; L[368][0]=1;}
			satisfiable[368][0]=satisfiable[368][0] & ((x[368] ^ 0) | (x[ unit368_0[i][0] ] ^ unit368_0[i][1]) |(x[ unit368_0[i][2] ] ^ unit368_0[i][3]));
			}
		if(X_contra>0) L[368][0]=2;
		}
	//Check all rules of unit[368][1]
	L[368][1] = LargeX[368][0]>0 ? 1 : 0;
	satisfiable[368][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit368_1[i][0] ][ unit368_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit368_1[i][2] ][ unit368_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit368_1[i][4] ][ unit368_1[i][5] ] >0);
		X_contra = ( LargeX[368][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit368_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[368][0]=0; L[368][1]=1;}
			satisfiable[368][1]=satisfiable[368][1] & ((x[368] ^ 1) | (x[ unit368_1[i][0] ] ^ unit368_1[i][1]) |(x[ unit368_1[i][2] ] ^ unit368_1[i][3]));
			}
		if(X_contra>0) L[368][1]=2;
		}
	//Check all rules of unit[369][0]
	L[369][0] = LargeX[369][1]>0 ? 1 : 0;
	satisfiable[369][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit369_0[i][0] ][ unit369_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit369_0[i][2] ][ unit369_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit369_0[i][4] ][ unit369_0[i][5] ] >0);
		X_contra = ( LargeX[369][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit369_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[369][1]=0; L[369][0]=1;}
			satisfiable[369][0]=satisfiable[369][0] & ((x[369] ^ 0) | (x[ unit369_0[i][0] ] ^ unit369_0[i][1]) |(x[ unit369_0[i][2] ] ^ unit369_0[i][3]));
			}
		if(X_contra>0) L[369][0]=2;
		}
	//Check all rules of unit[369][1]
	L[369][1] = LargeX[369][0]>0 ? 1 : 0;
	satisfiable[369][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit369_1[i][0] ][ unit369_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit369_1[i][2] ][ unit369_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit369_1[i][4] ][ unit369_1[i][5] ] >0);
		X_contra = ( LargeX[369][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit369_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[369][0]=0; L[369][1]=1;}
			satisfiable[369][1]=satisfiable[369][1] & ((x[369] ^ 1) | (x[ unit369_1[i][0] ] ^ unit369_1[i][1]) |(x[ unit369_1[i][2] ] ^ unit369_1[i][3]));
			}
		if(X_contra>0) L[369][1]=2;
		}
	//Check all rules of unit[370][0]
	L[370][0] = LargeX[370][1]>0 ? 1 : 0;
	satisfiable[370][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit370_0[i][0] ][ unit370_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit370_0[i][2] ][ unit370_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit370_0[i][4] ][ unit370_0[i][5] ] >0);
		X_contra = ( LargeX[370][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit370_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[370][1]=0; L[370][0]=1;}
			satisfiable[370][0]=satisfiable[370][0] & ((x[370] ^ 0) | (x[ unit370_0[i][0] ] ^ unit370_0[i][1]) |(x[ unit370_0[i][2] ] ^ unit370_0[i][3]));
			}
		if(X_contra>0) L[370][0]=2;
		}
	//Check all rules of unit[370][1]
	L[370][1] = LargeX[370][0]>0 ? 1 : 0;
	satisfiable[370][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit370_1[i][0] ][ unit370_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit370_1[i][2] ][ unit370_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit370_1[i][4] ][ unit370_1[i][5] ] >0);
		X_contra = ( LargeX[370][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit370_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[370][0]=0; L[370][1]=1;}
			satisfiable[370][1]=satisfiable[370][1] & ((x[370] ^ 1) | (x[ unit370_1[i][0] ] ^ unit370_1[i][1]) |(x[ unit370_1[i][2] ] ^ unit370_1[i][3]));
			}
		if(X_contra>0) L[370][1]=2;
		}
	//Check all rules of unit[371][0]
	L[371][0] = LargeX[371][1]>0 ? 1 : 0;
	satisfiable[371][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit371_0[i][0] ][ unit371_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit371_0[i][2] ][ unit371_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit371_0[i][4] ][ unit371_0[i][5] ] >0);
		X_contra = ( LargeX[371][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit371_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[371][1]=0; L[371][0]=1;}
			satisfiable[371][0]=satisfiable[371][0] & ((x[371] ^ 0) | (x[ unit371_0[i][0] ] ^ unit371_0[i][1]) |(x[ unit371_0[i][2] ] ^ unit371_0[i][3]));
			}
		if(X_contra>0) L[371][0]=2;
		}
	//Check all rules of unit[371][1]
	L[371][1] = LargeX[371][0]>0 ? 1 : 0;
	satisfiable[371][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit371_1[i][0] ][ unit371_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit371_1[i][2] ][ unit371_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit371_1[i][4] ][ unit371_1[i][5] ] >0);
		X_contra = ( LargeX[371][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit371_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[371][0]=0; L[371][1]=1;}
			satisfiable[371][1]=satisfiable[371][1] & ((x[371] ^ 1) | (x[ unit371_1[i][0] ] ^ unit371_1[i][1]) |(x[ unit371_1[i][2] ] ^ unit371_1[i][3]));
			}
		if(X_contra>0) L[371][1]=2;
		}
	//Check all rules of unit[372][0]
	L[372][0] = LargeX[372][1]>0 ? 1 : 0;
	satisfiable[372][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit372_0[i][0] ][ unit372_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit372_0[i][2] ][ unit372_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit372_0[i][4] ][ unit372_0[i][5] ] >0);
		X_contra = ( LargeX[372][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit372_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[372][1]=0; L[372][0]=1;}
			satisfiable[372][0]=satisfiable[372][0] & ((x[372] ^ 0) | (x[ unit372_0[i][0] ] ^ unit372_0[i][1]) |(x[ unit372_0[i][2] ] ^ unit372_0[i][3]));
			}
		if(X_contra>0) L[372][0]=2;
		}
	//Check all rules of unit[372][1]
	L[372][1] = LargeX[372][0]>0 ? 1 : 0;
	satisfiable[372][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit372_1[i][0] ][ unit372_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit372_1[i][2] ][ unit372_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit372_1[i][4] ][ unit372_1[i][5] ] >0);
		X_contra = ( LargeX[372][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit372_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[372][0]=0; L[372][1]=1;}
			satisfiable[372][1]=satisfiable[372][1] & ((x[372] ^ 1) | (x[ unit372_1[i][0] ] ^ unit372_1[i][1]) |(x[ unit372_1[i][2] ] ^ unit372_1[i][3]));
			}
		if(X_contra>0) L[372][1]=2;
		}
	//Check all rules of unit[373][0]
	L[373][0] = LargeX[373][1]>0 ? 1 : 0;
	satisfiable[373][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit373_0[i][0] ][ unit373_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit373_0[i][2] ][ unit373_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit373_0[i][4] ][ unit373_0[i][5] ] >0);
		X_contra = ( LargeX[373][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit373_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[373][1]=0; L[373][0]=1;}
			satisfiable[373][0]=satisfiable[373][0] & ((x[373] ^ 0) | (x[ unit373_0[i][0] ] ^ unit373_0[i][1]) |(x[ unit373_0[i][2] ] ^ unit373_0[i][3]));
			}
		if(X_contra>0) L[373][0]=2;
		}
	//Check all rules of unit[373][1]
	L[373][1] = LargeX[373][0]>0 ? 1 : 0;
	satisfiable[373][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit373_1[i][0] ][ unit373_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit373_1[i][2] ][ unit373_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit373_1[i][4] ][ unit373_1[i][5] ] >0);
		X_contra = ( LargeX[373][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit373_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[373][0]=0; L[373][1]=1;}
			satisfiable[373][1]=satisfiable[373][1] & ((x[373] ^ 1) | (x[ unit373_1[i][0] ] ^ unit373_1[i][1]) |(x[ unit373_1[i][2] ] ^ unit373_1[i][3]));
			}
		if(X_contra>0) L[373][1]=2;
		}
	//Check all rules of unit[374][0]
	L[374][0] = LargeX[374][1]>0 ? 1 : 0;
	satisfiable[374][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit374_0[i][0] ][ unit374_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit374_0[i][2] ][ unit374_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit374_0[i][4] ][ unit374_0[i][5] ] >0);
		X_contra = ( LargeX[374][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit374_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[374][1]=0; L[374][0]=1;}
			satisfiable[374][0]=satisfiable[374][0] & ((x[374] ^ 0) | (x[ unit374_0[i][0] ] ^ unit374_0[i][1]) |(x[ unit374_0[i][2] ] ^ unit374_0[i][3]));
			}
		if(X_contra>0) L[374][0]=2;
		}
	//Check all rules of unit[374][1]
	L[374][1] = LargeX[374][0]>0 ? 1 : 0;
	satisfiable[374][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit374_1[i][0] ][ unit374_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit374_1[i][2] ][ unit374_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit374_1[i][4] ][ unit374_1[i][5] ] >0);
		X_contra = ( LargeX[374][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit374_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[374][0]=0; L[374][1]=1;}
			satisfiable[374][1]=satisfiable[374][1] & ((x[374] ^ 1) | (x[ unit374_1[i][0] ] ^ unit374_1[i][1]) |(x[ unit374_1[i][2] ] ^ unit374_1[i][3]));
			}
		if(X_contra>0) L[374][1]=2;
		}
	//Check all rules of unit[375][0]
	L[375][0] = LargeX[375][1]>0 ? 1 : 0;
	satisfiable[375][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit375_0[i][0] ][ unit375_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit375_0[i][2] ][ unit375_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit375_0[i][4] ][ unit375_0[i][5] ] >0);
		X_contra = ( LargeX[375][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit375_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[375][1]=0; L[375][0]=1;}
			satisfiable[375][0]=satisfiable[375][0] & ((x[375] ^ 0) | (x[ unit375_0[i][0] ] ^ unit375_0[i][1]) |(x[ unit375_0[i][2] ] ^ unit375_0[i][3]));
			}
		if(X_contra>0) L[375][0]=2;
		}
	//Check all rules of unit[375][1]
	L[375][1] = LargeX[375][0]>0 ? 1 : 0;
	satisfiable[375][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit375_1[i][0] ][ unit375_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit375_1[i][2] ][ unit375_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit375_1[i][4] ][ unit375_1[i][5] ] >0);
		X_contra = ( LargeX[375][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit375_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[375][0]=0; L[375][1]=1;}
			satisfiable[375][1]=satisfiable[375][1] & ((x[375] ^ 1) | (x[ unit375_1[i][0] ] ^ unit375_1[i][1]) |(x[ unit375_1[i][2] ] ^ unit375_1[i][3]));
			}
		if(X_contra>0) L[375][1]=2;
		}
	//Check all rules of unit[376][0]
	L[376][0] = LargeX[376][1]>0 ? 1 : 0;
	satisfiable[376][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit376_0[i][0] ][ unit376_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit376_0[i][2] ][ unit376_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit376_0[i][4] ][ unit376_0[i][5] ] >0);
		X_contra = ( LargeX[376][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit376_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[376][1]=0; L[376][0]=1;}
			satisfiable[376][0]=satisfiable[376][0] & ((x[376] ^ 0) | (x[ unit376_0[i][0] ] ^ unit376_0[i][1]) |(x[ unit376_0[i][2] ] ^ unit376_0[i][3]));
			}
		if(X_contra>0) L[376][0]=2;
		}
	//Check all rules of unit[376][1]
	L[376][1] = LargeX[376][0]>0 ? 1 : 0;
	satisfiable[376][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit376_1[i][0] ][ unit376_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit376_1[i][2] ][ unit376_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit376_1[i][4] ][ unit376_1[i][5] ] >0);
		X_contra = ( LargeX[376][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit376_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[376][0]=0; L[376][1]=1;}
			satisfiable[376][1]=satisfiable[376][1] & ((x[376] ^ 1) | (x[ unit376_1[i][0] ] ^ unit376_1[i][1]) |(x[ unit376_1[i][2] ] ^ unit376_1[i][3]));
			}
		if(X_contra>0) L[376][1]=2;
		}
	//Check all rules of unit[377][0]
	L[377][0] = LargeX[377][1]>0 ? 1 : 0;
	satisfiable[377][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit377_0[i][0] ][ unit377_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit377_0[i][2] ][ unit377_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit377_0[i][4] ][ unit377_0[i][5] ] >0);
		X_contra = ( LargeX[377][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit377_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[377][1]=0; L[377][0]=1;}
			satisfiable[377][0]=satisfiable[377][0] & ((x[377] ^ 0) | (x[ unit377_0[i][0] ] ^ unit377_0[i][1]) |(x[ unit377_0[i][2] ] ^ unit377_0[i][3]));
			}
		if(X_contra>0) L[377][0]=2;
		}
	//Check all rules of unit[377][1]
	L[377][1] = LargeX[377][0]>0 ? 1 : 0;
	satisfiable[377][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit377_1[i][0] ][ unit377_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit377_1[i][2] ][ unit377_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit377_1[i][4] ][ unit377_1[i][5] ] >0);
		X_contra = ( LargeX[377][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit377_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[377][0]=0; L[377][1]=1;}
			satisfiable[377][1]=satisfiable[377][1] & ((x[377] ^ 1) | (x[ unit377_1[i][0] ] ^ unit377_1[i][1]) |(x[ unit377_1[i][2] ] ^ unit377_1[i][3]));
			}
		if(X_contra>0) L[377][1]=2;
		}
	//Check all rules of unit[378][0]
	L[378][0] = LargeX[378][1]>0 ? 1 : 0;
	satisfiable[378][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit378_0[i][0] ][ unit378_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit378_0[i][2] ][ unit378_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit378_0[i][4] ][ unit378_0[i][5] ] >0);
		X_contra = ( LargeX[378][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit378_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[378][1]=0; L[378][0]=1;}
			satisfiable[378][0]=satisfiable[378][0] & ((x[378] ^ 0) | (x[ unit378_0[i][0] ] ^ unit378_0[i][1]) |(x[ unit378_0[i][2] ] ^ unit378_0[i][3]));
			}
		if(X_contra>0) L[378][0]=2;
		}
	//Check all rules of unit[378][1]
	L[378][1] = LargeX[378][0]>0 ? 1 : 0;
	satisfiable[378][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit378_1[i][0] ][ unit378_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit378_1[i][2] ][ unit378_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit378_1[i][4] ][ unit378_1[i][5] ] >0);
		X_contra = ( LargeX[378][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit378_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[378][0]=0; L[378][1]=1;}
			satisfiable[378][1]=satisfiable[378][1] & ((x[378] ^ 1) | (x[ unit378_1[i][0] ] ^ unit378_1[i][1]) |(x[ unit378_1[i][2] ] ^ unit378_1[i][3]));
			}
		if(X_contra>0) L[378][1]=2;
		}
	//Check all rules of unit[379][0]
	L[379][0] = LargeX[379][1]>0 ? 1 : 0;
	satisfiable[379][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit379_0[i][0] ][ unit379_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit379_0[i][2] ][ unit379_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit379_0[i][4] ][ unit379_0[i][5] ] >0);
		X_contra = ( LargeX[379][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit379_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[379][1]=0; L[379][0]=1;}
			satisfiable[379][0]=satisfiable[379][0] & ((x[379] ^ 0) | (x[ unit379_0[i][0] ] ^ unit379_0[i][1]) |(x[ unit379_0[i][2] ] ^ unit379_0[i][3]));
			}
		if(X_contra>0) L[379][0]=2;
		}
	//Check all rules of unit[379][1]
	L[379][1] = LargeX[379][0]>0 ? 1 : 0;
	satisfiable[379][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit379_1[i][0] ][ unit379_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit379_1[i][2] ][ unit379_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit379_1[i][4] ][ unit379_1[i][5] ] >0);
		X_contra = ( LargeX[379][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit379_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[379][0]=0; L[379][1]=1;}
			satisfiable[379][1]=satisfiable[379][1] & ((x[379] ^ 1) | (x[ unit379_1[i][0] ] ^ unit379_1[i][1]) |(x[ unit379_1[i][2] ] ^ unit379_1[i][3]));
			}
		if(X_contra>0) L[379][1]=2;
		}
	//Check all rules of unit[380][0]
	L[380][0] = LargeX[380][1]>0 ? 1 : 0;
	satisfiable[380][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit380_0[i][0] ][ unit380_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit380_0[i][2] ][ unit380_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit380_0[i][4] ][ unit380_0[i][5] ] >0);
		X_contra = ( LargeX[380][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit380_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[380][1]=0; L[380][0]=1;}
			satisfiable[380][0]=satisfiable[380][0] & ((x[380] ^ 0) | (x[ unit380_0[i][0] ] ^ unit380_0[i][1]) |(x[ unit380_0[i][2] ] ^ unit380_0[i][3]));
			}
		if(X_contra>0) L[380][0]=2;
		}
	//Check all rules of unit[380][1]
	L[380][1] = LargeX[380][0]>0 ? 1 : 0;
	satisfiable[380][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit380_1[i][0] ][ unit380_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit380_1[i][2] ][ unit380_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit380_1[i][4] ][ unit380_1[i][5] ] >0);
		X_contra = ( LargeX[380][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit380_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[380][0]=0; L[380][1]=1;}
			satisfiable[380][1]=satisfiable[380][1] & ((x[380] ^ 1) | (x[ unit380_1[i][0] ] ^ unit380_1[i][1]) |(x[ unit380_1[i][2] ] ^ unit380_1[i][3]));
			}
		if(X_contra>0) L[380][1]=2;
		}
	//Check all rules of unit[381][0]
	L[381][0] = LargeX[381][1]>0 ? 1 : 0;
	satisfiable[381][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit381_0[i][0] ][ unit381_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit381_0[i][2] ][ unit381_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit381_0[i][4] ][ unit381_0[i][5] ] >0);
		X_contra = ( LargeX[381][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit381_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[381][1]=0; L[381][0]=1;}
			satisfiable[381][0]=satisfiable[381][0] & ((x[381] ^ 0) | (x[ unit381_0[i][0] ] ^ unit381_0[i][1]) |(x[ unit381_0[i][2] ] ^ unit381_0[i][3]));
			}
		if(X_contra>0) L[381][0]=2;
		}
	//Check all rules of unit[381][1]
	L[381][1] = LargeX[381][0]>0 ? 1 : 0;
	satisfiable[381][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit381_1[i][0] ][ unit381_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit381_1[i][2] ][ unit381_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit381_1[i][4] ][ unit381_1[i][5] ] >0);
		X_contra = ( LargeX[381][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit381_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[381][0]=0; L[381][1]=1;}
			satisfiable[381][1]=satisfiable[381][1] & ((x[381] ^ 1) | (x[ unit381_1[i][0] ] ^ unit381_1[i][1]) |(x[ unit381_1[i][2] ] ^ unit381_1[i][3]));
			}
		if(X_contra>0) L[381][1]=2;
		}
	//Check all rules of unit[382][0]
	L[382][0] = LargeX[382][1]>0 ? 1 : 0;
	satisfiable[382][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit382_0[i][0] ][ unit382_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit382_0[i][2] ][ unit382_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit382_0[i][4] ][ unit382_0[i][5] ] >0);
		X_contra = ( LargeX[382][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit382_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[382][1]=0; L[382][0]=1;}
			satisfiable[382][0]=satisfiable[382][0] & ((x[382] ^ 0) | (x[ unit382_0[i][0] ] ^ unit382_0[i][1]) |(x[ unit382_0[i][2] ] ^ unit382_0[i][3]));
			}
		if(X_contra>0) L[382][0]=2;
		}
	//Check all rules of unit[382][1]
	L[382][1] = LargeX[382][0]>0 ? 1 : 0;
	satisfiable[382][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit382_1[i][0] ][ unit382_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit382_1[i][2] ][ unit382_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit382_1[i][4] ][ unit382_1[i][5] ] >0);
		X_contra = ( LargeX[382][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit382_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[382][0]=0; L[382][1]=1;}
			satisfiable[382][1]=satisfiable[382][1] & ((x[382] ^ 1) | (x[ unit382_1[i][0] ] ^ unit382_1[i][1]) |(x[ unit382_1[i][2] ] ^ unit382_1[i][3]));
			}
		if(X_contra>0) L[382][1]=2;
		}
	//Check all rules of unit[383][0]
	L[383][0] = LargeX[383][1]>0 ? 1 : 0;
	satisfiable[383][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit383_0[i][0] ][ unit383_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit383_0[i][2] ][ unit383_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit383_0[i][4] ][ unit383_0[i][5] ] >0);
		X_contra = ( LargeX[383][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit383_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[383][1]=0; L[383][0]=1;}
			satisfiable[383][0]=satisfiable[383][0] & ((x[383] ^ 0) | (x[ unit383_0[i][0] ] ^ unit383_0[i][1]) |(x[ unit383_0[i][2] ] ^ unit383_0[i][3]));
			}
		if(X_contra>0) L[383][0]=2;
		}
	//Check all rules of unit[383][1]
	L[383][1] = LargeX[383][0]>0 ? 1 : 0;
	satisfiable[383][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit383_1[i][0] ][ unit383_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit383_1[i][2] ][ unit383_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit383_1[i][4] ][ unit383_1[i][5] ] >0);
		X_contra = ( LargeX[383][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit383_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[383][0]=0; L[383][1]=1;}
			satisfiable[383][1]=satisfiable[383][1] & ((x[383] ^ 1) | (x[ unit383_1[i][0] ] ^ unit383_1[i][1]) |(x[ unit383_1[i][2] ] ^ unit383_1[i][3]));
			}
		if(X_contra>0) L[383][1]=2;
		}
	//Check all rules of unit[384][0]
	L[384][0] = LargeX[384][1]>0 ? 1 : 0;
	satisfiable[384][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit384_0[i][0] ][ unit384_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit384_0[i][2] ][ unit384_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit384_0[i][4] ][ unit384_0[i][5] ] >0);
		X_contra = ( LargeX[384][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit384_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[384][1]=0; L[384][0]=1;}
			satisfiable[384][0]=satisfiable[384][0] & ((x[384] ^ 0) | (x[ unit384_0[i][0] ] ^ unit384_0[i][1]) |(x[ unit384_0[i][2] ] ^ unit384_0[i][3]));
			}
		if(X_contra>0) L[384][0]=2;
		}
	//Check all rules of unit[384][1]
	L[384][1] = LargeX[384][0]>0 ? 1 : 0;
	satisfiable[384][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit384_1[i][0] ][ unit384_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit384_1[i][2] ][ unit384_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit384_1[i][4] ][ unit384_1[i][5] ] >0);
		X_contra = ( LargeX[384][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit384_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[384][0]=0; L[384][1]=1;}
			satisfiable[384][1]=satisfiable[384][1] & ((x[384] ^ 1) | (x[ unit384_1[i][0] ] ^ unit384_1[i][1]) |(x[ unit384_1[i][2] ] ^ unit384_1[i][3]));
			}
		if(X_contra>0) L[384][1]=2;
		}
	//Check all rules of unit[385][0]
	L[385][0] = LargeX[385][1]>0 ? 1 : 0;
	satisfiable[385][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit385_0[i][0] ][ unit385_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit385_0[i][2] ][ unit385_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit385_0[i][4] ][ unit385_0[i][5] ] >0);
		X_contra = ( LargeX[385][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit385_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[385][1]=0; L[385][0]=1;}
			satisfiable[385][0]=satisfiable[385][0] & ((x[385] ^ 0) | (x[ unit385_0[i][0] ] ^ unit385_0[i][1]) |(x[ unit385_0[i][2] ] ^ unit385_0[i][3]));
			}
		if(X_contra>0) L[385][0]=2;
		}
	//Check all rules of unit[385][1]
	L[385][1] = LargeX[385][0]>0 ? 1 : 0;
	satisfiable[385][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit385_1[i][0] ][ unit385_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit385_1[i][2] ][ unit385_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit385_1[i][4] ][ unit385_1[i][5] ] >0);
		X_contra = ( LargeX[385][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit385_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[385][0]=0; L[385][1]=1;}
			satisfiable[385][1]=satisfiable[385][1] & ((x[385] ^ 1) | (x[ unit385_1[i][0] ] ^ unit385_1[i][1]) |(x[ unit385_1[i][2] ] ^ unit385_1[i][3]));
			}
		if(X_contra>0) L[385][1]=2;
		}
	//Check all rules of unit[386][0]
	L[386][0] = LargeX[386][1]>0 ? 1 : 0;
	satisfiable[386][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit386_0[i][0] ][ unit386_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit386_0[i][2] ][ unit386_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit386_0[i][4] ][ unit386_0[i][5] ] >0);
		X_contra = ( LargeX[386][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit386_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[386][1]=0; L[386][0]=1;}
			satisfiable[386][0]=satisfiable[386][0] & ((x[386] ^ 0) | (x[ unit386_0[i][0] ] ^ unit386_0[i][1]) |(x[ unit386_0[i][2] ] ^ unit386_0[i][3]));
			}
		if(X_contra>0) L[386][0]=2;
		}
	//Check all rules of unit[386][1]
	L[386][1] = LargeX[386][0]>0 ? 1 : 0;
	satisfiable[386][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit386_1[i][0] ][ unit386_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit386_1[i][2] ][ unit386_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit386_1[i][4] ][ unit386_1[i][5] ] >0);
		X_contra = ( LargeX[386][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit386_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[386][0]=0; L[386][1]=1;}
			satisfiable[386][1]=satisfiable[386][1] & ((x[386] ^ 1) | (x[ unit386_1[i][0] ] ^ unit386_1[i][1]) |(x[ unit386_1[i][2] ] ^ unit386_1[i][3]));
			}
		if(X_contra>0) L[386][1]=2;
		}
	//Check all rules of unit[387][0]
	L[387][0] = LargeX[387][1]>0 ? 1 : 0;
	satisfiable[387][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit387_0[i][0] ][ unit387_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit387_0[i][2] ][ unit387_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit387_0[i][4] ][ unit387_0[i][5] ] >0);
		X_contra = ( LargeX[387][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit387_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[387][1]=0; L[387][0]=1;}
			satisfiable[387][0]=satisfiable[387][0] & ((x[387] ^ 0) | (x[ unit387_0[i][0] ] ^ unit387_0[i][1]) |(x[ unit387_0[i][2] ] ^ unit387_0[i][3]));
			}
		if(X_contra>0) L[387][0]=2;
		}
	//Check all rules of unit[387][1]
	L[387][1] = LargeX[387][0]>0 ? 1 : 0;
	satisfiable[387][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit387_1[i][0] ][ unit387_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit387_1[i][2] ][ unit387_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit387_1[i][4] ][ unit387_1[i][5] ] >0);
		X_contra = ( LargeX[387][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit387_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[387][0]=0; L[387][1]=1;}
			satisfiable[387][1]=satisfiable[387][1] & ((x[387] ^ 1) | (x[ unit387_1[i][0] ] ^ unit387_1[i][1]) |(x[ unit387_1[i][2] ] ^ unit387_1[i][3]));
			}
		if(X_contra>0) L[387][1]=2;
		}
	//Check all rules of unit[388][0]
	L[388][0] = LargeX[388][1]>0 ? 1 : 0;
	satisfiable[388][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit388_0[i][0] ][ unit388_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit388_0[i][2] ][ unit388_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit388_0[i][4] ][ unit388_0[i][5] ] >0);
		X_contra = ( LargeX[388][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit388_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[388][1]=0; L[388][0]=1;}
			satisfiable[388][0]=satisfiable[388][0] & ((x[388] ^ 0) | (x[ unit388_0[i][0] ] ^ unit388_0[i][1]) |(x[ unit388_0[i][2] ] ^ unit388_0[i][3]));
			}
		if(X_contra>0) L[388][0]=2;
		}
	//Check all rules of unit[388][1]
	L[388][1] = LargeX[388][0]>0 ? 1 : 0;
	satisfiable[388][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit388_1[i][0] ][ unit388_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit388_1[i][2] ][ unit388_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit388_1[i][4] ][ unit388_1[i][5] ] >0);
		X_contra = ( LargeX[388][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit388_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[388][0]=0; L[388][1]=1;}
			satisfiable[388][1]=satisfiable[388][1] & ((x[388] ^ 1) | (x[ unit388_1[i][0] ] ^ unit388_1[i][1]) |(x[ unit388_1[i][2] ] ^ unit388_1[i][3]));
			}
		if(X_contra>0) L[388][1]=2;
		}
	//Check all rules of unit[389][0]
	L[389][0] = LargeX[389][1]>0 ? 1 : 0;
	satisfiable[389][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit389_0[i][0] ][ unit389_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit389_0[i][2] ][ unit389_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit389_0[i][4] ][ unit389_0[i][5] ] >0);
		X_contra = ( LargeX[389][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit389_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[389][1]=0; L[389][0]=1;}
			satisfiable[389][0]=satisfiable[389][0] & ((x[389] ^ 0) | (x[ unit389_0[i][0] ] ^ unit389_0[i][1]) |(x[ unit389_0[i][2] ] ^ unit389_0[i][3]));
			}
		if(X_contra>0) L[389][0]=2;
		}
	//Check all rules of unit[389][1]
	L[389][1] = LargeX[389][0]>0 ? 1 : 0;
	satisfiable[389][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit389_1[i][0] ][ unit389_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit389_1[i][2] ][ unit389_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit389_1[i][4] ][ unit389_1[i][5] ] >0);
		X_contra = ( LargeX[389][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit389_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[389][0]=0; L[389][1]=1;}
			satisfiable[389][1]=satisfiable[389][1] & ((x[389] ^ 1) | (x[ unit389_1[i][0] ] ^ unit389_1[i][1]) |(x[ unit389_1[i][2] ] ^ unit389_1[i][3]));
			}
		if(X_contra>0) L[389][1]=2;
		}
	//Check all rules of unit[390][0]
	L[390][0] = LargeX[390][1]>0 ? 1 : 0;
	satisfiable[390][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit390_0[i][0] ][ unit390_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit390_0[i][2] ][ unit390_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit390_0[i][4] ][ unit390_0[i][5] ] >0);
		X_contra = ( LargeX[390][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit390_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[390][1]=0; L[390][0]=1;}
			satisfiable[390][0]=satisfiable[390][0] & ((x[390] ^ 0) | (x[ unit390_0[i][0] ] ^ unit390_0[i][1]) |(x[ unit390_0[i][2] ] ^ unit390_0[i][3]));
			}
		if(X_contra>0) L[390][0]=2;
		}
	//Check all rules of unit[390][1]
	L[390][1] = LargeX[390][0]>0 ? 1 : 0;
	satisfiable[390][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit390_1[i][0] ][ unit390_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit390_1[i][2] ][ unit390_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit390_1[i][4] ][ unit390_1[i][5] ] >0);
		X_contra = ( LargeX[390][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit390_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[390][0]=0; L[390][1]=1;}
			satisfiable[390][1]=satisfiable[390][1] & ((x[390] ^ 1) | (x[ unit390_1[i][0] ] ^ unit390_1[i][1]) |(x[ unit390_1[i][2] ] ^ unit390_1[i][3]));
			}
		if(X_contra>0) L[390][1]=2;
		}
	//Check all rules of unit[391][0]
	L[391][0] = LargeX[391][1]>0 ? 1 : 0;
	satisfiable[391][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit391_0[i][0] ][ unit391_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit391_0[i][2] ][ unit391_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit391_0[i][4] ][ unit391_0[i][5] ] >0);
		X_contra = ( LargeX[391][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit391_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[391][1]=0; L[391][0]=1;}
			satisfiable[391][0]=satisfiable[391][0] & ((x[391] ^ 0) | (x[ unit391_0[i][0] ] ^ unit391_0[i][1]) |(x[ unit391_0[i][2] ] ^ unit391_0[i][3]));
			}
		if(X_contra>0) L[391][0]=2;
		}
	//Check all rules of unit[391][1]
	L[391][1] = LargeX[391][0]>0 ? 1 : 0;
	satisfiable[391][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit391_1[i][0] ][ unit391_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit391_1[i][2] ][ unit391_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit391_1[i][4] ][ unit391_1[i][5] ] >0);
		X_contra = ( LargeX[391][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit391_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[391][0]=0; L[391][1]=1;}
			satisfiable[391][1]=satisfiable[391][1] & ((x[391] ^ 1) | (x[ unit391_1[i][0] ] ^ unit391_1[i][1]) |(x[ unit391_1[i][2] ] ^ unit391_1[i][3]));
			}
		if(X_contra>0) L[391][1]=2;
		}
	//Check all rules of unit[392][0]
	L[392][0] = LargeX[392][1]>0 ? 1 : 0;
	satisfiable[392][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit392_0[i][0] ][ unit392_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit392_0[i][2] ][ unit392_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit392_0[i][4] ][ unit392_0[i][5] ] >0);
		X_contra = ( LargeX[392][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit392_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[392][1]=0; L[392][0]=1;}
			satisfiable[392][0]=satisfiable[392][0] & ((x[392] ^ 0) | (x[ unit392_0[i][0] ] ^ unit392_0[i][1]) |(x[ unit392_0[i][2] ] ^ unit392_0[i][3]));
			}
		if(X_contra>0) L[392][0]=2;
		}
	//Check all rules of unit[392][1]
	L[392][1] = LargeX[392][0]>0 ? 1 : 0;
	satisfiable[392][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit392_1[i][0] ][ unit392_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit392_1[i][2] ][ unit392_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit392_1[i][4] ][ unit392_1[i][5] ] >0);
		X_contra = ( LargeX[392][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit392_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[392][0]=0; L[392][1]=1;}
			satisfiable[392][1]=satisfiable[392][1] & ((x[392] ^ 1) | (x[ unit392_1[i][0] ] ^ unit392_1[i][1]) |(x[ unit392_1[i][2] ] ^ unit392_1[i][3]));
			}
		if(X_contra>0) L[392][1]=2;
		}
	//Check all rules of unit[393][0]
	L[393][0] = LargeX[393][1]>0 ? 1 : 0;
	satisfiable[393][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit393_0[i][0] ][ unit393_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit393_0[i][2] ][ unit393_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit393_0[i][4] ][ unit393_0[i][5] ] >0);
		X_contra = ( LargeX[393][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit393_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[393][1]=0; L[393][0]=1;}
			satisfiable[393][0]=satisfiable[393][0] & ((x[393] ^ 0) | (x[ unit393_0[i][0] ] ^ unit393_0[i][1]) |(x[ unit393_0[i][2] ] ^ unit393_0[i][3]));
			}
		if(X_contra>0) L[393][0]=2;
		}
	//Check all rules of unit[393][1]
	L[393][1] = LargeX[393][0]>0 ? 1 : 0;
	satisfiable[393][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit393_1[i][0] ][ unit393_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit393_1[i][2] ][ unit393_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit393_1[i][4] ][ unit393_1[i][5] ] >0);
		X_contra = ( LargeX[393][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit393_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[393][0]=0; L[393][1]=1;}
			satisfiable[393][1]=satisfiable[393][1] & ((x[393] ^ 1) | (x[ unit393_1[i][0] ] ^ unit393_1[i][1]) |(x[ unit393_1[i][2] ] ^ unit393_1[i][3]));
			}
		if(X_contra>0) L[393][1]=2;
		}
	//Check all rules of unit[394][0]
	L[394][0] = LargeX[394][1]>0 ? 1 : 0;
	satisfiable[394][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit394_0[i][0] ][ unit394_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit394_0[i][2] ][ unit394_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit394_0[i][4] ][ unit394_0[i][5] ] >0);
		X_contra = ( LargeX[394][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit394_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[394][1]=0; L[394][0]=1;}
			satisfiable[394][0]=satisfiable[394][0] & ((x[394] ^ 0) | (x[ unit394_0[i][0] ] ^ unit394_0[i][1]) |(x[ unit394_0[i][2] ] ^ unit394_0[i][3]));
			}
		if(X_contra>0) L[394][0]=2;
		}
	//Check all rules of unit[394][1]
	L[394][1] = LargeX[394][0]>0 ? 1 : 0;
	satisfiable[394][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit394_1[i][0] ][ unit394_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit394_1[i][2] ][ unit394_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit394_1[i][4] ][ unit394_1[i][5] ] >0);
		X_contra = ( LargeX[394][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit394_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[394][0]=0; L[394][1]=1;}
			satisfiable[394][1]=satisfiable[394][1] & ((x[394] ^ 1) | (x[ unit394_1[i][0] ] ^ unit394_1[i][1]) |(x[ unit394_1[i][2] ] ^ unit394_1[i][3]));
			}
		if(X_contra>0) L[394][1]=2;
		}
	//Check all rules of unit[395][0]
	L[395][0] = LargeX[395][1]>0 ? 1 : 0;
	satisfiable[395][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit395_0[i][0] ][ unit395_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit395_0[i][2] ][ unit395_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit395_0[i][4] ][ unit395_0[i][5] ] >0);
		X_contra = ( LargeX[395][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit395_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[395][1]=0; L[395][0]=1;}
			satisfiable[395][0]=satisfiable[395][0] & ((x[395] ^ 0) | (x[ unit395_0[i][0] ] ^ unit395_0[i][1]) |(x[ unit395_0[i][2] ] ^ unit395_0[i][3]));
			}
		if(X_contra>0) L[395][0]=2;
		}
	//Check all rules of unit[395][1]
	L[395][1] = LargeX[395][0]>0 ? 1 : 0;
	satisfiable[395][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit395_1[i][0] ][ unit395_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit395_1[i][2] ][ unit395_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit395_1[i][4] ][ unit395_1[i][5] ] >0);
		X_contra = ( LargeX[395][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit395_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[395][0]=0; L[395][1]=1;}
			satisfiable[395][1]=satisfiable[395][1] & ((x[395] ^ 1) | (x[ unit395_1[i][0] ] ^ unit395_1[i][1]) |(x[ unit395_1[i][2] ] ^ unit395_1[i][3]));
			}
		if(X_contra>0) L[395][1]=2;
		}
	//Check all rules of unit[396][0]
	L[396][0] = LargeX[396][1]>0 ? 1 : 0;
	satisfiable[396][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit396_0[i][0] ][ unit396_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit396_0[i][2] ][ unit396_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit396_0[i][4] ][ unit396_0[i][5] ] >0);
		X_contra = ( LargeX[396][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit396_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[396][1]=0; L[396][0]=1;}
			satisfiable[396][0]=satisfiable[396][0] & ((x[396] ^ 0) | (x[ unit396_0[i][0] ] ^ unit396_0[i][1]) |(x[ unit396_0[i][2] ] ^ unit396_0[i][3]));
			}
		if(X_contra>0) L[396][0]=2;
		}
	//Check all rules of unit[396][1]
	L[396][1] = LargeX[396][0]>0 ? 1 : 0;
	satisfiable[396][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit396_1[i][0] ][ unit396_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit396_1[i][2] ][ unit396_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit396_1[i][4] ][ unit396_1[i][5] ] >0);
		X_contra = ( LargeX[396][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit396_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[396][0]=0; L[396][1]=1;}
			satisfiable[396][1]=satisfiable[396][1] & ((x[396] ^ 1) | (x[ unit396_1[i][0] ] ^ unit396_1[i][1]) |(x[ unit396_1[i][2] ] ^ unit396_1[i][3]));
			}
		if(X_contra>0) L[396][1]=2;
		}
	//Check all rules of unit[397][0]
	L[397][0] = LargeX[397][1]>0 ? 1 : 0;
	satisfiable[397][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit397_0[i][0] ][ unit397_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit397_0[i][2] ][ unit397_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit397_0[i][4] ][ unit397_0[i][5] ] >0);
		X_contra = ( LargeX[397][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit397_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[397][1]=0; L[397][0]=1;}
			satisfiable[397][0]=satisfiable[397][0] & ((x[397] ^ 0) | (x[ unit397_0[i][0] ] ^ unit397_0[i][1]) |(x[ unit397_0[i][2] ] ^ unit397_0[i][3]));
			}
		if(X_contra>0) L[397][0]=2;
		}
	//Check all rules of unit[397][1]
	L[397][1] = LargeX[397][0]>0 ? 1 : 0;
	satisfiable[397][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit397_1[i][0] ][ unit397_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit397_1[i][2] ][ unit397_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit397_1[i][4] ][ unit397_1[i][5] ] >0);
		X_contra = ( LargeX[397][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit397_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[397][0]=0; L[397][1]=1;}
			satisfiable[397][1]=satisfiable[397][1] & ((x[397] ^ 1) | (x[ unit397_1[i][0] ] ^ unit397_1[i][1]) |(x[ unit397_1[i][2] ] ^ unit397_1[i][3]));
			}
		if(X_contra>0) L[397][1]=2;
		}
	//Check all rules of unit[398][0]
	L[398][0] = LargeX[398][1]>0 ? 1 : 0;
	satisfiable[398][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit398_0[i][0] ][ unit398_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit398_0[i][2] ][ unit398_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit398_0[i][4] ][ unit398_0[i][5] ] >0);
		X_contra = ( LargeX[398][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit398_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[398][1]=0; L[398][0]=1;}
			satisfiable[398][0]=satisfiable[398][0] & ((x[398] ^ 0) | (x[ unit398_0[i][0] ] ^ unit398_0[i][1]) |(x[ unit398_0[i][2] ] ^ unit398_0[i][3]));
			}
		if(X_contra>0) L[398][0]=2;
		}
	//Check all rules of unit[398][1]
	L[398][1] = LargeX[398][0]>0 ? 1 : 0;
	satisfiable[398][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit398_1[i][0] ][ unit398_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit398_1[i][2] ][ unit398_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit398_1[i][4] ][ unit398_1[i][5] ] >0);
		X_contra = ( LargeX[398][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit398_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[398][0]=0; L[398][1]=1;}
			satisfiable[398][1]=satisfiable[398][1] & ((x[398] ^ 1) | (x[ unit398_1[i][0] ] ^ unit398_1[i][1]) |(x[ unit398_1[i][2] ] ^ unit398_1[i][3]));
			}
		if(X_contra>0) L[398][1]=2;
		}
	//Check all rules of unit[399][0]
	L[399][0] = LargeX[399][1]>0 ? 1 : 0;
	satisfiable[399][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit399_0[i][0] ][ unit399_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit399_0[i][2] ][ unit399_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit399_0[i][4] ][ unit399_0[i][5] ] >0);
		X_contra = ( LargeX[399][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit399_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[399][1]=0; L[399][0]=1;}
			satisfiable[399][0]=satisfiable[399][0] & ((x[399] ^ 0) | (x[ unit399_0[i][0] ] ^ unit399_0[i][1]) |(x[ unit399_0[i][2] ] ^ unit399_0[i][3]));
			}
		if(X_contra>0) L[399][0]=2;
		}
	//Check all rules of unit[399][1]
	L[399][1] = LargeX[399][0]>0 ? 1 : 0;
	satisfiable[399][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit399_1[i][0] ][ unit399_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit399_1[i][2] ][ unit399_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit399_1[i][4] ][ unit399_1[i][5] ] >0);
		X_contra = ( LargeX[399][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit399_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[399][0]=0; L[399][1]=1;}
			satisfiable[399][1]=satisfiable[399][1] & ((x[399] ^ 1) | (x[ unit399_1[i][0] ] ^ unit399_1[i][1]) |(x[ unit399_1[i][2] ] ^ unit399_1[i][3]));
			}
		if(X_contra>0) L[399][1]=2;
		}
	//Check all rules of unit[400][0]
	L[400][0] = LargeX[400][1]>0 ? 1 : 0;
	satisfiable[400][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit400_0[i][0] ][ unit400_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit400_0[i][2] ][ unit400_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit400_0[i][4] ][ unit400_0[i][5] ] >0);
		X_contra = ( LargeX[400][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit400_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[400][1]=0; L[400][0]=1;}
			satisfiable[400][0]=satisfiable[400][0] & ((x[400] ^ 0) | (x[ unit400_0[i][0] ] ^ unit400_0[i][1]) |(x[ unit400_0[i][2] ] ^ unit400_0[i][3]));
			}
		if(X_contra>0) L[400][0]=2;
		}
	//Check all rules of unit[400][1]
	L[400][1] = LargeX[400][0]>0 ? 1 : 0;
	satisfiable[400][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit400_1[i][0] ][ unit400_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit400_1[i][2] ][ unit400_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit400_1[i][4] ][ unit400_1[i][5] ] >0);
		X_contra = ( LargeX[400][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit400_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[400][0]=0; L[400][1]=1;}
			satisfiable[400][1]=satisfiable[400][1] & ((x[400] ^ 1) | (x[ unit400_1[i][0] ] ^ unit400_1[i][1]) |(x[ unit400_1[i][2] ] ^ unit400_1[i][3]));
			}
		if(X_contra>0) L[400][1]=2;
		}
	//Check all rules of unit[401][0]
	L[401][0] = LargeX[401][1]>0 ? 1 : 0;
	satisfiable[401][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit401_0[i][0] ][ unit401_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit401_0[i][2] ][ unit401_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit401_0[i][4] ][ unit401_0[i][5] ] >0);
		X_contra = ( LargeX[401][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit401_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[401][1]=0; L[401][0]=1;}
			satisfiable[401][0]=satisfiable[401][0] & ((x[401] ^ 0) | (x[ unit401_0[i][0] ] ^ unit401_0[i][1]) |(x[ unit401_0[i][2] ] ^ unit401_0[i][3]));
			}
		if(X_contra>0) L[401][0]=2;
		}
	//Check all rules of unit[401][1]
	L[401][1] = LargeX[401][0]>0 ? 1 : 0;
	satisfiable[401][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit401_1[i][0] ][ unit401_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit401_1[i][2] ][ unit401_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit401_1[i][4] ][ unit401_1[i][5] ] >0);
		X_contra = ( LargeX[401][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit401_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[401][0]=0; L[401][1]=1;}
			satisfiable[401][1]=satisfiable[401][1] & ((x[401] ^ 1) | (x[ unit401_1[i][0] ] ^ unit401_1[i][1]) |(x[ unit401_1[i][2] ] ^ unit401_1[i][3]));
			}
		if(X_contra>0) L[401][1]=2;
		}
	//Check all rules of unit[402][0]
	L[402][0] = LargeX[402][1]>0 ? 1 : 0;
	satisfiable[402][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit402_0[i][0] ][ unit402_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit402_0[i][2] ][ unit402_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit402_0[i][4] ][ unit402_0[i][5] ] >0);
		X_contra = ( LargeX[402][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit402_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[402][1]=0; L[402][0]=1;}
			satisfiable[402][0]=satisfiable[402][0] & ((x[402] ^ 0) | (x[ unit402_0[i][0] ] ^ unit402_0[i][1]) |(x[ unit402_0[i][2] ] ^ unit402_0[i][3]));
			}
		if(X_contra>0) L[402][0]=2;
		}
	//Check all rules of unit[402][1]
	L[402][1] = LargeX[402][0]>0 ? 1 : 0;
	satisfiable[402][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit402_1[i][0] ][ unit402_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit402_1[i][2] ][ unit402_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit402_1[i][4] ][ unit402_1[i][5] ] >0);
		X_contra = ( LargeX[402][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit402_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[402][0]=0; L[402][1]=1;}
			satisfiable[402][1]=satisfiable[402][1] & ((x[402] ^ 1) | (x[ unit402_1[i][0] ] ^ unit402_1[i][1]) |(x[ unit402_1[i][2] ] ^ unit402_1[i][3]));
			}
		if(X_contra>0) L[402][1]=2;
		}
	//Check all rules of unit[403][0]
	L[403][0] = LargeX[403][1]>0 ? 1 : 0;
	satisfiable[403][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit403_0[i][0] ][ unit403_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit403_0[i][2] ][ unit403_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit403_0[i][4] ][ unit403_0[i][5] ] >0);
		X_contra = ( LargeX[403][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit403_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[403][1]=0; L[403][0]=1;}
			satisfiable[403][0]=satisfiable[403][0] & ((x[403] ^ 0) | (x[ unit403_0[i][0] ] ^ unit403_0[i][1]) |(x[ unit403_0[i][2] ] ^ unit403_0[i][3]));
			}
		if(X_contra>0) L[403][0]=2;
		}
	//Check all rules of unit[403][1]
	L[403][1] = LargeX[403][0]>0 ? 1 : 0;
	satisfiable[403][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit403_1[i][0] ][ unit403_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit403_1[i][2] ][ unit403_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit403_1[i][4] ][ unit403_1[i][5] ] >0);
		X_contra = ( LargeX[403][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit403_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[403][0]=0; L[403][1]=1;}
			satisfiable[403][1]=satisfiable[403][1] & ((x[403] ^ 1) | (x[ unit403_1[i][0] ] ^ unit403_1[i][1]) |(x[ unit403_1[i][2] ] ^ unit403_1[i][3]));
			}
		if(X_contra>0) L[403][1]=2;
		}
	//Check all rules of unit[404][0]
	L[404][0] = LargeX[404][1]>0 ? 1 : 0;
	satisfiable[404][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit404_0[i][0] ][ unit404_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit404_0[i][2] ][ unit404_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit404_0[i][4] ][ unit404_0[i][5] ] >0);
		X_contra = ( LargeX[404][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit404_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[404][1]=0; L[404][0]=1;}
			satisfiable[404][0]=satisfiable[404][0] & ((x[404] ^ 0) | (x[ unit404_0[i][0] ] ^ unit404_0[i][1]) |(x[ unit404_0[i][2] ] ^ unit404_0[i][3]));
			}
		if(X_contra>0) L[404][0]=2;
		}
	//Check all rules of unit[404][1]
	L[404][1] = LargeX[404][0]>0 ? 1 : 0;
	satisfiable[404][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit404_1[i][0] ][ unit404_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit404_1[i][2] ][ unit404_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit404_1[i][4] ][ unit404_1[i][5] ] >0);
		X_contra = ( LargeX[404][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit404_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[404][0]=0; L[404][1]=1;}
			satisfiable[404][1]=satisfiable[404][1] & ((x[404] ^ 1) | (x[ unit404_1[i][0] ] ^ unit404_1[i][1]) |(x[ unit404_1[i][2] ] ^ unit404_1[i][3]));
			}
		if(X_contra>0) L[404][1]=2;
		}
	//Check all rules of unit[405][0]
	L[405][0] = LargeX[405][1]>0 ? 1 : 0;
	satisfiable[405][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit405_0[i][0] ][ unit405_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit405_0[i][2] ][ unit405_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit405_0[i][4] ][ unit405_0[i][5] ] >0);
		X_contra = ( LargeX[405][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit405_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[405][1]=0; L[405][0]=1;}
			satisfiable[405][0]=satisfiable[405][0] & ((x[405] ^ 0) | (x[ unit405_0[i][0] ] ^ unit405_0[i][1]) |(x[ unit405_0[i][2] ] ^ unit405_0[i][3]));
			}
		if(X_contra>0) L[405][0]=2;
		}
	//Check all rules of unit[405][1]
	L[405][1] = LargeX[405][0]>0 ? 1 : 0;
	satisfiable[405][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit405_1[i][0] ][ unit405_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit405_1[i][2] ][ unit405_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit405_1[i][4] ][ unit405_1[i][5] ] >0);
		X_contra = ( LargeX[405][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit405_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[405][0]=0; L[405][1]=1;}
			satisfiable[405][1]=satisfiable[405][1] & ((x[405] ^ 1) | (x[ unit405_1[i][0] ] ^ unit405_1[i][1]) |(x[ unit405_1[i][2] ] ^ unit405_1[i][3]));
			}
		if(X_contra>0) L[405][1]=2;
		}
	//Check all rules of unit[406][0]
	L[406][0] = LargeX[406][1]>0 ? 1 : 0;
	satisfiable[406][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit406_0[i][0] ][ unit406_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit406_0[i][2] ][ unit406_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit406_0[i][4] ][ unit406_0[i][5] ] >0);
		X_contra = ( LargeX[406][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit406_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[406][1]=0; L[406][0]=1;}
			satisfiable[406][0]=satisfiable[406][0] & ((x[406] ^ 0) | (x[ unit406_0[i][0] ] ^ unit406_0[i][1]) |(x[ unit406_0[i][2] ] ^ unit406_0[i][3]));
			}
		if(X_contra>0) L[406][0]=2;
		}
	//Check all rules of unit[406][1]
	L[406][1] = LargeX[406][0]>0 ? 1 : 0;
	satisfiable[406][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit406_1[i][0] ][ unit406_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit406_1[i][2] ][ unit406_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit406_1[i][4] ][ unit406_1[i][5] ] >0);
		X_contra = ( LargeX[406][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit406_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[406][0]=0; L[406][1]=1;}
			satisfiable[406][1]=satisfiable[406][1] & ((x[406] ^ 1) | (x[ unit406_1[i][0] ] ^ unit406_1[i][1]) |(x[ unit406_1[i][2] ] ^ unit406_1[i][3]));
			}
		if(X_contra>0) L[406][1]=2;
		}
	//Check all rules of unit[407][0]
	L[407][0] = LargeX[407][1]>0 ? 1 : 0;
	satisfiable[407][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit407_0[i][0] ][ unit407_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit407_0[i][2] ][ unit407_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit407_0[i][4] ][ unit407_0[i][5] ] >0);
		X_contra = ( LargeX[407][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit407_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[407][1]=0; L[407][0]=1;}
			satisfiable[407][0]=satisfiable[407][0] & ((x[407] ^ 0) | (x[ unit407_0[i][0] ] ^ unit407_0[i][1]) |(x[ unit407_0[i][2] ] ^ unit407_0[i][3]));
			}
		if(X_contra>0) L[407][0]=2;
		}
	//Check all rules of unit[407][1]
	L[407][1] = LargeX[407][0]>0 ? 1 : 0;
	satisfiable[407][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit407_1[i][0] ][ unit407_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit407_1[i][2] ][ unit407_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit407_1[i][4] ][ unit407_1[i][5] ] >0);
		X_contra = ( LargeX[407][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit407_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[407][0]=0; L[407][1]=1;}
			satisfiable[407][1]=satisfiable[407][1] & ((x[407] ^ 1) | (x[ unit407_1[i][0] ] ^ unit407_1[i][1]) |(x[ unit407_1[i][2] ] ^ unit407_1[i][3]));
			}
		if(X_contra>0) L[407][1]=2;
		}
	//Check all rules of unit[408][0]
	L[408][0] = LargeX[408][1]>0 ? 1 : 0;
	satisfiable[408][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit408_0[i][0] ][ unit408_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit408_0[i][2] ][ unit408_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit408_0[i][4] ][ unit408_0[i][5] ] >0);
		X_contra = ( LargeX[408][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit408_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[408][1]=0; L[408][0]=1;}
			satisfiable[408][0]=satisfiable[408][0] & ((x[408] ^ 0) | (x[ unit408_0[i][0] ] ^ unit408_0[i][1]) |(x[ unit408_0[i][2] ] ^ unit408_0[i][3]));
			}
		if(X_contra>0) L[408][0]=2;
		}
	//Check all rules of unit[408][1]
	L[408][1] = LargeX[408][0]>0 ? 1 : 0;
	satisfiable[408][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit408_1[i][0] ][ unit408_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit408_1[i][2] ][ unit408_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit408_1[i][4] ][ unit408_1[i][5] ] >0);
		X_contra = ( LargeX[408][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit408_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[408][0]=0; L[408][1]=1;}
			satisfiable[408][1]=satisfiable[408][1] & ((x[408] ^ 1) | (x[ unit408_1[i][0] ] ^ unit408_1[i][1]) |(x[ unit408_1[i][2] ] ^ unit408_1[i][3]));
			}
		if(X_contra>0) L[408][1]=2;
		}
	//Check all rules of unit[409][0]
	L[409][0] = LargeX[409][1]>0 ? 1 : 0;
	satisfiable[409][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit409_0[i][0] ][ unit409_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit409_0[i][2] ][ unit409_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit409_0[i][4] ][ unit409_0[i][5] ] >0);
		X_contra = ( LargeX[409][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit409_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[409][1]=0; L[409][0]=1;}
			satisfiable[409][0]=satisfiable[409][0] & ((x[409] ^ 0) | (x[ unit409_0[i][0] ] ^ unit409_0[i][1]) |(x[ unit409_0[i][2] ] ^ unit409_0[i][3]));
			}
		if(X_contra>0) L[409][0]=2;
		}
	//Check all rules of unit[409][1]
	L[409][1] = LargeX[409][0]>0 ? 1 : 0;
	satisfiable[409][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit409_1[i][0] ][ unit409_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit409_1[i][2] ][ unit409_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit409_1[i][4] ][ unit409_1[i][5] ] >0);
		X_contra = ( LargeX[409][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit409_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[409][0]=0; L[409][1]=1;}
			satisfiable[409][1]=satisfiable[409][1] & ((x[409] ^ 1) | (x[ unit409_1[i][0] ] ^ unit409_1[i][1]) |(x[ unit409_1[i][2] ] ^ unit409_1[i][3]));
			}
		if(X_contra>0) L[409][1]=2;
		}
	//Check all rules of unit[410][0]
	L[410][0] = LargeX[410][1]>0 ? 1 : 0;
	satisfiable[410][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit410_0[i][0] ][ unit410_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit410_0[i][2] ][ unit410_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit410_0[i][4] ][ unit410_0[i][5] ] >0);
		X_contra = ( LargeX[410][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit410_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[410][1]=0; L[410][0]=1;}
			satisfiable[410][0]=satisfiable[410][0] & ((x[410] ^ 0) | (x[ unit410_0[i][0] ] ^ unit410_0[i][1]) |(x[ unit410_0[i][2] ] ^ unit410_0[i][3]));
			}
		if(X_contra>0) L[410][0]=2;
		}
	//Check all rules of unit[410][1]
	L[410][1] = LargeX[410][0]>0 ? 1 : 0;
	satisfiable[410][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit410_1[i][0] ][ unit410_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit410_1[i][2] ][ unit410_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit410_1[i][4] ][ unit410_1[i][5] ] >0);
		X_contra = ( LargeX[410][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit410_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[410][0]=0; L[410][1]=1;}
			satisfiable[410][1]=satisfiable[410][1] & ((x[410] ^ 1) | (x[ unit410_1[i][0] ] ^ unit410_1[i][1]) |(x[ unit410_1[i][2] ] ^ unit410_1[i][3]));
			}
		if(X_contra>0) L[410][1]=2;
		}
	//Check all rules of unit[411][0]
	L[411][0] = LargeX[411][1]>0 ? 1 : 0;
	satisfiable[411][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit411_0[i][0] ][ unit411_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit411_0[i][2] ][ unit411_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit411_0[i][4] ][ unit411_0[i][5] ] >0);
		X_contra = ( LargeX[411][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit411_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[411][1]=0; L[411][0]=1;}
			satisfiable[411][0]=satisfiable[411][0] & ((x[411] ^ 0) | (x[ unit411_0[i][0] ] ^ unit411_0[i][1]) |(x[ unit411_0[i][2] ] ^ unit411_0[i][3]));
			}
		if(X_contra>0) L[411][0]=2;
		}
	//Check all rules of unit[411][1]
	L[411][1] = LargeX[411][0]>0 ? 1 : 0;
	satisfiable[411][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit411_1[i][0] ][ unit411_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit411_1[i][2] ][ unit411_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit411_1[i][4] ][ unit411_1[i][5] ] >0);
		X_contra = ( LargeX[411][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit411_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[411][0]=0; L[411][1]=1;}
			satisfiable[411][1]=satisfiable[411][1] & ((x[411] ^ 1) | (x[ unit411_1[i][0] ] ^ unit411_1[i][1]) |(x[ unit411_1[i][2] ] ^ unit411_1[i][3]));
			}
		if(X_contra>0) L[411][1]=2;
		}
	//Check all rules of unit[412][0]
	L[412][0] = LargeX[412][1]>0 ? 1 : 0;
	satisfiable[412][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit412_0[i][0] ][ unit412_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit412_0[i][2] ][ unit412_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit412_0[i][4] ][ unit412_0[i][5] ] >0);
		X_contra = ( LargeX[412][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit412_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[412][1]=0; L[412][0]=1;}
			satisfiable[412][0]=satisfiable[412][0] & ((x[412] ^ 0) | (x[ unit412_0[i][0] ] ^ unit412_0[i][1]) |(x[ unit412_0[i][2] ] ^ unit412_0[i][3]));
			}
		if(X_contra>0) L[412][0]=2;
		}
	//Check all rules of unit[412][1]
	L[412][1] = LargeX[412][0]>0 ? 1 : 0;
	satisfiable[412][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit412_1[i][0] ][ unit412_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit412_1[i][2] ][ unit412_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit412_1[i][4] ][ unit412_1[i][5] ] >0);
		X_contra = ( LargeX[412][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit412_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[412][0]=0; L[412][1]=1;}
			satisfiable[412][1]=satisfiable[412][1] & ((x[412] ^ 1) | (x[ unit412_1[i][0] ] ^ unit412_1[i][1]) |(x[ unit412_1[i][2] ] ^ unit412_1[i][3]));
			}
		if(X_contra>0) L[412][1]=2;
		}
	//Check all rules of unit[413][0]
	L[413][0] = LargeX[413][1]>0 ? 1 : 0;
	satisfiable[413][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit413_0[i][0] ][ unit413_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit413_0[i][2] ][ unit413_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit413_0[i][4] ][ unit413_0[i][5] ] >0);
		X_contra = ( LargeX[413][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit413_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[413][1]=0; L[413][0]=1;}
			satisfiable[413][0]=satisfiable[413][0] & ((x[413] ^ 0) | (x[ unit413_0[i][0] ] ^ unit413_0[i][1]) |(x[ unit413_0[i][2] ] ^ unit413_0[i][3]));
			}
		if(X_contra>0) L[413][0]=2;
		}
	//Check all rules of unit[413][1]
	L[413][1] = LargeX[413][0]>0 ? 1 : 0;
	satisfiable[413][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit413_1[i][0] ][ unit413_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit413_1[i][2] ][ unit413_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit413_1[i][4] ][ unit413_1[i][5] ] >0);
		X_contra = ( LargeX[413][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit413_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[413][0]=0; L[413][1]=1;}
			satisfiable[413][1]=satisfiable[413][1] & ((x[413] ^ 1) | (x[ unit413_1[i][0] ] ^ unit413_1[i][1]) |(x[ unit413_1[i][2] ] ^ unit413_1[i][3]));
			}
		if(X_contra>0) L[413][1]=2;
		}
	//Check all rules of unit[414][0]
	L[414][0] = LargeX[414][1]>0 ? 1 : 0;
	satisfiable[414][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit414_0[i][0] ][ unit414_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit414_0[i][2] ][ unit414_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit414_0[i][4] ][ unit414_0[i][5] ] >0);
		X_contra = ( LargeX[414][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit414_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[414][1]=0; L[414][0]=1;}
			satisfiable[414][0]=satisfiable[414][0] & ((x[414] ^ 0) | (x[ unit414_0[i][0] ] ^ unit414_0[i][1]) |(x[ unit414_0[i][2] ] ^ unit414_0[i][3]));
			}
		if(X_contra>0) L[414][0]=2;
		}
	//Check all rules of unit[414][1]
	L[414][1] = LargeX[414][0]>0 ? 1 : 0;
	satisfiable[414][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit414_1[i][0] ][ unit414_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit414_1[i][2] ][ unit414_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit414_1[i][4] ][ unit414_1[i][5] ] >0);
		X_contra = ( LargeX[414][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit414_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[414][0]=0; L[414][1]=1;}
			satisfiable[414][1]=satisfiable[414][1] & ((x[414] ^ 1) | (x[ unit414_1[i][0] ] ^ unit414_1[i][1]) |(x[ unit414_1[i][2] ] ^ unit414_1[i][3]));
			}
		if(X_contra>0) L[414][1]=2;
		}
	//Check all rules of unit[415][0]
	L[415][0] = LargeX[415][1]>0 ? 1 : 0;
	satisfiable[415][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit415_0[i][0] ][ unit415_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit415_0[i][2] ][ unit415_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit415_0[i][4] ][ unit415_0[i][5] ] >0);
		X_contra = ( LargeX[415][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit415_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[415][1]=0; L[415][0]=1;}
			satisfiable[415][0]=satisfiable[415][0] & ((x[415] ^ 0) | (x[ unit415_0[i][0] ] ^ unit415_0[i][1]) |(x[ unit415_0[i][2] ] ^ unit415_0[i][3]));
			}
		if(X_contra>0) L[415][0]=2;
		}
	//Check all rules of unit[415][1]
	L[415][1] = LargeX[415][0]>0 ? 1 : 0;
	satisfiable[415][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit415_1[i][0] ][ unit415_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit415_1[i][2] ][ unit415_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit415_1[i][4] ][ unit415_1[i][5] ] >0);
		X_contra = ( LargeX[415][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit415_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[415][0]=0; L[415][1]=1;}
			satisfiable[415][1]=satisfiable[415][1] & ((x[415] ^ 1) | (x[ unit415_1[i][0] ] ^ unit415_1[i][1]) |(x[ unit415_1[i][2] ] ^ unit415_1[i][3]));
			}
		if(X_contra>0) L[415][1]=2;
		}
	//Check all rules of unit[416][0]
	L[416][0] = LargeX[416][1]>0 ? 1 : 0;
	satisfiable[416][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit416_0[i][0] ][ unit416_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit416_0[i][2] ][ unit416_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit416_0[i][4] ][ unit416_0[i][5] ] >0);
		X_contra = ( LargeX[416][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit416_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[416][1]=0; L[416][0]=1;}
			satisfiable[416][0]=satisfiable[416][0] & ((x[416] ^ 0) | (x[ unit416_0[i][0] ] ^ unit416_0[i][1]) |(x[ unit416_0[i][2] ] ^ unit416_0[i][3]));
			}
		if(X_contra>0) L[416][0]=2;
		}
	//Check all rules of unit[416][1]
	L[416][1] = LargeX[416][0]>0 ? 1 : 0;
	satisfiable[416][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit416_1[i][0] ][ unit416_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit416_1[i][2] ][ unit416_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit416_1[i][4] ][ unit416_1[i][5] ] >0);
		X_contra = ( LargeX[416][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit416_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[416][0]=0; L[416][1]=1;}
			satisfiable[416][1]=satisfiable[416][1] & ((x[416] ^ 1) | (x[ unit416_1[i][0] ] ^ unit416_1[i][1]) |(x[ unit416_1[i][2] ] ^ unit416_1[i][3]));
			}
		if(X_contra>0) L[416][1]=2;
		}
	//Check all rules of unit[417][0]
	L[417][0] = LargeX[417][1]>0 ? 1 : 0;
	satisfiable[417][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit417_0[i][0] ][ unit417_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit417_0[i][2] ][ unit417_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit417_0[i][4] ][ unit417_0[i][5] ] >0);
		X_contra = ( LargeX[417][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit417_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[417][1]=0; L[417][0]=1;}
			satisfiable[417][0]=satisfiable[417][0] & ((x[417] ^ 0) | (x[ unit417_0[i][0] ] ^ unit417_0[i][1]) |(x[ unit417_0[i][2] ] ^ unit417_0[i][3]));
			}
		if(X_contra>0) L[417][0]=2;
		}
	//Check all rules of unit[417][1]
	L[417][1] = LargeX[417][0]>0 ? 1 : 0;
	satisfiable[417][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit417_1[i][0] ][ unit417_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit417_1[i][2] ][ unit417_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit417_1[i][4] ][ unit417_1[i][5] ] >0);
		X_contra = ( LargeX[417][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit417_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[417][0]=0; L[417][1]=1;}
			satisfiable[417][1]=satisfiable[417][1] & ((x[417] ^ 1) | (x[ unit417_1[i][0] ] ^ unit417_1[i][1]) |(x[ unit417_1[i][2] ] ^ unit417_1[i][3]));
			}
		if(X_contra>0) L[417][1]=2;
		}
	//Check all rules of unit[418][0]
	L[418][0] = LargeX[418][1]>0 ? 1 : 0;
	satisfiable[418][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit418_0[i][0] ][ unit418_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit418_0[i][2] ][ unit418_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit418_0[i][4] ][ unit418_0[i][5] ] >0);
		X_contra = ( LargeX[418][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit418_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[418][1]=0; L[418][0]=1;}
			satisfiable[418][0]=satisfiable[418][0] & ((x[418] ^ 0) | (x[ unit418_0[i][0] ] ^ unit418_0[i][1]) |(x[ unit418_0[i][2] ] ^ unit418_0[i][3]));
			}
		if(X_contra>0) L[418][0]=2;
		}
	//Check all rules of unit[418][1]
	L[418][1] = LargeX[418][0]>0 ? 1 : 0;
	satisfiable[418][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit418_1[i][0] ][ unit418_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit418_1[i][2] ][ unit418_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit418_1[i][4] ][ unit418_1[i][5] ] >0);
		X_contra = ( LargeX[418][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit418_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[418][0]=0; L[418][1]=1;}
			satisfiable[418][1]=satisfiable[418][1] & ((x[418] ^ 1) | (x[ unit418_1[i][0] ] ^ unit418_1[i][1]) |(x[ unit418_1[i][2] ] ^ unit418_1[i][3]));
			}
		if(X_contra>0) L[418][1]=2;
		}
	//Check all rules of unit[419][0]
	L[419][0] = LargeX[419][1]>0 ? 1 : 0;
	satisfiable[419][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit419_0[i][0] ][ unit419_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit419_0[i][2] ][ unit419_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit419_0[i][4] ][ unit419_0[i][5] ] >0);
		X_contra = ( LargeX[419][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit419_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[419][1]=0; L[419][0]=1;}
			satisfiable[419][0]=satisfiable[419][0] & ((x[419] ^ 0) | (x[ unit419_0[i][0] ] ^ unit419_0[i][1]) |(x[ unit419_0[i][2] ] ^ unit419_0[i][3]));
			}
		if(X_contra>0) L[419][0]=2;
		}
	//Check all rules of unit[419][1]
	L[419][1] = LargeX[419][0]>0 ? 1 : 0;
	satisfiable[419][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit419_1[i][0] ][ unit419_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit419_1[i][2] ][ unit419_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit419_1[i][4] ][ unit419_1[i][5] ] >0);
		X_contra = ( LargeX[419][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit419_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[419][0]=0; L[419][1]=1;}
			satisfiable[419][1]=satisfiable[419][1] & ((x[419] ^ 1) | (x[ unit419_1[i][0] ] ^ unit419_1[i][1]) |(x[ unit419_1[i][2] ] ^ unit419_1[i][3]));
			}
		if(X_contra>0) L[419][1]=2;
		}
	//Check all rules of unit[420][0]
	L[420][0] = LargeX[420][1]>0 ? 1 : 0;
	satisfiable[420][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit420_0[i][0] ][ unit420_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit420_0[i][2] ][ unit420_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit420_0[i][4] ][ unit420_0[i][5] ] >0);
		X_contra = ( LargeX[420][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit420_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[420][1]=0; L[420][0]=1;}
			satisfiable[420][0]=satisfiable[420][0] & ((x[420] ^ 0) | (x[ unit420_0[i][0] ] ^ unit420_0[i][1]) |(x[ unit420_0[i][2] ] ^ unit420_0[i][3]));
			}
		if(X_contra>0) L[420][0]=2;
		}
	//Check all rules of unit[420][1]
	L[420][1] = LargeX[420][0]>0 ? 1 : 0;
	satisfiable[420][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit420_1[i][0] ][ unit420_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit420_1[i][2] ][ unit420_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit420_1[i][4] ][ unit420_1[i][5] ] >0);
		X_contra = ( LargeX[420][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit420_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[420][0]=0; L[420][1]=1;}
			satisfiable[420][1]=satisfiable[420][1] & ((x[420] ^ 1) | (x[ unit420_1[i][0] ] ^ unit420_1[i][1]) |(x[ unit420_1[i][2] ] ^ unit420_1[i][3]));
			}
		if(X_contra>0) L[420][1]=2;
		}
	//Check all rules of unit[421][0]
	L[421][0] = LargeX[421][1]>0 ? 1 : 0;
	satisfiable[421][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit421_0[i][0] ][ unit421_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit421_0[i][2] ][ unit421_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit421_0[i][4] ][ unit421_0[i][5] ] >0);
		X_contra = ( LargeX[421][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit421_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[421][1]=0; L[421][0]=1;}
			satisfiable[421][0]=satisfiable[421][0] & ((x[421] ^ 0) | (x[ unit421_0[i][0] ] ^ unit421_0[i][1]) |(x[ unit421_0[i][2] ] ^ unit421_0[i][3]));
			}
		if(X_contra>0) L[421][0]=2;
		}
	//Check all rules of unit[421][1]
	L[421][1] = LargeX[421][0]>0 ? 1 : 0;
	satisfiable[421][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit421_1[i][0] ][ unit421_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit421_1[i][2] ][ unit421_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit421_1[i][4] ][ unit421_1[i][5] ] >0);
		X_contra = ( LargeX[421][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit421_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[421][0]=0; L[421][1]=1;}
			satisfiable[421][1]=satisfiable[421][1] & ((x[421] ^ 1) | (x[ unit421_1[i][0] ] ^ unit421_1[i][1]) |(x[ unit421_1[i][2] ] ^ unit421_1[i][3]));
			}
		if(X_contra>0) L[421][1]=2;
		}
	//Check all rules of unit[422][0]
	L[422][0] = LargeX[422][1]>0 ? 1 : 0;
	satisfiable[422][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit422_0[i][0] ][ unit422_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit422_0[i][2] ][ unit422_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit422_0[i][4] ][ unit422_0[i][5] ] >0);
		X_contra = ( LargeX[422][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit422_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[422][1]=0; L[422][0]=1;}
			satisfiable[422][0]=satisfiable[422][0] & ((x[422] ^ 0) | (x[ unit422_0[i][0] ] ^ unit422_0[i][1]) |(x[ unit422_0[i][2] ] ^ unit422_0[i][3]));
			}
		if(X_contra>0) L[422][0]=2;
		}
	//Check all rules of unit[422][1]
	L[422][1] = LargeX[422][0]>0 ? 1 : 0;
	satisfiable[422][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit422_1[i][0] ][ unit422_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit422_1[i][2] ][ unit422_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit422_1[i][4] ][ unit422_1[i][5] ] >0);
		X_contra = ( LargeX[422][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit422_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[422][0]=0; L[422][1]=1;}
			satisfiable[422][1]=satisfiable[422][1] & ((x[422] ^ 1) | (x[ unit422_1[i][0] ] ^ unit422_1[i][1]) |(x[ unit422_1[i][2] ] ^ unit422_1[i][3]));
			}
		if(X_contra>0) L[422][1]=2;
		}
	//Check all rules of unit[423][0]
	L[423][0] = LargeX[423][1]>0 ? 1 : 0;
	satisfiable[423][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit423_0[i][0] ][ unit423_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit423_0[i][2] ][ unit423_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit423_0[i][4] ][ unit423_0[i][5] ] >0);
		X_contra = ( LargeX[423][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit423_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[423][1]=0; L[423][0]=1;}
			satisfiable[423][0]=satisfiable[423][0] & ((x[423] ^ 0) | (x[ unit423_0[i][0] ] ^ unit423_0[i][1]) |(x[ unit423_0[i][2] ] ^ unit423_0[i][3]));
			}
		if(X_contra>0) L[423][0]=2;
		}
	//Check all rules of unit[423][1]
	L[423][1] = LargeX[423][0]>0 ? 1 : 0;
	satisfiable[423][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit423_1[i][0] ][ unit423_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit423_1[i][2] ][ unit423_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit423_1[i][4] ][ unit423_1[i][5] ] >0);
		X_contra = ( LargeX[423][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit423_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[423][0]=0; L[423][1]=1;}
			satisfiable[423][1]=satisfiable[423][1] & ((x[423] ^ 1) | (x[ unit423_1[i][0] ] ^ unit423_1[i][1]) |(x[ unit423_1[i][2] ] ^ unit423_1[i][3]));
			}
		if(X_contra>0) L[423][1]=2;
		}
	//Check all rules of unit[424][0]
	L[424][0] = LargeX[424][1]>0 ? 1 : 0;
	satisfiable[424][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit424_0[i][0] ][ unit424_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit424_0[i][2] ][ unit424_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit424_0[i][4] ][ unit424_0[i][5] ] >0);
		X_contra = ( LargeX[424][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit424_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[424][1]=0; L[424][0]=1;}
			satisfiable[424][0]=satisfiable[424][0] & ((x[424] ^ 0) | (x[ unit424_0[i][0] ] ^ unit424_0[i][1]) |(x[ unit424_0[i][2] ] ^ unit424_0[i][3]));
			}
		if(X_contra>0) L[424][0]=2;
		}
	//Check all rules of unit[424][1]
	L[424][1] = LargeX[424][0]>0 ? 1 : 0;
	satisfiable[424][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit424_1[i][0] ][ unit424_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit424_1[i][2] ][ unit424_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit424_1[i][4] ][ unit424_1[i][5] ] >0);
		X_contra = ( LargeX[424][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit424_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[424][0]=0; L[424][1]=1;}
			satisfiable[424][1]=satisfiable[424][1] & ((x[424] ^ 1) | (x[ unit424_1[i][0] ] ^ unit424_1[i][1]) |(x[ unit424_1[i][2] ] ^ unit424_1[i][3]));
			}
		if(X_contra>0) L[424][1]=2;
		}
	//Check all rules of unit[425][0]
	L[425][0] = LargeX[425][1]>0 ? 1 : 0;
	satisfiable[425][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit425_0[i][0] ][ unit425_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit425_0[i][2] ][ unit425_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit425_0[i][4] ][ unit425_0[i][5] ] >0);
		X_contra = ( LargeX[425][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit425_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[425][1]=0; L[425][0]=1;}
			satisfiable[425][0]=satisfiable[425][0] & ((x[425] ^ 0) | (x[ unit425_0[i][0] ] ^ unit425_0[i][1]) |(x[ unit425_0[i][2] ] ^ unit425_0[i][3]));
			}
		if(X_contra>0) L[425][0]=2;
		}
	//Check all rules of unit[425][1]
	L[425][1] = LargeX[425][0]>0 ? 1 : 0;
	satisfiable[425][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit425_1[i][0] ][ unit425_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit425_1[i][2] ][ unit425_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit425_1[i][4] ][ unit425_1[i][5] ] >0);
		X_contra = ( LargeX[425][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit425_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[425][0]=0; L[425][1]=1;}
			satisfiable[425][1]=satisfiable[425][1] & ((x[425] ^ 1) | (x[ unit425_1[i][0] ] ^ unit425_1[i][1]) |(x[ unit425_1[i][2] ] ^ unit425_1[i][3]));
			}
		if(X_contra>0) L[425][1]=2;
		}
	//Check all rules of unit[426][0]
	L[426][0] = LargeX[426][1]>0 ? 1 : 0;
	satisfiable[426][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit426_0[i][0] ][ unit426_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit426_0[i][2] ][ unit426_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit426_0[i][4] ][ unit426_0[i][5] ] >0);
		X_contra = ( LargeX[426][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit426_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[426][1]=0; L[426][0]=1;}
			satisfiable[426][0]=satisfiable[426][0] & ((x[426] ^ 0) | (x[ unit426_0[i][0] ] ^ unit426_0[i][1]) |(x[ unit426_0[i][2] ] ^ unit426_0[i][3]));
			}
		if(X_contra>0) L[426][0]=2;
		}
	//Check all rules of unit[426][1]
	L[426][1] = LargeX[426][0]>0 ? 1 : 0;
	satisfiable[426][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit426_1[i][0] ][ unit426_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit426_1[i][2] ][ unit426_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit426_1[i][4] ][ unit426_1[i][5] ] >0);
		X_contra = ( LargeX[426][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit426_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[426][0]=0; L[426][1]=1;}
			satisfiable[426][1]=satisfiable[426][1] & ((x[426] ^ 1) | (x[ unit426_1[i][0] ] ^ unit426_1[i][1]) |(x[ unit426_1[i][2] ] ^ unit426_1[i][3]));
			}
		if(X_contra>0) L[426][1]=2;
		}
	//Check all rules of unit[427][0]
	L[427][0] = LargeX[427][1]>0 ? 1 : 0;
	satisfiable[427][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit427_0[i][0] ][ unit427_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit427_0[i][2] ][ unit427_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit427_0[i][4] ][ unit427_0[i][5] ] >0);
		X_contra = ( LargeX[427][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit427_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[427][1]=0; L[427][0]=1;}
			satisfiable[427][0]=satisfiable[427][0] & ((x[427] ^ 0) | (x[ unit427_0[i][0] ] ^ unit427_0[i][1]) |(x[ unit427_0[i][2] ] ^ unit427_0[i][3]));
			}
		if(X_contra>0) L[427][0]=2;
		}
	//Check all rules of unit[427][1]
	L[427][1] = LargeX[427][0]>0 ? 1 : 0;
	satisfiable[427][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit427_1[i][0] ][ unit427_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit427_1[i][2] ][ unit427_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit427_1[i][4] ][ unit427_1[i][5] ] >0);
		X_contra = ( LargeX[427][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit427_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[427][0]=0; L[427][1]=1;}
			satisfiable[427][1]=satisfiable[427][1] & ((x[427] ^ 1) | (x[ unit427_1[i][0] ] ^ unit427_1[i][1]) |(x[ unit427_1[i][2] ] ^ unit427_1[i][3]));
			}
		if(X_contra>0) L[427][1]=2;
		}
	//Check all rules of unit[428][0]
	L[428][0] = LargeX[428][1]>0 ? 1 : 0;
	satisfiable[428][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit428_0[i][0] ][ unit428_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit428_0[i][2] ][ unit428_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit428_0[i][4] ][ unit428_0[i][5] ] >0);
		X_contra = ( LargeX[428][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit428_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[428][1]=0; L[428][0]=1;}
			satisfiable[428][0]=satisfiable[428][0] & ((x[428] ^ 0) | (x[ unit428_0[i][0] ] ^ unit428_0[i][1]) |(x[ unit428_0[i][2] ] ^ unit428_0[i][3]));
			}
		if(X_contra>0) L[428][0]=2;
		}
	//Check all rules of unit[428][1]
	L[428][1] = LargeX[428][0]>0 ? 1 : 0;
	satisfiable[428][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit428_1[i][0] ][ unit428_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit428_1[i][2] ][ unit428_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit428_1[i][4] ][ unit428_1[i][5] ] >0);
		X_contra = ( LargeX[428][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit428_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[428][0]=0; L[428][1]=1;}
			satisfiable[428][1]=satisfiable[428][1] & ((x[428] ^ 1) | (x[ unit428_1[i][0] ] ^ unit428_1[i][1]) |(x[ unit428_1[i][2] ] ^ unit428_1[i][3]));
			}
		if(X_contra>0) L[428][1]=2;
		}
	//Check all rules of unit[429][0]
	L[429][0] = LargeX[429][1]>0 ? 1 : 0;
	satisfiable[429][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit429_0[i][0] ][ unit429_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit429_0[i][2] ][ unit429_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit429_0[i][4] ][ unit429_0[i][5] ] >0);
		X_contra = ( LargeX[429][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit429_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[429][1]=0; L[429][0]=1;}
			satisfiable[429][0]=satisfiable[429][0] & ((x[429] ^ 0) | (x[ unit429_0[i][0] ] ^ unit429_0[i][1]) |(x[ unit429_0[i][2] ] ^ unit429_0[i][3]));
			}
		if(X_contra>0) L[429][0]=2;
		}
	//Check all rules of unit[429][1]
	L[429][1] = LargeX[429][0]>0 ? 1 : 0;
	satisfiable[429][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit429_1[i][0] ][ unit429_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit429_1[i][2] ][ unit429_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit429_1[i][4] ][ unit429_1[i][5] ] >0);
		X_contra = ( LargeX[429][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit429_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[429][0]=0; L[429][1]=1;}
			satisfiable[429][1]=satisfiable[429][1] & ((x[429] ^ 1) | (x[ unit429_1[i][0] ] ^ unit429_1[i][1]) |(x[ unit429_1[i][2] ] ^ unit429_1[i][3]));
			}
		if(X_contra>0) L[429][1]=2;
		}
	//Check all rules of unit[430][0]
	L[430][0] = LargeX[430][1]>0 ? 1 : 0;
	satisfiable[430][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit430_0[i][0] ][ unit430_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit430_0[i][2] ][ unit430_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit430_0[i][4] ][ unit430_0[i][5] ] >0);
		X_contra = ( LargeX[430][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit430_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[430][1]=0; L[430][0]=1;}
			satisfiable[430][0]=satisfiable[430][0] & ((x[430] ^ 0) | (x[ unit430_0[i][0] ] ^ unit430_0[i][1]) |(x[ unit430_0[i][2] ] ^ unit430_0[i][3]));
			}
		if(X_contra>0) L[430][0]=2;
		}
	//Check all rules of unit[430][1]
	L[430][1] = LargeX[430][0]>0 ? 1 : 0;
	satisfiable[430][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit430_1[i][0] ][ unit430_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit430_1[i][2] ][ unit430_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit430_1[i][4] ][ unit430_1[i][5] ] >0);
		X_contra = ( LargeX[430][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit430_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[430][0]=0; L[430][1]=1;}
			satisfiable[430][1]=satisfiable[430][1] & ((x[430] ^ 1) | (x[ unit430_1[i][0] ] ^ unit430_1[i][1]) |(x[ unit430_1[i][2] ] ^ unit430_1[i][3]));
			}
		if(X_contra>0) L[430][1]=2;
		}
	//Check all rules of unit[431][0]
	L[431][0] = LargeX[431][1]>0 ? 1 : 0;
	satisfiable[431][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit431_0[i][0] ][ unit431_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit431_0[i][2] ][ unit431_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit431_0[i][4] ][ unit431_0[i][5] ] >0);
		X_contra = ( LargeX[431][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit431_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[431][1]=0; L[431][0]=1;}
			satisfiable[431][0]=satisfiable[431][0] & ((x[431] ^ 0) | (x[ unit431_0[i][0] ] ^ unit431_0[i][1]) |(x[ unit431_0[i][2] ] ^ unit431_0[i][3]));
			}
		if(X_contra>0) L[431][0]=2;
		}
	//Check all rules of unit[431][1]
	L[431][1] = LargeX[431][0]>0 ? 1 : 0;
	satisfiable[431][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit431_1[i][0] ][ unit431_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit431_1[i][2] ][ unit431_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit431_1[i][4] ][ unit431_1[i][5] ] >0);
		X_contra = ( LargeX[431][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit431_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[431][0]=0; L[431][1]=1;}
			satisfiable[431][1]=satisfiable[431][1] & ((x[431] ^ 1) | (x[ unit431_1[i][0] ] ^ unit431_1[i][1]) |(x[ unit431_1[i][2] ] ^ unit431_1[i][3]));
			}
		if(X_contra>0) L[431][1]=2;
		}
	//Check all rules of unit[432][0]
	L[432][0] = LargeX[432][1]>0 ? 1 : 0;
	satisfiable[432][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit432_0[i][0] ][ unit432_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit432_0[i][2] ][ unit432_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit432_0[i][4] ][ unit432_0[i][5] ] >0);
		X_contra = ( LargeX[432][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit432_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[432][1]=0; L[432][0]=1;}
			satisfiable[432][0]=satisfiable[432][0] & ((x[432] ^ 0) | (x[ unit432_0[i][0] ] ^ unit432_0[i][1]) |(x[ unit432_0[i][2] ] ^ unit432_0[i][3]));
			}
		if(X_contra>0) L[432][0]=2;
		}
	//Check all rules of unit[432][1]
	L[432][1] = LargeX[432][0]>0 ? 1 : 0;
	satisfiable[432][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit432_1[i][0] ][ unit432_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit432_1[i][2] ][ unit432_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit432_1[i][4] ][ unit432_1[i][5] ] >0);
		X_contra = ( LargeX[432][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit432_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[432][0]=0; L[432][1]=1;}
			satisfiable[432][1]=satisfiable[432][1] & ((x[432] ^ 1) | (x[ unit432_1[i][0] ] ^ unit432_1[i][1]) |(x[ unit432_1[i][2] ] ^ unit432_1[i][3]));
			}
		if(X_contra>0) L[432][1]=2;
		}
	//Check all rules of unit[433][0]
	L[433][0] = LargeX[433][1]>0 ? 1 : 0;
	satisfiable[433][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit433_0[i][0] ][ unit433_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit433_0[i][2] ][ unit433_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit433_0[i][4] ][ unit433_0[i][5] ] >0);
		X_contra = ( LargeX[433][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit433_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[433][1]=0; L[433][0]=1;}
			satisfiable[433][0]=satisfiable[433][0] & ((x[433] ^ 0) | (x[ unit433_0[i][0] ] ^ unit433_0[i][1]) |(x[ unit433_0[i][2] ] ^ unit433_0[i][3]));
			}
		if(X_contra>0) L[433][0]=2;
		}
	//Check all rules of unit[433][1]
	L[433][1] = LargeX[433][0]>0 ? 1 : 0;
	satisfiable[433][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit433_1[i][0] ][ unit433_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit433_1[i][2] ][ unit433_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit433_1[i][4] ][ unit433_1[i][5] ] >0);
		X_contra = ( LargeX[433][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit433_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[433][0]=0; L[433][1]=1;}
			satisfiable[433][1]=satisfiable[433][1] & ((x[433] ^ 1) | (x[ unit433_1[i][0] ] ^ unit433_1[i][1]) |(x[ unit433_1[i][2] ] ^ unit433_1[i][3]));
			}
		if(X_contra>0) L[433][1]=2;
		}
	//Check all rules of unit[434][0]
	L[434][0] = LargeX[434][1]>0 ? 1 : 0;
	satisfiable[434][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit434_0[i][0] ][ unit434_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit434_0[i][2] ][ unit434_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit434_0[i][4] ][ unit434_0[i][5] ] >0);
		X_contra = ( LargeX[434][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit434_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[434][1]=0; L[434][0]=1;}
			satisfiable[434][0]=satisfiable[434][0] & ((x[434] ^ 0) | (x[ unit434_0[i][0] ] ^ unit434_0[i][1]) |(x[ unit434_0[i][2] ] ^ unit434_0[i][3]));
			}
		if(X_contra>0) L[434][0]=2;
		}
	//Check all rules of unit[434][1]
	L[434][1] = LargeX[434][0]>0 ? 1 : 0;
	satisfiable[434][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit434_1[i][0] ][ unit434_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit434_1[i][2] ][ unit434_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit434_1[i][4] ][ unit434_1[i][5] ] >0);
		X_contra = ( LargeX[434][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit434_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[434][0]=0; L[434][1]=1;}
			satisfiable[434][1]=satisfiable[434][1] & ((x[434] ^ 1) | (x[ unit434_1[i][0] ] ^ unit434_1[i][1]) |(x[ unit434_1[i][2] ] ^ unit434_1[i][3]));
			}
		if(X_contra>0) L[434][1]=2;
		}
	//Check all rules of unit[435][0]
	L[435][0] = LargeX[435][1]>0 ? 1 : 0;
	satisfiable[435][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit435_0[i][0] ][ unit435_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit435_0[i][2] ][ unit435_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit435_0[i][4] ][ unit435_0[i][5] ] >0);
		X_contra = ( LargeX[435][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit435_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[435][1]=0; L[435][0]=1;}
			satisfiable[435][0]=satisfiable[435][0] & ((x[435] ^ 0) | (x[ unit435_0[i][0] ] ^ unit435_0[i][1]) |(x[ unit435_0[i][2] ] ^ unit435_0[i][3]));
			}
		if(X_contra>0) L[435][0]=2;
		}
	//Check all rules of unit[435][1]
	L[435][1] = LargeX[435][0]>0 ? 1 : 0;
	satisfiable[435][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit435_1[i][0] ][ unit435_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit435_1[i][2] ][ unit435_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit435_1[i][4] ][ unit435_1[i][5] ] >0);
		X_contra = ( LargeX[435][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit435_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[435][0]=0; L[435][1]=1;}
			satisfiable[435][1]=satisfiable[435][1] & ((x[435] ^ 1) | (x[ unit435_1[i][0] ] ^ unit435_1[i][1]) |(x[ unit435_1[i][2] ] ^ unit435_1[i][3]));
			}
		if(X_contra>0) L[435][1]=2;
		}
	//Check all rules of unit[436][0]
	L[436][0] = LargeX[436][1]>0 ? 1 : 0;
	satisfiable[436][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit436_0[i][0] ][ unit436_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit436_0[i][2] ][ unit436_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit436_0[i][4] ][ unit436_0[i][5] ] >0);
		X_contra = ( LargeX[436][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit436_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[436][1]=0; L[436][0]=1;}
			satisfiable[436][0]=satisfiable[436][0] & ((x[436] ^ 0) | (x[ unit436_0[i][0] ] ^ unit436_0[i][1]) |(x[ unit436_0[i][2] ] ^ unit436_0[i][3]));
			}
		if(X_contra>0) L[436][0]=2;
		}
	//Check all rules of unit[436][1]
	L[436][1] = LargeX[436][0]>0 ? 1 : 0;
	satisfiable[436][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit436_1[i][0] ][ unit436_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit436_1[i][2] ][ unit436_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit436_1[i][4] ][ unit436_1[i][5] ] >0);
		X_contra = ( LargeX[436][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit436_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[436][0]=0; L[436][1]=1;}
			satisfiable[436][1]=satisfiable[436][1] & ((x[436] ^ 1) | (x[ unit436_1[i][0] ] ^ unit436_1[i][1]) |(x[ unit436_1[i][2] ] ^ unit436_1[i][3]));
			}
		if(X_contra>0) L[436][1]=2;
		}
	//Check all rules of unit[437][0]
	L[437][0] = LargeX[437][1]>0 ? 1 : 0;
	satisfiable[437][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit437_0[i][0] ][ unit437_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit437_0[i][2] ][ unit437_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit437_0[i][4] ][ unit437_0[i][5] ] >0);
		X_contra = ( LargeX[437][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit437_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[437][1]=0; L[437][0]=1;}
			satisfiable[437][0]=satisfiable[437][0] & ((x[437] ^ 0) | (x[ unit437_0[i][0] ] ^ unit437_0[i][1]) |(x[ unit437_0[i][2] ] ^ unit437_0[i][3]));
			}
		if(X_contra>0) L[437][0]=2;
		}
	//Check all rules of unit[437][1]
	L[437][1] = LargeX[437][0]>0 ? 1 : 0;
	satisfiable[437][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit437_1[i][0] ][ unit437_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit437_1[i][2] ][ unit437_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit437_1[i][4] ][ unit437_1[i][5] ] >0);
		X_contra = ( LargeX[437][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit437_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[437][0]=0; L[437][1]=1;}
			satisfiable[437][1]=satisfiable[437][1] & ((x[437] ^ 1) | (x[ unit437_1[i][0] ] ^ unit437_1[i][1]) |(x[ unit437_1[i][2] ] ^ unit437_1[i][3]));
			}
		if(X_contra>0) L[437][1]=2;
		}
	//Check all rules of unit[438][0]
	L[438][0] = LargeX[438][1]>0 ? 1 : 0;
	satisfiable[438][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit438_0[i][0] ][ unit438_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit438_0[i][2] ][ unit438_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit438_0[i][4] ][ unit438_0[i][5] ] >0);
		X_contra = ( LargeX[438][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit438_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[438][1]=0; L[438][0]=1;}
			satisfiable[438][0]=satisfiable[438][0] & ((x[438] ^ 0) | (x[ unit438_0[i][0] ] ^ unit438_0[i][1]) |(x[ unit438_0[i][2] ] ^ unit438_0[i][3]));
			}
		if(X_contra>0) L[438][0]=2;
		}
	//Check all rules of unit[438][1]
	L[438][1] = LargeX[438][0]>0 ? 1 : 0;
	satisfiable[438][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit438_1[i][0] ][ unit438_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit438_1[i][2] ][ unit438_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit438_1[i][4] ][ unit438_1[i][5] ] >0);
		X_contra = ( LargeX[438][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit438_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[438][0]=0; L[438][1]=1;}
			satisfiable[438][1]=satisfiable[438][1] & ((x[438] ^ 1) | (x[ unit438_1[i][0] ] ^ unit438_1[i][1]) |(x[ unit438_1[i][2] ] ^ unit438_1[i][3]));
			}
		if(X_contra>0) L[438][1]=2;
		}
	//Check all rules of unit[439][0]
	L[439][0] = LargeX[439][1]>0 ? 1 : 0;
	satisfiable[439][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit439_0[i][0] ][ unit439_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit439_0[i][2] ][ unit439_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit439_0[i][4] ][ unit439_0[i][5] ] >0);
		X_contra = ( LargeX[439][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit439_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[439][1]=0; L[439][0]=1;}
			satisfiable[439][0]=satisfiable[439][0] & ((x[439] ^ 0) | (x[ unit439_0[i][0] ] ^ unit439_0[i][1]) |(x[ unit439_0[i][2] ] ^ unit439_0[i][3]));
			}
		if(X_contra>0) L[439][0]=2;
		}
	//Check all rules of unit[439][1]
	L[439][1] = LargeX[439][0]>0 ? 1 : 0;
	satisfiable[439][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit439_1[i][0] ][ unit439_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit439_1[i][2] ][ unit439_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit439_1[i][4] ][ unit439_1[i][5] ] >0);
		X_contra = ( LargeX[439][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit439_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[439][0]=0; L[439][1]=1;}
			satisfiable[439][1]=satisfiable[439][1] & ((x[439] ^ 1) | (x[ unit439_1[i][0] ] ^ unit439_1[i][1]) |(x[ unit439_1[i][2] ] ^ unit439_1[i][3]));
			}
		if(X_contra>0) L[439][1]=2;
		}
	//Check all rules of unit[440][0]
	L[440][0] = LargeX[440][1]>0 ? 1 : 0;
	satisfiable[440][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit440_0[i][0] ][ unit440_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit440_0[i][2] ][ unit440_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit440_0[i][4] ][ unit440_0[i][5] ] >0);
		X_contra = ( LargeX[440][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit440_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[440][1]=0; L[440][0]=1;}
			satisfiable[440][0]=satisfiable[440][0] & ((x[440] ^ 0) | (x[ unit440_0[i][0] ] ^ unit440_0[i][1]) |(x[ unit440_0[i][2] ] ^ unit440_0[i][3]));
			}
		if(X_contra>0) L[440][0]=2;
		}
	//Check all rules of unit[440][1]
	L[440][1] = LargeX[440][0]>0 ? 1 : 0;
	satisfiable[440][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit440_1[i][0] ][ unit440_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit440_1[i][2] ][ unit440_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit440_1[i][4] ][ unit440_1[i][5] ] >0);
		X_contra = ( LargeX[440][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit440_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[440][0]=0; L[440][1]=1;}
			satisfiable[440][1]=satisfiable[440][1] & ((x[440] ^ 1) | (x[ unit440_1[i][0] ] ^ unit440_1[i][1]) |(x[ unit440_1[i][2] ] ^ unit440_1[i][3]));
			}
		if(X_contra>0) L[440][1]=2;
		}
	//Check all rules of unit[441][0]
	L[441][0] = LargeX[441][1]>0 ? 1 : 0;
	satisfiable[441][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit441_0[i][0] ][ unit441_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit441_0[i][2] ][ unit441_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit441_0[i][4] ][ unit441_0[i][5] ] >0);
		X_contra = ( LargeX[441][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit441_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[441][1]=0; L[441][0]=1;}
			satisfiable[441][0]=satisfiable[441][0] & ((x[441] ^ 0) | (x[ unit441_0[i][0] ] ^ unit441_0[i][1]) |(x[ unit441_0[i][2] ] ^ unit441_0[i][3]));
			}
		if(X_contra>0) L[441][0]=2;
		}
	//Check all rules of unit[441][1]
	L[441][1] = LargeX[441][0]>0 ? 1 : 0;
	satisfiable[441][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit441_1[i][0] ][ unit441_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit441_1[i][2] ][ unit441_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit441_1[i][4] ][ unit441_1[i][5] ] >0);
		X_contra = ( LargeX[441][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit441_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[441][0]=0; L[441][1]=1;}
			satisfiable[441][1]=satisfiable[441][1] & ((x[441] ^ 1) | (x[ unit441_1[i][0] ] ^ unit441_1[i][1]) |(x[ unit441_1[i][2] ] ^ unit441_1[i][3]));
			}
		if(X_contra>0) L[441][1]=2;
		}
	//Check all rules of unit[442][0]
	L[442][0] = LargeX[442][1]>0 ? 1 : 0;
	satisfiable[442][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit442_0[i][0] ][ unit442_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit442_0[i][2] ][ unit442_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit442_0[i][4] ][ unit442_0[i][5] ] >0);
		X_contra = ( LargeX[442][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit442_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[442][1]=0; L[442][0]=1;}
			satisfiable[442][0]=satisfiable[442][0] & ((x[442] ^ 0) | (x[ unit442_0[i][0] ] ^ unit442_0[i][1]) |(x[ unit442_0[i][2] ] ^ unit442_0[i][3]));
			}
		if(X_contra>0) L[442][0]=2;
		}
	//Check all rules of unit[442][1]
	L[442][1] = LargeX[442][0]>0 ? 1 : 0;
	satisfiable[442][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit442_1[i][0] ][ unit442_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit442_1[i][2] ][ unit442_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit442_1[i][4] ][ unit442_1[i][5] ] >0);
		X_contra = ( LargeX[442][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit442_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[442][0]=0; L[442][1]=1;}
			satisfiable[442][1]=satisfiable[442][1] & ((x[442] ^ 1) | (x[ unit442_1[i][0] ] ^ unit442_1[i][1]) |(x[ unit442_1[i][2] ] ^ unit442_1[i][3]));
			}
		if(X_contra>0) L[442][1]=2;
		}
	//Check all rules of unit[443][0]
	L[443][0] = LargeX[443][1]>0 ? 1 : 0;
	satisfiable[443][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit443_0[i][0] ][ unit443_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit443_0[i][2] ][ unit443_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit443_0[i][4] ][ unit443_0[i][5] ] >0);
		X_contra = ( LargeX[443][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit443_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[443][1]=0; L[443][0]=1;}
			satisfiable[443][0]=satisfiable[443][0] & ((x[443] ^ 0) | (x[ unit443_0[i][0] ] ^ unit443_0[i][1]) |(x[ unit443_0[i][2] ] ^ unit443_0[i][3]));
			}
		if(X_contra>0) L[443][0]=2;
		}
	//Check all rules of unit[443][1]
	L[443][1] = LargeX[443][0]>0 ? 1 : 0;
	satisfiable[443][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit443_1[i][0] ][ unit443_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit443_1[i][2] ][ unit443_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit443_1[i][4] ][ unit443_1[i][5] ] >0);
		X_contra = ( LargeX[443][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit443_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[443][0]=0; L[443][1]=1;}
			satisfiable[443][1]=satisfiable[443][1] & ((x[443] ^ 1) | (x[ unit443_1[i][0] ] ^ unit443_1[i][1]) |(x[ unit443_1[i][2] ] ^ unit443_1[i][3]));
			}
		if(X_contra>0) L[443][1]=2;
		}
	//Check all rules of unit[444][0]
	L[444][0] = LargeX[444][1]>0 ? 1 : 0;
	satisfiable[444][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit444_0[i][0] ][ unit444_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit444_0[i][2] ][ unit444_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit444_0[i][4] ][ unit444_0[i][5] ] >0);
		X_contra = ( LargeX[444][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit444_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[444][1]=0; L[444][0]=1;}
			satisfiable[444][0]=satisfiable[444][0] & ((x[444] ^ 0) | (x[ unit444_0[i][0] ] ^ unit444_0[i][1]) |(x[ unit444_0[i][2] ] ^ unit444_0[i][3]));
			}
		if(X_contra>0) L[444][0]=2;
		}
	//Check all rules of unit[444][1]
	L[444][1] = LargeX[444][0]>0 ? 1 : 0;
	satisfiable[444][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit444_1[i][0] ][ unit444_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit444_1[i][2] ][ unit444_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit444_1[i][4] ][ unit444_1[i][5] ] >0);
		X_contra = ( LargeX[444][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit444_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[444][0]=0; L[444][1]=1;}
			satisfiable[444][1]=satisfiable[444][1] & ((x[444] ^ 1) | (x[ unit444_1[i][0] ] ^ unit444_1[i][1]) |(x[ unit444_1[i][2] ] ^ unit444_1[i][3]));
			}
		if(X_contra>0) L[444][1]=2;
		}
	//Check all rules of unit[445][0]
	L[445][0] = LargeX[445][1]>0 ? 1 : 0;
	satisfiable[445][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit445_0[i][0] ][ unit445_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit445_0[i][2] ][ unit445_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit445_0[i][4] ][ unit445_0[i][5] ] >0);
		X_contra = ( LargeX[445][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit445_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[445][1]=0; L[445][0]=1;}
			satisfiable[445][0]=satisfiable[445][0] & ((x[445] ^ 0) | (x[ unit445_0[i][0] ] ^ unit445_0[i][1]) |(x[ unit445_0[i][2] ] ^ unit445_0[i][3]));
			}
		if(X_contra>0) L[445][0]=2;
		}
	//Check all rules of unit[445][1]
	L[445][1] = LargeX[445][0]>0 ? 1 : 0;
	satisfiable[445][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit445_1[i][0] ][ unit445_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit445_1[i][2] ][ unit445_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit445_1[i][4] ][ unit445_1[i][5] ] >0);
		X_contra = ( LargeX[445][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit445_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[445][0]=0; L[445][1]=1;}
			satisfiable[445][1]=satisfiable[445][1] & ((x[445] ^ 1) | (x[ unit445_1[i][0] ] ^ unit445_1[i][1]) |(x[ unit445_1[i][2] ] ^ unit445_1[i][3]));
			}
		if(X_contra>0) L[445][1]=2;
		}
	//Check all rules of unit[446][0]
	L[446][0] = LargeX[446][1]>0 ? 1 : 0;
	satisfiable[446][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit446_0[i][0] ][ unit446_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit446_0[i][2] ][ unit446_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit446_0[i][4] ][ unit446_0[i][5] ] >0);
		X_contra = ( LargeX[446][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit446_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[446][1]=0; L[446][0]=1;}
			satisfiable[446][0]=satisfiable[446][0] & ((x[446] ^ 0) | (x[ unit446_0[i][0] ] ^ unit446_0[i][1]) |(x[ unit446_0[i][2] ] ^ unit446_0[i][3]));
			}
		if(X_contra>0) L[446][0]=2;
		}
	//Check all rules of unit[446][1]
	L[446][1] = LargeX[446][0]>0 ? 1 : 0;
	satisfiable[446][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit446_1[i][0] ][ unit446_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit446_1[i][2] ][ unit446_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit446_1[i][4] ][ unit446_1[i][5] ] >0);
		X_contra = ( LargeX[446][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit446_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[446][0]=0; L[446][1]=1;}
			satisfiable[446][1]=satisfiable[446][1] & ((x[446] ^ 1) | (x[ unit446_1[i][0] ] ^ unit446_1[i][1]) |(x[ unit446_1[i][2] ] ^ unit446_1[i][3]));
			}
		if(X_contra>0) L[446][1]=2;
		}
	//Check all rules of unit[447][0]
	L[447][0] = LargeX[447][1]>0 ? 1 : 0;
	satisfiable[447][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit447_0[i][0] ][ unit447_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit447_0[i][2] ][ unit447_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit447_0[i][4] ][ unit447_0[i][5] ] >0);
		X_contra = ( LargeX[447][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit447_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[447][1]=0; L[447][0]=1;}
			satisfiable[447][0]=satisfiable[447][0] & ((x[447] ^ 0) | (x[ unit447_0[i][0] ] ^ unit447_0[i][1]) |(x[ unit447_0[i][2] ] ^ unit447_0[i][3]));
			}
		if(X_contra>0) L[447][0]=2;
		}
	//Check all rules of unit[447][1]
	L[447][1] = LargeX[447][0]>0 ? 1 : 0;
	satisfiable[447][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit447_1[i][0] ][ unit447_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit447_1[i][2] ][ unit447_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit447_1[i][4] ][ unit447_1[i][5] ] >0);
		X_contra = ( LargeX[447][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit447_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[447][0]=0; L[447][1]=1;}
			satisfiable[447][1]=satisfiable[447][1] & ((x[447] ^ 1) | (x[ unit447_1[i][0] ] ^ unit447_1[i][1]) |(x[ unit447_1[i][2] ] ^ unit447_1[i][3]));
			}
		if(X_contra>0) L[447][1]=2;
		}
	//Check all rules of unit[448][0]
	L[448][0] = LargeX[448][1]>0 ? 1 : 0;
	satisfiable[448][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit448_0[i][0] ][ unit448_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit448_0[i][2] ][ unit448_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit448_0[i][4] ][ unit448_0[i][5] ] >0);
		X_contra = ( LargeX[448][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit448_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[448][1]=0; L[448][0]=1;}
			satisfiable[448][0]=satisfiable[448][0] & ((x[448] ^ 0) | (x[ unit448_0[i][0] ] ^ unit448_0[i][1]) |(x[ unit448_0[i][2] ] ^ unit448_0[i][3]));
			}
		if(X_contra>0) L[448][0]=2;
		}
	//Check all rules of unit[448][1]
	L[448][1] = LargeX[448][0]>0 ? 1 : 0;
	satisfiable[448][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit448_1[i][0] ][ unit448_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit448_1[i][2] ][ unit448_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit448_1[i][4] ][ unit448_1[i][5] ] >0);
		X_contra = ( LargeX[448][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit448_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[448][0]=0; L[448][1]=1;}
			satisfiable[448][1]=satisfiable[448][1] & ((x[448] ^ 1) | (x[ unit448_1[i][0] ] ^ unit448_1[i][1]) |(x[ unit448_1[i][2] ] ^ unit448_1[i][3]));
			}
		if(X_contra>0) L[448][1]=2;
		}
	//Check all rules of unit[449][0]
	L[449][0] = LargeX[449][1]>0 ? 1 : 0;
	satisfiable[449][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit449_0[i][0] ][ unit449_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit449_0[i][2] ][ unit449_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit449_0[i][4] ][ unit449_0[i][5] ] >0);
		X_contra = ( LargeX[449][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit449_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[449][1]=0; L[449][0]=1;}
			satisfiable[449][0]=satisfiable[449][0] & ((x[449] ^ 0) | (x[ unit449_0[i][0] ] ^ unit449_0[i][1]) |(x[ unit449_0[i][2] ] ^ unit449_0[i][3]));
			}
		if(X_contra>0) L[449][0]=2;
		}
	//Check all rules of unit[449][1]
	L[449][1] = LargeX[449][0]>0 ? 1 : 0;
	satisfiable[449][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit449_1[i][0] ][ unit449_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit449_1[i][2] ][ unit449_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit449_1[i][4] ][ unit449_1[i][5] ] >0);
		X_contra = ( LargeX[449][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit449_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[449][0]=0; L[449][1]=1;}
			satisfiable[449][1]=satisfiable[449][1] & ((x[449] ^ 1) | (x[ unit449_1[i][0] ] ^ unit449_1[i][1]) |(x[ unit449_1[i][2] ] ^ unit449_1[i][3]));
			}
		if(X_contra>0) L[449][1]=2;
		}
	//Check all rules of unit[450][0]
	L[450][0] = LargeX[450][1]>0 ? 1 : 0;
	satisfiable[450][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit450_0[i][0] ][ unit450_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit450_0[i][2] ][ unit450_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit450_0[i][4] ][ unit450_0[i][5] ] >0);
		X_contra = ( LargeX[450][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit450_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[450][1]=0; L[450][0]=1;}
			satisfiable[450][0]=satisfiable[450][0] & ((x[450] ^ 0) | (x[ unit450_0[i][0] ] ^ unit450_0[i][1]) |(x[ unit450_0[i][2] ] ^ unit450_0[i][3]));
			}
		if(X_contra>0) L[450][0]=2;
		}
	//Check all rules of unit[450][1]
	L[450][1] = LargeX[450][0]>0 ? 1 : 0;
	satisfiable[450][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit450_1[i][0] ][ unit450_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit450_1[i][2] ][ unit450_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit450_1[i][4] ][ unit450_1[i][5] ] >0);
		X_contra = ( LargeX[450][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit450_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[450][0]=0; L[450][1]=1;}
			satisfiable[450][1]=satisfiable[450][1] & ((x[450] ^ 1) | (x[ unit450_1[i][0] ] ^ unit450_1[i][1]) |(x[ unit450_1[i][2] ] ^ unit450_1[i][3]));
			}
		if(X_contra>0) L[450][1]=2;
		}
	//Check all rules of unit[451][0]
	L[451][0] = LargeX[451][1]>0 ? 1 : 0;
	satisfiable[451][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit451_0[i][0] ][ unit451_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit451_0[i][2] ][ unit451_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit451_0[i][4] ][ unit451_0[i][5] ] >0);
		X_contra = ( LargeX[451][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit451_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[451][1]=0; L[451][0]=1;}
			satisfiable[451][0]=satisfiable[451][0] & ((x[451] ^ 0) | (x[ unit451_0[i][0] ] ^ unit451_0[i][1]) |(x[ unit451_0[i][2] ] ^ unit451_0[i][3]));
			}
		if(X_contra>0) L[451][0]=2;
		}
	//Check all rules of unit[451][1]
	L[451][1] = LargeX[451][0]>0 ? 1 : 0;
	satisfiable[451][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit451_1[i][0] ][ unit451_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit451_1[i][2] ][ unit451_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit451_1[i][4] ][ unit451_1[i][5] ] >0);
		X_contra = ( LargeX[451][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit451_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[451][0]=0; L[451][1]=1;}
			satisfiable[451][1]=satisfiable[451][1] & ((x[451] ^ 1) | (x[ unit451_1[i][0] ] ^ unit451_1[i][1]) |(x[ unit451_1[i][2] ] ^ unit451_1[i][3]));
			}
		if(X_contra>0) L[451][1]=2;
		}
	//Check all rules of unit[452][0]
	L[452][0] = LargeX[452][1]>0 ? 1 : 0;
	satisfiable[452][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit452_0[i][0] ][ unit452_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit452_0[i][2] ][ unit452_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit452_0[i][4] ][ unit452_0[i][5] ] >0);
		X_contra = ( LargeX[452][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit452_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[452][1]=0; L[452][0]=1;}
			satisfiable[452][0]=satisfiable[452][0] & ((x[452] ^ 0) | (x[ unit452_0[i][0] ] ^ unit452_0[i][1]) |(x[ unit452_0[i][2] ] ^ unit452_0[i][3]));
			}
		if(X_contra>0) L[452][0]=2;
		}
	//Check all rules of unit[452][1]
	L[452][1] = LargeX[452][0]>0 ? 1 : 0;
	satisfiable[452][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit452_1[i][0] ][ unit452_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit452_1[i][2] ][ unit452_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit452_1[i][4] ][ unit452_1[i][5] ] >0);
		X_contra = ( LargeX[452][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit452_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[452][0]=0; L[452][1]=1;}
			satisfiable[452][1]=satisfiable[452][1] & ((x[452] ^ 1) | (x[ unit452_1[i][0] ] ^ unit452_1[i][1]) |(x[ unit452_1[i][2] ] ^ unit452_1[i][3]));
			}
		if(X_contra>0) L[452][1]=2;
		}
	//Check all rules of unit[453][0]
	L[453][0] = LargeX[453][1]>0 ? 1 : 0;
	satisfiable[453][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit453_0[i][0] ][ unit453_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit453_0[i][2] ][ unit453_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit453_0[i][4] ][ unit453_0[i][5] ] >0);
		X_contra = ( LargeX[453][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit453_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[453][1]=0; L[453][0]=1;}
			satisfiable[453][0]=satisfiable[453][0] & ((x[453] ^ 0) | (x[ unit453_0[i][0] ] ^ unit453_0[i][1]) |(x[ unit453_0[i][2] ] ^ unit453_0[i][3]));
			}
		if(X_contra>0) L[453][0]=2;
		}
	//Check all rules of unit[453][1]
	L[453][1] = LargeX[453][0]>0 ? 1 : 0;
	satisfiable[453][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit453_1[i][0] ][ unit453_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit453_1[i][2] ][ unit453_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit453_1[i][4] ][ unit453_1[i][5] ] >0);
		X_contra = ( LargeX[453][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit453_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[453][0]=0; L[453][1]=1;}
			satisfiable[453][1]=satisfiable[453][1] & ((x[453] ^ 1) | (x[ unit453_1[i][0] ] ^ unit453_1[i][1]) |(x[ unit453_1[i][2] ] ^ unit453_1[i][3]));
			}
		if(X_contra>0) L[453][1]=2;
		}
	//Check all rules of unit[454][0]
	L[454][0] = LargeX[454][1]>0 ? 1 : 0;
	satisfiable[454][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit454_0[i][0] ][ unit454_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit454_0[i][2] ][ unit454_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit454_0[i][4] ][ unit454_0[i][5] ] >0);
		X_contra = ( LargeX[454][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit454_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[454][1]=0; L[454][0]=1;}
			satisfiable[454][0]=satisfiable[454][0] & ((x[454] ^ 0) | (x[ unit454_0[i][0] ] ^ unit454_0[i][1]) |(x[ unit454_0[i][2] ] ^ unit454_0[i][3]));
			}
		if(X_contra>0) L[454][0]=2;
		}
	//Check all rules of unit[454][1]
	L[454][1] = LargeX[454][0]>0 ? 1 : 0;
	satisfiable[454][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit454_1[i][0] ][ unit454_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit454_1[i][2] ][ unit454_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit454_1[i][4] ][ unit454_1[i][5] ] >0);
		X_contra = ( LargeX[454][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit454_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[454][0]=0; L[454][1]=1;}
			satisfiable[454][1]=satisfiable[454][1] & ((x[454] ^ 1) | (x[ unit454_1[i][0] ] ^ unit454_1[i][1]) |(x[ unit454_1[i][2] ] ^ unit454_1[i][3]));
			}
		if(X_contra>0) L[454][1]=2;
		}
	//Check all rules of unit[455][0]
	L[455][0] = LargeX[455][1]>0 ? 1 : 0;
	satisfiable[455][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit455_0[i][0] ][ unit455_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit455_0[i][2] ][ unit455_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit455_0[i][4] ][ unit455_0[i][5] ] >0);
		X_contra = ( LargeX[455][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit455_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[455][1]=0; L[455][0]=1;}
			satisfiable[455][0]=satisfiable[455][0] & ((x[455] ^ 0) | (x[ unit455_0[i][0] ] ^ unit455_0[i][1]) |(x[ unit455_0[i][2] ] ^ unit455_0[i][3]));
			}
		if(X_contra>0) L[455][0]=2;
		}
	//Check all rules of unit[455][1]
	L[455][1] = LargeX[455][0]>0 ? 1 : 0;
	satisfiable[455][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit455_1[i][0] ][ unit455_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit455_1[i][2] ][ unit455_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit455_1[i][4] ][ unit455_1[i][5] ] >0);
		X_contra = ( LargeX[455][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit455_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[455][0]=0; L[455][1]=1;}
			satisfiable[455][1]=satisfiable[455][1] & ((x[455] ^ 1) | (x[ unit455_1[i][0] ] ^ unit455_1[i][1]) |(x[ unit455_1[i][2] ] ^ unit455_1[i][3]));
			}
		if(X_contra>0) L[455][1]=2;
		}
	//Check all rules of unit[456][0]
	L[456][0] = LargeX[456][1]>0 ? 1 : 0;
	satisfiable[456][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit456_0[i][0] ][ unit456_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit456_0[i][2] ][ unit456_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit456_0[i][4] ][ unit456_0[i][5] ] >0);
		X_contra = ( LargeX[456][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit456_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[456][1]=0; L[456][0]=1;}
			satisfiable[456][0]=satisfiable[456][0] & ((x[456] ^ 0) | (x[ unit456_0[i][0] ] ^ unit456_0[i][1]) |(x[ unit456_0[i][2] ] ^ unit456_0[i][3]));
			}
		if(X_contra>0) L[456][0]=2;
		}
	//Check all rules of unit[456][1]
	L[456][1] = LargeX[456][0]>0 ? 1 : 0;
	satisfiable[456][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit456_1[i][0] ][ unit456_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit456_1[i][2] ][ unit456_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit456_1[i][4] ][ unit456_1[i][5] ] >0);
		X_contra = ( LargeX[456][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit456_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[456][0]=0; L[456][1]=1;}
			satisfiable[456][1]=satisfiable[456][1] & ((x[456] ^ 1) | (x[ unit456_1[i][0] ] ^ unit456_1[i][1]) |(x[ unit456_1[i][2] ] ^ unit456_1[i][3]));
			}
		if(X_contra>0) L[456][1]=2;
		}
	//Check all rules of unit[457][0]
	L[457][0] = LargeX[457][1]>0 ? 1 : 0;
	satisfiable[457][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit457_0[i][0] ][ unit457_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit457_0[i][2] ][ unit457_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit457_0[i][4] ][ unit457_0[i][5] ] >0);
		X_contra = ( LargeX[457][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit457_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[457][1]=0; L[457][0]=1;}
			satisfiable[457][0]=satisfiable[457][0] & ((x[457] ^ 0) | (x[ unit457_0[i][0] ] ^ unit457_0[i][1]) |(x[ unit457_0[i][2] ] ^ unit457_0[i][3]));
			}
		if(X_contra>0) L[457][0]=2;
		}
	//Check all rules of unit[457][1]
	L[457][1] = LargeX[457][0]>0 ? 1 : 0;
	satisfiable[457][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit457_1[i][0] ][ unit457_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit457_1[i][2] ][ unit457_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit457_1[i][4] ][ unit457_1[i][5] ] >0);
		X_contra = ( LargeX[457][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit457_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[457][0]=0; L[457][1]=1;}
			satisfiable[457][1]=satisfiable[457][1] & ((x[457] ^ 1) | (x[ unit457_1[i][0] ] ^ unit457_1[i][1]) |(x[ unit457_1[i][2] ] ^ unit457_1[i][3]));
			}
		if(X_contra>0) L[457][1]=2;
		}
	//Check all rules of unit[458][0]
	L[458][0] = LargeX[458][1]>0 ? 1 : 0;
	satisfiable[458][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit458_0[i][0] ][ unit458_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit458_0[i][2] ][ unit458_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit458_0[i][4] ][ unit458_0[i][5] ] >0);
		X_contra = ( LargeX[458][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit458_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[458][1]=0; L[458][0]=1;}
			satisfiable[458][0]=satisfiable[458][0] & ((x[458] ^ 0) | (x[ unit458_0[i][0] ] ^ unit458_0[i][1]) |(x[ unit458_0[i][2] ] ^ unit458_0[i][3]));
			}
		if(X_contra>0) L[458][0]=2;
		}
	//Check all rules of unit[458][1]
	L[458][1] = LargeX[458][0]>0 ? 1 : 0;
	satisfiable[458][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit458_1[i][0] ][ unit458_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit458_1[i][2] ][ unit458_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit458_1[i][4] ][ unit458_1[i][5] ] >0);
		X_contra = ( LargeX[458][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit458_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[458][0]=0; L[458][1]=1;}
			satisfiable[458][1]=satisfiable[458][1] & ((x[458] ^ 1) | (x[ unit458_1[i][0] ] ^ unit458_1[i][1]) |(x[ unit458_1[i][2] ] ^ unit458_1[i][3]));
			}
		if(X_contra>0) L[458][1]=2;
		}
	//Check all rules of unit[459][0]
	L[459][0] = LargeX[459][1]>0 ? 1 : 0;
	satisfiable[459][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit459_0[i][0] ][ unit459_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit459_0[i][2] ][ unit459_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit459_0[i][4] ][ unit459_0[i][5] ] >0);
		X_contra = ( LargeX[459][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit459_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[459][1]=0; L[459][0]=1;}
			satisfiable[459][0]=satisfiable[459][0] & ((x[459] ^ 0) | (x[ unit459_0[i][0] ] ^ unit459_0[i][1]) |(x[ unit459_0[i][2] ] ^ unit459_0[i][3]));
			}
		if(X_contra>0) L[459][0]=2;
		}
	//Check all rules of unit[459][1]
	L[459][1] = LargeX[459][0]>0 ? 1 : 0;
	satisfiable[459][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit459_1[i][0] ][ unit459_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit459_1[i][2] ][ unit459_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit459_1[i][4] ][ unit459_1[i][5] ] >0);
		X_contra = ( LargeX[459][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit459_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[459][0]=0; L[459][1]=1;}
			satisfiable[459][1]=satisfiable[459][1] & ((x[459] ^ 1) | (x[ unit459_1[i][0] ] ^ unit459_1[i][1]) |(x[ unit459_1[i][2] ] ^ unit459_1[i][3]));
			}
		if(X_contra>0) L[459][1]=2;
		}
	//Check all rules of unit[460][0]
	L[460][0] = LargeX[460][1]>0 ? 1 : 0;
	satisfiable[460][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit460_0[i][0] ][ unit460_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit460_0[i][2] ][ unit460_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit460_0[i][4] ][ unit460_0[i][5] ] >0);
		X_contra = ( LargeX[460][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit460_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[460][1]=0; L[460][0]=1;}
			satisfiable[460][0]=satisfiable[460][0] & ((x[460] ^ 0) | (x[ unit460_0[i][0] ] ^ unit460_0[i][1]) |(x[ unit460_0[i][2] ] ^ unit460_0[i][3]));
			}
		if(X_contra>0) L[460][0]=2;
		}
	//Check all rules of unit[460][1]
	L[460][1] = LargeX[460][0]>0 ? 1 : 0;
	satisfiable[460][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit460_1[i][0] ][ unit460_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit460_1[i][2] ][ unit460_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit460_1[i][4] ][ unit460_1[i][5] ] >0);
		X_contra = ( LargeX[460][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit460_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[460][0]=0; L[460][1]=1;}
			satisfiable[460][1]=satisfiable[460][1] & ((x[460] ^ 1) | (x[ unit460_1[i][0] ] ^ unit460_1[i][1]) |(x[ unit460_1[i][2] ] ^ unit460_1[i][3]));
			}
		if(X_contra>0) L[460][1]=2;
		}
	//Check all rules of unit[461][0]
	L[461][0] = LargeX[461][1]>0 ? 1 : 0;
	satisfiable[461][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit461_0[i][0] ][ unit461_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit461_0[i][2] ][ unit461_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit461_0[i][4] ][ unit461_0[i][5] ] >0);
		X_contra = ( LargeX[461][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit461_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[461][1]=0; L[461][0]=1;}
			satisfiable[461][0]=satisfiable[461][0] & ((x[461] ^ 0) | (x[ unit461_0[i][0] ] ^ unit461_0[i][1]) |(x[ unit461_0[i][2] ] ^ unit461_0[i][3]));
			}
		if(X_contra>0) L[461][0]=2;
		}
	//Check all rules of unit[461][1]
	L[461][1] = LargeX[461][0]>0 ? 1 : 0;
	satisfiable[461][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit461_1[i][0] ][ unit461_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit461_1[i][2] ][ unit461_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit461_1[i][4] ][ unit461_1[i][5] ] >0);
		X_contra = ( LargeX[461][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit461_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[461][0]=0; L[461][1]=1;}
			satisfiable[461][1]=satisfiable[461][1] & ((x[461] ^ 1) | (x[ unit461_1[i][0] ] ^ unit461_1[i][1]) |(x[ unit461_1[i][2] ] ^ unit461_1[i][3]));
			}
		if(X_contra>0) L[461][1]=2;
		}
	//Check all rules of unit[462][0]
	L[462][0] = LargeX[462][1]>0 ? 1 : 0;
	satisfiable[462][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit462_0[i][0] ][ unit462_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit462_0[i][2] ][ unit462_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit462_0[i][4] ][ unit462_0[i][5] ] >0);
		X_contra = ( LargeX[462][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit462_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[462][1]=0; L[462][0]=1;}
			satisfiable[462][0]=satisfiable[462][0] & ((x[462] ^ 0) | (x[ unit462_0[i][0] ] ^ unit462_0[i][1]) |(x[ unit462_0[i][2] ] ^ unit462_0[i][3]));
			}
		if(X_contra>0) L[462][0]=2;
		}
	//Check all rules of unit[462][1]
	L[462][1] = LargeX[462][0]>0 ? 1 : 0;
	satisfiable[462][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit462_1[i][0] ][ unit462_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit462_1[i][2] ][ unit462_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit462_1[i][4] ][ unit462_1[i][5] ] >0);
		X_contra = ( LargeX[462][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit462_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[462][0]=0; L[462][1]=1;}
			satisfiable[462][1]=satisfiable[462][1] & ((x[462] ^ 1) | (x[ unit462_1[i][0] ] ^ unit462_1[i][1]) |(x[ unit462_1[i][2] ] ^ unit462_1[i][3]));
			}
		if(X_contra>0) L[462][1]=2;
		}
	//Check all rules of unit[463][0]
	L[463][0] = LargeX[463][1]>0 ? 1 : 0;
	satisfiable[463][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit463_0[i][0] ][ unit463_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit463_0[i][2] ][ unit463_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit463_0[i][4] ][ unit463_0[i][5] ] >0);
		X_contra = ( LargeX[463][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit463_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[463][1]=0; L[463][0]=1;}
			satisfiable[463][0]=satisfiable[463][0] & ((x[463] ^ 0) | (x[ unit463_0[i][0] ] ^ unit463_0[i][1]) |(x[ unit463_0[i][2] ] ^ unit463_0[i][3]));
			}
		if(X_contra>0) L[463][0]=2;
		}
	//Check all rules of unit[463][1]
	L[463][1] = LargeX[463][0]>0 ? 1 : 0;
	satisfiable[463][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit463_1[i][0] ][ unit463_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit463_1[i][2] ][ unit463_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit463_1[i][4] ][ unit463_1[i][5] ] >0);
		X_contra = ( LargeX[463][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit463_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[463][0]=0; L[463][1]=1;}
			satisfiable[463][1]=satisfiable[463][1] & ((x[463] ^ 1) | (x[ unit463_1[i][0] ] ^ unit463_1[i][1]) |(x[ unit463_1[i][2] ] ^ unit463_1[i][3]));
			}
		if(X_contra>0) L[463][1]=2;
		}
	//Check all rules of unit[464][0]
	L[464][0] = LargeX[464][1]>0 ? 1 : 0;
	satisfiable[464][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit464_0[i][0] ][ unit464_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit464_0[i][2] ][ unit464_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit464_0[i][4] ][ unit464_0[i][5] ] >0);
		X_contra = ( LargeX[464][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit464_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[464][1]=0; L[464][0]=1;}
			satisfiable[464][0]=satisfiable[464][0] & ((x[464] ^ 0) | (x[ unit464_0[i][0] ] ^ unit464_0[i][1]) |(x[ unit464_0[i][2] ] ^ unit464_0[i][3]));
			}
		if(X_contra>0) L[464][0]=2;
		}
	//Check all rules of unit[464][1]
	L[464][1] = LargeX[464][0]>0 ? 1 : 0;
	satisfiable[464][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit464_1[i][0] ][ unit464_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit464_1[i][2] ][ unit464_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit464_1[i][4] ][ unit464_1[i][5] ] >0);
		X_contra = ( LargeX[464][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit464_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[464][0]=0; L[464][1]=1;}
			satisfiable[464][1]=satisfiable[464][1] & ((x[464] ^ 1) | (x[ unit464_1[i][0] ] ^ unit464_1[i][1]) |(x[ unit464_1[i][2] ] ^ unit464_1[i][3]));
			}
		if(X_contra>0) L[464][1]=2;
		}
	//Check all rules of unit[465][0]
	L[465][0] = LargeX[465][1]>0 ? 1 : 0;
	satisfiable[465][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit465_0[i][0] ][ unit465_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit465_0[i][2] ][ unit465_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit465_0[i][4] ][ unit465_0[i][5] ] >0);
		X_contra = ( LargeX[465][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit465_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[465][1]=0; L[465][0]=1;}
			satisfiable[465][0]=satisfiable[465][0] & ((x[465] ^ 0) | (x[ unit465_0[i][0] ] ^ unit465_0[i][1]) |(x[ unit465_0[i][2] ] ^ unit465_0[i][3]));
			}
		if(X_contra>0) L[465][0]=2;
		}
	//Check all rules of unit[465][1]
	L[465][1] = LargeX[465][0]>0 ? 1 : 0;
	satisfiable[465][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit465_1[i][0] ][ unit465_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit465_1[i][2] ][ unit465_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit465_1[i][4] ][ unit465_1[i][5] ] >0);
		X_contra = ( LargeX[465][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit465_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[465][0]=0; L[465][1]=1;}
			satisfiable[465][1]=satisfiable[465][1] & ((x[465] ^ 1) | (x[ unit465_1[i][0] ] ^ unit465_1[i][1]) |(x[ unit465_1[i][2] ] ^ unit465_1[i][3]));
			}
		if(X_contra>0) L[465][1]=2;
		}
	//Check all rules of unit[466][0]
	L[466][0] = LargeX[466][1]>0 ? 1 : 0;
	satisfiable[466][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit466_0[i][0] ][ unit466_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit466_0[i][2] ][ unit466_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit466_0[i][4] ][ unit466_0[i][5] ] >0);
		X_contra = ( LargeX[466][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit466_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[466][1]=0; L[466][0]=1;}
			satisfiable[466][0]=satisfiable[466][0] & ((x[466] ^ 0) | (x[ unit466_0[i][0] ] ^ unit466_0[i][1]) |(x[ unit466_0[i][2] ] ^ unit466_0[i][3]));
			}
		if(X_contra>0) L[466][0]=2;
		}
	//Check all rules of unit[466][1]
	L[466][1] = LargeX[466][0]>0 ? 1 : 0;
	satisfiable[466][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit466_1[i][0] ][ unit466_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit466_1[i][2] ][ unit466_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit466_1[i][4] ][ unit466_1[i][5] ] >0);
		X_contra = ( LargeX[466][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit466_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[466][0]=0; L[466][1]=1;}
			satisfiable[466][1]=satisfiable[466][1] & ((x[466] ^ 1) | (x[ unit466_1[i][0] ] ^ unit466_1[i][1]) |(x[ unit466_1[i][2] ] ^ unit466_1[i][3]));
			}
		if(X_contra>0) L[466][1]=2;
		}
	//Check all rules of unit[467][0]
	L[467][0] = LargeX[467][1]>0 ? 1 : 0;
	satisfiable[467][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit467_0[i][0] ][ unit467_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit467_0[i][2] ][ unit467_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit467_0[i][4] ][ unit467_0[i][5] ] >0);
		X_contra = ( LargeX[467][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit467_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[467][1]=0; L[467][0]=1;}
			satisfiable[467][0]=satisfiable[467][0] & ((x[467] ^ 0) | (x[ unit467_0[i][0] ] ^ unit467_0[i][1]) |(x[ unit467_0[i][2] ] ^ unit467_0[i][3]));
			}
		if(X_contra>0) L[467][0]=2;
		}
	//Check all rules of unit[467][1]
	L[467][1] = LargeX[467][0]>0 ? 1 : 0;
	satisfiable[467][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit467_1[i][0] ][ unit467_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit467_1[i][2] ][ unit467_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit467_1[i][4] ][ unit467_1[i][5] ] >0);
		X_contra = ( LargeX[467][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit467_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[467][0]=0; L[467][1]=1;}
			satisfiable[467][1]=satisfiable[467][1] & ((x[467] ^ 1) | (x[ unit467_1[i][0] ] ^ unit467_1[i][1]) |(x[ unit467_1[i][2] ] ^ unit467_1[i][3]));
			}
		if(X_contra>0) L[467][1]=2;
		}
	//Check all rules of unit[468][0]
	L[468][0] = LargeX[468][1]>0 ? 1 : 0;
	satisfiable[468][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit468_0[i][0] ][ unit468_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit468_0[i][2] ][ unit468_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit468_0[i][4] ][ unit468_0[i][5] ] >0);
		X_contra = ( LargeX[468][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit468_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[468][1]=0; L[468][0]=1;}
			satisfiable[468][0]=satisfiable[468][0] & ((x[468] ^ 0) | (x[ unit468_0[i][0] ] ^ unit468_0[i][1]) |(x[ unit468_0[i][2] ] ^ unit468_0[i][3]));
			}
		if(X_contra>0) L[468][0]=2;
		}
	//Check all rules of unit[468][1]
	L[468][1] = LargeX[468][0]>0 ? 1 : 0;
	satisfiable[468][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit468_1[i][0] ][ unit468_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit468_1[i][2] ][ unit468_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit468_1[i][4] ][ unit468_1[i][5] ] >0);
		X_contra = ( LargeX[468][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit468_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[468][0]=0; L[468][1]=1;}
			satisfiable[468][1]=satisfiable[468][1] & ((x[468] ^ 1) | (x[ unit468_1[i][0] ] ^ unit468_1[i][1]) |(x[ unit468_1[i][2] ] ^ unit468_1[i][3]));
			}
		if(X_contra>0) L[468][1]=2;
		}
	//Check all rules of unit[469][0]
	L[469][0] = LargeX[469][1]>0 ? 1 : 0;
	satisfiable[469][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit469_0[i][0] ][ unit469_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit469_0[i][2] ][ unit469_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit469_0[i][4] ][ unit469_0[i][5] ] >0);
		X_contra = ( LargeX[469][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit469_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[469][1]=0; L[469][0]=1;}
			satisfiable[469][0]=satisfiable[469][0] & ((x[469] ^ 0) | (x[ unit469_0[i][0] ] ^ unit469_0[i][1]) |(x[ unit469_0[i][2] ] ^ unit469_0[i][3]));
			}
		if(X_contra>0) L[469][0]=2;
		}
	//Check all rules of unit[469][1]
	L[469][1] = LargeX[469][0]>0 ? 1 : 0;
	satisfiable[469][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit469_1[i][0] ][ unit469_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit469_1[i][2] ][ unit469_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit469_1[i][4] ][ unit469_1[i][5] ] >0);
		X_contra = ( LargeX[469][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit469_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[469][0]=0; L[469][1]=1;}
			satisfiable[469][1]=satisfiable[469][1] & ((x[469] ^ 1) | (x[ unit469_1[i][0] ] ^ unit469_1[i][1]) |(x[ unit469_1[i][2] ] ^ unit469_1[i][3]));
			}
		if(X_contra>0) L[469][1]=2;
		}
	//Check all rules of unit[470][0]
	L[470][0] = LargeX[470][1]>0 ? 1 : 0;
	satisfiable[470][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit470_0[i][0] ][ unit470_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit470_0[i][2] ][ unit470_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit470_0[i][4] ][ unit470_0[i][5] ] >0);
		X_contra = ( LargeX[470][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit470_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[470][1]=0; L[470][0]=1;}
			satisfiable[470][0]=satisfiable[470][0] & ((x[470] ^ 0) | (x[ unit470_0[i][0] ] ^ unit470_0[i][1]) |(x[ unit470_0[i][2] ] ^ unit470_0[i][3]));
			}
		if(X_contra>0) L[470][0]=2;
		}
	//Check all rules of unit[470][1]
	L[470][1] = LargeX[470][0]>0 ? 1 : 0;
	satisfiable[470][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit470_1[i][0] ][ unit470_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit470_1[i][2] ][ unit470_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit470_1[i][4] ][ unit470_1[i][5] ] >0);
		X_contra = ( LargeX[470][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit470_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[470][0]=0; L[470][1]=1;}
			satisfiable[470][1]=satisfiable[470][1] & ((x[470] ^ 1) | (x[ unit470_1[i][0] ] ^ unit470_1[i][1]) |(x[ unit470_1[i][2] ] ^ unit470_1[i][3]));
			}
		if(X_contra>0) L[470][1]=2;
		}
	//Check all rules of unit[471][0]
	L[471][0] = LargeX[471][1]>0 ? 1 : 0;
	satisfiable[471][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit471_0[i][0] ][ unit471_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit471_0[i][2] ][ unit471_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit471_0[i][4] ][ unit471_0[i][5] ] >0);
		X_contra = ( LargeX[471][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit471_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[471][1]=0; L[471][0]=1;}
			satisfiable[471][0]=satisfiable[471][0] & ((x[471] ^ 0) | (x[ unit471_0[i][0] ] ^ unit471_0[i][1]) |(x[ unit471_0[i][2] ] ^ unit471_0[i][3]));
			}
		if(X_contra>0) L[471][0]=2;
		}
	//Check all rules of unit[471][1]
	L[471][1] = LargeX[471][0]>0 ? 1 : 0;
	satisfiable[471][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit471_1[i][0] ][ unit471_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit471_1[i][2] ][ unit471_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit471_1[i][4] ][ unit471_1[i][5] ] >0);
		X_contra = ( LargeX[471][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit471_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[471][0]=0; L[471][1]=1;}
			satisfiable[471][1]=satisfiable[471][1] & ((x[471] ^ 1) | (x[ unit471_1[i][0] ] ^ unit471_1[i][1]) |(x[ unit471_1[i][2] ] ^ unit471_1[i][3]));
			}
		if(X_contra>0) L[471][1]=2;
		}
	//Check all rules of unit[472][0]
	L[472][0] = LargeX[472][1]>0 ? 1 : 0;
	satisfiable[472][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit472_0[i][0] ][ unit472_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit472_0[i][2] ][ unit472_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit472_0[i][4] ][ unit472_0[i][5] ] >0);
		X_contra = ( LargeX[472][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit472_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[472][1]=0; L[472][0]=1;}
			satisfiable[472][0]=satisfiable[472][0] & ((x[472] ^ 0) | (x[ unit472_0[i][0] ] ^ unit472_0[i][1]) |(x[ unit472_0[i][2] ] ^ unit472_0[i][3]));
			}
		if(X_contra>0) L[472][0]=2;
		}
	//Check all rules of unit[472][1]
	L[472][1] = LargeX[472][0]>0 ? 1 : 0;
	satisfiable[472][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit472_1[i][0] ][ unit472_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit472_1[i][2] ][ unit472_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit472_1[i][4] ][ unit472_1[i][5] ] >0);
		X_contra = ( LargeX[472][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit472_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[472][0]=0; L[472][1]=1;}
			satisfiable[472][1]=satisfiable[472][1] & ((x[472] ^ 1) | (x[ unit472_1[i][0] ] ^ unit472_1[i][1]) |(x[ unit472_1[i][2] ] ^ unit472_1[i][3]));
			}
		if(X_contra>0) L[472][1]=2;
		}
	//Check all rules of unit[473][0]
	L[473][0] = LargeX[473][1]>0 ? 1 : 0;
	satisfiable[473][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit473_0[i][0] ][ unit473_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit473_0[i][2] ][ unit473_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit473_0[i][4] ][ unit473_0[i][5] ] >0);
		X_contra = ( LargeX[473][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit473_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[473][1]=0; L[473][0]=1;}
			satisfiable[473][0]=satisfiable[473][0] & ((x[473] ^ 0) | (x[ unit473_0[i][0] ] ^ unit473_0[i][1]) |(x[ unit473_0[i][2] ] ^ unit473_0[i][3]));
			}
		if(X_contra>0) L[473][0]=2;
		}
	//Check all rules of unit[473][1]
	L[473][1] = LargeX[473][0]>0 ? 1 : 0;
	satisfiable[473][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit473_1[i][0] ][ unit473_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit473_1[i][2] ][ unit473_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit473_1[i][4] ][ unit473_1[i][5] ] >0);
		X_contra = ( LargeX[473][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit473_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[473][0]=0; L[473][1]=1;}
			satisfiable[473][1]=satisfiable[473][1] & ((x[473] ^ 1) | (x[ unit473_1[i][0] ] ^ unit473_1[i][1]) |(x[ unit473_1[i][2] ] ^ unit473_1[i][3]));
			}
		if(X_contra>0) L[473][1]=2;
		}
	//Check all rules of unit[474][0]
	L[474][0] = LargeX[474][1]>0 ? 1 : 0;
	satisfiable[474][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit474_0[i][0] ][ unit474_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit474_0[i][2] ][ unit474_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit474_0[i][4] ][ unit474_0[i][5] ] >0);
		X_contra = ( LargeX[474][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit474_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[474][1]=0; L[474][0]=1;}
			satisfiable[474][0]=satisfiable[474][0] & ((x[474] ^ 0) | (x[ unit474_0[i][0] ] ^ unit474_0[i][1]) |(x[ unit474_0[i][2] ] ^ unit474_0[i][3]));
			}
		if(X_contra>0) L[474][0]=2;
		}
	//Check all rules of unit[474][1]
	L[474][1] = LargeX[474][0]>0 ? 1 : 0;
	satisfiable[474][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit474_1[i][0] ][ unit474_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit474_1[i][2] ][ unit474_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit474_1[i][4] ][ unit474_1[i][5] ] >0);
		X_contra = ( LargeX[474][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit474_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[474][0]=0; L[474][1]=1;}
			satisfiable[474][1]=satisfiable[474][1] & ((x[474] ^ 1) | (x[ unit474_1[i][0] ] ^ unit474_1[i][1]) |(x[ unit474_1[i][2] ] ^ unit474_1[i][3]));
			}
		if(X_contra>0) L[474][1]=2;
		}
	//Check all rules of unit[475][0]
	L[475][0] = LargeX[475][1]>0 ? 1 : 0;
	satisfiable[475][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit475_0[i][0] ][ unit475_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit475_0[i][2] ][ unit475_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit475_0[i][4] ][ unit475_0[i][5] ] >0);
		X_contra = ( LargeX[475][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit475_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[475][1]=0; L[475][0]=1;}
			satisfiable[475][0]=satisfiable[475][0] & ((x[475] ^ 0) | (x[ unit475_0[i][0] ] ^ unit475_0[i][1]) |(x[ unit475_0[i][2] ] ^ unit475_0[i][3]));
			}
		if(X_contra>0) L[475][0]=2;
		}
	//Check all rules of unit[475][1]
	L[475][1] = LargeX[475][0]>0 ? 1 : 0;
	satisfiable[475][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit475_1[i][0] ][ unit475_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit475_1[i][2] ][ unit475_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit475_1[i][4] ][ unit475_1[i][5] ] >0);
		X_contra = ( LargeX[475][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit475_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[475][0]=0; L[475][1]=1;}
			satisfiable[475][1]=satisfiable[475][1] & ((x[475] ^ 1) | (x[ unit475_1[i][0] ] ^ unit475_1[i][1]) |(x[ unit475_1[i][2] ] ^ unit475_1[i][3]));
			}
		if(X_contra>0) L[475][1]=2;
		}
	//Check all rules of unit[476][0]
	L[476][0] = LargeX[476][1]>0 ? 1 : 0;
	satisfiable[476][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit476_0[i][0] ][ unit476_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit476_0[i][2] ][ unit476_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit476_0[i][4] ][ unit476_0[i][5] ] >0);
		X_contra = ( LargeX[476][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit476_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[476][1]=0; L[476][0]=1;}
			satisfiable[476][0]=satisfiable[476][0] & ((x[476] ^ 0) | (x[ unit476_0[i][0] ] ^ unit476_0[i][1]) |(x[ unit476_0[i][2] ] ^ unit476_0[i][3]));
			}
		if(X_contra>0) L[476][0]=2;
		}
	//Check all rules of unit[476][1]
	L[476][1] = LargeX[476][0]>0 ? 1 : 0;
	satisfiable[476][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit476_1[i][0] ][ unit476_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit476_1[i][2] ][ unit476_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit476_1[i][4] ][ unit476_1[i][5] ] >0);
		X_contra = ( LargeX[476][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit476_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[476][0]=0; L[476][1]=1;}
			satisfiable[476][1]=satisfiable[476][1] & ((x[476] ^ 1) | (x[ unit476_1[i][0] ] ^ unit476_1[i][1]) |(x[ unit476_1[i][2] ] ^ unit476_1[i][3]));
			}
		if(X_contra>0) L[476][1]=2;
		}
	//Check all rules of unit[477][0]
	L[477][0] = LargeX[477][1]>0 ? 1 : 0;
	satisfiable[477][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit477_0[i][0] ][ unit477_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit477_0[i][2] ][ unit477_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit477_0[i][4] ][ unit477_0[i][5] ] >0);
		X_contra = ( LargeX[477][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit477_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[477][1]=0; L[477][0]=1;}
			satisfiable[477][0]=satisfiable[477][0] & ((x[477] ^ 0) | (x[ unit477_0[i][0] ] ^ unit477_0[i][1]) |(x[ unit477_0[i][2] ] ^ unit477_0[i][3]));
			}
		if(X_contra>0) L[477][0]=2;
		}
	//Check all rules of unit[477][1]
	L[477][1] = LargeX[477][0]>0 ? 1 : 0;
	satisfiable[477][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit477_1[i][0] ][ unit477_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit477_1[i][2] ][ unit477_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit477_1[i][4] ][ unit477_1[i][5] ] >0);
		X_contra = ( LargeX[477][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit477_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[477][0]=0; L[477][1]=1;}
			satisfiable[477][1]=satisfiable[477][1] & ((x[477] ^ 1) | (x[ unit477_1[i][0] ] ^ unit477_1[i][1]) |(x[ unit477_1[i][2] ] ^ unit477_1[i][3]));
			}
		if(X_contra>0) L[477][1]=2;
		}
	//Check all rules of unit[478][0]
	L[478][0] = LargeX[478][1]>0 ? 1 : 0;
	satisfiable[478][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit478_0[i][0] ][ unit478_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit478_0[i][2] ][ unit478_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit478_0[i][4] ][ unit478_0[i][5] ] >0);
		X_contra = ( LargeX[478][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit478_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[478][1]=0; L[478][0]=1;}
			satisfiable[478][0]=satisfiable[478][0] & ((x[478] ^ 0) | (x[ unit478_0[i][0] ] ^ unit478_0[i][1]) |(x[ unit478_0[i][2] ] ^ unit478_0[i][3]));
			}
		if(X_contra>0) L[478][0]=2;
		}
	//Check all rules of unit[478][1]
	L[478][1] = LargeX[478][0]>0 ? 1 : 0;
	satisfiable[478][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit478_1[i][0] ][ unit478_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit478_1[i][2] ][ unit478_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit478_1[i][4] ][ unit478_1[i][5] ] >0);
		X_contra = ( LargeX[478][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit478_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[478][0]=0; L[478][1]=1;}
			satisfiable[478][1]=satisfiable[478][1] & ((x[478] ^ 1) | (x[ unit478_1[i][0] ] ^ unit478_1[i][1]) |(x[ unit478_1[i][2] ] ^ unit478_1[i][3]));
			}
		if(X_contra>0) L[478][1]=2;
		}
	//Check all rules of unit[479][0]
	L[479][0] = LargeX[479][1]>0 ? 1 : 0;
	satisfiable[479][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit479_0[i][0] ][ unit479_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit479_0[i][2] ][ unit479_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit479_0[i][4] ][ unit479_0[i][5] ] >0);
		X_contra = ( LargeX[479][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit479_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[479][1]=0; L[479][0]=1;}
			satisfiable[479][0]=satisfiable[479][0] & ((x[479] ^ 0) | (x[ unit479_0[i][0] ] ^ unit479_0[i][1]) |(x[ unit479_0[i][2] ] ^ unit479_0[i][3]));
			}
		if(X_contra>0) L[479][0]=2;
		}
	//Check all rules of unit[479][1]
	L[479][1] = LargeX[479][0]>0 ? 1 : 0;
	satisfiable[479][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit479_1[i][0] ][ unit479_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit479_1[i][2] ][ unit479_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit479_1[i][4] ][ unit479_1[i][5] ] >0);
		X_contra = ( LargeX[479][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit479_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[479][0]=0; L[479][1]=1;}
			satisfiable[479][1]=satisfiable[479][1] & ((x[479] ^ 1) | (x[ unit479_1[i][0] ] ^ unit479_1[i][1]) |(x[ unit479_1[i][2] ] ^ unit479_1[i][3]));
			}
		if(X_contra>0) L[479][1]=2;
		}
	//Check all rules of unit[480][0]
	L[480][0] = LargeX[480][1]>0 ? 1 : 0;
	satisfiable[480][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit480_0[i][0] ][ unit480_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit480_0[i][2] ][ unit480_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit480_0[i][4] ][ unit480_0[i][5] ] >0);
		X_contra = ( LargeX[480][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit480_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[480][1]=0; L[480][0]=1;}
			satisfiable[480][0]=satisfiable[480][0] & ((x[480] ^ 0) | (x[ unit480_0[i][0] ] ^ unit480_0[i][1]) |(x[ unit480_0[i][2] ] ^ unit480_0[i][3]));
			}
		if(X_contra>0) L[480][0]=2;
		}
	//Check all rules of unit[480][1]
	L[480][1] = LargeX[480][0]>0 ? 1 : 0;
	satisfiable[480][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit480_1[i][0] ][ unit480_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit480_1[i][2] ][ unit480_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit480_1[i][4] ][ unit480_1[i][5] ] >0);
		X_contra = ( LargeX[480][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit480_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[480][0]=0; L[480][1]=1;}
			satisfiable[480][1]=satisfiable[480][1] & ((x[480] ^ 1) | (x[ unit480_1[i][0] ] ^ unit480_1[i][1]) |(x[ unit480_1[i][2] ] ^ unit480_1[i][3]));
			}
		if(X_contra>0) L[480][1]=2;
		}
	//Check all rules of unit[481][0]
	L[481][0] = LargeX[481][1]>0 ? 1 : 0;
	satisfiable[481][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit481_0[i][0] ][ unit481_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit481_0[i][2] ][ unit481_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit481_0[i][4] ][ unit481_0[i][5] ] >0);
		X_contra = ( LargeX[481][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit481_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[481][1]=0; L[481][0]=1;}
			satisfiable[481][0]=satisfiable[481][0] & ((x[481] ^ 0) | (x[ unit481_0[i][0] ] ^ unit481_0[i][1]) |(x[ unit481_0[i][2] ] ^ unit481_0[i][3]));
			}
		if(X_contra>0) L[481][0]=2;
		}
	//Check all rules of unit[481][1]
	L[481][1] = LargeX[481][0]>0 ? 1 : 0;
	satisfiable[481][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit481_1[i][0] ][ unit481_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit481_1[i][2] ][ unit481_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit481_1[i][4] ][ unit481_1[i][5] ] >0);
		X_contra = ( LargeX[481][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit481_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[481][0]=0; L[481][1]=1;}
			satisfiable[481][1]=satisfiable[481][1] & ((x[481] ^ 1) | (x[ unit481_1[i][0] ] ^ unit481_1[i][1]) |(x[ unit481_1[i][2] ] ^ unit481_1[i][3]));
			}
		if(X_contra>0) L[481][1]=2;
		}
	//Check all rules of unit[482][0]
	L[482][0] = LargeX[482][1]>0 ? 1 : 0;
	satisfiable[482][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit482_0[i][0] ][ unit482_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit482_0[i][2] ][ unit482_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit482_0[i][4] ][ unit482_0[i][5] ] >0);
		X_contra = ( LargeX[482][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit482_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[482][1]=0; L[482][0]=1;}
			satisfiable[482][0]=satisfiable[482][0] & ((x[482] ^ 0) | (x[ unit482_0[i][0] ] ^ unit482_0[i][1]) |(x[ unit482_0[i][2] ] ^ unit482_0[i][3]));
			}
		if(X_contra>0) L[482][0]=2;
		}
	//Check all rules of unit[482][1]
	L[482][1] = LargeX[482][0]>0 ? 1 : 0;
	satisfiable[482][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit482_1[i][0] ][ unit482_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit482_1[i][2] ][ unit482_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit482_1[i][4] ][ unit482_1[i][5] ] >0);
		X_contra = ( LargeX[482][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit482_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[482][0]=0; L[482][1]=1;}
			satisfiable[482][1]=satisfiable[482][1] & ((x[482] ^ 1) | (x[ unit482_1[i][0] ] ^ unit482_1[i][1]) |(x[ unit482_1[i][2] ] ^ unit482_1[i][3]));
			}
		if(X_contra>0) L[482][1]=2;
		}
	//Check all rules of unit[483][0]
	L[483][0] = LargeX[483][1]>0 ? 1 : 0;
	satisfiable[483][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit483_0[i][0] ][ unit483_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit483_0[i][2] ][ unit483_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit483_0[i][4] ][ unit483_0[i][5] ] >0);
		X_contra = ( LargeX[483][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit483_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[483][1]=0; L[483][0]=1;}
			satisfiable[483][0]=satisfiable[483][0] & ((x[483] ^ 0) | (x[ unit483_0[i][0] ] ^ unit483_0[i][1]) |(x[ unit483_0[i][2] ] ^ unit483_0[i][3]));
			}
		if(X_contra>0) L[483][0]=2;
		}
	//Check all rules of unit[483][1]
	L[483][1] = LargeX[483][0]>0 ? 1 : 0;
	satisfiable[483][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit483_1[i][0] ][ unit483_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit483_1[i][2] ][ unit483_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit483_1[i][4] ][ unit483_1[i][5] ] >0);
		X_contra = ( LargeX[483][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit483_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[483][0]=0; L[483][1]=1;}
			satisfiable[483][1]=satisfiable[483][1] & ((x[483] ^ 1) | (x[ unit483_1[i][0] ] ^ unit483_1[i][1]) |(x[ unit483_1[i][2] ] ^ unit483_1[i][3]));
			}
		if(X_contra>0) L[483][1]=2;
		}
	//Check all rules of unit[484][0]
	L[484][0] = LargeX[484][1]>0 ? 1 : 0;
	satisfiable[484][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit484_0[i][0] ][ unit484_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit484_0[i][2] ][ unit484_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit484_0[i][4] ][ unit484_0[i][5] ] >0);
		X_contra = ( LargeX[484][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit484_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[484][1]=0; L[484][0]=1;}
			satisfiable[484][0]=satisfiable[484][0] & ((x[484] ^ 0) | (x[ unit484_0[i][0] ] ^ unit484_0[i][1]) |(x[ unit484_0[i][2] ] ^ unit484_0[i][3]));
			}
		if(X_contra>0) L[484][0]=2;
		}
	//Check all rules of unit[484][1]
	L[484][1] = LargeX[484][0]>0 ? 1 : 0;
	satisfiable[484][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit484_1[i][0] ][ unit484_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit484_1[i][2] ][ unit484_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit484_1[i][4] ][ unit484_1[i][5] ] >0);
		X_contra = ( LargeX[484][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit484_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[484][0]=0; L[484][1]=1;}
			satisfiable[484][1]=satisfiable[484][1] & ((x[484] ^ 1) | (x[ unit484_1[i][0] ] ^ unit484_1[i][1]) |(x[ unit484_1[i][2] ] ^ unit484_1[i][3]));
			}
		if(X_contra>0) L[484][1]=2;
		}
	//Check all rules of unit[485][0]
	L[485][0] = LargeX[485][1]>0 ? 1 : 0;
	satisfiable[485][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit485_0[i][0] ][ unit485_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit485_0[i][2] ][ unit485_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit485_0[i][4] ][ unit485_0[i][5] ] >0);
		X_contra = ( LargeX[485][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit485_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[485][1]=0; L[485][0]=1;}
			satisfiable[485][0]=satisfiable[485][0] & ((x[485] ^ 0) | (x[ unit485_0[i][0] ] ^ unit485_0[i][1]) |(x[ unit485_0[i][2] ] ^ unit485_0[i][3]));
			}
		if(X_contra>0) L[485][0]=2;
		}
	//Check all rules of unit[485][1]
	L[485][1] = LargeX[485][0]>0 ? 1 : 0;
	satisfiable[485][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit485_1[i][0] ][ unit485_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit485_1[i][2] ][ unit485_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit485_1[i][4] ][ unit485_1[i][5] ] >0);
		X_contra = ( LargeX[485][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit485_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[485][0]=0; L[485][1]=1;}
			satisfiable[485][1]=satisfiable[485][1] & ((x[485] ^ 1) | (x[ unit485_1[i][0] ] ^ unit485_1[i][1]) |(x[ unit485_1[i][2] ] ^ unit485_1[i][3]));
			}
		if(X_contra>0) L[485][1]=2;
		}
	//Check all rules of unit[486][0]
	L[486][0] = LargeX[486][1]>0 ? 1 : 0;
	satisfiable[486][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit486_0[i][0] ][ unit486_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit486_0[i][2] ][ unit486_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit486_0[i][4] ][ unit486_0[i][5] ] >0);
		X_contra = ( LargeX[486][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit486_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[486][1]=0; L[486][0]=1;}
			satisfiable[486][0]=satisfiable[486][0] & ((x[486] ^ 0) | (x[ unit486_0[i][0] ] ^ unit486_0[i][1]) |(x[ unit486_0[i][2] ] ^ unit486_0[i][3]));
			}
		if(X_contra>0) L[486][0]=2;
		}
	//Check all rules of unit[486][1]
	L[486][1] = LargeX[486][0]>0 ? 1 : 0;
	satisfiable[486][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit486_1[i][0] ][ unit486_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit486_1[i][2] ][ unit486_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit486_1[i][4] ][ unit486_1[i][5] ] >0);
		X_contra = ( LargeX[486][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit486_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[486][0]=0; L[486][1]=1;}
			satisfiable[486][1]=satisfiable[486][1] & ((x[486] ^ 1) | (x[ unit486_1[i][0] ] ^ unit486_1[i][1]) |(x[ unit486_1[i][2] ] ^ unit486_1[i][3]));
			}
		if(X_contra>0) L[486][1]=2;
		}
	//Check all rules of unit[487][0]
	L[487][0] = LargeX[487][1]>0 ? 1 : 0;
	satisfiable[487][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit487_0[i][0] ][ unit487_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit487_0[i][2] ][ unit487_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit487_0[i][4] ][ unit487_0[i][5] ] >0);
		X_contra = ( LargeX[487][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit487_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[487][1]=0; L[487][0]=1;}
			satisfiable[487][0]=satisfiable[487][0] & ((x[487] ^ 0) | (x[ unit487_0[i][0] ] ^ unit487_0[i][1]) |(x[ unit487_0[i][2] ] ^ unit487_0[i][3]));
			}
		if(X_contra>0) L[487][0]=2;
		}
	//Check all rules of unit[487][1]
	L[487][1] = LargeX[487][0]>0 ? 1 : 0;
	satisfiable[487][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit487_1[i][0] ][ unit487_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit487_1[i][2] ][ unit487_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit487_1[i][4] ][ unit487_1[i][5] ] >0);
		X_contra = ( LargeX[487][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit487_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[487][0]=0; L[487][1]=1;}
			satisfiable[487][1]=satisfiable[487][1] & ((x[487] ^ 1) | (x[ unit487_1[i][0] ] ^ unit487_1[i][1]) |(x[ unit487_1[i][2] ] ^ unit487_1[i][3]));
			}
		if(X_contra>0) L[487][1]=2;
		}
	//Check all rules of unit[488][0]
	L[488][0] = LargeX[488][1]>0 ? 1 : 0;
	satisfiable[488][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit488_0[i][0] ][ unit488_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit488_0[i][2] ][ unit488_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit488_0[i][4] ][ unit488_0[i][5] ] >0);
		X_contra = ( LargeX[488][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit488_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[488][1]=0; L[488][0]=1;}
			satisfiable[488][0]=satisfiable[488][0] & ((x[488] ^ 0) | (x[ unit488_0[i][0] ] ^ unit488_0[i][1]) |(x[ unit488_0[i][2] ] ^ unit488_0[i][3]));
			}
		if(X_contra>0) L[488][0]=2;
		}
	//Check all rules of unit[488][1]
	L[488][1] = LargeX[488][0]>0 ? 1 : 0;
	satisfiable[488][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit488_1[i][0] ][ unit488_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit488_1[i][2] ][ unit488_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit488_1[i][4] ][ unit488_1[i][5] ] >0);
		X_contra = ( LargeX[488][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit488_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[488][0]=0; L[488][1]=1;}
			satisfiable[488][1]=satisfiable[488][1] & ((x[488] ^ 1) | (x[ unit488_1[i][0] ] ^ unit488_1[i][1]) |(x[ unit488_1[i][2] ] ^ unit488_1[i][3]));
			}
		if(X_contra>0) L[488][1]=2;
		}
	//Check all rules of unit[489][0]
	L[489][0] = LargeX[489][1]>0 ? 1 : 0;
	satisfiable[489][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit489_0[i][0] ][ unit489_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit489_0[i][2] ][ unit489_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit489_0[i][4] ][ unit489_0[i][5] ] >0);
		X_contra = ( LargeX[489][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit489_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[489][1]=0; L[489][0]=1;}
			satisfiable[489][0]=satisfiable[489][0] & ((x[489] ^ 0) | (x[ unit489_0[i][0] ] ^ unit489_0[i][1]) |(x[ unit489_0[i][2] ] ^ unit489_0[i][3]));
			}
		if(X_contra>0) L[489][0]=2;
		}
	//Check all rules of unit[489][1]
	L[489][1] = LargeX[489][0]>0 ? 1 : 0;
	satisfiable[489][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit489_1[i][0] ][ unit489_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit489_1[i][2] ][ unit489_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit489_1[i][4] ][ unit489_1[i][5] ] >0);
		X_contra = ( LargeX[489][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit489_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[489][0]=0; L[489][1]=1;}
			satisfiable[489][1]=satisfiable[489][1] & ((x[489] ^ 1) | (x[ unit489_1[i][0] ] ^ unit489_1[i][1]) |(x[ unit489_1[i][2] ] ^ unit489_1[i][3]));
			}
		if(X_contra>0) L[489][1]=2;
		}
	//Check all rules of unit[490][0]
	L[490][0] = LargeX[490][1]>0 ? 1 : 0;
	satisfiable[490][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit490_0[i][0] ][ unit490_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit490_0[i][2] ][ unit490_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit490_0[i][4] ][ unit490_0[i][5] ] >0);
		X_contra = ( LargeX[490][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit490_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[490][1]=0; L[490][0]=1;}
			satisfiable[490][0]=satisfiable[490][0] & ((x[490] ^ 0) | (x[ unit490_0[i][0] ] ^ unit490_0[i][1]) |(x[ unit490_0[i][2] ] ^ unit490_0[i][3]));
			}
		if(X_contra>0) L[490][0]=2;
		}
	//Check all rules of unit[490][1]
	L[490][1] = LargeX[490][0]>0 ? 1 : 0;
	satisfiable[490][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit490_1[i][0] ][ unit490_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit490_1[i][2] ][ unit490_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit490_1[i][4] ][ unit490_1[i][5] ] >0);
		X_contra = ( LargeX[490][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit490_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[490][0]=0; L[490][1]=1;}
			satisfiable[490][1]=satisfiable[490][1] & ((x[490] ^ 1) | (x[ unit490_1[i][0] ] ^ unit490_1[i][1]) |(x[ unit490_1[i][2] ] ^ unit490_1[i][3]));
			}
		if(X_contra>0) L[490][1]=2;
		}
	//Check all rules of unit[491][0]
	L[491][0] = LargeX[491][1]>0 ? 1 : 0;
	satisfiable[491][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit491_0[i][0] ][ unit491_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit491_0[i][2] ][ unit491_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit491_0[i][4] ][ unit491_0[i][5] ] >0);
		X_contra = ( LargeX[491][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit491_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[491][1]=0; L[491][0]=1;}
			satisfiable[491][0]=satisfiable[491][0] & ((x[491] ^ 0) | (x[ unit491_0[i][0] ] ^ unit491_0[i][1]) |(x[ unit491_0[i][2] ] ^ unit491_0[i][3]));
			}
		if(X_contra>0) L[491][0]=2;
		}
	//Check all rules of unit[491][1]
	L[491][1] = LargeX[491][0]>0 ? 1 : 0;
	satisfiable[491][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit491_1[i][0] ][ unit491_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit491_1[i][2] ][ unit491_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit491_1[i][4] ][ unit491_1[i][5] ] >0);
		X_contra = ( LargeX[491][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit491_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[491][0]=0; L[491][1]=1;}
			satisfiable[491][1]=satisfiable[491][1] & ((x[491] ^ 1) | (x[ unit491_1[i][0] ] ^ unit491_1[i][1]) |(x[ unit491_1[i][2] ] ^ unit491_1[i][3]));
			}
		if(X_contra>0) L[491][1]=2;
		}
	//Check all rules of unit[492][0]
	L[492][0] = LargeX[492][1]>0 ? 1 : 0;
	satisfiable[492][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit492_0[i][0] ][ unit492_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit492_0[i][2] ][ unit492_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit492_0[i][4] ][ unit492_0[i][5] ] >0);
		X_contra = ( LargeX[492][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit492_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[492][1]=0; L[492][0]=1;}
			satisfiable[492][0]=satisfiable[492][0] & ((x[492] ^ 0) | (x[ unit492_0[i][0] ] ^ unit492_0[i][1]) |(x[ unit492_0[i][2] ] ^ unit492_0[i][3]));
			}
		if(X_contra>0) L[492][0]=2;
		}
	//Check all rules of unit[492][1]
	L[492][1] = LargeX[492][0]>0 ? 1 : 0;
	satisfiable[492][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit492_1[i][0] ][ unit492_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit492_1[i][2] ][ unit492_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit492_1[i][4] ][ unit492_1[i][5] ] >0);
		X_contra = ( LargeX[492][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit492_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[492][0]=0; L[492][1]=1;}
			satisfiable[492][1]=satisfiable[492][1] & ((x[492] ^ 1) | (x[ unit492_1[i][0] ] ^ unit492_1[i][1]) |(x[ unit492_1[i][2] ] ^ unit492_1[i][3]));
			}
		if(X_contra>0) L[492][1]=2;
		}
	//Check all rules of unit[493][0]
	L[493][0] = LargeX[493][1]>0 ? 1 : 0;
	satisfiable[493][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit493_0[i][0] ][ unit493_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit493_0[i][2] ][ unit493_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit493_0[i][4] ][ unit493_0[i][5] ] >0);
		X_contra = ( LargeX[493][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit493_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[493][1]=0; L[493][0]=1;}
			satisfiable[493][0]=satisfiable[493][0] & ((x[493] ^ 0) | (x[ unit493_0[i][0] ] ^ unit493_0[i][1]) |(x[ unit493_0[i][2] ] ^ unit493_0[i][3]));
			}
		if(X_contra>0) L[493][0]=2;
		}
	//Check all rules of unit[493][1]
	L[493][1] = LargeX[493][0]>0 ? 1 : 0;
	satisfiable[493][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit493_1[i][0] ][ unit493_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit493_1[i][2] ][ unit493_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit493_1[i][4] ][ unit493_1[i][5] ] >0);
		X_contra = ( LargeX[493][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit493_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[493][0]=0; L[493][1]=1;}
			satisfiable[493][1]=satisfiable[493][1] & ((x[493] ^ 1) | (x[ unit493_1[i][0] ] ^ unit493_1[i][1]) |(x[ unit493_1[i][2] ] ^ unit493_1[i][3]));
			}
		if(X_contra>0) L[493][1]=2;
		}
	//Check all rules of unit[494][0]
	L[494][0] = LargeX[494][1]>0 ? 1 : 0;
	satisfiable[494][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit494_0[i][0] ][ unit494_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit494_0[i][2] ][ unit494_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit494_0[i][4] ][ unit494_0[i][5] ] >0);
		X_contra = ( LargeX[494][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit494_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[494][1]=0; L[494][0]=1;}
			satisfiable[494][0]=satisfiable[494][0] & ((x[494] ^ 0) | (x[ unit494_0[i][0] ] ^ unit494_0[i][1]) |(x[ unit494_0[i][2] ] ^ unit494_0[i][3]));
			}
		if(X_contra>0) L[494][0]=2;
		}
	//Check all rules of unit[494][1]
	L[494][1] = LargeX[494][0]>0 ? 1 : 0;
	satisfiable[494][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit494_1[i][0] ][ unit494_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit494_1[i][2] ][ unit494_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit494_1[i][4] ][ unit494_1[i][5] ] >0);
		X_contra = ( LargeX[494][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit494_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[494][0]=0; L[494][1]=1;}
			satisfiable[494][1]=satisfiable[494][1] & ((x[494] ^ 1) | (x[ unit494_1[i][0] ] ^ unit494_1[i][1]) |(x[ unit494_1[i][2] ] ^ unit494_1[i][3]));
			}
		if(X_contra>0) L[494][1]=2;
		}
	//Check all rules of unit[495][0]
	L[495][0] = LargeX[495][1]>0 ? 1 : 0;
	satisfiable[495][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit495_0[i][0] ][ unit495_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit495_0[i][2] ][ unit495_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit495_0[i][4] ][ unit495_0[i][5] ] >0);
		X_contra = ( LargeX[495][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit495_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[495][1]=0; L[495][0]=1;}
			satisfiable[495][0]=satisfiable[495][0] & ((x[495] ^ 0) | (x[ unit495_0[i][0] ] ^ unit495_0[i][1]) |(x[ unit495_0[i][2] ] ^ unit495_0[i][3]));
			}
		if(X_contra>0) L[495][0]=2;
		}
	//Check all rules of unit[495][1]
	L[495][1] = LargeX[495][0]>0 ? 1 : 0;
	satisfiable[495][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit495_1[i][0] ][ unit495_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit495_1[i][2] ][ unit495_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit495_1[i][4] ][ unit495_1[i][5] ] >0);
		X_contra = ( LargeX[495][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit495_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[495][0]=0; L[495][1]=1;}
			satisfiable[495][1]=satisfiable[495][1] & ((x[495] ^ 1) | (x[ unit495_1[i][0] ] ^ unit495_1[i][1]) |(x[ unit495_1[i][2] ] ^ unit495_1[i][3]));
			}
		if(X_contra>0) L[495][1]=2;
		}
	//Check all rules of unit[496][0]
	L[496][0] = LargeX[496][1]>0 ? 1 : 0;
	satisfiable[496][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit496_0[i][0] ][ unit496_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit496_0[i][2] ][ unit496_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit496_0[i][4] ][ unit496_0[i][5] ] >0);
		X_contra = ( LargeX[496][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit496_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[496][1]=0; L[496][0]=1;}
			satisfiable[496][0]=satisfiable[496][0] & ((x[496] ^ 0) | (x[ unit496_0[i][0] ] ^ unit496_0[i][1]) |(x[ unit496_0[i][2] ] ^ unit496_0[i][3]));
			}
		if(X_contra>0) L[496][0]=2;
		}
	//Check all rules of unit[496][1]
	L[496][1] = LargeX[496][0]>0 ? 1 : 0;
	satisfiable[496][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit496_1[i][0] ][ unit496_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit496_1[i][2] ][ unit496_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit496_1[i][4] ][ unit496_1[i][5] ] >0);
		X_contra = ( LargeX[496][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit496_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[496][0]=0; L[496][1]=1;}
			satisfiable[496][1]=satisfiable[496][1] & ((x[496] ^ 1) | (x[ unit496_1[i][0] ] ^ unit496_1[i][1]) |(x[ unit496_1[i][2] ] ^ unit496_1[i][3]));
			}
		if(X_contra>0) L[496][1]=2;
		}
	//Check all rules of unit[497][0]
	L[497][0] = LargeX[497][1]>0 ? 1 : 0;
	satisfiable[497][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit497_0[i][0] ][ unit497_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit497_0[i][2] ][ unit497_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit497_0[i][4] ][ unit497_0[i][5] ] >0);
		X_contra = ( LargeX[497][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit497_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[497][1]=0; L[497][0]=1;}
			satisfiable[497][0]=satisfiable[497][0] & ((x[497] ^ 0) | (x[ unit497_0[i][0] ] ^ unit497_0[i][1]) |(x[ unit497_0[i][2] ] ^ unit497_0[i][3]));
			}
		if(X_contra>0) L[497][0]=2;
		}
	//Check all rules of unit[497][1]
	L[497][1] = LargeX[497][0]>0 ? 1 : 0;
	satisfiable[497][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit497_1[i][0] ][ unit497_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit497_1[i][2] ][ unit497_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit497_1[i][4] ][ unit497_1[i][5] ] >0);
		X_contra = ( LargeX[497][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit497_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[497][0]=0; L[497][1]=1;}
			satisfiable[497][1]=satisfiable[497][1] & ((x[497] ^ 1) | (x[ unit497_1[i][0] ] ^ unit497_1[i][1]) |(x[ unit497_1[i][2] ] ^ unit497_1[i][3]));
			}
		if(X_contra>0) L[497][1]=2;
		}
	//Check all rules of unit[498][0]
	L[498][0] = LargeX[498][1]>0 ? 1 : 0;
	satisfiable[498][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit498_0[i][0] ][ unit498_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit498_0[i][2] ][ unit498_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit498_0[i][4] ][ unit498_0[i][5] ] >0);
		X_contra = ( LargeX[498][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit498_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[498][1]=0; L[498][0]=1;}
			satisfiable[498][0]=satisfiable[498][0] & ((x[498] ^ 0) | (x[ unit498_0[i][0] ] ^ unit498_0[i][1]) |(x[ unit498_0[i][2] ] ^ unit498_0[i][3]));
			}
		if(X_contra>0) L[498][0]=2;
		}
	//Check all rules of unit[498][1]
	L[498][1] = LargeX[498][0]>0 ? 1 : 0;
	satisfiable[498][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit498_1[i][0] ][ unit498_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit498_1[i][2] ][ unit498_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit498_1[i][4] ][ unit498_1[i][5] ] >0);
		X_contra = ( LargeX[498][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit498_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[498][0]=0; L[498][1]=1;}
			satisfiable[498][1]=satisfiable[498][1] & ((x[498] ^ 1) | (x[ unit498_1[i][0] ] ^ unit498_1[i][1]) |(x[ unit498_1[i][2] ] ^ unit498_1[i][3]));
			}
		if(X_contra>0) L[498][1]=2;
		}
	//Check all rules of unit[499][0]
	L[499][0] = LargeX[499][1]>0 ? 1 : 0;
	satisfiable[499][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit499_0[i][0] ][ unit499_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit499_0[i][2] ][ unit499_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit499_0[i][4] ][ unit499_0[i][5] ] >0);
		X_contra = ( LargeX[499][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit499_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[499][1]=0; L[499][0]=1;}
			satisfiable[499][0]=satisfiable[499][0] & ((x[499] ^ 0) | (x[ unit499_0[i][0] ] ^ unit499_0[i][1]) |(x[ unit499_0[i][2] ] ^ unit499_0[i][3]));
			}
		if(X_contra>0) L[499][0]=2;
		}
	//Check all rules of unit[499][1]
	L[499][1] = LargeX[499][0]>0 ? 1 : 0;
	satisfiable[499][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit499_1[i][0] ][ unit499_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit499_1[i][2] ][ unit499_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit499_1[i][4] ][ unit499_1[i][5] ] >0);
		X_contra = ( LargeX[499][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit499_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[499][0]=0; L[499][1]=1;}
			satisfiable[499][1]=satisfiable[499][1] & ((x[499] ^ 1) | (x[ unit499_1[i][0] ] ^ unit499_1[i][1]) |(x[ unit499_1[i][2] ] ^ unit499_1[i][3]));
			}
		if(X_contra>0) L[499][1]=2;
		}
	//Check all rules of unit[500][0]
	L[500][0] = LargeX[500][1]>0 ? 1 : 0;
	satisfiable[500][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit500_0[i][0] ][ unit500_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit500_0[i][2] ][ unit500_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit500_0[i][4] ][ unit500_0[i][5] ] >0);
		X_contra = ( LargeX[500][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit500_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[500][1]=0; L[500][0]=1;}
			satisfiable[500][0]=satisfiable[500][0] & ((x[500] ^ 0) | (x[ unit500_0[i][0] ] ^ unit500_0[i][1]) |(x[ unit500_0[i][2] ] ^ unit500_0[i][3]));
			}
		if(X_contra>0) L[500][0]=2;
		}
	//Check all rules of unit[500][1]
	L[500][1] = LargeX[500][0]>0 ? 1 : 0;
	satisfiable[500][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit500_1[i][0] ][ unit500_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit500_1[i][2] ][ unit500_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit500_1[i][4] ][ unit500_1[i][5] ] >0);
		X_contra = ( LargeX[500][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit500_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[500][0]=0; L[500][1]=1;}
			satisfiable[500][1]=satisfiable[500][1] & ((x[500] ^ 1) | (x[ unit500_1[i][0] ] ^ unit500_1[i][1]) |(x[ unit500_1[i][2] ] ^ unit500_1[i][3]));
			}
		if(X_contra>0) L[500][1]=2;
		}
	//Check all rules of unit[501][0]
	L[501][0] = LargeX[501][1]>0 ? 1 : 0;
	satisfiable[501][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit501_0[i][0] ][ unit501_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit501_0[i][2] ][ unit501_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit501_0[i][4] ][ unit501_0[i][5] ] >0);
		X_contra = ( LargeX[501][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit501_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[501][1]=0; L[501][0]=1;}
			satisfiable[501][0]=satisfiable[501][0] & ((x[501] ^ 0) | (x[ unit501_0[i][0] ] ^ unit501_0[i][1]) |(x[ unit501_0[i][2] ] ^ unit501_0[i][3]));
			}
		if(X_contra>0) L[501][0]=2;
		}
	//Check all rules of unit[501][1]
	L[501][1] = LargeX[501][0]>0 ? 1 : 0;
	satisfiable[501][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit501_1[i][0] ][ unit501_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit501_1[i][2] ][ unit501_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit501_1[i][4] ][ unit501_1[i][5] ] >0);
		X_contra = ( LargeX[501][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit501_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[501][0]=0; L[501][1]=1;}
			satisfiable[501][1]=satisfiable[501][1] & ((x[501] ^ 1) | (x[ unit501_1[i][0] ] ^ unit501_1[i][1]) |(x[ unit501_1[i][2] ] ^ unit501_1[i][3]));
			}
		if(X_contra>0) L[501][1]=2;
		}
	//Check all rules of unit[502][0]
	L[502][0] = LargeX[502][1]>0 ? 1 : 0;
	satisfiable[502][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit502_0[i][0] ][ unit502_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit502_0[i][2] ][ unit502_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit502_0[i][4] ][ unit502_0[i][5] ] >0);
		X_contra = ( LargeX[502][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit502_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[502][1]=0; L[502][0]=1;}
			satisfiable[502][0]=satisfiable[502][0] & ((x[502] ^ 0) | (x[ unit502_0[i][0] ] ^ unit502_0[i][1]) |(x[ unit502_0[i][2] ] ^ unit502_0[i][3]));
			}
		if(X_contra>0) L[502][0]=2;
		}
	//Check all rules of unit[502][1]
	L[502][1] = LargeX[502][0]>0 ? 1 : 0;
	satisfiable[502][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit502_1[i][0] ][ unit502_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit502_1[i][2] ][ unit502_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit502_1[i][4] ][ unit502_1[i][5] ] >0);
		X_contra = ( LargeX[502][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit502_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[502][0]=0; L[502][1]=1;}
			satisfiable[502][1]=satisfiable[502][1] & ((x[502] ^ 1) | (x[ unit502_1[i][0] ] ^ unit502_1[i][1]) |(x[ unit502_1[i][2] ] ^ unit502_1[i][3]));
			}
		if(X_contra>0) L[502][1]=2;
		}
	//Check all rules of unit[503][0]
	L[503][0] = LargeX[503][1]>0 ? 1 : 0;
	satisfiable[503][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit503_0[i][0] ][ unit503_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit503_0[i][2] ][ unit503_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit503_0[i][4] ][ unit503_0[i][5] ] >0);
		X_contra = ( LargeX[503][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit503_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[503][1]=0; L[503][0]=1;}
			satisfiable[503][0]=satisfiable[503][0] & ((x[503] ^ 0) | (x[ unit503_0[i][0] ] ^ unit503_0[i][1]) |(x[ unit503_0[i][2] ] ^ unit503_0[i][3]));
			}
		if(X_contra>0) L[503][0]=2;
		}
	//Check all rules of unit[503][1]
	L[503][1] = LargeX[503][0]>0 ? 1 : 0;
	satisfiable[503][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit503_1[i][0] ][ unit503_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit503_1[i][2] ][ unit503_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit503_1[i][4] ][ unit503_1[i][5] ] >0);
		X_contra = ( LargeX[503][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit503_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[503][0]=0; L[503][1]=1;}
			satisfiable[503][1]=satisfiable[503][1] & ((x[503] ^ 1) | (x[ unit503_1[i][0] ] ^ unit503_1[i][1]) |(x[ unit503_1[i][2] ] ^ unit503_1[i][3]));
			}
		if(X_contra>0) L[503][1]=2;
		}
	//Check all rules of unit[504][0]
	L[504][0] = LargeX[504][1]>0 ? 1 : 0;
	satisfiable[504][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit504_0[i][0] ][ unit504_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit504_0[i][2] ][ unit504_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit504_0[i][4] ][ unit504_0[i][5] ] >0);
		X_contra = ( LargeX[504][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit504_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[504][1]=0; L[504][0]=1;}
			satisfiable[504][0]=satisfiable[504][0] & ((x[504] ^ 0) | (x[ unit504_0[i][0] ] ^ unit504_0[i][1]) |(x[ unit504_0[i][2] ] ^ unit504_0[i][3]));
			}
		if(X_contra>0) L[504][0]=2;
		}
	//Check all rules of unit[504][1]
	L[504][1] = LargeX[504][0]>0 ? 1 : 0;
	satisfiable[504][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit504_1[i][0] ][ unit504_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit504_1[i][2] ][ unit504_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit504_1[i][4] ][ unit504_1[i][5] ] >0);
		X_contra = ( LargeX[504][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit504_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[504][0]=0; L[504][1]=1;}
			satisfiable[504][1]=satisfiable[504][1] & ((x[504] ^ 1) | (x[ unit504_1[i][0] ] ^ unit504_1[i][1]) |(x[ unit504_1[i][2] ] ^ unit504_1[i][3]));
			}
		if(X_contra>0) L[504][1]=2;
		}
	//Check all rules of unit[505][0]
	L[505][0] = LargeX[505][1]>0 ? 1 : 0;
	satisfiable[505][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit505_0[i][0] ][ unit505_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit505_0[i][2] ][ unit505_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit505_0[i][4] ][ unit505_0[i][5] ] >0);
		X_contra = ( LargeX[505][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit505_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[505][1]=0; L[505][0]=1;}
			satisfiable[505][0]=satisfiable[505][0] & ((x[505] ^ 0) | (x[ unit505_0[i][0] ] ^ unit505_0[i][1]) |(x[ unit505_0[i][2] ] ^ unit505_0[i][3]));
			}
		if(X_contra>0) L[505][0]=2;
		}
	//Check all rules of unit[505][1]
	L[505][1] = LargeX[505][0]>0 ? 1 : 0;
	satisfiable[505][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit505_1[i][0] ][ unit505_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit505_1[i][2] ][ unit505_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit505_1[i][4] ][ unit505_1[i][5] ] >0);
		X_contra = ( LargeX[505][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit505_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[505][0]=0; L[505][1]=1;}
			satisfiable[505][1]=satisfiable[505][1] & ((x[505] ^ 1) | (x[ unit505_1[i][0] ] ^ unit505_1[i][1]) |(x[ unit505_1[i][2] ] ^ unit505_1[i][3]));
			}
		if(X_contra>0) L[505][1]=2;
		}
	//Check all rules of unit[506][0]
	L[506][0] = LargeX[506][1]>0 ? 1 : 0;
	satisfiable[506][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit506_0[i][0] ][ unit506_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit506_0[i][2] ][ unit506_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit506_0[i][4] ][ unit506_0[i][5] ] >0);
		X_contra = ( LargeX[506][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit506_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[506][1]=0; L[506][0]=1;}
			satisfiable[506][0]=satisfiable[506][0] & ((x[506] ^ 0) | (x[ unit506_0[i][0] ] ^ unit506_0[i][1]) |(x[ unit506_0[i][2] ] ^ unit506_0[i][3]));
			}
		if(X_contra>0) L[506][0]=2;
		}
	//Check all rules of unit[506][1]
	L[506][1] = LargeX[506][0]>0 ? 1 : 0;
	satisfiable[506][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit506_1[i][0] ][ unit506_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit506_1[i][2] ][ unit506_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit506_1[i][4] ][ unit506_1[i][5] ] >0);
		X_contra = ( LargeX[506][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit506_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[506][0]=0; L[506][1]=1;}
			satisfiable[506][1]=satisfiable[506][1] & ((x[506] ^ 1) | (x[ unit506_1[i][0] ] ^ unit506_1[i][1]) |(x[ unit506_1[i][2] ] ^ unit506_1[i][3]));
			}
		if(X_contra>0) L[506][1]=2;
		}
	//Check all rules of unit[507][0]
	L[507][0] = LargeX[507][1]>0 ? 1 : 0;
	satisfiable[507][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit507_0[i][0] ][ unit507_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit507_0[i][2] ][ unit507_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit507_0[i][4] ][ unit507_0[i][5] ] >0);
		X_contra = ( LargeX[507][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit507_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[507][1]=0; L[507][0]=1;}
			satisfiable[507][0]=satisfiable[507][0] & ((x[507] ^ 0) | (x[ unit507_0[i][0] ] ^ unit507_0[i][1]) |(x[ unit507_0[i][2] ] ^ unit507_0[i][3]));
			}
		if(X_contra>0) L[507][0]=2;
		}
	//Check all rules of unit[507][1]
	L[507][1] = LargeX[507][0]>0 ? 1 : 0;
	satisfiable[507][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit507_1[i][0] ][ unit507_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit507_1[i][2] ][ unit507_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit507_1[i][4] ][ unit507_1[i][5] ] >0);
		X_contra = ( LargeX[507][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit507_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[507][0]=0; L[507][1]=1;}
			satisfiable[507][1]=satisfiable[507][1] & ((x[507] ^ 1) | (x[ unit507_1[i][0] ] ^ unit507_1[i][1]) |(x[ unit507_1[i][2] ] ^ unit507_1[i][3]));
			}
		if(X_contra>0) L[507][1]=2;
		}
	//Check all rules of unit[508][0]
	L[508][0] = LargeX[508][1]>0 ? 1 : 0;
	satisfiable[508][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit508_0[i][0] ][ unit508_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit508_0[i][2] ][ unit508_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit508_0[i][4] ][ unit508_0[i][5] ] >0);
		X_contra = ( LargeX[508][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit508_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[508][1]=0; L[508][0]=1;}
			satisfiable[508][0]=satisfiable[508][0] & ((x[508] ^ 0) | (x[ unit508_0[i][0] ] ^ unit508_0[i][1]) |(x[ unit508_0[i][2] ] ^ unit508_0[i][3]));
			}
		if(X_contra>0) L[508][0]=2;
		}
	//Check all rules of unit[508][1]
	L[508][1] = LargeX[508][0]>0 ? 1 : 0;
	satisfiable[508][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit508_1[i][0] ][ unit508_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit508_1[i][2] ][ unit508_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit508_1[i][4] ][ unit508_1[i][5] ] >0);
		X_contra = ( LargeX[508][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit508_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[508][0]=0; L[508][1]=1;}
			satisfiable[508][1]=satisfiable[508][1] & ((x[508] ^ 1) | (x[ unit508_1[i][0] ] ^ unit508_1[i][1]) |(x[ unit508_1[i][2] ] ^ unit508_1[i][3]));
			}
		if(X_contra>0) L[508][1]=2;
		}
	//Check all rules of unit[509][0]
	L[509][0] = LargeX[509][1]>0 ? 1 : 0;
	satisfiable[509][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit509_0[i][0] ][ unit509_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit509_0[i][2] ][ unit509_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit509_0[i][4] ][ unit509_0[i][5] ] >0);
		X_contra = ( LargeX[509][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit509_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[509][1]=0; L[509][0]=1;}
			satisfiable[509][0]=satisfiable[509][0] & ((x[509] ^ 0) | (x[ unit509_0[i][0] ] ^ unit509_0[i][1]) |(x[ unit509_0[i][2] ] ^ unit509_0[i][3]));
			}
		if(X_contra>0) L[509][0]=2;
		}
	//Check all rules of unit[509][1]
	L[509][1] = LargeX[509][0]>0 ? 1 : 0;
	satisfiable[509][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit509_1[i][0] ][ unit509_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit509_1[i][2] ][ unit509_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit509_1[i][4] ][ unit509_1[i][5] ] >0);
		X_contra = ( LargeX[509][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit509_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[509][0]=0; L[509][1]=1;}
			satisfiable[509][1]=satisfiable[509][1] & ((x[509] ^ 1) | (x[ unit509_1[i][0] ] ^ unit509_1[i][1]) |(x[ unit509_1[i][2] ] ^ unit509_1[i][3]));
			}
		if(X_contra>0) L[509][1]=2;
		}
	//Check all rules of unit[510][0]
	L[510][0] = LargeX[510][1]>0 ? 1 : 0;
	satisfiable[510][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit510_0[i][0] ][ unit510_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit510_0[i][2] ][ unit510_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit510_0[i][4] ][ unit510_0[i][5] ] >0);
		X_contra = ( LargeX[510][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit510_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[510][1]=0; L[510][0]=1;}
			satisfiable[510][0]=satisfiable[510][0] & ((x[510] ^ 0) | (x[ unit510_0[i][0] ] ^ unit510_0[i][1]) |(x[ unit510_0[i][2] ] ^ unit510_0[i][3]));
			}
		if(X_contra>0) L[510][0]=2;
		}
	//Check all rules of unit[510][1]
	L[510][1] = LargeX[510][0]>0 ? 1 : 0;
	satisfiable[510][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit510_1[i][0] ][ unit510_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit510_1[i][2] ][ unit510_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit510_1[i][4] ][ unit510_1[i][5] ] >0);
		X_contra = ( LargeX[510][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit510_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[510][0]=0; L[510][1]=1;}
			satisfiable[510][1]=satisfiable[510][1] & ((x[510] ^ 1) | (x[ unit510_1[i][0] ] ^ unit510_1[i][1]) |(x[ unit510_1[i][2] ] ^ unit510_1[i][3]));
			}
		if(X_contra>0) L[510][1]=2;
		}
	//Check all rules of unit[511][0]
	L[511][0] = LargeX[511][1]>0 ? 1 : 0;
	satisfiable[511][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit511_0[i][0] ][ unit511_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit511_0[i][2] ][ unit511_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit511_0[i][4] ][ unit511_0[i][5] ] >0);
		X_contra = ( LargeX[511][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit511_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[511][1]=0; L[511][0]=1;}
			satisfiable[511][0]=satisfiable[511][0] & ((x[511] ^ 0) | (x[ unit511_0[i][0] ] ^ unit511_0[i][1]) |(x[ unit511_0[i][2] ] ^ unit511_0[i][3]));
			}
		if(X_contra>0) L[511][0]=2;
		}
	//Check all rules of unit[511][1]
	L[511][1] = LargeX[511][0]>0 ? 1 : 0;
	satisfiable[511][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit511_1[i][0] ][ unit511_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit511_1[i][2] ][ unit511_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit511_1[i][4] ][ unit511_1[i][5] ] >0);
		X_contra = ( LargeX[511][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit511_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[511][0]=0; L[511][1]=1;}
			satisfiable[511][1]=satisfiable[511][1] & ((x[511] ^ 1) | (x[ unit511_1[i][0] ] ^ unit511_1[i][1]) |(x[ unit511_1[i][2] ] ^ unit511_1[i][3]));
			}
		if(X_contra>0) L[511][1]=2;
		}
	//Check all rules of unit[512][0]
	L[512][0] = LargeX[512][1]>0 ? 1 : 0;
	satisfiable[512][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit512_0[i][0] ][ unit512_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit512_0[i][2] ][ unit512_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit512_0[i][4] ][ unit512_0[i][5] ] >0);
		X_contra = ( LargeX[512][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit512_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[512][1]=0; L[512][0]=1;}
			satisfiable[512][0]=satisfiable[512][0] & ((x[512] ^ 0) | (x[ unit512_0[i][0] ] ^ unit512_0[i][1]) |(x[ unit512_0[i][2] ] ^ unit512_0[i][3]));
			}
		if(X_contra>0) L[512][0]=2;
		}
	//Check all rules of unit[512][1]
	L[512][1] = LargeX[512][0]>0 ? 1 : 0;
	satisfiable[512][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit512_1[i][0] ][ unit512_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit512_1[i][2] ][ unit512_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit512_1[i][4] ][ unit512_1[i][5] ] >0);
		X_contra = ( LargeX[512][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit512_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[512][0]=0; L[512][1]=1;}
			satisfiable[512][1]=satisfiable[512][1] & ((x[512] ^ 1) | (x[ unit512_1[i][0] ] ^ unit512_1[i][1]) |(x[ unit512_1[i][2] ] ^ unit512_1[i][3]));
			}
		if(X_contra>0) L[512][1]=2;
		}
	//Check all rules of unit[513][0]
	L[513][0] = LargeX[513][1]>0 ? 1 : 0;
	satisfiable[513][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit513_0[i][0] ][ unit513_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit513_0[i][2] ][ unit513_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit513_0[i][4] ][ unit513_0[i][5] ] >0);
		X_contra = ( LargeX[513][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit513_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[513][1]=0; L[513][0]=1;}
			satisfiable[513][0]=satisfiable[513][0] & ((x[513] ^ 0) | (x[ unit513_0[i][0] ] ^ unit513_0[i][1]) |(x[ unit513_0[i][2] ] ^ unit513_0[i][3]));
			}
		if(X_contra>0) L[513][0]=2;
		}
	//Check all rules of unit[513][1]
	L[513][1] = LargeX[513][0]>0 ? 1 : 0;
	satisfiable[513][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit513_1[i][0] ][ unit513_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit513_1[i][2] ][ unit513_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit513_1[i][4] ][ unit513_1[i][5] ] >0);
		X_contra = ( LargeX[513][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit513_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[513][0]=0; L[513][1]=1;}
			satisfiable[513][1]=satisfiable[513][1] & ((x[513] ^ 1) | (x[ unit513_1[i][0] ] ^ unit513_1[i][1]) |(x[ unit513_1[i][2] ] ^ unit513_1[i][3]));
			}
		if(X_contra>0) L[513][1]=2;
		}
	//Check all rules of unit[514][0]
	L[514][0] = LargeX[514][1]>0 ? 1 : 0;
	satisfiable[514][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit514_0[i][0] ][ unit514_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit514_0[i][2] ][ unit514_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit514_0[i][4] ][ unit514_0[i][5] ] >0);
		X_contra = ( LargeX[514][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit514_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[514][1]=0; L[514][0]=1;}
			satisfiable[514][0]=satisfiable[514][0] & ((x[514] ^ 0) | (x[ unit514_0[i][0] ] ^ unit514_0[i][1]) |(x[ unit514_0[i][2] ] ^ unit514_0[i][3]));
			}
		if(X_contra>0) L[514][0]=2;
		}
	//Check all rules of unit[514][1]
	L[514][1] = LargeX[514][0]>0 ? 1 : 0;
	satisfiable[514][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit514_1[i][0] ][ unit514_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit514_1[i][2] ][ unit514_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit514_1[i][4] ][ unit514_1[i][5] ] >0);
		X_contra = ( LargeX[514][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit514_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[514][0]=0; L[514][1]=1;}
			satisfiable[514][1]=satisfiable[514][1] & ((x[514] ^ 1) | (x[ unit514_1[i][0] ] ^ unit514_1[i][1]) |(x[ unit514_1[i][2] ] ^ unit514_1[i][3]));
			}
		if(X_contra>0) L[514][1]=2;
		}
	//Check all rules of unit[515][0]
	L[515][0] = LargeX[515][1]>0 ? 1 : 0;
	satisfiable[515][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit515_0[i][0] ][ unit515_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit515_0[i][2] ][ unit515_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit515_0[i][4] ][ unit515_0[i][5] ] >0);
		X_contra = ( LargeX[515][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit515_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[515][1]=0; L[515][0]=1;}
			satisfiable[515][0]=satisfiable[515][0] & ((x[515] ^ 0) | (x[ unit515_0[i][0] ] ^ unit515_0[i][1]) |(x[ unit515_0[i][2] ] ^ unit515_0[i][3]));
			}
		if(X_contra>0) L[515][0]=2;
		}
	//Check all rules of unit[515][1]
	L[515][1] = LargeX[515][0]>0 ? 1 : 0;
	satisfiable[515][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit515_1[i][0] ][ unit515_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit515_1[i][2] ][ unit515_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit515_1[i][4] ][ unit515_1[i][5] ] >0);
		X_contra = ( LargeX[515][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit515_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[515][0]=0; L[515][1]=1;}
			satisfiable[515][1]=satisfiable[515][1] & ((x[515] ^ 1) | (x[ unit515_1[i][0] ] ^ unit515_1[i][1]) |(x[ unit515_1[i][2] ] ^ unit515_1[i][3]));
			}
		if(X_contra>0) L[515][1]=2;
		}
	//Check all rules of unit[516][0]
	L[516][0] = LargeX[516][1]>0 ? 1 : 0;
	satisfiable[516][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit516_0[i][0] ][ unit516_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit516_0[i][2] ][ unit516_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit516_0[i][4] ][ unit516_0[i][5] ] >0);
		X_contra = ( LargeX[516][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit516_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[516][1]=0; L[516][0]=1;}
			satisfiable[516][0]=satisfiable[516][0] & ((x[516] ^ 0) | (x[ unit516_0[i][0] ] ^ unit516_0[i][1]) |(x[ unit516_0[i][2] ] ^ unit516_0[i][3]));
			}
		if(X_contra>0) L[516][0]=2;
		}
	//Check all rules of unit[516][1]
	L[516][1] = LargeX[516][0]>0 ? 1 : 0;
	satisfiable[516][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit516_1[i][0] ][ unit516_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit516_1[i][2] ][ unit516_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit516_1[i][4] ][ unit516_1[i][5] ] >0);
		X_contra = ( LargeX[516][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit516_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[516][0]=0; L[516][1]=1;}
			satisfiable[516][1]=satisfiable[516][1] & ((x[516] ^ 1) | (x[ unit516_1[i][0] ] ^ unit516_1[i][1]) |(x[ unit516_1[i][2] ] ^ unit516_1[i][3]));
			}
		if(X_contra>0) L[516][1]=2;
		}
	//Check all rules of unit[517][0]
	L[517][0] = LargeX[517][1]>0 ? 1 : 0;
	satisfiable[517][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit517_0[i][0] ][ unit517_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit517_0[i][2] ][ unit517_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit517_0[i][4] ][ unit517_0[i][5] ] >0);
		X_contra = ( LargeX[517][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit517_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[517][1]=0; L[517][0]=1;}
			satisfiable[517][0]=satisfiable[517][0] & ((x[517] ^ 0) | (x[ unit517_0[i][0] ] ^ unit517_0[i][1]) |(x[ unit517_0[i][2] ] ^ unit517_0[i][3]));
			}
		if(X_contra>0) L[517][0]=2;
		}
	//Check all rules of unit[517][1]
	L[517][1] = LargeX[517][0]>0 ? 1 : 0;
	satisfiable[517][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit517_1[i][0] ][ unit517_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit517_1[i][2] ][ unit517_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit517_1[i][4] ][ unit517_1[i][5] ] >0);
		X_contra = ( LargeX[517][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit517_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[517][0]=0; L[517][1]=1;}
			satisfiable[517][1]=satisfiable[517][1] & ((x[517] ^ 1) | (x[ unit517_1[i][0] ] ^ unit517_1[i][1]) |(x[ unit517_1[i][2] ] ^ unit517_1[i][3]));
			}
		if(X_contra>0) L[517][1]=2;
		}
	//Check all rules of unit[518][0]
	L[518][0] = LargeX[518][1]>0 ? 1 : 0;
	satisfiable[518][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit518_0[i][0] ][ unit518_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit518_0[i][2] ][ unit518_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit518_0[i][4] ][ unit518_0[i][5] ] >0);
		X_contra = ( LargeX[518][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit518_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[518][1]=0; L[518][0]=1;}
			satisfiable[518][0]=satisfiable[518][0] & ((x[518] ^ 0) | (x[ unit518_0[i][0] ] ^ unit518_0[i][1]) |(x[ unit518_0[i][2] ] ^ unit518_0[i][3]));
			}
		if(X_contra>0) L[518][0]=2;
		}
	//Check all rules of unit[518][1]
	L[518][1] = LargeX[518][0]>0 ? 1 : 0;
	satisfiable[518][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit518_1[i][0] ][ unit518_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit518_1[i][2] ][ unit518_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit518_1[i][4] ][ unit518_1[i][5] ] >0);
		X_contra = ( LargeX[518][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit518_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[518][0]=0; L[518][1]=1;}
			satisfiable[518][1]=satisfiable[518][1] & ((x[518] ^ 1) | (x[ unit518_1[i][0] ] ^ unit518_1[i][1]) |(x[ unit518_1[i][2] ] ^ unit518_1[i][3]));
			}
		if(X_contra>0) L[518][1]=2;
		}
	//Check all rules of unit[519][0]
	L[519][0] = LargeX[519][1]>0 ? 1 : 0;
	satisfiable[519][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit519_0[i][0] ][ unit519_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit519_0[i][2] ][ unit519_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit519_0[i][4] ][ unit519_0[i][5] ] >0);
		X_contra = ( LargeX[519][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit519_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[519][1]=0; L[519][0]=1;}
			satisfiable[519][0]=satisfiable[519][0] & ((x[519] ^ 0) | (x[ unit519_0[i][0] ] ^ unit519_0[i][1]) |(x[ unit519_0[i][2] ] ^ unit519_0[i][3]));
			}
		if(X_contra>0) L[519][0]=2;
		}
	//Check all rules of unit[519][1]
	L[519][1] = LargeX[519][0]>0 ? 1 : 0;
	satisfiable[519][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit519_1[i][0] ][ unit519_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit519_1[i][2] ][ unit519_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit519_1[i][4] ][ unit519_1[i][5] ] >0);
		X_contra = ( LargeX[519][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit519_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[519][0]=0; L[519][1]=1;}
			satisfiable[519][1]=satisfiable[519][1] & ((x[519] ^ 1) | (x[ unit519_1[i][0] ] ^ unit519_1[i][1]) |(x[ unit519_1[i][2] ] ^ unit519_1[i][3]));
			}
		if(X_contra>0) L[519][1]=2;
		}
	//Check all rules of unit[520][0]
	L[520][0] = LargeX[520][1]>0 ? 1 : 0;
	satisfiable[520][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit520_0[i][0] ][ unit520_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit520_0[i][2] ][ unit520_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit520_0[i][4] ][ unit520_0[i][5] ] >0);
		X_contra = ( LargeX[520][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit520_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[520][1]=0; L[520][0]=1;}
			satisfiable[520][0]=satisfiable[520][0] & ((x[520] ^ 0) | (x[ unit520_0[i][0] ] ^ unit520_0[i][1]) |(x[ unit520_0[i][2] ] ^ unit520_0[i][3]));
			}
		if(X_contra>0) L[520][0]=2;
		}
	//Check all rules of unit[520][1]
	L[520][1] = LargeX[520][0]>0 ? 1 : 0;
	satisfiable[520][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit520_1[i][0] ][ unit520_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit520_1[i][2] ][ unit520_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit520_1[i][4] ][ unit520_1[i][5] ] >0);
		X_contra = ( LargeX[520][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit520_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[520][0]=0; L[520][1]=1;}
			satisfiable[520][1]=satisfiable[520][1] & ((x[520] ^ 1) | (x[ unit520_1[i][0] ] ^ unit520_1[i][1]) |(x[ unit520_1[i][2] ] ^ unit520_1[i][3]));
			}
		if(X_contra>0) L[520][1]=2;
		}
	//Check all rules of unit[521][0]
	L[521][0] = LargeX[521][1]>0 ? 1 : 0;
	satisfiable[521][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit521_0[i][0] ][ unit521_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit521_0[i][2] ][ unit521_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit521_0[i][4] ][ unit521_0[i][5] ] >0);
		X_contra = ( LargeX[521][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit521_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[521][1]=0; L[521][0]=1;}
			satisfiable[521][0]=satisfiable[521][0] & ((x[521] ^ 0) | (x[ unit521_0[i][0] ] ^ unit521_0[i][1]) |(x[ unit521_0[i][2] ] ^ unit521_0[i][3]));
			}
		if(X_contra>0) L[521][0]=2;
		}
	//Check all rules of unit[521][1]
	L[521][1] = LargeX[521][0]>0 ? 1 : 0;
	satisfiable[521][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit521_1[i][0] ][ unit521_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit521_1[i][2] ][ unit521_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit521_1[i][4] ][ unit521_1[i][5] ] >0);
		X_contra = ( LargeX[521][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit521_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[521][0]=0; L[521][1]=1;}
			satisfiable[521][1]=satisfiable[521][1] & ((x[521] ^ 1) | (x[ unit521_1[i][0] ] ^ unit521_1[i][1]) |(x[ unit521_1[i][2] ] ^ unit521_1[i][3]));
			}
		if(X_contra>0) L[521][1]=2;
		}
	//Check all rules of unit[522][0]
	L[522][0] = LargeX[522][1]>0 ? 1 : 0;
	satisfiable[522][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit522_0[i][0] ][ unit522_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit522_0[i][2] ][ unit522_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit522_0[i][4] ][ unit522_0[i][5] ] >0);
		X_contra = ( LargeX[522][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit522_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[522][1]=0; L[522][0]=1;}
			satisfiable[522][0]=satisfiable[522][0] & ((x[522] ^ 0) | (x[ unit522_0[i][0] ] ^ unit522_0[i][1]) |(x[ unit522_0[i][2] ] ^ unit522_0[i][3]));
			}
		if(X_contra>0) L[522][0]=2;
		}
	//Check all rules of unit[522][1]
	L[522][1] = LargeX[522][0]>0 ? 1 : 0;
	satisfiable[522][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit522_1[i][0] ][ unit522_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit522_1[i][2] ][ unit522_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit522_1[i][4] ][ unit522_1[i][5] ] >0);
		X_contra = ( LargeX[522][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit522_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[522][0]=0; L[522][1]=1;}
			satisfiable[522][1]=satisfiable[522][1] & ((x[522] ^ 1) | (x[ unit522_1[i][0] ] ^ unit522_1[i][1]) |(x[ unit522_1[i][2] ] ^ unit522_1[i][3]));
			}
		if(X_contra>0) L[522][1]=2;
		}
	//Check all rules of unit[523][0]
	L[523][0] = LargeX[523][1]>0 ? 1 : 0;
	satisfiable[523][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit523_0[i][0] ][ unit523_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit523_0[i][2] ][ unit523_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit523_0[i][4] ][ unit523_0[i][5] ] >0);
		X_contra = ( LargeX[523][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit523_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[523][1]=0; L[523][0]=1;}
			satisfiable[523][0]=satisfiable[523][0] & ((x[523] ^ 0) | (x[ unit523_0[i][0] ] ^ unit523_0[i][1]) |(x[ unit523_0[i][2] ] ^ unit523_0[i][3]));
			}
		if(X_contra>0) L[523][0]=2;
		}
	//Check all rules of unit[523][1]
	L[523][1] = LargeX[523][0]>0 ? 1 : 0;
	satisfiable[523][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit523_1[i][0] ][ unit523_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit523_1[i][2] ][ unit523_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit523_1[i][4] ][ unit523_1[i][5] ] >0);
		X_contra = ( LargeX[523][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit523_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[523][0]=0; L[523][1]=1;}
			satisfiable[523][1]=satisfiable[523][1] & ((x[523] ^ 1) | (x[ unit523_1[i][0] ] ^ unit523_1[i][1]) |(x[ unit523_1[i][2] ] ^ unit523_1[i][3]));
			}
		if(X_contra>0) L[523][1]=2;
		}
	//Check all rules of unit[524][0]
	L[524][0] = LargeX[524][1]>0 ? 1 : 0;
	satisfiable[524][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit524_0[i][0] ][ unit524_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit524_0[i][2] ][ unit524_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit524_0[i][4] ][ unit524_0[i][5] ] >0);
		X_contra = ( LargeX[524][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit524_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[524][1]=0; L[524][0]=1;}
			satisfiable[524][0]=satisfiable[524][0] & ((x[524] ^ 0) | (x[ unit524_0[i][0] ] ^ unit524_0[i][1]) |(x[ unit524_0[i][2] ] ^ unit524_0[i][3]));
			}
		if(X_contra>0) L[524][0]=2;
		}
	//Check all rules of unit[524][1]
	L[524][1] = LargeX[524][0]>0 ? 1 : 0;
	satisfiable[524][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit524_1[i][0] ][ unit524_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit524_1[i][2] ][ unit524_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit524_1[i][4] ][ unit524_1[i][5] ] >0);
		X_contra = ( LargeX[524][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit524_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[524][0]=0; L[524][1]=1;}
			satisfiable[524][1]=satisfiable[524][1] & ((x[524] ^ 1) | (x[ unit524_1[i][0] ] ^ unit524_1[i][1]) |(x[ unit524_1[i][2] ] ^ unit524_1[i][3]));
			}
		if(X_contra>0) L[524][1]=2;
		}
	//Check all rules of unit[525][0]
	L[525][0] = LargeX[525][1]>0 ? 1 : 0;
	satisfiable[525][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit525_0[i][0] ][ unit525_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit525_0[i][2] ][ unit525_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit525_0[i][4] ][ unit525_0[i][5] ] >0);
		X_contra = ( LargeX[525][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit525_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[525][1]=0; L[525][0]=1;}
			satisfiable[525][0]=satisfiable[525][0] & ((x[525] ^ 0) | (x[ unit525_0[i][0] ] ^ unit525_0[i][1]) |(x[ unit525_0[i][2] ] ^ unit525_0[i][3]));
			}
		if(X_contra>0) L[525][0]=2;
		}
	//Check all rules of unit[525][1]
	L[525][1] = LargeX[525][0]>0 ? 1 : 0;
	satisfiable[525][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit525_1[i][0] ][ unit525_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit525_1[i][2] ][ unit525_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit525_1[i][4] ][ unit525_1[i][5] ] >0);
		X_contra = ( LargeX[525][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit525_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[525][0]=0; L[525][1]=1;}
			satisfiable[525][1]=satisfiable[525][1] & ((x[525] ^ 1) | (x[ unit525_1[i][0] ] ^ unit525_1[i][1]) |(x[ unit525_1[i][2] ] ^ unit525_1[i][3]));
			}
		if(X_contra>0) L[525][1]=2;
		}
	//Check all rules of unit[526][0]
	L[526][0] = LargeX[526][1]>0 ? 1 : 0;
	satisfiable[526][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit526_0[i][0] ][ unit526_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit526_0[i][2] ][ unit526_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit526_0[i][4] ][ unit526_0[i][5] ] >0);
		X_contra = ( LargeX[526][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit526_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[526][1]=0; L[526][0]=1;}
			satisfiable[526][0]=satisfiable[526][0] & ((x[526] ^ 0) | (x[ unit526_0[i][0] ] ^ unit526_0[i][1]) |(x[ unit526_0[i][2] ] ^ unit526_0[i][3]));
			}
		if(X_contra>0) L[526][0]=2;
		}
	//Check all rules of unit[526][1]
	L[526][1] = LargeX[526][0]>0 ? 1 : 0;
	satisfiable[526][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit526_1[i][0] ][ unit526_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit526_1[i][2] ][ unit526_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit526_1[i][4] ][ unit526_1[i][5] ] >0);
		X_contra = ( LargeX[526][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit526_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[526][0]=0; L[526][1]=1;}
			satisfiable[526][1]=satisfiable[526][1] & ((x[526] ^ 1) | (x[ unit526_1[i][0] ] ^ unit526_1[i][1]) |(x[ unit526_1[i][2] ] ^ unit526_1[i][3]));
			}
		if(X_contra>0) L[526][1]=2;
		}
	//Check all rules of unit[527][0]
	L[527][0] = LargeX[527][1]>0 ? 1 : 0;
	satisfiable[527][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit527_0[i][0] ][ unit527_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit527_0[i][2] ][ unit527_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit527_0[i][4] ][ unit527_0[i][5] ] >0);
		X_contra = ( LargeX[527][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit527_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[527][1]=0; L[527][0]=1;}
			satisfiable[527][0]=satisfiable[527][0] & ((x[527] ^ 0) | (x[ unit527_0[i][0] ] ^ unit527_0[i][1]) |(x[ unit527_0[i][2] ] ^ unit527_0[i][3]));
			}
		if(X_contra>0) L[527][0]=2;
		}
	//Check all rules of unit[527][1]
	L[527][1] = LargeX[527][0]>0 ? 1 : 0;
	satisfiable[527][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit527_1[i][0] ][ unit527_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit527_1[i][2] ][ unit527_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit527_1[i][4] ][ unit527_1[i][5] ] >0);
		X_contra = ( LargeX[527][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit527_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[527][0]=0; L[527][1]=1;}
			satisfiable[527][1]=satisfiable[527][1] & ((x[527] ^ 1) | (x[ unit527_1[i][0] ] ^ unit527_1[i][1]) |(x[ unit527_1[i][2] ] ^ unit527_1[i][3]));
			}
		if(X_contra>0) L[527][1]=2;
		}
	//Check all rules of unit[528][0]
	L[528][0] = LargeX[528][1]>0 ? 1 : 0;
	satisfiable[528][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit528_0[i][0] ][ unit528_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit528_0[i][2] ][ unit528_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit528_0[i][4] ][ unit528_0[i][5] ] >0);
		X_contra = ( LargeX[528][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit528_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[528][1]=0; L[528][0]=1;}
			satisfiable[528][0]=satisfiable[528][0] & ((x[528] ^ 0) | (x[ unit528_0[i][0] ] ^ unit528_0[i][1]) |(x[ unit528_0[i][2] ] ^ unit528_0[i][3]));
			}
		if(X_contra>0) L[528][0]=2;
		}
	//Check all rules of unit[528][1]
	L[528][1] = LargeX[528][0]>0 ? 1 : 0;
	satisfiable[528][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit528_1[i][0] ][ unit528_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit528_1[i][2] ][ unit528_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit528_1[i][4] ][ unit528_1[i][5] ] >0);
		X_contra = ( LargeX[528][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit528_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[528][0]=0; L[528][1]=1;}
			satisfiable[528][1]=satisfiable[528][1] & ((x[528] ^ 1) | (x[ unit528_1[i][0] ] ^ unit528_1[i][1]) |(x[ unit528_1[i][2] ] ^ unit528_1[i][3]));
			}
		if(X_contra>0) L[528][1]=2;
		}
	//Check all rules of unit[529][0]
	L[529][0] = LargeX[529][1]>0 ? 1 : 0;
	satisfiable[529][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit529_0[i][0] ][ unit529_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit529_0[i][2] ][ unit529_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit529_0[i][4] ][ unit529_0[i][5] ] >0);
		X_contra = ( LargeX[529][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit529_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[529][1]=0; L[529][0]=1;}
			satisfiable[529][0]=satisfiable[529][0] & ((x[529] ^ 0) | (x[ unit529_0[i][0] ] ^ unit529_0[i][1]) |(x[ unit529_0[i][2] ] ^ unit529_0[i][3]));
			}
		if(X_contra>0) L[529][0]=2;
		}
	//Check all rules of unit[529][1]
	L[529][1] = LargeX[529][0]>0 ? 1 : 0;
	satisfiable[529][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit529_1[i][0] ][ unit529_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit529_1[i][2] ][ unit529_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit529_1[i][4] ][ unit529_1[i][5] ] >0);
		X_contra = ( LargeX[529][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit529_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[529][0]=0; L[529][1]=1;}
			satisfiable[529][1]=satisfiable[529][1] & ((x[529] ^ 1) | (x[ unit529_1[i][0] ] ^ unit529_1[i][1]) |(x[ unit529_1[i][2] ] ^ unit529_1[i][3]));
			}
		if(X_contra>0) L[529][1]=2;
		}
	//Check all rules of unit[530][0]
	L[530][0] = LargeX[530][1]>0 ? 1 : 0;
	satisfiable[530][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit530_0[i][0] ][ unit530_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit530_0[i][2] ][ unit530_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit530_0[i][4] ][ unit530_0[i][5] ] >0);
		X_contra = ( LargeX[530][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit530_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[530][1]=0; L[530][0]=1;}
			satisfiable[530][0]=satisfiable[530][0] & ((x[530] ^ 0) | (x[ unit530_0[i][0] ] ^ unit530_0[i][1]) |(x[ unit530_0[i][2] ] ^ unit530_0[i][3]));
			}
		if(X_contra>0) L[530][0]=2;
		}
	//Check all rules of unit[530][1]
	L[530][1] = LargeX[530][0]>0 ? 1 : 0;
	satisfiable[530][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit530_1[i][0] ][ unit530_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit530_1[i][2] ][ unit530_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit530_1[i][4] ][ unit530_1[i][5] ] >0);
		X_contra = ( LargeX[530][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit530_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[530][0]=0; L[530][1]=1;}
			satisfiable[530][1]=satisfiable[530][1] & ((x[530] ^ 1) | (x[ unit530_1[i][0] ] ^ unit530_1[i][1]) |(x[ unit530_1[i][2] ] ^ unit530_1[i][3]));
			}
		if(X_contra>0) L[530][1]=2;
		}
	//Check all rules of unit[531][0]
	L[531][0] = LargeX[531][1]>0 ? 1 : 0;
	satisfiable[531][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit531_0[i][0] ][ unit531_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit531_0[i][2] ][ unit531_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit531_0[i][4] ][ unit531_0[i][5] ] >0);
		X_contra = ( LargeX[531][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit531_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[531][1]=0; L[531][0]=1;}
			satisfiable[531][0]=satisfiable[531][0] & ((x[531] ^ 0) | (x[ unit531_0[i][0] ] ^ unit531_0[i][1]) |(x[ unit531_0[i][2] ] ^ unit531_0[i][3]));
			}
		if(X_contra>0) L[531][0]=2;
		}
	//Check all rules of unit[531][1]
	L[531][1] = LargeX[531][0]>0 ? 1 : 0;
	satisfiable[531][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit531_1[i][0] ][ unit531_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit531_1[i][2] ][ unit531_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit531_1[i][4] ][ unit531_1[i][5] ] >0);
		X_contra = ( LargeX[531][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit531_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[531][0]=0; L[531][1]=1;}
			satisfiable[531][1]=satisfiable[531][1] & ((x[531] ^ 1) | (x[ unit531_1[i][0] ] ^ unit531_1[i][1]) |(x[ unit531_1[i][2] ] ^ unit531_1[i][3]));
			}
		if(X_contra>0) L[531][1]=2;
		}
	//Check all rules of unit[532][0]
	L[532][0] = LargeX[532][1]>0 ? 1 : 0;
	satisfiable[532][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit532_0[i][0] ][ unit532_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit532_0[i][2] ][ unit532_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit532_0[i][4] ][ unit532_0[i][5] ] >0);
		X_contra = ( LargeX[532][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit532_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[532][1]=0; L[532][0]=1;}
			satisfiable[532][0]=satisfiable[532][0] & ((x[532] ^ 0) | (x[ unit532_0[i][0] ] ^ unit532_0[i][1]) |(x[ unit532_0[i][2] ] ^ unit532_0[i][3]));
			}
		if(X_contra>0) L[532][0]=2;
		}
	//Check all rules of unit[532][1]
	L[532][1] = LargeX[532][0]>0 ? 1 : 0;
	satisfiable[532][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit532_1[i][0] ][ unit532_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit532_1[i][2] ][ unit532_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit532_1[i][4] ][ unit532_1[i][5] ] >0);
		X_contra = ( LargeX[532][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit532_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[532][0]=0; L[532][1]=1;}
			satisfiable[532][1]=satisfiable[532][1] & ((x[532] ^ 1) | (x[ unit532_1[i][0] ] ^ unit532_1[i][1]) |(x[ unit532_1[i][2] ] ^ unit532_1[i][3]));
			}
		if(X_contra>0) L[532][1]=2;
		}
	//Check all rules of unit[533][0]
	L[533][0] = LargeX[533][1]>0 ? 1 : 0;
	satisfiable[533][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit533_0[i][0] ][ unit533_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit533_0[i][2] ][ unit533_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit533_0[i][4] ][ unit533_0[i][5] ] >0);
		X_contra = ( LargeX[533][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit533_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[533][1]=0; L[533][0]=1;}
			satisfiable[533][0]=satisfiable[533][0] & ((x[533] ^ 0) | (x[ unit533_0[i][0] ] ^ unit533_0[i][1]) |(x[ unit533_0[i][2] ] ^ unit533_0[i][3]));
			}
		if(X_contra>0) L[533][0]=2;
		}
	//Check all rules of unit[533][1]
	L[533][1] = LargeX[533][0]>0 ? 1 : 0;
	satisfiable[533][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit533_1[i][0] ][ unit533_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit533_1[i][2] ][ unit533_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit533_1[i][4] ][ unit533_1[i][5] ] >0);
		X_contra = ( LargeX[533][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit533_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[533][0]=0; L[533][1]=1;}
			satisfiable[533][1]=satisfiable[533][1] & ((x[533] ^ 1) | (x[ unit533_1[i][0] ] ^ unit533_1[i][1]) |(x[ unit533_1[i][2] ] ^ unit533_1[i][3]));
			}
		if(X_contra>0) L[533][1]=2;
		}
	//Check all rules of unit[534][0]
	L[534][0] = LargeX[534][1]>0 ? 1 : 0;
	satisfiable[534][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit534_0[i][0] ][ unit534_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit534_0[i][2] ][ unit534_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit534_0[i][4] ][ unit534_0[i][5] ] >0);
		X_contra = ( LargeX[534][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit534_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[534][1]=0; L[534][0]=1;}
			satisfiable[534][0]=satisfiable[534][0] & ((x[534] ^ 0) | (x[ unit534_0[i][0] ] ^ unit534_0[i][1]) |(x[ unit534_0[i][2] ] ^ unit534_0[i][3]));
			}
		if(X_contra>0) L[534][0]=2;
		}
	//Check all rules of unit[534][1]
	L[534][1] = LargeX[534][0]>0 ? 1 : 0;
	satisfiable[534][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit534_1[i][0] ][ unit534_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit534_1[i][2] ][ unit534_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit534_1[i][4] ][ unit534_1[i][5] ] >0);
		X_contra = ( LargeX[534][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit534_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[534][0]=0; L[534][1]=1;}
			satisfiable[534][1]=satisfiable[534][1] & ((x[534] ^ 1) | (x[ unit534_1[i][0] ] ^ unit534_1[i][1]) |(x[ unit534_1[i][2] ] ^ unit534_1[i][3]));
			}
		if(X_contra>0) L[534][1]=2;
		}
	//Check all rules of unit[535][0]
	L[535][0] = LargeX[535][1]>0 ? 1 : 0;
	satisfiable[535][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit535_0[i][0] ][ unit535_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit535_0[i][2] ][ unit535_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit535_0[i][4] ][ unit535_0[i][5] ] >0);
		X_contra = ( LargeX[535][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit535_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[535][1]=0; L[535][0]=1;}
			satisfiable[535][0]=satisfiable[535][0] & ((x[535] ^ 0) | (x[ unit535_0[i][0] ] ^ unit535_0[i][1]) |(x[ unit535_0[i][2] ] ^ unit535_0[i][3]));
			}
		if(X_contra>0) L[535][0]=2;
		}
	//Check all rules of unit[535][1]
	L[535][1] = LargeX[535][0]>0 ? 1 : 0;
	satisfiable[535][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit535_1[i][0] ][ unit535_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit535_1[i][2] ][ unit535_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit535_1[i][4] ][ unit535_1[i][5] ] >0);
		X_contra = ( LargeX[535][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit535_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[535][0]=0; L[535][1]=1;}
			satisfiable[535][1]=satisfiable[535][1] & ((x[535] ^ 1) | (x[ unit535_1[i][0] ] ^ unit535_1[i][1]) |(x[ unit535_1[i][2] ] ^ unit535_1[i][3]));
			}
		if(X_contra>0) L[535][1]=2;
		}
	//Check all rules of unit[536][0]
	L[536][0] = LargeX[536][1]>0 ? 1 : 0;
	satisfiable[536][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit536_0[i][0] ][ unit536_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit536_0[i][2] ][ unit536_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit536_0[i][4] ][ unit536_0[i][5] ] >0);
		X_contra = ( LargeX[536][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit536_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[536][1]=0; L[536][0]=1;}
			satisfiable[536][0]=satisfiable[536][0] & ((x[536] ^ 0) | (x[ unit536_0[i][0] ] ^ unit536_0[i][1]) |(x[ unit536_0[i][2] ] ^ unit536_0[i][3]));
			}
		if(X_contra>0) L[536][0]=2;
		}
	//Check all rules of unit[536][1]
	L[536][1] = LargeX[536][0]>0 ? 1 : 0;
	satisfiable[536][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit536_1[i][0] ][ unit536_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit536_1[i][2] ][ unit536_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit536_1[i][4] ][ unit536_1[i][5] ] >0);
		X_contra = ( LargeX[536][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit536_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[536][0]=0; L[536][1]=1;}
			satisfiable[536][1]=satisfiable[536][1] & ((x[536] ^ 1) | (x[ unit536_1[i][0] ] ^ unit536_1[i][1]) |(x[ unit536_1[i][2] ] ^ unit536_1[i][3]));
			}
		if(X_contra>0) L[536][1]=2;
		}
	//Check all rules of unit[537][0]
	L[537][0] = LargeX[537][1]>0 ? 1 : 0;
	satisfiable[537][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit537_0[i][0] ][ unit537_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit537_0[i][2] ][ unit537_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit537_0[i][4] ][ unit537_0[i][5] ] >0);
		X_contra = ( LargeX[537][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit537_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[537][1]=0; L[537][0]=1;}
			satisfiable[537][0]=satisfiable[537][0] & ((x[537] ^ 0) | (x[ unit537_0[i][0] ] ^ unit537_0[i][1]) |(x[ unit537_0[i][2] ] ^ unit537_0[i][3]));
			}
		if(X_contra>0) L[537][0]=2;
		}
	//Check all rules of unit[537][1]
	L[537][1] = LargeX[537][0]>0 ? 1 : 0;
	satisfiable[537][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit537_1[i][0] ][ unit537_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit537_1[i][2] ][ unit537_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit537_1[i][4] ][ unit537_1[i][5] ] >0);
		X_contra = ( LargeX[537][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit537_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[537][0]=0; L[537][1]=1;}
			satisfiable[537][1]=satisfiable[537][1] & ((x[537] ^ 1) | (x[ unit537_1[i][0] ] ^ unit537_1[i][1]) |(x[ unit537_1[i][2] ] ^ unit537_1[i][3]));
			}
		if(X_contra>0) L[537][1]=2;
		}
	//Check all rules of unit[538][0]
	L[538][0] = LargeX[538][1]>0 ? 1 : 0;
	satisfiable[538][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit538_0[i][0] ][ unit538_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit538_0[i][2] ][ unit538_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit538_0[i][4] ][ unit538_0[i][5] ] >0);
		X_contra = ( LargeX[538][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit538_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[538][1]=0; L[538][0]=1;}
			satisfiable[538][0]=satisfiable[538][0] & ((x[538] ^ 0) | (x[ unit538_0[i][0] ] ^ unit538_0[i][1]) |(x[ unit538_0[i][2] ] ^ unit538_0[i][3]));
			}
		if(X_contra>0) L[538][0]=2;
		}
	//Check all rules of unit[538][1]
	L[538][1] = LargeX[538][0]>0 ? 1 : 0;
	satisfiable[538][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit538_1[i][0] ][ unit538_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit538_1[i][2] ][ unit538_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit538_1[i][4] ][ unit538_1[i][5] ] >0);
		X_contra = ( LargeX[538][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit538_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[538][0]=0; L[538][1]=1;}
			satisfiable[538][1]=satisfiable[538][1] & ((x[538] ^ 1) | (x[ unit538_1[i][0] ] ^ unit538_1[i][1]) |(x[ unit538_1[i][2] ] ^ unit538_1[i][3]));
			}
		if(X_contra>0) L[538][1]=2;
		}
	//Check all rules of unit[539][0]
	L[539][0] = LargeX[539][1]>0 ? 1 : 0;
	satisfiable[539][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit539_0[i][0] ][ unit539_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit539_0[i][2] ][ unit539_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit539_0[i][4] ][ unit539_0[i][5] ] >0);
		X_contra = ( LargeX[539][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit539_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[539][1]=0; L[539][0]=1;}
			satisfiable[539][0]=satisfiable[539][0] & ((x[539] ^ 0) | (x[ unit539_0[i][0] ] ^ unit539_0[i][1]) |(x[ unit539_0[i][2] ] ^ unit539_0[i][3]));
			}
		if(X_contra>0) L[539][0]=2;
		}
	//Check all rules of unit[539][1]
	L[539][1] = LargeX[539][0]>0 ? 1 : 0;
	satisfiable[539][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit539_1[i][0] ][ unit539_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit539_1[i][2] ][ unit539_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit539_1[i][4] ][ unit539_1[i][5] ] >0);
		X_contra = ( LargeX[539][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit539_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[539][0]=0; L[539][1]=1;}
			satisfiable[539][1]=satisfiable[539][1] & ((x[539] ^ 1) | (x[ unit539_1[i][0] ] ^ unit539_1[i][1]) |(x[ unit539_1[i][2] ] ^ unit539_1[i][3]));
			}
		if(X_contra>0) L[539][1]=2;
		}
	//Check all rules of unit[540][0]
	L[540][0] = LargeX[540][1]>0 ? 1 : 0;
	satisfiable[540][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit540_0[i][0] ][ unit540_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit540_0[i][2] ][ unit540_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit540_0[i][4] ][ unit540_0[i][5] ] >0);
		X_contra = ( LargeX[540][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit540_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[540][1]=0; L[540][0]=1;}
			satisfiable[540][0]=satisfiable[540][0] & ((x[540] ^ 0) | (x[ unit540_0[i][0] ] ^ unit540_0[i][1]) |(x[ unit540_0[i][2] ] ^ unit540_0[i][3]));
			}
		if(X_contra>0) L[540][0]=2;
		}
	//Check all rules of unit[540][1]
	L[540][1] = LargeX[540][0]>0 ? 1 : 0;
	satisfiable[540][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit540_1[i][0] ][ unit540_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit540_1[i][2] ][ unit540_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit540_1[i][4] ][ unit540_1[i][5] ] >0);
		X_contra = ( LargeX[540][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit540_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[540][0]=0; L[540][1]=1;}
			satisfiable[540][1]=satisfiable[540][1] & ((x[540] ^ 1) | (x[ unit540_1[i][0] ] ^ unit540_1[i][1]) |(x[ unit540_1[i][2] ] ^ unit540_1[i][3]));
			}
		if(X_contra>0) L[540][1]=2;
		}
	//Check all rules of unit[541][0]
	L[541][0] = LargeX[541][1]>0 ? 1 : 0;
	satisfiable[541][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit541_0[i][0] ][ unit541_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit541_0[i][2] ][ unit541_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit541_0[i][4] ][ unit541_0[i][5] ] >0);
		X_contra = ( LargeX[541][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit541_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[541][1]=0; L[541][0]=1;}
			satisfiable[541][0]=satisfiable[541][0] & ((x[541] ^ 0) | (x[ unit541_0[i][0] ] ^ unit541_0[i][1]) |(x[ unit541_0[i][2] ] ^ unit541_0[i][3]));
			}
		if(X_contra>0) L[541][0]=2;
		}
	//Check all rules of unit[541][1]
	L[541][1] = LargeX[541][0]>0 ? 1 : 0;
	satisfiable[541][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit541_1[i][0] ][ unit541_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit541_1[i][2] ][ unit541_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit541_1[i][4] ][ unit541_1[i][5] ] >0);
		X_contra = ( LargeX[541][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit541_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[541][0]=0; L[541][1]=1;}
			satisfiable[541][1]=satisfiable[541][1] & ((x[541] ^ 1) | (x[ unit541_1[i][0] ] ^ unit541_1[i][1]) |(x[ unit541_1[i][2] ] ^ unit541_1[i][3]));
			}
		if(X_contra>0) L[541][1]=2;
		}
	//Check all rules of unit[542][0]
	L[542][0] = LargeX[542][1]>0 ? 1 : 0;
	satisfiable[542][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit542_0[i][0] ][ unit542_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit542_0[i][2] ][ unit542_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit542_0[i][4] ][ unit542_0[i][5] ] >0);
		X_contra = ( LargeX[542][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit542_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[542][1]=0; L[542][0]=1;}
			satisfiable[542][0]=satisfiable[542][0] & ((x[542] ^ 0) | (x[ unit542_0[i][0] ] ^ unit542_0[i][1]) |(x[ unit542_0[i][2] ] ^ unit542_0[i][3]));
			}
		if(X_contra>0) L[542][0]=2;
		}
	//Check all rules of unit[542][1]
	L[542][1] = LargeX[542][0]>0 ? 1 : 0;
	satisfiable[542][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit542_1[i][0] ][ unit542_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit542_1[i][2] ][ unit542_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit542_1[i][4] ][ unit542_1[i][5] ] >0);
		X_contra = ( LargeX[542][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit542_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[542][0]=0; L[542][1]=1;}
			satisfiable[542][1]=satisfiable[542][1] & ((x[542] ^ 1) | (x[ unit542_1[i][0] ] ^ unit542_1[i][1]) |(x[ unit542_1[i][2] ] ^ unit542_1[i][3]));
			}
		if(X_contra>0) L[542][1]=2;
		}
	//Check all rules of unit[543][0]
	L[543][0] = LargeX[543][1]>0 ? 1 : 0;
	satisfiable[543][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit543_0[i][0] ][ unit543_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit543_0[i][2] ][ unit543_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit543_0[i][4] ][ unit543_0[i][5] ] >0);
		X_contra = ( LargeX[543][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit543_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[543][1]=0; L[543][0]=1;}
			satisfiable[543][0]=satisfiable[543][0] & ((x[543] ^ 0) | (x[ unit543_0[i][0] ] ^ unit543_0[i][1]) |(x[ unit543_0[i][2] ] ^ unit543_0[i][3]));
			}
		if(X_contra>0) L[543][0]=2;
		}
	//Check all rules of unit[543][1]
	L[543][1] = LargeX[543][0]>0 ? 1 : 0;
	satisfiable[543][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit543_1[i][0] ][ unit543_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit543_1[i][2] ][ unit543_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit543_1[i][4] ][ unit543_1[i][5] ] >0);
		X_contra = ( LargeX[543][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit543_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[543][0]=0; L[543][1]=1;}
			satisfiable[543][1]=satisfiable[543][1] & ((x[543] ^ 1) | (x[ unit543_1[i][0] ] ^ unit543_1[i][1]) |(x[ unit543_1[i][2] ] ^ unit543_1[i][3]));
			}
		if(X_contra>0) L[543][1]=2;
		}
	//Check all rules of unit[544][0]
	L[544][0] = LargeX[544][1]>0 ? 1 : 0;
	satisfiable[544][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit544_0[i][0] ][ unit544_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit544_0[i][2] ][ unit544_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit544_0[i][4] ][ unit544_0[i][5] ] >0);
		X_contra = ( LargeX[544][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit544_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[544][1]=0; L[544][0]=1;}
			satisfiable[544][0]=satisfiable[544][0] & ((x[544] ^ 0) | (x[ unit544_0[i][0] ] ^ unit544_0[i][1]) |(x[ unit544_0[i][2] ] ^ unit544_0[i][3]));
			}
		if(X_contra>0) L[544][0]=2;
		}
	//Check all rules of unit[544][1]
	L[544][1] = LargeX[544][0]>0 ? 1 : 0;
	satisfiable[544][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit544_1[i][0] ][ unit544_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit544_1[i][2] ][ unit544_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit544_1[i][4] ][ unit544_1[i][5] ] >0);
		X_contra = ( LargeX[544][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit544_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[544][0]=0; L[544][1]=1;}
			satisfiable[544][1]=satisfiable[544][1] & ((x[544] ^ 1) | (x[ unit544_1[i][0] ] ^ unit544_1[i][1]) |(x[ unit544_1[i][2] ] ^ unit544_1[i][3]));
			}
		if(X_contra>0) L[544][1]=2;
		}
	//Check all rules of unit[545][0]
	L[545][0] = LargeX[545][1]>0 ? 1 : 0;
	satisfiable[545][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit545_0[i][0] ][ unit545_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit545_0[i][2] ][ unit545_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit545_0[i][4] ][ unit545_0[i][5] ] >0);
		X_contra = ( LargeX[545][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit545_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[545][1]=0; L[545][0]=1;}
			satisfiable[545][0]=satisfiable[545][0] & ((x[545] ^ 0) | (x[ unit545_0[i][0] ] ^ unit545_0[i][1]) |(x[ unit545_0[i][2] ] ^ unit545_0[i][3]));
			}
		if(X_contra>0) L[545][0]=2;
		}
	//Check all rules of unit[545][1]
	L[545][1] = LargeX[545][0]>0 ? 1 : 0;
	satisfiable[545][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit545_1[i][0] ][ unit545_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit545_1[i][2] ][ unit545_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit545_1[i][4] ][ unit545_1[i][5] ] >0);
		X_contra = ( LargeX[545][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit545_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[545][0]=0; L[545][1]=1;}
			satisfiable[545][1]=satisfiable[545][1] & ((x[545] ^ 1) | (x[ unit545_1[i][0] ] ^ unit545_1[i][1]) |(x[ unit545_1[i][2] ] ^ unit545_1[i][3]));
			}
		if(X_contra>0) L[545][1]=2;
		}
	//Check all rules of unit[546][0]
	L[546][0] = LargeX[546][1]>0 ? 1 : 0;
	satisfiable[546][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit546_0[i][0] ][ unit546_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit546_0[i][2] ][ unit546_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit546_0[i][4] ][ unit546_0[i][5] ] >0);
		X_contra = ( LargeX[546][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit546_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[546][1]=0; L[546][0]=1;}
			satisfiable[546][0]=satisfiable[546][0] & ((x[546] ^ 0) | (x[ unit546_0[i][0] ] ^ unit546_0[i][1]) |(x[ unit546_0[i][2] ] ^ unit546_0[i][3]));
			}
		if(X_contra>0) L[546][0]=2;
		}
	//Check all rules of unit[546][1]
	L[546][1] = LargeX[546][0]>0 ? 1 : 0;
	satisfiable[546][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit546_1[i][0] ][ unit546_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit546_1[i][2] ][ unit546_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit546_1[i][4] ][ unit546_1[i][5] ] >0);
		X_contra = ( LargeX[546][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit546_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[546][0]=0; L[546][1]=1;}
			satisfiable[546][1]=satisfiable[546][1] & ((x[546] ^ 1) | (x[ unit546_1[i][0] ] ^ unit546_1[i][1]) |(x[ unit546_1[i][2] ] ^ unit546_1[i][3]));
			}
		if(X_contra>0) L[546][1]=2;
		}
	//Check all rules of unit[547][0]
	L[547][0] = LargeX[547][1]>0 ? 1 : 0;
	satisfiable[547][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit547_0[i][0] ][ unit547_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit547_0[i][2] ][ unit547_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit547_0[i][4] ][ unit547_0[i][5] ] >0);
		X_contra = ( LargeX[547][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit547_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[547][1]=0; L[547][0]=1;}
			satisfiable[547][0]=satisfiable[547][0] & ((x[547] ^ 0) | (x[ unit547_0[i][0] ] ^ unit547_0[i][1]) |(x[ unit547_0[i][2] ] ^ unit547_0[i][3]));
			}
		if(X_contra>0) L[547][0]=2;
		}
	//Check all rules of unit[547][1]
	L[547][1] = LargeX[547][0]>0 ? 1 : 0;
	satisfiable[547][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit547_1[i][0] ][ unit547_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit547_1[i][2] ][ unit547_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit547_1[i][4] ][ unit547_1[i][5] ] >0);
		X_contra = ( LargeX[547][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit547_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[547][0]=0; L[547][1]=1;}
			satisfiable[547][1]=satisfiable[547][1] & ((x[547] ^ 1) | (x[ unit547_1[i][0] ] ^ unit547_1[i][1]) |(x[ unit547_1[i][2] ] ^ unit547_1[i][3]));
			}
		if(X_contra>0) L[547][1]=2;
		}
	//Check all rules of unit[548][0]
	L[548][0] = LargeX[548][1]>0 ? 1 : 0;
	satisfiable[548][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit548_0[i][0] ][ unit548_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit548_0[i][2] ][ unit548_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit548_0[i][4] ][ unit548_0[i][5] ] >0);
		X_contra = ( LargeX[548][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit548_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[548][1]=0; L[548][0]=1;}
			satisfiable[548][0]=satisfiable[548][0] & ((x[548] ^ 0) | (x[ unit548_0[i][0] ] ^ unit548_0[i][1]) |(x[ unit548_0[i][2] ] ^ unit548_0[i][3]));
			}
		if(X_contra>0) L[548][0]=2;
		}
	//Check all rules of unit[548][1]
	L[548][1] = LargeX[548][0]>0 ? 1 : 0;
	satisfiable[548][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit548_1[i][0] ][ unit548_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit548_1[i][2] ][ unit548_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit548_1[i][4] ][ unit548_1[i][5] ] >0);
		X_contra = ( LargeX[548][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit548_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[548][0]=0; L[548][1]=1;}
			satisfiable[548][1]=satisfiable[548][1] & ((x[548] ^ 1) | (x[ unit548_1[i][0] ] ^ unit548_1[i][1]) |(x[ unit548_1[i][2] ] ^ unit548_1[i][3]));
			}
		if(X_contra>0) L[548][1]=2;
		}
	//Check all rules of unit[549][0]
	L[549][0] = LargeX[549][1]>0 ? 1 : 0;
	satisfiable[549][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit549_0[i][0] ][ unit549_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit549_0[i][2] ][ unit549_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit549_0[i][4] ][ unit549_0[i][5] ] >0);
		X_contra = ( LargeX[549][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit549_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[549][1]=0; L[549][0]=1;}
			satisfiable[549][0]=satisfiable[549][0] & ((x[549] ^ 0) | (x[ unit549_0[i][0] ] ^ unit549_0[i][1]) |(x[ unit549_0[i][2] ] ^ unit549_0[i][3]));
			}
		if(X_contra>0) L[549][0]=2;
		}
	//Check all rules of unit[549][1]
	L[549][1] = LargeX[549][0]>0 ? 1 : 0;
	satisfiable[549][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit549_1[i][0] ][ unit549_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit549_1[i][2] ][ unit549_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit549_1[i][4] ][ unit549_1[i][5] ] >0);
		X_contra = ( LargeX[549][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit549_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[549][0]=0; L[549][1]=1;}
			satisfiable[549][1]=satisfiable[549][1] & ((x[549] ^ 1) | (x[ unit549_1[i][0] ] ^ unit549_1[i][1]) |(x[ unit549_1[i][2] ] ^ unit549_1[i][3]));
			}
		if(X_contra>0) L[549][1]=2;
		}
	//Check all rules of unit[550][0]
	L[550][0] = LargeX[550][1]>0 ? 1 : 0;
	satisfiable[550][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit550_0[i][0] ][ unit550_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit550_0[i][2] ][ unit550_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit550_0[i][4] ][ unit550_0[i][5] ] >0);
		X_contra = ( LargeX[550][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit550_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[550][1]=0; L[550][0]=1;}
			satisfiable[550][0]=satisfiable[550][0] & ((x[550] ^ 0) | (x[ unit550_0[i][0] ] ^ unit550_0[i][1]) |(x[ unit550_0[i][2] ] ^ unit550_0[i][3]));
			}
		if(X_contra>0) L[550][0]=2;
		}
	//Check all rules of unit[550][1]
	L[550][1] = LargeX[550][0]>0 ? 1 : 0;
	satisfiable[550][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit550_1[i][0] ][ unit550_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit550_1[i][2] ][ unit550_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit550_1[i][4] ][ unit550_1[i][5] ] >0);
		X_contra = ( LargeX[550][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit550_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[550][0]=0; L[550][1]=1;}
			satisfiable[550][1]=satisfiable[550][1] & ((x[550] ^ 1) | (x[ unit550_1[i][0] ] ^ unit550_1[i][1]) |(x[ unit550_1[i][2] ] ^ unit550_1[i][3]));
			}
		if(X_contra>0) L[550][1]=2;
		}
	//Check all rules of unit[551][0]
	L[551][0] = LargeX[551][1]>0 ? 1 : 0;
	satisfiable[551][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit551_0[i][0] ][ unit551_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit551_0[i][2] ][ unit551_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit551_0[i][4] ][ unit551_0[i][5] ] >0);
		X_contra = ( LargeX[551][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit551_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[551][1]=0; L[551][0]=1;}
			satisfiable[551][0]=satisfiable[551][0] & ((x[551] ^ 0) | (x[ unit551_0[i][0] ] ^ unit551_0[i][1]) |(x[ unit551_0[i][2] ] ^ unit551_0[i][3]));
			}
		if(X_contra>0) L[551][0]=2;
		}
	//Check all rules of unit[551][1]
	L[551][1] = LargeX[551][0]>0 ? 1 : 0;
	satisfiable[551][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit551_1[i][0] ][ unit551_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit551_1[i][2] ][ unit551_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit551_1[i][4] ][ unit551_1[i][5] ] >0);
		X_contra = ( LargeX[551][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit551_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[551][0]=0; L[551][1]=1;}
			satisfiable[551][1]=satisfiable[551][1] & ((x[551] ^ 1) | (x[ unit551_1[i][0] ] ^ unit551_1[i][1]) |(x[ unit551_1[i][2] ] ^ unit551_1[i][3]));
			}
		if(X_contra>0) L[551][1]=2;
		}
	//Check all rules of unit[552][0]
	L[552][0] = LargeX[552][1]>0 ? 1 : 0;
	satisfiable[552][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit552_0[i][0] ][ unit552_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit552_0[i][2] ][ unit552_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit552_0[i][4] ][ unit552_0[i][5] ] >0);
		X_contra = ( LargeX[552][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit552_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[552][1]=0; L[552][0]=1;}
			satisfiable[552][0]=satisfiable[552][0] & ((x[552] ^ 0) | (x[ unit552_0[i][0] ] ^ unit552_0[i][1]) |(x[ unit552_0[i][2] ] ^ unit552_0[i][3]));
			}
		if(X_contra>0) L[552][0]=2;
		}
	//Check all rules of unit[552][1]
	L[552][1] = LargeX[552][0]>0 ? 1 : 0;
	satisfiable[552][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit552_1[i][0] ][ unit552_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit552_1[i][2] ][ unit552_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit552_1[i][4] ][ unit552_1[i][5] ] >0);
		X_contra = ( LargeX[552][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit552_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[552][0]=0; L[552][1]=1;}
			satisfiable[552][1]=satisfiable[552][1] & ((x[552] ^ 1) | (x[ unit552_1[i][0] ] ^ unit552_1[i][1]) |(x[ unit552_1[i][2] ] ^ unit552_1[i][3]));
			}
		if(X_contra>0) L[552][1]=2;
		}
	//Check all rules of unit[553][0]
	L[553][0] = LargeX[553][1]>0 ? 1 : 0;
	satisfiable[553][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit553_0[i][0] ][ unit553_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit553_0[i][2] ][ unit553_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit553_0[i][4] ][ unit553_0[i][5] ] >0);
		X_contra = ( LargeX[553][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit553_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[553][1]=0; L[553][0]=1;}
			satisfiable[553][0]=satisfiable[553][0] & ((x[553] ^ 0) | (x[ unit553_0[i][0] ] ^ unit553_0[i][1]) |(x[ unit553_0[i][2] ] ^ unit553_0[i][3]));
			}
		if(X_contra>0) L[553][0]=2;
		}
	//Check all rules of unit[553][1]
	L[553][1] = LargeX[553][0]>0 ? 1 : 0;
	satisfiable[553][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit553_1[i][0] ][ unit553_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit553_1[i][2] ][ unit553_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit553_1[i][4] ][ unit553_1[i][5] ] >0);
		X_contra = ( LargeX[553][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit553_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[553][0]=0; L[553][1]=1;}
			satisfiable[553][1]=satisfiable[553][1] & ((x[553] ^ 1) | (x[ unit553_1[i][0] ] ^ unit553_1[i][1]) |(x[ unit553_1[i][2] ] ^ unit553_1[i][3]));
			}
		if(X_contra>0) L[553][1]=2;
		}
	//Check all rules of unit[554][0]
	L[554][0] = LargeX[554][1]>0 ? 1 : 0;
	satisfiable[554][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit554_0[i][0] ][ unit554_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit554_0[i][2] ][ unit554_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit554_0[i][4] ][ unit554_0[i][5] ] >0);
		X_contra = ( LargeX[554][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit554_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[554][1]=0; L[554][0]=1;}
			satisfiable[554][0]=satisfiable[554][0] & ((x[554] ^ 0) | (x[ unit554_0[i][0] ] ^ unit554_0[i][1]) |(x[ unit554_0[i][2] ] ^ unit554_0[i][3]));
			}
		if(X_contra>0) L[554][0]=2;
		}
	//Check all rules of unit[554][1]
	L[554][1] = LargeX[554][0]>0 ? 1 : 0;
	satisfiable[554][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit554_1[i][0] ][ unit554_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit554_1[i][2] ][ unit554_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit554_1[i][4] ][ unit554_1[i][5] ] >0);
		X_contra = ( LargeX[554][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit554_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[554][0]=0; L[554][1]=1;}
			satisfiable[554][1]=satisfiable[554][1] & ((x[554] ^ 1) | (x[ unit554_1[i][0] ] ^ unit554_1[i][1]) |(x[ unit554_1[i][2] ] ^ unit554_1[i][3]));
			}
		if(X_contra>0) L[554][1]=2;
		}
	//Check all rules of unit[555][0]
	L[555][0] = LargeX[555][1]>0 ? 1 : 0;
	satisfiable[555][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit555_0[i][0] ][ unit555_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit555_0[i][2] ][ unit555_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit555_0[i][4] ][ unit555_0[i][5] ] >0);
		X_contra = ( LargeX[555][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit555_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[555][1]=0; L[555][0]=1;}
			satisfiable[555][0]=satisfiable[555][0] & ((x[555] ^ 0) | (x[ unit555_0[i][0] ] ^ unit555_0[i][1]) |(x[ unit555_0[i][2] ] ^ unit555_0[i][3]));
			}
		if(X_contra>0) L[555][0]=2;
		}
	//Check all rules of unit[555][1]
	L[555][1] = LargeX[555][0]>0 ? 1 : 0;
	satisfiable[555][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit555_1[i][0] ][ unit555_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit555_1[i][2] ][ unit555_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit555_1[i][4] ][ unit555_1[i][5] ] >0);
		X_contra = ( LargeX[555][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit555_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[555][0]=0; L[555][1]=1;}
			satisfiable[555][1]=satisfiable[555][1] & ((x[555] ^ 1) | (x[ unit555_1[i][0] ] ^ unit555_1[i][1]) |(x[ unit555_1[i][2] ] ^ unit555_1[i][3]));
			}
		if(X_contra>0) L[555][1]=2;
		}
	//Check all rules of unit[556][0]
	L[556][0] = LargeX[556][1]>0 ? 1 : 0;
	satisfiable[556][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit556_0[i][0] ][ unit556_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit556_0[i][2] ][ unit556_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit556_0[i][4] ][ unit556_0[i][5] ] >0);
		X_contra = ( LargeX[556][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit556_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[556][1]=0; L[556][0]=1;}
			satisfiable[556][0]=satisfiable[556][0] & ((x[556] ^ 0) | (x[ unit556_0[i][0] ] ^ unit556_0[i][1]) |(x[ unit556_0[i][2] ] ^ unit556_0[i][3]));
			}
		if(X_contra>0) L[556][0]=2;
		}
	//Check all rules of unit[556][1]
	L[556][1] = LargeX[556][0]>0 ? 1 : 0;
	satisfiable[556][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit556_1[i][0] ][ unit556_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit556_1[i][2] ][ unit556_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit556_1[i][4] ][ unit556_1[i][5] ] >0);
		X_contra = ( LargeX[556][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit556_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[556][0]=0; L[556][1]=1;}
			satisfiable[556][1]=satisfiable[556][1] & ((x[556] ^ 1) | (x[ unit556_1[i][0] ] ^ unit556_1[i][1]) |(x[ unit556_1[i][2] ] ^ unit556_1[i][3]));
			}
		if(X_contra>0) L[556][1]=2;
		}
	//Check all rules of unit[557][0]
	L[557][0] = LargeX[557][1]>0 ? 1 : 0;
	satisfiable[557][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit557_0[i][0] ][ unit557_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit557_0[i][2] ][ unit557_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit557_0[i][4] ][ unit557_0[i][5] ] >0);
		X_contra = ( LargeX[557][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit557_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[557][1]=0; L[557][0]=1;}
			satisfiable[557][0]=satisfiable[557][0] & ((x[557] ^ 0) | (x[ unit557_0[i][0] ] ^ unit557_0[i][1]) |(x[ unit557_0[i][2] ] ^ unit557_0[i][3]));
			}
		if(X_contra>0) L[557][0]=2;
		}
	//Check all rules of unit[557][1]
	L[557][1] = LargeX[557][0]>0 ? 1 : 0;
	satisfiable[557][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit557_1[i][0] ][ unit557_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit557_1[i][2] ][ unit557_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit557_1[i][4] ][ unit557_1[i][5] ] >0);
		X_contra = ( LargeX[557][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit557_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[557][0]=0; L[557][1]=1;}
			satisfiable[557][1]=satisfiable[557][1] & ((x[557] ^ 1) | (x[ unit557_1[i][0] ] ^ unit557_1[i][1]) |(x[ unit557_1[i][2] ] ^ unit557_1[i][3]));
			}
		if(X_contra>0) L[557][1]=2;
		}
	//Check all rules of unit[558][0]
	L[558][0] = LargeX[558][1]>0 ? 1 : 0;
	satisfiable[558][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit558_0[i][0] ][ unit558_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit558_0[i][2] ][ unit558_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit558_0[i][4] ][ unit558_0[i][5] ] >0);
		X_contra = ( LargeX[558][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit558_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[558][1]=0; L[558][0]=1;}
			satisfiable[558][0]=satisfiable[558][0] & ((x[558] ^ 0) | (x[ unit558_0[i][0] ] ^ unit558_0[i][1]) |(x[ unit558_0[i][2] ] ^ unit558_0[i][3]));
			}
		if(X_contra>0) L[558][0]=2;
		}
	//Check all rules of unit[558][1]
	L[558][1] = LargeX[558][0]>0 ? 1 : 0;
	satisfiable[558][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit558_1[i][0] ][ unit558_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit558_1[i][2] ][ unit558_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit558_1[i][4] ][ unit558_1[i][5] ] >0);
		X_contra = ( LargeX[558][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit558_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[558][0]=0; L[558][1]=1;}
			satisfiable[558][1]=satisfiable[558][1] & ((x[558] ^ 1) | (x[ unit558_1[i][0] ] ^ unit558_1[i][1]) |(x[ unit558_1[i][2] ] ^ unit558_1[i][3]));
			}
		if(X_contra>0) L[558][1]=2;
		}
	//Check all rules of unit[559][0]
	L[559][0] = LargeX[559][1]>0 ? 1 : 0;
	satisfiable[559][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit559_0[i][0] ][ unit559_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit559_0[i][2] ][ unit559_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit559_0[i][4] ][ unit559_0[i][5] ] >0);
		X_contra = ( LargeX[559][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit559_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[559][1]=0; L[559][0]=1;}
			satisfiable[559][0]=satisfiable[559][0] & ((x[559] ^ 0) | (x[ unit559_0[i][0] ] ^ unit559_0[i][1]) |(x[ unit559_0[i][2] ] ^ unit559_0[i][3]));
			}
		if(X_contra>0) L[559][0]=2;
		}
	//Check all rules of unit[559][1]
	L[559][1] = LargeX[559][0]>0 ? 1 : 0;
	satisfiable[559][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit559_1[i][0] ][ unit559_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit559_1[i][2] ][ unit559_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit559_1[i][4] ][ unit559_1[i][5] ] >0);
		X_contra = ( LargeX[559][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit559_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[559][0]=0; L[559][1]=1;}
			satisfiable[559][1]=satisfiable[559][1] & ((x[559] ^ 1) | (x[ unit559_1[i][0] ] ^ unit559_1[i][1]) |(x[ unit559_1[i][2] ] ^ unit559_1[i][3]));
			}
		if(X_contra>0) L[559][1]=2;
		}
	//Check all rules of unit[560][0]
	L[560][0] = LargeX[560][1]>0 ? 1 : 0;
	satisfiable[560][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit560_0[i][0] ][ unit560_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit560_0[i][2] ][ unit560_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit560_0[i][4] ][ unit560_0[i][5] ] >0);
		X_contra = ( LargeX[560][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit560_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[560][1]=0; L[560][0]=1;}
			satisfiable[560][0]=satisfiable[560][0] & ((x[560] ^ 0) | (x[ unit560_0[i][0] ] ^ unit560_0[i][1]) |(x[ unit560_0[i][2] ] ^ unit560_0[i][3]));
			}
		if(X_contra>0) L[560][0]=2;
		}
	//Check all rules of unit[560][1]
	L[560][1] = LargeX[560][0]>0 ? 1 : 0;
	satisfiable[560][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit560_1[i][0] ][ unit560_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit560_1[i][2] ][ unit560_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit560_1[i][4] ][ unit560_1[i][5] ] >0);
		X_contra = ( LargeX[560][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit560_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[560][0]=0; L[560][1]=1;}
			satisfiable[560][1]=satisfiable[560][1] & ((x[560] ^ 1) | (x[ unit560_1[i][0] ] ^ unit560_1[i][1]) |(x[ unit560_1[i][2] ] ^ unit560_1[i][3]));
			}
		if(X_contra>0) L[560][1]=2;
		}
	//Check all rules of unit[561][0]
	L[561][0] = LargeX[561][1]>0 ? 1 : 0;
	satisfiable[561][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit561_0[i][0] ][ unit561_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit561_0[i][2] ][ unit561_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit561_0[i][4] ][ unit561_0[i][5] ] >0);
		X_contra = ( LargeX[561][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit561_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[561][1]=0; L[561][0]=1;}
			satisfiable[561][0]=satisfiable[561][0] & ((x[561] ^ 0) | (x[ unit561_0[i][0] ] ^ unit561_0[i][1]) |(x[ unit561_0[i][2] ] ^ unit561_0[i][3]));
			}
		if(X_contra>0) L[561][0]=2;
		}
	//Check all rules of unit[561][1]
	L[561][1] = LargeX[561][0]>0 ? 1 : 0;
	satisfiable[561][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit561_1[i][0] ][ unit561_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit561_1[i][2] ][ unit561_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit561_1[i][4] ][ unit561_1[i][5] ] >0);
		X_contra = ( LargeX[561][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit561_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[561][0]=0; L[561][1]=1;}
			satisfiable[561][1]=satisfiable[561][1] & ((x[561] ^ 1) | (x[ unit561_1[i][0] ] ^ unit561_1[i][1]) |(x[ unit561_1[i][2] ] ^ unit561_1[i][3]));
			}
		if(X_contra>0) L[561][1]=2;
		}
	//Check all rules of unit[562][0]
	L[562][0] = LargeX[562][1]>0 ? 1 : 0;
	satisfiable[562][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit562_0[i][0] ][ unit562_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit562_0[i][2] ][ unit562_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit562_0[i][4] ][ unit562_0[i][5] ] >0);
		X_contra = ( LargeX[562][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit562_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[562][1]=0; L[562][0]=1;}
			satisfiable[562][0]=satisfiable[562][0] & ((x[562] ^ 0) | (x[ unit562_0[i][0] ] ^ unit562_0[i][1]) |(x[ unit562_0[i][2] ] ^ unit562_0[i][3]));
			}
		if(X_contra>0) L[562][0]=2;
		}
	//Check all rules of unit[562][1]
	L[562][1] = LargeX[562][0]>0 ? 1 : 0;
	satisfiable[562][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit562_1[i][0] ][ unit562_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit562_1[i][2] ][ unit562_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit562_1[i][4] ][ unit562_1[i][5] ] >0);
		X_contra = ( LargeX[562][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit562_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[562][0]=0; L[562][1]=1;}
			satisfiable[562][1]=satisfiable[562][1] & ((x[562] ^ 1) | (x[ unit562_1[i][0] ] ^ unit562_1[i][1]) |(x[ unit562_1[i][2] ] ^ unit562_1[i][3]));
			}
		if(X_contra>0) L[562][1]=2;
		}
	//Check all rules of unit[563][0]
	L[563][0] = LargeX[563][1]>0 ? 1 : 0;
	satisfiable[563][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit563_0[i][0] ][ unit563_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit563_0[i][2] ][ unit563_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit563_0[i][4] ][ unit563_0[i][5] ] >0);
		X_contra = ( LargeX[563][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit563_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[563][1]=0; L[563][0]=1;}
			satisfiable[563][0]=satisfiable[563][0] & ((x[563] ^ 0) | (x[ unit563_0[i][0] ] ^ unit563_0[i][1]) |(x[ unit563_0[i][2] ] ^ unit563_0[i][3]));
			}
		if(X_contra>0) L[563][0]=2;
		}
	//Check all rules of unit[563][1]
	L[563][1] = LargeX[563][0]>0 ? 1 : 0;
	satisfiable[563][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit563_1[i][0] ][ unit563_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit563_1[i][2] ][ unit563_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit563_1[i][4] ][ unit563_1[i][5] ] >0);
		X_contra = ( LargeX[563][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit563_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[563][0]=0; L[563][1]=1;}
			satisfiable[563][1]=satisfiable[563][1] & ((x[563] ^ 1) | (x[ unit563_1[i][0] ] ^ unit563_1[i][1]) |(x[ unit563_1[i][2] ] ^ unit563_1[i][3]));
			}
		if(X_contra>0) L[563][1]=2;
		}
	//Check all rules of unit[564][0]
	L[564][0] = LargeX[564][1]>0 ? 1 : 0;
	satisfiable[564][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit564_0[i][0] ][ unit564_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit564_0[i][2] ][ unit564_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit564_0[i][4] ][ unit564_0[i][5] ] >0);
		X_contra = ( LargeX[564][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit564_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[564][1]=0; L[564][0]=1;}
			satisfiable[564][0]=satisfiable[564][0] & ((x[564] ^ 0) | (x[ unit564_0[i][0] ] ^ unit564_0[i][1]) |(x[ unit564_0[i][2] ] ^ unit564_0[i][3]));
			}
		if(X_contra>0) L[564][0]=2;
		}
	//Check all rules of unit[564][1]
	L[564][1] = LargeX[564][0]>0 ? 1 : 0;
	satisfiable[564][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit564_1[i][0] ][ unit564_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit564_1[i][2] ][ unit564_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit564_1[i][4] ][ unit564_1[i][5] ] >0);
		X_contra = ( LargeX[564][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit564_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[564][0]=0; L[564][1]=1;}
			satisfiable[564][1]=satisfiable[564][1] & ((x[564] ^ 1) | (x[ unit564_1[i][0] ] ^ unit564_1[i][1]) |(x[ unit564_1[i][2] ] ^ unit564_1[i][3]));
			}
		if(X_contra>0) L[564][1]=2;
		}
	//Check all rules of unit[565][0]
	L[565][0] = LargeX[565][1]>0 ? 1 : 0;
	satisfiable[565][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit565_0[i][0] ][ unit565_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit565_0[i][2] ][ unit565_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit565_0[i][4] ][ unit565_0[i][5] ] >0);
		X_contra = ( LargeX[565][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit565_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[565][1]=0; L[565][0]=1;}
			satisfiable[565][0]=satisfiable[565][0] & ((x[565] ^ 0) | (x[ unit565_0[i][0] ] ^ unit565_0[i][1]) |(x[ unit565_0[i][2] ] ^ unit565_0[i][3]));
			}
		if(X_contra>0) L[565][0]=2;
		}
	//Check all rules of unit[565][1]
	L[565][1] = LargeX[565][0]>0 ? 1 : 0;
	satisfiable[565][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit565_1[i][0] ][ unit565_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit565_1[i][2] ][ unit565_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit565_1[i][4] ][ unit565_1[i][5] ] >0);
		X_contra = ( LargeX[565][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit565_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[565][0]=0; L[565][1]=1;}
			satisfiable[565][1]=satisfiable[565][1] & ((x[565] ^ 1) | (x[ unit565_1[i][0] ] ^ unit565_1[i][1]) |(x[ unit565_1[i][2] ] ^ unit565_1[i][3]));
			}
		if(X_contra>0) L[565][1]=2;
		}
	//Check all rules of unit[566][0]
	L[566][0] = LargeX[566][1]>0 ? 1 : 0;
	satisfiable[566][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit566_0[i][0] ][ unit566_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit566_0[i][2] ][ unit566_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit566_0[i][4] ][ unit566_0[i][5] ] >0);
		X_contra = ( LargeX[566][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit566_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[566][1]=0; L[566][0]=1;}
			satisfiable[566][0]=satisfiable[566][0] & ((x[566] ^ 0) | (x[ unit566_0[i][0] ] ^ unit566_0[i][1]) |(x[ unit566_0[i][2] ] ^ unit566_0[i][3]));
			}
		if(X_contra>0) L[566][0]=2;
		}
	//Check all rules of unit[566][1]
	L[566][1] = LargeX[566][0]>0 ? 1 : 0;
	satisfiable[566][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit566_1[i][0] ][ unit566_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit566_1[i][2] ][ unit566_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit566_1[i][4] ][ unit566_1[i][5] ] >0);
		X_contra = ( LargeX[566][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit566_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[566][0]=0; L[566][1]=1;}
			satisfiable[566][1]=satisfiable[566][1] & ((x[566] ^ 1) | (x[ unit566_1[i][0] ] ^ unit566_1[i][1]) |(x[ unit566_1[i][2] ] ^ unit566_1[i][3]));
			}
		if(X_contra>0) L[566][1]=2;
		}
	//Check all rules of unit[567][0]
	L[567][0] = LargeX[567][1]>0 ? 1 : 0;
	satisfiable[567][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit567_0[i][0] ][ unit567_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit567_0[i][2] ][ unit567_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit567_0[i][4] ][ unit567_0[i][5] ] >0);
		X_contra = ( LargeX[567][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit567_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[567][1]=0; L[567][0]=1;}
			satisfiable[567][0]=satisfiable[567][0] & ((x[567] ^ 0) | (x[ unit567_0[i][0] ] ^ unit567_0[i][1]) |(x[ unit567_0[i][2] ] ^ unit567_0[i][3]));
			}
		if(X_contra>0) L[567][0]=2;
		}
	//Check all rules of unit[567][1]
	L[567][1] = LargeX[567][0]>0 ? 1 : 0;
	satisfiable[567][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit567_1[i][0] ][ unit567_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit567_1[i][2] ][ unit567_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit567_1[i][4] ][ unit567_1[i][5] ] >0);
		X_contra = ( LargeX[567][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit567_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[567][0]=0; L[567][1]=1;}
			satisfiable[567][1]=satisfiable[567][1] & ((x[567] ^ 1) | (x[ unit567_1[i][0] ] ^ unit567_1[i][1]) |(x[ unit567_1[i][2] ] ^ unit567_1[i][3]));
			}
		if(X_contra>0) L[567][1]=2;
		}
	//Check all rules of unit[568][0]
	L[568][0] = LargeX[568][1]>0 ? 1 : 0;
	satisfiable[568][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit568_0[i][0] ][ unit568_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit568_0[i][2] ][ unit568_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit568_0[i][4] ][ unit568_0[i][5] ] >0);
		X_contra = ( LargeX[568][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit568_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[568][1]=0; L[568][0]=1;}
			satisfiable[568][0]=satisfiable[568][0] & ((x[568] ^ 0) | (x[ unit568_0[i][0] ] ^ unit568_0[i][1]) |(x[ unit568_0[i][2] ] ^ unit568_0[i][3]));
			}
		if(X_contra>0) L[568][0]=2;
		}
	//Check all rules of unit[568][1]
	L[568][1] = LargeX[568][0]>0 ? 1 : 0;
	satisfiable[568][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit568_1[i][0] ][ unit568_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit568_1[i][2] ][ unit568_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit568_1[i][4] ][ unit568_1[i][5] ] >0);
		X_contra = ( LargeX[568][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit568_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[568][0]=0; L[568][1]=1;}
			satisfiable[568][1]=satisfiable[568][1] & ((x[568] ^ 1) | (x[ unit568_1[i][0] ] ^ unit568_1[i][1]) |(x[ unit568_1[i][2] ] ^ unit568_1[i][3]));
			}
		if(X_contra>0) L[568][1]=2;
		}
	//Check all rules of unit[569][0]
	L[569][0] = LargeX[569][1]>0 ? 1 : 0;
	satisfiable[569][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit569_0[i][0] ][ unit569_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit569_0[i][2] ][ unit569_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit569_0[i][4] ][ unit569_0[i][5] ] >0);
		X_contra = ( LargeX[569][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit569_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[569][1]=0; L[569][0]=1;}
			satisfiable[569][0]=satisfiable[569][0] & ((x[569] ^ 0) | (x[ unit569_0[i][0] ] ^ unit569_0[i][1]) |(x[ unit569_0[i][2] ] ^ unit569_0[i][3]));
			}
		if(X_contra>0) L[569][0]=2;
		}
	//Check all rules of unit[569][1]
	L[569][1] = LargeX[569][0]>0 ? 1 : 0;
	satisfiable[569][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit569_1[i][0] ][ unit569_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit569_1[i][2] ][ unit569_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit569_1[i][4] ][ unit569_1[i][5] ] >0);
		X_contra = ( LargeX[569][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit569_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[569][0]=0; L[569][1]=1;}
			satisfiable[569][1]=satisfiable[569][1] & ((x[569] ^ 1) | (x[ unit569_1[i][0] ] ^ unit569_1[i][1]) |(x[ unit569_1[i][2] ] ^ unit569_1[i][3]));
			}
		if(X_contra>0) L[569][1]=2;
		}
	//Check all rules of unit[570][0]
	L[570][0] = LargeX[570][1]>0 ? 1 : 0;
	satisfiable[570][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit570_0[i][0] ][ unit570_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit570_0[i][2] ][ unit570_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit570_0[i][4] ][ unit570_0[i][5] ] >0);
		X_contra = ( LargeX[570][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit570_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[570][1]=0; L[570][0]=1;}
			satisfiable[570][0]=satisfiable[570][0] & ((x[570] ^ 0) | (x[ unit570_0[i][0] ] ^ unit570_0[i][1]) |(x[ unit570_0[i][2] ] ^ unit570_0[i][3]));
			}
		if(X_contra>0) L[570][0]=2;
		}
	//Check all rules of unit[570][1]
	L[570][1] = LargeX[570][0]>0 ? 1 : 0;
	satisfiable[570][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit570_1[i][0] ][ unit570_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit570_1[i][2] ][ unit570_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit570_1[i][4] ][ unit570_1[i][5] ] >0);
		X_contra = ( LargeX[570][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit570_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[570][0]=0; L[570][1]=1;}
			satisfiable[570][1]=satisfiable[570][1] & ((x[570] ^ 1) | (x[ unit570_1[i][0] ] ^ unit570_1[i][1]) |(x[ unit570_1[i][2] ] ^ unit570_1[i][3]));
			}
		if(X_contra>0) L[570][1]=2;
		}
	//Check all rules of unit[571][0]
	L[571][0] = LargeX[571][1]>0 ? 1 : 0;
	satisfiable[571][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit571_0[i][0] ][ unit571_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit571_0[i][2] ][ unit571_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit571_0[i][4] ][ unit571_0[i][5] ] >0);
		X_contra = ( LargeX[571][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit571_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[571][1]=0; L[571][0]=1;}
			satisfiable[571][0]=satisfiable[571][0] & ((x[571] ^ 0) | (x[ unit571_0[i][0] ] ^ unit571_0[i][1]) |(x[ unit571_0[i][2] ] ^ unit571_0[i][3]));
			}
		if(X_contra>0) L[571][0]=2;
		}
	//Check all rules of unit[571][1]
	L[571][1] = LargeX[571][0]>0 ? 1 : 0;
	satisfiable[571][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit571_1[i][0] ][ unit571_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit571_1[i][2] ][ unit571_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit571_1[i][4] ][ unit571_1[i][5] ] >0);
		X_contra = ( LargeX[571][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit571_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[571][0]=0; L[571][1]=1;}
			satisfiable[571][1]=satisfiable[571][1] & ((x[571] ^ 1) | (x[ unit571_1[i][0] ] ^ unit571_1[i][1]) |(x[ unit571_1[i][2] ] ^ unit571_1[i][3]));
			}
		if(X_contra>0) L[571][1]=2;
		}
	//Check all rules of unit[572][0]
	L[572][0] = LargeX[572][1]>0 ? 1 : 0;
	satisfiable[572][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit572_0[i][0] ][ unit572_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit572_0[i][2] ][ unit572_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit572_0[i][4] ][ unit572_0[i][5] ] >0);
		X_contra = ( LargeX[572][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit572_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[572][1]=0; L[572][0]=1;}
			satisfiable[572][0]=satisfiable[572][0] & ((x[572] ^ 0) | (x[ unit572_0[i][0] ] ^ unit572_0[i][1]) |(x[ unit572_0[i][2] ] ^ unit572_0[i][3]));
			}
		if(X_contra>0) L[572][0]=2;
		}
	//Check all rules of unit[572][1]
	L[572][1] = LargeX[572][0]>0 ? 1 : 0;
	satisfiable[572][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit572_1[i][0] ][ unit572_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit572_1[i][2] ][ unit572_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit572_1[i][4] ][ unit572_1[i][5] ] >0);
		X_contra = ( LargeX[572][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit572_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[572][0]=0; L[572][1]=1;}
			satisfiable[572][1]=satisfiable[572][1] & ((x[572] ^ 1) | (x[ unit572_1[i][0] ] ^ unit572_1[i][1]) |(x[ unit572_1[i][2] ] ^ unit572_1[i][3]));
			}
		if(X_contra>0) L[572][1]=2;
		}
	//Check all rules of unit[573][0]
	L[573][0] = LargeX[573][1]>0 ? 1 : 0;
	satisfiable[573][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit573_0[i][0] ][ unit573_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit573_0[i][2] ][ unit573_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit573_0[i][4] ][ unit573_0[i][5] ] >0);
		X_contra = ( LargeX[573][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit573_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[573][1]=0; L[573][0]=1;}
			satisfiable[573][0]=satisfiable[573][0] & ((x[573] ^ 0) | (x[ unit573_0[i][0] ] ^ unit573_0[i][1]) |(x[ unit573_0[i][2] ] ^ unit573_0[i][3]));
			}
		if(X_contra>0) L[573][0]=2;
		}
	//Check all rules of unit[573][1]
	L[573][1] = LargeX[573][0]>0 ? 1 : 0;
	satisfiable[573][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit573_1[i][0] ][ unit573_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit573_1[i][2] ][ unit573_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit573_1[i][4] ][ unit573_1[i][5] ] >0);
		X_contra = ( LargeX[573][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit573_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[573][0]=0; L[573][1]=1;}
			satisfiable[573][1]=satisfiable[573][1] & ((x[573] ^ 1) | (x[ unit573_1[i][0] ] ^ unit573_1[i][1]) |(x[ unit573_1[i][2] ] ^ unit573_1[i][3]));
			}
		if(X_contra>0) L[573][1]=2;
		}
	//Check all rules of unit[574][0]
	L[574][0] = LargeX[574][1]>0 ? 1 : 0;
	satisfiable[574][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit574_0[i][0] ][ unit574_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit574_0[i][2] ][ unit574_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit574_0[i][4] ][ unit574_0[i][5] ] >0);
		X_contra = ( LargeX[574][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit574_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[574][1]=0; L[574][0]=1;}
			satisfiable[574][0]=satisfiable[574][0] & ((x[574] ^ 0) | (x[ unit574_0[i][0] ] ^ unit574_0[i][1]) |(x[ unit574_0[i][2] ] ^ unit574_0[i][3]));
			}
		if(X_contra>0) L[574][0]=2;
		}
	//Check all rules of unit[574][1]
	L[574][1] = LargeX[574][0]>0 ? 1 : 0;
	satisfiable[574][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit574_1[i][0] ][ unit574_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit574_1[i][2] ][ unit574_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit574_1[i][4] ][ unit574_1[i][5] ] >0);
		X_contra = ( LargeX[574][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit574_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[574][0]=0; L[574][1]=1;}
			satisfiable[574][1]=satisfiable[574][1] & ((x[574] ^ 1) | (x[ unit574_1[i][0] ] ^ unit574_1[i][1]) |(x[ unit574_1[i][2] ] ^ unit574_1[i][3]));
			}
		if(X_contra>0) L[574][1]=2;
		}
	//Check all rules of unit[575][0]
	L[575][0] = LargeX[575][1]>0 ? 1 : 0;
	satisfiable[575][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit575_0[i][0] ][ unit575_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit575_0[i][2] ][ unit575_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit575_0[i][4] ][ unit575_0[i][5] ] >0);
		X_contra = ( LargeX[575][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit575_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[575][1]=0; L[575][0]=1;}
			satisfiable[575][0]=satisfiable[575][0] & ((x[575] ^ 0) | (x[ unit575_0[i][0] ] ^ unit575_0[i][1]) |(x[ unit575_0[i][2] ] ^ unit575_0[i][3]));
			}
		if(X_contra>0) L[575][0]=2;
		}
	//Check all rules of unit[575][1]
	L[575][1] = LargeX[575][0]>0 ? 1 : 0;
	satisfiable[575][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit575_1[i][0] ][ unit575_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit575_1[i][2] ][ unit575_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit575_1[i][4] ][ unit575_1[i][5] ] >0);
		X_contra = ( LargeX[575][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit575_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[575][0]=0; L[575][1]=1;}
			satisfiable[575][1]=satisfiable[575][1] & ((x[575] ^ 1) | (x[ unit575_1[i][0] ] ^ unit575_1[i][1]) |(x[ unit575_1[i][2] ] ^ unit575_1[i][3]));
			}
		if(X_contra>0) L[575][1]=2;
		}
	//Check all rules of unit[576][0]
	L[576][0] = LargeX[576][1]>0 ? 1 : 0;
	satisfiable[576][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit576_0[i][0] ][ unit576_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit576_0[i][2] ][ unit576_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit576_0[i][4] ][ unit576_0[i][5] ] >0);
		X_contra = ( LargeX[576][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit576_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[576][1]=0; L[576][0]=1;}
			satisfiable[576][0]=satisfiable[576][0] & ((x[576] ^ 0) | (x[ unit576_0[i][0] ] ^ unit576_0[i][1]) |(x[ unit576_0[i][2] ] ^ unit576_0[i][3]));
			}
		if(X_contra>0) L[576][0]=2;
		}
	//Check all rules of unit[576][1]
	L[576][1] = LargeX[576][0]>0 ? 1 : 0;
	satisfiable[576][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit576_1[i][0] ][ unit576_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit576_1[i][2] ][ unit576_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit576_1[i][4] ][ unit576_1[i][5] ] >0);
		X_contra = ( LargeX[576][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit576_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[576][0]=0; L[576][1]=1;}
			satisfiable[576][1]=satisfiable[576][1] & ((x[576] ^ 1) | (x[ unit576_1[i][0] ] ^ unit576_1[i][1]) |(x[ unit576_1[i][2] ] ^ unit576_1[i][3]));
			}
		if(X_contra>0) L[576][1]=2;
		}
	//Check all rules of unit[577][0]
	L[577][0] = LargeX[577][1]>0 ? 1 : 0;
	satisfiable[577][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit577_0[i][0] ][ unit577_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit577_0[i][2] ][ unit577_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit577_0[i][4] ][ unit577_0[i][5] ] >0);
		X_contra = ( LargeX[577][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit577_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[577][1]=0; L[577][0]=1;}
			satisfiable[577][0]=satisfiable[577][0] & ((x[577] ^ 0) | (x[ unit577_0[i][0] ] ^ unit577_0[i][1]) |(x[ unit577_0[i][2] ] ^ unit577_0[i][3]));
			}
		if(X_contra>0) L[577][0]=2;
		}
	//Check all rules of unit[577][1]
	L[577][1] = LargeX[577][0]>0 ? 1 : 0;
	satisfiable[577][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit577_1[i][0] ][ unit577_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit577_1[i][2] ][ unit577_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit577_1[i][4] ][ unit577_1[i][5] ] >0);
		X_contra = ( LargeX[577][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit577_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[577][0]=0; L[577][1]=1;}
			satisfiable[577][1]=satisfiable[577][1] & ((x[577] ^ 1) | (x[ unit577_1[i][0] ] ^ unit577_1[i][1]) |(x[ unit577_1[i][2] ] ^ unit577_1[i][3]));
			}
		if(X_contra>0) L[577][1]=2;
		}
	//Check all rules of unit[578][0]
	L[578][0] = LargeX[578][1]>0 ? 1 : 0;
	satisfiable[578][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit578_0[i][0] ][ unit578_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit578_0[i][2] ][ unit578_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit578_0[i][4] ][ unit578_0[i][5] ] >0);
		X_contra = ( LargeX[578][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit578_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[578][1]=0; L[578][0]=1;}
			satisfiable[578][0]=satisfiable[578][0] & ((x[578] ^ 0) | (x[ unit578_0[i][0] ] ^ unit578_0[i][1]) |(x[ unit578_0[i][2] ] ^ unit578_0[i][3]));
			}
		if(X_contra>0) L[578][0]=2;
		}
	//Check all rules of unit[578][1]
	L[578][1] = LargeX[578][0]>0 ? 1 : 0;
	satisfiable[578][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit578_1[i][0] ][ unit578_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit578_1[i][2] ][ unit578_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit578_1[i][4] ][ unit578_1[i][5] ] >0);
		X_contra = ( LargeX[578][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit578_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[578][0]=0; L[578][1]=1;}
			satisfiable[578][1]=satisfiable[578][1] & ((x[578] ^ 1) | (x[ unit578_1[i][0] ] ^ unit578_1[i][1]) |(x[ unit578_1[i][2] ] ^ unit578_1[i][3]));
			}
		if(X_contra>0) L[578][1]=2;
		}
	//Check all rules of unit[579][0]
	L[579][0] = LargeX[579][1]>0 ? 1 : 0;
	satisfiable[579][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit579_0[i][0] ][ unit579_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit579_0[i][2] ][ unit579_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit579_0[i][4] ][ unit579_0[i][5] ] >0);
		X_contra = ( LargeX[579][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit579_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[579][1]=0; L[579][0]=1;}
			satisfiable[579][0]=satisfiable[579][0] & ((x[579] ^ 0) | (x[ unit579_0[i][0] ] ^ unit579_0[i][1]) |(x[ unit579_0[i][2] ] ^ unit579_0[i][3]));
			}
		if(X_contra>0) L[579][0]=2;
		}
	//Check all rules of unit[579][1]
	L[579][1] = LargeX[579][0]>0 ? 1 : 0;
	satisfiable[579][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit579_1[i][0] ][ unit579_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit579_1[i][2] ][ unit579_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit579_1[i][4] ][ unit579_1[i][5] ] >0);
		X_contra = ( LargeX[579][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit579_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[579][0]=0; L[579][1]=1;}
			satisfiable[579][1]=satisfiable[579][1] & ((x[579] ^ 1) | (x[ unit579_1[i][0] ] ^ unit579_1[i][1]) |(x[ unit579_1[i][2] ] ^ unit579_1[i][3]));
			}
		if(X_contra>0) L[579][1]=2;
		}
	//Check all rules of unit[580][0]
	L[580][0] = LargeX[580][1]>0 ? 1 : 0;
	satisfiable[580][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit580_0[i][0] ][ unit580_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit580_0[i][2] ][ unit580_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit580_0[i][4] ][ unit580_0[i][5] ] >0);
		X_contra = ( LargeX[580][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit580_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[580][1]=0; L[580][0]=1;}
			satisfiable[580][0]=satisfiable[580][0] & ((x[580] ^ 0) | (x[ unit580_0[i][0] ] ^ unit580_0[i][1]) |(x[ unit580_0[i][2] ] ^ unit580_0[i][3]));
			}
		if(X_contra>0) L[580][0]=2;
		}
	//Check all rules of unit[580][1]
	L[580][1] = LargeX[580][0]>0 ? 1 : 0;
	satisfiable[580][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit580_1[i][0] ][ unit580_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit580_1[i][2] ][ unit580_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit580_1[i][4] ][ unit580_1[i][5] ] >0);
		X_contra = ( LargeX[580][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit580_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[580][0]=0; L[580][1]=1;}
			satisfiable[580][1]=satisfiable[580][1] & ((x[580] ^ 1) | (x[ unit580_1[i][0] ] ^ unit580_1[i][1]) |(x[ unit580_1[i][2] ] ^ unit580_1[i][3]));
			}
		if(X_contra>0) L[580][1]=2;
		}
	//Check all rules of unit[581][0]
	L[581][0] = LargeX[581][1]>0 ? 1 : 0;
	satisfiable[581][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit581_0[i][0] ][ unit581_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit581_0[i][2] ][ unit581_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit581_0[i][4] ][ unit581_0[i][5] ] >0);
		X_contra = ( LargeX[581][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit581_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[581][1]=0; L[581][0]=1;}
			satisfiable[581][0]=satisfiable[581][0] & ((x[581] ^ 0) | (x[ unit581_0[i][0] ] ^ unit581_0[i][1]) |(x[ unit581_0[i][2] ] ^ unit581_0[i][3]));
			}
		if(X_contra>0) L[581][0]=2;
		}
	//Check all rules of unit[581][1]
	L[581][1] = LargeX[581][0]>0 ? 1 : 0;
	satisfiable[581][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit581_1[i][0] ][ unit581_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit581_1[i][2] ][ unit581_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit581_1[i][4] ][ unit581_1[i][5] ] >0);
		X_contra = ( LargeX[581][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit581_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[581][0]=0; L[581][1]=1;}
			satisfiable[581][1]=satisfiable[581][1] & ((x[581] ^ 1) | (x[ unit581_1[i][0] ] ^ unit581_1[i][1]) |(x[ unit581_1[i][2] ] ^ unit581_1[i][3]));
			}
		if(X_contra>0) L[581][1]=2;
		}
	//Check all rules of unit[582][0]
	L[582][0] = LargeX[582][1]>0 ? 1 : 0;
	satisfiable[582][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit582_0[i][0] ][ unit582_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit582_0[i][2] ][ unit582_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit582_0[i][4] ][ unit582_0[i][5] ] >0);
		X_contra = ( LargeX[582][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit582_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[582][1]=0; L[582][0]=1;}
			satisfiable[582][0]=satisfiable[582][0] & ((x[582] ^ 0) | (x[ unit582_0[i][0] ] ^ unit582_0[i][1]) |(x[ unit582_0[i][2] ] ^ unit582_0[i][3]));
			}
		if(X_contra>0) L[582][0]=2;
		}
	//Check all rules of unit[582][1]
	L[582][1] = LargeX[582][0]>0 ? 1 : 0;
	satisfiable[582][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit582_1[i][0] ][ unit582_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit582_1[i][2] ][ unit582_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit582_1[i][4] ][ unit582_1[i][5] ] >0);
		X_contra = ( LargeX[582][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit582_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[582][0]=0; L[582][1]=1;}
			satisfiable[582][1]=satisfiable[582][1] & ((x[582] ^ 1) | (x[ unit582_1[i][0] ] ^ unit582_1[i][1]) |(x[ unit582_1[i][2] ] ^ unit582_1[i][3]));
			}
		if(X_contra>0) L[582][1]=2;
		}
	//Check all rules of unit[583][0]
	L[583][0] = LargeX[583][1]>0 ? 1 : 0;
	satisfiable[583][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit583_0[i][0] ][ unit583_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit583_0[i][2] ][ unit583_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit583_0[i][4] ][ unit583_0[i][5] ] >0);
		X_contra = ( LargeX[583][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit583_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[583][1]=0; L[583][0]=1;}
			satisfiable[583][0]=satisfiable[583][0] & ((x[583] ^ 0) | (x[ unit583_0[i][0] ] ^ unit583_0[i][1]) |(x[ unit583_0[i][2] ] ^ unit583_0[i][3]));
			}
		if(X_contra>0) L[583][0]=2;
		}
	//Check all rules of unit[583][1]
	L[583][1] = LargeX[583][0]>0 ? 1 : 0;
	satisfiable[583][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit583_1[i][0] ][ unit583_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit583_1[i][2] ][ unit583_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit583_1[i][4] ][ unit583_1[i][5] ] >0);
		X_contra = ( LargeX[583][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit583_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[583][0]=0; L[583][1]=1;}
			satisfiable[583][1]=satisfiable[583][1] & ((x[583] ^ 1) | (x[ unit583_1[i][0] ] ^ unit583_1[i][1]) |(x[ unit583_1[i][2] ] ^ unit583_1[i][3]));
			}
		if(X_contra>0) L[583][1]=2;
		}
	//Check all rules of unit[584][0]
	L[584][0] = LargeX[584][1]>0 ? 1 : 0;
	satisfiable[584][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit584_0[i][0] ][ unit584_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit584_0[i][2] ][ unit584_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit584_0[i][4] ][ unit584_0[i][5] ] >0);
		X_contra = ( LargeX[584][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit584_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[584][1]=0; L[584][0]=1;}
			satisfiable[584][0]=satisfiable[584][0] & ((x[584] ^ 0) | (x[ unit584_0[i][0] ] ^ unit584_0[i][1]) |(x[ unit584_0[i][2] ] ^ unit584_0[i][3]));
			}
		if(X_contra>0) L[584][0]=2;
		}
	//Check all rules of unit[584][1]
	L[584][1] = LargeX[584][0]>0 ? 1 : 0;
	satisfiable[584][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit584_1[i][0] ][ unit584_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit584_1[i][2] ][ unit584_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit584_1[i][4] ][ unit584_1[i][5] ] >0);
		X_contra = ( LargeX[584][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit584_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[584][0]=0; L[584][1]=1;}
			satisfiable[584][1]=satisfiable[584][1] & ((x[584] ^ 1) | (x[ unit584_1[i][0] ] ^ unit584_1[i][1]) |(x[ unit584_1[i][2] ] ^ unit584_1[i][3]));
			}
		if(X_contra>0) L[584][1]=2;
		}
	//Check all rules of unit[585][0]
	L[585][0] = LargeX[585][1]>0 ? 1 : 0;
	satisfiable[585][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit585_0[i][0] ][ unit585_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit585_0[i][2] ][ unit585_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit585_0[i][4] ][ unit585_0[i][5] ] >0);
		X_contra = ( LargeX[585][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit585_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[585][1]=0; L[585][0]=1;}
			satisfiable[585][0]=satisfiable[585][0] & ((x[585] ^ 0) | (x[ unit585_0[i][0] ] ^ unit585_0[i][1]) |(x[ unit585_0[i][2] ] ^ unit585_0[i][3]));
			}
		if(X_contra>0) L[585][0]=2;
		}
	//Check all rules of unit[585][1]
	L[585][1] = LargeX[585][0]>0 ? 1 : 0;
	satisfiable[585][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit585_1[i][0] ][ unit585_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit585_1[i][2] ][ unit585_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit585_1[i][4] ][ unit585_1[i][5] ] >0);
		X_contra = ( LargeX[585][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit585_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[585][0]=0; L[585][1]=1;}
			satisfiable[585][1]=satisfiable[585][1] & ((x[585] ^ 1) | (x[ unit585_1[i][0] ] ^ unit585_1[i][1]) |(x[ unit585_1[i][2] ] ^ unit585_1[i][3]));
			}
		if(X_contra>0) L[585][1]=2;
		}
	//Check all rules of unit[586][0]
	L[586][0] = LargeX[586][1]>0 ? 1 : 0;
	satisfiable[586][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit586_0[i][0] ][ unit586_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit586_0[i][2] ][ unit586_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit586_0[i][4] ][ unit586_0[i][5] ] >0);
		X_contra = ( LargeX[586][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit586_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[586][1]=0; L[586][0]=1;}
			satisfiable[586][0]=satisfiable[586][0] & ((x[586] ^ 0) | (x[ unit586_0[i][0] ] ^ unit586_0[i][1]) |(x[ unit586_0[i][2] ] ^ unit586_0[i][3]));
			}
		if(X_contra>0) L[586][0]=2;
		}
	//Check all rules of unit[586][1]
	L[586][1] = LargeX[586][0]>0 ? 1 : 0;
	satisfiable[586][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit586_1[i][0] ][ unit586_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit586_1[i][2] ][ unit586_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit586_1[i][4] ][ unit586_1[i][5] ] >0);
		X_contra = ( LargeX[586][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit586_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[586][0]=0; L[586][1]=1;}
			satisfiable[586][1]=satisfiable[586][1] & ((x[586] ^ 1) | (x[ unit586_1[i][0] ] ^ unit586_1[i][1]) |(x[ unit586_1[i][2] ] ^ unit586_1[i][3]));
			}
		if(X_contra>0) L[586][1]=2;
		}
	//Check all rules of unit[587][0]
	L[587][0] = LargeX[587][1]>0 ? 1 : 0;
	satisfiable[587][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit587_0[i][0] ][ unit587_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit587_0[i][2] ][ unit587_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit587_0[i][4] ][ unit587_0[i][5] ] >0);
		X_contra = ( LargeX[587][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit587_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[587][1]=0; L[587][0]=1;}
			satisfiable[587][0]=satisfiable[587][0] & ((x[587] ^ 0) | (x[ unit587_0[i][0] ] ^ unit587_0[i][1]) |(x[ unit587_0[i][2] ] ^ unit587_0[i][3]));
			}
		if(X_contra>0) L[587][0]=2;
		}
	//Check all rules of unit[587][1]
	L[587][1] = LargeX[587][0]>0 ? 1 : 0;
	satisfiable[587][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit587_1[i][0] ][ unit587_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit587_1[i][2] ][ unit587_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit587_1[i][4] ][ unit587_1[i][5] ] >0);
		X_contra = ( LargeX[587][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit587_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[587][0]=0; L[587][1]=1;}
			satisfiable[587][1]=satisfiable[587][1] & ((x[587] ^ 1) | (x[ unit587_1[i][0] ] ^ unit587_1[i][1]) |(x[ unit587_1[i][2] ] ^ unit587_1[i][3]));
			}
		if(X_contra>0) L[587][1]=2;
		}
	//Check all rules of unit[588][0]
	L[588][0] = LargeX[588][1]>0 ? 1 : 0;
	satisfiable[588][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit588_0[i][0] ][ unit588_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit588_0[i][2] ][ unit588_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit588_0[i][4] ][ unit588_0[i][5] ] >0);
		X_contra = ( LargeX[588][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit588_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[588][1]=0; L[588][0]=1;}
			satisfiable[588][0]=satisfiable[588][0] & ((x[588] ^ 0) | (x[ unit588_0[i][0] ] ^ unit588_0[i][1]) |(x[ unit588_0[i][2] ] ^ unit588_0[i][3]));
			}
		if(X_contra>0) L[588][0]=2;
		}
	//Check all rules of unit[588][1]
	L[588][1] = LargeX[588][0]>0 ? 1 : 0;
	satisfiable[588][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit588_1[i][0] ][ unit588_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit588_1[i][2] ][ unit588_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit588_1[i][4] ][ unit588_1[i][5] ] >0);
		X_contra = ( LargeX[588][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit588_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[588][0]=0; L[588][1]=1;}
			satisfiable[588][1]=satisfiable[588][1] & ((x[588] ^ 1) | (x[ unit588_1[i][0] ] ^ unit588_1[i][1]) |(x[ unit588_1[i][2] ] ^ unit588_1[i][3]));
			}
		if(X_contra>0) L[588][1]=2;
		}
	//Check all rules of unit[589][0]
	L[589][0] = LargeX[589][1]>0 ? 1 : 0;
	satisfiable[589][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit589_0[i][0] ][ unit589_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit589_0[i][2] ][ unit589_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit589_0[i][4] ][ unit589_0[i][5] ] >0);
		X_contra = ( LargeX[589][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit589_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[589][1]=0; L[589][0]=1;}
			satisfiable[589][0]=satisfiable[589][0] & ((x[589] ^ 0) | (x[ unit589_0[i][0] ] ^ unit589_0[i][1]) |(x[ unit589_0[i][2] ] ^ unit589_0[i][3]));
			}
		if(X_contra>0) L[589][0]=2;
		}
	//Check all rules of unit[589][1]
	L[589][1] = LargeX[589][0]>0 ? 1 : 0;
	satisfiable[589][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit589_1[i][0] ][ unit589_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit589_1[i][2] ][ unit589_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit589_1[i][4] ][ unit589_1[i][5] ] >0);
		X_contra = ( LargeX[589][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit589_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[589][0]=0; L[589][1]=1;}
			satisfiable[589][1]=satisfiable[589][1] & ((x[589] ^ 1) | (x[ unit589_1[i][0] ] ^ unit589_1[i][1]) |(x[ unit589_1[i][2] ] ^ unit589_1[i][3]));
			}
		if(X_contra>0) L[589][1]=2;
		}
	//Check all rules of unit[590][0]
	L[590][0] = LargeX[590][1]>0 ? 1 : 0;
	satisfiable[590][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit590_0[i][0] ][ unit590_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit590_0[i][2] ][ unit590_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit590_0[i][4] ][ unit590_0[i][5] ] >0);
		X_contra = ( LargeX[590][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit590_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[590][1]=0; L[590][0]=1;}
			satisfiable[590][0]=satisfiable[590][0] & ((x[590] ^ 0) | (x[ unit590_0[i][0] ] ^ unit590_0[i][1]) |(x[ unit590_0[i][2] ] ^ unit590_0[i][3]));
			}
		if(X_contra>0) L[590][0]=2;
		}
	//Check all rules of unit[590][1]
	L[590][1] = LargeX[590][0]>0 ? 1 : 0;
	satisfiable[590][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit590_1[i][0] ][ unit590_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit590_1[i][2] ][ unit590_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit590_1[i][4] ][ unit590_1[i][5] ] >0);
		X_contra = ( LargeX[590][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit590_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[590][0]=0; L[590][1]=1;}
			satisfiable[590][1]=satisfiable[590][1] & ((x[590] ^ 1) | (x[ unit590_1[i][0] ] ^ unit590_1[i][1]) |(x[ unit590_1[i][2] ] ^ unit590_1[i][3]));
			}
		if(X_contra>0) L[590][1]=2;
		}
	//Check all rules of unit[591][0]
	L[591][0] = LargeX[591][1]>0 ? 1 : 0;
	satisfiable[591][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit591_0[i][0] ][ unit591_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit591_0[i][2] ][ unit591_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit591_0[i][4] ][ unit591_0[i][5] ] >0);
		X_contra = ( LargeX[591][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit591_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[591][1]=0; L[591][0]=1;}
			satisfiable[591][0]=satisfiable[591][0] & ((x[591] ^ 0) | (x[ unit591_0[i][0] ] ^ unit591_0[i][1]) |(x[ unit591_0[i][2] ] ^ unit591_0[i][3]));
			}
		if(X_contra>0) L[591][0]=2;
		}
	//Check all rules of unit[591][1]
	L[591][1] = LargeX[591][0]>0 ? 1 : 0;
	satisfiable[591][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit591_1[i][0] ][ unit591_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit591_1[i][2] ][ unit591_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit591_1[i][4] ][ unit591_1[i][5] ] >0);
		X_contra = ( LargeX[591][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit591_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[591][0]=0; L[591][1]=1;}
			satisfiable[591][1]=satisfiable[591][1] & ((x[591] ^ 1) | (x[ unit591_1[i][0] ] ^ unit591_1[i][1]) |(x[ unit591_1[i][2] ] ^ unit591_1[i][3]));
			}
		if(X_contra>0) L[591][1]=2;
		}
	//Check all rules of unit[592][0]
	L[592][0] = LargeX[592][1]>0 ? 1 : 0;
	satisfiable[592][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit592_0[i][0] ][ unit592_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit592_0[i][2] ][ unit592_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit592_0[i][4] ][ unit592_0[i][5] ] >0);
		X_contra = ( LargeX[592][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit592_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[592][1]=0; L[592][0]=1;}
			satisfiable[592][0]=satisfiable[592][0] & ((x[592] ^ 0) | (x[ unit592_0[i][0] ] ^ unit592_0[i][1]) |(x[ unit592_0[i][2] ] ^ unit592_0[i][3]));
			}
		if(X_contra>0) L[592][0]=2;
		}
	//Check all rules of unit[592][1]
	L[592][1] = LargeX[592][0]>0 ? 1 : 0;
	satisfiable[592][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit592_1[i][0] ][ unit592_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit592_1[i][2] ][ unit592_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit592_1[i][4] ][ unit592_1[i][5] ] >0);
		X_contra = ( LargeX[592][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit592_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[592][0]=0; L[592][1]=1;}
			satisfiable[592][1]=satisfiable[592][1] & ((x[592] ^ 1) | (x[ unit592_1[i][0] ] ^ unit592_1[i][1]) |(x[ unit592_1[i][2] ] ^ unit592_1[i][3]));
			}
		if(X_contra>0) L[592][1]=2;
		}
	//Check all rules of unit[593][0]
	L[593][0] = LargeX[593][1]>0 ? 1 : 0;
	satisfiable[593][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit593_0[i][0] ][ unit593_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit593_0[i][2] ][ unit593_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit593_0[i][4] ][ unit593_0[i][5] ] >0);
		X_contra = ( LargeX[593][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit593_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[593][1]=0; L[593][0]=1;}
			satisfiable[593][0]=satisfiable[593][0] & ((x[593] ^ 0) | (x[ unit593_0[i][0] ] ^ unit593_0[i][1]) |(x[ unit593_0[i][2] ] ^ unit593_0[i][3]));
			}
		if(X_contra>0) L[593][0]=2;
		}
	//Check all rules of unit[593][1]
	L[593][1] = LargeX[593][0]>0 ? 1 : 0;
	satisfiable[593][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit593_1[i][0] ][ unit593_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit593_1[i][2] ][ unit593_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit593_1[i][4] ][ unit593_1[i][5] ] >0);
		X_contra = ( LargeX[593][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit593_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[593][0]=0; L[593][1]=1;}
			satisfiable[593][1]=satisfiable[593][1] & ((x[593] ^ 1) | (x[ unit593_1[i][0] ] ^ unit593_1[i][1]) |(x[ unit593_1[i][2] ] ^ unit593_1[i][3]));
			}
		if(X_contra>0) L[593][1]=2;
		}
	//Check all rules of unit[594][0]
	L[594][0] = LargeX[594][1]>0 ? 1 : 0;
	satisfiable[594][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit594_0[i][0] ][ unit594_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit594_0[i][2] ][ unit594_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit594_0[i][4] ][ unit594_0[i][5] ] >0);
		X_contra = ( LargeX[594][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit594_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[594][1]=0; L[594][0]=1;}
			satisfiable[594][0]=satisfiable[594][0] & ((x[594] ^ 0) | (x[ unit594_0[i][0] ] ^ unit594_0[i][1]) |(x[ unit594_0[i][2] ] ^ unit594_0[i][3]));
			}
		if(X_contra>0) L[594][0]=2;
		}
	//Check all rules of unit[594][1]
	L[594][1] = LargeX[594][0]>0 ? 1 : 0;
	satisfiable[594][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit594_1[i][0] ][ unit594_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit594_1[i][2] ][ unit594_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit594_1[i][4] ][ unit594_1[i][5] ] >0);
		X_contra = ( LargeX[594][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit594_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[594][0]=0; L[594][1]=1;}
			satisfiable[594][1]=satisfiable[594][1] & ((x[594] ^ 1) | (x[ unit594_1[i][0] ] ^ unit594_1[i][1]) |(x[ unit594_1[i][2] ] ^ unit594_1[i][3]));
			}
		if(X_contra>0) L[594][1]=2;
		}
	//Check all rules of unit[595][0]
	L[595][0] = LargeX[595][1]>0 ? 1 : 0;
	satisfiable[595][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit595_0[i][0] ][ unit595_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit595_0[i][2] ][ unit595_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit595_0[i][4] ][ unit595_0[i][5] ] >0);
		X_contra = ( LargeX[595][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit595_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[595][1]=0; L[595][0]=1;}
			satisfiable[595][0]=satisfiable[595][0] & ((x[595] ^ 0) | (x[ unit595_0[i][0] ] ^ unit595_0[i][1]) |(x[ unit595_0[i][2] ] ^ unit595_0[i][3]));
			}
		if(X_contra>0) L[595][0]=2;
		}
	//Check all rules of unit[595][1]
	L[595][1] = LargeX[595][0]>0 ? 1 : 0;
	satisfiable[595][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit595_1[i][0] ][ unit595_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit595_1[i][2] ][ unit595_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit595_1[i][4] ][ unit595_1[i][5] ] >0);
		X_contra = ( LargeX[595][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit595_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[595][0]=0; L[595][1]=1;}
			satisfiable[595][1]=satisfiable[595][1] & ((x[595] ^ 1) | (x[ unit595_1[i][0] ] ^ unit595_1[i][1]) |(x[ unit595_1[i][2] ] ^ unit595_1[i][3]));
			}
		if(X_contra>0) L[595][1]=2;
		}
	//Check all rules of unit[596][0]
	L[596][0] = LargeX[596][1]>0 ? 1 : 0;
	satisfiable[596][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit596_0[i][0] ][ unit596_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit596_0[i][2] ][ unit596_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit596_0[i][4] ][ unit596_0[i][5] ] >0);
		X_contra = ( LargeX[596][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit596_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[596][1]=0; L[596][0]=1;}
			satisfiable[596][0]=satisfiable[596][0] & ((x[596] ^ 0) | (x[ unit596_0[i][0] ] ^ unit596_0[i][1]) |(x[ unit596_0[i][2] ] ^ unit596_0[i][3]));
			}
		if(X_contra>0) L[596][0]=2;
		}
	//Check all rules of unit[596][1]
	L[596][1] = LargeX[596][0]>0 ? 1 : 0;
	satisfiable[596][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit596_1[i][0] ][ unit596_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit596_1[i][2] ][ unit596_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit596_1[i][4] ][ unit596_1[i][5] ] >0);
		X_contra = ( LargeX[596][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit596_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[596][0]=0; L[596][1]=1;}
			satisfiable[596][1]=satisfiable[596][1] & ((x[596] ^ 1) | (x[ unit596_1[i][0] ] ^ unit596_1[i][1]) |(x[ unit596_1[i][2] ] ^ unit596_1[i][3]));
			}
		if(X_contra>0) L[596][1]=2;
		}
	//Check all rules of unit[597][0]
	L[597][0] = LargeX[597][1]>0 ? 1 : 0;
	satisfiable[597][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit597_0[i][0] ][ unit597_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit597_0[i][2] ][ unit597_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit597_0[i][4] ][ unit597_0[i][5] ] >0);
		X_contra = ( LargeX[597][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit597_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[597][1]=0; L[597][0]=1;}
			satisfiable[597][0]=satisfiable[597][0] & ((x[597] ^ 0) | (x[ unit597_0[i][0] ] ^ unit597_0[i][1]) |(x[ unit597_0[i][2] ] ^ unit597_0[i][3]));
			}
		if(X_contra>0) L[597][0]=2;
		}
	//Check all rules of unit[597][1]
	L[597][1] = LargeX[597][0]>0 ? 1 : 0;
	satisfiable[597][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit597_1[i][0] ][ unit597_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit597_1[i][2] ][ unit597_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit597_1[i][4] ][ unit597_1[i][5] ] >0);
		X_contra = ( LargeX[597][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit597_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[597][0]=0; L[597][1]=1;}
			satisfiable[597][1]=satisfiable[597][1] & ((x[597] ^ 1) | (x[ unit597_1[i][0] ] ^ unit597_1[i][1]) |(x[ unit597_1[i][2] ] ^ unit597_1[i][3]));
			}
		if(X_contra>0) L[597][1]=2;
		}
	//Check all rules of unit[598][0]
	L[598][0] = LargeX[598][1]>0 ? 1 : 0;
	satisfiable[598][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit598_0[i][0] ][ unit598_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit598_0[i][2] ][ unit598_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit598_0[i][4] ][ unit598_0[i][5] ] >0);
		X_contra = ( LargeX[598][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit598_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[598][1]=0; L[598][0]=1;}
			satisfiable[598][0]=satisfiable[598][0] & ((x[598] ^ 0) | (x[ unit598_0[i][0] ] ^ unit598_0[i][1]) |(x[ unit598_0[i][2] ] ^ unit598_0[i][3]));
			}
		if(X_contra>0) L[598][0]=2;
		}
	//Check all rules of unit[598][1]
	L[598][1] = LargeX[598][0]>0 ? 1 : 0;
	satisfiable[598][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit598_1[i][0] ][ unit598_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit598_1[i][2] ][ unit598_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit598_1[i][4] ][ unit598_1[i][5] ] >0);
		X_contra = ( LargeX[598][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit598_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[598][0]=0; L[598][1]=1;}
			satisfiable[598][1]=satisfiable[598][1] & ((x[598] ^ 1) | (x[ unit598_1[i][0] ] ^ unit598_1[i][1]) |(x[ unit598_1[i][2] ] ^ unit598_1[i][3]));
			}
		if(X_contra>0) L[598][1]=2;
		}
	//Check all rules of unit[599][0]
	L[599][0] = LargeX[599][1]>0 ? 1 : 0;
	satisfiable[599][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit599_0[i][0] ][ unit599_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit599_0[i][2] ][ unit599_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit599_0[i][4] ][ unit599_0[i][5] ] >0);
		X_contra = ( LargeX[599][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit599_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[599][1]=0; L[599][0]=1;}
			satisfiable[599][0]=satisfiable[599][0] & ((x[599] ^ 0) | (x[ unit599_0[i][0] ] ^ unit599_0[i][1]) |(x[ unit599_0[i][2] ] ^ unit599_0[i][3]));
			}
		if(X_contra>0) L[599][0]=2;
		}
	//Check all rules of unit[599][1]
	L[599][1] = LargeX[599][0]>0 ? 1 : 0;
	satisfiable[599][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit599_1[i][0] ][ unit599_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit599_1[i][2] ][ unit599_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit599_1[i][4] ][ unit599_1[i][5] ] >0);
		X_contra = ( LargeX[599][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit599_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[599][0]=0; L[599][1]=1;}
			satisfiable[599][1]=satisfiable[599][1] & ((x[599] ^ 1) | (x[ unit599_1[i][0] ] ^ unit599_1[i][1]) |(x[ unit599_1[i][2] ] ^ unit599_1[i][3]));
			}
		if(X_contra>0) L[599][1]=2;
		}
	//Check all rules of unit[600][0]
	L[600][0] = LargeX[600][1]>0 ? 1 : 0;
	satisfiable[600][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit600_0[i][0] ][ unit600_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit600_0[i][2] ][ unit600_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit600_0[i][4] ][ unit600_0[i][5] ] >0);
		X_contra = ( LargeX[600][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit600_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[600][1]=0; L[600][0]=1;}
			satisfiable[600][0]=satisfiable[600][0] & ((x[600] ^ 0) | (x[ unit600_0[i][0] ] ^ unit600_0[i][1]) |(x[ unit600_0[i][2] ] ^ unit600_0[i][3]));
			}
		if(X_contra>0) L[600][0]=2;
		}
	//Check all rules of unit[600][1]
	L[600][1] = LargeX[600][0]>0 ? 1 : 0;
	satisfiable[600][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit600_1[i][0] ][ unit600_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit600_1[i][2] ][ unit600_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit600_1[i][4] ][ unit600_1[i][5] ] >0);
		X_contra = ( LargeX[600][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit600_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[600][0]=0; L[600][1]=1;}
			satisfiable[600][1]=satisfiable[600][1] & ((x[600] ^ 1) | (x[ unit600_1[i][0] ] ^ unit600_1[i][1]) |(x[ unit600_1[i][2] ] ^ unit600_1[i][3]));
			}
		if(X_contra>0) L[600][1]=2;
		}
	//Check all rules of unit[601][0]
	L[601][0] = LargeX[601][1]>0 ? 1 : 0;
	satisfiable[601][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit601_0[i][0] ][ unit601_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit601_0[i][2] ][ unit601_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit601_0[i][4] ][ unit601_0[i][5] ] >0);
		X_contra = ( LargeX[601][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit601_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[601][1]=0; L[601][0]=1;}
			satisfiable[601][0]=satisfiable[601][0] & ((x[601] ^ 0) | (x[ unit601_0[i][0] ] ^ unit601_0[i][1]) |(x[ unit601_0[i][2] ] ^ unit601_0[i][3]));
			}
		if(X_contra>0) L[601][0]=2;
		}
	//Check all rules of unit[601][1]
	L[601][1] = LargeX[601][0]>0 ? 1 : 0;
	satisfiable[601][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit601_1[i][0] ][ unit601_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit601_1[i][2] ][ unit601_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit601_1[i][4] ][ unit601_1[i][5] ] >0);
		X_contra = ( LargeX[601][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit601_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[601][0]=0; L[601][1]=1;}
			satisfiable[601][1]=satisfiable[601][1] & ((x[601] ^ 1) | (x[ unit601_1[i][0] ] ^ unit601_1[i][1]) |(x[ unit601_1[i][2] ] ^ unit601_1[i][3]));
			}
		if(X_contra>0) L[601][1]=2;
		}
	//Check all rules of unit[602][0]
	L[602][0] = LargeX[602][1]>0 ? 1 : 0;
	satisfiable[602][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit602_0[i][0] ][ unit602_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit602_0[i][2] ][ unit602_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit602_0[i][4] ][ unit602_0[i][5] ] >0);
		X_contra = ( LargeX[602][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit602_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[602][1]=0; L[602][0]=1;}
			satisfiable[602][0]=satisfiable[602][0] & ((x[602] ^ 0) | (x[ unit602_0[i][0] ] ^ unit602_0[i][1]) |(x[ unit602_0[i][2] ] ^ unit602_0[i][3]));
			}
		if(X_contra>0) L[602][0]=2;
		}
	//Check all rules of unit[602][1]
	L[602][1] = LargeX[602][0]>0 ? 1 : 0;
	satisfiable[602][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit602_1[i][0] ][ unit602_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit602_1[i][2] ][ unit602_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit602_1[i][4] ][ unit602_1[i][5] ] >0);
		X_contra = ( LargeX[602][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit602_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[602][0]=0; L[602][1]=1;}
			satisfiable[602][1]=satisfiable[602][1] & ((x[602] ^ 1) | (x[ unit602_1[i][0] ] ^ unit602_1[i][1]) |(x[ unit602_1[i][2] ] ^ unit602_1[i][3]));
			}
		if(X_contra>0) L[602][1]=2;
		}
	//Check all rules of unit[603][0]
	L[603][0] = LargeX[603][1]>0 ? 1 : 0;
	satisfiable[603][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit603_0[i][0] ][ unit603_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit603_0[i][2] ][ unit603_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit603_0[i][4] ][ unit603_0[i][5] ] >0);
		X_contra = ( LargeX[603][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit603_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[603][1]=0; L[603][0]=1;}
			satisfiable[603][0]=satisfiable[603][0] & ((x[603] ^ 0) | (x[ unit603_0[i][0] ] ^ unit603_0[i][1]) |(x[ unit603_0[i][2] ] ^ unit603_0[i][3]));
			}
		if(X_contra>0) L[603][0]=2;
		}
	//Check all rules of unit[603][1]
	L[603][1] = LargeX[603][0]>0 ? 1 : 0;
	satisfiable[603][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit603_1[i][0] ][ unit603_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit603_1[i][2] ][ unit603_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit603_1[i][4] ][ unit603_1[i][5] ] >0);
		X_contra = ( LargeX[603][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit603_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[603][0]=0; L[603][1]=1;}
			satisfiable[603][1]=satisfiable[603][1] & ((x[603] ^ 1) | (x[ unit603_1[i][0] ] ^ unit603_1[i][1]) |(x[ unit603_1[i][2] ] ^ unit603_1[i][3]));
			}
		if(X_contra>0) L[603][1]=2;
		}
	//Check all rules of unit[604][0]
	L[604][0] = LargeX[604][1]>0 ? 1 : 0;
	satisfiable[604][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit604_0[i][0] ][ unit604_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit604_0[i][2] ][ unit604_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit604_0[i][4] ][ unit604_0[i][5] ] >0);
		X_contra = ( LargeX[604][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit604_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[604][1]=0; L[604][0]=1;}
			satisfiable[604][0]=satisfiable[604][0] & ((x[604] ^ 0) | (x[ unit604_0[i][0] ] ^ unit604_0[i][1]) |(x[ unit604_0[i][2] ] ^ unit604_0[i][3]));
			}
		if(X_contra>0) L[604][0]=2;
		}
	//Check all rules of unit[604][1]
	L[604][1] = LargeX[604][0]>0 ? 1 : 0;
	satisfiable[604][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit604_1[i][0] ][ unit604_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit604_1[i][2] ][ unit604_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit604_1[i][4] ][ unit604_1[i][5] ] >0);
		X_contra = ( LargeX[604][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit604_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[604][0]=0; L[604][1]=1;}
			satisfiable[604][1]=satisfiable[604][1] & ((x[604] ^ 1) | (x[ unit604_1[i][0] ] ^ unit604_1[i][1]) |(x[ unit604_1[i][2] ] ^ unit604_1[i][3]));
			}
		if(X_contra>0) L[604][1]=2;
		}
	//Check all rules of unit[605][0]
	L[605][0] = LargeX[605][1]>0 ? 1 : 0;
	satisfiable[605][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit605_0[i][0] ][ unit605_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit605_0[i][2] ][ unit605_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit605_0[i][4] ][ unit605_0[i][5] ] >0);
		X_contra = ( LargeX[605][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit605_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[605][1]=0; L[605][0]=1;}
			satisfiable[605][0]=satisfiable[605][0] & ((x[605] ^ 0) | (x[ unit605_0[i][0] ] ^ unit605_0[i][1]) |(x[ unit605_0[i][2] ] ^ unit605_0[i][3]));
			}
		if(X_contra>0) L[605][0]=2;
		}
	//Check all rules of unit[605][1]
	L[605][1] = LargeX[605][0]>0 ? 1 : 0;
	satisfiable[605][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit605_1[i][0] ][ unit605_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit605_1[i][2] ][ unit605_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit605_1[i][4] ][ unit605_1[i][5] ] >0);
		X_contra = ( LargeX[605][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit605_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[605][0]=0; L[605][1]=1;}
			satisfiable[605][1]=satisfiable[605][1] & ((x[605] ^ 1) | (x[ unit605_1[i][0] ] ^ unit605_1[i][1]) |(x[ unit605_1[i][2] ] ^ unit605_1[i][3]));
			}
		if(X_contra>0) L[605][1]=2;
		}
	//Check all rules of unit[606][0]
	L[606][0] = LargeX[606][1]>0 ? 1 : 0;
	satisfiable[606][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit606_0[i][0] ][ unit606_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit606_0[i][2] ][ unit606_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit606_0[i][4] ][ unit606_0[i][5] ] >0);
		X_contra = ( LargeX[606][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit606_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[606][1]=0; L[606][0]=1;}
			satisfiable[606][0]=satisfiable[606][0] & ((x[606] ^ 0) | (x[ unit606_0[i][0] ] ^ unit606_0[i][1]) |(x[ unit606_0[i][2] ] ^ unit606_0[i][3]));
			}
		if(X_contra>0) L[606][0]=2;
		}
	//Check all rules of unit[606][1]
	L[606][1] = LargeX[606][0]>0 ? 1 : 0;
	satisfiable[606][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit606_1[i][0] ][ unit606_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit606_1[i][2] ][ unit606_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit606_1[i][4] ][ unit606_1[i][5] ] >0);
		X_contra = ( LargeX[606][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit606_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[606][0]=0; L[606][1]=1;}
			satisfiable[606][1]=satisfiable[606][1] & ((x[606] ^ 1) | (x[ unit606_1[i][0] ] ^ unit606_1[i][1]) |(x[ unit606_1[i][2] ] ^ unit606_1[i][3]));
			}
		if(X_contra>0) L[606][1]=2;
		}
	//Check all rules of unit[607][0]
	L[607][0] = LargeX[607][1]>0 ? 1 : 0;
	satisfiable[607][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit607_0[i][0] ][ unit607_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit607_0[i][2] ][ unit607_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit607_0[i][4] ][ unit607_0[i][5] ] >0);
		X_contra = ( LargeX[607][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit607_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[607][1]=0; L[607][0]=1;}
			satisfiable[607][0]=satisfiable[607][0] & ((x[607] ^ 0) | (x[ unit607_0[i][0] ] ^ unit607_0[i][1]) |(x[ unit607_0[i][2] ] ^ unit607_0[i][3]));
			}
		if(X_contra>0) L[607][0]=2;
		}
	//Check all rules of unit[607][1]
	L[607][1] = LargeX[607][0]>0 ? 1 : 0;
	satisfiable[607][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit607_1[i][0] ][ unit607_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit607_1[i][2] ][ unit607_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit607_1[i][4] ][ unit607_1[i][5] ] >0);
		X_contra = ( LargeX[607][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit607_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[607][0]=0; L[607][1]=1;}
			satisfiable[607][1]=satisfiable[607][1] & ((x[607] ^ 1) | (x[ unit607_1[i][0] ] ^ unit607_1[i][1]) |(x[ unit607_1[i][2] ] ^ unit607_1[i][3]));
			}
		if(X_contra>0) L[607][1]=2;
		}
	//Check all rules of unit[608][0]
	L[608][0] = LargeX[608][1]>0 ? 1 : 0;
	satisfiable[608][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit608_0[i][0] ][ unit608_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit608_0[i][2] ][ unit608_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit608_0[i][4] ][ unit608_0[i][5] ] >0);
		X_contra = ( LargeX[608][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit608_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[608][1]=0; L[608][0]=1;}
			satisfiable[608][0]=satisfiable[608][0] & ((x[608] ^ 0) | (x[ unit608_0[i][0] ] ^ unit608_0[i][1]) |(x[ unit608_0[i][2] ] ^ unit608_0[i][3]));
			}
		if(X_contra>0) L[608][0]=2;
		}
	//Check all rules of unit[608][1]
	L[608][1] = LargeX[608][0]>0 ? 1 : 0;
	satisfiable[608][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit608_1[i][0] ][ unit608_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit608_1[i][2] ][ unit608_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit608_1[i][4] ][ unit608_1[i][5] ] >0);
		X_contra = ( LargeX[608][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit608_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[608][0]=0; L[608][1]=1;}
			satisfiable[608][1]=satisfiable[608][1] & ((x[608] ^ 1) | (x[ unit608_1[i][0] ] ^ unit608_1[i][1]) |(x[ unit608_1[i][2] ] ^ unit608_1[i][3]));
			}
		if(X_contra>0) L[608][1]=2;
		}
	//Check all rules of unit[609][0]
	L[609][0] = LargeX[609][1]>0 ? 1 : 0;
	satisfiable[609][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit609_0[i][0] ][ unit609_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit609_0[i][2] ][ unit609_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit609_0[i][4] ][ unit609_0[i][5] ] >0);
		X_contra = ( LargeX[609][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit609_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[609][1]=0; L[609][0]=1;}
			satisfiable[609][0]=satisfiable[609][0] & ((x[609] ^ 0) | (x[ unit609_0[i][0] ] ^ unit609_0[i][1]) |(x[ unit609_0[i][2] ] ^ unit609_0[i][3]));
			}
		if(X_contra>0) L[609][0]=2;
		}
	//Check all rules of unit[609][1]
	L[609][1] = LargeX[609][0]>0 ? 1 : 0;
	satisfiable[609][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit609_1[i][0] ][ unit609_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit609_1[i][2] ][ unit609_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit609_1[i][4] ][ unit609_1[i][5] ] >0);
		X_contra = ( LargeX[609][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit609_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[609][0]=0; L[609][1]=1;}
			satisfiable[609][1]=satisfiable[609][1] & ((x[609] ^ 1) | (x[ unit609_1[i][0] ] ^ unit609_1[i][1]) |(x[ unit609_1[i][2] ] ^ unit609_1[i][3]));
			}
		if(X_contra>0) L[609][1]=2;
		}
	//Check all rules of unit[610][0]
	L[610][0] = LargeX[610][1]>0 ? 1 : 0;
	satisfiable[610][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit610_0[i][0] ][ unit610_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit610_0[i][2] ][ unit610_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit610_0[i][4] ][ unit610_0[i][5] ] >0);
		X_contra = ( LargeX[610][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit610_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[610][1]=0; L[610][0]=1;}
			satisfiable[610][0]=satisfiable[610][0] & ((x[610] ^ 0) | (x[ unit610_0[i][0] ] ^ unit610_0[i][1]) |(x[ unit610_0[i][2] ] ^ unit610_0[i][3]));
			}
		if(X_contra>0) L[610][0]=2;
		}
	//Check all rules of unit[610][1]
	L[610][1] = LargeX[610][0]>0 ? 1 : 0;
	satisfiable[610][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit610_1[i][0] ][ unit610_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit610_1[i][2] ][ unit610_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit610_1[i][4] ][ unit610_1[i][5] ] >0);
		X_contra = ( LargeX[610][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit610_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[610][0]=0; L[610][1]=1;}
			satisfiable[610][1]=satisfiable[610][1] & ((x[610] ^ 1) | (x[ unit610_1[i][0] ] ^ unit610_1[i][1]) |(x[ unit610_1[i][2] ] ^ unit610_1[i][3]));
			}
		if(X_contra>0) L[610][1]=2;
		}
	//Check all rules of unit[611][0]
	L[611][0] = LargeX[611][1]>0 ? 1 : 0;
	satisfiable[611][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit611_0[i][0] ][ unit611_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit611_0[i][2] ][ unit611_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit611_0[i][4] ][ unit611_0[i][5] ] >0);
		X_contra = ( LargeX[611][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit611_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[611][1]=0; L[611][0]=1;}
			satisfiable[611][0]=satisfiable[611][0] & ((x[611] ^ 0) | (x[ unit611_0[i][0] ] ^ unit611_0[i][1]) |(x[ unit611_0[i][2] ] ^ unit611_0[i][3]));
			}
		if(X_contra>0) L[611][0]=2;
		}
	//Check all rules of unit[611][1]
	L[611][1] = LargeX[611][0]>0 ? 1 : 0;
	satisfiable[611][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit611_1[i][0] ][ unit611_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit611_1[i][2] ][ unit611_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit611_1[i][4] ][ unit611_1[i][5] ] >0);
		X_contra = ( LargeX[611][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit611_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[611][0]=0; L[611][1]=1;}
			satisfiable[611][1]=satisfiable[611][1] & ((x[611] ^ 1) | (x[ unit611_1[i][0] ] ^ unit611_1[i][1]) |(x[ unit611_1[i][2] ] ^ unit611_1[i][3]));
			}
		if(X_contra>0) L[611][1]=2;
		}
	//Check all rules of unit[612][0]
	L[612][0] = LargeX[612][1]>0 ? 1 : 0;
	satisfiable[612][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit612_0[i][0] ][ unit612_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit612_0[i][2] ][ unit612_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit612_0[i][4] ][ unit612_0[i][5] ] >0);
		X_contra = ( LargeX[612][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit612_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[612][1]=0; L[612][0]=1;}
			satisfiable[612][0]=satisfiable[612][0] & ((x[612] ^ 0) | (x[ unit612_0[i][0] ] ^ unit612_0[i][1]) |(x[ unit612_0[i][2] ] ^ unit612_0[i][3]));
			}
		if(X_contra>0) L[612][0]=2;
		}
	//Check all rules of unit[612][1]
	L[612][1] = LargeX[612][0]>0 ? 1 : 0;
	satisfiable[612][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit612_1[i][0] ][ unit612_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit612_1[i][2] ][ unit612_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit612_1[i][4] ][ unit612_1[i][5] ] >0);
		X_contra = ( LargeX[612][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit612_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[612][0]=0; L[612][1]=1;}
			satisfiable[612][1]=satisfiable[612][1] & ((x[612] ^ 1) | (x[ unit612_1[i][0] ] ^ unit612_1[i][1]) |(x[ unit612_1[i][2] ] ^ unit612_1[i][3]));
			}
		if(X_contra>0) L[612][1]=2;
		}
	//Check all rules of unit[613][0]
	L[613][0] = LargeX[613][1]>0 ? 1 : 0;
	satisfiable[613][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit613_0[i][0] ][ unit613_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit613_0[i][2] ][ unit613_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit613_0[i][4] ][ unit613_0[i][5] ] >0);
		X_contra = ( LargeX[613][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit613_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[613][1]=0; L[613][0]=1;}
			satisfiable[613][0]=satisfiable[613][0] & ((x[613] ^ 0) | (x[ unit613_0[i][0] ] ^ unit613_0[i][1]) |(x[ unit613_0[i][2] ] ^ unit613_0[i][3]));
			}
		if(X_contra>0) L[613][0]=2;
		}
	//Check all rules of unit[613][1]
	L[613][1] = LargeX[613][0]>0 ? 1 : 0;
	satisfiable[613][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit613_1[i][0] ][ unit613_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit613_1[i][2] ][ unit613_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit613_1[i][4] ][ unit613_1[i][5] ] >0);
		X_contra = ( LargeX[613][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit613_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[613][0]=0; L[613][1]=1;}
			satisfiable[613][1]=satisfiable[613][1] & ((x[613] ^ 1) | (x[ unit613_1[i][0] ] ^ unit613_1[i][1]) |(x[ unit613_1[i][2] ] ^ unit613_1[i][3]));
			}
		if(X_contra>0) L[613][1]=2;
		}
	//Check all rules of unit[614][0]
	L[614][0] = LargeX[614][1]>0 ? 1 : 0;
	satisfiable[614][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit614_0[i][0] ][ unit614_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit614_0[i][2] ][ unit614_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit614_0[i][4] ][ unit614_0[i][5] ] >0);
		X_contra = ( LargeX[614][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit614_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[614][1]=0; L[614][0]=1;}
			satisfiable[614][0]=satisfiable[614][0] & ((x[614] ^ 0) | (x[ unit614_0[i][0] ] ^ unit614_0[i][1]) |(x[ unit614_0[i][2] ] ^ unit614_0[i][3]));
			}
		if(X_contra>0) L[614][0]=2;
		}
	//Check all rules of unit[614][1]
	L[614][1] = LargeX[614][0]>0 ? 1 : 0;
	satisfiable[614][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit614_1[i][0] ][ unit614_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit614_1[i][2] ][ unit614_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit614_1[i][4] ][ unit614_1[i][5] ] >0);
		X_contra = ( LargeX[614][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit614_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[614][0]=0; L[614][1]=1;}
			satisfiable[614][1]=satisfiable[614][1] & ((x[614] ^ 1) | (x[ unit614_1[i][0] ] ^ unit614_1[i][1]) |(x[ unit614_1[i][2] ] ^ unit614_1[i][3]));
			}
		if(X_contra>0) L[614][1]=2;
		}
	//Check all rules of unit[615][0]
	L[615][0] = LargeX[615][1]>0 ? 1 : 0;
	satisfiable[615][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit615_0[i][0] ][ unit615_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit615_0[i][2] ][ unit615_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit615_0[i][4] ][ unit615_0[i][5] ] >0);
		X_contra = ( LargeX[615][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit615_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[615][1]=0; L[615][0]=1;}
			satisfiable[615][0]=satisfiable[615][0] & ((x[615] ^ 0) | (x[ unit615_0[i][0] ] ^ unit615_0[i][1]) |(x[ unit615_0[i][2] ] ^ unit615_0[i][3]));
			}
		if(X_contra>0) L[615][0]=2;
		}
	//Check all rules of unit[615][1]
	L[615][1] = LargeX[615][0]>0 ? 1 : 0;
	satisfiable[615][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit615_1[i][0] ][ unit615_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit615_1[i][2] ][ unit615_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit615_1[i][4] ][ unit615_1[i][5] ] >0);
		X_contra = ( LargeX[615][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit615_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[615][0]=0; L[615][1]=1;}
			satisfiable[615][1]=satisfiable[615][1] & ((x[615] ^ 1) | (x[ unit615_1[i][0] ] ^ unit615_1[i][1]) |(x[ unit615_1[i][2] ] ^ unit615_1[i][3]));
			}
		if(X_contra>0) L[615][1]=2;
		}
	//Check all rules of unit[616][0]
	L[616][0] = LargeX[616][1]>0 ? 1 : 0;
	satisfiable[616][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit616_0[i][0] ][ unit616_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit616_0[i][2] ][ unit616_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit616_0[i][4] ][ unit616_0[i][5] ] >0);
		X_contra = ( LargeX[616][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit616_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[616][1]=0; L[616][0]=1;}
			satisfiable[616][0]=satisfiable[616][0] & ((x[616] ^ 0) | (x[ unit616_0[i][0] ] ^ unit616_0[i][1]) |(x[ unit616_0[i][2] ] ^ unit616_0[i][3]));
			}
		if(X_contra>0) L[616][0]=2;
		}
	//Check all rules of unit[616][1]
	L[616][1] = LargeX[616][0]>0 ? 1 : 0;
	satisfiable[616][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit616_1[i][0] ][ unit616_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit616_1[i][2] ][ unit616_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit616_1[i][4] ][ unit616_1[i][5] ] >0);
		X_contra = ( LargeX[616][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit616_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[616][0]=0; L[616][1]=1;}
			satisfiable[616][1]=satisfiable[616][1] & ((x[616] ^ 1) | (x[ unit616_1[i][0] ] ^ unit616_1[i][1]) |(x[ unit616_1[i][2] ] ^ unit616_1[i][3]));
			}
		if(X_contra>0) L[616][1]=2;
		}
	//Check all rules of unit[617][0]
	L[617][0] = LargeX[617][1]>0 ? 1 : 0;
	satisfiable[617][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit617_0[i][0] ][ unit617_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit617_0[i][2] ][ unit617_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit617_0[i][4] ][ unit617_0[i][5] ] >0);
		X_contra = ( LargeX[617][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit617_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[617][1]=0; L[617][0]=1;}
			satisfiable[617][0]=satisfiable[617][0] & ((x[617] ^ 0) | (x[ unit617_0[i][0] ] ^ unit617_0[i][1]) |(x[ unit617_0[i][2] ] ^ unit617_0[i][3]));
			}
		if(X_contra>0) L[617][0]=2;
		}
	//Check all rules of unit[617][1]
	L[617][1] = LargeX[617][0]>0 ? 1 : 0;
	satisfiable[617][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit617_1[i][0] ][ unit617_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit617_1[i][2] ][ unit617_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit617_1[i][4] ][ unit617_1[i][5] ] >0);
		X_contra = ( LargeX[617][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit617_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[617][0]=0; L[617][1]=1;}
			satisfiable[617][1]=satisfiable[617][1] & ((x[617] ^ 1) | (x[ unit617_1[i][0] ] ^ unit617_1[i][1]) |(x[ unit617_1[i][2] ] ^ unit617_1[i][3]));
			}
		if(X_contra>0) L[617][1]=2;
		}
	//Check all rules of unit[618][0]
	L[618][0] = LargeX[618][1]>0 ? 1 : 0;
	satisfiable[618][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit618_0[i][0] ][ unit618_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit618_0[i][2] ][ unit618_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit618_0[i][4] ][ unit618_0[i][5] ] >0);
		X_contra = ( LargeX[618][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit618_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[618][1]=0; L[618][0]=1;}
			satisfiable[618][0]=satisfiable[618][0] & ((x[618] ^ 0) | (x[ unit618_0[i][0] ] ^ unit618_0[i][1]) |(x[ unit618_0[i][2] ] ^ unit618_0[i][3]));
			}
		if(X_contra>0) L[618][0]=2;
		}
	//Check all rules of unit[618][1]
	L[618][1] = LargeX[618][0]>0 ? 1 : 0;
	satisfiable[618][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit618_1[i][0] ][ unit618_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit618_1[i][2] ][ unit618_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit618_1[i][4] ][ unit618_1[i][5] ] >0);
		X_contra = ( LargeX[618][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit618_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[618][0]=0; L[618][1]=1;}
			satisfiable[618][1]=satisfiable[618][1] & ((x[618] ^ 1) | (x[ unit618_1[i][0] ] ^ unit618_1[i][1]) |(x[ unit618_1[i][2] ] ^ unit618_1[i][3]));
			}
		if(X_contra>0) L[618][1]=2;
		}
	//Check all rules of unit[619][0]
	L[619][0] = LargeX[619][1]>0 ? 1 : 0;
	satisfiable[619][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit619_0[i][0] ][ unit619_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit619_0[i][2] ][ unit619_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit619_0[i][4] ][ unit619_0[i][5] ] >0);
		X_contra = ( LargeX[619][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit619_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[619][1]=0; L[619][0]=1;}
			satisfiable[619][0]=satisfiable[619][0] & ((x[619] ^ 0) | (x[ unit619_0[i][0] ] ^ unit619_0[i][1]) |(x[ unit619_0[i][2] ] ^ unit619_0[i][3]));
			}
		if(X_contra>0) L[619][0]=2;
		}
	//Check all rules of unit[619][1]
	L[619][1] = LargeX[619][0]>0 ? 1 : 0;
	satisfiable[619][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit619_1[i][0] ][ unit619_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit619_1[i][2] ][ unit619_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit619_1[i][4] ][ unit619_1[i][5] ] >0);
		X_contra = ( LargeX[619][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit619_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[619][0]=0; L[619][1]=1;}
			satisfiable[619][1]=satisfiable[619][1] & ((x[619] ^ 1) | (x[ unit619_1[i][0] ] ^ unit619_1[i][1]) |(x[ unit619_1[i][2] ] ^ unit619_1[i][3]));
			}
		if(X_contra>0) L[619][1]=2;
		}
	//Check all rules of unit[620][0]
	L[620][0] = LargeX[620][1]>0 ? 1 : 0;
	satisfiable[620][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit620_0[i][0] ][ unit620_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit620_0[i][2] ][ unit620_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit620_0[i][4] ][ unit620_0[i][5] ] >0);
		X_contra = ( LargeX[620][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit620_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[620][1]=0; L[620][0]=1;}
			satisfiable[620][0]=satisfiable[620][0] & ((x[620] ^ 0) | (x[ unit620_0[i][0] ] ^ unit620_0[i][1]) |(x[ unit620_0[i][2] ] ^ unit620_0[i][3]));
			}
		if(X_contra>0) L[620][0]=2;
		}
	//Check all rules of unit[620][1]
	L[620][1] = LargeX[620][0]>0 ? 1 : 0;
	satisfiable[620][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit620_1[i][0] ][ unit620_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit620_1[i][2] ][ unit620_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit620_1[i][4] ][ unit620_1[i][5] ] >0);
		X_contra = ( LargeX[620][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit620_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[620][0]=0; L[620][1]=1;}
			satisfiable[620][1]=satisfiable[620][1] & ((x[620] ^ 1) | (x[ unit620_1[i][0] ] ^ unit620_1[i][1]) |(x[ unit620_1[i][2] ] ^ unit620_1[i][3]));
			}
		if(X_contra>0) L[620][1]=2;
		}
	//Check all rules of unit[621][0]
	L[621][0] = LargeX[621][1]>0 ? 1 : 0;
	satisfiable[621][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit621_0[i][0] ][ unit621_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit621_0[i][2] ][ unit621_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit621_0[i][4] ][ unit621_0[i][5] ] >0);
		X_contra = ( LargeX[621][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit621_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[621][1]=0; L[621][0]=1;}
			satisfiable[621][0]=satisfiable[621][0] & ((x[621] ^ 0) | (x[ unit621_0[i][0] ] ^ unit621_0[i][1]) |(x[ unit621_0[i][2] ] ^ unit621_0[i][3]));
			}
		if(X_contra>0) L[621][0]=2;
		}
	//Check all rules of unit[621][1]
	L[621][1] = LargeX[621][0]>0 ? 1 : 0;
	satisfiable[621][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit621_1[i][0] ][ unit621_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit621_1[i][2] ][ unit621_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit621_1[i][4] ][ unit621_1[i][5] ] >0);
		X_contra = ( LargeX[621][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit621_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[621][0]=0; L[621][1]=1;}
			satisfiable[621][1]=satisfiable[621][1] & ((x[621] ^ 1) | (x[ unit621_1[i][0] ] ^ unit621_1[i][1]) |(x[ unit621_1[i][2] ] ^ unit621_1[i][3]));
			}
		if(X_contra>0) L[621][1]=2;
		}
	//Check all rules of unit[622][0]
	L[622][0] = LargeX[622][1]>0 ? 1 : 0;
	satisfiable[622][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit622_0[i][0] ][ unit622_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit622_0[i][2] ][ unit622_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit622_0[i][4] ][ unit622_0[i][5] ] >0);
		X_contra = ( LargeX[622][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit622_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[622][1]=0; L[622][0]=1;}
			satisfiable[622][0]=satisfiable[622][0] & ((x[622] ^ 0) | (x[ unit622_0[i][0] ] ^ unit622_0[i][1]) |(x[ unit622_0[i][2] ] ^ unit622_0[i][3]));
			}
		if(X_contra>0) L[622][0]=2;
		}
	//Check all rules of unit[622][1]
	L[622][1] = LargeX[622][0]>0 ? 1 : 0;
	satisfiable[622][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit622_1[i][0] ][ unit622_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit622_1[i][2] ][ unit622_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit622_1[i][4] ][ unit622_1[i][5] ] >0);
		X_contra = ( LargeX[622][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit622_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[622][0]=0; L[622][1]=1;}
			satisfiable[622][1]=satisfiable[622][1] & ((x[622] ^ 1) | (x[ unit622_1[i][0] ] ^ unit622_1[i][1]) |(x[ unit622_1[i][2] ] ^ unit622_1[i][3]));
			}
		if(X_contra>0) L[622][1]=2;
		}
	//Check all rules of unit[623][0]
	L[623][0] = LargeX[623][1]>0 ? 1 : 0;
	satisfiable[623][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit623_0[i][0] ][ unit623_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit623_0[i][2] ][ unit623_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit623_0[i][4] ][ unit623_0[i][5] ] >0);
		X_contra = ( LargeX[623][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit623_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[623][1]=0; L[623][0]=1;}
			satisfiable[623][0]=satisfiable[623][0] & ((x[623] ^ 0) | (x[ unit623_0[i][0] ] ^ unit623_0[i][1]) |(x[ unit623_0[i][2] ] ^ unit623_0[i][3]));
			}
		if(X_contra>0) L[623][0]=2;
		}
	//Check all rules of unit[623][1]
	L[623][1] = LargeX[623][0]>0 ? 1 : 0;
	satisfiable[623][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit623_1[i][0] ][ unit623_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit623_1[i][2] ][ unit623_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit623_1[i][4] ][ unit623_1[i][5] ] >0);
		X_contra = ( LargeX[623][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit623_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[623][0]=0; L[623][1]=1;}
			satisfiable[623][1]=satisfiable[623][1] & ((x[623] ^ 1) | (x[ unit623_1[i][0] ] ^ unit623_1[i][1]) |(x[ unit623_1[i][2] ] ^ unit623_1[i][3]));
			}
		if(X_contra>0) L[623][1]=2;
		}
	//Check all rules of unit[624][0]
	L[624][0] = LargeX[624][1]>0 ? 1 : 0;
	satisfiable[624][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit624_0[i][0] ][ unit624_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit624_0[i][2] ][ unit624_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit624_0[i][4] ][ unit624_0[i][5] ] >0);
		X_contra = ( LargeX[624][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit624_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[624][1]=0; L[624][0]=1;}
			satisfiable[624][0]=satisfiable[624][0] & ((x[624] ^ 0) | (x[ unit624_0[i][0] ] ^ unit624_0[i][1]) |(x[ unit624_0[i][2] ] ^ unit624_0[i][3]));
			}
		if(X_contra>0) L[624][0]=2;
		}
	//Check all rules of unit[624][1]
	L[624][1] = LargeX[624][0]>0 ? 1 : 0;
	satisfiable[624][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit624_1[i][0] ][ unit624_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit624_1[i][2] ][ unit624_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit624_1[i][4] ][ unit624_1[i][5] ] >0);
		X_contra = ( LargeX[624][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit624_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[624][0]=0; L[624][1]=1;}
			satisfiable[624][1]=satisfiable[624][1] & ((x[624] ^ 1) | (x[ unit624_1[i][0] ] ^ unit624_1[i][1]) |(x[ unit624_1[i][2] ] ^ unit624_1[i][3]));
			}
		if(X_contra>0) L[624][1]=2;
		}
	//Check all rules of unit[625][0]
	L[625][0] = LargeX[625][1]>0 ? 1 : 0;
	satisfiable[625][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit625_0[i][0] ][ unit625_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit625_0[i][2] ][ unit625_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit625_0[i][4] ][ unit625_0[i][5] ] >0);
		X_contra = ( LargeX[625][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit625_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[625][1]=0; L[625][0]=1;}
			satisfiable[625][0]=satisfiable[625][0] & ((x[625] ^ 0) | (x[ unit625_0[i][0] ] ^ unit625_0[i][1]) |(x[ unit625_0[i][2] ] ^ unit625_0[i][3]));
			}
		if(X_contra>0) L[625][0]=2;
		}
	//Check all rules of unit[625][1]
	L[625][1] = LargeX[625][0]>0 ? 1 : 0;
	satisfiable[625][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit625_1[i][0] ][ unit625_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit625_1[i][2] ][ unit625_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit625_1[i][4] ][ unit625_1[i][5] ] >0);
		X_contra = ( LargeX[625][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit625_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[625][0]=0; L[625][1]=1;}
			satisfiable[625][1]=satisfiable[625][1] & ((x[625] ^ 1) | (x[ unit625_1[i][0] ] ^ unit625_1[i][1]) |(x[ unit625_1[i][2] ] ^ unit625_1[i][3]));
			}
		if(X_contra>0) L[625][1]=2;
		}
	//Check all rules of unit[626][0]
	L[626][0] = LargeX[626][1]>0 ? 1 : 0;
	satisfiable[626][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit626_0[i][0] ][ unit626_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit626_0[i][2] ][ unit626_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit626_0[i][4] ][ unit626_0[i][5] ] >0);
		X_contra = ( LargeX[626][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit626_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[626][1]=0; L[626][0]=1;}
			satisfiable[626][0]=satisfiable[626][0] & ((x[626] ^ 0) | (x[ unit626_0[i][0] ] ^ unit626_0[i][1]) |(x[ unit626_0[i][2] ] ^ unit626_0[i][3]));
			}
		if(X_contra>0) L[626][0]=2;
		}
	//Check all rules of unit[626][1]
	L[626][1] = LargeX[626][0]>0 ? 1 : 0;
	satisfiable[626][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit626_1[i][0] ][ unit626_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit626_1[i][2] ][ unit626_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit626_1[i][4] ][ unit626_1[i][5] ] >0);
		X_contra = ( LargeX[626][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit626_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[626][0]=0; L[626][1]=1;}
			satisfiable[626][1]=satisfiable[626][1] & ((x[626] ^ 1) | (x[ unit626_1[i][0] ] ^ unit626_1[i][1]) |(x[ unit626_1[i][2] ] ^ unit626_1[i][3]));
			}
		if(X_contra>0) L[626][1]=2;
		}
	//Check all rules of unit[627][0]
	L[627][0] = LargeX[627][1]>0 ? 1 : 0;
	satisfiable[627][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit627_0[i][0] ][ unit627_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit627_0[i][2] ][ unit627_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit627_0[i][4] ][ unit627_0[i][5] ] >0);
		X_contra = ( LargeX[627][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit627_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[627][1]=0; L[627][0]=1;}
			satisfiable[627][0]=satisfiable[627][0] & ((x[627] ^ 0) | (x[ unit627_0[i][0] ] ^ unit627_0[i][1]) |(x[ unit627_0[i][2] ] ^ unit627_0[i][3]));
			}
		if(X_contra>0) L[627][0]=2;
		}
	//Check all rules of unit[627][1]
	L[627][1] = LargeX[627][0]>0 ? 1 : 0;
	satisfiable[627][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit627_1[i][0] ][ unit627_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit627_1[i][2] ][ unit627_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit627_1[i][4] ][ unit627_1[i][5] ] >0);
		X_contra = ( LargeX[627][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit627_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[627][0]=0; L[627][1]=1;}
			satisfiable[627][1]=satisfiable[627][1] & ((x[627] ^ 1) | (x[ unit627_1[i][0] ] ^ unit627_1[i][1]) |(x[ unit627_1[i][2] ] ^ unit627_1[i][3]));
			}
		if(X_contra>0) L[627][1]=2;
		}
	//Check all rules of unit[628][0]
	L[628][0] = LargeX[628][1]>0 ? 1 : 0;
	satisfiable[628][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit628_0[i][0] ][ unit628_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit628_0[i][2] ][ unit628_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit628_0[i][4] ][ unit628_0[i][5] ] >0);
		X_contra = ( LargeX[628][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit628_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[628][1]=0; L[628][0]=1;}
			satisfiable[628][0]=satisfiable[628][0] & ((x[628] ^ 0) | (x[ unit628_0[i][0] ] ^ unit628_0[i][1]) |(x[ unit628_0[i][2] ] ^ unit628_0[i][3]));
			}
		if(X_contra>0) L[628][0]=2;
		}
	//Check all rules of unit[628][1]
	L[628][1] = LargeX[628][0]>0 ? 1 : 0;
	satisfiable[628][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit628_1[i][0] ][ unit628_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit628_1[i][2] ][ unit628_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit628_1[i][4] ][ unit628_1[i][5] ] >0);
		X_contra = ( LargeX[628][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit628_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[628][0]=0; L[628][1]=1;}
			satisfiable[628][1]=satisfiable[628][1] & ((x[628] ^ 1) | (x[ unit628_1[i][0] ] ^ unit628_1[i][1]) |(x[ unit628_1[i][2] ] ^ unit628_1[i][3]));
			}
		if(X_contra>0) L[628][1]=2;
		}
	//Check all rules of unit[629][0]
	L[629][0] = LargeX[629][1]>0 ? 1 : 0;
	satisfiable[629][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit629_0[i][0] ][ unit629_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit629_0[i][2] ][ unit629_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit629_0[i][4] ][ unit629_0[i][5] ] >0);
		X_contra = ( LargeX[629][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit629_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[629][1]=0; L[629][0]=1;}
			satisfiable[629][0]=satisfiable[629][0] & ((x[629] ^ 0) | (x[ unit629_0[i][0] ] ^ unit629_0[i][1]) |(x[ unit629_0[i][2] ] ^ unit629_0[i][3]));
			}
		if(X_contra>0) L[629][0]=2;
		}
	//Check all rules of unit[629][1]
	L[629][1] = LargeX[629][0]>0 ? 1 : 0;
	satisfiable[629][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit629_1[i][0] ][ unit629_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit629_1[i][2] ][ unit629_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit629_1[i][4] ][ unit629_1[i][5] ] >0);
		X_contra = ( LargeX[629][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit629_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[629][0]=0; L[629][1]=1;}
			satisfiable[629][1]=satisfiable[629][1] & ((x[629] ^ 1) | (x[ unit629_1[i][0] ] ^ unit629_1[i][1]) |(x[ unit629_1[i][2] ] ^ unit629_1[i][3]));
			}
		if(X_contra>0) L[629][1]=2;
		}
	//Check all rules of unit[630][0]
	L[630][0] = LargeX[630][1]>0 ? 1 : 0;
	satisfiable[630][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit630_0[i][0] ][ unit630_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit630_0[i][2] ][ unit630_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit630_0[i][4] ][ unit630_0[i][5] ] >0);
		X_contra = ( LargeX[630][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit630_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[630][1]=0; L[630][0]=1;}
			satisfiable[630][0]=satisfiable[630][0] & ((x[630] ^ 0) | (x[ unit630_0[i][0] ] ^ unit630_0[i][1]) |(x[ unit630_0[i][2] ] ^ unit630_0[i][3]));
			}
		if(X_contra>0) L[630][0]=2;
		}
	//Check all rules of unit[630][1]
	L[630][1] = LargeX[630][0]>0 ? 1 : 0;
	satisfiable[630][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit630_1[i][0] ][ unit630_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit630_1[i][2] ][ unit630_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit630_1[i][4] ][ unit630_1[i][5] ] >0);
		X_contra = ( LargeX[630][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit630_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[630][0]=0; L[630][1]=1;}
			satisfiable[630][1]=satisfiable[630][1] & ((x[630] ^ 1) | (x[ unit630_1[i][0] ] ^ unit630_1[i][1]) |(x[ unit630_1[i][2] ] ^ unit630_1[i][3]));
			}
		if(X_contra>0) L[630][1]=2;
		}
	//Check all rules of unit[631][0]
	L[631][0] = LargeX[631][1]>0 ? 1 : 0;
	satisfiable[631][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit631_0[i][0] ][ unit631_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit631_0[i][2] ][ unit631_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit631_0[i][4] ][ unit631_0[i][5] ] >0);
		X_contra = ( LargeX[631][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit631_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[631][1]=0; L[631][0]=1;}
			satisfiable[631][0]=satisfiable[631][0] & ((x[631] ^ 0) | (x[ unit631_0[i][0] ] ^ unit631_0[i][1]) |(x[ unit631_0[i][2] ] ^ unit631_0[i][3]));
			}
		if(X_contra>0) L[631][0]=2;
		}
	//Check all rules of unit[631][1]
	L[631][1] = LargeX[631][0]>0 ? 1 : 0;
	satisfiable[631][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit631_1[i][0] ][ unit631_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit631_1[i][2] ][ unit631_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit631_1[i][4] ][ unit631_1[i][5] ] >0);
		X_contra = ( LargeX[631][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit631_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[631][0]=0; L[631][1]=1;}
			satisfiable[631][1]=satisfiable[631][1] & ((x[631] ^ 1) | (x[ unit631_1[i][0] ] ^ unit631_1[i][1]) |(x[ unit631_1[i][2] ] ^ unit631_1[i][3]));
			}
		if(X_contra>0) L[631][1]=2;
		}
	//Check all rules of unit[632][0]
	L[632][0] = LargeX[632][1]>0 ? 1 : 0;
	satisfiable[632][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit632_0[i][0] ][ unit632_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit632_0[i][2] ][ unit632_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit632_0[i][4] ][ unit632_0[i][5] ] >0);
		X_contra = ( LargeX[632][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit632_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[632][1]=0; L[632][0]=1;}
			satisfiable[632][0]=satisfiable[632][0] & ((x[632] ^ 0) | (x[ unit632_0[i][0] ] ^ unit632_0[i][1]) |(x[ unit632_0[i][2] ] ^ unit632_0[i][3]));
			}
		if(X_contra>0) L[632][0]=2;
		}
	//Check all rules of unit[632][1]
	L[632][1] = LargeX[632][0]>0 ? 1 : 0;
	satisfiable[632][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit632_1[i][0] ][ unit632_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit632_1[i][2] ][ unit632_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit632_1[i][4] ][ unit632_1[i][5] ] >0);
		X_contra = ( LargeX[632][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit632_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[632][0]=0; L[632][1]=1;}
			satisfiable[632][1]=satisfiable[632][1] & ((x[632] ^ 1) | (x[ unit632_1[i][0] ] ^ unit632_1[i][1]) |(x[ unit632_1[i][2] ] ^ unit632_1[i][3]));
			}
		if(X_contra>0) L[632][1]=2;
		}
	//Check all rules of unit[633][0]
	L[633][0] = LargeX[633][1]>0 ? 1 : 0;
	satisfiable[633][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit633_0[i][0] ][ unit633_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit633_0[i][2] ][ unit633_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit633_0[i][4] ][ unit633_0[i][5] ] >0);
		X_contra = ( LargeX[633][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit633_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[633][1]=0; L[633][0]=1;}
			satisfiable[633][0]=satisfiable[633][0] & ((x[633] ^ 0) | (x[ unit633_0[i][0] ] ^ unit633_0[i][1]) |(x[ unit633_0[i][2] ] ^ unit633_0[i][3]));
			}
		if(X_contra>0) L[633][0]=2;
		}
	//Check all rules of unit[633][1]
	L[633][1] = LargeX[633][0]>0 ? 1 : 0;
	satisfiable[633][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit633_1[i][0] ][ unit633_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit633_1[i][2] ][ unit633_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit633_1[i][4] ][ unit633_1[i][5] ] >0);
		X_contra = ( LargeX[633][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit633_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[633][0]=0; L[633][1]=1;}
			satisfiable[633][1]=satisfiable[633][1] & ((x[633] ^ 1) | (x[ unit633_1[i][0] ] ^ unit633_1[i][1]) |(x[ unit633_1[i][2] ] ^ unit633_1[i][3]));
			}
		if(X_contra>0) L[633][1]=2;
		}
	//Check all rules of unit[634][0]
	L[634][0] = LargeX[634][1]>0 ? 1 : 0;
	satisfiable[634][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit634_0[i][0] ][ unit634_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit634_0[i][2] ][ unit634_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit634_0[i][4] ][ unit634_0[i][5] ] >0);
		X_contra = ( LargeX[634][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit634_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[634][1]=0; L[634][0]=1;}
			satisfiable[634][0]=satisfiable[634][0] & ((x[634] ^ 0) | (x[ unit634_0[i][0] ] ^ unit634_0[i][1]) |(x[ unit634_0[i][2] ] ^ unit634_0[i][3]));
			}
		if(X_contra>0) L[634][0]=2;
		}
	//Check all rules of unit[634][1]
	L[634][1] = LargeX[634][0]>0 ? 1 : 0;
	satisfiable[634][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit634_1[i][0] ][ unit634_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit634_1[i][2] ][ unit634_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit634_1[i][4] ][ unit634_1[i][5] ] >0);
		X_contra = ( LargeX[634][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit634_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[634][0]=0; L[634][1]=1;}
			satisfiable[634][1]=satisfiable[634][1] & ((x[634] ^ 1) | (x[ unit634_1[i][0] ] ^ unit634_1[i][1]) |(x[ unit634_1[i][2] ] ^ unit634_1[i][3]));
			}
		if(X_contra>0) L[634][1]=2;
		}
	//Check all rules of unit[635][0]
	L[635][0] = LargeX[635][1]>0 ? 1 : 0;
	satisfiable[635][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit635_0[i][0] ][ unit635_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit635_0[i][2] ][ unit635_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit635_0[i][4] ][ unit635_0[i][5] ] >0);
		X_contra = ( LargeX[635][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit635_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[635][1]=0; L[635][0]=1;}
			satisfiable[635][0]=satisfiable[635][0] & ((x[635] ^ 0) | (x[ unit635_0[i][0] ] ^ unit635_0[i][1]) |(x[ unit635_0[i][2] ] ^ unit635_0[i][3]));
			}
		if(X_contra>0) L[635][0]=2;
		}
	//Check all rules of unit[635][1]
	L[635][1] = LargeX[635][0]>0 ? 1 : 0;
	satisfiable[635][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit635_1[i][0] ][ unit635_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit635_1[i][2] ][ unit635_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit635_1[i][4] ][ unit635_1[i][5] ] >0);
		X_contra = ( LargeX[635][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit635_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[635][0]=0; L[635][1]=1;}
			satisfiable[635][1]=satisfiable[635][1] & ((x[635] ^ 1) | (x[ unit635_1[i][0] ] ^ unit635_1[i][1]) |(x[ unit635_1[i][2] ] ^ unit635_1[i][3]));
			}
		if(X_contra>0) L[635][1]=2;
		}
	//Check all rules of unit[636][0]
	L[636][0] = LargeX[636][1]>0 ? 1 : 0;
	satisfiable[636][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit636_0[i][0] ][ unit636_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit636_0[i][2] ][ unit636_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit636_0[i][4] ][ unit636_0[i][5] ] >0);
		X_contra = ( LargeX[636][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit636_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[636][1]=0; L[636][0]=1;}
			satisfiable[636][0]=satisfiable[636][0] & ((x[636] ^ 0) | (x[ unit636_0[i][0] ] ^ unit636_0[i][1]) |(x[ unit636_0[i][2] ] ^ unit636_0[i][3]));
			}
		if(X_contra>0) L[636][0]=2;
		}
	//Check all rules of unit[636][1]
	L[636][1] = LargeX[636][0]>0 ? 1 : 0;
	satisfiable[636][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit636_1[i][0] ][ unit636_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit636_1[i][2] ][ unit636_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit636_1[i][4] ][ unit636_1[i][5] ] >0);
		X_contra = ( LargeX[636][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit636_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[636][0]=0; L[636][1]=1;}
			satisfiable[636][1]=satisfiable[636][1] & ((x[636] ^ 1) | (x[ unit636_1[i][0] ] ^ unit636_1[i][1]) |(x[ unit636_1[i][2] ] ^ unit636_1[i][3]));
			}
		if(X_contra>0) L[636][1]=2;
		}
	//Check all rules of unit[637][0]
	L[637][0] = LargeX[637][1]>0 ? 1 : 0;
	satisfiable[637][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit637_0[i][0] ][ unit637_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit637_0[i][2] ][ unit637_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit637_0[i][4] ][ unit637_0[i][5] ] >0);
		X_contra = ( LargeX[637][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit637_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[637][1]=0; L[637][0]=1;}
			satisfiable[637][0]=satisfiable[637][0] & ((x[637] ^ 0) | (x[ unit637_0[i][0] ] ^ unit637_0[i][1]) |(x[ unit637_0[i][2] ] ^ unit637_0[i][3]));
			}
		if(X_contra>0) L[637][0]=2;
		}
	//Check all rules of unit[637][1]
	L[637][1] = LargeX[637][0]>0 ? 1 : 0;
	satisfiable[637][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit637_1[i][0] ][ unit637_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit637_1[i][2] ][ unit637_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit637_1[i][4] ][ unit637_1[i][5] ] >0);
		X_contra = ( LargeX[637][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit637_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[637][0]=0; L[637][1]=1;}
			satisfiable[637][1]=satisfiable[637][1] & ((x[637] ^ 1) | (x[ unit637_1[i][0] ] ^ unit637_1[i][1]) |(x[ unit637_1[i][2] ] ^ unit637_1[i][3]));
			}
		if(X_contra>0) L[637][1]=2;
		}
	//Check all rules of unit[638][0]
	L[638][0] = LargeX[638][1]>0 ? 1 : 0;
	satisfiable[638][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit638_0[i][0] ][ unit638_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit638_0[i][2] ][ unit638_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit638_0[i][4] ][ unit638_0[i][5] ] >0);
		X_contra = ( LargeX[638][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit638_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[638][1]=0; L[638][0]=1;}
			satisfiable[638][0]=satisfiable[638][0] & ((x[638] ^ 0) | (x[ unit638_0[i][0] ] ^ unit638_0[i][1]) |(x[ unit638_0[i][2] ] ^ unit638_0[i][3]));
			}
		if(X_contra>0) L[638][0]=2;
		}
	//Check all rules of unit[638][1]
	L[638][1] = LargeX[638][0]>0 ? 1 : 0;
	satisfiable[638][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit638_1[i][0] ][ unit638_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit638_1[i][2] ][ unit638_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit638_1[i][4] ][ unit638_1[i][5] ] >0);
		X_contra = ( LargeX[638][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit638_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[638][0]=0; L[638][1]=1;}
			satisfiable[638][1]=satisfiable[638][1] & ((x[638] ^ 1) | (x[ unit638_1[i][0] ] ^ unit638_1[i][1]) |(x[ unit638_1[i][2] ] ^ unit638_1[i][3]));
			}
		if(X_contra>0) L[638][1]=2;
		}
	//Check all rules of unit[639][0]
	L[639][0] = LargeX[639][1]>0 ? 1 : 0;
	satisfiable[639][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit639_0[i][0] ][ unit639_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit639_0[i][2] ][ unit639_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit639_0[i][4] ][ unit639_0[i][5] ] >0);
		X_contra = ( LargeX[639][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit639_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[639][1]=0; L[639][0]=1;}
			satisfiable[639][0]=satisfiable[639][0] & ((x[639] ^ 0) | (x[ unit639_0[i][0] ] ^ unit639_0[i][1]) |(x[ unit639_0[i][2] ] ^ unit639_0[i][3]));
			}
		if(X_contra>0) L[639][0]=2;
		}
	//Check all rules of unit[639][1]
	L[639][1] = LargeX[639][0]>0 ? 1 : 0;
	satisfiable[639][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit639_1[i][0] ][ unit639_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit639_1[i][2] ][ unit639_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit639_1[i][4] ][ unit639_1[i][5] ] >0);
		X_contra = ( LargeX[639][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit639_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[639][0]=0; L[639][1]=1;}
			satisfiable[639][1]=satisfiable[639][1] & ((x[639] ^ 1) | (x[ unit639_1[i][0] ] ^ unit639_1[i][1]) |(x[ unit639_1[i][2] ] ^ unit639_1[i][3]));
			}
		if(X_contra>0) L[639][1]=2;
		}
	//Check all rules of unit[640][0]
	L[640][0] = LargeX[640][1]>0 ? 1 : 0;
	satisfiable[640][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit640_0[i][0] ][ unit640_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit640_0[i][2] ][ unit640_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit640_0[i][4] ][ unit640_0[i][5] ] >0);
		X_contra = ( LargeX[640][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit640_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[640][1]=0; L[640][0]=1;}
			satisfiable[640][0]=satisfiable[640][0] & ((x[640] ^ 0) | (x[ unit640_0[i][0] ] ^ unit640_0[i][1]) |(x[ unit640_0[i][2] ] ^ unit640_0[i][3]));
			}
		if(X_contra>0) L[640][0]=2;
		}
	//Check all rules of unit[640][1]
	L[640][1] = LargeX[640][0]>0 ? 1 : 0;
	satisfiable[640][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit640_1[i][0] ][ unit640_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit640_1[i][2] ][ unit640_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit640_1[i][4] ][ unit640_1[i][5] ] >0);
		X_contra = ( LargeX[640][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit640_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[640][0]=0; L[640][1]=1;}
			satisfiable[640][1]=satisfiable[640][1] & ((x[640] ^ 1) | (x[ unit640_1[i][0] ] ^ unit640_1[i][1]) |(x[ unit640_1[i][2] ] ^ unit640_1[i][3]));
			}
		if(X_contra>0) L[640][1]=2;
		}
	//Check all rules of unit[641][0]
	L[641][0] = LargeX[641][1]>0 ? 1 : 0;
	satisfiable[641][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit641_0[i][0] ][ unit641_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit641_0[i][2] ][ unit641_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit641_0[i][4] ][ unit641_0[i][5] ] >0);
		X_contra = ( LargeX[641][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit641_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[641][1]=0; L[641][0]=1;}
			satisfiable[641][0]=satisfiable[641][0] & ((x[641] ^ 0) | (x[ unit641_0[i][0] ] ^ unit641_0[i][1]) |(x[ unit641_0[i][2] ] ^ unit641_0[i][3]));
			}
		if(X_contra>0) L[641][0]=2;
		}
	//Check all rules of unit[641][1]
	L[641][1] = LargeX[641][0]>0 ? 1 : 0;
	satisfiable[641][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit641_1[i][0] ][ unit641_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit641_1[i][2] ][ unit641_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit641_1[i][4] ][ unit641_1[i][5] ] >0);
		X_contra = ( LargeX[641][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit641_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[641][0]=0; L[641][1]=1;}
			satisfiable[641][1]=satisfiable[641][1] & ((x[641] ^ 1) | (x[ unit641_1[i][0] ] ^ unit641_1[i][1]) |(x[ unit641_1[i][2] ] ^ unit641_1[i][3]));
			}
		if(X_contra>0) L[641][1]=2;
		}
	//Check all rules of unit[642][0]
	L[642][0] = LargeX[642][1]>0 ? 1 : 0;
	satisfiable[642][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit642_0[i][0] ][ unit642_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit642_0[i][2] ][ unit642_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit642_0[i][4] ][ unit642_0[i][5] ] >0);
		X_contra = ( LargeX[642][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit642_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[642][1]=0; L[642][0]=1;}
			satisfiable[642][0]=satisfiable[642][0] & ((x[642] ^ 0) | (x[ unit642_0[i][0] ] ^ unit642_0[i][1]) |(x[ unit642_0[i][2] ] ^ unit642_0[i][3]));
			}
		if(X_contra>0) L[642][0]=2;
		}
	//Check all rules of unit[642][1]
	L[642][1] = LargeX[642][0]>0 ? 1 : 0;
	satisfiable[642][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit642_1[i][0] ][ unit642_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit642_1[i][2] ][ unit642_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit642_1[i][4] ][ unit642_1[i][5] ] >0);
		X_contra = ( LargeX[642][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit642_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[642][0]=0; L[642][1]=1;}
			satisfiable[642][1]=satisfiable[642][1] & ((x[642] ^ 1) | (x[ unit642_1[i][0] ] ^ unit642_1[i][1]) |(x[ unit642_1[i][2] ] ^ unit642_1[i][3]));
			}
		if(X_contra>0) L[642][1]=2;
		}
	//Check all rules of unit[643][0]
	L[643][0] = LargeX[643][1]>0 ? 1 : 0;
	satisfiable[643][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit643_0[i][0] ][ unit643_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit643_0[i][2] ][ unit643_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit643_0[i][4] ][ unit643_0[i][5] ] >0);
		X_contra = ( LargeX[643][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit643_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[643][1]=0; L[643][0]=1;}
			satisfiable[643][0]=satisfiable[643][0] & ((x[643] ^ 0) | (x[ unit643_0[i][0] ] ^ unit643_0[i][1]) |(x[ unit643_0[i][2] ] ^ unit643_0[i][3]));
			}
		if(X_contra>0) L[643][0]=2;
		}
	//Check all rules of unit[643][1]
	L[643][1] = LargeX[643][0]>0 ? 1 : 0;
	satisfiable[643][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit643_1[i][0] ][ unit643_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit643_1[i][2] ][ unit643_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit643_1[i][4] ][ unit643_1[i][5] ] >0);
		X_contra = ( LargeX[643][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit643_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[643][0]=0; L[643][1]=1;}
			satisfiable[643][1]=satisfiable[643][1] & ((x[643] ^ 1) | (x[ unit643_1[i][0] ] ^ unit643_1[i][1]) |(x[ unit643_1[i][2] ] ^ unit643_1[i][3]));
			}
		if(X_contra>0) L[643][1]=2;
		}
	//Check all rules of unit[644][0]
	L[644][0] = LargeX[644][1]>0 ? 1 : 0;
	satisfiable[644][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit644_0[i][0] ][ unit644_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit644_0[i][2] ][ unit644_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit644_0[i][4] ][ unit644_0[i][5] ] >0);
		X_contra = ( LargeX[644][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit644_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[644][1]=0; L[644][0]=1;}
			satisfiable[644][0]=satisfiable[644][0] & ((x[644] ^ 0) | (x[ unit644_0[i][0] ] ^ unit644_0[i][1]) |(x[ unit644_0[i][2] ] ^ unit644_0[i][3]));
			}
		if(X_contra>0) L[644][0]=2;
		}
	//Check all rules of unit[644][1]
	L[644][1] = LargeX[644][0]>0 ? 1 : 0;
	satisfiable[644][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit644_1[i][0] ][ unit644_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit644_1[i][2] ][ unit644_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit644_1[i][4] ][ unit644_1[i][5] ] >0);
		X_contra = ( LargeX[644][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit644_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[644][0]=0; L[644][1]=1;}
			satisfiable[644][1]=satisfiable[644][1] & ((x[644] ^ 1) | (x[ unit644_1[i][0] ] ^ unit644_1[i][1]) |(x[ unit644_1[i][2] ] ^ unit644_1[i][3]));
			}
		if(X_contra>0) L[644][1]=2;
		}
	//Check all rules of unit[645][0]
	L[645][0] = LargeX[645][1]>0 ? 1 : 0;
	satisfiable[645][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit645_0[i][0] ][ unit645_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit645_0[i][2] ][ unit645_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit645_0[i][4] ][ unit645_0[i][5] ] >0);
		X_contra = ( LargeX[645][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit645_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[645][1]=0; L[645][0]=1;}
			satisfiable[645][0]=satisfiable[645][0] & ((x[645] ^ 0) | (x[ unit645_0[i][0] ] ^ unit645_0[i][1]) |(x[ unit645_0[i][2] ] ^ unit645_0[i][3]));
			}
		if(X_contra>0) L[645][0]=2;
		}
	//Check all rules of unit[645][1]
	L[645][1] = LargeX[645][0]>0 ? 1 : 0;
	satisfiable[645][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit645_1[i][0] ][ unit645_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit645_1[i][2] ][ unit645_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit645_1[i][4] ][ unit645_1[i][5] ] >0);
		X_contra = ( LargeX[645][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit645_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[645][0]=0; L[645][1]=1;}
			satisfiable[645][1]=satisfiable[645][1] & ((x[645] ^ 1) | (x[ unit645_1[i][0] ] ^ unit645_1[i][1]) |(x[ unit645_1[i][2] ] ^ unit645_1[i][3]));
			}
		if(X_contra>0) L[645][1]=2;
		}
	//Check all rules of unit[646][0]
	L[646][0] = LargeX[646][1]>0 ? 1 : 0;
	satisfiable[646][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit646_0[i][0] ][ unit646_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit646_0[i][2] ][ unit646_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit646_0[i][4] ][ unit646_0[i][5] ] >0);
		X_contra = ( LargeX[646][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit646_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[646][1]=0; L[646][0]=1;}
			satisfiable[646][0]=satisfiable[646][0] & ((x[646] ^ 0) | (x[ unit646_0[i][0] ] ^ unit646_0[i][1]) |(x[ unit646_0[i][2] ] ^ unit646_0[i][3]));
			}
		if(X_contra>0) L[646][0]=2;
		}
	//Check all rules of unit[646][1]
	L[646][1] = LargeX[646][0]>0 ? 1 : 0;
	satisfiable[646][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit646_1[i][0] ][ unit646_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit646_1[i][2] ][ unit646_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit646_1[i][4] ][ unit646_1[i][5] ] >0);
		X_contra = ( LargeX[646][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit646_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[646][0]=0; L[646][1]=1;}
			satisfiable[646][1]=satisfiable[646][1] & ((x[646] ^ 1) | (x[ unit646_1[i][0] ] ^ unit646_1[i][1]) |(x[ unit646_1[i][2] ] ^ unit646_1[i][3]));
			}
		if(X_contra>0) L[646][1]=2;
		}
	//Check all rules of unit[647][0]
	L[647][0] = LargeX[647][1]>0 ? 1 : 0;
	satisfiable[647][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit647_0[i][0] ][ unit647_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit647_0[i][2] ][ unit647_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit647_0[i][4] ][ unit647_0[i][5] ] >0);
		X_contra = ( LargeX[647][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit647_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[647][1]=0; L[647][0]=1;}
			satisfiable[647][0]=satisfiable[647][0] & ((x[647] ^ 0) | (x[ unit647_0[i][0] ] ^ unit647_0[i][1]) |(x[ unit647_0[i][2] ] ^ unit647_0[i][3]));
			}
		if(X_contra>0) L[647][0]=2;
		}
	//Check all rules of unit[647][1]
	L[647][1] = LargeX[647][0]>0 ? 1 : 0;
	satisfiable[647][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit647_1[i][0] ][ unit647_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit647_1[i][2] ][ unit647_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit647_1[i][4] ][ unit647_1[i][5] ] >0);
		X_contra = ( LargeX[647][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit647_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[647][0]=0; L[647][1]=1;}
			satisfiable[647][1]=satisfiable[647][1] & ((x[647] ^ 1) | (x[ unit647_1[i][0] ] ^ unit647_1[i][1]) |(x[ unit647_1[i][2] ] ^ unit647_1[i][3]));
			}
		if(X_contra>0) L[647][1]=2;
		}
	//Check all rules of unit[648][0]
	L[648][0] = LargeX[648][1]>0 ? 1 : 0;
	satisfiable[648][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit648_0[i][0] ][ unit648_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit648_0[i][2] ][ unit648_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit648_0[i][4] ][ unit648_0[i][5] ] >0);
		X_contra = ( LargeX[648][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit648_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[648][1]=0; L[648][0]=1;}
			satisfiable[648][0]=satisfiable[648][0] & ((x[648] ^ 0) | (x[ unit648_0[i][0] ] ^ unit648_0[i][1]) |(x[ unit648_0[i][2] ] ^ unit648_0[i][3]));
			}
		if(X_contra>0) L[648][0]=2;
		}
	//Check all rules of unit[648][1]
	L[648][1] = LargeX[648][0]>0 ? 1 : 0;
	satisfiable[648][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit648_1[i][0] ][ unit648_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit648_1[i][2] ][ unit648_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit648_1[i][4] ][ unit648_1[i][5] ] >0);
		X_contra = ( LargeX[648][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit648_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[648][0]=0; L[648][1]=1;}
			satisfiable[648][1]=satisfiable[648][1] & ((x[648] ^ 1) | (x[ unit648_1[i][0] ] ^ unit648_1[i][1]) |(x[ unit648_1[i][2] ] ^ unit648_1[i][3]));
			}
		if(X_contra>0) L[648][1]=2;
		}
	//Check all rules of unit[649][0]
	L[649][0] = LargeX[649][1]>0 ? 1 : 0;
	satisfiable[649][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit649_0[i][0] ][ unit649_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit649_0[i][2] ][ unit649_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit649_0[i][4] ][ unit649_0[i][5] ] >0);
		X_contra = ( LargeX[649][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit649_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[649][1]=0; L[649][0]=1;}
			satisfiable[649][0]=satisfiable[649][0] & ((x[649] ^ 0) | (x[ unit649_0[i][0] ] ^ unit649_0[i][1]) |(x[ unit649_0[i][2] ] ^ unit649_0[i][3]));
			}
		if(X_contra>0) L[649][0]=2;
		}
	//Check all rules of unit[649][1]
	L[649][1] = LargeX[649][0]>0 ? 1 : 0;
	satisfiable[649][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit649_1[i][0] ][ unit649_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit649_1[i][2] ][ unit649_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit649_1[i][4] ][ unit649_1[i][5] ] >0);
		X_contra = ( LargeX[649][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit649_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[649][0]=0; L[649][1]=1;}
			satisfiable[649][1]=satisfiable[649][1] & ((x[649] ^ 1) | (x[ unit649_1[i][0] ] ^ unit649_1[i][1]) |(x[ unit649_1[i][2] ] ^ unit649_1[i][3]));
			}
		if(X_contra>0) L[649][1]=2;
		}
	//Check all rules of unit[650][0]
	L[650][0] = LargeX[650][1]>0 ? 1 : 0;
	satisfiable[650][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit650_0[i][0] ][ unit650_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit650_0[i][2] ][ unit650_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit650_0[i][4] ][ unit650_0[i][5] ] >0);
		X_contra = ( LargeX[650][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit650_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[650][1]=0; L[650][0]=1;}
			satisfiable[650][0]=satisfiable[650][0] & ((x[650] ^ 0) | (x[ unit650_0[i][0] ] ^ unit650_0[i][1]) |(x[ unit650_0[i][2] ] ^ unit650_0[i][3]));
			}
		if(X_contra>0) L[650][0]=2;
		}
	//Check all rules of unit[650][1]
	L[650][1] = LargeX[650][0]>0 ? 1 : 0;
	satisfiable[650][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit650_1[i][0] ][ unit650_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit650_1[i][2] ][ unit650_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit650_1[i][4] ][ unit650_1[i][5] ] >0);
		X_contra = ( LargeX[650][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit650_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[650][0]=0; L[650][1]=1;}
			satisfiable[650][1]=satisfiable[650][1] & ((x[650] ^ 1) | (x[ unit650_1[i][0] ] ^ unit650_1[i][1]) |(x[ unit650_1[i][2] ] ^ unit650_1[i][3]));
			}
		if(X_contra>0) L[650][1]=2;
		}
	//Check all rules of unit[651][0]
	L[651][0] = LargeX[651][1]>0 ? 1 : 0;
	satisfiable[651][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit651_0[i][0] ][ unit651_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit651_0[i][2] ][ unit651_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit651_0[i][4] ][ unit651_0[i][5] ] >0);
		X_contra = ( LargeX[651][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit651_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[651][1]=0; L[651][0]=1;}
			satisfiable[651][0]=satisfiable[651][0] & ((x[651] ^ 0) | (x[ unit651_0[i][0] ] ^ unit651_0[i][1]) |(x[ unit651_0[i][2] ] ^ unit651_0[i][3]));
			}
		if(X_contra>0) L[651][0]=2;
		}
	//Check all rules of unit[651][1]
	L[651][1] = LargeX[651][0]>0 ? 1 : 0;
	satisfiable[651][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit651_1[i][0] ][ unit651_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit651_1[i][2] ][ unit651_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit651_1[i][4] ][ unit651_1[i][5] ] >0);
		X_contra = ( LargeX[651][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit651_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[651][0]=0; L[651][1]=1;}
			satisfiable[651][1]=satisfiable[651][1] & ((x[651] ^ 1) | (x[ unit651_1[i][0] ] ^ unit651_1[i][1]) |(x[ unit651_1[i][2] ] ^ unit651_1[i][3]));
			}
		if(X_contra>0) L[651][1]=2;
		}
	//Check all rules of unit[652][0]
	L[652][0] = LargeX[652][1]>0 ? 1 : 0;
	satisfiable[652][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit652_0[i][0] ][ unit652_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit652_0[i][2] ][ unit652_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit652_0[i][4] ][ unit652_0[i][5] ] >0);
		X_contra = ( LargeX[652][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit652_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[652][1]=0; L[652][0]=1;}
			satisfiable[652][0]=satisfiable[652][0] & ((x[652] ^ 0) | (x[ unit652_0[i][0] ] ^ unit652_0[i][1]) |(x[ unit652_0[i][2] ] ^ unit652_0[i][3]));
			}
		if(X_contra>0) L[652][0]=2;
		}
	//Check all rules of unit[652][1]
	L[652][1] = LargeX[652][0]>0 ? 1 : 0;
	satisfiable[652][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit652_1[i][0] ][ unit652_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit652_1[i][2] ][ unit652_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit652_1[i][4] ][ unit652_1[i][5] ] >0);
		X_contra = ( LargeX[652][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit652_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[652][0]=0; L[652][1]=1;}
			satisfiable[652][1]=satisfiable[652][1] & ((x[652] ^ 1) | (x[ unit652_1[i][0] ] ^ unit652_1[i][1]) |(x[ unit652_1[i][2] ] ^ unit652_1[i][3]));
			}
		if(X_contra>0) L[652][1]=2;
		}
	//Check all rules of unit[653][0]
	L[653][0] = LargeX[653][1]>0 ? 1 : 0;
	satisfiable[653][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit653_0[i][0] ][ unit653_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit653_0[i][2] ][ unit653_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit653_0[i][4] ][ unit653_0[i][5] ] >0);
		X_contra = ( LargeX[653][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit653_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[653][1]=0; L[653][0]=1;}
			satisfiable[653][0]=satisfiable[653][0] & ((x[653] ^ 0) | (x[ unit653_0[i][0] ] ^ unit653_0[i][1]) |(x[ unit653_0[i][2] ] ^ unit653_0[i][3]));
			}
		if(X_contra>0) L[653][0]=2;
		}
	//Check all rules of unit[653][1]
	L[653][1] = LargeX[653][0]>0 ? 1 : 0;
	satisfiable[653][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit653_1[i][0] ][ unit653_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit653_1[i][2] ][ unit653_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit653_1[i][4] ][ unit653_1[i][5] ] >0);
		X_contra = ( LargeX[653][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit653_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[653][0]=0; L[653][1]=1;}
			satisfiable[653][1]=satisfiable[653][1] & ((x[653] ^ 1) | (x[ unit653_1[i][0] ] ^ unit653_1[i][1]) |(x[ unit653_1[i][2] ] ^ unit653_1[i][3]));
			}
		if(X_contra>0) L[653][1]=2;
		}
	//Check all rules of unit[654][0]
	L[654][0] = LargeX[654][1]>0 ? 1 : 0;
	satisfiable[654][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit654_0[i][0] ][ unit654_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit654_0[i][2] ][ unit654_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit654_0[i][4] ][ unit654_0[i][5] ] >0);
		X_contra = ( LargeX[654][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit654_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[654][1]=0; L[654][0]=1;}
			satisfiable[654][0]=satisfiable[654][0] & ((x[654] ^ 0) | (x[ unit654_0[i][0] ] ^ unit654_0[i][1]) |(x[ unit654_0[i][2] ] ^ unit654_0[i][3]));
			}
		if(X_contra>0) L[654][0]=2;
		}
	//Check all rules of unit[654][1]
	L[654][1] = LargeX[654][0]>0 ? 1 : 0;
	satisfiable[654][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit654_1[i][0] ][ unit654_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit654_1[i][2] ][ unit654_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit654_1[i][4] ][ unit654_1[i][5] ] >0);
		X_contra = ( LargeX[654][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit654_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[654][0]=0; L[654][1]=1;}
			satisfiable[654][1]=satisfiable[654][1] & ((x[654] ^ 1) | (x[ unit654_1[i][0] ] ^ unit654_1[i][1]) |(x[ unit654_1[i][2] ] ^ unit654_1[i][3]));
			}
		if(X_contra>0) L[654][1]=2;
		}
	//Check all rules of unit[655][0]
	L[655][0] = LargeX[655][1]>0 ? 1 : 0;
	satisfiable[655][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit655_0[i][0] ][ unit655_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit655_0[i][2] ][ unit655_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit655_0[i][4] ][ unit655_0[i][5] ] >0);
		X_contra = ( LargeX[655][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit655_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[655][1]=0; L[655][0]=1;}
			satisfiable[655][0]=satisfiable[655][0] & ((x[655] ^ 0) | (x[ unit655_0[i][0] ] ^ unit655_0[i][1]) |(x[ unit655_0[i][2] ] ^ unit655_0[i][3]));
			}
		if(X_contra>0) L[655][0]=2;
		}
	//Check all rules of unit[655][1]
	L[655][1] = LargeX[655][0]>0 ? 1 : 0;
	satisfiable[655][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit655_1[i][0] ][ unit655_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit655_1[i][2] ][ unit655_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit655_1[i][4] ][ unit655_1[i][5] ] >0);
		X_contra = ( LargeX[655][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit655_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[655][0]=0; L[655][1]=1;}
			satisfiable[655][1]=satisfiable[655][1] & ((x[655] ^ 1) | (x[ unit655_1[i][0] ] ^ unit655_1[i][1]) |(x[ unit655_1[i][2] ] ^ unit655_1[i][3]));
			}
		if(X_contra>0) L[655][1]=2;
		}
	//Check all rules of unit[656][0]
	L[656][0] = LargeX[656][1]>0 ? 1 : 0;
	satisfiable[656][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit656_0[i][0] ][ unit656_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit656_0[i][2] ][ unit656_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit656_0[i][4] ][ unit656_0[i][5] ] >0);
		X_contra = ( LargeX[656][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit656_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[656][1]=0; L[656][0]=1;}
			satisfiable[656][0]=satisfiable[656][0] & ((x[656] ^ 0) | (x[ unit656_0[i][0] ] ^ unit656_0[i][1]) |(x[ unit656_0[i][2] ] ^ unit656_0[i][3]));
			}
		if(X_contra>0) L[656][0]=2;
		}
	//Check all rules of unit[656][1]
	L[656][1] = LargeX[656][0]>0 ? 1 : 0;
	satisfiable[656][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit656_1[i][0] ][ unit656_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit656_1[i][2] ][ unit656_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit656_1[i][4] ][ unit656_1[i][5] ] >0);
		X_contra = ( LargeX[656][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit656_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[656][0]=0; L[656][1]=1;}
			satisfiable[656][1]=satisfiable[656][1] & ((x[656] ^ 1) | (x[ unit656_1[i][0] ] ^ unit656_1[i][1]) |(x[ unit656_1[i][2] ] ^ unit656_1[i][3]));
			}
		if(X_contra>0) L[656][1]=2;
		}
	//Check all rules of unit[657][0]
	L[657][0] = LargeX[657][1]>0 ? 1 : 0;
	satisfiable[657][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit657_0[i][0] ][ unit657_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit657_0[i][2] ][ unit657_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit657_0[i][4] ][ unit657_0[i][5] ] >0);
		X_contra = ( LargeX[657][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit657_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[657][1]=0; L[657][0]=1;}
			satisfiable[657][0]=satisfiable[657][0] & ((x[657] ^ 0) | (x[ unit657_0[i][0] ] ^ unit657_0[i][1]) |(x[ unit657_0[i][2] ] ^ unit657_0[i][3]));
			}
		if(X_contra>0) L[657][0]=2;
		}
	//Check all rules of unit[657][1]
	L[657][1] = LargeX[657][0]>0 ? 1 : 0;
	satisfiable[657][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit657_1[i][0] ][ unit657_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit657_1[i][2] ][ unit657_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit657_1[i][4] ][ unit657_1[i][5] ] >0);
		X_contra = ( LargeX[657][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit657_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[657][0]=0; L[657][1]=1;}
			satisfiable[657][1]=satisfiable[657][1] & ((x[657] ^ 1) | (x[ unit657_1[i][0] ] ^ unit657_1[i][1]) |(x[ unit657_1[i][2] ] ^ unit657_1[i][3]));
			}
		if(X_contra>0) L[657][1]=2;
		}
	//Check all rules of unit[658][0]
	L[658][0] = LargeX[658][1]>0 ? 1 : 0;
	satisfiable[658][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit658_0[i][0] ][ unit658_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit658_0[i][2] ][ unit658_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit658_0[i][4] ][ unit658_0[i][5] ] >0);
		X_contra = ( LargeX[658][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit658_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[658][1]=0; L[658][0]=1;}
			satisfiable[658][0]=satisfiable[658][0] & ((x[658] ^ 0) | (x[ unit658_0[i][0] ] ^ unit658_0[i][1]) |(x[ unit658_0[i][2] ] ^ unit658_0[i][3]));
			}
		if(X_contra>0) L[658][0]=2;
		}
	//Check all rules of unit[658][1]
	L[658][1] = LargeX[658][0]>0 ? 1 : 0;
	satisfiable[658][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit658_1[i][0] ][ unit658_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit658_1[i][2] ][ unit658_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit658_1[i][4] ][ unit658_1[i][5] ] >0);
		X_contra = ( LargeX[658][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit658_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[658][0]=0; L[658][1]=1;}
			satisfiable[658][1]=satisfiable[658][1] & ((x[658] ^ 1) | (x[ unit658_1[i][0] ] ^ unit658_1[i][1]) |(x[ unit658_1[i][2] ] ^ unit658_1[i][3]));
			}
		if(X_contra>0) L[658][1]=2;
		}
	//Check all rules of unit[659][0]
	L[659][0] = LargeX[659][1]>0 ? 1 : 0;
	satisfiable[659][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit659_0[i][0] ][ unit659_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit659_0[i][2] ][ unit659_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit659_0[i][4] ][ unit659_0[i][5] ] >0);
		X_contra = ( LargeX[659][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit659_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[659][1]=0; L[659][0]=1;}
			satisfiable[659][0]=satisfiable[659][0] & ((x[659] ^ 0) | (x[ unit659_0[i][0] ] ^ unit659_0[i][1]) |(x[ unit659_0[i][2] ] ^ unit659_0[i][3]));
			}
		if(X_contra>0) L[659][0]=2;
		}
	//Check all rules of unit[659][1]
	L[659][1] = LargeX[659][0]>0 ? 1 : 0;
	satisfiable[659][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit659_1[i][0] ][ unit659_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit659_1[i][2] ][ unit659_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit659_1[i][4] ][ unit659_1[i][5] ] >0);
		X_contra = ( LargeX[659][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit659_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[659][0]=0; L[659][1]=1;}
			satisfiable[659][1]=satisfiable[659][1] & ((x[659] ^ 1) | (x[ unit659_1[i][0] ] ^ unit659_1[i][1]) |(x[ unit659_1[i][2] ] ^ unit659_1[i][3]));
			}
		if(X_contra>0) L[659][1]=2;
		}
	//Check all rules of unit[660][0]
	L[660][0] = LargeX[660][1]>0 ? 1 : 0;
	satisfiable[660][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit660_0[i][0] ][ unit660_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit660_0[i][2] ][ unit660_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit660_0[i][4] ][ unit660_0[i][5] ] >0);
		X_contra = ( LargeX[660][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit660_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[660][1]=0; L[660][0]=1;}
			satisfiable[660][0]=satisfiable[660][0] & ((x[660] ^ 0) | (x[ unit660_0[i][0] ] ^ unit660_0[i][1]) |(x[ unit660_0[i][2] ] ^ unit660_0[i][3]));
			}
		if(X_contra>0) L[660][0]=2;
		}
	//Check all rules of unit[660][1]
	L[660][1] = LargeX[660][0]>0 ? 1 : 0;
	satisfiable[660][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit660_1[i][0] ][ unit660_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit660_1[i][2] ][ unit660_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit660_1[i][4] ][ unit660_1[i][5] ] >0);
		X_contra = ( LargeX[660][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit660_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[660][0]=0; L[660][1]=1;}
			satisfiable[660][1]=satisfiable[660][1] & ((x[660] ^ 1) | (x[ unit660_1[i][0] ] ^ unit660_1[i][1]) |(x[ unit660_1[i][2] ] ^ unit660_1[i][3]));
			}
		if(X_contra>0) L[660][1]=2;
		}
	//Check all rules of unit[661][0]
	L[661][0] = LargeX[661][1]>0 ? 1 : 0;
	satisfiable[661][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit661_0[i][0] ][ unit661_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit661_0[i][2] ][ unit661_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit661_0[i][4] ][ unit661_0[i][5] ] >0);
		X_contra = ( LargeX[661][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit661_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[661][1]=0; L[661][0]=1;}
			satisfiable[661][0]=satisfiable[661][0] & ((x[661] ^ 0) | (x[ unit661_0[i][0] ] ^ unit661_0[i][1]) |(x[ unit661_0[i][2] ] ^ unit661_0[i][3]));
			}
		if(X_contra>0) L[661][0]=2;
		}
	//Check all rules of unit[661][1]
	L[661][1] = LargeX[661][0]>0 ? 1 : 0;
	satisfiable[661][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit661_1[i][0] ][ unit661_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit661_1[i][2] ][ unit661_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit661_1[i][4] ][ unit661_1[i][5] ] >0);
		X_contra = ( LargeX[661][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit661_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[661][0]=0; L[661][1]=1;}
			satisfiable[661][1]=satisfiable[661][1] & ((x[661] ^ 1) | (x[ unit661_1[i][0] ] ^ unit661_1[i][1]) |(x[ unit661_1[i][2] ] ^ unit661_1[i][3]));
			}
		if(X_contra>0) L[661][1]=2;
		}
	//Check all rules of unit[662][0]
	L[662][0] = LargeX[662][1]>0 ? 1 : 0;
	satisfiable[662][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit662_0[i][0] ][ unit662_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit662_0[i][2] ][ unit662_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit662_0[i][4] ][ unit662_0[i][5] ] >0);
		X_contra = ( LargeX[662][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit662_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[662][1]=0; L[662][0]=1;}
			satisfiable[662][0]=satisfiable[662][0] & ((x[662] ^ 0) | (x[ unit662_0[i][0] ] ^ unit662_0[i][1]) |(x[ unit662_0[i][2] ] ^ unit662_0[i][3]));
			}
		if(X_contra>0) L[662][0]=2;
		}
	//Check all rules of unit[662][1]
	L[662][1] = LargeX[662][0]>0 ? 1 : 0;
	satisfiable[662][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit662_1[i][0] ][ unit662_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit662_1[i][2] ][ unit662_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit662_1[i][4] ][ unit662_1[i][5] ] >0);
		X_contra = ( LargeX[662][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit662_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[662][0]=0; L[662][1]=1;}
			satisfiable[662][1]=satisfiable[662][1] & ((x[662] ^ 1) | (x[ unit662_1[i][0] ] ^ unit662_1[i][1]) |(x[ unit662_1[i][2] ] ^ unit662_1[i][3]));
			}
		if(X_contra>0) L[662][1]=2;
		}
	//Check all rules of unit[663][0]
	L[663][0] = LargeX[663][1]>0 ? 1 : 0;
	satisfiable[663][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit663_0[i][0] ][ unit663_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit663_0[i][2] ][ unit663_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit663_0[i][4] ][ unit663_0[i][5] ] >0);
		X_contra = ( LargeX[663][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit663_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[663][1]=0; L[663][0]=1;}
			satisfiable[663][0]=satisfiable[663][0] & ((x[663] ^ 0) | (x[ unit663_0[i][0] ] ^ unit663_0[i][1]) |(x[ unit663_0[i][2] ] ^ unit663_0[i][3]));
			}
		if(X_contra>0) L[663][0]=2;
		}
	//Check all rules of unit[663][1]
	L[663][1] = LargeX[663][0]>0 ? 1 : 0;
	satisfiable[663][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit663_1[i][0] ][ unit663_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit663_1[i][2] ][ unit663_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit663_1[i][4] ][ unit663_1[i][5] ] >0);
		X_contra = ( LargeX[663][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit663_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[663][0]=0; L[663][1]=1;}
			satisfiable[663][1]=satisfiable[663][1] & ((x[663] ^ 1) | (x[ unit663_1[i][0] ] ^ unit663_1[i][1]) |(x[ unit663_1[i][2] ] ^ unit663_1[i][3]));
			}
		if(X_contra>0) L[663][1]=2;
		}
	//Check all rules of unit[664][0]
	L[664][0] = LargeX[664][1]>0 ? 1 : 0;
	satisfiable[664][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit664_0[i][0] ][ unit664_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit664_0[i][2] ][ unit664_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit664_0[i][4] ][ unit664_0[i][5] ] >0);
		X_contra = ( LargeX[664][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit664_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[664][1]=0; L[664][0]=1;}
			satisfiable[664][0]=satisfiable[664][0] & ((x[664] ^ 0) | (x[ unit664_0[i][0] ] ^ unit664_0[i][1]) |(x[ unit664_0[i][2] ] ^ unit664_0[i][3]));
			}
		if(X_contra>0) L[664][0]=2;
		}
	//Check all rules of unit[664][1]
	L[664][1] = LargeX[664][0]>0 ? 1 : 0;
	satisfiable[664][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit664_1[i][0] ][ unit664_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit664_1[i][2] ][ unit664_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit664_1[i][4] ][ unit664_1[i][5] ] >0);
		X_contra = ( LargeX[664][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit664_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[664][0]=0; L[664][1]=1;}
			satisfiable[664][1]=satisfiable[664][1] & ((x[664] ^ 1) | (x[ unit664_1[i][0] ] ^ unit664_1[i][1]) |(x[ unit664_1[i][2] ] ^ unit664_1[i][3]));
			}
		if(X_contra>0) L[664][1]=2;
		}
	//Check all rules of unit[665][0]
	L[665][0] = LargeX[665][1]>0 ? 1 : 0;
	satisfiable[665][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit665_0[i][0] ][ unit665_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit665_0[i][2] ][ unit665_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit665_0[i][4] ][ unit665_0[i][5] ] >0);
		X_contra = ( LargeX[665][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit665_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[665][1]=0; L[665][0]=1;}
			satisfiable[665][0]=satisfiable[665][0] & ((x[665] ^ 0) | (x[ unit665_0[i][0] ] ^ unit665_0[i][1]) |(x[ unit665_0[i][2] ] ^ unit665_0[i][3]));
			}
		if(X_contra>0) L[665][0]=2;
		}
	//Check all rules of unit[665][1]
	L[665][1] = LargeX[665][0]>0 ? 1 : 0;
	satisfiable[665][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit665_1[i][0] ][ unit665_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit665_1[i][2] ][ unit665_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit665_1[i][4] ][ unit665_1[i][5] ] >0);
		X_contra = ( LargeX[665][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit665_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[665][0]=0; L[665][1]=1;}
			satisfiable[665][1]=satisfiable[665][1] & ((x[665] ^ 1) | (x[ unit665_1[i][0] ] ^ unit665_1[i][1]) |(x[ unit665_1[i][2] ] ^ unit665_1[i][3]));
			}
		if(X_contra>0) L[665][1]=2;
		}
	//Check all rules of unit[666][0]
	L[666][0] = LargeX[666][1]>0 ? 1 : 0;
	satisfiable[666][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit666_0[i][0] ][ unit666_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit666_0[i][2] ][ unit666_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit666_0[i][4] ][ unit666_0[i][5] ] >0);
		X_contra = ( LargeX[666][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit666_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[666][1]=0; L[666][0]=1;}
			satisfiable[666][0]=satisfiable[666][0] & ((x[666] ^ 0) | (x[ unit666_0[i][0] ] ^ unit666_0[i][1]) |(x[ unit666_0[i][2] ] ^ unit666_0[i][3]));
			}
		if(X_contra>0) L[666][0]=2;
		}
	//Check all rules of unit[666][1]
	L[666][1] = LargeX[666][0]>0 ? 1 : 0;
	satisfiable[666][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit666_1[i][0] ][ unit666_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit666_1[i][2] ][ unit666_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit666_1[i][4] ][ unit666_1[i][5] ] >0);
		X_contra = ( LargeX[666][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit666_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[666][0]=0; L[666][1]=1;}
			satisfiable[666][1]=satisfiable[666][1] & ((x[666] ^ 1) | (x[ unit666_1[i][0] ] ^ unit666_1[i][1]) |(x[ unit666_1[i][2] ] ^ unit666_1[i][3]));
			}
		if(X_contra>0) L[666][1]=2;
		}
	//Check all rules of unit[667][0]
	L[667][0] = LargeX[667][1]>0 ? 1 : 0;
	satisfiable[667][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit667_0[i][0] ][ unit667_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit667_0[i][2] ][ unit667_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit667_0[i][4] ][ unit667_0[i][5] ] >0);
		X_contra = ( LargeX[667][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit667_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[667][1]=0; L[667][0]=1;}
			satisfiable[667][0]=satisfiable[667][0] & ((x[667] ^ 0) | (x[ unit667_0[i][0] ] ^ unit667_0[i][1]) |(x[ unit667_0[i][2] ] ^ unit667_0[i][3]));
			}
		if(X_contra>0) L[667][0]=2;
		}
	//Check all rules of unit[667][1]
	L[667][1] = LargeX[667][0]>0 ? 1 : 0;
	satisfiable[667][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit667_1[i][0] ][ unit667_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit667_1[i][2] ][ unit667_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit667_1[i][4] ][ unit667_1[i][5] ] >0);
		X_contra = ( LargeX[667][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit667_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[667][0]=0; L[667][1]=1;}
			satisfiable[667][1]=satisfiable[667][1] & ((x[667] ^ 1) | (x[ unit667_1[i][0] ] ^ unit667_1[i][1]) |(x[ unit667_1[i][2] ] ^ unit667_1[i][3]));
			}
		if(X_contra>0) L[667][1]=2;
		}
	//Check all rules of unit[668][0]
	L[668][0] = LargeX[668][1]>0 ? 1 : 0;
	satisfiable[668][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit668_0[i][0] ][ unit668_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit668_0[i][2] ][ unit668_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit668_0[i][4] ][ unit668_0[i][5] ] >0);
		X_contra = ( LargeX[668][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit668_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[668][1]=0; L[668][0]=1;}
			satisfiable[668][0]=satisfiable[668][0] & ((x[668] ^ 0) | (x[ unit668_0[i][0] ] ^ unit668_0[i][1]) |(x[ unit668_0[i][2] ] ^ unit668_0[i][3]));
			}
		if(X_contra>0) L[668][0]=2;
		}
	//Check all rules of unit[668][1]
	L[668][1] = LargeX[668][0]>0 ? 1 : 0;
	satisfiable[668][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit668_1[i][0] ][ unit668_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit668_1[i][2] ][ unit668_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit668_1[i][4] ][ unit668_1[i][5] ] >0);
		X_contra = ( LargeX[668][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit668_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[668][0]=0; L[668][1]=1;}
			satisfiable[668][1]=satisfiable[668][1] & ((x[668] ^ 1) | (x[ unit668_1[i][0] ] ^ unit668_1[i][1]) |(x[ unit668_1[i][2] ] ^ unit668_1[i][3]));
			}
		if(X_contra>0) L[668][1]=2;
		}
	//Check all rules of unit[669][0]
	L[669][0] = LargeX[669][1]>0 ? 1 : 0;
	satisfiable[669][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit669_0[i][0] ][ unit669_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit669_0[i][2] ][ unit669_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit669_0[i][4] ][ unit669_0[i][5] ] >0);
		X_contra = ( LargeX[669][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit669_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[669][1]=0; L[669][0]=1;}
			satisfiable[669][0]=satisfiable[669][0] & ((x[669] ^ 0) | (x[ unit669_0[i][0] ] ^ unit669_0[i][1]) |(x[ unit669_0[i][2] ] ^ unit669_0[i][3]));
			}
		if(X_contra>0) L[669][0]=2;
		}
	//Check all rules of unit[669][1]
	L[669][1] = LargeX[669][0]>0 ? 1 : 0;
	satisfiable[669][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit669_1[i][0] ][ unit669_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit669_1[i][2] ][ unit669_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit669_1[i][4] ][ unit669_1[i][5] ] >0);
		X_contra = ( LargeX[669][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit669_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[669][0]=0; L[669][1]=1;}
			satisfiable[669][1]=satisfiable[669][1] & ((x[669] ^ 1) | (x[ unit669_1[i][0] ] ^ unit669_1[i][1]) |(x[ unit669_1[i][2] ] ^ unit669_1[i][3]));
			}
		if(X_contra>0) L[669][1]=2;
		}
	//Check all rules of unit[670][0]
	L[670][0] = LargeX[670][1]>0 ? 1 : 0;
	satisfiable[670][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit670_0[i][0] ][ unit670_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit670_0[i][2] ][ unit670_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit670_0[i][4] ][ unit670_0[i][5] ] >0);
		X_contra = ( LargeX[670][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit670_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[670][1]=0; L[670][0]=1;}
			satisfiable[670][0]=satisfiable[670][0] & ((x[670] ^ 0) | (x[ unit670_0[i][0] ] ^ unit670_0[i][1]) |(x[ unit670_0[i][2] ] ^ unit670_0[i][3]));
			}
		if(X_contra>0) L[670][0]=2;
		}
	//Check all rules of unit[670][1]
	L[670][1] = LargeX[670][0]>0 ? 1 : 0;
	satisfiable[670][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit670_1[i][0] ][ unit670_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit670_1[i][2] ][ unit670_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit670_1[i][4] ][ unit670_1[i][5] ] >0);
		X_contra = ( LargeX[670][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit670_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[670][0]=0; L[670][1]=1;}
			satisfiable[670][1]=satisfiable[670][1] & ((x[670] ^ 1) | (x[ unit670_1[i][0] ] ^ unit670_1[i][1]) |(x[ unit670_1[i][2] ] ^ unit670_1[i][3]));
			}
		if(X_contra>0) L[670][1]=2;
		}
	//Check all rules of unit[671][0]
	L[671][0] = LargeX[671][1]>0 ? 1 : 0;
	satisfiable[671][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit671_0[i][0] ][ unit671_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit671_0[i][2] ][ unit671_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit671_0[i][4] ][ unit671_0[i][5] ] >0);
		X_contra = ( LargeX[671][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit671_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[671][1]=0; L[671][0]=1;}
			satisfiable[671][0]=satisfiable[671][0] & ((x[671] ^ 0) | (x[ unit671_0[i][0] ] ^ unit671_0[i][1]) |(x[ unit671_0[i][2] ] ^ unit671_0[i][3]));
			}
		if(X_contra>0) L[671][0]=2;
		}
	//Check all rules of unit[671][1]
	L[671][1] = LargeX[671][0]>0 ? 1 : 0;
	satisfiable[671][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit671_1[i][0] ][ unit671_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit671_1[i][2] ][ unit671_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit671_1[i][4] ][ unit671_1[i][5] ] >0);
		X_contra = ( LargeX[671][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit671_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[671][0]=0; L[671][1]=1;}
			satisfiable[671][1]=satisfiable[671][1] & ((x[671] ^ 1) | (x[ unit671_1[i][0] ] ^ unit671_1[i][1]) |(x[ unit671_1[i][2] ] ^ unit671_1[i][3]));
			}
		if(X_contra>0) L[671][1]=2;
		}
	//Check all rules of unit[672][0]
	L[672][0] = LargeX[672][1]>0 ? 1 : 0;
	satisfiable[672][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit672_0[i][0] ][ unit672_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit672_0[i][2] ][ unit672_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit672_0[i][4] ][ unit672_0[i][5] ] >0);
		X_contra = ( LargeX[672][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit672_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[672][1]=0; L[672][0]=1;}
			satisfiable[672][0]=satisfiable[672][0] & ((x[672] ^ 0) | (x[ unit672_0[i][0] ] ^ unit672_0[i][1]) |(x[ unit672_0[i][2] ] ^ unit672_0[i][3]));
			}
		if(X_contra>0) L[672][0]=2;
		}
	//Check all rules of unit[672][1]
	L[672][1] = LargeX[672][0]>0 ? 1 : 0;
	satisfiable[672][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit672_1[i][0] ][ unit672_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit672_1[i][2] ][ unit672_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit672_1[i][4] ][ unit672_1[i][5] ] >0);
		X_contra = ( LargeX[672][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit672_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[672][0]=0; L[672][1]=1;}
			satisfiable[672][1]=satisfiable[672][1] & ((x[672] ^ 1) | (x[ unit672_1[i][0] ] ^ unit672_1[i][1]) |(x[ unit672_1[i][2] ] ^ unit672_1[i][3]));
			}
		if(X_contra>0) L[672][1]=2;
		}
	//Check all rules of unit[673][0]
	L[673][0] = LargeX[673][1]>0 ? 1 : 0;
	satisfiable[673][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit673_0[i][0] ][ unit673_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit673_0[i][2] ][ unit673_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit673_0[i][4] ][ unit673_0[i][5] ] >0);
		X_contra = ( LargeX[673][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit673_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[673][1]=0; L[673][0]=1;}
			satisfiable[673][0]=satisfiable[673][0] & ((x[673] ^ 0) | (x[ unit673_0[i][0] ] ^ unit673_0[i][1]) |(x[ unit673_0[i][2] ] ^ unit673_0[i][3]));
			}
		if(X_contra>0) L[673][0]=2;
		}
	//Check all rules of unit[673][1]
	L[673][1] = LargeX[673][0]>0 ? 1 : 0;
	satisfiable[673][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit673_1[i][0] ][ unit673_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit673_1[i][2] ][ unit673_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit673_1[i][4] ][ unit673_1[i][5] ] >0);
		X_contra = ( LargeX[673][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit673_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[673][0]=0; L[673][1]=1;}
			satisfiable[673][1]=satisfiable[673][1] & ((x[673] ^ 1) | (x[ unit673_1[i][0] ] ^ unit673_1[i][1]) |(x[ unit673_1[i][2] ] ^ unit673_1[i][3]));
			}
		if(X_contra>0) L[673][1]=2;
		}
	//Check all rules of unit[674][0]
	L[674][0] = LargeX[674][1]>0 ? 1 : 0;
	satisfiable[674][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit674_0[i][0] ][ unit674_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit674_0[i][2] ][ unit674_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit674_0[i][4] ][ unit674_0[i][5] ] >0);
		X_contra = ( LargeX[674][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit674_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[674][1]=0; L[674][0]=1;}
			satisfiable[674][0]=satisfiable[674][0] & ((x[674] ^ 0) | (x[ unit674_0[i][0] ] ^ unit674_0[i][1]) |(x[ unit674_0[i][2] ] ^ unit674_0[i][3]));
			}
		if(X_contra>0) L[674][0]=2;
		}
	//Check all rules of unit[674][1]
	L[674][1] = LargeX[674][0]>0 ? 1 : 0;
	satisfiable[674][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit674_1[i][0] ][ unit674_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit674_1[i][2] ][ unit674_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit674_1[i][4] ][ unit674_1[i][5] ] >0);
		X_contra = ( LargeX[674][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit674_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[674][0]=0; L[674][1]=1;}
			satisfiable[674][1]=satisfiable[674][1] & ((x[674] ^ 1) | (x[ unit674_1[i][0] ] ^ unit674_1[i][1]) |(x[ unit674_1[i][2] ] ^ unit674_1[i][3]));
			}
		if(X_contra>0) L[674][1]=2;
		}
	//Check all rules of unit[675][0]
	L[675][0] = LargeX[675][1]>0 ? 1 : 0;
	satisfiable[675][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit675_0[i][0] ][ unit675_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit675_0[i][2] ][ unit675_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit675_0[i][4] ][ unit675_0[i][5] ] >0);
		X_contra = ( LargeX[675][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit675_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[675][1]=0; L[675][0]=1;}
			satisfiable[675][0]=satisfiable[675][0] & ((x[675] ^ 0) | (x[ unit675_0[i][0] ] ^ unit675_0[i][1]) |(x[ unit675_0[i][2] ] ^ unit675_0[i][3]));
			}
		if(X_contra>0) L[675][0]=2;
		}
	//Check all rules of unit[675][1]
	L[675][1] = LargeX[675][0]>0 ? 1 : 0;
	satisfiable[675][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit675_1[i][0] ][ unit675_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit675_1[i][2] ][ unit675_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit675_1[i][4] ][ unit675_1[i][5] ] >0);
		X_contra = ( LargeX[675][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit675_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[675][0]=0; L[675][1]=1;}
			satisfiable[675][1]=satisfiable[675][1] & ((x[675] ^ 1) | (x[ unit675_1[i][0] ] ^ unit675_1[i][1]) |(x[ unit675_1[i][2] ] ^ unit675_1[i][3]));
			}
		if(X_contra>0) L[675][1]=2;
		}
	//Check all rules of unit[676][0]
	L[676][0] = LargeX[676][1]>0 ? 1 : 0;
	satisfiable[676][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit676_0[i][0] ][ unit676_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit676_0[i][2] ][ unit676_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit676_0[i][4] ][ unit676_0[i][5] ] >0);
		X_contra = ( LargeX[676][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit676_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[676][1]=0; L[676][0]=1;}
			satisfiable[676][0]=satisfiable[676][0] & ((x[676] ^ 0) | (x[ unit676_0[i][0] ] ^ unit676_0[i][1]) |(x[ unit676_0[i][2] ] ^ unit676_0[i][3]));
			}
		if(X_contra>0) L[676][0]=2;
		}
	//Check all rules of unit[676][1]
	L[676][1] = LargeX[676][0]>0 ? 1 : 0;
	satisfiable[676][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit676_1[i][0] ][ unit676_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit676_1[i][2] ][ unit676_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit676_1[i][4] ][ unit676_1[i][5] ] >0);
		X_contra = ( LargeX[676][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit676_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[676][0]=0; L[676][1]=1;}
			satisfiable[676][1]=satisfiable[676][1] & ((x[676] ^ 1) | (x[ unit676_1[i][0] ] ^ unit676_1[i][1]) |(x[ unit676_1[i][2] ] ^ unit676_1[i][3]));
			}
		if(X_contra>0) L[676][1]=2;
		}
	//Check all rules of unit[677][0]
	L[677][0] = LargeX[677][1]>0 ? 1 : 0;
	satisfiable[677][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit677_0[i][0] ][ unit677_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit677_0[i][2] ][ unit677_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit677_0[i][4] ][ unit677_0[i][5] ] >0);
		X_contra = ( LargeX[677][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit677_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[677][1]=0; L[677][0]=1;}
			satisfiable[677][0]=satisfiable[677][0] & ((x[677] ^ 0) | (x[ unit677_0[i][0] ] ^ unit677_0[i][1]) |(x[ unit677_0[i][2] ] ^ unit677_0[i][3]));
			}
		if(X_contra>0) L[677][0]=2;
		}
	//Check all rules of unit[677][1]
	L[677][1] = LargeX[677][0]>0 ? 1 : 0;
	satisfiable[677][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit677_1[i][0] ][ unit677_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit677_1[i][2] ][ unit677_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit677_1[i][4] ][ unit677_1[i][5] ] >0);
		X_contra = ( LargeX[677][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit677_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[677][0]=0; L[677][1]=1;}
			satisfiable[677][1]=satisfiable[677][1] & ((x[677] ^ 1) | (x[ unit677_1[i][0] ] ^ unit677_1[i][1]) |(x[ unit677_1[i][2] ] ^ unit677_1[i][3]));
			}
		if(X_contra>0) L[677][1]=2;
		}
	//Check all rules of unit[678][0]
	L[678][0] = LargeX[678][1]>0 ? 1 : 0;
	satisfiable[678][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit678_0[i][0] ][ unit678_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit678_0[i][2] ][ unit678_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit678_0[i][4] ][ unit678_0[i][5] ] >0);
		X_contra = ( LargeX[678][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit678_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[678][1]=0; L[678][0]=1;}
			satisfiable[678][0]=satisfiable[678][0] & ((x[678] ^ 0) | (x[ unit678_0[i][0] ] ^ unit678_0[i][1]) |(x[ unit678_0[i][2] ] ^ unit678_0[i][3]));
			}
		if(X_contra>0) L[678][0]=2;
		}
	//Check all rules of unit[678][1]
	L[678][1] = LargeX[678][0]>0 ? 1 : 0;
	satisfiable[678][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit678_1[i][0] ][ unit678_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit678_1[i][2] ][ unit678_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit678_1[i][4] ][ unit678_1[i][5] ] >0);
		X_contra = ( LargeX[678][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit678_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[678][0]=0; L[678][1]=1;}
			satisfiable[678][1]=satisfiable[678][1] & ((x[678] ^ 1) | (x[ unit678_1[i][0] ] ^ unit678_1[i][1]) |(x[ unit678_1[i][2] ] ^ unit678_1[i][3]));
			}
		if(X_contra>0) L[678][1]=2;
		}
	//Check all rules of unit[679][0]
	L[679][0] = LargeX[679][1]>0 ? 1 : 0;
	satisfiable[679][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit679_0[i][0] ][ unit679_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit679_0[i][2] ][ unit679_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit679_0[i][4] ][ unit679_0[i][5] ] >0);
		X_contra = ( LargeX[679][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit679_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[679][1]=0; L[679][0]=1;}
			satisfiable[679][0]=satisfiable[679][0] & ((x[679] ^ 0) | (x[ unit679_0[i][0] ] ^ unit679_0[i][1]) |(x[ unit679_0[i][2] ] ^ unit679_0[i][3]));
			}
		if(X_contra>0) L[679][0]=2;
		}
	//Check all rules of unit[679][1]
	L[679][1] = LargeX[679][0]>0 ? 1 : 0;
	satisfiable[679][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit679_1[i][0] ][ unit679_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit679_1[i][2] ][ unit679_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit679_1[i][4] ][ unit679_1[i][5] ] >0);
		X_contra = ( LargeX[679][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit679_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[679][0]=0; L[679][1]=1;}
			satisfiable[679][1]=satisfiable[679][1] & ((x[679] ^ 1) | (x[ unit679_1[i][0] ] ^ unit679_1[i][1]) |(x[ unit679_1[i][2] ] ^ unit679_1[i][3]));
			}
		if(X_contra>0) L[679][1]=2;
		}
	//Check all rules of unit[680][0]
	L[680][0] = LargeX[680][1]>0 ? 1 : 0;
	satisfiable[680][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit680_0[i][0] ][ unit680_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit680_0[i][2] ][ unit680_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit680_0[i][4] ][ unit680_0[i][5] ] >0);
		X_contra = ( LargeX[680][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit680_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[680][1]=0; L[680][0]=1;}
			satisfiable[680][0]=satisfiable[680][0] & ((x[680] ^ 0) | (x[ unit680_0[i][0] ] ^ unit680_0[i][1]) |(x[ unit680_0[i][2] ] ^ unit680_0[i][3]));
			}
		if(X_contra>0) L[680][0]=2;
		}
	//Check all rules of unit[680][1]
	L[680][1] = LargeX[680][0]>0 ? 1 : 0;
	satisfiable[680][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit680_1[i][0] ][ unit680_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit680_1[i][2] ][ unit680_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit680_1[i][4] ][ unit680_1[i][5] ] >0);
		X_contra = ( LargeX[680][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit680_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[680][0]=0; L[680][1]=1;}
			satisfiable[680][1]=satisfiable[680][1] & ((x[680] ^ 1) | (x[ unit680_1[i][0] ] ^ unit680_1[i][1]) |(x[ unit680_1[i][2] ] ^ unit680_1[i][3]));
			}
		if(X_contra>0) L[680][1]=2;
		}
	//Check all rules of unit[681][0]
	L[681][0] = LargeX[681][1]>0 ? 1 : 0;
	satisfiable[681][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit681_0[i][0] ][ unit681_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit681_0[i][2] ][ unit681_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit681_0[i][4] ][ unit681_0[i][5] ] >0);
		X_contra = ( LargeX[681][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit681_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[681][1]=0; L[681][0]=1;}
			satisfiable[681][0]=satisfiable[681][0] & ((x[681] ^ 0) | (x[ unit681_0[i][0] ] ^ unit681_0[i][1]) |(x[ unit681_0[i][2] ] ^ unit681_0[i][3]));
			}
		if(X_contra>0) L[681][0]=2;
		}
	//Check all rules of unit[681][1]
	L[681][1] = LargeX[681][0]>0 ? 1 : 0;
	satisfiable[681][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit681_1[i][0] ][ unit681_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit681_1[i][2] ][ unit681_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit681_1[i][4] ][ unit681_1[i][5] ] >0);
		X_contra = ( LargeX[681][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit681_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[681][0]=0; L[681][1]=1;}
			satisfiable[681][1]=satisfiable[681][1] & ((x[681] ^ 1) | (x[ unit681_1[i][0] ] ^ unit681_1[i][1]) |(x[ unit681_1[i][2] ] ^ unit681_1[i][3]));
			}
		if(X_contra>0) L[681][1]=2;
		}
	//Check all rules of unit[682][0]
	L[682][0] = LargeX[682][1]>0 ? 1 : 0;
	satisfiable[682][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit682_0[i][0] ][ unit682_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit682_0[i][2] ][ unit682_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit682_0[i][4] ][ unit682_0[i][5] ] >0);
		X_contra = ( LargeX[682][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit682_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[682][1]=0; L[682][0]=1;}
			satisfiable[682][0]=satisfiable[682][0] & ((x[682] ^ 0) | (x[ unit682_0[i][0] ] ^ unit682_0[i][1]) |(x[ unit682_0[i][2] ] ^ unit682_0[i][3]));
			}
		if(X_contra>0) L[682][0]=2;
		}
	//Check all rules of unit[682][1]
	L[682][1] = LargeX[682][0]>0 ? 1 : 0;
	satisfiable[682][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit682_1[i][0] ][ unit682_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit682_1[i][2] ][ unit682_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit682_1[i][4] ][ unit682_1[i][5] ] >0);
		X_contra = ( LargeX[682][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit682_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[682][0]=0; L[682][1]=1;}
			satisfiable[682][1]=satisfiable[682][1] & ((x[682] ^ 1) | (x[ unit682_1[i][0] ] ^ unit682_1[i][1]) |(x[ unit682_1[i][2] ] ^ unit682_1[i][3]));
			}
		if(X_contra>0) L[682][1]=2;
		}
	//Check all rules of unit[683][0]
	L[683][0] = LargeX[683][1]>0 ? 1 : 0;
	satisfiable[683][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit683_0[i][0] ][ unit683_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit683_0[i][2] ][ unit683_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit683_0[i][4] ][ unit683_0[i][5] ] >0);
		X_contra = ( LargeX[683][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit683_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[683][1]=0; L[683][0]=1;}
			satisfiable[683][0]=satisfiable[683][0] & ((x[683] ^ 0) | (x[ unit683_0[i][0] ] ^ unit683_0[i][1]) |(x[ unit683_0[i][2] ] ^ unit683_0[i][3]));
			}
		if(X_contra>0) L[683][0]=2;
		}
	//Check all rules of unit[683][1]
	L[683][1] = LargeX[683][0]>0 ? 1 : 0;
	satisfiable[683][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit683_1[i][0] ][ unit683_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit683_1[i][2] ][ unit683_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit683_1[i][4] ][ unit683_1[i][5] ] >0);
		X_contra = ( LargeX[683][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit683_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[683][0]=0; L[683][1]=1;}
			satisfiable[683][1]=satisfiable[683][1] & ((x[683] ^ 1) | (x[ unit683_1[i][0] ] ^ unit683_1[i][1]) |(x[ unit683_1[i][2] ] ^ unit683_1[i][3]));
			}
		if(X_contra>0) L[683][1]=2;
		}
	//Check all rules of unit[684][0]
	L[684][0] = LargeX[684][1]>0 ? 1 : 0;
	satisfiable[684][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit684_0[i][0] ][ unit684_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit684_0[i][2] ][ unit684_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit684_0[i][4] ][ unit684_0[i][5] ] >0);
		X_contra = ( LargeX[684][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit684_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[684][1]=0; L[684][0]=1;}
			satisfiable[684][0]=satisfiable[684][0] & ((x[684] ^ 0) | (x[ unit684_0[i][0] ] ^ unit684_0[i][1]) |(x[ unit684_0[i][2] ] ^ unit684_0[i][3]));
			}
		if(X_contra>0) L[684][0]=2;
		}
	//Check all rules of unit[684][1]
	L[684][1] = LargeX[684][0]>0 ? 1 : 0;
	satisfiable[684][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit684_1[i][0] ][ unit684_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit684_1[i][2] ][ unit684_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit684_1[i][4] ][ unit684_1[i][5] ] >0);
		X_contra = ( LargeX[684][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit684_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[684][0]=0; L[684][1]=1;}
			satisfiable[684][1]=satisfiable[684][1] & ((x[684] ^ 1) | (x[ unit684_1[i][0] ] ^ unit684_1[i][1]) |(x[ unit684_1[i][2] ] ^ unit684_1[i][3]));
			}
		if(X_contra>0) L[684][1]=2;
		}
	//Check all rules of unit[685][0]
	L[685][0] = LargeX[685][1]>0 ? 1 : 0;
	satisfiable[685][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit685_0[i][0] ][ unit685_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit685_0[i][2] ][ unit685_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit685_0[i][4] ][ unit685_0[i][5] ] >0);
		X_contra = ( LargeX[685][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit685_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[685][1]=0; L[685][0]=1;}
			satisfiable[685][0]=satisfiable[685][0] & ((x[685] ^ 0) | (x[ unit685_0[i][0] ] ^ unit685_0[i][1]) |(x[ unit685_0[i][2] ] ^ unit685_0[i][3]));
			}
		if(X_contra>0) L[685][0]=2;
		}
	//Check all rules of unit[685][1]
	L[685][1] = LargeX[685][0]>0 ? 1 : 0;
	satisfiable[685][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit685_1[i][0] ][ unit685_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit685_1[i][2] ][ unit685_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit685_1[i][4] ][ unit685_1[i][5] ] >0);
		X_contra = ( LargeX[685][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit685_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[685][0]=0; L[685][1]=1;}
			satisfiable[685][1]=satisfiable[685][1] & ((x[685] ^ 1) | (x[ unit685_1[i][0] ] ^ unit685_1[i][1]) |(x[ unit685_1[i][2] ] ^ unit685_1[i][3]));
			}
		if(X_contra>0) L[685][1]=2;
		}
	//Check all rules of unit[686][0]
	L[686][0] = LargeX[686][1]>0 ? 1 : 0;
	satisfiable[686][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit686_0[i][0] ][ unit686_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit686_0[i][2] ][ unit686_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit686_0[i][4] ][ unit686_0[i][5] ] >0);
		X_contra = ( LargeX[686][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit686_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[686][1]=0; L[686][0]=1;}
			satisfiable[686][0]=satisfiable[686][0] & ((x[686] ^ 0) | (x[ unit686_0[i][0] ] ^ unit686_0[i][1]) |(x[ unit686_0[i][2] ] ^ unit686_0[i][3]));
			}
		if(X_contra>0) L[686][0]=2;
		}
	//Check all rules of unit[686][1]
	L[686][1] = LargeX[686][0]>0 ? 1 : 0;
	satisfiable[686][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit686_1[i][0] ][ unit686_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit686_1[i][2] ][ unit686_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit686_1[i][4] ][ unit686_1[i][5] ] >0);
		X_contra = ( LargeX[686][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit686_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[686][0]=0; L[686][1]=1;}
			satisfiable[686][1]=satisfiable[686][1] & ((x[686] ^ 1) | (x[ unit686_1[i][0] ] ^ unit686_1[i][1]) |(x[ unit686_1[i][2] ] ^ unit686_1[i][3]));
			}
		if(X_contra>0) L[686][1]=2;
		}
	//Check all rules of unit[687][0]
	L[687][0] = LargeX[687][1]>0 ? 1 : 0;
	satisfiable[687][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit687_0[i][0] ][ unit687_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit687_0[i][2] ][ unit687_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit687_0[i][4] ][ unit687_0[i][5] ] >0);
		X_contra = ( LargeX[687][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit687_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[687][1]=0; L[687][0]=1;}
			satisfiable[687][0]=satisfiable[687][0] & ((x[687] ^ 0) | (x[ unit687_0[i][0] ] ^ unit687_0[i][1]) |(x[ unit687_0[i][2] ] ^ unit687_0[i][3]));
			}
		if(X_contra>0) L[687][0]=2;
		}
	//Check all rules of unit[687][1]
	L[687][1] = LargeX[687][0]>0 ? 1 : 0;
	satisfiable[687][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit687_1[i][0] ][ unit687_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit687_1[i][2] ][ unit687_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit687_1[i][4] ][ unit687_1[i][5] ] >0);
		X_contra = ( LargeX[687][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit687_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[687][0]=0; L[687][1]=1;}
			satisfiable[687][1]=satisfiable[687][1] & ((x[687] ^ 1) | (x[ unit687_1[i][0] ] ^ unit687_1[i][1]) |(x[ unit687_1[i][2] ] ^ unit687_1[i][3]));
			}
		if(X_contra>0) L[687][1]=2;
		}
	//Check all rules of unit[688][0]
	L[688][0] = LargeX[688][1]>0 ? 1 : 0;
	satisfiable[688][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit688_0[i][0] ][ unit688_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit688_0[i][2] ][ unit688_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit688_0[i][4] ][ unit688_0[i][5] ] >0);
		X_contra = ( LargeX[688][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit688_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[688][1]=0; L[688][0]=1;}
			satisfiable[688][0]=satisfiable[688][0] & ((x[688] ^ 0) | (x[ unit688_0[i][0] ] ^ unit688_0[i][1]) |(x[ unit688_0[i][2] ] ^ unit688_0[i][3]));
			}
		if(X_contra>0) L[688][0]=2;
		}
	//Check all rules of unit[688][1]
	L[688][1] = LargeX[688][0]>0 ? 1 : 0;
	satisfiable[688][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit688_1[i][0] ][ unit688_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit688_1[i][2] ][ unit688_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit688_1[i][4] ][ unit688_1[i][5] ] >0);
		X_contra = ( LargeX[688][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit688_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[688][0]=0; L[688][1]=1;}
			satisfiable[688][1]=satisfiable[688][1] & ((x[688] ^ 1) | (x[ unit688_1[i][0] ] ^ unit688_1[i][1]) |(x[ unit688_1[i][2] ] ^ unit688_1[i][3]));
			}
		if(X_contra>0) L[688][1]=2;
		}
	//Check all rules of unit[689][0]
	L[689][0] = LargeX[689][1]>0 ? 1 : 0;
	satisfiable[689][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit689_0[i][0] ][ unit689_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit689_0[i][2] ][ unit689_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit689_0[i][4] ][ unit689_0[i][5] ] >0);
		X_contra = ( LargeX[689][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit689_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[689][1]=0; L[689][0]=1;}
			satisfiable[689][0]=satisfiable[689][0] & ((x[689] ^ 0) | (x[ unit689_0[i][0] ] ^ unit689_0[i][1]) |(x[ unit689_0[i][2] ] ^ unit689_0[i][3]));
			}
		if(X_contra>0) L[689][0]=2;
		}
	//Check all rules of unit[689][1]
	L[689][1] = LargeX[689][0]>0 ? 1 : 0;
	satisfiable[689][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit689_1[i][0] ][ unit689_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit689_1[i][2] ][ unit689_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit689_1[i][4] ][ unit689_1[i][5] ] >0);
		X_contra = ( LargeX[689][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit689_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[689][0]=0; L[689][1]=1;}
			satisfiable[689][1]=satisfiable[689][1] & ((x[689] ^ 1) | (x[ unit689_1[i][0] ] ^ unit689_1[i][1]) |(x[ unit689_1[i][2] ] ^ unit689_1[i][3]));
			}
		if(X_contra>0) L[689][1]=2;
		}
	//Check all rules of unit[690][0]
	L[690][0] = LargeX[690][1]>0 ? 1 : 0;
	satisfiable[690][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit690_0[i][0] ][ unit690_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit690_0[i][2] ][ unit690_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit690_0[i][4] ][ unit690_0[i][5] ] >0);
		X_contra = ( LargeX[690][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit690_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[690][1]=0; L[690][0]=1;}
			satisfiable[690][0]=satisfiable[690][0] & ((x[690] ^ 0) | (x[ unit690_0[i][0] ] ^ unit690_0[i][1]) |(x[ unit690_0[i][2] ] ^ unit690_0[i][3]));
			}
		if(X_contra>0) L[690][0]=2;
		}
	//Check all rules of unit[690][1]
	L[690][1] = LargeX[690][0]>0 ? 1 : 0;
	satisfiable[690][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit690_1[i][0] ][ unit690_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit690_1[i][2] ][ unit690_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit690_1[i][4] ][ unit690_1[i][5] ] >0);
		X_contra = ( LargeX[690][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit690_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[690][0]=0; L[690][1]=1;}
			satisfiable[690][1]=satisfiable[690][1] & ((x[690] ^ 1) | (x[ unit690_1[i][0] ] ^ unit690_1[i][1]) |(x[ unit690_1[i][2] ] ^ unit690_1[i][3]));
			}
		if(X_contra>0) L[690][1]=2;
		}
	//Check all rules of unit[691][0]
	L[691][0] = LargeX[691][1]>0 ? 1 : 0;
	satisfiable[691][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit691_0[i][0] ][ unit691_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit691_0[i][2] ][ unit691_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit691_0[i][4] ][ unit691_0[i][5] ] >0);
		X_contra = ( LargeX[691][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit691_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[691][1]=0; L[691][0]=1;}
			satisfiable[691][0]=satisfiable[691][0] & ((x[691] ^ 0) | (x[ unit691_0[i][0] ] ^ unit691_0[i][1]) |(x[ unit691_0[i][2] ] ^ unit691_0[i][3]));
			}
		if(X_contra>0) L[691][0]=2;
		}
	//Check all rules of unit[691][1]
	L[691][1] = LargeX[691][0]>0 ? 1 : 0;
	satisfiable[691][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit691_1[i][0] ][ unit691_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit691_1[i][2] ][ unit691_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit691_1[i][4] ][ unit691_1[i][5] ] >0);
		X_contra = ( LargeX[691][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit691_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[691][0]=0; L[691][1]=1;}
			satisfiable[691][1]=satisfiable[691][1] & ((x[691] ^ 1) | (x[ unit691_1[i][0] ] ^ unit691_1[i][1]) |(x[ unit691_1[i][2] ] ^ unit691_1[i][3]));
			}
		if(X_contra>0) L[691][1]=2;
		}
	//Check all rules of unit[692][0]
	L[692][0] = LargeX[692][1]>0 ? 1 : 0;
	satisfiable[692][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit692_0[i][0] ][ unit692_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit692_0[i][2] ][ unit692_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit692_0[i][4] ][ unit692_0[i][5] ] >0);
		X_contra = ( LargeX[692][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit692_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[692][1]=0; L[692][0]=1;}
			satisfiable[692][0]=satisfiable[692][0] & ((x[692] ^ 0) | (x[ unit692_0[i][0] ] ^ unit692_0[i][1]) |(x[ unit692_0[i][2] ] ^ unit692_0[i][3]));
			}
		if(X_contra>0) L[692][0]=2;
		}
	//Check all rules of unit[692][1]
	L[692][1] = LargeX[692][0]>0 ? 1 : 0;
	satisfiable[692][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit692_1[i][0] ][ unit692_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit692_1[i][2] ][ unit692_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit692_1[i][4] ][ unit692_1[i][5] ] >0);
		X_contra = ( LargeX[692][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit692_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[692][0]=0; L[692][1]=1;}
			satisfiable[692][1]=satisfiable[692][1] & ((x[692] ^ 1) | (x[ unit692_1[i][0] ] ^ unit692_1[i][1]) |(x[ unit692_1[i][2] ] ^ unit692_1[i][3]));
			}
		if(X_contra>0) L[692][1]=2;
		}
	//Check all rules of unit[693][0]
	L[693][0] = LargeX[693][1]>0 ? 1 : 0;
	satisfiable[693][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit693_0[i][0] ][ unit693_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit693_0[i][2] ][ unit693_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit693_0[i][4] ][ unit693_0[i][5] ] >0);
		X_contra = ( LargeX[693][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit693_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[693][1]=0; L[693][0]=1;}
			satisfiable[693][0]=satisfiable[693][0] & ((x[693] ^ 0) | (x[ unit693_0[i][0] ] ^ unit693_0[i][1]) |(x[ unit693_0[i][2] ] ^ unit693_0[i][3]));
			}
		if(X_contra>0) L[693][0]=2;
		}
	//Check all rules of unit[693][1]
	L[693][1] = LargeX[693][0]>0 ? 1 : 0;
	satisfiable[693][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit693_1[i][0] ][ unit693_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit693_1[i][2] ][ unit693_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit693_1[i][4] ][ unit693_1[i][5] ] >0);
		X_contra = ( LargeX[693][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit693_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[693][0]=0; L[693][1]=1;}
			satisfiable[693][1]=satisfiable[693][1] & ((x[693] ^ 1) | (x[ unit693_1[i][0] ] ^ unit693_1[i][1]) |(x[ unit693_1[i][2] ] ^ unit693_1[i][3]));
			}
		if(X_contra>0) L[693][1]=2;
		}
	//Check all rules of unit[694][0]
	L[694][0] = LargeX[694][1]>0 ? 1 : 0;
	satisfiable[694][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit694_0[i][0] ][ unit694_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit694_0[i][2] ][ unit694_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit694_0[i][4] ][ unit694_0[i][5] ] >0);
		X_contra = ( LargeX[694][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit694_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[694][1]=0; L[694][0]=1;}
			satisfiable[694][0]=satisfiable[694][0] & ((x[694] ^ 0) | (x[ unit694_0[i][0] ] ^ unit694_0[i][1]) |(x[ unit694_0[i][2] ] ^ unit694_0[i][3]));
			}
		if(X_contra>0) L[694][0]=2;
		}
	//Check all rules of unit[694][1]
	L[694][1] = LargeX[694][0]>0 ? 1 : 0;
	satisfiable[694][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit694_1[i][0] ][ unit694_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit694_1[i][2] ][ unit694_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit694_1[i][4] ][ unit694_1[i][5] ] >0);
		X_contra = ( LargeX[694][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit694_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[694][0]=0; L[694][1]=1;}
			satisfiable[694][1]=satisfiable[694][1] & ((x[694] ^ 1) | (x[ unit694_1[i][0] ] ^ unit694_1[i][1]) |(x[ unit694_1[i][2] ] ^ unit694_1[i][3]));
			}
		if(X_contra>0) L[694][1]=2;
		}
	//Check all rules of unit[695][0]
	L[695][0] = LargeX[695][1]>0 ? 1 : 0;
	satisfiable[695][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit695_0[i][0] ][ unit695_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit695_0[i][2] ][ unit695_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit695_0[i][4] ][ unit695_0[i][5] ] >0);
		X_contra = ( LargeX[695][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit695_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[695][1]=0; L[695][0]=1;}
			satisfiable[695][0]=satisfiable[695][0] & ((x[695] ^ 0) | (x[ unit695_0[i][0] ] ^ unit695_0[i][1]) |(x[ unit695_0[i][2] ] ^ unit695_0[i][3]));
			}
		if(X_contra>0) L[695][0]=2;
		}
	//Check all rules of unit[695][1]
	L[695][1] = LargeX[695][0]>0 ? 1 : 0;
	satisfiable[695][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit695_1[i][0] ][ unit695_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit695_1[i][2] ][ unit695_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit695_1[i][4] ][ unit695_1[i][5] ] >0);
		X_contra = ( LargeX[695][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit695_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[695][0]=0; L[695][1]=1;}
			satisfiable[695][1]=satisfiable[695][1] & ((x[695] ^ 1) | (x[ unit695_1[i][0] ] ^ unit695_1[i][1]) |(x[ unit695_1[i][2] ] ^ unit695_1[i][3]));
			}
		if(X_contra>0) L[695][1]=2;
		}
	//Check all rules of unit[696][0]
	L[696][0] = LargeX[696][1]>0 ? 1 : 0;
	satisfiable[696][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit696_0[i][0] ][ unit696_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit696_0[i][2] ][ unit696_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit696_0[i][4] ][ unit696_0[i][5] ] >0);
		X_contra = ( LargeX[696][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit696_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[696][1]=0; L[696][0]=1;}
			satisfiable[696][0]=satisfiable[696][0] & ((x[696] ^ 0) | (x[ unit696_0[i][0] ] ^ unit696_0[i][1]) |(x[ unit696_0[i][2] ] ^ unit696_0[i][3]));
			}
		if(X_contra>0) L[696][0]=2;
		}
	//Check all rules of unit[696][1]
	L[696][1] = LargeX[696][0]>0 ? 1 : 0;
	satisfiable[696][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit696_1[i][0] ][ unit696_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit696_1[i][2] ][ unit696_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit696_1[i][4] ][ unit696_1[i][5] ] >0);
		X_contra = ( LargeX[696][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit696_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[696][0]=0; L[696][1]=1;}
			satisfiable[696][1]=satisfiable[696][1] & ((x[696] ^ 1) | (x[ unit696_1[i][0] ] ^ unit696_1[i][1]) |(x[ unit696_1[i][2] ] ^ unit696_1[i][3]));
			}
		if(X_contra>0) L[696][1]=2;
		}
	//Check all rules of unit[697][0]
	L[697][0] = LargeX[697][1]>0 ? 1 : 0;
	satisfiable[697][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit697_0[i][0] ][ unit697_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit697_0[i][2] ][ unit697_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit697_0[i][4] ][ unit697_0[i][5] ] >0);
		X_contra = ( LargeX[697][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit697_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[697][1]=0; L[697][0]=1;}
			satisfiable[697][0]=satisfiable[697][0] & ((x[697] ^ 0) | (x[ unit697_0[i][0] ] ^ unit697_0[i][1]) |(x[ unit697_0[i][2] ] ^ unit697_0[i][3]));
			}
		if(X_contra>0) L[697][0]=2;
		}
	//Check all rules of unit[697][1]
	L[697][1] = LargeX[697][0]>0 ? 1 : 0;
	satisfiable[697][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit697_1[i][0] ][ unit697_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit697_1[i][2] ][ unit697_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit697_1[i][4] ][ unit697_1[i][5] ] >0);
		X_contra = ( LargeX[697][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit697_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[697][0]=0; L[697][1]=1;}
			satisfiable[697][1]=satisfiable[697][1] & ((x[697] ^ 1) | (x[ unit697_1[i][0] ] ^ unit697_1[i][1]) |(x[ unit697_1[i][2] ] ^ unit697_1[i][3]));
			}
		if(X_contra>0) L[697][1]=2;
		}
	//Check all rules of unit[698][0]
	L[698][0] = LargeX[698][1]>0 ? 1 : 0;
	satisfiable[698][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit698_0[i][0] ][ unit698_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit698_0[i][2] ][ unit698_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit698_0[i][4] ][ unit698_0[i][5] ] >0);
		X_contra = ( LargeX[698][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit698_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[698][1]=0; L[698][0]=1;}
			satisfiable[698][0]=satisfiable[698][0] & ((x[698] ^ 0) | (x[ unit698_0[i][0] ] ^ unit698_0[i][1]) |(x[ unit698_0[i][2] ] ^ unit698_0[i][3]));
			}
		if(X_contra>0) L[698][0]=2;
		}
	//Check all rules of unit[698][1]
	L[698][1] = LargeX[698][0]>0 ? 1 : 0;
	satisfiable[698][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit698_1[i][0] ][ unit698_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit698_1[i][2] ][ unit698_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit698_1[i][4] ][ unit698_1[i][5] ] >0);
		X_contra = ( LargeX[698][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit698_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[698][0]=0; L[698][1]=1;}
			satisfiable[698][1]=satisfiable[698][1] & ((x[698] ^ 1) | (x[ unit698_1[i][0] ] ^ unit698_1[i][1]) |(x[ unit698_1[i][2] ] ^ unit698_1[i][3]));
			}
		if(X_contra>0) L[698][1]=2;
		}
	//Check all rules of unit[699][0]
	L[699][0] = LargeX[699][1]>0 ? 1 : 0;
	satisfiable[699][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit699_0[i][0] ][ unit699_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit699_0[i][2] ][ unit699_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit699_0[i][4] ][ unit699_0[i][5] ] >0);
		X_contra = ( LargeX[699][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit699_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[699][1]=0; L[699][0]=1;}
			satisfiable[699][0]=satisfiable[699][0] & ((x[699] ^ 0) | (x[ unit699_0[i][0] ] ^ unit699_0[i][1]) |(x[ unit699_0[i][2] ] ^ unit699_0[i][3]));
			}
		if(X_contra>0) L[699][0]=2;
		}
	//Check all rules of unit[699][1]
	L[699][1] = LargeX[699][0]>0 ? 1 : 0;
	satisfiable[699][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit699_1[i][0] ][ unit699_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit699_1[i][2] ][ unit699_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit699_1[i][4] ][ unit699_1[i][5] ] >0);
		X_contra = ( LargeX[699][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit699_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[699][0]=0; L[699][1]=1;}
			satisfiable[699][1]=satisfiable[699][1] & ((x[699] ^ 1) | (x[ unit699_1[i][0] ] ^ unit699_1[i][1]) |(x[ unit699_1[i][2] ] ^ unit699_1[i][3]));
			}
		if(X_contra>0) L[699][1]=2;
		}
	//Check all rules of unit[700][0]
	L[700][0] = LargeX[700][1]>0 ? 1 : 0;
	satisfiable[700][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit700_0[i][0] ][ unit700_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit700_0[i][2] ][ unit700_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit700_0[i][4] ][ unit700_0[i][5] ] >0);
		X_contra = ( LargeX[700][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit700_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[700][1]=0; L[700][0]=1;}
			satisfiable[700][0]=satisfiable[700][0] & ((x[700] ^ 0) | (x[ unit700_0[i][0] ] ^ unit700_0[i][1]) |(x[ unit700_0[i][2] ] ^ unit700_0[i][3]));
			}
		if(X_contra>0) L[700][0]=2;
		}
	//Check all rules of unit[700][1]
	L[700][1] = LargeX[700][0]>0 ? 1 : 0;
	satisfiable[700][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit700_1[i][0] ][ unit700_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit700_1[i][2] ][ unit700_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit700_1[i][4] ][ unit700_1[i][5] ] >0);
		X_contra = ( LargeX[700][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit700_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[700][0]=0; L[700][1]=1;}
			satisfiable[700][1]=satisfiable[700][1] & ((x[700] ^ 1) | (x[ unit700_1[i][0] ] ^ unit700_1[i][1]) |(x[ unit700_1[i][2] ] ^ unit700_1[i][3]));
			}
		if(X_contra>0) L[700][1]=2;
		}
	//Check all rules of unit[701][0]
	L[701][0] = LargeX[701][1]>0 ? 1 : 0;
	satisfiable[701][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit701_0[i][0] ][ unit701_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit701_0[i][2] ][ unit701_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit701_0[i][4] ][ unit701_0[i][5] ] >0);
		X_contra = ( LargeX[701][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit701_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[701][1]=0; L[701][0]=1;}
			satisfiable[701][0]=satisfiable[701][0] & ((x[701] ^ 0) | (x[ unit701_0[i][0] ] ^ unit701_0[i][1]) |(x[ unit701_0[i][2] ] ^ unit701_0[i][3]));
			}
		if(X_contra>0) L[701][0]=2;
		}
	//Check all rules of unit[701][1]
	L[701][1] = LargeX[701][0]>0 ? 1 : 0;
	satisfiable[701][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit701_1[i][0] ][ unit701_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit701_1[i][2] ][ unit701_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit701_1[i][4] ][ unit701_1[i][5] ] >0);
		X_contra = ( LargeX[701][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit701_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[701][0]=0; L[701][1]=1;}
			satisfiable[701][1]=satisfiable[701][1] & ((x[701] ^ 1) | (x[ unit701_1[i][0] ] ^ unit701_1[i][1]) |(x[ unit701_1[i][2] ] ^ unit701_1[i][3]));
			}
		if(X_contra>0) L[701][1]=2;
		}
	//Check all rules of unit[702][0]
	L[702][0] = LargeX[702][1]>0 ? 1 : 0;
	satisfiable[702][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit702_0[i][0] ][ unit702_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit702_0[i][2] ][ unit702_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit702_0[i][4] ][ unit702_0[i][5] ] >0);
		X_contra = ( LargeX[702][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit702_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[702][1]=0; L[702][0]=1;}
			satisfiable[702][0]=satisfiable[702][0] & ((x[702] ^ 0) | (x[ unit702_0[i][0] ] ^ unit702_0[i][1]) |(x[ unit702_0[i][2] ] ^ unit702_0[i][3]));
			}
		if(X_contra>0) L[702][0]=2;
		}
	//Check all rules of unit[702][1]
	L[702][1] = LargeX[702][0]>0 ? 1 : 0;
	satisfiable[702][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit702_1[i][0] ][ unit702_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit702_1[i][2] ][ unit702_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit702_1[i][4] ][ unit702_1[i][5] ] >0);
		X_contra = ( LargeX[702][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit702_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[702][0]=0; L[702][1]=1;}
			satisfiable[702][1]=satisfiable[702][1] & ((x[702] ^ 1) | (x[ unit702_1[i][0] ] ^ unit702_1[i][1]) |(x[ unit702_1[i][2] ] ^ unit702_1[i][3]));
			}
		if(X_contra>0) L[702][1]=2;
		}
	//Check all rules of unit[703][0]
	L[703][0] = LargeX[703][1]>0 ? 1 : 0;
	satisfiable[703][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit703_0[i][0] ][ unit703_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit703_0[i][2] ][ unit703_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit703_0[i][4] ][ unit703_0[i][5] ] >0);
		X_contra = ( LargeX[703][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit703_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[703][1]=0; L[703][0]=1;}
			satisfiable[703][0]=satisfiable[703][0] & ((x[703] ^ 0) | (x[ unit703_0[i][0] ] ^ unit703_0[i][1]) |(x[ unit703_0[i][2] ] ^ unit703_0[i][3]));
			}
		if(X_contra>0) L[703][0]=2;
		}
	//Check all rules of unit[703][1]
	L[703][1] = LargeX[703][0]>0 ? 1 : 0;
	satisfiable[703][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit703_1[i][0] ][ unit703_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit703_1[i][2] ][ unit703_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit703_1[i][4] ][ unit703_1[i][5] ] >0);
		X_contra = ( LargeX[703][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit703_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[703][0]=0; L[703][1]=1;}
			satisfiable[703][1]=satisfiable[703][1] & ((x[703] ^ 1) | (x[ unit703_1[i][0] ] ^ unit703_1[i][1]) |(x[ unit703_1[i][2] ] ^ unit703_1[i][3]));
			}
		if(X_contra>0) L[703][1]=2;
		}
	//Check all rules of unit[704][0]
	L[704][0] = LargeX[704][1]>0 ? 1 : 0;
	satisfiable[704][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit704_0[i][0] ][ unit704_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit704_0[i][2] ][ unit704_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit704_0[i][4] ][ unit704_0[i][5] ] >0);
		X_contra = ( LargeX[704][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit704_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[704][1]=0; L[704][0]=1;}
			satisfiable[704][0]=satisfiable[704][0] & ((x[704] ^ 0) | (x[ unit704_0[i][0] ] ^ unit704_0[i][1]) |(x[ unit704_0[i][2] ] ^ unit704_0[i][3]));
			}
		if(X_contra>0) L[704][0]=2;
		}
	//Check all rules of unit[704][1]
	L[704][1] = LargeX[704][0]>0 ? 1 : 0;
	satisfiable[704][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit704_1[i][0] ][ unit704_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit704_1[i][2] ][ unit704_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit704_1[i][4] ][ unit704_1[i][5] ] >0);
		X_contra = ( LargeX[704][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit704_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[704][0]=0; L[704][1]=1;}
			satisfiable[704][1]=satisfiable[704][1] & ((x[704] ^ 1) | (x[ unit704_1[i][0] ] ^ unit704_1[i][1]) |(x[ unit704_1[i][2] ] ^ unit704_1[i][3]));
			}
		if(X_contra>0) L[704][1]=2;
		}
	//Check all rules of unit[705][0]
	L[705][0] = LargeX[705][1]>0 ? 1 : 0;
	satisfiable[705][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit705_0[i][0] ][ unit705_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit705_0[i][2] ][ unit705_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit705_0[i][4] ][ unit705_0[i][5] ] >0);
		X_contra = ( LargeX[705][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit705_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[705][1]=0; L[705][0]=1;}
			satisfiable[705][0]=satisfiable[705][0] & ((x[705] ^ 0) | (x[ unit705_0[i][0] ] ^ unit705_0[i][1]) |(x[ unit705_0[i][2] ] ^ unit705_0[i][3]));
			}
		if(X_contra>0) L[705][0]=2;
		}
	//Check all rules of unit[705][1]
	L[705][1] = LargeX[705][0]>0 ? 1 : 0;
	satisfiable[705][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit705_1[i][0] ][ unit705_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit705_1[i][2] ][ unit705_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit705_1[i][4] ][ unit705_1[i][5] ] >0);
		X_contra = ( LargeX[705][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit705_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[705][0]=0; L[705][1]=1;}
			satisfiable[705][1]=satisfiable[705][1] & ((x[705] ^ 1) | (x[ unit705_1[i][0] ] ^ unit705_1[i][1]) |(x[ unit705_1[i][2] ] ^ unit705_1[i][3]));
			}
		if(X_contra>0) L[705][1]=2;
		}
	//Check all rules of unit[706][0]
	L[706][0] = LargeX[706][1]>0 ? 1 : 0;
	satisfiable[706][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit706_0[i][0] ][ unit706_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit706_0[i][2] ][ unit706_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit706_0[i][4] ][ unit706_0[i][5] ] >0);
		X_contra = ( LargeX[706][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit706_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[706][1]=0; L[706][0]=1;}
			satisfiable[706][0]=satisfiable[706][0] & ((x[706] ^ 0) | (x[ unit706_0[i][0] ] ^ unit706_0[i][1]) |(x[ unit706_0[i][2] ] ^ unit706_0[i][3]));
			}
		if(X_contra>0) L[706][0]=2;
		}
	//Check all rules of unit[706][1]
	L[706][1] = LargeX[706][0]>0 ? 1 : 0;
	satisfiable[706][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit706_1[i][0] ][ unit706_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit706_1[i][2] ][ unit706_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit706_1[i][4] ][ unit706_1[i][5] ] >0);
		X_contra = ( LargeX[706][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit706_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[706][0]=0; L[706][1]=1;}
			satisfiable[706][1]=satisfiable[706][1] & ((x[706] ^ 1) | (x[ unit706_1[i][0] ] ^ unit706_1[i][1]) |(x[ unit706_1[i][2] ] ^ unit706_1[i][3]));
			}
		if(X_contra>0) L[706][1]=2;
		}
	//Check all rules of unit[707][0]
	L[707][0] = LargeX[707][1]>0 ? 1 : 0;
	satisfiable[707][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit707_0[i][0] ][ unit707_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit707_0[i][2] ][ unit707_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit707_0[i][4] ][ unit707_0[i][5] ] >0);
		X_contra = ( LargeX[707][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit707_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[707][1]=0; L[707][0]=1;}
			satisfiable[707][0]=satisfiable[707][0] & ((x[707] ^ 0) | (x[ unit707_0[i][0] ] ^ unit707_0[i][1]) |(x[ unit707_0[i][2] ] ^ unit707_0[i][3]));
			}
		if(X_contra>0) L[707][0]=2;
		}
	//Check all rules of unit[707][1]
	L[707][1] = LargeX[707][0]>0 ? 1 : 0;
	satisfiable[707][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit707_1[i][0] ][ unit707_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit707_1[i][2] ][ unit707_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit707_1[i][4] ][ unit707_1[i][5] ] >0);
		X_contra = ( LargeX[707][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit707_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[707][0]=0; L[707][1]=1;}
			satisfiable[707][1]=satisfiable[707][1] & ((x[707] ^ 1) | (x[ unit707_1[i][0] ] ^ unit707_1[i][1]) |(x[ unit707_1[i][2] ] ^ unit707_1[i][3]));
			}
		if(X_contra>0) L[707][1]=2;
		}
	//Check all rules of unit[708][0]
	L[708][0] = LargeX[708][1]>0 ? 1 : 0;
	satisfiable[708][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit708_0[i][0] ][ unit708_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit708_0[i][2] ][ unit708_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit708_0[i][4] ][ unit708_0[i][5] ] >0);
		X_contra = ( LargeX[708][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit708_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[708][1]=0; L[708][0]=1;}
			satisfiable[708][0]=satisfiable[708][0] & ((x[708] ^ 0) | (x[ unit708_0[i][0] ] ^ unit708_0[i][1]) |(x[ unit708_0[i][2] ] ^ unit708_0[i][3]));
			}
		if(X_contra>0) L[708][0]=2;
		}
	//Check all rules of unit[708][1]
	L[708][1] = LargeX[708][0]>0 ? 1 : 0;
	satisfiable[708][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit708_1[i][0] ][ unit708_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit708_1[i][2] ][ unit708_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit708_1[i][4] ][ unit708_1[i][5] ] >0);
		X_contra = ( LargeX[708][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit708_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[708][0]=0; L[708][1]=1;}
			satisfiable[708][1]=satisfiable[708][1] & ((x[708] ^ 1) | (x[ unit708_1[i][0] ] ^ unit708_1[i][1]) |(x[ unit708_1[i][2] ] ^ unit708_1[i][3]));
			}
		if(X_contra>0) L[708][1]=2;
		}
	//Check all rules of unit[709][0]
	L[709][0] = LargeX[709][1]>0 ? 1 : 0;
	satisfiable[709][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit709_0[i][0] ][ unit709_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit709_0[i][2] ][ unit709_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit709_0[i][4] ][ unit709_0[i][5] ] >0);
		X_contra = ( LargeX[709][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit709_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[709][1]=0; L[709][0]=1;}
			satisfiable[709][0]=satisfiable[709][0] & ((x[709] ^ 0) | (x[ unit709_0[i][0] ] ^ unit709_0[i][1]) |(x[ unit709_0[i][2] ] ^ unit709_0[i][3]));
			}
		if(X_contra>0) L[709][0]=2;
		}
	//Check all rules of unit[709][1]
	L[709][1] = LargeX[709][0]>0 ? 1 : 0;
	satisfiable[709][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit709_1[i][0] ][ unit709_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit709_1[i][2] ][ unit709_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit709_1[i][4] ][ unit709_1[i][5] ] >0);
		X_contra = ( LargeX[709][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit709_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[709][0]=0; L[709][1]=1;}
			satisfiable[709][1]=satisfiable[709][1] & ((x[709] ^ 1) | (x[ unit709_1[i][0] ] ^ unit709_1[i][1]) |(x[ unit709_1[i][2] ] ^ unit709_1[i][3]));
			}
		if(X_contra>0) L[709][1]=2;
		}
	//Check all rules of unit[710][0]
	L[710][0] = LargeX[710][1]>0 ? 1 : 0;
	satisfiable[710][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit710_0[i][0] ][ unit710_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit710_0[i][2] ][ unit710_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit710_0[i][4] ][ unit710_0[i][5] ] >0);
		X_contra = ( LargeX[710][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit710_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[710][1]=0; L[710][0]=1;}
			satisfiable[710][0]=satisfiable[710][0] & ((x[710] ^ 0) | (x[ unit710_0[i][0] ] ^ unit710_0[i][1]) |(x[ unit710_0[i][2] ] ^ unit710_0[i][3]));
			}
		if(X_contra>0) L[710][0]=2;
		}
	//Check all rules of unit[710][1]
	L[710][1] = LargeX[710][0]>0 ? 1 : 0;
	satisfiable[710][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit710_1[i][0] ][ unit710_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit710_1[i][2] ][ unit710_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit710_1[i][4] ][ unit710_1[i][5] ] >0);
		X_contra = ( LargeX[710][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit710_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[710][0]=0; L[710][1]=1;}
			satisfiable[710][1]=satisfiable[710][1] & ((x[710] ^ 1) | (x[ unit710_1[i][0] ] ^ unit710_1[i][1]) |(x[ unit710_1[i][2] ] ^ unit710_1[i][3]));
			}
		if(X_contra>0) L[710][1]=2;
		}
	//Check all rules of unit[711][0]
	L[711][0] = LargeX[711][1]>0 ? 1 : 0;
	satisfiable[711][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit711_0[i][0] ][ unit711_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit711_0[i][2] ][ unit711_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit711_0[i][4] ][ unit711_0[i][5] ] >0);
		X_contra = ( LargeX[711][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit711_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[711][1]=0; L[711][0]=1;}
			satisfiable[711][0]=satisfiable[711][0] & ((x[711] ^ 0) | (x[ unit711_0[i][0] ] ^ unit711_0[i][1]) |(x[ unit711_0[i][2] ] ^ unit711_0[i][3]));
			}
		if(X_contra>0) L[711][0]=2;
		}
	//Check all rules of unit[711][1]
	L[711][1] = LargeX[711][0]>0 ? 1 : 0;
	satisfiable[711][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit711_1[i][0] ][ unit711_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit711_1[i][2] ][ unit711_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit711_1[i][4] ][ unit711_1[i][5] ] >0);
		X_contra = ( LargeX[711][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit711_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[711][0]=0; L[711][1]=1;}
			satisfiable[711][1]=satisfiable[711][1] & ((x[711] ^ 1) | (x[ unit711_1[i][0] ] ^ unit711_1[i][1]) |(x[ unit711_1[i][2] ] ^ unit711_1[i][3]));
			}
		if(X_contra>0) L[711][1]=2;
		}
	//Check all rules of unit[712][0]
	L[712][0] = LargeX[712][1]>0 ? 1 : 0;
	satisfiable[712][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit712_0[i][0] ][ unit712_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit712_0[i][2] ][ unit712_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit712_0[i][4] ][ unit712_0[i][5] ] >0);
		X_contra = ( LargeX[712][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit712_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[712][1]=0; L[712][0]=1;}
			satisfiable[712][0]=satisfiable[712][0] & ((x[712] ^ 0) | (x[ unit712_0[i][0] ] ^ unit712_0[i][1]) |(x[ unit712_0[i][2] ] ^ unit712_0[i][3]));
			}
		if(X_contra>0) L[712][0]=2;
		}
	//Check all rules of unit[712][1]
	L[712][1] = LargeX[712][0]>0 ? 1 : 0;
	satisfiable[712][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit712_1[i][0] ][ unit712_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit712_1[i][2] ][ unit712_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit712_1[i][4] ][ unit712_1[i][5] ] >0);
		X_contra = ( LargeX[712][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit712_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[712][0]=0; L[712][1]=1;}
			satisfiable[712][1]=satisfiable[712][1] & ((x[712] ^ 1) | (x[ unit712_1[i][0] ] ^ unit712_1[i][1]) |(x[ unit712_1[i][2] ] ^ unit712_1[i][3]));
			}
		if(X_contra>0) L[712][1]=2;
		}
	//Check all rules of unit[713][0]
	L[713][0] = LargeX[713][1]>0 ? 1 : 0;
	satisfiable[713][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit713_0[i][0] ][ unit713_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit713_0[i][2] ][ unit713_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit713_0[i][4] ][ unit713_0[i][5] ] >0);
		X_contra = ( LargeX[713][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit713_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[713][1]=0; L[713][0]=1;}
			satisfiable[713][0]=satisfiable[713][0] & ((x[713] ^ 0) | (x[ unit713_0[i][0] ] ^ unit713_0[i][1]) |(x[ unit713_0[i][2] ] ^ unit713_0[i][3]));
			}
		if(X_contra>0) L[713][0]=2;
		}
	//Check all rules of unit[713][1]
	L[713][1] = LargeX[713][0]>0 ? 1 : 0;
	satisfiable[713][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit713_1[i][0] ][ unit713_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit713_1[i][2] ][ unit713_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit713_1[i][4] ][ unit713_1[i][5] ] >0);
		X_contra = ( LargeX[713][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit713_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[713][0]=0; L[713][1]=1;}
			satisfiable[713][1]=satisfiable[713][1] & ((x[713] ^ 1) | (x[ unit713_1[i][0] ] ^ unit713_1[i][1]) |(x[ unit713_1[i][2] ] ^ unit713_1[i][3]));
			}
		if(X_contra>0) L[713][1]=2;
		}
	//Check all rules of unit[714][0]
	L[714][0] = LargeX[714][1]>0 ? 1 : 0;
	satisfiable[714][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit714_0[i][0] ][ unit714_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit714_0[i][2] ][ unit714_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit714_0[i][4] ][ unit714_0[i][5] ] >0);
		X_contra = ( LargeX[714][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit714_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[714][1]=0; L[714][0]=1;}
			satisfiable[714][0]=satisfiable[714][0] & ((x[714] ^ 0) | (x[ unit714_0[i][0] ] ^ unit714_0[i][1]) |(x[ unit714_0[i][2] ] ^ unit714_0[i][3]));
			}
		if(X_contra>0) L[714][0]=2;
		}
	//Check all rules of unit[714][1]
	L[714][1] = LargeX[714][0]>0 ? 1 : 0;
	satisfiable[714][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit714_1[i][0] ][ unit714_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit714_1[i][2] ][ unit714_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit714_1[i][4] ][ unit714_1[i][5] ] >0);
		X_contra = ( LargeX[714][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit714_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[714][0]=0; L[714][1]=1;}
			satisfiable[714][1]=satisfiable[714][1] & ((x[714] ^ 1) | (x[ unit714_1[i][0] ] ^ unit714_1[i][1]) |(x[ unit714_1[i][2] ] ^ unit714_1[i][3]));
			}
		if(X_contra>0) L[714][1]=2;
		}
	//Check all rules of unit[715][0]
	L[715][0] = LargeX[715][1]>0 ? 1 : 0;
	satisfiable[715][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit715_0[i][0] ][ unit715_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit715_0[i][2] ][ unit715_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit715_0[i][4] ][ unit715_0[i][5] ] >0);
		X_contra = ( LargeX[715][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit715_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[715][1]=0; L[715][0]=1;}
			satisfiable[715][0]=satisfiable[715][0] & ((x[715] ^ 0) | (x[ unit715_0[i][0] ] ^ unit715_0[i][1]) |(x[ unit715_0[i][2] ] ^ unit715_0[i][3]));
			}
		if(X_contra>0) L[715][0]=2;
		}
	//Check all rules of unit[715][1]
	L[715][1] = LargeX[715][0]>0 ? 1 : 0;
	satisfiable[715][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit715_1[i][0] ][ unit715_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit715_1[i][2] ][ unit715_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit715_1[i][4] ][ unit715_1[i][5] ] >0);
		X_contra = ( LargeX[715][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit715_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[715][0]=0; L[715][1]=1;}
			satisfiable[715][1]=satisfiable[715][1] & ((x[715] ^ 1) | (x[ unit715_1[i][0] ] ^ unit715_1[i][1]) |(x[ unit715_1[i][2] ] ^ unit715_1[i][3]));
			}
		if(X_contra>0) L[715][1]=2;
		}
	//Check all rules of unit[716][0]
	L[716][0] = LargeX[716][1]>0 ? 1 : 0;
	satisfiable[716][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit716_0[i][0] ][ unit716_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit716_0[i][2] ][ unit716_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit716_0[i][4] ][ unit716_0[i][5] ] >0);
		X_contra = ( LargeX[716][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit716_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[716][1]=0; L[716][0]=1;}
			satisfiable[716][0]=satisfiable[716][0] & ((x[716] ^ 0) | (x[ unit716_0[i][0] ] ^ unit716_0[i][1]) |(x[ unit716_0[i][2] ] ^ unit716_0[i][3]));
			}
		if(X_contra>0) L[716][0]=2;
		}
	//Check all rules of unit[716][1]
	L[716][1] = LargeX[716][0]>0 ? 1 : 0;
	satisfiable[716][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit716_1[i][0] ][ unit716_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit716_1[i][2] ][ unit716_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit716_1[i][4] ][ unit716_1[i][5] ] >0);
		X_contra = ( LargeX[716][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit716_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[716][0]=0; L[716][1]=1;}
			satisfiable[716][1]=satisfiable[716][1] & ((x[716] ^ 1) | (x[ unit716_1[i][0] ] ^ unit716_1[i][1]) |(x[ unit716_1[i][2] ] ^ unit716_1[i][3]));
			}
		if(X_contra>0) L[716][1]=2;
		}
	//Check all rules of unit[717][0]
	L[717][0] = LargeX[717][1]>0 ? 1 : 0;
	satisfiable[717][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit717_0[i][0] ][ unit717_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit717_0[i][2] ][ unit717_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit717_0[i][4] ][ unit717_0[i][5] ] >0);
		X_contra = ( LargeX[717][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit717_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[717][1]=0; L[717][0]=1;}
			satisfiable[717][0]=satisfiable[717][0] & ((x[717] ^ 0) | (x[ unit717_0[i][0] ] ^ unit717_0[i][1]) |(x[ unit717_0[i][2] ] ^ unit717_0[i][3]));
			}
		if(X_contra>0) L[717][0]=2;
		}
	//Check all rules of unit[717][1]
	L[717][1] = LargeX[717][0]>0 ? 1 : 0;
	satisfiable[717][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit717_1[i][0] ][ unit717_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit717_1[i][2] ][ unit717_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit717_1[i][4] ][ unit717_1[i][5] ] >0);
		X_contra = ( LargeX[717][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit717_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[717][0]=0; L[717][1]=1;}
			satisfiable[717][1]=satisfiable[717][1] & ((x[717] ^ 1) | (x[ unit717_1[i][0] ] ^ unit717_1[i][1]) |(x[ unit717_1[i][2] ] ^ unit717_1[i][3]));
			}
		if(X_contra>0) L[717][1]=2;
		}
	//Check all rules of unit[718][0]
	L[718][0] = LargeX[718][1]>0 ? 1 : 0;
	satisfiable[718][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit718_0[i][0] ][ unit718_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit718_0[i][2] ][ unit718_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit718_0[i][4] ][ unit718_0[i][5] ] >0);
		X_contra = ( LargeX[718][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit718_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[718][1]=0; L[718][0]=1;}
			satisfiable[718][0]=satisfiable[718][0] & ((x[718] ^ 0) | (x[ unit718_0[i][0] ] ^ unit718_0[i][1]) |(x[ unit718_0[i][2] ] ^ unit718_0[i][3]));
			}
		if(X_contra>0) L[718][0]=2;
		}
	//Check all rules of unit[718][1]
	L[718][1] = LargeX[718][0]>0 ? 1 : 0;
	satisfiable[718][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit718_1[i][0] ][ unit718_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit718_1[i][2] ][ unit718_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit718_1[i][4] ][ unit718_1[i][5] ] >0);
		X_contra = ( LargeX[718][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit718_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[718][0]=0; L[718][1]=1;}
			satisfiable[718][1]=satisfiable[718][1] & ((x[718] ^ 1) | (x[ unit718_1[i][0] ] ^ unit718_1[i][1]) |(x[ unit718_1[i][2] ] ^ unit718_1[i][3]));
			}
		if(X_contra>0) L[718][1]=2;
		}
	//Check all rules of unit[719][0]
	L[719][0] = LargeX[719][1]>0 ? 1 : 0;
	satisfiable[719][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit719_0[i][0] ][ unit719_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit719_0[i][2] ][ unit719_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit719_0[i][4] ][ unit719_0[i][5] ] >0);
		X_contra = ( LargeX[719][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit719_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[719][1]=0; L[719][0]=1;}
			satisfiable[719][0]=satisfiable[719][0] & ((x[719] ^ 0) | (x[ unit719_0[i][0] ] ^ unit719_0[i][1]) |(x[ unit719_0[i][2] ] ^ unit719_0[i][3]));
			}
		if(X_contra>0) L[719][0]=2;
		}
	//Check all rules of unit[719][1]
	L[719][1] = LargeX[719][0]>0 ? 1 : 0;
	satisfiable[719][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit719_1[i][0] ][ unit719_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit719_1[i][2] ][ unit719_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit719_1[i][4] ][ unit719_1[i][5] ] >0);
		X_contra = ( LargeX[719][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit719_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[719][0]=0; L[719][1]=1;}
			satisfiable[719][1]=satisfiable[719][1] & ((x[719] ^ 1) | (x[ unit719_1[i][0] ] ^ unit719_1[i][1]) |(x[ unit719_1[i][2] ] ^ unit719_1[i][3]));
			}
		if(X_contra>0) L[719][1]=2;
		}
	//Check all rules of unit[720][0]
	L[720][0] = LargeX[720][1]>0 ? 1 : 0;
	satisfiable[720][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit720_0[i][0] ][ unit720_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit720_0[i][2] ][ unit720_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit720_0[i][4] ][ unit720_0[i][5] ] >0);
		X_contra = ( LargeX[720][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit720_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[720][1]=0; L[720][0]=1;}
			satisfiable[720][0]=satisfiable[720][0] & ((x[720] ^ 0) | (x[ unit720_0[i][0] ] ^ unit720_0[i][1]) |(x[ unit720_0[i][2] ] ^ unit720_0[i][3]));
			}
		if(X_contra>0) L[720][0]=2;
		}
	//Check all rules of unit[720][1]
	L[720][1] = LargeX[720][0]>0 ? 1 : 0;
	satisfiable[720][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit720_1[i][0] ][ unit720_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit720_1[i][2] ][ unit720_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit720_1[i][4] ][ unit720_1[i][5] ] >0);
		X_contra = ( LargeX[720][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit720_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[720][0]=0; L[720][1]=1;}
			satisfiable[720][1]=satisfiable[720][1] & ((x[720] ^ 1) | (x[ unit720_1[i][0] ] ^ unit720_1[i][1]) |(x[ unit720_1[i][2] ] ^ unit720_1[i][3]));
			}
		if(X_contra>0) L[720][1]=2;
		}
	//Check all rules of unit[721][0]
	L[721][0] = LargeX[721][1]>0 ? 1 : 0;
	satisfiable[721][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit721_0[i][0] ][ unit721_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit721_0[i][2] ][ unit721_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit721_0[i][4] ][ unit721_0[i][5] ] >0);
		X_contra = ( LargeX[721][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit721_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[721][1]=0; L[721][0]=1;}
			satisfiable[721][0]=satisfiable[721][0] & ((x[721] ^ 0) | (x[ unit721_0[i][0] ] ^ unit721_0[i][1]) |(x[ unit721_0[i][2] ] ^ unit721_0[i][3]));
			}
		if(X_contra>0) L[721][0]=2;
		}
	//Check all rules of unit[721][1]
	L[721][1] = LargeX[721][0]>0 ? 1 : 0;
	satisfiable[721][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit721_1[i][0] ][ unit721_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit721_1[i][2] ][ unit721_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit721_1[i][4] ][ unit721_1[i][5] ] >0);
		X_contra = ( LargeX[721][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit721_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[721][0]=0; L[721][1]=1;}
			satisfiable[721][1]=satisfiable[721][1] & ((x[721] ^ 1) | (x[ unit721_1[i][0] ] ^ unit721_1[i][1]) |(x[ unit721_1[i][2] ] ^ unit721_1[i][3]));
			}
		if(X_contra>0) L[721][1]=2;
		}
	//Check all rules of unit[722][0]
	L[722][0] = LargeX[722][1]>0 ? 1 : 0;
	satisfiable[722][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit722_0[i][0] ][ unit722_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit722_0[i][2] ][ unit722_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit722_0[i][4] ][ unit722_0[i][5] ] >0);
		X_contra = ( LargeX[722][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit722_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[722][1]=0; L[722][0]=1;}
			satisfiable[722][0]=satisfiable[722][0] & ((x[722] ^ 0) | (x[ unit722_0[i][0] ] ^ unit722_0[i][1]) |(x[ unit722_0[i][2] ] ^ unit722_0[i][3]));
			}
		if(X_contra>0) L[722][0]=2;
		}
	//Check all rules of unit[722][1]
	L[722][1] = LargeX[722][0]>0 ? 1 : 0;
	satisfiable[722][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit722_1[i][0] ][ unit722_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit722_1[i][2] ][ unit722_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit722_1[i][4] ][ unit722_1[i][5] ] >0);
		X_contra = ( LargeX[722][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit722_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[722][0]=0; L[722][1]=1;}
			satisfiable[722][1]=satisfiable[722][1] & ((x[722] ^ 1) | (x[ unit722_1[i][0] ] ^ unit722_1[i][1]) |(x[ unit722_1[i][2] ] ^ unit722_1[i][3]));
			}
		if(X_contra>0) L[722][1]=2;
		}
	//Check all rules of unit[723][0]
	L[723][0] = LargeX[723][1]>0 ? 1 : 0;
	satisfiable[723][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit723_0[i][0] ][ unit723_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit723_0[i][2] ][ unit723_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit723_0[i][4] ][ unit723_0[i][5] ] >0);
		X_contra = ( LargeX[723][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit723_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[723][1]=0; L[723][0]=1;}
			satisfiable[723][0]=satisfiable[723][0] & ((x[723] ^ 0) | (x[ unit723_0[i][0] ] ^ unit723_0[i][1]) |(x[ unit723_0[i][2] ] ^ unit723_0[i][3]));
			}
		if(X_contra>0) L[723][0]=2;
		}
	//Check all rules of unit[723][1]
	L[723][1] = LargeX[723][0]>0 ? 1 : 0;
	satisfiable[723][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit723_1[i][0] ][ unit723_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit723_1[i][2] ][ unit723_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit723_1[i][4] ][ unit723_1[i][5] ] >0);
		X_contra = ( LargeX[723][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit723_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[723][0]=0; L[723][1]=1;}
			satisfiable[723][1]=satisfiable[723][1] & ((x[723] ^ 1) | (x[ unit723_1[i][0] ] ^ unit723_1[i][1]) |(x[ unit723_1[i][2] ] ^ unit723_1[i][3]));
			}
		if(X_contra>0) L[723][1]=2;
		}
	//Check all rules of unit[724][0]
	L[724][0] = LargeX[724][1]>0 ? 1 : 0;
	satisfiable[724][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit724_0[i][0] ][ unit724_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit724_0[i][2] ][ unit724_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit724_0[i][4] ][ unit724_0[i][5] ] >0);
		X_contra = ( LargeX[724][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit724_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[724][1]=0; L[724][0]=1;}
			satisfiable[724][0]=satisfiable[724][0] & ((x[724] ^ 0) | (x[ unit724_0[i][0] ] ^ unit724_0[i][1]) |(x[ unit724_0[i][2] ] ^ unit724_0[i][3]));
			}
		if(X_contra>0) L[724][0]=2;
		}
	//Check all rules of unit[724][1]
	L[724][1] = LargeX[724][0]>0 ? 1 : 0;
	satisfiable[724][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit724_1[i][0] ][ unit724_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit724_1[i][2] ][ unit724_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit724_1[i][4] ][ unit724_1[i][5] ] >0);
		X_contra = ( LargeX[724][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit724_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[724][0]=0; L[724][1]=1;}
			satisfiable[724][1]=satisfiable[724][1] & ((x[724] ^ 1) | (x[ unit724_1[i][0] ] ^ unit724_1[i][1]) |(x[ unit724_1[i][2] ] ^ unit724_1[i][3]));
			}
		if(X_contra>0) L[724][1]=2;
		}
	//Check all rules of unit[725][0]
	L[725][0] = LargeX[725][1]>0 ? 1 : 0;
	satisfiable[725][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit725_0[i][0] ][ unit725_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit725_0[i][2] ][ unit725_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit725_0[i][4] ][ unit725_0[i][5] ] >0);
		X_contra = ( LargeX[725][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit725_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[725][1]=0; L[725][0]=1;}
			satisfiable[725][0]=satisfiable[725][0] & ((x[725] ^ 0) | (x[ unit725_0[i][0] ] ^ unit725_0[i][1]) |(x[ unit725_0[i][2] ] ^ unit725_0[i][3]));
			}
		if(X_contra>0) L[725][0]=2;
		}
	//Check all rules of unit[725][1]
	L[725][1] = LargeX[725][0]>0 ? 1 : 0;
	satisfiable[725][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit725_1[i][0] ][ unit725_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit725_1[i][2] ][ unit725_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit725_1[i][4] ][ unit725_1[i][5] ] >0);
		X_contra = ( LargeX[725][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit725_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[725][0]=0; L[725][1]=1;}
			satisfiable[725][1]=satisfiable[725][1] & ((x[725] ^ 1) | (x[ unit725_1[i][0] ] ^ unit725_1[i][1]) |(x[ unit725_1[i][2] ] ^ unit725_1[i][3]));
			}
		if(X_contra>0) L[725][1]=2;
		}
	//Check all rules of unit[726][0]
	L[726][0] = LargeX[726][1]>0 ? 1 : 0;
	satisfiable[726][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit726_0[i][0] ][ unit726_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit726_0[i][2] ][ unit726_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit726_0[i][4] ][ unit726_0[i][5] ] >0);
		X_contra = ( LargeX[726][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit726_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[726][1]=0; L[726][0]=1;}
			satisfiable[726][0]=satisfiable[726][0] & ((x[726] ^ 0) | (x[ unit726_0[i][0] ] ^ unit726_0[i][1]) |(x[ unit726_0[i][2] ] ^ unit726_0[i][3]));
			}
		if(X_contra>0) L[726][0]=2;
		}
	//Check all rules of unit[726][1]
	L[726][1] = LargeX[726][0]>0 ? 1 : 0;
	satisfiable[726][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit726_1[i][0] ][ unit726_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit726_1[i][2] ][ unit726_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit726_1[i][4] ][ unit726_1[i][5] ] >0);
		X_contra = ( LargeX[726][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit726_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[726][0]=0; L[726][1]=1;}
			satisfiable[726][1]=satisfiable[726][1] & ((x[726] ^ 1) | (x[ unit726_1[i][0] ] ^ unit726_1[i][1]) |(x[ unit726_1[i][2] ] ^ unit726_1[i][3]));
			}
		if(X_contra>0) L[726][1]=2;
		}
	//Check all rules of unit[727][0]
	L[727][0] = LargeX[727][1]>0 ? 1 : 0;
	satisfiable[727][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit727_0[i][0] ][ unit727_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit727_0[i][2] ][ unit727_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit727_0[i][4] ][ unit727_0[i][5] ] >0);
		X_contra = ( LargeX[727][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit727_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[727][1]=0; L[727][0]=1;}
			satisfiable[727][0]=satisfiable[727][0] & ((x[727] ^ 0) | (x[ unit727_0[i][0] ] ^ unit727_0[i][1]) |(x[ unit727_0[i][2] ] ^ unit727_0[i][3]));
			}
		if(X_contra>0) L[727][0]=2;
		}
	//Check all rules of unit[727][1]
	L[727][1] = LargeX[727][0]>0 ? 1 : 0;
	satisfiable[727][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit727_1[i][0] ][ unit727_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit727_1[i][2] ][ unit727_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit727_1[i][4] ][ unit727_1[i][5] ] >0);
		X_contra = ( LargeX[727][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit727_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[727][0]=0; L[727][1]=1;}
			satisfiable[727][1]=satisfiable[727][1] & ((x[727] ^ 1) | (x[ unit727_1[i][0] ] ^ unit727_1[i][1]) |(x[ unit727_1[i][2] ] ^ unit727_1[i][3]));
			}
		if(X_contra>0) L[727][1]=2;
		}
	//Check all rules of unit[728][0]
	L[728][0] = LargeX[728][1]>0 ? 1 : 0;
	satisfiable[728][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit728_0[i][0] ][ unit728_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit728_0[i][2] ][ unit728_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit728_0[i][4] ][ unit728_0[i][5] ] >0);
		X_contra = ( LargeX[728][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit728_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[728][1]=0; L[728][0]=1;}
			satisfiable[728][0]=satisfiable[728][0] & ((x[728] ^ 0) | (x[ unit728_0[i][0] ] ^ unit728_0[i][1]) |(x[ unit728_0[i][2] ] ^ unit728_0[i][3]));
			}
		if(X_contra>0) L[728][0]=2;
		}
	//Check all rules of unit[728][1]
	L[728][1] = LargeX[728][0]>0 ? 1 : 0;
	satisfiable[728][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit728_1[i][0] ][ unit728_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit728_1[i][2] ][ unit728_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit728_1[i][4] ][ unit728_1[i][5] ] >0);
		X_contra = ( LargeX[728][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit728_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[728][0]=0; L[728][1]=1;}
			satisfiable[728][1]=satisfiable[728][1] & ((x[728] ^ 1) | (x[ unit728_1[i][0] ] ^ unit728_1[i][1]) |(x[ unit728_1[i][2] ] ^ unit728_1[i][3]));
			}
		if(X_contra>0) L[728][1]=2;
		}
	//Check all rules of unit[729][0]
	L[729][0] = LargeX[729][1]>0 ? 1 : 0;
	satisfiable[729][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit729_0[i][0] ][ unit729_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit729_0[i][2] ][ unit729_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit729_0[i][4] ][ unit729_0[i][5] ] >0);
		X_contra = ( LargeX[729][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit729_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[729][1]=0; L[729][0]=1;}
			satisfiable[729][0]=satisfiable[729][0] & ((x[729] ^ 0) | (x[ unit729_0[i][0] ] ^ unit729_0[i][1]) |(x[ unit729_0[i][2] ] ^ unit729_0[i][3]));
			}
		if(X_contra>0) L[729][0]=2;
		}
	//Check all rules of unit[729][1]
	L[729][1] = LargeX[729][0]>0 ? 1 : 0;
	satisfiable[729][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit729_1[i][0] ][ unit729_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit729_1[i][2] ][ unit729_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit729_1[i][4] ][ unit729_1[i][5] ] >0);
		X_contra = ( LargeX[729][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit729_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[729][0]=0; L[729][1]=1;}
			satisfiable[729][1]=satisfiable[729][1] & ((x[729] ^ 1) | (x[ unit729_1[i][0] ] ^ unit729_1[i][1]) |(x[ unit729_1[i][2] ] ^ unit729_1[i][3]));
			}
		if(X_contra>0) L[729][1]=2;
		}
	//Check all rules of unit[730][0]
	L[730][0] = LargeX[730][1]>0 ? 1 : 0;
	satisfiable[730][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit730_0[i][0] ][ unit730_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit730_0[i][2] ][ unit730_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit730_0[i][4] ][ unit730_0[i][5] ] >0);
		X_contra = ( LargeX[730][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit730_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[730][1]=0; L[730][0]=1;}
			satisfiable[730][0]=satisfiable[730][0] & ((x[730] ^ 0) | (x[ unit730_0[i][0] ] ^ unit730_0[i][1]) |(x[ unit730_0[i][2] ] ^ unit730_0[i][3]));
			}
		if(X_contra>0) L[730][0]=2;
		}
	//Check all rules of unit[730][1]
	L[730][1] = LargeX[730][0]>0 ? 1 : 0;
	satisfiable[730][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit730_1[i][0] ][ unit730_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit730_1[i][2] ][ unit730_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit730_1[i][4] ][ unit730_1[i][5] ] >0);
		X_contra = ( LargeX[730][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit730_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[730][0]=0; L[730][1]=1;}
			satisfiable[730][1]=satisfiable[730][1] & ((x[730] ^ 1) | (x[ unit730_1[i][0] ] ^ unit730_1[i][1]) |(x[ unit730_1[i][2] ] ^ unit730_1[i][3]));
			}
		if(X_contra>0) L[730][1]=2;
		}
	//Check all rules of unit[731][0]
	L[731][0] = LargeX[731][1]>0 ? 1 : 0;
	satisfiable[731][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit731_0[i][0] ][ unit731_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit731_0[i][2] ][ unit731_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit731_0[i][4] ][ unit731_0[i][5] ] >0);
		X_contra = ( LargeX[731][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit731_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[731][1]=0; L[731][0]=1;}
			satisfiable[731][0]=satisfiable[731][0] & ((x[731] ^ 0) | (x[ unit731_0[i][0] ] ^ unit731_0[i][1]) |(x[ unit731_0[i][2] ] ^ unit731_0[i][3]));
			}
		if(X_contra>0) L[731][0]=2;
		}
	//Check all rules of unit[731][1]
	L[731][1] = LargeX[731][0]>0 ? 1 : 0;
	satisfiable[731][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit731_1[i][0] ][ unit731_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit731_1[i][2] ][ unit731_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit731_1[i][4] ][ unit731_1[i][5] ] >0);
		X_contra = ( LargeX[731][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit731_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[731][0]=0; L[731][1]=1;}
			satisfiable[731][1]=satisfiable[731][1] & ((x[731] ^ 1) | (x[ unit731_1[i][0] ] ^ unit731_1[i][1]) |(x[ unit731_1[i][2] ] ^ unit731_1[i][3]));
			}
		if(X_contra>0) L[731][1]=2;
		}
	//Check all rules of unit[732][0]
	L[732][0] = LargeX[732][1]>0 ? 1 : 0;
	satisfiable[732][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit732_0[i][0] ][ unit732_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit732_0[i][2] ][ unit732_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit732_0[i][4] ][ unit732_0[i][5] ] >0);
		X_contra = ( LargeX[732][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit732_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[732][1]=0; L[732][0]=1;}
			satisfiable[732][0]=satisfiable[732][0] & ((x[732] ^ 0) | (x[ unit732_0[i][0] ] ^ unit732_0[i][1]) |(x[ unit732_0[i][2] ] ^ unit732_0[i][3]));
			}
		if(X_contra>0) L[732][0]=2;
		}
	//Check all rules of unit[732][1]
	L[732][1] = LargeX[732][0]>0 ? 1 : 0;
	satisfiable[732][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit732_1[i][0] ][ unit732_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit732_1[i][2] ][ unit732_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit732_1[i][4] ][ unit732_1[i][5] ] >0);
		X_contra = ( LargeX[732][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit732_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[732][0]=0; L[732][1]=1;}
			satisfiable[732][1]=satisfiable[732][1] & ((x[732] ^ 1) | (x[ unit732_1[i][0] ] ^ unit732_1[i][1]) |(x[ unit732_1[i][2] ] ^ unit732_1[i][3]));
			}
		if(X_contra>0) L[732][1]=2;
		}
	//Check all rules of unit[733][0]
	L[733][0] = LargeX[733][1]>0 ? 1 : 0;
	satisfiable[733][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit733_0[i][0] ][ unit733_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit733_0[i][2] ][ unit733_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit733_0[i][4] ][ unit733_0[i][5] ] >0);
		X_contra = ( LargeX[733][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit733_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[733][1]=0; L[733][0]=1;}
			satisfiable[733][0]=satisfiable[733][0] & ((x[733] ^ 0) | (x[ unit733_0[i][0] ] ^ unit733_0[i][1]) |(x[ unit733_0[i][2] ] ^ unit733_0[i][3]));
			}
		if(X_contra>0) L[733][0]=2;
		}
	//Check all rules of unit[733][1]
	L[733][1] = LargeX[733][0]>0 ? 1 : 0;
	satisfiable[733][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit733_1[i][0] ][ unit733_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit733_1[i][2] ][ unit733_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit733_1[i][4] ][ unit733_1[i][5] ] >0);
		X_contra = ( LargeX[733][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit733_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[733][0]=0; L[733][1]=1;}
			satisfiable[733][1]=satisfiable[733][1] & ((x[733] ^ 1) | (x[ unit733_1[i][0] ] ^ unit733_1[i][1]) |(x[ unit733_1[i][2] ] ^ unit733_1[i][3]));
			}
		if(X_contra>0) L[733][1]=2;
		}
	//Check all rules of unit[734][0]
	L[734][0] = LargeX[734][1]>0 ? 1 : 0;
	satisfiable[734][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit734_0[i][0] ][ unit734_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit734_0[i][2] ][ unit734_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit734_0[i][4] ][ unit734_0[i][5] ] >0);
		X_contra = ( LargeX[734][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit734_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[734][1]=0; L[734][0]=1;}
			satisfiable[734][0]=satisfiable[734][0] & ((x[734] ^ 0) | (x[ unit734_0[i][0] ] ^ unit734_0[i][1]) |(x[ unit734_0[i][2] ] ^ unit734_0[i][3]));
			}
		if(X_contra>0) L[734][0]=2;
		}
	//Check all rules of unit[734][1]
	L[734][1] = LargeX[734][0]>0 ? 1 : 0;
	satisfiable[734][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit734_1[i][0] ][ unit734_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit734_1[i][2] ][ unit734_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit734_1[i][4] ][ unit734_1[i][5] ] >0);
		X_contra = ( LargeX[734][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit734_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[734][0]=0; L[734][1]=1;}
			satisfiable[734][1]=satisfiable[734][1] & ((x[734] ^ 1) | (x[ unit734_1[i][0] ] ^ unit734_1[i][1]) |(x[ unit734_1[i][2] ] ^ unit734_1[i][3]));
			}
		if(X_contra>0) L[734][1]=2;
		}
	//Check all rules of unit[735][0]
	L[735][0] = LargeX[735][1]>0 ? 1 : 0;
	satisfiable[735][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit735_0[i][0] ][ unit735_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit735_0[i][2] ][ unit735_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit735_0[i][4] ][ unit735_0[i][5] ] >0);
		X_contra = ( LargeX[735][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit735_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[735][1]=0; L[735][0]=1;}
			satisfiable[735][0]=satisfiable[735][0] & ((x[735] ^ 0) | (x[ unit735_0[i][0] ] ^ unit735_0[i][1]) |(x[ unit735_0[i][2] ] ^ unit735_0[i][3]));
			}
		if(X_contra>0) L[735][0]=2;
		}
	//Check all rules of unit[735][1]
	L[735][1] = LargeX[735][0]>0 ? 1 : 0;
	satisfiable[735][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit735_1[i][0] ][ unit735_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit735_1[i][2] ][ unit735_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit735_1[i][4] ][ unit735_1[i][5] ] >0);
		X_contra = ( LargeX[735][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit735_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[735][0]=0; L[735][1]=1;}
			satisfiable[735][1]=satisfiable[735][1] & ((x[735] ^ 1) | (x[ unit735_1[i][0] ] ^ unit735_1[i][1]) |(x[ unit735_1[i][2] ] ^ unit735_1[i][3]));
			}
		if(X_contra>0) L[735][1]=2;
		}
	//Check all rules of unit[736][0]
	L[736][0] = LargeX[736][1]>0 ? 1 : 0;
	satisfiable[736][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit736_0[i][0] ][ unit736_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit736_0[i][2] ][ unit736_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit736_0[i][4] ][ unit736_0[i][5] ] >0);
		X_contra = ( LargeX[736][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit736_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[736][1]=0; L[736][0]=1;}
			satisfiable[736][0]=satisfiable[736][0] & ((x[736] ^ 0) | (x[ unit736_0[i][0] ] ^ unit736_0[i][1]) |(x[ unit736_0[i][2] ] ^ unit736_0[i][3]));
			}
		if(X_contra>0) L[736][0]=2;
		}
	//Check all rules of unit[736][1]
	L[736][1] = LargeX[736][0]>0 ? 1 : 0;
	satisfiable[736][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit736_1[i][0] ][ unit736_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit736_1[i][2] ][ unit736_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit736_1[i][4] ][ unit736_1[i][5] ] >0);
		X_contra = ( LargeX[736][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit736_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[736][0]=0; L[736][1]=1;}
			satisfiable[736][1]=satisfiable[736][1] & ((x[736] ^ 1) | (x[ unit736_1[i][0] ] ^ unit736_1[i][1]) |(x[ unit736_1[i][2] ] ^ unit736_1[i][3]));
			}
		if(X_contra>0) L[736][1]=2;
		}
	//Check all rules of unit[737][0]
	L[737][0] = LargeX[737][1]>0 ? 1 : 0;
	satisfiable[737][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit737_0[i][0] ][ unit737_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit737_0[i][2] ][ unit737_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit737_0[i][4] ][ unit737_0[i][5] ] >0);
		X_contra = ( LargeX[737][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit737_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[737][1]=0; L[737][0]=1;}
			satisfiable[737][0]=satisfiable[737][0] & ((x[737] ^ 0) | (x[ unit737_0[i][0] ] ^ unit737_0[i][1]) |(x[ unit737_0[i][2] ] ^ unit737_0[i][3]));
			}
		if(X_contra>0) L[737][0]=2;
		}
	//Check all rules of unit[737][1]
	L[737][1] = LargeX[737][0]>0 ? 1 : 0;
	satisfiable[737][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit737_1[i][0] ][ unit737_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit737_1[i][2] ][ unit737_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit737_1[i][4] ][ unit737_1[i][5] ] >0);
		X_contra = ( LargeX[737][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit737_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[737][0]=0; L[737][1]=1;}
			satisfiable[737][1]=satisfiable[737][1] & ((x[737] ^ 1) | (x[ unit737_1[i][0] ] ^ unit737_1[i][1]) |(x[ unit737_1[i][2] ] ^ unit737_1[i][3]));
			}
		if(X_contra>0) L[737][1]=2;
		}
	//Check all rules of unit[738][0]
	L[738][0] = LargeX[738][1]>0 ? 1 : 0;
	satisfiable[738][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit738_0[i][0] ][ unit738_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit738_0[i][2] ][ unit738_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit738_0[i][4] ][ unit738_0[i][5] ] >0);
		X_contra = ( LargeX[738][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit738_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[738][1]=0; L[738][0]=1;}
			satisfiable[738][0]=satisfiable[738][0] & ((x[738] ^ 0) | (x[ unit738_0[i][0] ] ^ unit738_0[i][1]) |(x[ unit738_0[i][2] ] ^ unit738_0[i][3]));
			}
		if(X_contra>0) L[738][0]=2;
		}
	//Check all rules of unit[738][1]
	L[738][1] = LargeX[738][0]>0 ? 1 : 0;
	satisfiable[738][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit738_1[i][0] ][ unit738_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit738_1[i][2] ][ unit738_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit738_1[i][4] ][ unit738_1[i][5] ] >0);
		X_contra = ( LargeX[738][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit738_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[738][0]=0; L[738][1]=1;}
			satisfiable[738][1]=satisfiable[738][1] & ((x[738] ^ 1) | (x[ unit738_1[i][0] ] ^ unit738_1[i][1]) |(x[ unit738_1[i][2] ] ^ unit738_1[i][3]));
			}
		if(X_contra>0) L[738][1]=2;
		}
	//Check all rules of unit[739][0]
	L[739][0] = LargeX[739][1]>0 ? 1 : 0;
	satisfiable[739][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit739_0[i][0] ][ unit739_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit739_0[i][2] ][ unit739_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit739_0[i][4] ][ unit739_0[i][5] ] >0);
		X_contra = ( LargeX[739][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit739_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[739][1]=0; L[739][0]=1;}
			satisfiable[739][0]=satisfiable[739][0] & ((x[739] ^ 0) | (x[ unit739_0[i][0] ] ^ unit739_0[i][1]) |(x[ unit739_0[i][2] ] ^ unit739_0[i][3]));
			}
		if(X_contra>0) L[739][0]=2;
		}
	//Check all rules of unit[739][1]
	L[739][1] = LargeX[739][0]>0 ? 1 : 0;
	satisfiable[739][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit739_1[i][0] ][ unit739_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit739_1[i][2] ][ unit739_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit739_1[i][4] ][ unit739_1[i][5] ] >0);
		X_contra = ( LargeX[739][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit739_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[739][0]=0; L[739][1]=1;}
			satisfiable[739][1]=satisfiable[739][1] & ((x[739] ^ 1) | (x[ unit739_1[i][0] ] ^ unit739_1[i][1]) |(x[ unit739_1[i][2] ] ^ unit739_1[i][3]));
			}
		if(X_contra>0) L[739][1]=2;
		}
	//Check all rules of unit[740][0]
	L[740][0] = LargeX[740][1]>0 ? 1 : 0;
	satisfiable[740][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit740_0[i][0] ][ unit740_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit740_0[i][2] ][ unit740_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit740_0[i][4] ][ unit740_0[i][5] ] >0);
		X_contra = ( LargeX[740][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit740_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[740][1]=0; L[740][0]=1;}
			satisfiable[740][0]=satisfiable[740][0] & ((x[740] ^ 0) | (x[ unit740_0[i][0] ] ^ unit740_0[i][1]) |(x[ unit740_0[i][2] ] ^ unit740_0[i][3]));
			}
		if(X_contra>0) L[740][0]=2;
		}
	//Check all rules of unit[740][1]
	L[740][1] = LargeX[740][0]>0 ? 1 : 0;
	satisfiable[740][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit740_1[i][0] ][ unit740_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit740_1[i][2] ][ unit740_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit740_1[i][4] ][ unit740_1[i][5] ] >0);
		X_contra = ( LargeX[740][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit740_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[740][0]=0; L[740][1]=1;}
			satisfiable[740][1]=satisfiable[740][1] & ((x[740] ^ 1) | (x[ unit740_1[i][0] ] ^ unit740_1[i][1]) |(x[ unit740_1[i][2] ] ^ unit740_1[i][3]));
			}
		if(X_contra>0) L[740][1]=2;
		}
	//Check all rules of unit[741][0]
	L[741][0] = LargeX[741][1]>0 ? 1 : 0;
	satisfiable[741][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit741_0[i][0] ][ unit741_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit741_0[i][2] ][ unit741_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit741_0[i][4] ][ unit741_0[i][5] ] >0);
		X_contra = ( LargeX[741][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit741_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[741][1]=0; L[741][0]=1;}
			satisfiable[741][0]=satisfiable[741][0] & ((x[741] ^ 0) | (x[ unit741_0[i][0] ] ^ unit741_0[i][1]) |(x[ unit741_0[i][2] ] ^ unit741_0[i][3]));
			}
		if(X_contra>0) L[741][0]=2;
		}
	//Check all rules of unit[741][1]
	L[741][1] = LargeX[741][0]>0 ? 1 : 0;
	satisfiable[741][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit741_1[i][0] ][ unit741_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit741_1[i][2] ][ unit741_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit741_1[i][4] ][ unit741_1[i][5] ] >0);
		X_contra = ( LargeX[741][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit741_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[741][0]=0; L[741][1]=1;}
			satisfiable[741][1]=satisfiable[741][1] & ((x[741] ^ 1) | (x[ unit741_1[i][0] ] ^ unit741_1[i][1]) |(x[ unit741_1[i][2] ] ^ unit741_1[i][3]));
			}
		if(X_contra>0) L[741][1]=2;
		}
	//Check all rules of unit[742][0]
	L[742][0] = LargeX[742][1]>0 ? 1 : 0;
	satisfiable[742][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit742_0[i][0] ][ unit742_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit742_0[i][2] ][ unit742_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit742_0[i][4] ][ unit742_0[i][5] ] >0);
		X_contra = ( LargeX[742][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit742_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[742][1]=0; L[742][0]=1;}
			satisfiable[742][0]=satisfiable[742][0] & ((x[742] ^ 0) | (x[ unit742_0[i][0] ] ^ unit742_0[i][1]) |(x[ unit742_0[i][2] ] ^ unit742_0[i][3]));
			}
		if(X_contra>0) L[742][0]=2;
		}
	//Check all rules of unit[742][1]
	L[742][1] = LargeX[742][0]>0 ? 1 : 0;
	satisfiable[742][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit742_1[i][0] ][ unit742_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit742_1[i][2] ][ unit742_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit742_1[i][4] ][ unit742_1[i][5] ] >0);
		X_contra = ( LargeX[742][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit742_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[742][0]=0; L[742][1]=1;}
			satisfiable[742][1]=satisfiable[742][1] & ((x[742] ^ 1) | (x[ unit742_1[i][0] ] ^ unit742_1[i][1]) |(x[ unit742_1[i][2] ] ^ unit742_1[i][3]));
			}
		if(X_contra>0) L[742][1]=2;
		}
	//Check all rules of unit[743][0]
	L[743][0] = LargeX[743][1]>0 ? 1 : 0;
	satisfiable[743][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit743_0[i][0] ][ unit743_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit743_0[i][2] ][ unit743_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit743_0[i][4] ][ unit743_0[i][5] ] >0);
		X_contra = ( LargeX[743][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit743_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[743][1]=0; L[743][0]=1;}
			satisfiable[743][0]=satisfiable[743][0] & ((x[743] ^ 0) | (x[ unit743_0[i][0] ] ^ unit743_0[i][1]) |(x[ unit743_0[i][2] ] ^ unit743_0[i][3]));
			}
		if(X_contra>0) L[743][0]=2;
		}
	//Check all rules of unit[743][1]
	L[743][1] = LargeX[743][0]>0 ? 1 : 0;
	satisfiable[743][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit743_1[i][0] ][ unit743_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit743_1[i][2] ][ unit743_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit743_1[i][4] ][ unit743_1[i][5] ] >0);
		X_contra = ( LargeX[743][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit743_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[743][0]=0; L[743][1]=1;}
			satisfiable[743][1]=satisfiable[743][1] & ((x[743] ^ 1) | (x[ unit743_1[i][0] ] ^ unit743_1[i][1]) |(x[ unit743_1[i][2] ] ^ unit743_1[i][3]));
			}
		if(X_contra>0) L[743][1]=2;
		}
	//Check all rules of unit[744][0]
	L[744][0] = LargeX[744][1]>0 ? 1 : 0;
	satisfiable[744][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit744_0[i][0] ][ unit744_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit744_0[i][2] ][ unit744_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit744_0[i][4] ][ unit744_0[i][5] ] >0);
		X_contra = ( LargeX[744][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit744_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[744][1]=0; L[744][0]=1;}
			satisfiable[744][0]=satisfiable[744][0] & ((x[744] ^ 0) | (x[ unit744_0[i][0] ] ^ unit744_0[i][1]) |(x[ unit744_0[i][2] ] ^ unit744_0[i][3]));
			}
		if(X_contra>0) L[744][0]=2;
		}
	//Check all rules of unit[744][1]
	L[744][1] = LargeX[744][0]>0 ? 1 : 0;
	satisfiable[744][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit744_1[i][0] ][ unit744_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit744_1[i][2] ][ unit744_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit744_1[i][4] ][ unit744_1[i][5] ] >0);
		X_contra = ( LargeX[744][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit744_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[744][0]=0; L[744][1]=1;}
			satisfiable[744][1]=satisfiable[744][1] & ((x[744] ^ 1) | (x[ unit744_1[i][0] ] ^ unit744_1[i][1]) |(x[ unit744_1[i][2] ] ^ unit744_1[i][3]));
			}
		if(X_contra>0) L[744][1]=2;
		}
	//Check all rules of unit[745][0]
	L[745][0] = LargeX[745][1]>0 ? 1 : 0;
	satisfiable[745][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit745_0[i][0] ][ unit745_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit745_0[i][2] ][ unit745_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit745_0[i][4] ][ unit745_0[i][5] ] >0);
		X_contra = ( LargeX[745][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit745_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[745][1]=0; L[745][0]=1;}
			satisfiable[745][0]=satisfiable[745][0] & ((x[745] ^ 0) | (x[ unit745_0[i][0] ] ^ unit745_0[i][1]) |(x[ unit745_0[i][2] ] ^ unit745_0[i][3]));
			}
		if(X_contra>0) L[745][0]=2;
		}
	//Check all rules of unit[745][1]
	L[745][1] = LargeX[745][0]>0 ? 1 : 0;
	satisfiable[745][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit745_1[i][0] ][ unit745_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit745_1[i][2] ][ unit745_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit745_1[i][4] ][ unit745_1[i][5] ] >0);
		X_contra = ( LargeX[745][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit745_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[745][0]=0; L[745][1]=1;}
			satisfiable[745][1]=satisfiable[745][1] & ((x[745] ^ 1) | (x[ unit745_1[i][0] ] ^ unit745_1[i][1]) |(x[ unit745_1[i][2] ] ^ unit745_1[i][3]));
			}
		if(X_contra>0) L[745][1]=2;
		}
	//Check all rules of unit[746][0]
	L[746][0] = LargeX[746][1]>0 ? 1 : 0;
	satisfiable[746][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit746_0[i][0] ][ unit746_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit746_0[i][2] ][ unit746_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit746_0[i][4] ][ unit746_0[i][5] ] >0);
		X_contra = ( LargeX[746][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit746_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[746][1]=0; L[746][0]=1;}
			satisfiable[746][0]=satisfiable[746][0] & ((x[746] ^ 0) | (x[ unit746_0[i][0] ] ^ unit746_0[i][1]) |(x[ unit746_0[i][2] ] ^ unit746_0[i][3]));
			}
		if(X_contra>0) L[746][0]=2;
		}
	//Check all rules of unit[746][1]
	L[746][1] = LargeX[746][0]>0 ? 1 : 0;
	satisfiable[746][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit746_1[i][0] ][ unit746_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit746_1[i][2] ][ unit746_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit746_1[i][4] ][ unit746_1[i][5] ] >0);
		X_contra = ( LargeX[746][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit746_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[746][0]=0; L[746][1]=1;}
			satisfiable[746][1]=satisfiable[746][1] & ((x[746] ^ 1) | (x[ unit746_1[i][0] ] ^ unit746_1[i][1]) |(x[ unit746_1[i][2] ] ^ unit746_1[i][3]));
			}
		if(X_contra>0) L[746][1]=2;
		}
	//Check all rules of unit[747][0]
	L[747][0] = LargeX[747][1]>0 ? 1 : 0;
	satisfiable[747][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit747_0[i][0] ][ unit747_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit747_0[i][2] ][ unit747_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit747_0[i][4] ][ unit747_0[i][5] ] >0);
		X_contra = ( LargeX[747][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit747_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[747][1]=0; L[747][0]=1;}
			satisfiable[747][0]=satisfiable[747][0] & ((x[747] ^ 0) | (x[ unit747_0[i][0] ] ^ unit747_0[i][1]) |(x[ unit747_0[i][2] ] ^ unit747_0[i][3]));
			}
		if(X_contra>0) L[747][0]=2;
		}
	//Check all rules of unit[747][1]
	L[747][1] = LargeX[747][0]>0 ? 1 : 0;
	satisfiable[747][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit747_1[i][0] ][ unit747_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit747_1[i][2] ][ unit747_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit747_1[i][4] ][ unit747_1[i][5] ] >0);
		X_contra = ( LargeX[747][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit747_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[747][0]=0; L[747][1]=1;}
			satisfiable[747][1]=satisfiable[747][1] & ((x[747] ^ 1) | (x[ unit747_1[i][0] ] ^ unit747_1[i][1]) |(x[ unit747_1[i][2] ] ^ unit747_1[i][3]));
			}
		if(X_contra>0) L[747][1]=2;
		}
	//Check all rules of unit[748][0]
	L[748][0] = LargeX[748][1]>0 ? 1 : 0;
	satisfiable[748][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit748_0[i][0] ][ unit748_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit748_0[i][2] ][ unit748_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit748_0[i][4] ][ unit748_0[i][5] ] >0);
		X_contra = ( LargeX[748][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit748_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[748][1]=0; L[748][0]=1;}
			satisfiable[748][0]=satisfiable[748][0] & ((x[748] ^ 0) | (x[ unit748_0[i][0] ] ^ unit748_0[i][1]) |(x[ unit748_0[i][2] ] ^ unit748_0[i][3]));
			}
		if(X_contra>0) L[748][0]=2;
		}
	//Check all rules of unit[748][1]
	L[748][1] = LargeX[748][0]>0 ? 1 : 0;
	satisfiable[748][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit748_1[i][0] ][ unit748_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit748_1[i][2] ][ unit748_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit748_1[i][4] ][ unit748_1[i][5] ] >0);
		X_contra = ( LargeX[748][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit748_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[748][0]=0; L[748][1]=1;}
			satisfiable[748][1]=satisfiable[748][1] & ((x[748] ^ 1) | (x[ unit748_1[i][0] ] ^ unit748_1[i][1]) |(x[ unit748_1[i][2] ] ^ unit748_1[i][3]));
			}
		if(X_contra>0) L[748][1]=2;
		}
	//Check all rules of unit[749][0]
	L[749][0] = LargeX[749][1]>0 ? 1 : 0;
	satisfiable[749][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit749_0[i][0] ][ unit749_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit749_0[i][2] ][ unit749_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit749_0[i][4] ][ unit749_0[i][5] ] >0);
		X_contra = ( LargeX[749][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit749_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[749][1]=0; L[749][0]=1;}
			satisfiable[749][0]=satisfiable[749][0] & ((x[749] ^ 0) | (x[ unit749_0[i][0] ] ^ unit749_0[i][1]) |(x[ unit749_0[i][2] ] ^ unit749_0[i][3]));
			}
		if(X_contra>0) L[749][0]=2;
		}
	//Check all rules of unit[749][1]
	L[749][1] = LargeX[749][0]>0 ? 1 : 0;
	satisfiable[749][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit749_1[i][0] ][ unit749_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit749_1[i][2] ][ unit749_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit749_1[i][4] ][ unit749_1[i][5] ] >0);
		X_contra = ( LargeX[749][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit749_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[749][0]=0; L[749][1]=1;}
			satisfiable[749][1]=satisfiable[749][1] & ((x[749] ^ 1) | (x[ unit749_1[i][0] ] ^ unit749_1[i][1]) |(x[ unit749_1[i][2] ] ^ unit749_1[i][3]));
			}
		if(X_contra>0) L[749][1]=2;
		}
	//Check all rules of unit[750][0]
	L[750][0] = LargeX[750][1]>0 ? 1 : 0;
	satisfiable[750][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit750_0[i][0] ][ unit750_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit750_0[i][2] ][ unit750_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit750_0[i][4] ][ unit750_0[i][5] ] >0);
		X_contra = ( LargeX[750][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit750_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[750][1]=0; L[750][0]=1;}
			satisfiable[750][0]=satisfiable[750][0] & ((x[750] ^ 0) | (x[ unit750_0[i][0] ] ^ unit750_0[i][1]) |(x[ unit750_0[i][2] ] ^ unit750_0[i][3]));
			}
		if(X_contra>0) L[750][0]=2;
		}
	//Check all rules of unit[750][1]
	L[750][1] = LargeX[750][0]>0 ? 1 : 0;
	satisfiable[750][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit750_1[i][0] ][ unit750_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit750_1[i][2] ][ unit750_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit750_1[i][4] ][ unit750_1[i][5] ] >0);
		X_contra = ( LargeX[750][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit750_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[750][0]=0; L[750][1]=1;}
			satisfiable[750][1]=satisfiable[750][1] & ((x[750] ^ 1) | (x[ unit750_1[i][0] ] ^ unit750_1[i][1]) |(x[ unit750_1[i][2] ] ^ unit750_1[i][3]));
			}
		if(X_contra>0) L[750][1]=2;
		}
	//Check all rules of unit[751][0]
	L[751][0] = LargeX[751][1]>0 ? 1 : 0;
	satisfiable[751][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit751_0[i][0] ][ unit751_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit751_0[i][2] ][ unit751_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit751_0[i][4] ][ unit751_0[i][5] ] >0);
		X_contra = ( LargeX[751][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit751_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[751][1]=0; L[751][0]=1;}
			satisfiable[751][0]=satisfiable[751][0] & ((x[751] ^ 0) | (x[ unit751_0[i][0] ] ^ unit751_0[i][1]) |(x[ unit751_0[i][2] ] ^ unit751_0[i][3]));
			}
		if(X_contra>0) L[751][0]=2;
		}
	//Check all rules of unit[751][1]
	L[751][1] = LargeX[751][0]>0 ? 1 : 0;
	satisfiable[751][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit751_1[i][0] ][ unit751_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit751_1[i][2] ][ unit751_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit751_1[i][4] ][ unit751_1[i][5] ] >0);
		X_contra = ( LargeX[751][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit751_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[751][0]=0; L[751][1]=1;}
			satisfiable[751][1]=satisfiable[751][1] & ((x[751] ^ 1) | (x[ unit751_1[i][0] ] ^ unit751_1[i][1]) |(x[ unit751_1[i][2] ] ^ unit751_1[i][3]));
			}
		if(X_contra>0) L[751][1]=2;
		}
	//Check all rules of unit[752][0]
	L[752][0] = LargeX[752][1]>0 ? 1 : 0;
	satisfiable[752][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit752_0[i][0] ][ unit752_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit752_0[i][2] ][ unit752_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit752_0[i][4] ][ unit752_0[i][5] ] >0);
		X_contra = ( LargeX[752][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit752_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[752][1]=0; L[752][0]=1;}
			satisfiable[752][0]=satisfiable[752][0] & ((x[752] ^ 0) | (x[ unit752_0[i][0] ] ^ unit752_0[i][1]) |(x[ unit752_0[i][2] ] ^ unit752_0[i][3]));
			}
		if(X_contra>0) L[752][0]=2;
		}
	//Check all rules of unit[752][1]
	L[752][1] = LargeX[752][0]>0 ? 1 : 0;
	satisfiable[752][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit752_1[i][0] ][ unit752_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit752_1[i][2] ][ unit752_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit752_1[i][4] ][ unit752_1[i][5] ] >0);
		X_contra = ( LargeX[752][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit752_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[752][0]=0; L[752][1]=1;}
			satisfiable[752][1]=satisfiable[752][1] & ((x[752] ^ 1) | (x[ unit752_1[i][0] ] ^ unit752_1[i][1]) |(x[ unit752_1[i][2] ] ^ unit752_1[i][3]));
			}
		if(X_contra>0) L[752][1]=2;
		}
	//Check all rules of unit[753][0]
	L[753][0] = LargeX[753][1]>0 ? 1 : 0;
	satisfiable[753][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit753_0[i][0] ][ unit753_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit753_0[i][2] ][ unit753_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit753_0[i][4] ][ unit753_0[i][5] ] >0);
		X_contra = ( LargeX[753][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit753_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[753][1]=0; L[753][0]=1;}
			satisfiable[753][0]=satisfiable[753][0] & ((x[753] ^ 0) | (x[ unit753_0[i][0] ] ^ unit753_0[i][1]) |(x[ unit753_0[i][2] ] ^ unit753_0[i][3]));
			}
		if(X_contra>0) L[753][0]=2;
		}
	//Check all rules of unit[753][1]
	L[753][1] = LargeX[753][0]>0 ? 1 : 0;
	satisfiable[753][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit753_1[i][0] ][ unit753_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit753_1[i][2] ][ unit753_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit753_1[i][4] ][ unit753_1[i][5] ] >0);
		X_contra = ( LargeX[753][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit753_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[753][0]=0; L[753][1]=1;}
			satisfiable[753][1]=satisfiable[753][1] & ((x[753] ^ 1) | (x[ unit753_1[i][0] ] ^ unit753_1[i][1]) |(x[ unit753_1[i][2] ] ^ unit753_1[i][3]));
			}
		if(X_contra>0) L[753][1]=2;
		}
	//Check all rules of unit[754][0]
	L[754][0] = LargeX[754][1]>0 ? 1 : 0;
	satisfiable[754][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit754_0[i][0] ][ unit754_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit754_0[i][2] ][ unit754_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit754_0[i][4] ][ unit754_0[i][5] ] >0);
		X_contra = ( LargeX[754][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit754_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[754][1]=0; L[754][0]=1;}
			satisfiable[754][0]=satisfiable[754][0] & ((x[754] ^ 0) | (x[ unit754_0[i][0] ] ^ unit754_0[i][1]) |(x[ unit754_0[i][2] ] ^ unit754_0[i][3]));
			}
		if(X_contra>0) L[754][0]=2;
		}
	//Check all rules of unit[754][1]
	L[754][1] = LargeX[754][0]>0 ? 1 : 0;
	satisfiable[754][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit754_1[i][0] ][ unit754_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit754_1[i][2] ][ unit754_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit754_1[i][4] ][ unit754_1[i][5] ] >0);
		X_contra = ( LargeX[754][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit754_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[754][0]=0; L[754][1]=1;}
			satisfiable[754][1]=satisfiable[754][1] & ((x[754] ^ 1) | (x[ unit754_1[i][0] ] ^ unit754_1[i][1]) |(x[ unit754_1[i][2] ] ^ unit754_1[i][3]));
			}
		if(X_contra>0) L[754][1]=2;
		}
	//Check all rules of unit[755][0]
	L[755][0] = LargeX[755][1]>0 ? 1 : 0;
	satisfiable[755][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit755_0[i][0] ][ unit755_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit755_0[i][2] ][ unit755_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit755_0[i][4] ][ unit755_0[i][5] ] >0);
		X_contra = ( LargeX[755][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit755_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[755][1]=0; L[755][0]=1;}
			satisfiable[755][0]=satisfiable[755][0] & ((x[755] ^ 0) | (x[ unit755_0[i][0] ] ^ unit755_0[i][1]) |(x[ unit755_0[i][2] ] ^ unit755_0[i][3]));
			}
		if(X_contra>0) L[755][0]=2;
		}
	//Check all rules of unit[755][1]
	L[755][1] = LargeX[755][0]>0 ? 1 : 0;
	satisfiable[755][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit755_1[i][0] ][ unit755_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit755_1[i][2] ][ unit755_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit755_1[i][4] ][ unit755_1[i][5] ] >0);
		X_contra = ( LargeX[755][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit755_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[755][0]=0; L[755][1]=1;}
			satisfiable[755][1]=satisfiable[755][1] & ((x[755] ^ 1) | (x[ unit755_1[i][0] ] ^ unit755_1[i][1]) |(x[ unit755_1[i][2] ] ^ unit755_1[i][3]));
			}
		if(X_contra>0) L[755][1]=2;
		}
	//Check all rules of unit[756][0]
	L[756][0] = LargeX[756][1]>0 ? 1 : 0;
	satisfiable[756][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit756_0[i][0] ][ unit756_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit756_0[i][2] ][ unit756_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit756_0[i][4] ][ unit756_0[i][5] ] >0);
		X_contra = ( LargeX[756][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit756_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[756][1]=0; L[756][0]=1;}
			satisfiable[756][0]=satisfiable[756][0] & ((x[756] ^ 0) | (x[ unit756_0[i][0] ] ^ unit756_0[i][1]) |(x[ unit756_0[i][2] ] ^ unit756_0[i][3]));
			}
		if(X_contra>0) L[756][0]=2;
		}
	//Check all rules of unit[756][1]
	L[756][1] = LargeX[756][0]>0 ? 1 : 0;
	satisfiable[756][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit756_1[i][0] ][ unit756_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit756_1[i][2] ][ unit756_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit756_1[i][4] ][ unit756_1[i][5] ] >0);
		X_contra = ( LargeX[756][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit756_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[756][0]=0; L[756][1]=1;}
			satisfiable[756][1]=satisfiable[756][1] & ((x[756] ^ 1) | (x[ unit756_1[i][0] ] ^ unit756_1[i][1]) |(x[ unit756_1[i][2] ] ^ unit756_1[i][3]));
			}
		if(X_contra>0) L[756][1]=2;
		}
	//Check all rules of unit[757][0]
	L[757][0] = LargeX[757][1]>0 ? 1 : 0;
	satisfiable[757][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit757_0[i][0] ][ unit757_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit757_0[i][2] ][ unit757_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit757_0[i][4] ][ unit757_0[i][5] ] >0);
		X_contra = ( LargeX[757][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit757_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[757][1]=0; L[757][0]=1;}
			satisfiable[757][0]=satisfiable[757][0] & ((x[757] ^ 0) | (x[ unit757_0[i][0] ] ^ unit757_0[i][1]) |(x[ unit757_0[i][2] ] ^ unit757_0[i][3]));
			}
		if(X_contra>0) L[757][0]=2;
		}
	//Check all rules of unit[757][1]
	L[757][1] = LargeX[757][0]>0 ? 1 : 0;
	satisfiable[757][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit757_1[i][0] ][ unit757_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit757_1[i][2] ][ unit757_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit757_1[i][4] ][ unit757_1[i][5] ] >0);
		X_contra = ( LargeX[757][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit757_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[757][0]=0; L[757][1]=1;}
			satisfiable[757][1]=satisfiable[757][1] & ((x[757] ^ 1) | (x[ unit757_1[i][0] ] ^ unit757_1[i][1]) |(x[ unit757_1[i][2] ] ^ unit757_1[i][3]));
			}
		if(X_contra>0) L[757][1]=2;
		}
	//Check all rules of unit[758][0]
	L[758][0] = LargeX[758][1]>0 ? 1 : 0;
	satisfiable[758][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit758_0[i][0] ][ unit758_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit758_0[i][2] ][ unit758_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit758_0[i][4] ][ unit758_0[i][5] ] >0);
		X_contra = ( LargeX[758][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit758_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[758][1]=0; L[758][0]=1;}
			satisfiable[758][0]=satisfiable[758][0] & ((x[758] ^ 0) | (x[ unit758_0[i][0] ] ^ unit758_0[i][1]) |(x[ unit758_0[i][2] ] ^ unit758_0[i][3]));
			}
		if(X_contra>0) L[758][0]=2;
		}
	//Check all rules of unit[758][1]
	L[758][1] = LargeX[758][0]>0 ? 1 : 0;
	satisfiable[758][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit758_1[i][0] ][ unit758_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit758_1[i][2] ][ unit758_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit758_1[i][4] ][ unit758_1[i][5] ] >0);
		X_contra = ( LargeX[758][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit758_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[758][0]=0; L[758][1]=1;}
			satisfiable[758][1]=satisfiable[758][1] & ((x[758] ^ 1) | (x[ unit758_1[i][0] ] ^ unit758_1[i][1]) |(x[ unit758_1[i][2] ] ^ unit758_1[i][3]));
			}
		if(X_contra>0) L[758][1]=2;
		}
	//Check all rules of unit[759][0]
	L[759][0] = LargeX[759][1]>0 ? 1 : 0;
	satisfiable[759][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit759_0[i][0] ][ unit759_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit759_0[i][2] ][ unit759_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit759_0[i][4] ][ unit759_0[i][5] ] >0);
		X_contra = ( LargeX[759][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit759_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[759][1]=0; L[759][0]=1;}
			satisfiable[759][0]=satisfiable[759][0] & ((x[759] ^ 0) | (x[ unit759_0[i][0] ] ^ unit759_0[i][1]) |(x[ unit759_0[i][2] ] ^ unit759_0[i][3]));
			}
		if(X_contra>0) L[759][0]=2;
		}
	//Check all rules of unit[759][1]
	L[759][1] = LargeX[759][0]>0 ? 1 : 0;
	satisfiable[759][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit759_1[i][0] ][ unit759_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit759_1[i][2] ][ unit759_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit759_1[i][4] ][ unit759_1[i][5] ] >0);
		X_contra = ( LargeX[759][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit759_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[759][0]=0; L[759][1]=1;}
			satisfiable[759][1]=satisfiable[759][1] & ((x[759] ^ 1) | (x[ unit759_1[i][0] ] ^ unit759_1[i][1]) |(x[ unit759_1[i][2] ] ^ unit759_1[i][3]));
			}
		if(X_contra>0) L[759][1]=2;
		}
	//Check all rules of unit[760][0]
	L[760][0] = LargeX[760][1]>0 ? 1 : 0;
	satisfiable[760][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit760_0[i][0] ][ unit760_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit760_0[i][2] ][ unit760_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit760_0[i][4] ][ unit760_0[i][5] ] >0);
		X_contra = ( LargeX[760][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit760_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[760][1]=0; L[760][0]=1;}
			satisfiable[760][0]=satisfiable[760][0] & ((x[760] ^ 0) | (x[ unit760_0[i][0] ] ^ unit760_0[i][1]) |(x[ unit760_0[i][2] ] ^ unit760_0[i][3]));
			}
		if(X_contra>0) L[760][0]=2;
		}
	//Check all rules of unit[760][1]
	L[760][1] = LargeX[760][0]>0 ? 1 : 0;
	satisfiable[760][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit760_1[i][0] ][ unit760_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit760_1[i][2] ][ unit760_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit760_1[i][4] ][ unit760_1[i][5] ] >0);
		X_contra = ( LargeX[760][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit760_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[760][0]=0; L[760][1]=1;}
			satisfiable[760][1]=satisfiable[760][1] & ((x[760] ^ 1) | (x[ unit760_1[i][0] ] ^ unit760_1[i][1]) |(x[ unit760_1[i][2] ] ^ unit760_1[i][3]));
			}
		if(X_contra>0) L[760][1]=2;
		}
	//Check all rules of unit[761][0]
	L[761][0] = LargeX[761][1]>0 ? 1 : 0;
	satisfiable[761][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit761_0[i][0] ][ unit761_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit761_0[i][2] ][ unit761_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit761_0[i][4] ][ unit761_0[i][5] ] >0);
		X_contra = ( LargeX[761][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit761_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[761][1]=0; L[761][0]=1;}
			satisfiable[761][0]=satisfiable[761][0] & ((x[761] ^ 0) | (x[ unit761_0[i][0] ] ^ unit761_0[i][1]) |(x[ unit761_0[i][2] ] ^ unit761_0[i][3]));
			}
		if(X_contra>0) L[761][0]=2;
		}
	//Check all rules of unit[761][1]
	L[761][1] = LargeX[761][0]>0 ? 1 : 0;
	satisfiable[761][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit761_1[i][0] ][ unit761_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit761_1[i][2] ][ unit761_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit761_1[i][4] ][ unit761_1[i][5] ] >0);
		X_contra = ( LargeX[761][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit761_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[761][0]=0; L[761][1]=1;}
			satisfiable[761][1]=satisfiable[761][1] & ((x[761] ^ 1) | (x[ unit761_1[i][0] ] ^ unit761_1[i][1]) |(x[ unit761_1[i][2] ] ^ unit761_1[i][3]));
			}
		if(X_contra>0) L[761][1]=2;
		}
	//Check all rules of unit[762][0]
	L[762][0] = LargeX[762][1]>0 ? 1 : 0;
	satisfiable[762][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit762_0[i][0] ][ unit762_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit762_0[i][2] ][ unit762_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit762_0[i][4] ][ unit762_0[i][5] ] >0);
		X_contra = ( LargeX[762][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit762_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[762][1]=0; L[762][0]=1;}
			satisfiable[762][0]=satisfiable[762][0] & ((x[762] ^ 0) | (x[ unit762_0[i][0] ] ^ unit762_0[i][1]) |(x[ unit762_0[i][2] ] ^ unit762_0[i][3]));
			}
		if(X_contra>0) L[762][0]=2;
		}
	//Check all rules of unit[762][1]
	L[762][1] = LargeX[762][0]>0 ? 1 : 0;
	satisfiable[762][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit762_1[i][0] ][ unit762_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit762_1[i][2] ][ unit762_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit762_1[i][4] ][ unit762_1[i][5] ] >0);
		X_contra = ( LargeX[762][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit762_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[762][0]=0; L[762][1]=1;}
			satisfiable[762][1]=satisfiable[762][1] & ((x[762] ^ 1) | (x[ unit762_1[i][0] ] ^ unit762_1[i][1]) |(x[ unit762_1[i][2] ] ^ unit762_1[i][3]));
			}
		if(X_contra>0) L[762][1]=2;
		}
	//Check all rules of unit[763][0]
	L[763][0] = LargeX[763][1]>0 ? 1 : 0;
	satisfiable[763][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit763_0[i][0] ][ unit763_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit763_0[i][2] ][ unit763_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit763_0[i][4] ][ unit763_0[i][5] ] >0);
		X_contra = ( LargeX[763][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit763_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[763][1]=0; L[763][0]=1;}
			satisfiable[763][0]=satisfiable[763][0] & ((x[763] ^ 0) | (x[ unit763_0[i][0] ] ^ unit763_0[i][1]) |(x[ unit763_0[i][2] ] ^ unit763_0[i][3]));
			}
		if(X_contra>0) L[763][0]=2;
		}
	//Check all rules of unit[763][1]
	L[763][1] = LargeX[763][0]>0 ? 1 : 0;
	satisfiable[763][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit763_1[i][0] ][ unit763_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit763_1[i][2] ][ unit763_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit763_1[i][4] ][ unit763_1[i][5] ] >0);
		X_contra = ( LargeX[763][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit763_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[763][0]=0; L[763][1]=1;}
			satisfiable[763][1]=satisfiable[763][1] & ((x[763] ^ 1) | (x[ unit763_1[i][0] ] ^ unit763_1[i][1]) |(x[ unit763_1[i][2] ] ^ unit763_1[i][3]));
			}
		if(X_contra>0) L[763][1]=2;
		}
	//Check all rules of unit[764][0]
	L[764][0] = LargeX[764][1]>0 ? 1 : 0;
	satisfiable[764][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit764_0[i][0] ][ unit764_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit764_0[i][2] ][ unit764_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit764_0[i][4] ][ unit764_0[i][5] ] >0);
		X_contra = ( LargeX[764][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit764_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[764][1]=0; L[764][0]=1;}
			satisfiable[764][0]=satisfiable[764][0] & ((x[764] ^ 0) | (x[ unit764_0[i][0] ] ^ unit764_0[i][1]) |(x[ unit764_0[i][2] ] ^ unit764_0[i][3]));
			}
		if(X_contra>0) L[764][0]=2;
		}
	//Check all rules of unit[764][1]
	L[764][1] = LargeX[764][0]>0 ? 1 : 0;
	satisfiable[764][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit764_1[i][0] ][ unit764_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit764_1[i][2] ][ unit764_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit764_1[i][4] ][ unit764_1[i][5] ] >0);
		X_contra = ( LargeX[764][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit764_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[764][0]=0; L[764][1]=1;}
			satisfiable[764][1]=satisfiable[764][1] & ((x[764] ^ 1) | (x[ unit764_1[i][0] ] ^ unit764_1[i][1]) |(x[ unit764_1[i][2] ] ^ unit764_1[i][3]));
			}
		if(X_contra>0) L[764][1]=2;
		}
	//Check all rules of unit[765][0]
	L[765][0] = LargeX[765][1]>0 ? 1 : 0;
	satisfiable[765][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit765_0[i][0] ][ unit765_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit765_0[i][2] ][ unit765_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit765_0[i][4] ][ unit765_0[i][5] ] >0);
		X_contra = ( LargeX[765][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit765_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[765][1]=0; L[765][0]=1;}
			satisfiable[765][0]=satisfiable[765][0] & ((x[765] ^ 0) | (x[ unit765_0[i][0] ] ^ unit765_0[i][1]) |(x[ unit765_0[i][2] ] ^ unit765_0[i][3]));
			}
		if(X_contra>0) L[765][0]=2;
		}
	//Check all rules of unit[765][1]
	L[765][1] = LargeX[765][0]>0 ? 1 : 0;
	satisfiable[765][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit765_1[i][0] ][ unit765_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit765_1[i][2] ][ unit765_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit765_1[i][4] ][ unit765_1[i][5] ] >0);
		X_contra = ( LargeX[765][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit765_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[765][0]=0; L[765][1]=1;}
			satisfiable[765][1]=satisfiable[765][1] & ((x[765] ^ 1) | (x[ unit765_1[i][0] ] ^ unit765_1[i][1]) |(x[ unit765_1[i][2] ] ^ unit765_1[i][3]));
			}
		if(X_contra>0) L[765][1]=2;
		}
	//Check all rules of unit[766][0]
	L[766][0] = LargeX[766][1]>0 ? 1 : 0;
	satisfiable[766][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit766_0[i][0] ][ unit766_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit766_0[i][2] ][ unit766_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit766_0[i][4] ][ unit766_0[i][5] ] >0);
		X_contra = ( LargeX[766][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit766_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[766][1]=0; L[766][0]=1;}
			satisfiable[766][0]=satisfiable[766][0] & ((x[766] ^ 0) | (x[ unit766_0[i][0] ] ^ unit766_0[i][1]) |(x[ unit766_0[i][2] ] ^ unit766_0[i][3]));
			}
		if(X_contra>0) L[766][0]=2;
		}
	//Check all rules of unit[766][1]
	L[766][1] = LargeX[766][0]>0 ? 1 : 0;
	satisfiable[766][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit766_1[i][0] ][ unit766_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit766_1[i][2] ][ unit766_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit766_1[i][4] ][ unit766_1[i][5] ] >0);
		X_contra = ( LargeX[766][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit766_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[766][0]=0; L[766][1]=1;}
			satisfiable[766][1]=satisfiable[766][1] & ((x[766] ^ 1) | (x[ unit766_1[i][0] ] ^ unit766_1[i][1]) |(x[ unit766_1[i][2] ] ^ unit766_1[i][3]));
			}
		if(X_contra>0) L[766][1]=2;
		}
	//Check all rules of unit[767][0]
	L[767][0] = LargeX[767][1]>0 ? 1 : 0;
	satisfiable[767][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit767_0[i][0] ][ unit767_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit767_0[i][2] ][ unit767_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit767_0[i][4] ][ unit767_0[i][5] ] >0);
		X_contra = ( LargeX[767][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit767_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[767][1]=0; L[767][0]=1;}
			satisfiable[767][0]=satisfiable[767][0] & ((x[767] ^ 0) | (x[ unit767_0[i][0] ] ^ unit767_0[i][1]) |(x[ unit767_0[i][2] ] ^ unit767_0[i][3]));
			}
		if(X_contra>0) L[767][0]=2;
		}
	//Check all rules of unit[767][1]
	L[767][1] = LargeX[767][0]>0 ? 1 : 0;
	satisfiable[767][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit767_1[i][0] ][ unit767_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit767_1[i][2] ][ unit767_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit767_1[i][4] ][ unit767_1[i][5] ] >0);
		X_contra = ( LargeX[767][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit767_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[767][0]=0; L[767][1]=1;}
			satisfiable[767][1]=satisfiable[767][1] & ((x[767] ^ 1) | (x[ unit767_1[i][0] ] ^ unit767_1[i][1]) |(x[ unit767_1[i][2] ] ^ unit767_1[i][3]));
			}
		if(X_contra>0) L[767][1]=2;
		}
	//Check all rules of unit[768][0]
	L[768][0] = LargeX[768][1]>0 ? 1 : 0;
	satisfiable[768][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit768_0[i][0] ][ unit768_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit768_0[i][2] ][ unit768_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit768_0[i][4] ][ unit768_0[i][5] ] >0);
		X_contra = ( LargeX[768][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit768_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[768][1]=0; L[768][0]=1;}
			satisfiable[768][0]=satisfiable[768][0] & ((x[768] ^ 0) | (x[ unit768_0[i][0] ] ^ unit768_0[i][1]) |(x[ unit768_0[i][2] ] ^ unit768_0[i][3]));
			}
		if(X_contra>0) L[768][0]=2;
		}
	//Check all rules of unit[768][1]
	L[768][1] = LargeX[768][0]>0 ? 1 : 0;
	satisfiable[768][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit768_1[i][0] ][ unit768_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit768_1[i][2] ][ unit768_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit768_1[i][4] ][ unit768_1[i][5] ] >0);
		X_contra = ( LargeX[768][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit768_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[768][0]=0; L[768][1]=1;}
			satisfiable[768][1]=satisfiable[768][1] & ((x[768] ^ 1) | (x[ unit768_1[i][0] ] ^ unit768_1[i][1]) |(x[ unit768_1[i][2] ] ^ unit768_1[i][3]));
			}
		if(X_contra>0) L[768][1]=2;
		}
	//Check all rules of unit[769][0]
	L[769][0] = LargeX[769][1]>0 ? 1 : 0;
	satisfiable[769][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit769_0[i][0] ][ unit769_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit769_0[i][2] ][ unit769_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit769_0[i][4] ][ unit769_0[i][5] ] >0);
		X_contra = ( LargeX[769][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit769_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[769][1]=0; L[769][0]=1;}
			satisfiable[769][0]=satisfiable[769][0] & ((x[769] ^ 0) | (x[ unit769_0[i][0] ] ^ unit769_0[i][1]) |(x[ unit769_0[i][2] ] ^ unit769_0[i][3]));
			}
		if(X_contra>0) L[769][0]=2;
		}
	//Check all rules of unit[769][1]
	L[769][1] = LargeX[769][0]>0 ? 1 : 0;
	satisfiable[769][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit769_1[i][0] ][ unit769_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit769_1[i][2] ][ unit769_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit769_1[i][4] ][ unit769_1[i][5] ] >0);
		X_contra = ( LargeX[769][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit769_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[769][0]=0; L[769][1]=1;}
			satisfiable[769][1]=satisfiable[769][1] & ((x[769] ^ 1) | (x[ unit769_1[i][0] ] ^ unit769_1[i][1]) |(x[ unit769_1[i][2] ] ^ unit769_1[i][3]));
			}
		if(X_contra>0) L[769][1]=2;
		}
	//Check all rules of unit[770][0]
	L[770][0] = LargeX[770][1]>0 ? 1 : 0;
	satisfiable[770][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit770_0[i][0] ][ unit770_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit770_0[i][2] ][ unit770_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit770_0[i][4] ][ unit770_0[i][5] ] >0);
		X_contra = ( LargeX[770][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit770_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[770][1]=0; L[770][0]=1;}
			satisfiable[770][0]=satisfiable[770][0] & ((x[770] ^ 0) | (x[ unit770_0[i][0] ] ^ unit770_0[i][1]) |(x[ unit770_0[i][2] ] ^ unit770_0[i][3]));
			}
		if(X_contra>0) L[770][0]=2;
		}
	//Check all rules of unit[770][1]
	L[770][1] = LargeX[770][0]>0 ? 1 : 0;
	satisfiable[770][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit770_1[i][0] ][ unit770_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit770_1[i][2] ][ unit770_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit770_1[i][4] ][ unit770_1[i][5] ] >0);
		X_contra = ( LargeX[770][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit770_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[770][0]=0; L[770][1]=1;}
			satisfiable[770][1]=satisfiable[770][1] & ((x[770] ^ 1) | (x[ unit770_1[i][0] ] ^ unit770_1[i][1]) |(x[ unit770_1[i][2] ] ^ unit770_1[i][3]));
			}
		if(X_contra>0) L[770][1]=2;
		}
	//Check all rules of unit[771][0]
	L[771][0] = LargeX[771][1]>0 ? 1 : 0;
	satisfiable[771][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit771_0[i][0] ][ unit771_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit771_0[i][2] ][ unit771_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit771_0[i][4] ][ unit771_0[i][5] ] >0);
		X_contra = ( LargeX[771][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit771_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[771][1]=0; L[771][0]=1;}
			satisfiable[771][0]=satisfiable[771][0] & ((x[771] ^ 0) | (x[ unit771_0[i][0] ] ^ unit771_0[i][1]) |(x[ unit771_0[i][2] ] ^ unit771_0[i][3]));
			}
		if(X_contra>0) L[771][0]=2;
		}
	//Check all rules of unit[771][1]
	L[771][1] = LargeX[771][0]>0 ? 1 : 0;
	satisfiable[771][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit771_1[i][0] ][ unit771_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit771_1[i][2] ][ unit771_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit771_1[i][4] ][ unit771_1[i][5] ] >0);
		X_contra = ( LargeX[771][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit771_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[771][0]=0; L[771][1]=1;}
			satisfiable[771][1]=satisfiable[771][1] & ((x[771] ^ 1) | (x[ unit771_1[i][0] ] ^ unit771_1[i][1]) |(x[ unit771_1[i][2] ] ^ unit771_1[i][3]));
			}
		if(X_contra>0) L[771][1]=2;
		}
	//Check all rules of unit[772][0]
	L[772][0] = LargeX[772][1]>0 ? 1 : 0;
	satisfiable[772][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit772_0[i][0] ][ unit772_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit772_0[i][2] ][ unit772_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit772_0[i][4] ][ unit772_0[i][5] ] >0);
		X_contra = ( LargeX[772][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit772_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[772][1]=0; L[772][0]=1;}
			satisfiable[772][0]=satisfiable[772][0] & ((x[772] ^ 0) | (x[ unit772_0[i][0] ] ^ unit772_0[i][1]) |(x[ unit772_0[i][2] ] ^ unit772_0[i][3]));
			}
		if(X_contra>0) L[772][0]=2;
		}
	//Check all rules of unit[772][1]
	L[772][1] = LargeX[772][0]>0 ? 1 : 0;
	satisfiable[772][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit772_1[i][0] ][ unit772_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit772_1[i][2] ][ unit772_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit772_1[i][4] ][ unit772_1[i][5] ] >0);
		X_contra = ( LargeX[772][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit772_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[772][0]=0; L[772][1]=1;}
			satisfiable[772][1]=satisfiable[772][1] & ((x[772] ^ 1) | (x[ unit772_1[i][0] ] ^ unit772_1[i][1]) |(x[ unit772_1[i][2] ] ^ unit772_1[i][3]));
			}
		if(X_contra>0) L[772][1]=2;
		}
	//Check all rules of unit[773][0]
	L[773][0] = LargeX[773][1]>0 ? 1 : 0;
	satisfiable[773][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit773_0[i][0] ][ unit773_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit773_0[i][2] ][ unit773_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit773_0[i][4] ][ unit773_0[i][5] ] >0);
		X_contra = ( LargeX[773][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit773_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[773][1]=0; L[773][0]=1;}
			satisfiable[773][0]=satisfiable[773][0] & ((x[773] ^ 0) | (x[ unit773_0[i][0] ] ^ unit773_0[i][1]) |(x[ unit773_0[i][2] ] ^ unit773_0[i][3]));
			}
		if(X_contra>0) L[773][0]=2;
		}
	//Check all rules of unit[773][1]
	L[773][1] = LargeX[773][0]>0 ? 1 : 0;
	satisfiable[773][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit773_1[i][0] ][ unit773_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit773_1[i][2] ][ unit773_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit773_1[i][4] ][ unit773_1[i][5] ] >0);
		X_contra = ( LargeX[773][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit773_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[773][0]=0; L[773][1]=1;}
			satisfiable[773][1]=satisfiable[773][1] & ((x[773] ^ 1) | (x[ unit773_1[i][0] ] ^ unit773_1[i][1]) |(x[ unit773_1[i][2] ] ^ unit773_1[i][3]));
			}
		if(X_contra>0) L[773][1]=2;
		}
	//Check all rules of unit[774][0]
	L[774][0] = LargeX[774][1]>0 ? 1 : 0;
	satisfiable[774][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit774_0[i][0] ][ unit774_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit774_0[i][2] ][ unit774_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit774_0[i][4] ][ unit774_0[i][5] ] >0);
		X_contra = ( LargeX[774][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit774_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[774][1]=0; L[774][0]=1;}
			satisfiable[774][0]=satisfiable[774][0] & ((x[774] ^ 0) | (x[ unit774_0[i][0] ] ^ unit774_0[i][1]) |(x[ unit774_0[i][2] ] ^ unit774_0[i][3]));
			}
		if(X_contra>0) L[774][0]=2;
		}
	//Check all rules of unit[774][1]
	L[774][1] = LargeX[774][0]>0 ? 1 : 0;
	satisfiable[774][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit774_1[i][0] ][ unit774_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit774_1[i][2] ][ unit774_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit774_1[i][4] ][ unit774_1[i][5] ] >0);
		X_contra = ( LargeX[774][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit774_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[774][0]=0; L[774][1]=1;}
			satisfiable[774][1]=satisfiable[774][1] & ((x[774] ^ 1) | (x[ unit774_1[i][0] ] ^ unit774_1[i][1]) |(x[ unit774_1[i][2] ] ^ unit774_1[i][3]));
			}
		if(X_contra>0) L[774][1]=2;
		}
	//Check all rules of unit[775][0]
	L[775][0] = LargeX[775][1]>0 ? 1 : 0;
	satisfiable[775][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit775_0[i][0] ][ unit775_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit775_0[i][2] ][ unit775_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit775_0[i][4] ][ unit775_0[i][5] ] >0);
		X_contra = ( LargeX[775][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit775_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[775][1]=0; L[775][0]=1;}
			satisfiable[775][0]=satisfiable[775][0] & ((x[775] ^ 0) | (x[ unit775_0[i][0] ] ^ unit775_0[i][1]) |(x[ unit775_0[i][2] ] ^ unit775_0[i][3]));
			}
		if(X_contra>0) L[775][0]=2;
		}
	//Check all rules of unit[775][1]
	L[775][1] = LargeX[775][0]>0 ? 1 : 0;
	satisfiable[775][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit775_1[i][0] ][ unit775_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit775_1[i][2] ][ unit775_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit775_1[i][4] ][ unit775_1[i][5] ] >0);
		X_contra = ( LargeX[775][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit775_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[775][0]=0; L[775][1]=1;}
			satisfiable[775][1]=satisfiable[775][1] & ((x[775] ^ 1) | (x[ unit775_1[i][0] ] ^ unit775_1[i][1]) |(x[ unit775_1[i][2] ] ^ unit775_1[i][3]));
			}
		if(X_contra>0) L[775][1]=2;
		}
	//Check all rules of unit[776][0]
	L[776][0] = LargeX[776][1]>0 ? 1 : 0;
	satisfiable[776][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit776_0[i][0] ][ unit776_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit776_0[i][2] ][ unit776_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit776_0[i][4] ][ unit776_0[i][5] ] >0);
		X_contra = ( LargeX[776][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit776_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[776][1]=0; L[776][0]=1;}
			satisfiable[776][0]=satisfiable[776][0] & ((x[776] ^ 0) | (x[ unit776_0[i][0] ] ^ unit776_0[i][1]) |(x[ unit776_0[i][2] ] ^ unit776_0[i][3]));
			}
		if(X_contra>0) L[776][0]=2;
		}
	//Check all rules of unit[776][1]
	L[776][1] = LargeX[776][0]>0 ? 1 : 0;
	satisfiable[776][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit776_1[i][0] ][ unit776_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit776_1[i][2] ][ unit776_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit776_1[i][4] ][ unit776_1[i][5] ] >0);
		X_contra = ( LargeX[776][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit776_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[776][0]=0; L[776][1]=1;}
			satisfiable[776][1]=satisfiable[776][1] & ((x[776] ^ 1) | (x[ unit776_1[i][0] ] ^ unit776_1[i][1]) |(x[ unit776_1[i][2] ] ^ unit776_1[i][3]));
			}
		if(X_contra>0) L[776][1]=2;
		}
	//Check all rules of unit[777][0]
	L[777][0] = LargeX[777][1]>0 ? 1 : 0;
	satisfiable[777][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit777_0[i][0] ][ unit777_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit777_0[i][2] ][ unit777_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit777_0[i][4] ][ unit777_0[i][5] ] >0);
		X_contra = ( LargeX[777][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit777_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[777][1]=0; L[777][0]=1;}
			satisfiable[777][0]=satisfiable[777][0] & ((x[777] ^ 0) | (x[ unit777_0[i][0] ] ^ unit777_0[i][1]) |(x[ unit777_0[i][2] ] ^ unit777_0[i][3]));
			}
		if(X_contra>0) L[777][0]=2;
		}
	//Check all rules of unit[777][1]
	L[777][1] = LargeX[777][0]>0 ? 1 : 0;
	satisfiable[777][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit777_1[i][0] ][ unit777_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit777_1[i][2] ][ unit777_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit777_1[i][4] ][ unit777_1[i][5] ] >0);
		X_contra = ( LargeX[777][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit777_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[777][0]=0; L[777][1]=1;}
			satisfiable[777][1]=satisfiable[777][1] & ((x[777] ^ 1) | (x[ unit777_1[i][0] ] ^ unit777_1[i][1]) |(x[ unit777_1[i][2] ] ^ unit777_1[i][3]));
			}
		if(X_contra>0) L[777][1]=2;
		}
	//Check all rules of unit[778][0]
	L[778][0] = LargeX[778][1]>0 ? 1 : 0;
	satisfiable[778][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit778_0[i][0] ][ unit778_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit778_0[i][2] ][ unit778_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit778_0[i][4] ][ unit778_0[i][5] ] >0);
		X_contra = ( LargeX[778][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit778_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[778][1]=0; L[778][0]=1;}
			satisfiable[778][0]=satisfiable[778][0] & ((x[778] ^ 0) | (x[ unit778_0[i][0] ] ^ unit778_0[i][1]) |(x[ unit778_0[i][2] ] ^ unit778_0[i][3]));
			}
		if(X_contra>0) L[778][0]=2;
		}
	//Check all rules of unit[778][1]
	L[778][1] = LargeX[778][0]>0 ? 1 : 0;
	satisfiable[778][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit778_1[i][0] ][ unit778_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit778_1[i][2] ][ unit778_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit778_1[i][4] ][ unit778_1[i][5] ] >0);
		X_contra = ( LargeX[778][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit778_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[778][0]=0; L[778][1]=1;}
			satisfiable[778][1]=satisfiable[778][1] & ((x[778] ^ 1) | (x[ unit778_1[i][0] ] ^ unit778_1[i][1]) |(x[ unit778_1[i][2] ] ^ unit778_1[i][3]));
			}
		if(X_contra>0) L[778][1]=2;
		}
	//Check all rules of unit[779][0]
	L[779][0] = LargeX[779][1]>0 ? 1 : 0;
	satisfiable[779][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit779_0[i][0] ][ unit779_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit779_0[i][2] ][ unit779_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit779_0[i][4] ][ unit779_0[i][5] ] >0);
		X_contra = ( LargeX[779][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit779_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[779][1]=0; L[779][0]=1;}
			satisfiable[779][0]=satisfiable[779][0] & ((x[779] ^ 0) | (x[ unit779_0[i][0] ] ^ unit779_0[i][1]) |(x[ unit779_0[i][2] ] ^ unit779_0[i][3]));
			}
		if(X_contra>0) L[779][0]=2;
		}
	//Check all rules of unit[779][1]
	L[779][1] = LargeX[779][0]>0 ? 1 : 0;
	satisfiable[779][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit779_1[i][0] ][ unit779_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit779_1[i][2] ][ unit779_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit779_1[i][4] ][ unit779_1[i][5] ] >0);
		X_contra = ( LargeX[779][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit779_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[779][0]=0; L[779][1]=1;}
			satisfiable[779][1]=satisfiable[779][1] & ((x[779] ^ 1) | (x[ unit779_1[i][0] ] ^ unit779_1[i][1]) |(x[ unit779_1[i][2] ] ^ unit779_1[i][3]));
			}
		if(X_contra>0) L[779][1]=2;
		}
	//Check all rules of unit[780][0]
	L[780][0] = LargeX[780][1]>0 ? 1 : 0;
	satisfiable[780][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit780_0[i][0] ][ unit780_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit780_0[i][2] ][ unit780_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit780_0[i][4] ][ unit780_0[i][5] ] >0);
		X_contra = ( LargeX[780][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit780_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[780][1]=0; L[780][0]=1;}
			satisfiable[780][0]=satisfiable[780][0] & ((x[780] ^ 0) | (x[ unit780_0[i][0] ] ^ unit780_0[i][1]) |(x[ unit780_0[i][2] ] ^ unit780_0[i][3]));
			}
		if(X_contra>0) L[780][0]=2;
		}
	//Check all rules of unit[780][1]
	L[780][1] = LargeX[780][0]>0 ? 1 : 0;
	satisfiable[780][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit780_1[i][0] ][ unit780_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit780_1[i][2] ][ unit780_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit780_1[i][4] ][ unit780_1[i][5] ] >0);
		X_contra = ( LargeX[780][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit780_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[780][0]=0; L[780][1]=1;}
			satisfiable[780][1]=satisfiable[780][1] & ((x[780] ^ 1) | (x[ unit780_1[i][0] ] ^ unit780_1[i][1]) |(x[ unit780_1[i][2] ] ^ unit780_1[i][3]));
			}
		if(X_contra>0) L[780][1]=2;
		}
	//Check all rules of unit[781][0]
	L[781][0] = LargeX[781][1]>0 ? 1 : 0;
	satisfiable[781][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit781_0[i][0] ][ unit781_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit781_0[i][2] ][ unit781_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit781_0[i][4] ][ unit781_0[i][5] ] >0);
		X_contra = ( LargeX[781][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit781_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[781][1]=0; L[781][0]=1;}
			satisfiable[781][0]=satisfiable[781][0] & ((x[781] ^ 0) | (x[ unit781_0[i][0] ] ^ unit781_0[i][1]) |(x[ unit781_0[i][2] ] ^ unit781_0[i][3]));
			}
		if(X_contra>0) L[781][0]=2;
		}
	//Check all rules of unit[781][1]
	L[781][1] = LargeX[781][0]>0 ? 1 : 0;
	satisfiable[781][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit781_1[i][0] ][ unit781_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit781_1[i][2] ][ unit781_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit781_1[i][4] ][ unit781_1[i][5] ] >0);
		X_contra = ( LargeX[781][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit781_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[781][0]=0; L[781][1]=1;}
			satisfiable[781][1]=satisfiable[781][1] & ((x[781] ^ 1) | (x[ unit781_1[i][0] ] ^ unit781_1[i][1]) |(x[ unit781_1[i][2] ] ^ unit781_1[i][3]));
			}
		if(X_contra>0) L[781][1]=2;
		}
	//Check all rules of unit[782][0]
	L[782][0] = LargeX[782][1]>0 ? 1 : 0;
	satisfiable[782][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit782_0[i][0] ][ unit782_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit782_0[i][2] ][ unit782_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit782_0[i][4] ][ unit782_0[i][5] ] >0);
		X_contra = ( LargeX[782][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit782_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[782][1]=0; L[782][0]=1;}
			satisfiable[782][0]=satisfiable[782][0] & ((x[782] ^ 0) | (x[ unit782_0[i][0] ] ^ unit782_0[i][1]) |(x[ unit782_0[i][2] ] ^ unit782_0[i][3]));
			}
		if(X_contra>0) L[782][0]=2;
		}
	//Check all rules of unit[782][1]
	L[782][1] = LargeX[782][0]>0 ? 1 : 0;
	satisfiable[782][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit782_1[i][0] ][ unit782_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit782_1[i][2] ][ unit782_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit782_1[i][4] ][ unit782_1[i][5] ] >0);
		X_contra = ( LargeX[782][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit782_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[782][0]=0; L[782][1]=1;}
			satisfiable[782][1]=satisfiable[782][1] & ((x[782] ^ 1) | (x[ unit782_1[i][0] ] ^ unit782_1[i][1]) |(x[ unit782_1[i][2] ] ^ unit782_1[i][3]));
			}
		if(X_contra>0) L[782][1]=2;
		}
	//Check all rules of unit[783][0]
	L[783][0] = LargeX[783][1]>0 ? 1 : 0;
	satisfiable[783][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit783_0[i][0] ][ unit783_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit783_0[i][2] ][ unit783_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit783_0[i][4] ][ unit783_0[i][5] ] >0);
		X_contra = ( LargeX[783][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit783_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[783][1]=0; L[783][0]=1;}
			satisfiable[783][0]=satisfiable[783][0] & ((x[783] ^ 0) | (x[ unit783_0[i][0] ] ^ unit783_0[i][1]) |(x[ unit783_0[i][2] ] ^ unit783_0[i][3]));
			}
		if(X_contra>0) L[783][0]=2;
		}
	//Check all rules of unit[783][1]
	L[783][1] = LargeX[783][0]>0 ? 1 : 0;
	satisfiable[783][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit783_1[i][0] ][ unit783_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit783_1[i][2] ][ unit783_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit783_1[i][4] ][ unit783_1[i][5] ] >0);
		X_contra = ( LargeX[783][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit783_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[783][0]=0; L[783][1]=1;}
			satisfiable[783][1]=satisfiable[783][1] & ((x[783] ^ 1) | (x[ unit783_1[i][0] ] ^ unit783_1[i][1]) |(x[ unit783_1[i][2] ] ^ unit783_1[i][3]));
			}
		if(X_contra>0) L[783][1]=2;
		}
	//Check all rules of unit[784][0]
	L[784][0] = LargeX[784][1]>0 ? 1 : 0;
	satisfiable[784][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit784_0[i][0] ][ unit784_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit784_0[i][2] ][ unit784_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit784_0[i][4] ][ unit784_0[i][5] ] >0);
		X_contra = ( LargeX[784][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit784_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[784][1]=0; L[784][0]=1;}
			satisfiable[784][0]=satisfiable[784][0] & ((x[784] ^ 0) | (x[ unit784_0[i][0] ] ^ unit784_0[i][1]) |(x[ unit784_0[i][2] ] ^ unit784_0[i][3]));
			}
		if(X_contra>0) L[784][0]=2;
		}
	//Check all rules of unit[784][1]
	L[784][1] = LargeX[784][0]>0 ? 1 : 0;
	satisfiable[784][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit784_1[i][0] ][ unit784_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit784_1[i][2] ][ unit784_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit784_1[i][4] ][ unit784_1[i][5] ] >0);
		X_contra = ( LargeX[784][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit784_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[784][0]=0; L[784][1]=1;}
			satisfiable[784][1]=satisfiable[784][1] & ((x[784] ^ 1) | (x[ unit784_1[i][0] ] ^ unit784_1[i][1]) |(x[ unit784_1[i][2] ] ^ unit784_1[i][3]));
			}
		if(X_contra>0) L[784][1]=2;
		}
	//Check all rules of unit[785][0]
	L[785][0] = LargeX[785][1]>0 ? 1 : 0;
	satisfiable[785][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit785_0[i][0] ][ unit785_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit785_0[i][2] ][ unit785_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit785_0[i][4] ][ unit785_0[i][5] ] >0);
		X_contra = ( LargeX[785][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit785_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[785][1]=0; L[785][0]=1;}
			satisfiable[785][0]=satisfiable[785][0] & ((x[785] ^ 0) | (x[ unit785_0[i][0] ] ^ unit785_0[i][1]) |(x[ unit785_0[i][2] ] ^ unit785_0[i][3]));
			}
		if(X_contra>0) L[785][0]=2;
		}
	//Check all rules of unit[785][1]
	L[785][1] = LargeX[785][0]>0 ? 1 : 0;
	satisfiable[785][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit785_1[i][0] ][ unit785_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit785_1[i][2] ][ unit785_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit785_1[i][4] ][ unit785_1[i][5] ] >0);
		X_contra = ( LargeX[785][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit785_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[785][0]=0; L[785][1]=1;}
			satisfiable[785][1]=satisfiable[785][1] & ((x[785] ^ 1) | (x[ unit785_1[i][0] ] ^ unit785_1[i][1]) |(x[ unit785_1[i][2] ] ^ unit785_1[i][3]));
			}
		if(X_contra>0) L[785][1]=2;
		}
	//Check all rules of unit[786][0]
	L[786][0] = LargeX[786][1]>0 ? 1 : 0;
	satisfiable[786][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit786_0[i][0] ][ unit786_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit786_0[i][2] ][ unit786_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit786_0[i][4] ][ unit786_0[i][5] ] >0);
		X_contra = ( LargeX[786][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit786_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[786][1]=0; L[786][0]=1;}
			satisfiable[786][0]=satisfiable[786][0] & ((x[786] ^ 0) | (x[ unit786_0[i][0] ] ^ unit786_0[i][1]) |(x[ unit786_0[i][2] ] ^ unit786_0[i][3]));
			}
		if(X_contra>0) L[786][0]=2;
		}
	//Check all rules of unit[786][1]
	L[786][1] = LargeX[786][0]>0 ? 1 : 0;
	satisfiable[786][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit786_1[i][0] ][ unit786_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit786_1[i][2] ][ unit786_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit786_1[i][4] ][ unit786_1[i][5] ] >0);
		X_contra = ( LargeX[786][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit786_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[786][0]=0; L[786][1]=1;}
			satisfiable[786][1]=satisfiable[786][1] & ((x[786] ^ 1) | (x[ unit786_1[i][0] ] ^ unit786_1[i][1]) |(x[ unit786_1[i][2] ] ^ unit786_1[i][3]));
			}
		if(X_contra>0) L[786][1]=2;
		}
	//Check all rules of unit[787][0]
	L[787][0] = LargeX[787][1]>0 ? 1 : 0;
	satisfiable[787][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit787_0[i][0] ][ unit787_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit787_0[i][2] ][ unit787_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit787_0[i][4] ][ unit787_0[i][5] ] >0);
		X_contra = ( LargeX[787][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit787_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[787][1]=0; L[787][0]=1;}
			satisfiable[787][0]=satisfiable[787][0] & ((x[787] ^ 0) | (x[ unit787_0[i][0] ] ^ unit787_0[i][1]) |(x[ unit787_0[i][2] ] ^ unit787_0[i][3]));
			}
		if(X_contra>0) L[787][0]=2;
		}
	//Check all rules of unit[787][1]
	L[787][1] = LargeX[787][0]>0 ? 1 : 0;
	satisfiable[787][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit787_1[i][0] ][ unit787_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit787_1[i][2] ][ unit787_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit787_1[i][4] ][ unit787_1[i][5] ] >0);
		X_contra = ( LargeX[787][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit787_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[787][0]=0; L[787][1]=1;}
			satisfiable[787][1]=satisfiable[787][1] & ((x[787] ^ 1) | (x[ unit787_1[i][0] ] ^ unit787_1[i][1]) |(x[ unit787_1[i][2] ] ^ unit787_1[i][3]));
			}
		if(X_contra>0) L[787][1]=2;
		}
	//Check all rules of unit[788][0]
	L[788][0] = LargeX[788][1]>0 ? 1 : 0;
	satisfiable[788][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit788_0[i][0] ][ unit788_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit788_0[i][2] ][ unit788_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit788_0[i][4] ][ unit788_0[i][5] ] >0);
		X_contra = ( LargeX[788][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit788_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[788][1]=0; L[788][0]=1;}
			satisfiable[788][0]=satisfiable[788][0] & ((x[788] ^ 0) | (x[ unit788_0[i][0] ] ^ unit788_0[i][1]) |(x[ unit788_0[i][2] ] ^ unit788_0[i][3]));
			}
		if(X_contra>0) L[788][0]=2;
		}
	//Check all rules of unit[788][1]
	L[788][1] = LargeX[788][0]>0 ? 1 : 0;
	satisfiable[788][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit788_1[i][0] ][ unit788_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit788_1[i][2] ][ unit788_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit788_1[i][4] ][ unit788_1[i][5] ] >0);
		X_contra = ( LargeX[788][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit788_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[788][0]=0; L[788][1]=1;}
			satisfiable[788][1]=satisfiable[788][1] & ((x[788] ^ 1) | (x[ unit788_1[i][0] ] ^ unit788_1[i][1]) |(x[ unit788_1[i][2] ] ^ unit788_1[i][3]));
			}
		if(X_contra>0) L[788][1]=2;
		}
	//Check all rules of unit[789][0]
	L[789][0] = LargeX[789][1]>0 ? 1 : 0;
	satisfiable[789][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit789_0[i][0] ][ unit789_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit789_0[i][2] ][ unit789_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit789_0[i][4] ][ unit789_0[i][5] ] >0);
		X_contra = ( LargeX[789][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit789_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[789][1]=0; L[789][0]=1;}
			satisfiable[789][0]=satisfiable[789][0] & ((x[789] ^ 0) | (x[ unit789_0[i][0] ] ^ unit789_0[i][1]) |(x[ unit789_0[i][2] ] ^ unit789_0[i][3]));
			}
		if(X_contra>0) L[789][0]=2;
		}
	//Check all rules of unit[789][1]
	L[789][1] = LargeX[789][0]>0 ? 1 : 0;
	satisfiable[789][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit789_1[i][0] ][ unit789_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit789_1[i][2] ][ unit789_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit789_1[i][4] ][ unit789_1[i][5] ] >0);
		X_contra = ( LargeX[789][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit789_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[789][0]=0; L[789][1]=1;}
			satisfiable[789][1]=satisfiable[789][1] & ((x[789] ^ 1) | (x[ unit789_1[i][0] ] ^ unit789_1[i][1]) |(x[ unit789_1[i][2] ] ^ unit789_1[i][3]));
			}
		if(X_contra>0) L[789][1]=2;
		}
	//Check all rules of unit[790][0]
	L[790][0] = LargeX[790][1]>0 ? 1 : 0;
	satisfiable[790][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit790_0[i][0] ][ unit790_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit790_0[i][2] ][ unit790_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit790_0[i][4] ][ unit790_0[i][5] ] >0);
		X_contra = ( LargeX[790][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit790_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[790][1]=0; L[790][0]=1;}
			satisfiable[790][0]=satisfiable[790][0] & ((x[790] ^ 0) | (x[ unit790_0[i][0] ] ^ unit790_0[i][1]) |(x[ unit790_0[i][2] ] ^ unit790_0[i][3]));
			}
		if(X_contra>0) L[790][0]=2;
		}
	//Check all rules of unit[790][1]
	L[790][1] = LargeX[790][0]>0 ? 1 : 0;
	satisfiable[790][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit790_1[i][0] ][ unit790_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit790_1[i][2] ][ unit790_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit790_1[i][4] ][ unit790_1[i][5] ] >0);
		X_contra = ( LargeX[790][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit790_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[790][0]=0; L[790][1]=1;}
			satisfiable[790][1]=satisfiable[790][1] & ((x[790] ^ 1) | (x[ unit790_1[i][0] ] ^ unit790_1[i][1]) |(x[ unit790_1[i][2] ] ^ unit790_1[i][3]));
			}
		if(X_contra>0) L[790][1]=2;
		}
	//Check all rules of unit[791][0]
	L[791][0] = LargeX[791][1]>0 ? 1 : 0;
	satisfiable[791][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit791_0[i][0] ][ unit791_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit791_0[i][2] ][ unit791_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit791_0[i][4] ][ unit791_0[i][5] ] >0);
		X_contra = ( LargeX[791][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit791_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[791][1]=0; L[791][0]=1;}
			satisfiable[791][0]=satisfiable[791][0] & ((x[791] ^ 0) | (x[ unit791_0[i][0] ] ^ unit791_0[i][1]) |(x[ unit791_0[i][2] ] ^ unit791_0[i][3]));
			}
		if(X_contra>0) L[791][0]=2;
		}
	//Check all rules of unit[791][1]
	L[791][1] = LargeX[791][0]>0 ? 1 : 0;
	satisfiable[791][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit791_1[i][0] ][ unit791_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit791_1[i][2] ][ unit791_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit791_1[i][4] ][ unit791_1[i][5] ] >0);
		X_contra = ( LargeX[791][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit791_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[791][0]=0; L[791][1]=1;}
			satisfiable[791][1]=satisfiable[791][1] & ((x[791] ^ 1) | (x[ unit791_1[i][0] ] ^ unit791_1[i][1]) |(x[ unit791_1[i][2] ] ^ unit791_1[i][3]));
			}
		if(X_contra>0) L[791][1]=2;
		}
	//Check all rules of unit[792][0]
	L[792][0] = LargeX[792][1]>0 ? 1 : 0;
	satisfiable[792][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit792_0[i][0] ][ unit792_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit792_0[i][2] ][ unit792_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit792_0[i][4] ][ unit792_0[i][5] ] >0);
		X_contra = ( LargeX[792][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit792_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[792][1]=0; L[792][0]=1;}
			satisfiable[792][0]=satisfiable[792][0] & ((x[792] ^ 0) | (x[ unit792_0[i][0] ] ^ unit792_0[i][1]) |(x[ unit792_0[i][2] ] ^ unit792_0[i][3]));
			}
		if(X_contra>0) L[792][0]=2;
		}
	//Check all rules of unit[792][1]
	L[792][1] = LargeX[792][0]>0 ? 1 : 0;
	satisfiable[792][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit792_1[i][0] ][ unit792_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit792_1[i][2] ][ unit792_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit792_1[i][4] ][ unit792_1[i][5] ] >0);
		X_contra = ( LargeX[792][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit792_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[792][0]=0; L[792][1]=1;}
			satisfiable[792][1]=satisfiable[792][1] & ((x[792] ^ 1) | (x[ unit792_1[i][0] ] ^ unit792_1[i][1]) |(x[ unit792_1[i][2] ] ^ unit792_1[i][3]));
			}
		if(X_contra>0) L[792][1]=2;
		}
	//Check all rules of unit[793][0]
	L[793][0] = LargeX[793][1]>0 ? 1 : 0;
	satisfiable[793][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit793_0[i][0] ][ unit793_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit793_0[i][2] ][ unit793_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit793_0[i][4] ][ unit793_0[i][5] ] >0);
		X_contra = ( LargeX[793][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit793_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[793][1]=0; L[793][0]=1;}
			satisfiable[793][0]=satisfiable[793][0] & ((x[793] ^ 0) | (x[ unit793_0[i][0] ] ^ unit793_0[i][1]) |(x[ unit793_0[i][2] ] ^ unit793_0[i][3]));
			}
		if(X_contra>0) L[793][0]=2;
		}
	//Check all rules of unit[793][1]
	L[793][1] = LargeX[793][0]>0 ? 1 : 0;
	satisfiable[793][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit793_1[i][0] ][ unit793_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit793_1[i][2] ][ unit793_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit793_1[i][4] ][ unit793_1[i][5] ] >0);
		X_contra = ( LargeX[793][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit793_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[793][0]=0; L[793][1]=1;}
			satisfiable[793][1]=satisfiable[793][1] & ((x[793] ^ 1) | (x[ unit793_1[i][0] ] ^ unit793_1[i][1]) |(x[ unit793_1[i][2] ] ^ unit793_1[i][3]));
			}
		if(X_contra>0) L[793][1]=2;
		}
	//Check all rules of unit[794][0]
	L[794][0] = LargeX[794][1]>0 ? 1 : 0;
	satisfiable[794][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit794_0[i][0] ][ unit794_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit794_0[i][2] ][ unit794_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit794_0[i][4] ][ unit794_0[i][5] ] >0);
		X_contra = ( LargeX[794][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit794_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[794][1]=0; L[794][0]=1;}
			satisfiable[794][0]=satisfiable[794][0] & ((x[794] ^ 0) | (x[ unit794_0[i][0] ] ^ unit794_0[i][1]) |(x[ unit794_0[i][2] ] ^ unit794_0[i][3]));
			}
		if(X_contra>0) L[794][0]=2;
		}
	//Check all rules of unit[794][1]
	L[794][1] = LargeX[794][0]>0 ? 1 : 0;
	satisfiable[794][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit794_1[i][0] ][ unit794_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit794_1[i][2] ][ unit794_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit794_1[i][4] ][ unit794_1[i][5] ] >0);
		X_contra = ( LargeX[794][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit794_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[794][0]=0; L[794][1]=1;}
			satisfiable[794][1]=satisfiable[794][1] & ((x[794] ^ 1) | (x[ unit794_1[i][0] ] ^ unit794_1[i][1]) |(x[ unit794_1[i][2] ] ^ unit794_1[i][3]));
			}
		if(X_contra>0) L[794][1]=2;
		}
	//Check all rules of unit[795][0]
	L[795][0] = LargeX[795][1]>0 ? 1 : 0;
	satisfiable[795][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit795_0[i][0] ][ unit795_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit795_0[i][2] ][ unit795_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit795_0[i][4] ][ unit795_0[i][5] ] >0);
		X_contra = ( LargeX[795][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit795_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[795][1]=0; L[795][0]=1;}
			satisfiable[795][0]=satisfiable[795][0] & ((x[795] ^ 0) | (x[ unit795_0[i][0] ] ^ unit795_0[i][1]) |(x[ unit795_0[i][2] ] ^ unit795_0[i][3]));
			}
		if(X_contra>0) L[795][0]=2;
		}
	//Check all rules of unit[795][1]
	L[795][1] = LargeX[795][0]>0 ? 1 : 0;
	satisfiable[795][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit795_1[i][0] ][ unit795_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit795_1[i][2] ][ unit795_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit795_1[i][4] ][ unit795_1[i][5] ] >0);
		X_contra = ( LargeX[795][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit795_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[795][0]=0; L[795][1]=1;}
			satisfiable[795][1]=satisfiable[795][1] & ((x[795] ^ 1) | (x[ unit795_1[i][0] ] ^ unit795_1[i][1]) |(x[ unit795_1[i][2] ] ^ unit795_1[i][3]));
			}
		if(X_contra>0) L[795][1]=2;
		}
	//Check all rules of unit[796][0]
	L[796][0] = LargeX[796][1]>0 ? 1 : 0;
	satisfiable[796][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit796_0[i][0] ][ unit796_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit796_0[i][2] ][ unit796_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit796_0[i][4] ][ unit796_0[i][5] ] >0);
		X_contra = ( LargeX[796][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit796_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[796][1]=0; L[796][0]=1;}
			satisfiable[796][0]=satisfiable[796][0] & ((x[796] ^ 0) | (x[ unit796_0[i][0] ] ^ unit796_0[i][1]) |(x[ unit796_0[i][2] ] ^ unit796_0[i][3]));
			}
		if(X_contra>0) L[796][0]=2;
		}
	//Check all rules of unit[796][1]
	L[796][1] = LargeX[796][0]>0 ? 1 : 0;
	satisfiable[796][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit796_1[i][0] ][ unit796_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit796_1[i][2] ][ unit796_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit796_1[i][4] ][ unit796_1[i][5] ] >0);
		X_contra = ( LargeX[796][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit796_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[796][0]=0; L[796][1]=1;}
			satisfiable[796][1]=satisfiable[796][1] & ((x[796] ^ 1) | (x[ unit796_1[i][0] ] ^ unit796_1[i][1]) |(x[ unit796_1[i][2] ] ^ unit796_1[i][3]));
			}
		if(X_contra>0) L[796][1]=2;
		}
	//Check all rules of unit[797][0]
	L[797][0] = LargeX[797][1]>0 ? 1 : 0;
	satisfiable[797][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit797_0[i][0] ][ unit797_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit797_0[i][2] ][ unit797_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit797_0[i][4] ][ unit797_0[i][5] ] >0);
		X_contra = ( LargeX[797][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit797_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[797][1]=0; L[797][0]=1;}
			satisfiable[797][0]=satisfiable[797][0] & ((x[797] ^ 0) | (x[ unit797_0[i][0] ] ^ unit797_0[i][1]) |(x[ unit797_0[i][2] ] ^ unit797_0[i][3]));
			}
		if(X_contra>0) L[797][0]=2;
		}
	//Check all rules of unit[797][1]
	L[797][1] = LargeX[797][0]>0 ? 1 : 0;
	satisfiable[797][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit797_1[i][0] ][ unit797_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit797_1[i][2] ][ unit797_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit797_1[i][4] ][ unit797_1[i][5] ] >0);
		X_contra = ( LargeX[797][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit797_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[797][0]=0; L[797][1]=1;}
			satisfiable[797][1]=satisfiable[797][1] & ((x[797] ^ 1) | (x[ unit797_1[i][0] ] ^ unit797_1[i][1]) |(x[ unit797_1[i][2] ] ^ unit797_1[i][3]));
			}
		if(X_contra>0) L[797][1]=2;
		}
	//Check all rules of unit[798][0]
	L[798][0] = LargeX[798][1]>0 ? 1 : 0;
	satisfiable[798][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit798_0[i][0] ][ unit798_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit798_0[i][2] ][ unit798_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit798_0[i][4] ][ unit798_0[i][5] ] >0);
		X_contra = ( LargeX[798][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit798_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[798][1]=0; L[798][0]=1;}
			satisfiable[798][0]=satisfiable[798][0] & ((x[798] ^ 0) | (x[ unit798_0[i][0] ] ^ unit798_0[i][1]) |(x[ unit798_0[i][2] ] ^ unit798_0[i][3]));
			}
		if(X_contra>0) L[798][0]=2;
		}
	//Check all rules of unit[798][1]
	L[798][1] = LargeX[798][0]>0 ? 1 : 0;
	satisfiable[798][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit798_1[i][0] ][ unit798_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit798_1[i][2] ][ unit798_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit798_1[i][4] ][ unit798_1[i][5] ] >0);
		X_contra = ( LargeX[798][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit798_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[798][0]=0; L[798][1]=1;}
			satisfiable[798][1]=satisfiable[798][1] & ((x[798] ^ 1) | (x[ unit798_1[i][0] ] ^ unit798_1[i][1]) |(x[ unit798_1[i][2] ] ^ unit798_1[i][3]));
			}
		if(X_contra>0) L[798][1]=2;
		}
	//Check all rules of unit[799][0]
	L[799][0] = LargeX[799][1]>0 ? 1 : 0;
	satisfiable[799][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit799_0[i][0] ][ unit799_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit799_0[i][2] ][ unit799_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit799_0[i][4] ][ unit799_0[i][5] ] >0);
		X_contra = ( LargeX[799][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit799_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[799][1]=0; L[799][0]=1;}
			satisfiable[799][0]=satisfiable[799][0] & ((x[799] ^ 0) | (x[ unit799_0[i][0] ] ^ unit799_0[i][1]) |(x[ unit799_0[i][2] ] ^ unit799_0[i][3]));
			}
		if(X_contra>0) L[799][0]=2;
		}
	//Check all rules of unit[799][1]
	L[799][1] = LargeX[799][0]>0 ? 1 : 0;
	satisfiable[799][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit799_1[i][0] ][ unit799_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit799_1[i][2] ][ unit799_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit799_1[i][4] ][ unit799_1[i][5] ] >0);
		X_contra = ( LargeX[799][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit799_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[799][0]=0; L[799][1]=1;}
			satisfiable[799][1]=satisfiable[799][1] & ((x[799] ^ 1) | (x[ unit799_1[i][0] ] ^ unit799_1[i][1]) |(x[ unit799_1[i][2] ] ^ unit799_1[i][3]));
			}
		if(X_contra>0) L[799][1]=2;
		}
	//Check all rules of unit[800][0]
	L[800][0] = LargeX[800][1]>0 ? 1 : 0;
	satisfiable[800][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit800_0[i][0] ][ unit800_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit800_0[i][2] ][ unit800_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit800_0[i][4] ][ unit800_0[i][5] ] >0);
		X_contra = ( LargeX[800][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit800_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[800][1]=0; L[800][0]=1;}
			satisfiable[800][0]=satisfiable[800][0] & ((x[800] ^ 0) | (x[ unit800_0[i][0] ] ^ unit800_0[i][1]) |(x[ unit800_0[i][2] ] ^ unit800_0[i][3]));
			}
		if(X_contra>0) L[800][0]=2;
		}
	//Check all rules of unit[800][1]
	L[800][1] = LargeX[800][0]>0 ? 1 : 0;
	satisfiable[800][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit800_1[i][0] ][ unit800_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit800_1[i][2] ][ unit800_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit800_1[i][4] ][ unit800_1[i][5] ] >0);
		X_contra = ( LargeX[800][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit800_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[800][0]=0; L[800][1]=1;}
			satisfiable[800][1]=satisfiable[800][1] & ((x[800] ^ 1) | (x[ unit800_1[i][0] ] ^ unit800_1[i][1]) |(x[ unit800_1[i][2] ] ^ unit800_1[i][3]));
			}
		if(X_contra>0) L[800][1]=2;
		}
	//Check all rules of unit[801][0]
	L[801][0] = LargeX[801][1]>0 ? 1 : 0;
	satisfiable[801][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit801_0[i][0] ][ unit801_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit801_0[i][2] ][ unit801_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit801_0[i][4] ][ unit801_0[i][5] ] >0);
		X_contra = ( LargeX[801][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit801_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[801][1]=0; L[801][0]=1;}
			satisfiable[801][0]=satisfiable[801][0] & ((x[801] ^ 0) | (x[ unit801_0[i][0] ] ^ unit801_0[i][1]) |(x[ unit801_0[i][2] ] ^ unit801_0[i][3]));
			}
		if(X_contra>0) L[801][0]=2;
		}
	//Check all rules of unit[801][1]
	L[801][1] = LargeX[801][0]>0 ? 1 : 0;
	satisfiable[801][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit801_1[i][0] ][ unit801_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit801_1[i][2] ][ unit801_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit801_1[i][4] ][ unit801_1[i][5] ] >0);
		X_contra = ( LargeX[801][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit801_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[801][0]=0; L[801][1]=1;}
			satisfiable[801][1]=satisfiable[801][1] & ((x[801] ^ 1) | (x[ unit801_1[i][0] ] ^ unit801_1[i][1]) |(x[ unit801_1[i][2] ] ^ unit801_1[i][3]));
			}
		if(X_contra>0) L[801][1]=2;
		}
	//Check all rules of unit[802][0]
	L[802][0] = LargeX[802][1]>0 ? 1 : 0;
	satisfiable[802][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit802_0[i][0] ][ unit802_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit802_0[i][2] ][ unit802_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit802_0[i][4] ][ unit802_0[i][5] ] >0);
		X_contra = ( LargeX[802][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit802_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[802][1]=0; L[802][0]=1;}
			satisfiable[802][0]=satisfiable[802][0] & ((x[802] ^ 0) | (x[ unit802_0[i][0] ] ^ unit802_0[i][1]) |(x[ unit802_0[i][2] ] ^ unit802_0[i][3]));
			}
		if(X_contra>0) L[802][0]=2;
		}
	//Check all rules of unit[802][1]
	L[802][1] = LargeX[802][0]>0 ? 1 : 0;
	satisfiable[802][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit802_1[i][0] ][ unit802_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit802_1[i][2] ][ unit802_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit802_1[i][4] ][ unit802_1[i][5] ] >0);
		X_contra = ( LargeX[802][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit802_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[802][0]=0; L[802][1]=1;}
			satisfiable[802][1]=satisfiable[802][1] & ((x[802] ^ 1) | (x[ unit802_1[i][0] ] ^ unit802_1[i][1]) |(x[ unit802_1[i][2] ] ^ unit802_1[i][3]));
			}
		if(X_contra>0) L[802][1]=2;
		}
	//Check all rules of unit[803][0]
	L[803][0] = LargeX[803][1]>0 ? 1 : 0;
	satisfiable[803][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit803_0[i][0] ][ unit803_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit803_0[i][2] ][ unit803_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit803_0[i][4] ][ unit803_0[i][5] ] >0);
		X_contra = ( LargeX[803][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit803_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[803][1]=0; L[803][0]=1;}
			satisfiable[803][0]=satisfiable[803][0] & ((x[803] ^ 0) | (x[ unit803_0[i][0] ] ^ unit803_0[i][1]) |(x[ unit803_0[i][2] ] ^ unit803_0[i][3]));
			}
		if(X_contra>0) L[803][0]=2;
		}
	//Check all rules of unit[803][1]
	L[803][1] = LargeX[803][0]>0 ? 1 : 0;
	satisfiable[803][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit803_1[i][0] ][ unit803_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit803_1[i][2] ][ unit803_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit803_1[i][4] ][ unit803_1[i][5] ] >0);
		X_contra = ( LargeX[803][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit803_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[803][0]=0; L[803][1]=1;}
			satisfiable[803][1]=satisfiable[803][1] & ((x[803] ^ 1) | (x[ unit803_1[i][0] ] ^ unit803_1[i][1]) |(x[ unit803_1[i][2] ] ^ unit803_1[i][3]));
			}
		if(X_contra>0) L[803][1]=2;
		}
	//Check all rules of unit[804][0]
	L[804][0] = LargeX[804][1]>0 ? 1 : 0;
	satisfiable[804][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit804_0[i][0] ][ unit804_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit804_0[i][2] ][ unit804_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit804_0[i][4] ][ unit804_0[i][5] ] >0);
		X_contra = ( LargeX[804][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit804_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[804][1]=0; L[804][0]=1;}
			satisfiable[804][0]=satisfiable[804][0] & ((x[804] ^ 0) | (x[ unit804_0[i][0] ] ^ unit804_0[i][1]) |(x[ unit804_0[i][2] ] ^ unit804_0[i][3]));
			}
		if(X_contra>0) L[804][0]=2;
		}
	//Check all rules of unit[804][1]
	L[804][1] = LargeX[804][0]>0 ? 1 : 0;
	satisfiable[804][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit804_1[i][0] ][ unit804_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit804_1[i][2] ][ unit804_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit804_1[i][4] ][ unit804_1[i][5] ] >0);
		X_contra = ( LargeX[804][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit804_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[804][0]=0; L[804][1]=1;}
			satisfiable[804][1]=satisfiable[804][1] & ((x[804] ^ 1) | (x[ unit804_1[i][0] ] ^ unit804_1[i][1]) |(x[ unit804_1[i][2] ] ^ unit804_1[i][3]));
			}
		if(X_contra>0) L[804][1]=2;
		}
	//Check all rules of unit[805][0]
	L[805][0] = LargeX[805][1]>0 ? 1 : 0;
	satisfiable[805][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit805_0[i][0] ][ unit805_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit805_0[i][2] ][ unit805_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit805_0[i][4] ][ unit805_0[i][5] ] >0);
		X_contra = ( LargeX[805][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit805_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[805][1]=0; L[805][0]=1;}
			satisfiable[805][0]=satisfiable[805][0] & ((x[805] ^ 0) | (x[ unit805_0[i][0] ] ^ unit805_0[i][1]) |(x[ unit805_0[i][2] ] ^ unit805_0[i][3]));
			}
		if(X_contra>0) L[805][0]=2;
		}
	//Check all rules of unit[805][1]
	L[805][1] = LargeX[805][0]>0 ? 1 : 0;
	satisfiable[805][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit805_1[i][0] ][ unit805_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit805_1[i][2] ][ unit805_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit805_1[i][4] ][ unit805_1[i][5] ] >0);
		X_contra = ( LargeX[805][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit805_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[805][0]=0; L[805][1]=1;}
			satisfiable[805][1]=satisfiable[805][1] & ((x[805] ^ 1) | (x[ unit805_1[i][0] ] ^ unit805_1[i][1]) |(x[ unit805_1[i][2] ] ^ unit805_1[i][3]));
			}
		if(X_contra>0) L[805][1]=2;
		}
	//Check all rules of unit[806][0]
	L[806][0] = LargeX[806][1]>0 ? 1 : 0;
	satisfiable[806][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit806_0[i][0] ][ unit806_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit806_0[i][2] ][ unit806_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit806_0[i][4] ][ unit806_0[i][5] ] >0);
		X_contra = ( LargeX[806][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit806_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[806][1]=0; L[806][0]=1;}
			satisfiable[806][0]=satisfiable[806][0] & ((x[806] ^ 0) | (x[ unit806_0[i][0] ] ^ unit806_0[i][1]) |(x[ unit806_0[i][2] ] ^ unit806_0[i][3]));
			}
		if(X_contra>0) L[806][0]=2;
		}
	//Check all rules of unit[806][1]
	L[806][1] = LargeX[806][0]>0 ? 1 : 0;
	satisfiable[806][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit806_1[i][0] ][ unit806_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit806_1[i][2] ][ unit806_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit806_1[i][4] ][ unit806_1[i][5] ] >0);
		X_contra = ( LargeX[806][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit806_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[806][0]=0; L[806][1]=1;}
			satisfiable[806][1]=satisfiable[806][1] & ((x[806] ^ 1) | (x[ unit806_1[i][0] ] ^ unit806_1[i][1]) |(x[ unit806_1[i][2] ] ^ unit806_1[i][3]));
			}
		if(X_contra>0) L[806][1]=2;
		}
	//Check all rules of unit[807][0]
	L[807][0] = LargeX[807][1]>0 ? 1 : 0;
	satisfiable[807][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit807_0[i][0] ][ unit807_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit807_0[i][2] ][ unit807_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit807_0[i][4] ][ unit807_0[i][5] ] >0);
		X_contra = ( LargeX[807][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit807_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[807][1]=0; L[807][0]=1;}
			satisfiable[807][0]=satisfiable[807][0] & ((x[807] ^ 0) | (x[ unit807_0[i][0] ] ^ unit807_0[i][1]) |(x[ unit807_0[i][2] ] ^ unit807_0[i][3]));
			}
		if(X_contra>0) L[807][0]=2;
		}
	//Check all rules of unit[807][1]
	L[807][1] = LargeX[807][0]>0 ? 1 : 0;
	satisfiable[807][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit807_1[i][0] ][ unit807_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit807_1[i][2] ][ unit807_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit807_1[i][4] ][ unit807_1[i][5] ] >0);
		X_contra = ( LargeX[807][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit807_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[807][0]=0; L[807][1]=1;}
			satisfiable[807][1]=satisfiable[807][1] & ((x[807] ^ 1) | (x[ unit807_1[i][0] ] ^ unit807_1[i][1]) |(x[ unit807_1[i][2] ] ^ unit807_1[i][3]));
			}
		if(X_contra>0) L[807][1]=2;
		}
	//Check all rules of unit[808][0]
	L[808][0] = LargeX[808][1]>0 ? 1 : 0;
	satisfiable[808][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit808_0[i][0] ][ unit808_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit808_0[i][2] ][ unit808_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit808_0[i][4] ][ unit808_0[i][5] ] >0);
		X_contra = ( LargeX[808][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit808_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[808][1]=0; L[808][0]=1;}
			satisfiable[808][0]=satisfiable[808][0] & ((x[808] ^ 0) | (x[ unit808_0[i][0] ] ^ unit808_0[i][1]) |(x[ unit808_0[i][2] ] ^ unit808_0[i][3]));
			}
		if(X_contra>0) L[808][0]=2;
		}
	//Check all rules of unit[808][1]
	L[808][1] = LargeX[808][0]>0 ? 1 : 0;
	satisfiable[808][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit808_1[i][0] ][ unit808_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit808_1[i][2] ][ unit808_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit808_1[i][4] ][ unit808_1[i][5] ] >0);
		X_contra = ( LargeX[808][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit808_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[808][0]=0; L[808][1]=1;}
			satisfiable[808][1]=satisfiable[808][1] & ((x[808] ^ 1) | (x[ unit808_1[i][0] ] ^ unit808_1[i][1]) |(x[ unit808_1[i][2] ] ^ unit808_1[i][3]));
			}
		if(X_contra>0) L[808][1]=2;
		}
	//Check all rules of unit[809][0]
	L[809][0] = LargeX[809][1]>0 ? 1 : 0;
	satisfiable[809][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit809_0[i][0] ][ unit809_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit809_0[i][2] ][ unit809_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit809_0[i][4] ][ unit809_0[i][5] ] >0);
		X_contra = ( LargeX[809][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit809_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[809][1]=0; L[809][0]=1;}
			satisfiable[809][0]=satisfiable[809][0] & ((x[809] ^ 0) | (x[ unit809_0[i][0] ] ^ unit809_0[i][1]) |(x[ unit809_0[i][2] ] ^ unit809_0[i][3]));
			}
		if(X_contra>0) L[809][0]=2;
		}
	//Check all rules of unit[809][1]
	L[809][1] = LargeX[809][0]>0 ? 1 : 0;
	satisfiable[809][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit809_1[i][0] ][ unit809_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit809_1[i][2] ][ unit809_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit809_1[i][4] ][ unit809_1[i][5] ] >0);
		X_contra = ( LargeX[809][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit809_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[809][0]=0; L[809][1]=1;}
			satisfiable[809][1]=satisfiable[809][1] & ((x[809] ^ 1) | (x[ unit809_1[i][0] ] ^ unit809_1[i][1]) |(x[ unit809_1[i][2] ] ^ unit809_1[i][3]));
			}
		if(X_contra>0) L[809][1]=2;
		}
	//Check all rules of unit[810][0]
	L[810][0] = LargeX[810][1]>0 ? 1 : 0;
	satisfiable[810][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit810_0[i][0] ][ unit810_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit810_0[i][2] ][ unit810_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit810_0[i][4] ][ unit810_0[i][5] ] >0);
		X_contra = ( LargeX[810][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit810_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[810][1]=0; L[810][0]=1;}
			satisfiable[810][0]=satisfiable[810][0] & ((x[810] ^ 0) | (x[ unit810_0[i][0] ] ^ unit810_0[i][1]) |(x[ unit810_0[i][2] ] ^ unit810_0[i][3]));
			}
		if(X_contra>0) L[810][0]=2;
		}
	//Check all rules of unit[810][1]
	L[810][1] = LargeX[810][0]>0 ? 1 : 0;
	satisfiable[810][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit810_1[i][0] ][ unit810_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit810_1[i][2] ][ unit810_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit810_1[i][4] ][ unit810_1[i][5] ] >0);
		X_contra = ( LargeX[810][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit810_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[810][0]=0; L[810][1]=1;}
			satisfiable[810][1]=satisfiable[810][1] & ((x[810] ^ 1) | (x[ unit810_1[i][0] ] ^ unit810_1[i][1]) |(x[ unit810_1[i][2] ] ^ unit810_1[i][3]));
			}
		if(X_contra>0) L[810][1]=2;
		}
	//Check all rules of unit[811][0]
	L[811][0] = LargeX[811][1]>0 ? 1 : 0;
	satisfiable[811][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit811_0[i][0] ][ unit811_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit811_0[i][2] ][ unit811_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit811_0[i][4] ][ unit811_0[i][5] ] >0);
		X_contra = ( LargeX[811][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit811_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[811][1]=0; L[811][0]=1;}
			satisfiable[811][0]=satisfiable[811][0] & ((x[811] ^ 0) | (x[ unit811_0[i][0] ] ^ unit811_0[i][1]) |(x[ unit811_0[i][2] ] ^ unit811_0[i][3]));
			}
		if(X_contra>0) L[811][0]=2;
		}
	//Check all rules of unit[811][1]
	L[811][1] = LargeX[811][0]>0 ? 1 : 0;
	satisfiable[811][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit811_1[i][0] ][ unit811_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit811_1[i][2] ][ unit811_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit811_1[i][4] ][ unit811_1[i][5] ] >0);
		X_contra = ( LargeX[811][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit811_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[811][0]=0; L[811][1]=1;}
			satisfiable[811][1]=satisfiable[811][1] & ((x[811] ^ 1) | (x[ unit811_1[i][0] ] ^ unit811_1[i][1]) |(x[ unit811_1[i][2] ] ^ unit811_1[i][3]));
			}
		if(X_contra>0) L[811][1]=2;
		}
	//Check all rules of unit[812][0]
	L[812][0] = LargeX[812][1]>0 ? 1 : 0;
	satisfiable[812][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit812_0[i][0] ][ unit812_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit812_0[i][2] ][ unit812_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit812_0[i][4] ][ unit812_0[i][5] ] >0);
		X_contra = ( LargeX[812][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit812_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[812][1]=0; L[812][0]=1;}
			satisfiable[812][0]=satisfiable[812][0] & ((x[812] ^ 0) | (x[ unit812_0[i][0] ] ^ unit812_0[i][1]) |(x[ unit812_0[i][2] ] ^ unit812_0[i][3]));
			}
		if(X_contra>0) L[812][0]=2;
		}
	//Check all rules of unit[812][1]
	L[812][1] = LargeX[812][0]>0 ? 1 : 0;
	satisfiable[812][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit812_1[i][0] ][ unit812_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit812_1[i][2] ][ unit812_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit812_1[i][4] ][ unit812_1[i][5] ] >0);
		X_contra = ( LargeX[812][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit812_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[812][0]=0; L[812][1]=1;}
			satisfiable[812][1]=satisfiable[812][1] & ((x[812] ^ 1) | (x[ unit812_1[i][0] ] ^ unit812_1[i][1]) |(x[ unit812_1[i][2] ] ^ unit812_1[i][3]));
			}
		if(X_contra>0) L[812][1]=2;
		}
	//Check all rules of unit[813][0]
	L[813][0] = LargeX[813][1]>0 ? 1 : 0;
	satisfiable[813][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit813_0[i][0] ][ unit813_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit813_0[i][2] ][ unit813_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit813_0[i][4] ][ unit813_0[i][5] ] >0);
		X_contra = ( LargeX[813][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit813_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[813][1]=0; L[813][0]=1;}
			satisfiable[813][0]=satisfiable[813][0] & ((x[813] ^ 0) | (x[ unit813_0[i][0] ] ^ unit813_0[i][1]) |(x[ unit813_0[i][2] ] ^ unit813_0[i][3]));
			}
		if(X_contra>0) L[813][0]=2;
		}
	//Check all rules of unit[813][1]
	L[813][1] = LargeX[813][0]>0 ? 1 : 0;
	satisfiable[813][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit813_1[i][0] ][ unit813_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit813_1[i][2] ][ unit813_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit813_1[i][4] ][ unit813_1[i][5] ] >0);
		X_contra = ( LargeX[813][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit813_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[813][0]=0; L[813][1]=1;}
			satisfiable[813][1]=satisfiable[813][1] & ((x[813] ^ 1) | (x[ unit813_1[i][0] ] ^ unit813_1[i][1]) |(x[ unit813_1[i][2] ] ^ unit813_1[i][3]));
			}
		if(X_contra>0) L[813][1]=2;
		}
	//Check all rules of unit[814][0]
	L[814][0] = LargeX[814][1]>0 ? 1 : 0;
	satisfiable[814][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit814_0[i][0] ][ unit814_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit814_0[i][2] ][ unit814_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit814_0[i][4] ][ unit814_0[i][5] ] >0);
		X_contra = ( LargeX[814][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit814_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[814][1]=0; L[814][0]=1;}
			satisfiable[814][0]=satisfiable[814][0] & ((x[814] ^ 0) | (x[ unit814_0[i][0] ] ^ unit814_0[i][1]) |(x[ unit814_0[i][2] ] ^ unit814_0[i][3]));
			}
		if(X_contra>0) L[814][0]=2;
		}
	//Check all rules of unit[814][1]
	L[814][1] = LargeX[814][0]>0 ? 1 : 0;
	satisfiable[814][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit814_1[i][0] ][ unit814_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit814_1[i][2] ][ unit814_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit814_1[i][4] ][ unit814_1[i][5] ] >0);
		X_contra = ( LargeX[814][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit814_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[814][0]=0; L[814][1]=1;}
			satisfiable[814][1]=satisfiable[814][1] & ((x[814] ^ 1) | (x[ unit814_1[i][0] ] ^ unit814_1[i][1]) |(x[ unit814_1[i][2] ] ^ unit814_1[i][3]));
			}
		if(X_contra>0) L[814][1]=2;
		}
	//Check all rules of unit[815][0]
	L[815][0] = LargeX[815][1]>0 ? 1 : 0;
	satisfiable[815][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit815_0[i][0] ][ unit815_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit815_0[i][2] ][ unit815_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit815_0[i][4] ][ unit815_0[i][5] ] >0);
		X_contra = ( LargeX[815][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit815_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[815][1]=0; L[815][0]=1;}
			satisfiable[815][0]=satisfiable[815][0] & ((x[815] ^ 0) | (x[ unit815_0[i][0] ] ^ unit815_0[i][1]) |(x[ unit815_0[i][2] ] ^ unit815_0[i][3]));
			}
		if(X_contra>0) L[815][0]=2;
		}
	//Check all rules of unit[815][1]
	L[815][1] = LargeX[815][0]>0 ? 1 : 0;
	satisfiable[815][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit815_1[i][0] ][ unit815_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit815_1[i][2] ][ unit815_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit815_1[i][4] ][ unit815_1[i][5] ] >0);
		X_contra = ( LargeX[815][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit815_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[815][0]=0; L[815][1]=1;}
			satisfiable[815][1]=satisfiable[815][1] & ((x[815] ^ 1) | (x[ unit815_1[i][0] ] ^ unit815_1[i][1]) |(x[ unit815_1[i][2] ] ^ unit815_1[i][3]));
			}
		if(X_contra>0) L[815][1]=2;
		}
	//Check all rules of unit[816][0]
	L[816][0] = LargeX[816][1]>0 ? 1 : 0;
	satisfiable[816][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit816_0[i][0] ][ unit816_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit816_0[i][2] ][ unit816_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit816_0[i][4] ][ unit816_0[i][5] ] >0);
		X_contra = ( LargeX[816][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit816_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[816][1]=0; L[816][0]=1;}
			satisfiable[816][0]=satisfiable[816][0] & ((x[816] ^ 0) | (x[ unit816_0[i][0] ] ^ unit816_0[i][1]) |(x[ unit816_0[i][2] ] ^ unit816_0[i][3]));
			}
		if(X_contra>0) L[816][0]=2;
		}
	//Check all rules of unit[816][1]
	L[816][1] = LargeX[816][0]>0 ? 1 : 0;
	satisfiable[816][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit816_1[i][0] ][ unit816_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit816_1[i][2] ][ unit816_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit816_1[i][4] ][ unit816_1[i][5] ] >0);
		X_contra = ( LargeX[816][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit816_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[816][0]=0; L[816][1]=1;}
			satisfiable[816][1]=satisfiable[816][1] & ((x[816] ^ 1) | (x[ unit816_1[i][0] ] ^ unit816_1[i][1]) |(x[ unit816_1[i][2] ] ^ unit816_1[i][3]));
			}
		if(X_contra>0) L[816][1]=2;
		}
	//Check all rules of unit[817][0]
	L[817][0] = LargeX[817][1]>0 ? 1 : 0;
	satisfiable[817][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit817_0[i][0] ][ unit817_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit817_0[i][2] ][ unit817_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit817_0[i][4] ][ unit817_0[i][5] ] >0);
		X_contra = ( LargeX[817][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit817_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[817][1]=0; L[817][0]=1;}
			satisfiable[817][0]=satisfiable[817][0] & ((x[817] ^ 0) | (x[ unit817_0[i][0] ] ^ unit817_0[i][1]) |(x[ unit817_0[i][2] ] ^ unit817_0[i][3]));
			}
		if(X_contra>0) L[817][0]=2;
		}
	//Check all rules of unit[817][1]
	L[817][1] = LargeX[817][0]>0 ? 1 : 0;
	satisfiable[817][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit817_1[i][0] ][ unit817_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit817_1[i][2] ][ unit817_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit817_1[i][4] ][ unit817_1[i][5] ] >0);
		X_contra = ( LargeX[817][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit817_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[817][0]=0; L[817][1]=1;}
			satisfiable[817][1]=satisfiable[817][1] & ((x[817] ^ 1) | (x[ unit817_1[i][0] ] ^ unit817_1[i][1]) |(x[ unit817_1[i][2] ] ^ unit817_1[i][3]));
			}
		if(X_contra>0) L[817][1]=2;
		}
	//Check all rules of unit[818][0]
	L[818][0] = LargeX[818][1]>0 ? 1 : 0;
	satisfiable[818][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit818_0[i][0] ][ unit818_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit818_0[i][2] ][ unit818_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit818_0[i][4] ][ unit818_0[i][5] ] >0);
		X_contra = ( LargeX[818][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit818_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[818][1]=0; L[818][0]=1;}
			satisfiable[818][0]=satisfiable[818][0] & ((x[818] ^ 0) | (x[ unit818_0[i][0] ] ^ unit818_0[i][1]) |(x[ unit818_0[i][2] ] ^ unit818_0[i][3]));
			}
		if(X_contra>0) L[818][0]=2;
		}
	//Check all rules of unit[818][1]
	L[818][1] = LargeX[818][0]>0 ? 1 : 0;
	satisfiable[818][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit818_1[i][0] ][ unit818_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit818_1[i][2] ][ unit818_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit818_1[i][4] ][ unit818_1[i][5] ] >0);
		X_contra = ( LargeX[818][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit818_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[818][0]=0; L[818][1]=1;}
			satisfiable[818][1]=satisfiable[818][1] & ((x[818] ^ 1) | (x[ unit818_1[i][0] ] ^ unit818_1[i][1]) |(x[ unit818_1[i][2] ] ^ unit818_1[i][3]));
			}
		if(X_contra>0) L[818][1]=2;
		}
	//Check all rules of unit[819][0]
	L[819][0] = LargeX[819][1]>0 ? 1 : 0;
	satisfiable[819][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit819_0[i][0] ][ unit819_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit819_0[i][2] ][ unit819_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit819_0[i][4] ][ unit819_0[i][5] ] >0);
		X_contra = ( LargeX[819][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit819_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[819][1]=0; L[819][0]=1;}
			satisfiable[819][0]=satisfiable[819][0] & ((x[819] ^ 0) | (x[ unit819_0[i][0] ] ^ unit819_0[i][1]) |(x[ unit819_0[i][2] ] ^ unit819_0[i][3]));
			}
		if(X_contra>0) L[819][0]=2;
		}
	//Check all rules of unit[819][1]
	L[819][1] = LargeX[819][0]>0 ? 1 : 0;
	satisfiable[819][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit819_1[i][0] ][ unit819_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit819_1[i][2] ][ unit819_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit819_1[i][4] ][ unit819_1[i][5] ] >0);
		X_contra = ( LargeX[819][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit819_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[819][0]=0; L[819][1]=1;}
			satisfiable[819][1]=satisfiable[819][1] & ((x[819] ^ 1) | (x[ unit819_1[i][0] ] ^ unit819_1[i][1]) |(x[ unit819_1[i][2] ] ^ unit819_1[i][3]));
			}
		if(X_contra>0) L[819][1]=2;
		}
	//Check all rules of unit[820][0]
	L[820][0] = LargeX[820][1]>0 ? 1 : 0;
	satisfiable[820][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit820_0[i][0] ][ unit820_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit820_0[i][2] ][ unit820_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit820_0[i][4] ][ unit820_0[i][5] ] >0);
		X_contra = ( LargeX[820][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit820_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[820][1]=0; L[820][0]=1;}
			satisfiable[820][0]=satisfiable[820][0] & ((x[820] ^ 0) | (x[ unit820_0[i][0] ] ^ unit820_0[i][1]) |(x[ unit820_0[i][2] ] ^ unit820_0[i][3]));
			}
		if(X_contra>0) L[820][0]=2;
		}
	//Check all rules of unit[820][1]
	L[820][1] = LargeX[820][0]>0 ? 1 : 0;
	satisfiable[820][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit820_1[i][0] ][ unit820_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit820_1[i][2] ][ unit820_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit820_1[i][4] ][ unit820_1[i][5] ] >0);
		X_contra = ( LargeX[820][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit820_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[820][0]=0; L[820][1]=1;}
			satisfiable[820][1]=satisfiable[820][1] & ((x[820] ^ 1) | (x[ unit820_1[i][0] ] ^ unit820_1[i][1]) |(x[ unit820_1[i][2] ] ^ unit820_1[i][3]));
			}
		if(X_contra>0) L[820][1]=2;
		}
	//Check all rules of unit[821][0]
	L[821][0] = LargeX[821][1]>0 ? 1 : 0;
	satisfiable[821][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit821_0[i][0] ][ unit821_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit821_0[i][2] ][ unit821_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit821_0[i][4] ][ unit821_0[i][5] ] >0);
		X_contra = ( LargeX[821][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit821_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[821][1]=0; L[821][0]=1;}
			satisfiable[821][0]=satisfiable[821][0] & ((x[821] ^ 0) | (x[ unit821_0[i][0] ] ^ unit821_0[i][1]) |(x[ unit821_0[i][2] ] ^ unit821_0[i][3]));
			}
		if(X_contra>0) L[821][0]=2;
		}
	//Check all rules of unit[821][1]
	L[821][1] = LargeX[821][0]>0 ? 1 : 0;
	satisfiable[821][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit821_1[i][0] ][ unit821_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit821_1[i][2] ][ unit821_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit821_1[i][4] ][ unit821_1[i][5] ] >0);
		X_contra = ( LargeX[821][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit821_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[821][0]=0; L[821][1]=1;}
			satisfiable[821][1]=satisfiable[821][1] & ((x[821] ^ 1) | (x[ unit821_1[i][0] ] ^ unit821_1[i][1]) |(x[ unit821_1[i][2] ] ^ unit821_1[i][3]));
			}
		if(X_contra>0) L[821][1]=2;
		}
	//Check all rules of unit[822][0]
	L[822][0] = LargeX[822][1]>0 ? 1 : 0;
	satisfiable[822][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit822_0[i][0] ][ unit822_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit822_0[i][2] ][ unit822_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit822_0[i][4] ][ unit822_0[i][5] ] >0);
		X_contra = ( LargeX[822][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit822_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[822][1]=0; L[822][0]=1;}
			satisfiable[822][0]=satisfiable[822][0] & ((x[822] ^ 0) | (x[ unit822_0[i][0] ] ^ unit822_0[i][1]) |(x[ unit822_0[i][2] ] ^ unit822_0[i][3]));
			}
		if(X_contra>0) L[822][0]=2;
		}
	//Check all rules of unit[822][1]
	L[822][1] = LargeX[822][0]>0 ? 1 : 0;
	satisfiable[822][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit822_1[i][0] ][ unit822_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit822_1[i][2] ][ unit822_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit822_1[i][4] ][ unit822_1[i][5] ] >0);
		X_contra = ( LargeX[822][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit822_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[822][0]=0; L[822][1]=1;}
			satisfiable[822][1]=satisfiable[822][1] & ((x[822] ^ 1) | (x[ unit822_1[i][0] ] ^ unit822_1[i][1]) |(x[ unit822_1[i][2] ] ^ unit822_1[i][3]));
			}
		if(X_contra>0) L[822][1]=2;
		}
	//Check all rules of unit[823][0]
	L[823][0] = LargeX[823][1]>0 ? 1 : 0;
	satisfiable[823][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit823_0[i][0] ][ unit823_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit823_0[i][2] ][ unit823_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit823_0[i][4] ][ unit823_0[i][5] ] >0);
		X_contra = ( LargeX[823][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit823_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[823][1]=0; L[823][0]=1;}
			satisfiable[823][0]=satisfiable[823][0] & ((x[823] ^ 0) | (x[ unit823_0[i][0] ] ^ unit823_0[i][1]) |(x[ unit823_0[i][2] ] ^ unit823_0[i][3]));
			}
		if(X_contra>0) L[823][0]=2;
		}
	//Check all rules of unit[823][1]
	L[823][1] = LargeX[823][0]>0 ? 1 : 0;
	satisfiable[823][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit823_1[i][0] ][ unit823_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit823_1[i][2] ][ unit823_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit823_1[i][4] ][ unit823_1[i][5] ] >0);
		X_contra = ( LargeX[823][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit823_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[823][0]=0; L[823][1]=1;}
			satisfiable[823][1]=satisfiable[823][1] & ((x[823] ^ 1) | (x[ unit823_1[i][0] ] ^ unit823_1[i][1]) |(x[ unit823_1[i][2] ] ^ unit823_1[i][3]));
			}
		if(X_contra>0) L[823][1]=2;
		}
	//Check all rules of unit[824][0]
	L[824][0] = LargeX[824][1]>0 ? 1 : 0;
	satisfiable[824][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit824_0[i][0] ][ unit824_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit824_0[i][2] ][ unit824_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit824_0[i][4] ][ unit824_0[i][5] ] >0);
		X_contra = ( LargeX[824][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit824_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[824][1]=0; L[824][0]=1;}
			satisfiable[824][0]=satisfiable[824][0] & ((x[824] ^ 0) | (x[ unit824_0[i][0] ] ^ unit824_0[i][1]) |(x[ unit824_0[i][2] ] ^ unit824_0[i][3]));
			}
		if(X_contra>0) L[824][0]=2;
		}
	//Check all rules of unit[824][1]
	L[824][1] = LargeX[824][0]>0 ? 1 : 0;
	satisfiable[824][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit824_1[i][0] ][ unit824_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit824_1[i][2] ][ unit824_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit824_1[i][4] ][ unit824_1[i][5] ] >0);
		X_contra = ( LargeX[824][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit824_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[824][0]=0; L[824][1]=1;}
			satisfiable[824][1]=satisfiable[824][1] & ((x[824] ^ 1) | (x[ unit824_1[i][0] ] ^ unit824_1[i][1]) |(x[ unit824_1[i][2] ] ^ unit824_1[i][3]));
			}
		if(X_contra>0) L[824][1]=2;
		}
	//Check all rules of unit[825][0]
	L[825][0] = LargeX[825][1]>0 ? 1 : 0;
	satisfiable[825][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit825_0[i][0] ][ unit825_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit825_0[i][2] ][ unit825_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit825_0[i][4] ][ unit825_0[i][5] ] >0);
		X_contra = ( LargeX[825][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit825_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[825][1]=0; L[825][0]=1;}
			satisfiable[825][0]=satisfiable[825][0] & ((x[825] ^ 0) | (x[ unit825_0[i][0] ] ^ unit825_0[i][1]) |(x[ unit825_0[i][2] ] ^ unit825_0[i][3]));
			}
		if(X_contra>0) L[825][0]=2;
		}
	//Check all rules of unit[825][1]
	L[825][1] = LargeX[825][0]>0 ? 1 : 0;
	satisfiable[825][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit825_1[i][0] ][ unit825_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit825_1[i][2] ][ unit825_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit825_1[i][4] ][ unit825_1[i][5] ] >0);
		X_contra = ( LargeX[825][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit825_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[825][0]=0; L[825][1]=1;}
			satisfiable[825][1]=satisfiable[825][1] & ((x[825] ^ 1) | (x[ unit825_1[i][0] ] ^ unit825_1[i][1]) |(x[ unit825_1[i][2] ] ^ unit825_1[i][3]));
			}
		if(X_contra>0) L[825][1]=2;
		}
	//Check all rules of unit[826][0]
	L[826][0] = LargeX[826][1]>0 ? 1 : 0;
	satisfiable[826][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit826_0[i][0] ][ unit826_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit826_0[i][2] ][ unit826_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit826_0[i][4] ][ unit826_0[i][5] ] >0);
		X_contra = ( LargeX[826][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit826_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[826][1]=0; L[826][0]=1;}
			satisfiable[826][0]=satisfiable[826][0] & ((x[826] ^ 0) | (x[ unit826_0[i][0] ] ^ unit826_0[i][1]) |(x[ unit826_0[i][2] ] ^ unit826_0[i][3]));
			}
		if(X_contra>0) L[826][0]=2;
		}
	//Check all rules of unit[826][1]
	L[826][1] = LargeX[826][0]>0 ? 1 : 0;
	satisfiable[826][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit826_1[i][0] ][ unit826_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit826_1[i][2] ][ unit826_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit826_1[i][4] ][ unit826_1[i][5] ] >0);
		X_contra = ( LargeX[826][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit826_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[826][0]=0; L[826][1]=1;}
			satisfiable[826][1]=satisfiable[826][1] & ((x[826] ^ 1) | (x[ unit826_1[i][0] ] ^ unit826_1[i][1]) |(x[ unit826_1[i][2] ] ^ unit826_1[i][3]));
			}
		if(X_contra>0) L[826][1]=2;
		}
	//Check all rules of unit[827][0]
	L[827][0] = LargeX[827][1]>0 ? 1 : 0;
	satisfiable[827][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit827_0[i][0] ][ unit827_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit827_0[i][2] ][ unit827_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit827_0[i][4] ][ unit827_0[i][5] ] >0);
		X_contra = ( LargeX[827][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit827_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[827][1]=0; L[827][0]=1;}
			satisfiable[827][0]=satisfiable[827][0] & ((x[827] ^ 0) | (x[ unit827_0[i][0] ] ^ unit827_0[i][1]) |(x[ unit827_0[i][2] ] ^ unit827_0[i][3]));
			}
		if(X_contra>0) L[827][0]=2;
		}
	//Check all rules of unit[827][1]
	L[827][1] = LargeX[827][0]>0 ? 1 : 0;
	satisfiable[827][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit827_1[i][0] ][ unit827_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit827_1[i][2] ][ unit827_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit827_1[i][4] ][ unit827_1[i][5] ] >0);
		X_contra = ( LargeX[827][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit827_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[827][0]=0; L[827][1]=1;}
			satisfiable[827][1]=satisfiable[827][1] & ((x[827] ^ 1) | (x[ unit827_1[i][0] ] ^ unit827_1[i][1]) |(x[ unit827_1[i][2] ] ^ unit827_1[i][3]));
			}
		if(X_contra>0) L[827][1]=2;
		}
	//Check all rules of unit[828][0]
	L[828][0] = LargeX[828][1]>0 ? 1 : 0;
	satisfiable[828][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit828_0[i][0] ][ unit828_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit828_0[i][2] ][ unit828_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit828_0[i][4] ][ unit828_0[i][5] ] >0);
		X_contra = ( LargeX[828][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit828_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[828][1]=0; L[828][0]=1;}
			satisfiable[828][0]=satisfiable[828][0] & ((x[828] ^ 0) | (x[ unit828_0[i][0] ] ^ unit828_0[i][1]) |(x[ unit828_0[i][2] ] ^ unit828_0[i][3]));
			}
		if(X_contra>0) L[828][0]=2;
		}
	//Check all rules of unit[828][1]
	L[828][1] = LargeX[828][0]>0 ? 1 : 0;
	satisfiable[828][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit828_1[i][0] ][ unit828_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit828_1[i][2] ][ unit828_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit828_1[i][4] ][ unit828_1[i][5] ] >0);
		X_contra = ( LargeX[828][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit828_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[828][0]=0; L[828][1]=1;}
			satisfiable[828][1]=satisfiable[828][1] & ((x[828] ^ 1) | (x[ unit828_1[i][0] ] ^ unit828_1[i][1]) |(x[ unit828_1[i][2] ] ^ unit828_1[i][3]));
			}
		if(X_contra>0) L[828][1]=2;
		}
	//Check all rules of unit[829][0]
	L[829][0] = LargeX[829][1]>0 ? 1 : 0;
	satisfiable[829][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit829_0[i][0] ][ unit829_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit829_0[i][2] ][ unit829_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit829_0[i][4] ][ unit829_0[i][5] ] >0);
		X_contra = ( LargeX[829][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit829_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[829][1]=0; L[829][0]=1;}
			satisfiable[829][0]=satisfiable[829][0] & ((x[829] ^ 0) | (x[ unit829_0[i][0] ] ^ unit829_0[i][1]) |(x[ unit829_0[i][2] ] ^ unit829_0[i][3]));
			}
		if(X_contra>0) L[829][0]=2;
		}
	//Check all rules of unit[829][1]
	L[829][1] = LargeX[829][0]>0 ? 1 : 0;
	satisfiable[829][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit829_1[i][0] ][ unit829_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit829_1[i][2] ][ unit829_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit829_1[i][4] ][ unit829_1[i][5] ] >0);
		X_contra = ( LargeX[829][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit829_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[829][0]=0; L[829][1]=1;}
			satisfiable[829][1]=satisfiable[829][1] & ((x[829] ^ 1) | (x[ unit829_1[i][0] ] ^ unit829_1[i][1]) |(x[ unit829_1[i][2] ] ^ unit829_1[i][3]));
			}
		if(X_contra>0) L[829][1]=2;
		}
	//Check all rules of unit[830][0]
	L[830][0] = LargeX[830][1]>0 ? 1 : 0;
	satisfiable[830][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit830_0[i][0] ][ unit830_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit830_0[i][2] ][ unit830_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit830_0[i][4] ][ unit830_0[i][5] ] >0);
		X_contra = ( LargeX[830][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit830_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[830][1]=0; L[830][0]=1;}
			satisfiable[830][0]=satisfiable[830][0] & ((x[830] ^ 0) | (x[ unit830_0[i][0] ] ^ unit830_0[i][1]) |(x[ unit830_0[i][2] ] ^ unit830_0[i][3]));
			}
		if(X_contra>0) L[830][0]=2;
		}
	//Check all rules of unit[830][1]
	L[830][1] = LargeX[830][0]>0 ? 1 : 0;
	satisfiable[830][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit830_1[i][0] ][ unit830_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit830_1[i][2] ][ unit830_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit830_1[i][4] ][ unit830_1[i][5] ] >0);
		X_contra = ( LargeX[830][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit830_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[830][0]=0; L[830][1]=1;}
			satisfiable[830][1]=satisfiable[830][1] & ((x[830] ^ 1) | (x[ unit830_1[i][0] ] ^ unit830_1[i][1]) |(x[ unit830_1[i][2] ] ^ unit830_1[i][3]));
			}
		if(X_contra>0) L[830][1]=2;
		}
	//Check all rules of unit[831][0]
	L[831][0] = LargeX[831][1]>0 ? 1 : 0;
	satisfiable[831][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit831_0[i][0] ][ unit831_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit831_0[i][2] ][ unit831_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit831_0[i][4] ][ unit831_0[i][5] ] >0);
		X_contra = ( LargeX[831][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit831_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[831][1]=0; L[831][0]=1;}
			satisfiable[831][0]=satisfiable[831][0] & ((x[831] ^ 0) | (x[ unit831_0[i][0] ] ^ unit831_0[i][1]) |(x[ unit831_0[i][2] ] ^ unit831_0[i][3]));
			}
		if(X_contra>0) L[831][0]=2;
		}
	//Check all rules of unit[831][1]
	L[831][1] = LargeX[831][0]>0 ? 1 : 0;
	satisfiable[831][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit831_1[i][0] ][ unit831_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit831_1[i][2] ][ unit831_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit831_1[i][4] ][ unit831_1[i][5] ] >0);
		X_contra = ( LargeX[831][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit831_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[831][0]=0; L[831][1]=1;}
			satisfiable[831][1]=satisfiable[831][1] & ((x[831] ^ 1) | (x[ unit831_1[i][0] ] ^ unit831_1[i][1]) |(x[ unit831_1[i][2] ] ^ unit831_1[i][3]));
			}
		if(X_contra>0) L[831][1]=2;
		}
	//Check all rules of unit[832][0]
	L[832][0] = LargeX[832][1]>0 ? 1 : 0;
	satisfiable[832][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit832_0[i][0] ][ unit832_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit832_0[i][2] ][ unit832_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit832_0[i][4] ][ unit832_0[i][5] ] >0);
		X_contra = ( LargeX[832][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit832_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[832][1]=0; L[832][0]=1;}
			satisfiable[832][0]=satisfiable[832][0] & ((x[832] ^ 0) | (x[ unit832_0[i][0] ] ^ unit832_0[i][1]) |(x[ unit832_0[i][2] ] ^ unit832_0[i][3]));
			}
		if(X_contra>0) L[832][0]=2;
		}
	//Check all rules of unit[832][1]
	L[832][1] = LargeX[832][0]>0 ? 1 : 0;
	satisfiable[832][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit832_1[i][0] ][ unit832_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit832_1[i][2] ][ unit832_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit832_1[i][4] ][ unit832_1[i][5] ] >0);
		X_contra = ( LargeX[832][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit832_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[832][0]=0; L[832][1]=1;}
			satisfiable[832][1]=satisfiable[832][1] & ((x[832] ^ 1) | (x[ unit832_1[i][0] ] ^ unit832_1[i][1]) |(x[ unit832_1[i][2] ] ^ unit832_1[i][3]));
			}
		if(X_contra>0) L[832][1]=2;
		}
	//Check all rules of unit[833][0]
	L[833][0] = LargeX[833][1]>0 ? 1 : 0;
	satisfiable[833][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit833_0[i][0] ][ unit833_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit833_0[i][2] ][ unit833_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit833_0[i][4] ][ unit833_0[i][5] ] >0);
		X_contra = ( LargeX[833][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit833_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[833][1]=0; L[833][0]=1;}
			satisfiable[833][0]=satisfiable[833][0] & ((x[833] ^ 0) | (x[ unit833_0[i][0] ] ^ unit833_0[i][1]) |(x[ unit833_0[i][2] ] ^ unit833_0[i][3]));
			}
		if(X_contra>0) L[833][0]=2;
		}
	//Check all rules of unit[833][1]
	L[833][1] = LargeX[833][0]>0 ? 1 : 0;
	satisfiable[833][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit833_1[i][0] ][ unit833_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit833_1[i][2] ][ unit833_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit833_1[i][4] ][ unit833_1[i][5] ] >0);
		X_contra = ( LargeX[833][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit833_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[833][0]=0; L[833][1]=1;}
			satisfiable[833][1]=satisfiable[833][1] & ((x[833] ^ 1) | (x[ unit833_1[i][0] ] ^ unit833_1[i][1]) |(x[ unit833_1[i][2] ] ^ unit833_1[i][3]));
			}
		if(X_contra>0) L[833][1]=2;
		}
	//Check all rules of unit[834][0]
	L[834][0] = LargeX[834][1]>0 ? 1 : 0;
	satisfiable[834][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit834_0[i][0] ][ unit834_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit834_0[i][2] ][ unit834_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit834_0[i][4] ][ unit834_0[i][5] ] >0);
		X_contra = ( LargeX[834][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit834_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[834][1]=0; L[834][0]=1;}
			satisfiable[834][0]=satisfiable[834][0] & ((x[834] ^ 0) | (x[ unit834_0[i][0] ] ^ unit834_0[i][1]) |(x[ unit834_0[i][2] ] ^ unit834_0[i][3]));
			}
		if(X_contra>0) L[834][0]=2;
		}
	//Check all rules of unit[834][1]
	L[834][1] = LargeX[834][0]>0 ? 1 : 0;
	satisfiable[834][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit834_1[i][0] ][ unit834_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit834_1[i][2] ][ unit834_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit834_1[i][4] ][ unit834_1[i][5] ] >0);
		X_contra = ( LargeX[834][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit834_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[834][0]=0; L[834][1]=1;}
			satisfiable[834][1]=satisfiable[834][1] & ((x[834] ^ 1) | (x[ unit834_1[i][0] ] ^ unit834_1[i][1]) |(x[ unit834_1[i][2] ] ^ unit834_1[i][3]));
			}
		if(X_contra>0) L[834][1]=2;
		}
	//Check all rules of unit[835][0]
	L[835][0] = LargeX[835][1]>0 ? 1 : 0;
	satisfiable[835][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit835_0[i][0] ][ unit835_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit835_0[i][2] ][ unit835_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit835_0[i][4] ][ unit835_0[i][5] ] >0);
		X_contra = ( LargeX[835][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit835_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[835][1]=0; L[835][0]=1;}
			satisfiable[835][0]=satisfiable[835][0] & ((x[835] ^ 0) | (x[ unit835_0[i][0] ] ^ unit835_0[i][1]) |(x[ unit835_0[i][2] ] ^ unit835_0[i][3]));
			}
		if(X_contra>0) L[835][0]=2;
		}
	//Check all rules of unit[835][1]
	L[835][1] = LargeX[835][0]>0 ? 1 : 0;
	satisfiable[835][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit835_1[i][0] ][ unit835_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit835_1[i][2] ][ unit835_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit835_1[i][4] ][ unit835_1[i][5] ] >0);
		X_contra = ( LargeX[835][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit835_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[835][0]=0; L[835][1]=1;}
			satisfiable[835][1]=satisfiable[835][1] & ((x[835] ^ 1) | (x[ unit835_1[i][0] ] ^ unit835_1[i][1]) |(x[ unit835_1[i][2] ] ^ unit835_1[i][3]));
			}
		if(X_contra>0) L[835][1]=2;
		}
	//Check all rules of unit[836][0]
	L[836][0] = LargeX[836][1]>0 ? 1 : 0;
	satisfiable[836][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit836_0[i][0] ][ unit836_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit836_0[i][2] ][ unit836_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit836_0[i][4] ][ unit836_0[i][5] ] >0);
		X_contra = ( LargeX[836][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit836_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[836][1]=0; L[836][0]=1;}
			satisfiable[836][0]=satisfiable[836][0] & ((x[836] ^ 0) | (x[ unit836_0[i][0] ] ^ unit836_0[i][1]) |(x[ unit836_0[i][2] ] ^ unit836_0[i][3]));
			}
		if(X_contra>0) L[836][0]=2;
		}
	//Check all rules of unit[836][1]
	L[836][1] = LargeX[836][0]>0 ? 1 : 0;
	satisfiable[836][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit836_1[i][0] ][ unit836_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit836_1[i][2] ][ unit836_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit836_1[i][4] ][ unit836_1[i][5] ] >0);
		X_contra = ( LargeX[836][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit836_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[836][0]=0; L[836][1]=1;}
			satisfiable[836][1]=satisfiable[836][1] & ((x[836] ^ 1) | (x[ unit836_1[i][0] ] ^ unit836_1[i][1]) |(x[ unit836_1[i][2] ] ^ unit836_1[i][3]));
			}
		if(X_contra>0) L[836][1]=2;
		}
	//Check all rules of unit[837][0]
	L[837][0] = LargeX[837][1]>0 ? 1 : 0;
	satisfiable[837][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit837_0[i][0] ][ unit837_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit837_0[i][2] ][ unit837_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit837_0[i][4] ][ unit837_0[i][5] ] >0);
		X_contra = ( LargeX[837][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit837_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[837][1]=0; L[837][0]=1;}
			satisfiable[837][0]=satisfiable[837][0] & ((x[837] ^ 0) | (x[ unit837_0[i][0] ] ^ unit837_0[i][1]) |(x[ unit837_0[i][2] ] ^ unit837_0[i][3]));
			}
		if(X_contra>0) L[837][0]=2;
		}
	//Check all rules of unit[837][1]
	L[837][1] = LargeX[837][0]>0 ? 1 : 0;
	satisfiable[837][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit837_1[i][0] ][ unit837_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit837_1[i][2] ][ unit837_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit837_1[i][4] ][ unit837_1[i][5] ] >0);
		X_contra = ( LargeX[837][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit837_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[837][0]=0; L[837][1]=1;}
			satisfiable[837][1]=satisfiable[837][1] & ((x[837] ^ 1) | (x[ unit837_1[i][0] ] ^ unit837_1[i][1]) |(x[ unit837_1[i][2] ] ^ unit837_1[i][3]));
			}
		if(X_contra>0) L[837][1]=2;
		}
	//Check all rules of unit[838][0]
	L[838][0] = LargeX[838][1]>0 ? 1 : 0;
	satisfiable[838][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit838_0[i][0] ][ unit838_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit838_0[i][2] ][ unit838_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit838_0[i][4] ][ unit838_0[i][5] ] >0);
		X_contra = ( LargeX[838][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit838_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[838][1]=0; L[838][0]=1;}
			satisfiable[838][0]=satisfiable[838][0] & ((x[838] ^ 0) | (x[ unit838_0[i][0] ] ^ unit838_0[i][1]) |(x[ unit838_0[i][2] ] ^ unit838_0[i][3]));
			}
		if(X_contra>0) L[838][0]=2;
		}
	//Check all rules of unit[838][1]
	L[838][1] = LargeX[838][0]>0 ? 1 : 0;
	satisfiable[838][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit838_1[i][0] ][ unit838_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit838_1[i][2] ][ unit838_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit838_1[i][4] ][ unit838_1[i][5] ] >0);
		X_contra = ( LargeX[838][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit838_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[838][0]=0; L[838][1]=1;}
			satisfiable[838][1]=satisfiable[838][1] & ((x[838] ^ 1) | (x[ unit838_1[i][0] ] ^ unit838_1[i][1]) |(x[ unit838_1[i][2] ] ^ unit838_1[i][3]));
			}
		if(X_contra>0) L[838][1]=2;
		}
	//Check all rules of unit[839][0]
	L[839][0] = LargeX[839][1]>0 ? 1 : 0;
	satisfiable[839][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit839_0[i][0] ][ unit839_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit839_0[i][2] ][ unit839_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit839_0[i][4] ][ unit839_0[i][5] ] >0);
		X_contra = ( LargeX[839][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit839_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[839][1]=0; L[839][0]=1;}
			satisfiable[839][0]=satisfiable[839][0] & ((x[839] ^ 0) | (x[ unit839_0[i][0] ] ^ unit839_0[i][1]) |(x[ unit839_0[i][2] ] ^ unit839_0[i][3]));
			}
		if(X_contra>0) L[839][0]=2;
		}
	//Check all rules of unit[839][1]
	L[839][1] = LargeX[839][0]>0 ? 1 : 0;
	satisfiable[839][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit839_1[i][0] ][ unit839_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit839_1[i][2] ][ unit839_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit839_1[i][4] ][ unit839_1[i][5] ] >0);
		X_contra = ( LargeX[839][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit839_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[839][0]=0; L[839][1]=1;}
			satisfiable[839][1]=satisfiable[839][1] & ((x[839] ^ 1) | (x[ unit839_1[i][0] ] ^ unit839_1[i][1]) |(x[ unit839_1[i][2] ] ^ unit839_1[i][3]));
			}
		if(X_contra>0) L[839][1]=2;
		}
	//Check all rules of unit[840][0]
	L[840][0] = LargeX[840][1]>0 ? 1 : 0;
	satisfiable[840][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit840_0[i][0] ][ unit840_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit840_0[i][2] ][ unit840_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit840_0[i][4] ][ unit840_0[i][5] ] >0);
		X_contra = ( LargeX[840][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit840_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[840][1]=0; L[840][0]=1;}
			satisfiable[840][0]=satisfiable[840][0] & ((x[840] ^ 0) | (x[ unit840_0[i][0] ] ^ unit840_0[i][1]) |(x[ unit840_0[i][2] ] ^ unit840_0[i][3]));
			}
		if(X_contra>0) L[840][0]=2;
		}
	//Check all rules of unit[840][1]
	L[840][1] = LargeX[840][0]>0 ? 1 : 0;
	satisfiable[840][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit840_1[i][0] ][ unit840_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit840_1[i][2] ][ unit840_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit840_1[i][4] ][ unit840_1[i][5] ] >0);
		X_contra = ( LargeX[840][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit840_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[840][0]=0; L[840][1]=1;}
			satisfiable[840][1]=satisfiable[840][1] & ((x[840] ^ 1) | (x[ unit840_1[i][0] ] ^ unit840_1[i][1]) |(x[ unit840_1[i][2] ] ^ unit840_1[i][3]));
			}
		if(X_contra>0) L[840][1]=2;
		}
	//Check all rules of unit[841][0]
	L[841][0] = LargeX[841][1]>0 ? 1 : 0;
	satisfiable[841][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit841_0[i][0] ][ unit841_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit841_0[i][2] ][ unit841_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit841_0[i][4] ][ unit841_0[i][5] ] >0);
		X_contra = ( LargeX[841][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit841_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[841][1]=0; L[841][0]=1;}
			satisfiable[841][0]=satisfiable[841][0] & ((x[841] ^ 0) | (x[ unit841_0[i][0] ] ^ unit841_0[i][1]) |(x[ unit841_0[i][2] ] ^ unit841_0[i][3]));
			}
		if(X_contra>0) L[841][0]=2;
		}
	//Check all rules of unit[841][1]
	L[841][1] = LargeX[841][0]>0 ? 1 : 0;
	satisfiable[841][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit841_1[i][0] ][ unit841_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit841_1[i][2] ][ unit841_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit841_1[i][4] ][ unit841_1[i][5] ] >0);
		X_contra = ( LargeX[841][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit841_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[841][0]=0; L[841][1]=1;}
			satisfiable[841][1]=satisfiable[841][1] & ((x[841] ^ 1) | (x[ unit841_1[i][0] ] ^ unit841_1[i][1]) |(x[ unit841_1[i][2] ] ^ unit841_1[i][3]));
			}
		if(X_contra>0) L[841][1]=2;
		}
	//Check all rules of unit[842][0]
	L[842][0] = LargeX[842][1]>0 ? 1 : 0;
	satisfiable[842][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit842_0[i][0] ][ unit842_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit842_0[i][2] ][ unit842_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit842_0[i][4] ][ unit842_0[i][5] ] >0);
		X_contra = ( LargeX[842][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit842_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[842][1]=0; L[842][0]=1;}
			satisfiable[842][0]=satisfiable[842][0] & ((x[842] ^ 0) | (x[ unit842_0[i][0] ] ^ unit842_0[i][1]) |(x[ unit842_0[i][2] ] ^ unit842_0[i][3]));
			}
		if(X_contra>0) L[842][0]=2;
		}
	//Check all rules of unit[842][1]
	L[842][1] = LargeX[842][0]>0 ? 1 : 0;
	satisfiable[842][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit842_1[i][0] ][ unit842_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit842_1[i][2] ][ unit842_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit842_1[i][4] ][ unit842_1[i][5] ] >0);
		X_contra = ( LargeX[842][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit842_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[842][0]=0; L[842][1]=1;}
			satisfiable[842][1]=satisfiable[842][1] & ((x[842] ^ 1) | (x[ unit842_1[i][0] ] ^ unit842_1[i][1]) |(x[ unit842_1[i][2] ] ^ unit842_1[i][3]));
			}
		if(X_contra>0) L[842][1]=2;
		}
	//Check all rules of unit[843][0]
	L[843][0] = LargeX[843][1]>0 ? 1 : 0;
	satisfiable[843][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit843_0[i][0] ][ unit843_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit843_0[i][2] ][ unit843_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit843_0[i][4] ][ unit843_0[i][5] ] >0);
		X_contra = ( LargeX[843][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit843_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[843][1]=0; L[843][0]=1;}
			satisfiable[843][0]=satisfiable[843][0] & ((x[843] ^ 0) | (x[ unit843_0[i][0] ] ^ unit843_0[i][1]) |(x[ unit843_0[i][2] ] ^ unit843_0[i][3]));
			}
		if(X_contra>0) L[843][0]=2;
		}
	//Check all rules of unit[843][1]
	L[843][1] = LargeX[843][0]>0 ? 1 : 0;
	satisfiable[843][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit843_1[i][0] ][ unit843_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit843_1[i][2] ][ unit843_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit843_1[i][4] ][ unit843_1[i][5] ] >0);
		X_contra = ( LargeX[843][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit843_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[843][0]=0; L[843][1]=1;}
			satisfiable[843][1]=satisfiable[843][1] & ((x[843] ^ 1) | (x[ unit843_1[i][0] ] ^ unit843_1[i][1]) |(x[ unit843_1[i][2] ] ^ unit843_1[i][3]));
			}
		if(X_contra>0) L[843][1]=2;
		}
	//Check all rules of unit[844][0]
	L[844][0] = LargeX[844][1]>0 ? 1 : 0;
	satisfiable[844][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit844_0[i][0] ][ unit844_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit844_0[i][2] ][ unit844_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit844_0[i][4] ][ unit844_0[i][5] ] >0);
		X_contra = ( LargeX[844][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit844_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[844][1]=0; L[844][0]=1;}
			satisfiable[844][0]=satisfiable[844][0] & ((x[844] ^ 0) | (x[ unit844_0[i][0] ] ^ unit844_0[i][1]) |(x[ unit844_0[i][2] ] ^ unit844_0[i][3]));
			}
		if(X_contra>0) L[844][0]=2;
		}
	//Check all rules of unit[844][1]
	L[844][1] = LargeX[844][0]>0 ? 1 : 0;
	satisfiable[844][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit844_1[i][0] ][ unit844_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit844_1[i][2] ][ unit844_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit844_1[i][4] ][ unit844_1[i][5] ] >0);
		X_contra = ( LargeX[844][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit844_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[844][0]=0; L[844][1]=1;}
			satisfiable[844][1]=satisfiable[844][1] & ((x[844] ^ 1) | (x[ unit844_1[i][0] ] ^ unit844_1[i][1]) |(x[ unit844_1[i][2] ] ^ unit844_1[i][3]));
			}
		if(X_contra>0) L[844][1]=2;
		}
	//Check all rules of unit[845][0]
	L[845][0] = LargeX[845][1]>0 ? 1 : 0;
	satisfiable[845][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit845_0[i][0] ][ unit845_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit845_0[i][2] ][ unit845_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit845_0[i][4] ][ unit845_0[i][5] ] >0);
		X_contra = ( LargeX[845][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit845_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[845][1]=0; L[845][0]=1;}
			satisfiable[845][0]=satisfiable[845][0] & ((x[845] ^ 0) | (x[ unit845_0[i][0] ] ^ unit845_0[i][1]) |(x[ unit845_0[i][2] ] ^ unit845_0[i][3]));
			}
		if(X_contra>0) L[845][0]=2;
		}
	//Check all rules of unit[845][1]
	L[845][1] = LargeX[845][0]>0 ? 1 : 0;
	satisfiable[845][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit845_1[i][0] ][ unit845_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit845_1[i][2] ][ unit845_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit845_1[i][4] ][ unit845_1[i][5] ] >0);
		X_contra = ( LargeX[845][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit845_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[845][0]=0; L[845][1]=1;}
			satisfiable[845][1]=satisfiable[845][1] & ((x[845] ^ 1) | (x[ unit845_1[i][0] ] ^ unit845_1[i][1]) |(x[ unit845_1[i][2] ] ^ unit845_1[i][3]));
			}
		if(X_contra>0) L[845][1]=2;
		}
	//Check all rules of unit[846][0]
	L[846][0] = LargeX[846][1]>0 ? 1 : 0;
	satisfiable[846][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit846_0[i][0] ][ unit846_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit846_0[i][2] ][ unit846_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit846_0[i][4] ][ unit846_0[i][5] ] >0);
		X_contra = ( LargeX[846][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit846_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[846][1]=0; L[846][0]=1;}
			satisfiable[846][0]=satisfiable[846][0] & ((x[846] ^ 0) | (x[ unit846_0[i][0] ] ^ unit846_0[i][1]) |(x[ unit846_0[i][2] ] ^ unit846_0[i][3]));
			}
		if(X_contra>0) L[846][0]=2;
		}
	//Check all rules of unit[846][1]
	L[846][1] = LargeX[846][0]>0 ? 1 : 0;
	satisfiable[846][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit846_1[i][0] ][ unit846_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit846_1[i][2] ][ unit846_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit846_1[i][4] ][ unit846_1[i][5] ] >0);
		X_contra = ( LargeX[846][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit846_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[846][0]=0; L[846][1]=1;}
			satisfiable[846][1]=satisfiable[846][1] & ((x[846] ^ 1) | (x[ unit846_1[i][0] ] ^ unit846_1[i][1]) |(x[ unit846_1[i][2] ] ^ unit846_1[i][3]));
			}
		if(X_contra>0) L[846][1]=2;
		}
	//Check all rules of unit[847][0]
	L[847][0] = LargeX[847][1]>0 ? 1 : 0;
	satisfiable[847][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit847_0[i][0] ][ unit847_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit847_0[i][2] ][ unit847_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit847_0[i][4] ][ unit847_0[i][5] ] >0);
		X_contra = ( LargeX[847][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit847_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[847][1]=0; L[847][0]=1;}
			satisfiable[847][0]=satisfiable[847][0] & ((x[847] ^ 0) | (x[ unit847_0[i][0] ] ^ unit847_0[i][1]) |(x[ unit847_0[i][2] ] ^ unit847_0[i][3]));
			}
		if(X_contra>0) L[847][0]=2;
		}
	//Check all rules of unit[847][1]
	L[847][1] = LargeX[847][0]>0 ? 1 : 0;
	satisfiable[847][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit847_1[i][0] ][ unit847_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit847_1[i][2] ][ unit847_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit847_1[i][4] ][ unit847_1[i][5] ] >0);
		X_contra = ( LargeX[847][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit847_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[847][0]=0; L[847][1]=1;}
			satisfiable[847][1]=satisfiable[847][1] & ((x[847] ^ 1) | (x[ unit847_1[i][0] ] ^ unit847_1[i][1]) |(x[ unit847_1[i][2] ] ^ unit847_1[i][3]));
			}
		if(X_contra>0) L[847][1]=2;
		}
	//Check all rules of unit[848][0]
	L[848][0] = LargeX[848][1]>0 ? 1 : 0;
	satisfiable[848][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit848_0[i][0] ][ unit848_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit848_0[i][2] ][ unit848_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit848_0[i][4] ][ unit848_0[i][5] ] >0);
		X_contra = ( LargeX[848][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit848_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[848][1]=0; L[848][0]=1;}
			satisfiable[848][0]=satisfiable[848][0] & ((x[848] ^ 0) | (x[ unit848_0[i][0] ] ^ unit848_0[i][1]) |(x[ unit848_0[i][2] ] ^ unit848_0[i][3]));
			}
		if(X_contra>0) L[848][0]=2;
		}
	//Check all rules of unit[848][1]
	L[848][1] = LargeX[848][0]>0 ? 1 : 0;
	satisfiable[848][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit848_1[i][0] ][ unit848_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit848_1[i][2] ][ unit848_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit848_1[i][4] ][ unit848_1[i][5] ] >0);
		X_contra = ( LargeX[848][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit848_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[848][0]=0; L[848][1]=1;}
			satisfiable[848][1]=satisfiable[848][1] & ((x[848] ^ 1) | (x[ unit848_1[i][0] ] ^ unit848_1[i][1]) |(x[ unit848_1[i][2] ] ^ unit848_1[i][3]));
			}
		if(X_contra>0) L[848][1]=2;
		}
	//Check all rules of unit[849][0]
	L[849][0] = LargeX[849][1]>0 ? 1 : 0;
	satisfiable[849][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit849_0[i][0] ][ unit849_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit849_0[i][2] ][ unit849_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit849_0[i][4] ][ unit849_0[i][5] ] >0);
		X_contra = ( LargeX[849][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit849_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[849][1]=0; L[849][0]=1;}
			satisfiable[849][0]=satisfiable[849][0] & ((x[849] ^ 0) | (x[ unit849_0[i][0] ] ^ unit849_0[i][1]) |(x[ unit849_0[i][2] ] ^ unit849_0[i][3]));
			}
		if(X_contra>0) L[849][0]=2;
		}
	//Check all rules of unit[849][1]
	L[849][1] = LargeX[849][0]>0 ? 1 : 0;
	satisfiable[849][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit849_1[i][0] ][ unit849_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit849_1[i][2] ][ unit849_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit849_1[i][4] ][ unit849_1[i][5] ] >0);
		X_contra = ( LargeX[849][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit849_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[849][0]=0; L[849][1]=1;}
			satisfiable[849][1]=satisfiable[849][1] & ((x[849] ^ 1) | (x[ unit849_1[i][0] ] ^ unit849_1[i][1]) |(x[ unit849_1[i][2] ] ^ unit849_1[i][3]));
			}
		if(X_contra>0) L[849][1]=2;
		}
	//Check all rules of unit[850][0]
	L[850][0] = LargeX[850][1]>0 ? 1 : 0;
	satisfiable[850][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit850_0[i][0] ][ unit850_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit850_0[i][2] ][ unit850_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit850_0[i][4] ][ unit850_0[i][5] ] >0);
		X_contra = ( LargeX[850][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit850_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[850][1]=0; L[850][0]=1;}
			satisfiable[850][0]=satisfiable[850][0] & ((x[850] ^ 0) | (x[ unit850_0[i][0] ] ^ unit850_0[i][1]) |(x[ unit850_0[i][2] ] ^ unit850_0[i][3]));
			}
		if(X_contra>0) L[850][0]=2;
		}
	//Check all rules of unit[850][1]
	L[850][1] = LargeX[850][0]>0 ? 1 : 0;
	satisfiable[850][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit850_1[i][0] ][ unit850_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit850_1[i][2] ][ unit850_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit850_1[i][4] ][ unit850_1[i][5] ] >0);
		X_contra = ( LargeX[850][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit850_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[850][0]=0; L[850][1]=1;}
			satisfiable[850][1]=satisfiable[850][1] & ((x[850] ^ 1) | (x[ unit850_1[i][0] ] ^ unit850_1[i][1]) |(x[ unit850_1[i][2] ] ^ unit850_1[i][3]));
			}
		if(X_contra>0) L[850][1]=2;
		}
	//Check all rules of unit[851][0]
	L[851][0] = LargeX[851][1]>0 ? 1 : 0;
	satisfiable[851][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit851_0[i][0] ][ unit851_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit851_0[i][2] ][ unit851_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit851_0[i][4] ][ unit851_0[i][5] ] >0);
		X_contra = ( LargeX[851][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit851_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[851][1]=0; L[851][0]=1;}
			satisfiable[851][0]=satisfiable[851][0] & ((x[851] ^ 0) | (x[ unit851_0[i][0] ] ^ unit851_0[i][1]) |(x[ unit851_0[i][2] ] ^ unit851_0[i][3]));
			}
		if(X_contra>0) L[851][0]=2;
		}
	//Check all rules of unit[851][1]
	L[851][1] = LargeX[851][0]>0 ? 1 : 0;
	satisfiable[851][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit851_1[i][0] ][ unit851_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit851_1[i][2] ][ unit851_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit851_1[i][4] ][ unit851_1[i][5] ] >0);
		X_contra = ( LargeX[851][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit851_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[851][0]=0; L[851][1]=1;}
			satisfiable[851][1]=satisfiable[851][1] & ((x[851] ^ 1) | (x[ unit851_1[i][0] ] ^ unit851_1[i][1]) |(x[ unit851_1[i][2] ] ^ unit851_1[i][3]));
			}
		if(X_contra>0) L[851][1]=2;
		}
	//Check all rules of unit[852][0]
	L[852][0] = LargeX[852][1]>0 ? 1 : 0;
	satisfiable[852][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit852_0[i][0] ][ unit852_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit852_0[i][2] ][ unit852_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit852_0[i][4] ][ unit852_0[i][5] ] >0);
		X_contra = ( LargeX[852][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit852_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[852][1]=0; L[852][0]=1;}
			satisfiable[852][0]=satisfiable[852][0] & ((x[852] ^ 0) | (x[ unit852_0[i][0] ] ^ unit852_0[i][1]) |(x[ unit852_0[i][2] ] ^ unit852_0[i][3]));
			}
		if(X_contra>0) L[852][0]=2;
		}
	//Check all rules of unit[852][1]
	L[852][1] = LargeX[852][0]>0 ? 1 : 0;
	satisfiable[852][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit852_1[i][0] ][ unit852_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit852_1[i][2] ][ unit852_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit852_1[i][4] ][ unit852_1[i][5] ] >0);
		X_contra = ( LargeX[852][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit852_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[852][0]=0; L[852][1]=1;}
			satisfiable[852][1]=satisfiable[852][1] & ((x[852] ^ 1) | (x[ unit852_1[i][0] ] ^ unit852_1[i][1]) |(x[ unit852_1[i][2] ] ^ unit852_1[i][3]));
			}
		if(X_contra>0) L[852][1]=2;
		}
	//Check all rules of unit[853][0]
	L[853][0] = LargeX[853][1]>0 ? 1 : 0;
	satisfiable[853][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit853_0[i][0] ][ unit853_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit853_0[i][2] ][ unit853_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit853_0[i][4] ][ unit853_0[i][5] ] >0);
		X_contra = ( LargeX[853][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit853_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[853][1]=0; L[853][0]=1;}
			satisfiable[853][0]=satisfiable[853][0] & ((x[853] ^ 0) | (x[ unit853_0[i][0] ] ^ unit853_0[i][1]) |(x[ unit853_0[i][2] ] ^ unit853_0[i][3]));
			}
		if(X_contra>0) L[853][0]=2;
		}
	//Check all rules of unit[853][1]
	L[853][1] = LargeX[853][0]>0 ? 1 : 0;
	satisfiable[853][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit853_1[i][0] ][ unit853_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit853_1[i][2] ][ unit853_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit853_1[i][4] ][ unit853_1[i][5] ] >0);
		X_contra = ( LargeX[853][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit853_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[853][0]=0; L[853][1]=1;}
			satisfiable[853][1]=satisfiable[853][1] & ((x[853] ^ 1) | (x[ unit853_1[i][0] ] ^ unit853_1[i][1]) |(x[ unit853_1[i][2] ] ^ unit853_1[i][3]));
			}
		if(X_contra>0) L[853][1]=2;
		}
	//Check all rules of unit[854][0]
	L[854][0] = LargeX[854][1]>0 ? 1 : 0;
	satisfiable[854][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit854_0[i][0] ][ unit854_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit854_0[i][2] ][ unit854_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit854_0[i][4] ][ unit854_0[i][5] ] >0);
		X_contra = ( LargeX[854][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit854_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[854][1]=0; L[854][0]=1;}
			satisfiable[854][0]=satisfiable[854][0] & ((x[854] ^ 0) | (x[ unit854_0[i][0] ] ^ unit854_0[i][1]) |(x[ unit854_0[i][2] ] ^ unit854_0[i][3]));
			}
		if(X_contra>0) L[854][0]=2;
		}
	//Check all rules of unit[854][1]
	L[854][1] = LargeX[854][0]>0 ? 1 : 0;
	satisfiable[854][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit854_1[i][0] ][ unit854_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit854_1[i][2] ][ unit854_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit854_1[i][4] ][ unit854_1[i][5] ] >0);
		X_contra = ( LargeX[854][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit854_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[854][0]=0; L[854][1]=1;}
			satisfiable[854][1]=satisfiable[854][1] & ((x[854] ^ 1) | (x[ unit854_1[i][0] ] ^ unit854_1[i][1]) |(x[ unit854_1[i][2] ] ^ unit854_1[i][3]));
			}
		if(X_contra>0) L[854][1]=2;
		}
	//Check all rules of unit[855][0]
	L[855][0] = LargeX[855][1]>0 ? 1 : 0;
	satisfiable[855][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit855_0[i][0] ][ unit855_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit855_0[i][2] ][ unit855_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit855_0[i][4] ][ unit855_0[i][5] ] >0);
		X_contra = ( LargeX[855][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit855_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[855][1]=0; L[855][0]=1;}
			satisfiable[855][0]=satisfiable[855][0] & ((x[855] ^ 0) | (x[ unit855_0[i][0] ] ^ unit855_0[i][1]) |(x[ unit855_0[i][2] ] ^ unit855_0[i][3]));
			}
		if(X_contra>0) L[855][0]=2;
		}
	//Check all rules of unit[855][1]
	L[855][1] = LargeX[855][0]>0 ? 1 : 0;
	satisfiable[855][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit855_1[i][0] ][ unit855_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit855_1[i][2] ][ unit855_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit855_1[i][4] ][ unit855_1[i][5] ] >0);
		X_contra = ( LargeX[855][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit855_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[855][0]=0; L[855][1]=1;}
			satisfiable[855][1]=satisfiable[855][1] & ((x[855] ^ 1) | (x[ unit855_1[i][0] ] ^ unit855_1[i][1]) |(x[ unit855_1[i][2] ] ^ unit855_1[i][3]));
			}
		if(X_contra>0) L[855][1]=2;
		}
	//Check all rules of unit[856][0]
	L[856][0] = LargeX[856][1]>0 ? 1 : 0;
	satisfiable[856][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit856_0[i][0] ][ unit856_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit856_0[i][2] ][ unit856_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit856_0[i][4] ][ unit856_0[i][5] ] >0);
		X_contra = ( LargeX[856][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit856_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[856][1]=0; L[856][0]=1;}
			satisfiable[856][0]=satisfiable[856][0] & ((x[856] ^ 0) | (x[ unit856_0[i][0] ] ^ unit856_0[i][1]) |(x[ unit856_0[i][2] ] ^ unit856_0[i][3]));
			}
		if(X_contra>0) L[856][0]=2;
		}
	//Check all rules of unit[856][1]
	L[856][1] = LargeX[856][0]>0 ? 1 : 0;
	satisfiable[856][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit856_1[i][0] ][ unit856_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit856_1[i][2] ][ unit856_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit856_1[i][4] ][ unit856_1[i][5] ] >0);
		X_contra = ( LargeX[856][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit856_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[856][0]=0; L[856][1]=1;}
			satisfiable[856][1]=satisfiable[856][1] & ((x[856] ^ 1) | (x[ unit856_1[i][0] ] ^ unit856_1[i][1]) |(x[ unit856_1[i][2] ] ^ unit856_1[i][3]));
			}
		if(X_contra>0) L[856][1]=2;
		}
	//Check all rules of unit[857][0]
	L[857][0] = LargeX[857][1]>0 ? 1 : 0;
	satisfiable[857][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit857_0[i][0] ][ unit857_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit857_0[i][2] ][ unit857_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit857_0[i][4] ][ unit857_0[i][5] ] >0);
		X_contra = ( LargeX[857][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit857_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[857][1]=0; L[857][0]=1;}
			satisfiable[857][0]=satisfiable[857][0] & ((x[857] ^ 0) | (x[ unit857_0[i][0] ] ^ unit857_0[i][1]) |(x[ unit857_0[i][2] ] ^ unit857_0[i][3]));
			}
		if(X_contra>0) L[857][0]=2;
		}
	//Check all rules of unit[857][1]
	L[857][1] = LargeX[857][0]>0 ? 1 : 0;
	satisfiable[857][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit857_1[i][0] ][ unit857_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit857_1[i][2] ][ unit857_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit857_1[i][4] ][ unit857_1[i][5] ] >0);
		X_contra = ( LargeX[857][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit857_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[857][0]=0; L[857][1]=1;}
			satisfiable[857][1]=satisfiable[857][1] & ((x[857] ^ 1) | (x[ unit857_1[i][0] ] ^ unit857_1[i][1]) |(x[ unit857_1[i][2] ] ^ unit857_1[i][3]));
			}
		if(X_contra>0) L[857][1]=2;
		}
	//Check all rules of unit[858][0]
	L[858][0] = LargeX[858][1]>0 ? 1 : 0;
	satisfiable[858][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit858_0[i][0] ][ unit858_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit858_0[i][2] ][ unit858_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit858_0[i][4] ][ unit858_0[i][5] ] >0);
		X_contra = ( LargeX[858][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit858_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[858][1]=0; L[858][0]=1;}
			satisfiable[858][0]=satisfiable[858][0] & ((x[858] ^ 0) | (x[ unit858_0[i][0] ] ^ unit858_0[i][1]) |(x[ unit858_0[i][2] ] ^ unit858_0[i][3]));
			}
		if(X_contra>0) L[858][0]=2;
		}
	//Check all rules of unit[858][1]
	L[858][1] = LargeX[858][0]>0 ? 1 : 0;
	satisfiable[858][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit858_1[i][0] ][ unit858_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit858_1[i][2] ][ unit858_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit858_1[i][4] ][ unit858_1[i][5] ] >0);
		X_contra = ( LargeX[858][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit858_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[858][0]=0; L[858][1]=1;}
			satisfiable[858][1]=satisfiable[858][1] & ((x[858] ^ 1) | (x[ unit858_1[i][0] ] ^ unit858_1[i][1]) |(x[ unit858_1[i][2] ] ^ unit858_1[i][3]));
			}
		if(X_contra>0) L[858][1]=2;
		}
	//Check all rules of unit[859][0]
	L[859][0] = LargeX[859][1]>0 ? 1 : 0;
	satisfiable[859][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit859_0[i][0] ][ unit859_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit859_0[i][2] ][ unit859_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit859_0[i][4] ][ unit859_0[i][5] ] >0);
		X_contra = ( LargeX[859][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit859_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[859][1]=0; L[859][0]=1;}
			satisfiable[859][0]=satisfiable[859][0] & ((x[859] ^ 0) | (x[ unit859_0[i][0] ] ^ unit859_0[i][1]) |(x[ unit859_0[i][2] ] ^ unit859_0[i][3]));
			}
		if(X_contra>0) L[859][0]=2;
		}
	//Check all rules of unit[859][1]
	L[859][1] = LargeX[859][0]>0 ? 1 : 0;
	satisfiable[859][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit859_1[i][0] ][ unit859_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit859_1[i][2] ][ unit859_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit859_1[i][4] ][ unit859_1[i][5] ] >0);
		X_contra = ( LargeX[859][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit859_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[859][0]=0; L[859][1]=1;}
			satisfiable[859][1]=satisfiable[859][1] & ((x[859] ^ 1) | (x[ unit859_1[i][0] ] ^ unit859_1[i][1]) |(x[ unit859_1[i][2] ] ^ unit859_1[i][3]));
			}
		if(X_contra>0) L[859][1]=2;
		}
	//Check all rules of unit[860][0]
	L[860][0] = LargeX[860][1]>0 ? 1 : 0;
	satisfiable[860][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit860_0[i][0] ][ unit860_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit860_0[i][2] ][ unit860_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit860_0[i][4] ][ unit860_0[i][5] ] >0);
		X_contra = ( LargeX[860][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit860_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[860][1]=0; L[860][0]=1;}
			satisfiable[860][0]=satisfiable[860][0] & ((x[860] ^ 0) | (x[ unit860_0[i][0] ] ^ unit860_0[i][1]) |(x[ unit860_0[i][2] ] ^ unit860_0[i][3]));
			}
		if(X_contra>0) L[860][0]=2;
		}
	//Check all rules of unit[860][1]
	L[860][1] = LargeX[860][0]>0 ? 1 : 0;
	satisfiable[860][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit860_1[i][0] ][ unit860_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit860_1[i][2] ][ unit860_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit860_1[i][4] ][ unit860_1[i][5] ] >0);
		X_contra = ( LargeX[860][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit860_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[860][0]=0; L[860][1]=1;}
			satisfiable[860][1]=satisfiable[860][1] & ((x[860] ^ 1) | (x[ unit860_1[i][0] ] ^ unit860_1[i][1]) |(x[ unit860_1[i][2] ] ^ unit860_1[i][3]));
			}
		if(X_contra>0) L[860][1]=2;
		}
	//Check all rules of unit[861][0]
	L[861][0] = LargeX[861][1]>0 ? 1 : 0;
	satisfiable[861][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit861_0[i][0] ][ unit861_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit861_0[i][2] ][ unit861_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit861_0[i][4] ][ unit861_0[i][5] ] >0);
		X_contra = ( LargeX[861][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit861_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[861][1]=0; L[861][0]=1;}
			satisfiable[861][0]=satisfiable[861][0] & ((x[861] ^ 0) | (x[ unit861_0[i][0] ] ^ unit861_0[i][1]) |(x[ unit861_0[i][2] ] ^ unit861_0[i][3]));
			}
		if(X_contra>0) L[861][0]=2;
		}
	//Check all rules of unit[861][1]
	L[861][1] = LargeX[861][0]>0 ? 1 : 0;
	satisfiable[861][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit861_1[i][0] ][ unit861_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit861_1[i][2] ][ unit861_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit861_1[i][4] ][ unit861_1[i][5] ] >0);
		X_contra = ( LargeX[861][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit861_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[861][0]=0; L[861][1]=1;}
			satisfiable[861][1]=satisfiable[861][1] & ((x[861] ^ 1) | (x[ unit861_1[i][0] ] ^ unit861_1[i][1]) |(x[ unit861_1[i][2] ] ^ unit861_1[i][3]));
			}
		if(X_contra>0) L[861][1]=2;
		}
	//Check all rules of unit[862][0]
	L[862][0] = LargeX[862][1]>0 ? 1 : 0;
	satisfiable[862][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit862_0[i][0] ][ unit862_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit862_0[i][2] ][ unit862_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit862_0[i][4] ][ unit862_0[i][5] ] >0);
		X_contra = ( LargeX[862][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit862_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[862][1]=0; L[862][0]=1;}
			satisfiable[862][0]=satisfiable[862][0] & ((x[862] ^ 0) | (x[ unit862_0[i][0] ] ^ unit862_0[i][1]) |(x[ unit862_0[i][2] ] ^ unit862_0[i][3]));
			}
		if(X_contra>0) L[862][0]=2;
		}
	//Check all rules of unit[862][1]
	L[862][1] = LargeX[862][0]>0 ? 1 : 0;
	satisfiable[862][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit862_1[i][0] ][ unit862_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit862_1[i][2] ][ unit862_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit862_1[i][4] ][ unit862_1[i][5] ] >0);
		X_contra = ( LargeX[862][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit862_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[862][0]=0; L[862][1]=1;}
			satisfiable[862][1]=satisfiable[862][1] & ((x[862] ^ 1) | (x[ unit862_1[i][0] ] ^ unit862_1[i][1]) |(x[ unit862_1[i][2] ] ^ unit862_1[i][3]));
			}
		if(X_contra>0) L[862][1]=2;
		}
	//Check all rules of unit[863][0]
	L[863][0] = LargeX[863][1]>0 ? 1 : 0;
	satisfiable[863][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit863_0[i][0] ][ unit863_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit863_0[i][2] ][ unit863_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit863_0[i][4] ][ unit863_0[i][5] ] >0);
		X_contra = ( LargeX[863][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit863_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[863][1]=0; L[863][0]=1;}
			satisfiable[863][0]=satisfiable[863][0] & ((x[863] ^ 0) | (x[ unit863_0[i][0] ] ^ unit863_0[i][1]) |(x[ unit863_0[i][2] ] ^ unit863_0[i][3]));
			}
		if(X_contra>0) L[863][0]=2;
		}
	//Check all rules of unit[863][1]
	L[863][1] = LargeX[863][0]>0 ? 1 : 0;
	satisfiable[863][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit863_1[i][0] ][ unit863_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit863_1[i][2] ][ unit863_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit863_1[i][4] ][ unit863_1[i][5] ] >0);
		X_contra = ( LargeX[863][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit863_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[863][0]=0; L[863][1]=1;}
			satisfiable[863][1]=satisfiable[863][1] & ((x[863] ^ 1) | (x[ unit863_1[i][0] ] ^ unit863_1[i][1]) |(x[ unit863_1[i][2] ] ^ unit863_1[i][3]));
			}
		if(X_contra>0) L[863][1]=2;
		}
	//Check all rules of unit[864][0]
	L[864][0] = LargeX[864][1]>0 ? 1 : 0;
	satisfiable[864][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit864_0[i][0] ][ unit864_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit864_0[i][2] ][ unit864_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit864_0[i][4] ][ unit864_0[i][5] ] >0);
		X_contra = ( LargeX[864][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit864_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[864][1]=0; L[864][0]=1;}
			satisfiable[864][0]=satisfiable[864][0] & ((x[864] ^ 0) | (x[ unit864_0[i][0] ] ^ unit864_0[i][1]) |(x[ unit864_0[i][2] ] ^ unit864_0[i][3]));
			}
		if(X_contra>0) L[864][0]=2;
		}
	//Check all rules of unit[864][1]
	L[864][1] = LargeX[864][0]>0 ? 1 : 0;
	satisfiable[864][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit864_1[i][0] ][ unit864_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit864_1[i][2] ][ unit864_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit864_1[i][4] ][ unit864_1[i][5] ] >0);
		X_contra = ( LargeX[864][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit864_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[864][0]=0; L[864][1]=1;}
			satisfiable[864][1]=satisfiable[864][1] & ((x[864] ^ 1) | (x[ unit864_1[i][0] ] ^ unit864_1[i][1]) |(x[ unit864_1[i][2] ] ^ unit864_1[i][3]));
			}
		if(X_contra>0) L[864][1]=2;
		}
	//Check all rules of unit[865][0]
	L[865][0] = LargeX[865][1]>0 ? 1 : 0;
	satisfiable[865][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit865_0[i][0] ][ unit865_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit865_0[i][2] ][ unit865_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit865_0[i][4] ][ unit865_0[i][5] ] >0);
		X_contra = ( LargeX[865][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit865_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[865][1]=0; L[865][0]=1;}
			satisfiable[865][0]=satisfiable[865][0] & ((x[865] ^ 0) | (x[ unit865_0[i][0] ] ^ unit865_0[i][1]) |(x[ unit865_0[i][2] ] ^ unit865_0[i][3]));
			}
		if(X_contra>0) L[865][0]=2;
		}
	//Check all rules of unit[865][1]
	L[865][1] = LargeX[865][0]>0 ? 1 : 0;
	satisfiable[865][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit865_1[i][0] ][ unit865_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit865_1[i][2] ][ unit865_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit865_1[i][4] ][ unit865_1[i][5] ] >0);
		X_contra = ( LargeX[865][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit865_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[865][0]=0; L[865][1]=1;}
			satisfiable[865][1]=satisfiable[865][1] & ((x[865] ^ 1) | (x[ unit865_1[i][0] ] ^ unit865_1[i][1]) |(x[ unit865_1[i][2] ] ^ unit865_1[i][3]));
			}
		if(X_contra>0) L[865][1]=2;
		}
	//Check all rules of unit[866][0]
	L[866][0] = LargeX[866][1]>0 ? 1 : 0;
	satisfiable[866][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit866_0[i][0] ][ unit866_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit866_0[i][2] ][ unit866_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit866_0[i][4] ][ unit866_0[i][5] ] >0);
		X_contra = ( LargeX[866][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit866_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[866][1]=0; L[866][0]=1;}
			satisfiable[866][0]=satisfiable[866][0] & ((x[866] ^ 0) | (x[ unit866_0[i][0] ] ^ unit866_0[i][1]) |(x[ unit866_0[i][2] ] ^ unit866_0[i][3]));
			}
		if(X_contra>0) L[866][0]=2;
		}
	//Check all rules of unit[866][1]
	L[866][1] = LargeX[866][0]>0 ? 1 : 0;
	satisfiable[866][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit866_1[i][0] ][ unit866_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit866_1[i][2] ][ unit866_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit866_1[i][4] ][ unit866_1[i][5] ] >0);
		X_contra = ( LargeX[866][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit866_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[866][0]=0; L[866][1]=1;}
			satisfiable[866][1]=satisfiable[866][1] & ((x[866] ^ 1) | (x[ unit866_1[i][0] ] ^ unit866_1[i][1]) |(x[ unit866_1[i][2] ] ^ unit866_1[i][3]));
			}
		if(X_contra>0) L[866][1]=2;
		}
	//Check all rules of unit[867][0]
	L[867][0] = LargeX[867][1]>0 ? 1 : 0;
	satisfiable[867][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit867_0[i][0] ][ unit867_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit867_0[i][2] ][ unit867_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit867_0[i][4] ][ unit867_0[i][5] ] >0);
		X_contra = ( LargeX[867][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit867_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[867][1]=0; L[867][0]=1;}
			satisfiable[867][0]=satisfiable[867][0] & ((x[867] ^ 0) | (x[ unit867_0[i][0] ] ^ unit867_0[i][1]) |(x[ unit867_0[i][2] ] ^ unit867_0[i][3]));
			}
		if(X_contra>0) L[867][0]=2;
		}
	//Check all rules of unit[867][1]
	L[867][1] = LargeX[867][0]>0 ? 1 : 0;
	satisfiable[867][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit867_1[i][0] ][ unit867_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit867_1[i][2] ][ unit867_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit867_1[i][4] ][ unit867_1[i][5] ] >0);
		X_contra = ( LargeX[867][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit867_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[867][0]=0; L[867][1]=1;}
			satisfiable[867][1]=satisfiable[867][1] & ((x[867] ^ 1) | (x[ unit867_1[i][0] ] ^ unit867_1[i][1]) |(x[ unit867_1[i][2] ] ^ unit867_1[i][3]));
			}
		if(X_contra>0) L[867][1]=2;
		}
	//Check all rules of unit[868][0]
	L[868][0] = LargeX[868][1]>0 ? 1 : 0;
	satisfiable[868][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit868_0[i][0] ][ unit868_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit868_0[i][2] ][ unit868_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit868_0[i][4] ][ unit868_0[i][5] ] >0);
		X_contra = ( LargeX[868][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit868_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[868][1]=0; L[868][0]=1;}
			satisfiable[868][0]=satisfiable[868][0] & ((x[868] ^ 0) | (x[ unit868_0[i][0] ] ^ unit868_0[i][1]) |(x[ unit868_0[i][2] ] ^ unit868_0[i][3]));
			}
		if(X_contra>0) L[868][0]=2;
		}
	//Check all rules of unit[868][1]
	L[868][1] = LargeX[868][0]>0 ? 1 : 0;
	satisfiable[868][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit868_1[i][0] ][ unit868_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit868_1[i][2] ][ unit868_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit868_1[i][4] ][ unit868_1[i][5] ] >0);
		X_contra = ( LargeX[868][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit868_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[868][0]=0; L[868][1]=1;}
			satisfiable[868][1]=satisfiable[868][1] & ((x[868] ^ 1) | (x[ unit868_1[i][0] ] ^ unit868_1[i][1]) |(x[ unit868_1[i][2] ] ^ unit868_1[i][3]));
			}
		if(X_contra>0) L[868][1]=2;
		}
	//Check all rules of unit[869][0]
	L[869][0] = LargeX[869][1]>0 ? 1 : 0;
	satisfiable[869][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit869_0[i][0] ][ unit869_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit869_0[i][2] ][ unit869_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit869_0[i][4] ][ unit869_0[i][5] ] >0);
		X_contra = ( LargeX[869][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit869_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[869][1]=0; L[869][0]=1;}
			satisfiable[869][0]=satisfiable[869][0] & ((x[869] ^ 0) | (x[ unit869_0[i][0] ] ^ unit869_0[i][1]) |(x[ unit869_0[i][2] ] ^ unit869_0[i][3]));
			}
		if(X_contra>0) L[869][0]=2;
		}
	//Check all rules of unit[869][1]
	L[869][1] = LargeX[869][0]>0 ? 1 : 0;
	satisfiable[869][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit869_1[i][0] ][ unit869_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit869_1[i][2] ][ unit869_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit869_1[i][4] ][ unit869_1[i][5] ] >0);
		X_contra = ( LargeX[869][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit869_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[869][0]=0; L[869][1]=1;}
			satisfiable[869][1]=satisfiable[869][1] & ((x[869] ^ 1) | (x[ unit869_1[i][0] ] ^ unit869_1[i][1]) |(x[ unit869_1[i][2] ] ^ unit869_1[i][3]));
			}
		if(X_contra>0) L[869][1]=2;
		}
	//Check all rules of unit[870][0]
	L[870][0] = LargeX[870][1]>0 ? 1 : 0;
	satisfiable[870][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit870_0[i][0] ][ unit870_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit870_0[i][2] ][ unit870_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit870_0[i][4] ][ unit870_0[i][5] ] >0);
		X_contra = ( LargeX[870][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit870_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[870][1]=0; L[870][0]=1;}
			satisfiable[870][0]=satisfiable[870][0] & ((x[870] ^ 0) | (x[ unit870_0[i][0] ] ^ unit870_0[i][1]) |(x[ unit870_0[i][2] ] ^ unit870_0[i][3]));
			}
		if(X_contra>0) L[870][0]=2;
		}
	//Check all rules of unit[870][1]
	L[870][1] = LargeX[870][0]>0 ? 1 : 0;
	satisfiable[870][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit870_1[i][0] ][ unit870_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit870_1[i][2] ][ unit870_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit870_1[i][4] ][ unit870_1[i][5] ] >0);
		X_contra = ( LargeX[870][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit870_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[870][0]=0; L[870][1]=1;}
			satisfiable[870][1]=satisfiable[870][1] & ((x[870] ^ 1) | (x[ unit870_1[i][0] ] ^ unit870_1[i][1]) |(x[ unit870_1[i][2] ] ^ unit870_1[i][3]));
			}
		if(X_contra>0) L[870][1]=2;
		}
	//Check all rules of unit[871][0]
	L[871][0] = LargeX[871][1]>0 ? 1 : 0;
	satisfiable[871][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit871_0[i][0] ][ unit871_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit871_0[i][2] ][ unit871_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit871_0[i][4] ][ unit871_0[i][5] ] >0);
		X_contra = ( LargeX[871][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit871_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[871][1]=0; L[871][0]=1;}
			satisfiable[871][0]=satisfiable[871][0] & ((x[871] ^ 0) | (x[ unit871_0[i][0] ] ^ unit871_0[i][1]) |(x[ unit871_0[i][2] ] ^ unit871_0[i][3]));
			}
		if(X_contra>0) L[871][0]=2;
		}
	//Check all rules of unit[871][1]
	L[871][1] = LargeX[871][0]>0 ? 1 : 0;
	satisfiable[871][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit871_1[i][0] ][ unit871_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit871_1[i][2] ][ unit871_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit871_1[i][4] ][ unit871_1[i][5] ] >0);
		X_contra = ( LargeX[871][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit871_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[871][0]=0; L[871][1]=1;}
			satisfiable[871][1]=satisfiable[871][1] & ((x[871] ^ 1) | (x[ unit871_1[i][0] ] ^ unit871_1[i][1]) |(x[ unit871_1[i][2] ] ^ unit871_1[i][3]));
			}
		if(X_contra>0) L[871][1]=2;
		}
	//Check all rules of unit[872][0]
	L[872][0] = LargeX[872][1]>0 ? 1 : 0;
	satisfiable[872][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit872_0[i][0] ][ unit872_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit872_0[i][2] ][ unit872_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit872_0[i][4] ][ unit872_0[i][5] ] >0);
		X_contra = ( LargeX[872][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit872_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[872][1]=0; L[872][0]=1;}
			satisfiable[872][0]=satisfiable[872][0] & ((x[872] ^ 0) | (x[ unit872_0[i][0] ] ^ unit872_0[i][1]) |(x[ unit872_0[i][2] ] ^ unit872_0[i][3]));
			}
		if(X_contra>0) L[872][0]=2;
		}
	//Check all rules of unit[872][1]
	L[872][1] = LargeX[872][0]>0 ? 1 : 0;
	satisfiable[872][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit872_1[i][0] ][ unit872_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit872_1[i][2] ][ unit872_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit872_1[i][4] ][ unit872_1[i][5] ] >0);
		X_contra = ( LargeX[872][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit872_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[872][0]=0; L[872][1]=1;}
			satisfiable[872][1]=satisfiable[872][1] & ((x[872] ^ 1) | (x[ unit872_1[i][0] ] ^ unit872_1[i][1]) |(x[ unit872_1[i][2] ] ^ unit872_1[i][3]));
			}
		if(X_contra>0) L[872][1]=2;
		}
	//Check all rules of unit[873][0]
	L[873][0] = LargeX[873][1]>0 ? 1 : 0;
	satisfiable[873][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit873_0[i][0] ][ unit873_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit873_0[i][2] ][ unit873_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit873_0[i][4] ][ unit873_0[i][5] ] >0);
		X_contra = ( LargeX[873][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit873_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[873][1]=0; L[873][0]=1;}
			satisfiable[873][0]=satisfiable[873][0] & ((x[873] ^ 0) | (x[ unit873_0[i][0] ] ^ unit873_0[i][1]) |(x[ unit873_0[i][2] ] ^ unit873_0[i][3]));
			}
		if(X_contra>0) L[873][0]=2;
		}
	//Check all rules of unit[873][1]
	L[873][1] = LargeX[873][0]>0 ? 1 : 0;
	satisfiable[873][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit873_1[i][0] ][ unit873_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit873_1[i][2] ][ unit873_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit873_1[i][4] ][ unit873_1[i][5] ] >0);
		X_contra = ( LargeX[873][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit873_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[873][0]=0; L[873][1]=1;}
			satisfiable[873][1]=satisfiable[873][1] & ((x[873] ^ 1) | (x[ unit873_1[i][0] ] ^ unit873_1[i][1]) |(x[ unit873_1[i][2] ] ^ unit873_1[i][3]));
			}
		if(X_contra>0) L[873][1]=2;
		}
	//Check all rules of unit[874][0]
	L[874][0] = LargeX[874][1]>0 ? 1 : 0;
	satisfiable[874][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit874_0[i][0] ][ unit874_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit874_0[i][2] ][ unit874_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit874_0[i][4] ][ unit874_0[i][5] ] >0);
		X_contra = ( LargeX[874][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit874_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[874][1]=0; L[874][0]=1;}
			satisfiable[874][0]=satisfiable[874][0] & ((x[874] ^ 0) | (x[ unit874_0[i][0] ] ^ unit874_0[i][1]) |(x[ unit874_0[i][2] ] ^ unit874_0[i][3]));
			}
		if(X_contra>0) L[874][0]=2;
		}
	//Check all rules of unit[874][1]
	L[874][1] = LargeX[874][0]>0 ? 1 : 0;
	satisfiable[874][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit874_1[i][0] ][ unit874_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit874_1[i][2] ][ unit874_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit874_1[i][4] ][ unit874_1[i][5] ] >0);
		X_contra = ( LargeX[874][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit874_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[874][0]=0; L[874][1]=1;}
			satisfiable[874][1]=satisfiable[874][1] & ((x[874] ^ 1) | (x[ unit874_1[i][0] ] ^ unit874_1[i][1]) |(x[ unit874_1[i][2] ] ^ unit874_1[i][3]));
			}
		if(X_contra>0) L[874][1]=2;
		}
	//Check all rules of unit[875][0]
	L[875][0] = LargeX[875][1]>0 ? 1 : 0;
	satisfiable[875][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit875_0[i][0] ][ unit875_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit875_0[i][2] ][ unit875_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit875_0[i][4] ][ unit875_0[i][5] ] >0);
		X_contra = ( LargeX[875][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit875_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[875][1]=0; L[875][0]=1;}
			satisfiable[875][0]=satisfiable[875][0] & ((x[875] ^ 0) | (x[ unit875_0[i][0] ] ^ unit875_0[i][1]) |(x[ unit875_0[i][2] ] ^ unit875_0[i][3]));
			}
		if(X_contra>0) L[875][0]=2;
		}
	//Check all rules of unit[875][1]
	L[875][1] = LargeX[875][0]>0 ? 1 : 0;
	satisfiable[875][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit875_1[i][0] ][ unit875_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit875_1[i][2] ][ unit875_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit875_1[i][4] ][ unit875_1[i][5] ] >0);
		X_contra = ( LargeX[875][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit875_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[875][0]=0; L[875][1]=1;}
			satisfiable[875][1]=satisfiable[875][1] & ((x[875] ^ 1) | (x[ unit875_1[i][0] ] ^ unit875_1[i][1]) |(x[ unit875_1[i][2] ] ^ unit875_1[i][3]));
			}
		if(X_contra>0) L[875][1]=2;
		}
	//Check all rules of unit[876][0]
	L[876][0] = LargeX[876][1]>0 ? 1 : 0;
	satisfiable[876][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit876_0[i][0] ][ unit876_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit876_0[i][2] ][ unit876_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit876_0[i][4] ][ unit876_0[i][5] ] >0);
		X_contra = ( LargeX[876][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit876_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[876][1]=0; L[876][0]=1;}
			satisfiable[876][0]=satisfiable[876][0] & ((x[876] ^ 0) | (x[ unit876_0[i][0] ] ^ unit876_0[i][1]) |(x[ unit876_0[i][2] ] ^ unit876_0[i][3]));
			}
		if(X_contra>0) L[876][0]=2;
		}
	//Check all rules of unit[876][1]
	L[876][1] = LargeX[876][0]>0 ? 1 : 0;
	satisfiable[876][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit876_1[i][0] ][ unit876_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit876_1[i][2] ][ unit876_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit876_1[i][4] ][ unit876_1[i][5] ] >0);
		X_contra = ( LargeX[876][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit876_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[876][0]=0; L[876][1]=1;}
			satisfiable[876][1]=satisfiable[876][1] & ((x[876] ^ 1) | (x[ unit876_1[i][0] ] ^ unit876_1[i][1]) |(x[ unit876_1[i][2] ] ^ unit876_1[i][3]));
			}
		if(X_contra>0) L[876][1]=2;
		}
	//Check all rules of unit[877][0]
	L[877][0] = LargeX[877][1]>0 ? 1 : 0;
	satisfiable[877][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit877_0[i][0] ][ unit877_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit877_0[i][2] ][ unit877_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit877_0[i][4] ][ unit877_0[i][5] ] >0);
		X_contra = ( LargeX[877][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit877_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[877][1]=0; L[877][0]=1;}
			satisfiable[877][0]=satisfiable[877][0] & ((x[877] ^ 0) | (x[ unit877_0[i][0] ] ^ unit877_0[i][1]) |(x[ unit877_0[i][2] ] ^ unit877_0[i][3]));
			}
		if(X_contra>0) L[877][0]=2;
		}
	//Check all rules of unit[877][1]
	L[877][1] = LargeX[877][0]>0 ? 1 : 0;
	satisfiable[877][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit877_1[i][0] ][ unit877_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit877_1[i][2] ][ unit877_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit877_1[i][4] ][ unit877_1[i][5] ] >0);
		X_contra = ( LargeX[877][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit877_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[877][0]=0; L[877][1]=1;}
			satisfiable[877][1]=satisfiable[877][1] & ((x[877] ^ 1) | (x[ unit877_1[i][0] ] ^ unit877_1[i][1]) |(x[ unit877_1[i][2] ] ^ unit877_1[i][3]));
			}
		if(X_contra>0) L[877][1]=2;
		}
	//Check all rules of unit[878][0]
	L[878][0] = LargeX[878][1]>0 ? 1 : 0;
	satisfiable[878][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit878_0[i][0] ][ unit878_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit878_0[i][2] ][ unit878_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit878_0[i][4] ][ unit878_0[i][5] ] >0);
		X_contra = ( LargeX[878][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit878_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[878][1]=0; L[878][0]=1;}
			satisfiable[878][0]=satisfiable[878][0] & ((x[878] ^ 0) | (x[ unit878_0[i][0] ] ^ unit878_0[i][1]) |(x[ unit878_0[i][2] ] ^ unit878_0[i][3]));
			}
		if(X_contra>0) L[878][0]=2;
		}
	//Check all rules of unit[878][1]
	L[878][1] = LargeX[878][0]>0 ? 1 : 0;
	satisfiable[878][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit878_1[i][0] ][ unit878_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit878_1[i][2] ][ unit878_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit878_1[i][4] ][ unit878_1[i][5] ] >0);
		X_contra = ( LargeX[878][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit878_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[878][0]=0; L[878][1]=1;}
			satisfiable[878][1]=satisfiable[878][1] & ((x[878] ^ 1) | (x[ unit878_1[i][0] ] ^ unit878_1[i][1]) |(x[ unit878_1[i][2] ] ^ unit878_1[i][3]));
			}
		if(X_contra>0) L[878][1]=2;
		}
	//Check all rules of unit[879][0]
	L[879][0] = LargeX[879][1]>0 ? 1 : 0;
	satisfiable[879][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit879_0[i][0] ][ unit879_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit879_0[i][2] ][ unit879_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit879_0[i][4] ][ unit879_0[i][5] ] >0);
		X_contra = ( LargeX[879][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit879_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[879][1]=0; L[879][0]=1;}
			satisfiable[879][0]=satisfiable[879][0] & ((x[879] ^ 0) | (x[ unit879_0[i][0] ] ^ unit879_0[i][1]) |(x[ unit879_0[i][2] ] ^ unit879_0[i][3]));
			}
		if(X_contra>0) L[879][0]=2;
		}
	//Check all rules of unit[879][1]
	L[879][1] = LargeX[879][0]>0 ? 1 : 0;
	satisfiable[879][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit879_1[i][0] ][ unit879_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit879_1[i][2] ][ unit879_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit879_1[i][4] ][ unit879_1[i][5] ] >0);
		X_contra = ( LargeX[879][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit879_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[879][0]=0; L[879][1]=1;}
			satisfiable[879][1]=satisfiable[879][1] & ((x[879] ^ 1) | (x[ unit879_1[i][0] ] ^ unit879_1[i][1]) |(x[ unit879_1[i][2] ] ^ unit879_1[i][3]));
			}
		if(X_contra>0) L[879][1]=2;
		}
	//Check all rules of unit[880][0]
	L[880][0] = LargeX[880][1]>0 ? 1 : 0;
	satisfiable[880][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit880_0[i][0] ][ unit880_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit880_0[i][2] ][ unit880_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit880_0[i][4] ][ unit880_0[i][5] ] >0);
		X_contra = ( LargeX[880][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit880_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[880][1]=0; L[880][0]=1;}
			satisfiable[880][0]=satisfiable[880][0] & ((x[880] ^ 0) | (x[ unit880_0[i][0] ] ^ unit880_0[i][1]) |(x[ unit880_0[i][2] ] ^ unit880_0[i][3]));
			}
		if(X_contra>0) L[880][0]=2;
		}
	//Check all rules of unit[880][1]
	L[880][1] = LargeX[880][0]>0 ? 1 : 0;
	satisfiable[880][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit880_1[i][0] ][ unit880_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit880_1[i][2] ][ unit880_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit880_1[i][4] ][ unit880_1[i][5] ] >0);
		X_contra = ( LargeX[880][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit880_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[880][0]=0; L[880][1]=1;}
			satisfiable[880][1]=satisfiable[880][1] & ((x[880] ^ 1) | (x[ unit880_1[i][0] ] ^ unit880_1[i][1]) |(x[ unit880_1[i][2] ] ^ unit880_1[i][3]));
			}
		if(X_contra>0) L[880][1]=2;
		}
	//Check all rules of unit[881][0]
	L[881][0] = LargeX[881][1]>0 ? 1 : 0;
	satisfiable[881][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit881_0[i][0] ][ unit881_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit881_0[i][2] ][ unit881_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit881_0[i][4] ][ unit881_0[i][5] ] >0);
		X_contra = ( LargeX[881][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit881_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[881][1]=0; L[881][0]=1;}
			satisfiable[881][0]=satisfiable[881][0] & ((x[881] ^ 0) | (x[ unit881_0[i][0] ] ^ unit881_0[i][1]) |(x[ unit881_0[i][2] ] ^ unit881_0[i][3]));
			}
		if(X_contra>0) L[881][0]=2;
		}
	//Check all rules of unit[881][1]
	L[881][1] = LargeX[881][0]>0 ? 1 : 0;
	satisfiable[881][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit881_1[i][0] ][ unit881_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit881_1[i][2] ][ unit881_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit881_1[i][4] ][ unit881_1[i][5] ] >0);
		X_contra = ( LargeX[881][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit881_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[881][0]=0; L[881][1]=1;}
			satisfiable[881][1]=satisfiable[881][1] & ((x[881] ^ 1) | (x[ unit881_1[i][0] ] ^ unit881_1[i][1]) |(x[ unit881_1[i][2] ] ^ unit881_1[i][3]));
			}
		if(X_contra>0) L[881][1]=2;
		}
	//Check all rules of unit[882][0]
	L[882][0] = LargeX[882][1]>0 ? 1 : 0;
	satisfiable[882][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit882_0[i][0] ][ unit882_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit882_0[i][2] ][ unit882_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit882_0[i][4] ][ unit882_0[i][5] ] >0);
		X_contra = ( LargeX[882][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit882_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[882][1]=0; L[882][0]=1;}
			satisfiable[882][0]=satisfiable[882][0] & ((x[882] ^ 0) | (x[ unit882_0[i][0] ] ^ unit882_0[i][1]) |(x[ unit882_0[i][2] ] ^ unit882_0[i][3]));
			}
		if(X_contra>0) L[882][0]=2;
		}
	//Check all rules of unit[882][1]
	L[882][1] = LargeX[882][0]>0 ? 1 : 0;
	satisfiable[882][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit882_1[i][0] ][ unit882_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit882_1[i][2] ][ unit882_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit882_1[i][4] ][ unit882_1[i][5] ] >0);
		X_contra = ( LargeX[882][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit882_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[882][0]=0; L[882][1]=1;}
			satisfiable[882][1]=satisfiable[882][1] & ((x[882] ^ 1) | (x[ unit882_1[i][0] ] ^ unit882_1[i][1]) |(x[ unit882_1[i][2] ] ^ unit882_1[i][3]));
			}
		if(X_contra>0) L[882][1]=2;
		}
	//Check all rules of unit[883][0]
	L[883][0] = LargeX[883][1]>0 ? 1 : 0;
	satisfiable[883][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit883_0[i][0] ][ unit883_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit883_0[i][2] ][ unit883_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit883_0[i][4] ][ unit883_0[i][5] ] >0);
		X_contra = ( LargeX[883][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit883_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[883][1]=0; L[883][0]=1;}
			satisfiable[883][0]=satisfiable[883][0] & ((x[883] ^ 0) | (x[ unit883_0[i][0] ] ^ unit883_0[i][1]) |(x[ unit883_0[i][2] ] ^ unit883_0[i][3]));
			}
		if(X_contra>0) L[883][0]=2;
		}
	//Check all rules of unit[883][1]
	L[883][1] = LargeX[883][0]>0 ? 1 : 0;
	satisfiable[883][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit883_1[i][0] ][ unit883_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit883_1[i][2] ][ unit883_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit883_1[i][4] ][ unit883_1[i][5] ] >0);
		X_contra = ( LargeX[883][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit883_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[883][0]=0; L[883][1]=1;}
			satisfiable[883][1]=satisfiable[883][1] & ((x[883] ^ 1) | (x[ unit883_1[i][0] ] ^ unit883_1[i][1]) |(x[ unit883_1[i][2] ] ^ unit883_1[i][3]));
			}
		if(X_contra>0) L[883][1]=2;
		}
	//Check all rules of unit[884][0]
	L[884][0] = LargeX[884][1]>0 ? 1 : 0;
	satisfiable[884][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit884_0[i][0] ][ unit884_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit884_0[i][2] ][ unit884_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit884_0[i][4] ][ unit884_0[i][5] ] >0);
		X_contra = ( LargeX[884][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit884_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[884][1]=0; L[884][0]=1;}
			satisfiable[884][0]=satisfiable[884][0] & ((x[884] ^ 0) | (x[ unit884_0[i][0] ] ^ unit884_0[i][1]) |(x[ unit884_0[i][2] ] ^ unit884_0[i][3]));
			}
		if(X_contra>0) L[884][0]=2;
		}
	//Check all rules of unit[884][1]
	L[884][1] = LargeX[884][0]>0 ? 1 : 0;
	satisfiable[884][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit884_1[i][0] ][ unit884_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit884_1[i][2] ][ unit884_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit884_1[i][4] ][ unit884_1[i][5] ] >0);
		X_contra = ( LargeX[884][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit884_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[884][0]=0; L[884][1]=1;}
			satisfiable[884][1]=satisfiable[884][1] & ((x[884] ^ 1) | (x[ unit884_1[i][0] ] ^ unit884_1[i][1]) |(x[ unit884_1[i][2] ] ^ unit884_1[i][3]));
			}
		if(X_contra>0) L[884][1]=2;
		}
	//Check all rules of unit[885][0]
	L[885][0] = LargeX[885][1]>0 ? 1 : 0;
	satisfiable[885][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit885_0[i][0] ][ unit885_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit885_0[i][2] ][ unit885_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit885_0[i][4] ][ unit885_0[i][5] ] >0);
		X_contra = ( LargeX[885][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit885_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[885][1]=0; L[885][0]=1;}
			satisfiable[885][0]=satisfiable[885][0] & ((x[885] ^ 0) | (x[ unit885_0[i][0] ] ^ unit885_0[i][1]) |(x[ unit885_0[i][2] ] ^ unit885_0[i][3]));
			}
		if(X_contra>0) L[885][0]=2;
		}
	//Check all rules of unit[885][1]
	L[885][1] = LargeX[885][0]>0 ? 1 : 0;
	satisfiable[885][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit885_1[i][0] ][ unit885_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit885_1[i][2] ][ unit885_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit885_1[i][4] ][ unit885_1[i][5] ] >0);
		X_contra = ( LargeX[885][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit885_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[885][0]=0; L[885][1]=1;}
			satisfiable[885][1]=satisfiable[885][1] & ((x[885] ^ 1) | (x[ unit885_1[i][0] ] ^ unit885_1[i][1]) |(x[ unit885_1[i][2] ] ^ unit885_1[i][3]));
			}
		if(X_contra>0) L[885][1]=2;
		}
	//Check all rules of unit[886][0]
	L[886][0] = LargeX[886][1]>0 ? 1 : 0;
	satisfiable[886][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit886_0[i][0] ][ unit886_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit886_0[i][2] ][ unit886_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit886_0[i][4] ][ unit886_0[i][5] ] >0);
		X_contra = ( LargeX[886][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit886_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[886][1]=0; L[886][0]=1;}
			satisfiable[886][0]=satisfiable[886][0] & ((x[886] ^ 0) | (x[ unit886_0[i][0] ] ^ unit886_0[i][1]) |(x[ unit886_0[i][2] ] ^ unit886_0[i][3]));
			}
		if(X_contra>0) L[886][0]=2;
		}
	//Check all rules of unit[886][1]
	L[886][1] = LargeX[886][0]>0 ? 1 : 0;
	satisfiable[886][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit886_1[i][0] ][ unit886_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit886_1[i][2] ][ unit886_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit886_1[i][4] ][ unit886_1[i][5] ] >0);
		X_contra = ( LargeX[886][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit886_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[886][0]=0; L[886][1]=1;}
			satisfiable[886][1]=satisfiable[886][1] & ((x[886] ^ 1) | (x[ unit886_1[i][0] ] ^ unit886_1[i][1]) |(x[ unit886_1[i][2] ] ^ unit886_1[i][3]));
			}
		if(X_contra>0) L[886][1]=2;
		}
	//Check all rules of unit[887][0]
	L[887][0] = LargeX[887][1]>0 ? 1 : 0;
	satisfiable[887][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit887_0[i][0] ][ unit887_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit887_0[i][2] ][ unit887_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit887_0[i][4] ][ unit887_0[i][5] ] >0);
		X_contra = ( LargeX[887][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit887_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[887][1]=0; L[887][0]=1;}
			satisfiable[887][0]=satisfiable[887][0] & ((x[887] ^ 0) | (x[ unit887_0[i][0] ] ^ unit887_0[i][1]) |(x[ unit887_0[i][2] ] ^ unit887_0[i][3]));
			}
		if(X_contra>0) L[887][0]=2;
		}
	//Check all rules of unit[887][1]
	L[887][1] = LargeX[887][0]>0 ? 1 : 0;
	satisfiable[887][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit887_1[i][0] ][ unit887_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit887_1[i][2] ][ unit887_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit887_1[i][4] ][ unit887_1[i][5] ] >0);
		X_contra = ( LargeX[887][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit887_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[887][0]=0; L[887][1]=1;}
			satisfiable[887][1]=satisfiable[887][1] & ((x[887] ^ 1) | (x[ unit887_1[i][0] ] ^ unit887_1[i][1]) |(x[ unit887_1[i][2] ] ^ unit887_1[i][3]));
			}
		if(X_contra>0) L[887][1]=2;
		}
	//Check all rules of unit[888][0]
	L[888][0] = LargeX[888][1]>0 ? 1 : 0;
	satisfiable[888][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit888_0[i][0] ][ unit888_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit888_0[i][2] ][ unit888_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit888_0[i][4] ][ unit888_0[i][5] ] >0);
		X_contra = ( LargeX[888][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit888_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[888][1]=0; L[888][0]=1;}
			satisfiable[888][0]=satisfiable[888][0] & ((x[888] ^ 0) | (x[ unit888_0[i][0] ] ^ unit888_0[i][1]) |(x[ unit888_0[i][2] ] ^ unit888_0[i][3]));
			}
		if(X_contra>0) L[888][0]=2;
		}
	//Check all rules of unit[888][1]
	L[888][1] = LargeX[888][0]>0 ? 1 : 0;
	satisfiable[888][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit888_1[i][0] ][ unit888_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit888_1[i][2] ][ unit888_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit888_1[i][4] ][ unit888_1[i][5] ] >0);
		X_contra = ( LargeX[888][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit888_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[888][0]=0; L[888][1]=1;}
			satisfiable[888][1]=satisfiable[888][1] & ((x[888] ^ 1) | (x[ unit888_1[i][0] ] ^ unit888_1[i][1]) |(x[ unit888_1[i][2] ] ^ unit888_1[i][3]));
			}
		if(X_contra>0) L[888][1]=2;
		}
	//Check all rules of unit[889][0]
	L[889][0] = LargeX[889][1]>0 ? 1 : 0;
	satisfiable[889][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit889_0[i][0] ][ unit889_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit889_0[i][2] ][ unit889_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit889_0[i][4] ][ unit889_0[i][5] ] >0);
		X_contra = ( LargeX[889][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit889_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[889][1]=0; L[889][0]=1;}
			satisfiable[889][0]=satisfiable[889][0] & ((x[889] ^ 0) | (x[ unit889_0[i][0] ] ^ unit889_0[i][1]) |(x[ unit889_0[i][2] ] ^ unit889_0[i][3]));
			}
		if(X_contra>0) L[889][0]=2;
		}
	//Check all rules of unit[889][1]
	L[889][1] = LargeX[889][0]>0 ? 1 : 0;
	satisfiable[889][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit889_1[i][0] ][ unit889_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit889_1[i][2] ][ unit889_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit889_1[i][4] ][ unit889_1[i][5] ] >0);
		X_contra = ( LargeX[889][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit889_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[889][0]=0; L[889][1]=1;}
			satisfiable[889][1]=satisfiable[889][1] & ((x[889] ^ 1) | (x[ unit889_1[i][0] ] ^ unit889_1[i][1]) |(x[ unit889_1[i][2] ] ^ unit889_1[i][3]));
			}
		if(X_contra>0) L[889][1]=2;
		}
	//Check all rules of unit[890][0]
	L[890][0] = LargeX[890][1]>0 ? 1 : 0;
	satisfiable[890][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit890_0[i][0] ][ unit890_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit890_0[i][2] ][ unit890_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit890_0[i][4] ][ unit890_0[i][5] ] >0);
		X_contra = ( LargeX[890][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit890_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[890][1]=0; L[890][0]=1;}
			satisfiable[890][0]=satisfiable[890][0] & ((x[890] ^ 0) | (x[ unit890_0[i][0] ] ^ unit890_0[i][1]) |(x[ unit890_0[i][2] ] ^ unit890_0[i][3]));
			}
		if(X_contra>0) L[890][0]=2;
		}
	//Check all rules of unit[890][1]
	L[890][1] = LargeX[890][0]>0 ? 1 : 0;
	satisfiable[890][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit890_1[i][0] ][ unit890_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit890_1[i][2] ][ unit890_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit890_1[i][4] ][ unit890_1[i][5] ] >0);
		X_contra = ( LargeX[890][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit890_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[890][0]=0; L[890][1]=1;}
			satisfiable[890][1]=satisfiable[890][1] & ((x[890] ^ 1) | (x[ unit890_1[i][0] ] ^ unit890_1[i][1]) |(x[ unit890_1[i][2] ] ^ unit890_1[i][3]));
			}
		if(X_contra>0) L[890][1]=2;
		}
	//Check all rules of unit[891][0]
	L[891][0] = LargeX[891][1]>0 ? 1 : 0;
	satisfiable[891][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit891_0[i][0] ][ unit891_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit891_0[i][2] ][ unit891_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit891_0[i][4] ][ unit891_0[i][5] ] >0);
		X_contra = ( LargeX[891][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit891_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[891][1]=0; L[891][0]=1;}
			satisfiable[891][0]=satisfiable[891][0] & ((x[891] ^ 0) | (x[ unit891_0[i][0] ] ^ unit891_0[i][1]) |(x[ unit891_0[i][2] ] ^ unit891_0[i][3]));
			}
		if(X_contra>0) L[891][0]=2;
		}
	//Check all rules of unit[891][1]
	L[891][1] = LargeX[891][0]>0 ? 1 : 0;
	satisfiable[891][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit891_1[i][0] ][ unit891_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit891_1[i][2] ][ unit891_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit891_1[i][4] ][ unit891_1[i][5] ] >0);
		X_contra = ( LargeX[891][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit891_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[891][0]=0; L[891][1]=1;}
			satisfiable[891][1]=satisfiable[891][1] & ((x[891] ^ 1) | (x[ unit891_1[i][0] ] ^ unit891_1[i][1]) |(x[ unit891_1[i][2] ] ^ unit891_1[i][3]));
			}
		if(X_contra>0) L[891][1]=2;
		}
	//Check all rules of unit[892][0]
	L[892][0] = LargeX[892][1]>0 ? 1 : 0;
	satisfiable[892][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit892_0[i][0] ][ unit892_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit892_0[i][2] ][ unit892_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit892_0[i][4] ][ unit892_0[i][5] ] >0);
		X_contra = ( LargeX[892][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit892_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[892][1]=0; L[892][0]=1;}
			satisfiable[892][0]=satisfiable[892][0] & ((x[892] ^ 0) | (x[ unit892_0[i][0] ] ^ unit892_0[i][1]) |(x[ unit892_0[i][2] ] ^ unit892_0[i][3]));
			}
		if(X_contra>0) L[892][0]=2;
		}
	//Check all rules of unit[892][1]
	L[892][1] = LargeX[892][0]>0 ? 1 : 0;
	satisfiable[892][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit892_1[i][0] ][ unit892_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit892_1[i][2] ][ unit892_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit892_1[i][4] ][ unit892_1[i][5] ] >0);
		X_contra = ( LargeX[892][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit892_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[892][0]=0; L[892][1]=1;}
			satisfiable[892][1]=satisfiable[892][1] & ((x[892] ^ 1) | (x[ unit892_1[i][0] ] ^ unit892_1[i][1]) |(x[ unit892_1[i][2] ] ^ unit892_1[i][3]));
			}
		if(X_contra>0) L[892][1]=2;
		}
	//Check all rules of unit[893][0]
	L[893][0] = LargeX[893][1]>0 ? 1 : 0;
	satisfiable[893][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit893_0[i][0] ][ unit893_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit893_0[i][2] ][ unit893_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit893_0[i][4] ][ unit893_0[i][5] ] >0);
		X_contra = ( LargeX[893][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit893_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[893][1]=0; L[893][0]=1;}
			satisfiable[893][0]=satisfiable[893][0] & ((x[893] ^ 0) | (x[ unit893_0[i][0] ] ^ unit893_0[i][1]) |(x[ unit893_0[i][2] ] ^ unit893_0[i][3]));
			}
		if(X_contra>0) L[893][0]=2;
		}
	//Check all rules of unit[893][1]
	L[893][1] = LargeX[893][0]>0 ? 1 : 0;
	satisfiable[893][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit893_1[i][0] ][ unit893_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit893_1[i][2] ][ unit893_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit893_1[i][4] ][ unit893_1[i][5] ] >0);
		X_contra = ( LargeX[893][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit893_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[893][0]=0; L[893][1]=1;}
			satisfiable[893][1]=satisfiable[893][1] & ((x[893] ^ 1) | (x[ unit893_1[i][0] ] ^ unit893_1[i][1]) |(x[ unit893_1[i][2] ] ^ unit893_1[i][3]));
			}
		if(X_contra>0) L[893][1]=2;
		}
	//Check all rules of unit[894][0]
	L[894][0] = LargeX[894][1]>0 ? 1 : 0;
	satisfiable[894][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit894_0[i][0] ][ unit894_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit894_0[i][2] ][ unit894_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit894_0[i][4] ][ unit894_0[i][5] ] >0);
		X_contra = ( LargeX[894][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit894_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[894][1]=0; L[894][0]=1;}
			satisfiable[894][0]=satisfiable[894][0] & ((x[894] ^ 0) | (x[ unit894_0[i][0] ] ^ unit894_0[i][1]) |(x[ unit894_0[i][2] ] ^ unit894_0[i][3]));
			}
		if(X_contra>0) L[894][0]=2;
		}
	//Check all rules of unit[894][1]
	L[894][1] = LargeX[894][0]>0 ? 1 : 0;
	satisfiable[894][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit894_1[i][0] ][ unit894_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit894_1[i][2] ][ unit894_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit894_1[i][4] ][ unit894_1[i][5] ] >0);
		X_contra = ( LargeX[894][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit894_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[894][0]=0; L[894][1]=1;}
			satisfiable[894][1]=satisfiable[894][1] & ((x[894] ^ 1) | (x[ unit894_1[i][0] ] ^ unit894_1[i][1]) |(x[ unit894_1[i][2] ] ^ unit894_1[i][3]));
			}
		if(X_contra>0) L[894][1]=2;
		}
	//Check all rules of unit[895][0]
	L[895][0] = LargeX[895][1]>0 ? 1 : 0;
	satisfiable[895][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit895_0[i][0] ][ unit895_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit895_0[i][2] ][ unit895_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit895_0[i][4] ][ unit895_0[i][5] ] >0);
		X_contra = ( LargeX[895][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit895_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[895][1]=0; L[895][0]=1;}
			satisfiable[895][0]=satisfiable[895][0] & ((x[895] ^ 0) | (x[ unit895_0[i][0] ] ^ unit895_0[i][1]) |(x[ unit895_0[i][2] ] ^ unit895_0[i][3]));
			}
		if(X_contra>0) L[895][0]=2;
		}
	//Check all rules of unit[895][1]
	L[895][1] = LargeX[895][0]>0 ? 1 : 0;
	satisfiable[895][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit895_1[i][0] ][ unit895_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit895_1[i][2] ][ unit895_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit895_1[i][4] ][ unit895_1[i][5] ] >0);
		X_contra = ( LargeX[895][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit895_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[895][0]=0; L[895][1]=1;}
			satisfiable[895][1]=satisfiable[895][1] & ((x[895] ^ 1) | (x[ unit895_1[i][0] ] ^ unit895_1[i][1]) |(x[ unit895_1[i][2] ] ^ unit895_1[i][3]));
			}
		if(X_contra>0) L[895][1]=2;
		}
	//Check all rules of unit[896][0]
	L[896][0] = LargeX[896][1]>0 ? 1 : 0;
	satisfiable[896][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit896_0[i][0] ][ unit896_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit896_0[i][2] ][ unit896_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit896_0[i][4] ][ unit896_0[i][5] ] >0);
		X_contra = ( LargeX[896][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit896_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[896][1]=0; L[896][0]=1;}
			satisfiable[896][0]=satisfiable[896][0] & ((x[896] ^ 0) | (x[ unit896_0[i][0] ] ^ unit896_0[i][1]) |(x[ unit896_0[i][2] ] ^ unit896_0[i][3]));
			}
		if(X_contra>0) L[896][0]=2;
		}
	//Check all rules of unit[896][1]
	L[896][1] = LargeX[896][0]>0 ? 1 : 0;
	satisfiable[896][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit896_1[i][0] ][ unit896_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit896_1[i][2] ][ unit896_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit896_1[i][4] ][ unit896_1[i][5] ] >0);
		X_contra = ( LargeX[896][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit896_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[896][0]=0; L[896][1]=1;}
			satisfiable[896][1]=satisfiable[896][1] & ((x[896] ^ 1) | (x[ unit896_1[i][0] ] ^ unit896_1[i][1]) |(x[ unit896_1[i][2] ] ^ unit896_1[i][3]));
			}
		if(X_contra>0) L[896][1]=2;
		}
	//Check all rules of unit[897][0]
	L[897][0] = LargeX[897][1]>0 ? 1 : 0;
	satisfiable[897][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit897_0[i][0] ][ unit897_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit897_0[i][2] ][ unit897_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit897_0[i][4] ][ unit897_0[i][5] ] >0);
		X_contra = ( LargeX[897][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit897_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[897][1]=0; L[897][0]=1;}
			satisfiable[897][0]=satisfiable[897][0] & ((x[897] ^ 0) | (x[ unit897_0[i][0] ] ^ unit897_0[i][1]) |(x[ unit897_0[i][2] ] ^ unit897_0[i][3]));
			}
		if(X_contra>0) L[897][0]=2;
		}
	//Check all rules of unit[897][1]
	L[897][1] = LargeX[897][0]>0 ? 1 : 0;
	satisfiable[897][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit897_1[i][0] ][ unit897_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit897_1[i][2] ][ unit897_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit897_1[i][4] ][ unit897_1[i][5] ] >0);
		X_contra = ( LargeX[897][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit897_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[897][0]=0; L[897][1]=1;}
			satisfiable[897][1]=satisfiable[897][1] & ((x[897] ^ 1) | (x[ unit897_1[i][0] ] ^ unit897_1[i][1]) |(x[ unit897_1[i][2] ] ^ unit897_1[i][3]));
			}
		if(X_contra>0) L[897][1]=2;
		}
	//Check all rules of unit[898][0]
	L[898][0] = LargeX[898][1]>0 ? 1 : 0;
	satisfiable[898][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit898_0[i][0] ][ unit898_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit898_0[i][2] ][ unit898_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit898_0[i][4] ][ unit898_0[i][5] ] >0);
		X_contra = ( LargeX[898][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit898_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[898][1]=0; L[898][0]=1;}
			satisfiable[898][0]=satisfiable[898][0] & ((x[898] ^ 0) | (x[ unit898_0[i][0] ] ^ unit898_0[i][1]) |(x[ unit898_0[i][2] ] ^ unit898_0[i][3]));
			}
		if(X_contra>0) L[898][0]=2;
		}
	//Check all rules of unit[898][1]
	L[898][1] = LargeX[898][0]>0 ? 1 : 0;
	satisfiable[898][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit898_1[i][0] ][ unit898_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit898_1[i][2] ][ unit898_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit898_1[i][4] ][ unit898_1[i][5] ] >0);
		X_contra = ( LargeX[898][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit898_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[898][0]=0; L[898][1]=1;}
			satisfiable[898][1]=satisfiable[898][1] & ((x[898] ^ 1) | (x[ unit898_1[i][0] ] ^ unit898_1[i][1]) |(x[ unit898_1[i][2] ] ^ unit898_1[i][3]));
			}
		if(X_contra>0) L[898][1]=2;
		}
	//Check all rules of unit[899][0]
	L[899][0] = LargeX[899][1]>0 ? 1 : 0;
	satisfiable[899][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit899_0[i][0] ][ unit899_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit899_0[i][2] ][ unit899_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit899_0[i][4] ][ unit899_0[i][5] ] >0);
		X_contra = ( LargeX[899][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit899_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[899][1]=0; L[899][0]=1;}
			satisfiable[899][0]=satisfiable[899][0] & ((x[899] ^ 0) | (x[ unit899_0[i][0] ] ^ unit899_0[i][1]) |(x[ unit899_0[i][2] ] ^ unit899_0[i][3]));
			}
		if(X_contra>0) L[899][0]=2;
		}
	//Check all rules of unit[899][1]
	L[899][1] = LargeX[899][0]>0 ? 1 : 0;
	satisfiable[899][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit899_1[i][0] ][ unit899_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit899_1[i][2] ][ unit899_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit899_1[i][4] ][ unit899_1[i][5] ] >0);
		X_contra = ( LargeX[899][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit899_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[899][0]=0; L[899][1]=1;}
			satisfiable[899][1]=satisfiable[899][1] & ((x[899] ^ 1) | (x[ unit899_1[i][0] ] ^ unit899_1[i][1]) |(x[ unit899_1[i][2] ] ^ unit899_1[i][3]));
			}
		if(X_contra>0) L[899][1]=2;
		}
	//Check all rules of unit[900][0]
	L[900][0] = LargeX[900][1]>0 ? 1 : 0;
	satisfiable[900][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit900_0[i][0] ][ unit900_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit900_0[i][2] ][ unit900_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit900_0[i][4] ][ unit900_0[i][5] ] >0);
		X_contra = ( LargeX[900][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit900_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[900][1]=0; L[900][0]=1;}
			satisfiable[900][0]=satisfiable[900][0] & ((x[900] ^ 0) | (x[ unit900_0[i][0] ] ^ unit900_0[i][1]) |(x[ unit900_0[i][2] ] ^ unit900_0[i][3]));
			}
		if(X_contra>0) L[900][0]=2;
		}
	//Check all rules of unit[900][1]
	L[900][1] = LargeX[900][0]>0 ? 1 : 0;
	satisfiable[900][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit900_1[i][0] ][ unit900_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit900_1[i][2] ][ unit900_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit900_1[i][4] ][ unit900_1[i][5] ] >0);
		X_contra = ( LargeX[900][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit900_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[900][0]=0; L[900][1]=1;}
			satisfiable[900][1]=satisfiable[900][1] & ((x[900] ^ 1) | (x[ unit900_1[i][0] ] ^ unit900_1[i][1]) |(x[ unit900_1[i][2] ] ^ unit900_1[i][3]));
			}
		if(X_contra>0) L[900][1]=2;
		}
	//Check all rules of unit[901][0]
	L[901][0] = LargeX[901][1]>0 ? 1 : 0;
	satisfiable[901][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit901_0[i][0] ][ unit901_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit901_0[i][2] ][ unit901_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit901_0[i][4] ][ unit901_0[i][5] ] >0);
		X_contra = ( LargeX[901][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit901_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[901][1]=0; L[901][0]=1;}
			satisfiable[901][0]=satisfiable[901][0] & ((x[901] ^ 0) | (x[ unit901_0[i][0] ] ^ unit901_0[i][1]) |(x[ unit901_0[i][2] ] ^ unit901_0[i][3]));
			}
		if(X_contra>0) L[901][0]=2;
		}
	//Check all rules of unit[901][1]
	L[901][1] = LargeX[901][0]>0 ? 1 : 0;
	satisfiable[901][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit901_1[i][0] ][ unit901_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit901_1[i][2] ][ unit901_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit901_1[i][4] ][ unit901_1[i][5] ] >0);
		X_contra = ( LargeX[901][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit901_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[901][0]=0; L[901][1]=1;}
			satisfiable[901][1]=satisfiable[901][1] & ((x[901] ^ 1) | (x[ unit901_1[i][0] ] ^ unit901_1[i][1]) |(x[ unit901_1[i][2] ] ^ unit901_1[i][3]));
			}
		if(X_contra>0) L[901][1]=2;
		}
	//Check all rules of unit[902][0]
	L[902][0] = LargeX[902][1]>0 ? 1 : 0;
	satisfiable[902][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit902_0[i][0] ][ unit902_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit902_0[i][2] ][ unit902_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit902_0[i][4] ][ unit902_0[i][5] ] >0);
		X_contra = ( LargeX[902][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit902_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[902][1]=0; L[902][0]=1;}
			satisfiable[902][0]=satisfiable[902][0] & ((x[902] ^ 0) | (x[ unit902_0[i][0] ] ^ unit902_0[i][1]) |(x[ unit902_0[i][2] ] ^ unit902_0[i][3]));
			}
		if(X_contra>0) L[902][0]=2;
		}
	//Check all rules of unit[902][1]
	L[902][1] = LargeX[902][0]>0 ? 1 : 0;
	satisfiable[902][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit902_1[i][0] ][ unit902_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit902_1[i][2] ][ unit902_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit902_1[i][4] ][ unit902_1[i][5] ] >0);
		X_contra = ( LargeX[902][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit902_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[902][0]=0; L[902][1]=1;}
			satisfiable[902][1]=satisfiable[902][1] & ((x[902] ^ 1) | (x[ unit902_1[i][0] ] ^ unit902_1[i][1]) |(x[ unit902_1[i][2] ] ^ unit902_1[i][3]));
			}
		if(X_contra>0) L[902][1]=2;
		}
	//Check all rules of unit[903][0]
	L[903][0] = LargeX[903][1]>0 ? 1 : 0;
	satisfiable[903][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit903_0[i][0] ][ unit903_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit903_0[i][2] ][ unit903_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit903_0[i][4] ][ unit903_0[i][5] ] >0);
		X_contra = ( LargeX[903][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit903_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[903][1]=0; L[903][0]=1;}
			satisfiable[903][0]=satisfiable[903][0] & ((x[903] ^ 0) | (x[ unit903_0[i][0] ] ^ unit903_0[i][1]) |(x[ unit903_0[i][2] ] ^ unit903_0[i][3]));
			}
		if(X_contra>0) L[903][0]=2;
		}
	//Check all rules of unit[903][1]
	L[903][1] = LargeX[903][0]>0 ? 1 : 0;
	satisfiable[903][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit903_1[i][0] ][ unit903_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit903_1[i][2] ][ unit903_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit903_1[i][4] ][ unit903_1[i][5] ] >0);
		X_contra = ( LargeX[903][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit903_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[903][0]=0; L[903][1]=1;}
			satisfiable[903][1]=satisfiable[903][1] & ((x[903] ^ 1) | (x[ unit903_1[i][0] ] ^ unit903_1[i][1]) |(x[ unit903_1[i][2] ] ^ unit903_1[i][3]));
			}
		if(X_contra>0) L[903][1]=2;
		}
	//Check all rules of unit[904][0]
	L[904][0] = LargeX[904][1]>0 ? 1 : 0;
	satisfiable[904][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit904_0[i][0] ][ unit904_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit904_0[i][2] ][ unit904_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit904_0[i][4] ][ unit904_0[i][5] ] >0);
		X_contra = ( LargeX[904][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit904_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[904][1]=0; L[904][0]=1;}
			satisfiable[904][0]=satisfiable[904][0] & ((x[904] ^ 0) | (x[ unit904_0[i][0] ] ^ unit904_0[i][1]) |(x[ unit904_0[i][2] ] ^ unit904_0[i][3]));
			}
		if(X_contra>0) L[904][0]=2;
		}
	//Check all rules of unit[904][1]
	L[904][1] = LargeX[904][0]>0 ? 1 : 0;
	satisfiable[904][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit904_1[i][0] ][ unit904_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit904_1[i][2] ][ unit904_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit904_1[i][4] ][ unit904_1[i][5] ] >0);
		X_contra = ( LargeX[904][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit904_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[904][0]=0; L[904][1]=1;}
			satisfiable[904][1]=satisfiable[904][1] & ((x[904] ^ 1) | (x[ unit904_1[i][0] ] ^ unit904_1[i][1]) |(x[ unit904_1[i][2] ] ^ unit904_1[i][3]));
			}
		if(X_contra>0) L[904][1]=2;
		}
	//Check all rules of unit[905][0]
	L[905][0] = LargeX[905][1]>0 ? 1 : 0;
	satisfiable[905][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit905_0[i][0] ][ unit905_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit905_0[i][2] ][ unit905_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit905_0[i][4] ][ unit905_0[i][5] ] >0);
		X_contra = ( LargeX[905][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit905_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[905][1]=0; L[905][0]=1;}
			satisfiable[905][0]=satisfiable[905][0] & ((x[905] ^ 0) | (x[ unit905_0[i][0] ] ^ unit905_0[i][1]) |(x[ unit905_0[i][2] ] ^ unit905_0[i][3]));
			}
		if(X_contra>0) L[905][0]=2;
		}
	//Check all rules of unit[905][1]
	L[905][1] = LargeX[905][0]>0 ? 1 : 0;
	satisfiable[905][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit905_1[i][0] ][ unit905_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit905_1[i][2] ][ unit905_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit905_1[i][4] ][ unit905_1[i][5] ] >0);
		X_contra = ( LargeX[905][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit905_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[905][0]=0; L[905][1]=1;}
			satisfiable[905][1]=satisfiable[905][1] & ((x[905] ^ 1) | (x[ unit905_1[i][0] ] ^ unit905_1[i][1]) |(x[ unit905_1[i][2] ] ^ unit905_1[i][3]));
			}
		if(X_contra>0) L[905][1]=2;
		}
	//Check all rules of unit[906][0]
	L[906][0] = LargeX[906][1]>0 ? 1 : 0;
	satisfiable[906][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit906_0[i][0] ][ unit906_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit906_0[i][2] ][ unit906_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit906_0[i][4] ][ unit906_0[i][5] ] >0);
		X_contra = ( LargeX[906][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit906_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[906][1]=0; L[906][0]=1;}
			satisfiable[906][0]=satisfiable[906][0] & ((x[906] ^ 0) | (x[ unit906_0[i][0] ] ^ unit906_0[i][1]) |(x[ unit906_0[i][2] ] ^ unit906_0[i][3]));
			}
		if(X_contra>0) L[906][0]=2;
		}
	//Check all rules of unit[906][1]
	L[906][1] = LargeX[906][0]>0 ? 1 : 0;
	satisfiable[906][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit906_1[i][0] ][ unit906_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit906_1[i][2] ][ unit906_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit906_1[i][4] ][ unit906_1[i][5] ] >0);
		X_contra = ( LargeX[906][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit906_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[906][0]=0; L[906][1]=1;}
			satisfiable[906][1]=satisfiable[906][1] & ((x[906] ^ 1) | (x[ unit906_1[i][0] ] ^ unit906_1[i][1]) |(x[ unit906_1[i][2] ] ^ unit906_1[i][3]));
			}
		if(X_contra>0) L[906][1]=2;
		}
	//Check all rules of unit[907][0]
	L[907][0] = LargeX[907][1]>0 ? 1 : 0;
	satisfiable[907][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit907_0[i][0] ][ unit907_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit907_0[i][2] ][ unit907_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit907_0[i][4] ][ unit907_0[i][5] ] >0);
		X_contra = ( LargeX[907][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit907_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[907][1]=0; L[907][0]=1;}
			satisfiable[907][0]=satisfiable[907][0] & ((x[907] ^ 0) | (x[ unit907_0[i][0] ] ^ unit907_0[i][1]) |(x[ unit907_0[i][2] ] ^ unit907_0[i][3]));
			}
		if(X_contra>0) L[907][0]=2;
		}
	//Check all rules of unit[907][1]
	L[907][1] = LargeX[907][0]>0 ? 1 : 0;
	satisfiable[907][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit907_1[i][0] ][ unit907_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit907_1[i][2] ][ unit907_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit907_1[i][4] ][ unit907_1[i][5] ] >0);
		X_contra = ( LargeX[907][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit907_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[907][0]=0; L[907][1]=1;}
			satisfiable[907][1]=satisfiable[907][1] & ((x[907] ^ 1) | (x[ unit907_1[i][0] ] ^ unit907_1[i][1]) |(x[ unit907_1[i][2] ] ^ unit907_1[i][3]));
			}
		if(X_contra>0) L[907][1]=2;
		}
	//Check all rules of unit[908][0]
	L[908][0] = LargeX[908][1]>0 ? 1 : 0;
	satisfiable[908][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit908_0[i][0] ][ unit908_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit908_0[i][2] ][ unit908_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit908_0[i][4] ][ unit908_0[i][5] ] >0);
		X_contra = ( LargeX[908][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit908_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[908][1]=0; L[908][0]=1;}
			satisfiable[908][0]=satisfiable[908][0] & ((x[908] ^ 0) | (x[ unit908_0[i][0] ] ^ unit908_0[i][1]) |(x[ unit908_0[i][2] ] ^ unit908_0[i][3]));
			}
		if(X_contra>0) L[908][0]=2;
		}
	//Check all rules of unit[908][1]
	L[908][1] = LargeX[908][0]>0 ? 1 : 0;
	satisfiable[908][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit908_1[i][0] ][ unit908_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit908_1[i][2] ][ unit908_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit908_1[i][4] ][ unit908_1[i][5] ] >0);
		X_contra = ( LargeX[908][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit908_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[908][0]=0; L[908][1]=1;}
			satisfiable[908][1]=satisfiable[908][1] & ((x[908] ^ 1) | (x[ unit908_1[i][0] ] ^ unit908_1[i][1]) |(x[ unit908_1[i][2] ] ^ unit908_1[i][3]));
			}
		if(X_contra>0) L[908][1]=2;
		}
	//Check all rules of unit[909][0]
	L[909][0] = LargeX[909][1]>0 ? 1 : 0;
	satisfiable[909][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit909_0[i][0] ][ unit909_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit909_0[i][2] ][ unit909_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit909_0[i][4] ][ unit909_0[i][5] ] >0);
		X_contra = ( LargeX[909][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit909_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[909][1]=0; L[909][0]=1;}
			satisfiable[909][0]=satisfiable[909][0] & ((x[909] ^ 0) | (x[ unit909_0[i][0] ] ^ unit909_0[i][1]) |(x[ unit909_0[i][2] ] ^ unit909_0[i][3]));
			}
		if(X_contra>0) L[909][0]=2;
		}
	//Check all rules of unit[909][1]
	L[909][1] = LargeX[909][0]>0 ? 1 : 0;
	satisfiable[909][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit909_1[i][0] ][ unit909_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit909_1[i][2] ][ unit909_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit909_1[i][4] ][ unit909_1[i][5] ] >0);
		X_contra = ( LargeX[909][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit909_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[909][0]=0; L[909][1]=1;}
			satisfiable[909][1]=satisfiable[909][1] & ((x[909] ^ 1) | (x[ unit909_1[i][0] ] ^ unit909_1[i][1]) |(x[ unit909_1[i][2] ] ^ unit909_1[i][3]));
			}
		if(X_contra>0) L[909][1]=2;
		}
	//Check all rules of unit[910][0]
	L[910][0] = LargeX[910][1]>0 ? 1 : 0;
	satisfiable[910][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit910_0[i][0] ][ unit910_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit910_0[i][2] ][ unit910_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit910_0[i][4] ][ unit910_0[i][5] ] >0);
		X_contra = ( LargeX[910][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit910_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[910][1]=0; L[910][0]=1;}
			satisfiable[910][0]=satisfiable[910][0] & ((x[910] ^ 0) | (x[ unit910_0[i][0] ] ^ unit910_0[i][1]) |(x[ unit910_0[i][2] ] ^ unit910_0[i][3]));
			}
		if(X_contra>0) L[910][0]=2;
		}
	//Check all rules of unit[910][1]
	L[910][1] = LargeX[910][0]>0 ? 1 : 0;
	satisfiable[910][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit910_1[i][0] ][ unit910_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit910_1[i][2] ][ unit910_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit910_1[i][4] ][ unit910_1[i][5] ] >0);
		X_contra = ( LargeX[910][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit910_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[910][0]=0; L[910][1]=1;}
			satisfiable[910][1]=satisfiable[910][1] & ((x[910] ^ 1) | (x[ unit910_1[i][0] ] ^ unit910_1[i][1]) |(x[ unit910_1[i][2] ] ^ unit910_1[i][3]));
			}
		if(X_contra>0) L[910][1]=2;
		}
	//Check all rules of unit[911][0]
	L[911][0] = LargeX[911][1]>0 ? 1 : 0;
	satisfiable[911][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit911_0[i][0] ][ unit911_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit911_0[i][2] ][ unit911_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit911_0[i][4] ][ unit911_0[i][5] ] >0);
		X_contra = ( LargeX[911][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit911_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[911][1]=0; L[911][0]=1;}
			satisfiable[911][0]=satisfiable[911][0] & ((x[911] ^ 0) | (x[ unit911_0[i][0] ] ^ unit911_0[i][1]) |(x[ unit911_0[i][2] ] ^ unit911_0[i][3]));
			}
		if(X_contra>0) L[911][0]=2;
		}
	//Check all rules of unit[911][1]
	L[911][1] = LargeX[911][0]>0 ? 1 : 0;
	satisfiable[911][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit911_1[i][0] ][ unit911_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit911_1[i][2] ][ unit911_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit911_1[i][4] ][ unit911_1[i][5] ] >0);
		X_contra = ( LargeX[911][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit911_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[911][0]=0; L[911][1]=1;}
			satisfiable[911][1]=satisfiable[911][1] & ((x[911] ^ 1) | (x[ unit911_1[i][0] ] ^ unit911_1[i][1]) |(x[ unit911_1[i][2] ] ^ unit911_1[i][3]));
			}
		if(X_contra>0) L[911][1]=2;
		}
	//Check all rules of unit[912][0]
	L[912][0] = LargeX[912][1]>0 ? 1 : 0;
	satisfiable[912][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit912_0[i][0] ][ unit912_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit912_0[i][2] ][ unit912_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit912_0[i][4] ][ unit912_0[i][5] ] >0);
		X_contra = ( LargeX[912][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit912_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[912][1]=0; L[912][0]=1;}
			satisfiable[912][0]=satisfiable[912][0] & ((x[912] ^ 0) | (x[ unit912_0[i][0] ] ^ unit912_0[i][1]) |(x[ unit912_0[i][2] ] ^ unit912_0[i][3]));
			}
		if(X_contra>0) L[912][0]=2;
		}
	//Check all rules of unit[912][1]
	L[912][1] = LargeX[912][0]>0 ? 1 : 0;
	satisfiable[912][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit912_1[i][0] ][ unit912_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit912_1[i][2] ][ unit912_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit912_1[i][4] ][ unit912_1[i][5] ] >0);
		X_contra = ( LargeX[912][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit912_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[912][0]=0; L[912][1]=1;}
			satisfiable[912][1]=satisfiable[912][1] & ((x[912] ^ 1) | (x[ unit912_1[i][0] ] ^ unit912_1[i][1]) |(x[ unit912_1[i][2] ] ^ unit912_1[i][3]));
			}
		if(X_contra>0) L[912][1]=2;
		}
	//Check all rules of unit[913][0]
	L[913][0] = LargeX[913][1]>0 ? 1 : 0;
	satisfiable[913][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit913_0[i][0] ][ unit913_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit913_0[i][2] ][ unit913_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit913_0[i][4] ][ unit913_0[i][5] ] >0);
		X_contra = ( LargeX[913][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit913_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[913][1]=0; L[913][0]=1;}
			satisfiable[913][0]=satisfiable[913][0] & ((x[913] ^ 0) | (x[ unit913_0[i][0] ] ^ unit913_0[i][1]) |(x[ unit913_0[i][2] ] ^ unit913_0[i][3]));
			}
		if(X_contra>0) L[913][0]=2;
		}
	//Check all rules of unit[913][1]
	L[913][1] = LargeX[913][0]>0 ? 1 : 0;
	satisfiable[913][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit913_1[i][0] ][ unit913_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit913_1[i][2] ][ unit913_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit913_1[i][4] ][ unit913_1[i][5] ] >0);
		X_contra = ( LargeX[913][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit913_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[913][0]=0; L[913][1]=1;}
			satisfiable[913][1]=satisfiable[913][1] & ((x[913] ^ 1) | (x[ unit913_1[i][0] ] ^ unit913_1[i][1]) |(x[ unit913_1[i][2] ] ^ unit913_1[i][3]));
			}
		if(X_contra>0) L[913][1]=2;
		}
	//Check all rules of unit[914][0]
	L[914][0] = LargeX[914][1]>0 ? 1 : 0;
	satisfiable[914][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit914_0[i][0] ][ unit914_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit914_0[i][2] ][ unit914_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit914_0[i][4] ][ unit914_0[i][5] ] >0);
		X_contra = ( LargeX[914][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit914_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[914][1]=0; L[914][0]=1;}
			satisfiable[914][0]=satisfiable[914][0] & ((x[914] ^ 0) | (x[ unit914_0[i][0] ] ^ unit914_0[i][1]) |(x[ unit914_0[i][2] ] ^ unit914_0[i][3]));
			}
		if(X_contra>0) L[914][0]=2;
		}
	//Check all rules of unit[914][1]
	L[914][1] = LargeX[914][0]>0 ? 1 : 0;
	satisfiable[914][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit914_1[i][0] ][ unit914_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit914_1[i][2] ][ unit914_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit914_1[i][4] ][ unit914_1[i][5] ] >0);
		X_contra = ( LargeX[914][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit914_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[914][0]=0; L[914][1]=1;}
			satisfiable[914][1]=satisfiable[914][1] & ((x[914] ^ 1) | (x[ unit914_1[i][0] ] ^ unit914_1[i][1]) |(x[ unit914_1[i][2] ] ^ unit914_1[i][3]));
			}
		if(X_contra>0) L[914][1]=2;
		}
	//Check all rules of unit[915][0]
	L[915][0] = LargeX[915][1]>0 ? 1 : 0;
	satisfiable[915][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit915_0[i][0] ][ unit915_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit915_0[i][2] ][ unit915_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit915_0[i][4] ][ unit915_0[i][5] ] >0);
		X_contra = ( LargeX[915][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit915_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[915][1]=0; L[915][0]=1;}
			satisfiable[915][0]=satisfiable[915][0] & ((x[915] ^ 0) | (x[ unit915_0[i][0] ] ^ unit915_0[i][1]) |(x[ unit915_0[i][2] ] ^ unit915_0[i][3]));
			}
		if(X_contra>0) L[915][0]=2;
		}
	//Check all rules of unit[915][1]
	L[915][1] = LargeX[915][0]>0 ? 1 : 0;
	satisfiable[915][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit915_1[i][0] ][ unit915_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit915_1[i][2] ][ unit915_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit915_1[i][4] ][ unit915_1[i][5] ] >0);
		X_contra = ( LargeX[915][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit915_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[915][0]=0; L[915][1]=1;}
			satisfiable[915][1]=satisfiable[915][1] & ((x[915] ^ 1) | (x[ unit915_1[i][0] ] ^ unit915_1[i][1]) |(x[ unit915_1[i][2] ] ^ unit915_1[i][3]));
			}
		if(X_contra>0) L[915][1]=2;
		}
	//Check all rules of unit[916][0]
	L[916][0] = LargeX[916][1]>0 ? 1 : 0;
	satisfiable[916][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit916_0[i][0] ][ unit916_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit916_0[i][2] ][ unit916_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit916_0[i][4] ][ unit916_0[i][5] ] >0);
		X_contra = ( LargeX[916][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit916_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[916][1]=0; L[916][0]=1;}
			satisfiable[916][0]=satisfiable[916][0] & ((x[916] ^ 0) | (x[ unit916_0[i][0] ] ^ unit916_0[i][1]) |(x[ unit916_0[i][2] ] ^ unit916_0[i][3]));
			}
		if(X_contra>0) L[916][0]=2;
		}
	//Check all rules of unit[916][1]
	L[916][1] = LargeX[916][0]>0 ? 1 : 0;
	satisfiable[916][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit916_1[i][0] ][ unit916_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit916_1[i][2] ][ unit916_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit916_1[i][4] ][ unit916_1[i][5] ] >0);
		X_contra = ( LargeX[916][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit916_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[916][0]=0; L[916][1]=1;}
			satisfiable[916][1]=satisfiable[916][1] & ((x[916] ^ 1) | (x[ unit916_1[i][0] ] ^ unit916_1[i][1]) |(x[ unit916_1[i][2] ] ^ unit916_1[i][3]));
			}
		if(X_contra>0) L[916][1]=2;
		}
	//Check all rules of unit[917][0]
	L[917][0] = LargeX[917][1]>0 ? 1 : 0;
	satisfiable[917][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit917_0[i][0] ][ unit917_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit917_0[i][2] ][ unit917_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit917_0[i][4] ][ unit917_0[i][5] ] >0);
		X_contra = ( LargeX[917][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit917_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[917][1]=0; L[917][0]=1;}
			satisfiable[917][0]=satisfiable[917][0] & ((x[917] ^ 0) | (x[ unit917_0[i][0] ] ^ unit917_0[i][1]) |(x[ unit917_0[i][2] ] ^ unit917_0[i][3]));
			}
		if(X_contra>0) L[917][0]=2;
		}
	//Check all rules of unit[917][1]
	L[917][1] = LargeX[917][0]>0 ? 1 : 0;
	satisfiable[917][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit917_1[i][0] ][ unit917_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit917_1[i][2] ][ unit917_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit917_1[i][4] ][ unit917_1[i][5] ] >0);
		X_contra = ( LargeX[917][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit917_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[917][0]=0; L[917][1]=1;}
			satisfiable[917][1]=satisfiable[917][1] & ((x[917] ^ 1) | (x[ unit917_1[i][0] ] ^ unit917_1[i][1]) |(x[ unit917_1[i][2] ] ^ unit917_1[i][3]));
			}
		if(X_contra>0) L[917][1]=2;
		}
	//Check all rules of unit[918][0]
	L[918][0] = LargeX[918][1]>0 ? 1 : 0;
	satisfiable[918][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit918_0[i][0] ][ unit918_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit918_0[i][2] ][ unit918_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit918_0[i][4] ][ unit918_0[i][5] ] >0);
		X_contra = ( LargeX[918][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit918_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[918][1]=0; L[918][0]=1;}
			satisfiable[918][0]=satisfiable[918][0] & ((x[918] ^ 0) | (x[ unit918_0[i][0] ] ^ unit918_0[i][1]) |(x[ unit918_0[i][2] ] ^ unit918_0[i][3]));
			}
		if(X_contra>0) L[918][0]=2;
		}
	//Check all rules of unit[918][1]
	L[918][1] = LargeX[918][0]>0 ? 1 : 0;
	satisfiable[918][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit918_1[i][0] ][ unit918_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit918_1[i][2] ][ unit918_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit918_1[i][4] ][ unit918_1[i][5] ] >0);
		X_contra = ( LargeX[918][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit918_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[918][0]=0; L[918][1]=1;}
			satisfiable[918][1]=satisfiable[918][1] & ((x[918] ^ 1) | (x[ unit918_1[i][0] ] ^ unit918_1[i][1]) |(x[ unit918_1[i][2] ] ^ unit918_1[i][3]));
			}
		if(X_contra>0) L[918][1]=2;
		}
	//Check all rules of unit[919][0]
	L[919][0] = LargeX[919][1]>0 ? 1 : 0;
	satisfiable[919][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit919_0[i][0] ][ unit919_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit919_0[i][2] ][ unit919_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit919_0[i][4] ][ unit919_0[i][5] ] >0);
		X_contra = ( LargeX[919][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit919_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[919][1]=0; L[919][0]=1;}
			satisfiable[919][0]=satisfiable[919][0] & ((x[919] ^ 0) | (x[ unit919_0[i][0] ] ^ unit919_0[i][1]) |(x[ unit919_0[i][2] ] ^ unit919_0[i][3]));
			}
		if(X_contra>0) L[919][0]=2;
		}
	//Check all rules of unit[919][1]
	L[919][1] = LargeX[919][0]>0 ? 1 : 0;
	satisfiable[919][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit919_1[i][0] ][ unit919_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit919_1[i][2] ][ unit919_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit919_1[i][4] ][ unit919_1[i][5] ] >0);
		X_contra = ( LargeX[919][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit919_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[919][0]=0; L[919][1]=1;}
			satisfiable[919][1]=satisfiable[919][1] & ((x[919] ^ 1) | (x[ unit919_1[i][0] ] ^ unit919_1[i][1]) |(x[ unit919_1[i][2] ] ^ unit919_1[i][3]));
			}
		if(X_contra>0) L[919][1]=2;
		}
	//Check all rules of unit[920][0]
	L[920][0] = LargeX[920][1]>0 ? 1 : 0;
	satisfiable[920][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit920_0[i][0] ][ unit920_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit920_0[i][2] ][ unit920_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit920_0[i][4] ][ unit920_0[i][5] ] >0);
		X_contra = ( LargeX[920][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit920_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[920][1]=0; L[920][0]=1;}
			satisfiable[920][0]=satisfiable[920][0] & ((x[920] ^ 0) | (x[ unit920_0[i][0] ] ^ unit920_0[i][1]) |(x[ unit920_0[i][2] ] ^ unit920_0[i][3]));
			}
		if(X_contra>0) L[920][0]=2;
		}
	//Check all rules of unit[920][1]
	L[920][1] = LargeX[920][0]>0 ? 1 : 0;
	satisfiable[920][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit920_1[i][0] ][ unit920_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit920_1[i][2] ][ unit920_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit920_1[i][4] ][ unit920_1[i][5] ] >0);
		X_contra = ( LargeX[920][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit920_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[920][0]=0; L[920][1]=1;}
			satisfiable[920][1]=satisfiable[920][1] & ((x[920] ^ 1) | (x[ unit920_1[i][0] ] ^ unit920_1[i][1]) |(x[ unit920_1[i][2] ] ^ unit920_1[i][3]));
			}
		if(X_contra>0) L[920][1]=2;
		}
	//Check all rules of unit[921][0]
	L[921][0] = LargeX[921][1]>0 ? 1 : 0;
	satisfiable[921][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit921_0[i][0] ][ unit921_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit921_0[i][2] ][ unit921_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit921_0[i][4] ][ unit921_0[i][5] ] >0);
		X_contra = ( LargeX[921][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit921_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[921][1]=0; L[921][0]=1;}
			satisfiable[921][0]=satisfiable[921][0] & ((x[921] ^ 0) | (x[ unit921_0[i][0] ] ^ unit921_0[i][1]) |(x[ unit921_0[i][2] ] ^ unit921_0[i][3]));
			}
		if(X_contra>0) L[921][0]=2;
		}
	//Check all rules of unit[921][1]
	L[921][1] = LargeX[921][0]>0 ? 1 : 0;
	satisfiable[921][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit921_1[i][0] ][ unit921_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit921_1[i][2] ][ unit921_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit921_1[i][4] ][ unit921_1[i][5] ] >0);
		X_contra = ( LargeX[921][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit921_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[921][0]=0; L[921][1]=1;}
			satisfiable[921][1]=satisfiable[921][1] & ((x[921] ^ 1) | (x[ unit921_1[i][0] ] ^ unit921_1[i][1]) |(x[ unit921_1[i][2] ] ^ unit921_1[i][3]));
			}
		if(X_contra>0) L[921][1]=2;
		}
	//Check all rules of unit[922][0]
	L[922][0] = LargeX[922][1]>0 ? 1 : 0;
	satisfiable[922][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit922_0[i][0] ][ unit922_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit922_0[i][2] ][ unit922_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit922_0[i][4] ][ unit922_0[i][5] ] >0);
		X_contra = ( LargeX[922][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit922_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[922][1]=0; L[922][0]=1;}
			satisfiable[922][0]=satisfiable[922][0] & ((x[922] ^ 0) | (x[ unit922_0[i][0] ] ^ unit922_0[i][1]) |(x[ unit922_0[i][2] ] ^ unit922_0[i][3]));
			}
		if(X_contra>0) L[922][0]=2;
		}
	//Check all rules of unit[922][1]
	L[922][1] = LargeX[922][0]>0 ? 1 : 0;
	satisfiable[922][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit922_1[i][0] ][ unit922_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit922_1[i][2] ][ unit922_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit922_1[i][4] ][ unit922_1[i][5] ] >0);
		X_contra = ( LargeX[922][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit922_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[922][0]=0; L[922][1]=1;}
			satisfiable[922][1]=satisfiable[922][1] & ((x[922] ^ 1) | (x[ unit922_1[i][0] ] ^ unit922_1[i][1]) |(x[ unit922_1[i][2] ] ^ unit922_1[i][3]));
			}
		if(X_contra>0) L[922][1]=2;
		}
	//Check all rules of unit[923][0]
	L[923][0] = LargeX[923][1]>0 ? 1 : 0;
	satisfiable[923][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit923_0[i][0] ][ unit923_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit923_0[i][2] ][ unit923_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit923_0[i][4] ][ unit923_0[i][5] ] >0);
		X_contra = ( LargeX[923][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit923_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[923][1]=0; L[923][0]=1;}
			satisfiable[923][0]=satisfiable[923][0] & ((x[923] ^ 0) | (x[ unit923_0[i][0] ] ^ unit923_0[i][1]) |(x[ unit923_0[i][2] ] ^ unit923_0[i][3]));
			}
		if(X_contra>0) L[923][0]=2;
		}
	//Check all rules of unit[923][1]
	L[923][1] = LargeX[923][0]>0 ? 1 : 0;
	satisfiable[923][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit923_1[i][0] ][ unit923_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit923_1[i][2] ][ unit923_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit923_1[i][4] ][ unit923_1[i][5] ] >0);
		X_contra = ( LargeX[923][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit923_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[923][0]=0; L[923][1]=1;}
			satisfiable[923][1]=satisfiable[923][1] & ((x[923] ^ 1) | (x[ unit923_1[i][0] ] ^ unit923_1[i][1]) |(x[ unit923_1[i][2] ] ^ unit923_1[i][3]));
			}
		if(X_contra>0) L[923][1]=2;
		}
	//Check all rules of unit[924][0]
	L[924][0] = LargeX[924][1]>0 ? 1 : 0;
	satisfiable[924][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit924_0[i][0] ][ unit924_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit924_0[i][2] ][ unit924_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit924_0[i][4] ][ unit924_0[i][5] ] >0);
		X_contra = ( LargeX[924][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit924_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[924][1]=0; L[924][0]=1;}
			satisfiable[924][0]=satisfiable[924][0] & ((x[924] ^ 0) | (x[ unit924_0[i][0] ] ^ unit924_0[i][1]) |(x[ unit924_0[i][2] ] ^ unit924_0[i][3]));
			}
		if(X_contra>0) L[924][0]=2;
		}
	//Check all rules of unit[924][1]
	L[924][1] = LargeX[924][0]>0 ? 1 : 0;
	satisfiable[924][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit924_1[i][0] ][ unit924_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit924_1[i][2] ][ unit924_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit924_1[i][4] ][ unit924_1[i][5] ] >0);
		X_contra = ( LargeX[924][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit924_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[924][0]=0; L[924][1]=1;}
			satisfiable[924][1]=satisfiable[924][1] & ((x[924] ^ 1) | (x[ unit924_1[i][0] ] ^ unit924_1[i][1]) |(x[ unit924_1[i][2] ] ^ unit924_1[i][3]));
			}
		if(X_contra>0) L[924][1]=2;
		}
	//Check all rules of unit[925][0]
	L[925][0] = LargeX[925][1]>0 ? 1 : 0;
	satisfiable[925][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit925_0[i][0] ][ unit925_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit925_0[i][2] ][ unit925_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit925_0[i][4] ][ unit925_0[i][5] ] >0);
		X_contra = ( LargeX[925][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit925_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[925][1]=0; L[925][0]=1;}
			satisfiable[925][0]=satisfiable[925][0] & ((x[925] ^ 0) | (x[ unit925_0[i][0] ] ^ unit925_0[i][1]) |(x[ unit925_0[i][2] ] ^ unit925_0[i][3]));
			}
		if(X_contra>0) L[925][0]=2;
		}
	//Check all rules of unit[925][1]
	L[925][1] = LargeX[925][0]>0 ? 1 : 0;
	satisfiable[925][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit925_1[i][0] ][ unit925_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit925_1[i][2] ][ unit925_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit925_1[i][4] ][ unit925_1[i][5] ] >0);
		X_contra = ( LargeX[925][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit925_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[925][0]=0; L[925][1]=1;}
			satisfiable[925][1]=satisfiable[925][1] & ((x[925] ^ 1) | (x[ unit925_1[i][0] ] ^ unit925_1[i][1]) |(x[ unit925_1[i][2] ] ^ unit925_1[i][3]));
			}
		if(X_contra>0) L[925][1]=2;
		}
	//Check all rules of unit[926][0]
	L[926][0] = LargeX[926][1]>0 ? 1 : 0;
	satisfiable[926][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit926_0[i][0] ][ unit926_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit926_0[i][2] ][ unit926_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit926_0[i][4] ][ unit926_0[i][5] ] >0);
		X_contra = ( LargeX[926][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit926_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[926][1]=0; L[926][0]=1;}
			satisfiable[926][0]=satisfiable[926][0] & ((x[926] ^ 0) | (x[ unit926_0[i][0] ] ^ unit926_0[i][1]) |(x[ unit926_0[i][2] ] ^ unit926_0[i][3]));
			}
		if(X_contra>0) L[926][0]=2;
		}
	//Check all rules of unit[926][1]
	L[926][1] = LargeX[926][0]>0 ? 1 : 0;
	satisfiable[926][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit926_1[i][0] ][ unit926_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit926_1[i][2] ][ unit926_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit926_1[i][4] ][ unit926_1[i][5] ] >0);
		X_contra = ( LargeX[926][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit926_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[926][0]=0; L[926][1]=1;}
			satisfiable[926][1]=satisfiable[926][1] & ((x[926] ^ 1) | (x[ unit926_1[i][0] ] ^ unit926_1[i][1]) |(x[ unit926_1[i][2] ] ^ unit926_1[i][3]));
			}
		if(X_contra>0) L[926][1]=2;
		}
	//Check all rules of unit[927][0]
	L[927][0] = LargeX[927][1]>0 ? 1 : 0;
	satisfiable[927][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit927_0[i][0] ][ unit927_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit927_0[i][2] ][ unit927_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit927_0[i][4] ][ unit927_0[i][5] ] >0);
		X_contra = ( LargeX[927][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit927_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[927][1]=0; L[927][0]=1;}
			satisfiable[927][0]=satisfiable[927][0] & ((x[927] ^ 0) | (x[ unit927_0[i][0] ] ^ unit927_0[i][1]) |(x[ unit927_0[i][2] ] ^ unit927_0[i][3]));
			}
		if(X_contra>0) L[927][0]=2;
		}
	//Check all rules of unit[927][1]
	L[927][1] = LargeX[927][0]>0 ? 1 : 0;
	satisfiable[927][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit927_1[i][0] ][ unit927_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit927_1[i][2] ][ unit927_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit927_1[i][4] ][ unit927_1[i][5] ] >0);
		X_contra = ( LargeX[927][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit927_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[927][0]=0; L[927][1]=1;}
			satisfiable[927][1]=satisfiable[927][1] & ((x[927] ^ 1) | (x[ unit927_1[i][0] ] ^ unit927_1[i][1]) |(x[ unit927_1[i][2] ] ^ unit927_1[i][3]));
			}
		if(X_contra>0) L[927][1]=2;
		}
	//Check all rules of unit[928][0]
	L[928][0] = LargeX[928][1]>0 ? 1 : 0;
	satisfiable[928][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit928_0[i][0] ][ unit928_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit928_0[i][2] ][ unit928_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit928_0[i][4] ][ unit928_0[i][5] ] >0);
		X_contra = ( LargeX[928][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit928_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[928][1]=0; L[928][0]=1;}
			satisfiable[928][0]=satisfiable[928][0] & ((x[928] ^ 0) | (x[ unit928_0[i][0] ] ^ unit928_0[i][1]) |(x[ unit928_0[i][2] ] ^ unit928_0[i][3]));
			}
		if(X_contra>0) L[928][0]=2;
		}
	//Check all rules of unit[928][1]
	L[928][1] = LargeX[928][0]>0 ? 1 : 0;
	satisfiable[928][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit928_1[i][0] ][ unit928_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit928_1[i][2] ][ unit928_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit928_1[i][4] ][ unit928_1[i][5] ] >0);
		X_contra = ( LargeX[928][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit928_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[928][0]=0; L[928][1]=1;}
			satisfiable[928][1]=satisfiable[928][1] & ((x[928] ^ 1) | (x[ unit928_1[i][0] ] ^ unit928_1[i][1]) |(x[ unit928_1[i][2] ] ^ unit928_1[i][3]));
			}
		if(X_contra>0) L[928][1]=2;
		}
	//Check all rules of unit[929][0]
	L[929][0] = LargeX[929][1]>0 ? 1 : 0;
	satisfiable[929][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit929_0[i][0] ][ unit929_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit929_0[i][2] ][ unit929_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit929_0[i][4] ][ unit929_0[i][5] ] >0);
		X_contra = ( LargeX[929][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit929_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[929][1]=0; L[929][0]=1;}
			satisfiable[929][0]=satisfiable[929][0] & ((x[929] ^ 0) | (x[ unit929_0[i][0] ] ^ unit929_0[i][1]) |(x[ unit929_0[i][2] ] ^ unit929_0[i][3]));
			}
		if(X_contra>0) L[929][0]=2;
		}
	//Check all rules of unit[929][1]
	L[929][1] = LargeX[929][0]>0 ? 1 : 0;
	satisfiable[929][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit929_1[i][0] ][ unit929_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit929_1[i][2] ][ unit929_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit929_1[i][4] ][ unit929_1[i][5] ] >0);
		X_contra = ( LargeX[929][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit929_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[929][0]=0; L[929][1]=1;}
			satisfiable[929][1]=satisfiable[929][1] & ((x[929] ^ 1) | (x[ unit929_1[i][0] ] ^ unit929_1[i][1]) |(x[ unit929_1[i][2] ] ^ unit929_1[i][3]));
			}
		if(X_contra>0) L[929][1]=2;
		}
	//Check all rules of unit[930][0]
	L[930][0] = LargeX[930][1]>0 ? 1 : 0;
	satisfiable[930][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit930_0[i][0] ][ unit930_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit930_0[i][2] ][ unit930_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit930_0[i][4] ][ unit930_0[i][5] ] >0);
		X_contra = ( LargeX[930][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit930_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[930][1]=0; L[930][0]=1;}
			satisfiable[930][0]=satisfiable[930][0] & ((x[930] ^ 0) | (x[ unit930_0[i][0] ] ^ unit930_0[i][1]) |(x[ unit930_0[i][2] ] ^ unit930_0[i][3]));
			}
		if(X_contra>0) L[930][0]=2;
		}
	//Check all rules of unit[930][1]
	L[930][1] = LargeX[930][0]>0 ? 1 : 0;
	satisfiable[930][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit930_1[i][0] ][ unit930_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit930_1[i][2] ][ unit930_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit930_1[i][4] ][ unit930_1[i][5] ] >0);
		X_contra = ( LargeX[930][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit930_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[930][0]=0; L[930][1]=1;}
			satisfiable[930][1]=satisfiable[930][1] & ((x[930] ^ 1) | (x[ unit930_1[i][0] ] ^ unit930_1[i][1]) |(x[ unit930_1[i][2] ] ^ unit930_1[i][3]));
			}
		if(X_contra>0) L[930][1]=2;
		}
	//Check all rules of unit[931][0]
	L[931][0] = LargeX[931][1]>0 ? 1 : 0;
	satisfiable[931][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit931_0[i][0] ][ unit931_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit931_0[i][2] ][ unit931_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit931_0[i][4] ][ unit931_0[i][5] ] >0);
		X_contra = ( LargeX[931][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit931_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[931][1]=0; L[931][0]=1;}
			satisfiable[931][0]=satisfiable[931][0] & ((x[931] ^ 0) | (x[ unit931_0[i][0] ] ^ unit931_0[i][1]) |(x[ unit931_0[i][2] ] ^ unit931_0[i][3]));
			}
		if(X_contra>0) L[931][0]=2;
		}
	//Check all rules of unit[931][1]
	L[931][1] = LargeX[931][0]>0 ? 1 : 0;
	satisfiable[931][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit931_1[i][0] ][ unit931_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit931_1[i][2] ][ unit931_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit931_1[i][4] ][ unit931_1[i][5] ] >0);
		X_contra = ( LargeX[931][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit931_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[931][0]=0; L[931][1]=1;}
			satisfiable[931][1]=satisfiable[931][1] & ((x[931] ^ 1) | (x[ unit931_1[i][0] ] ^ unit931_1[i][1]) |(x[ unit931_1[i][2] ] ^ unit931_1[i][3]));
			}
		if(X_contra>0) L[931][1]=2;
		}
	//Check all rules of unit[932][0]
	L[932][0] = LargeX[932][1]>0 ? 1 : 0;
	satisfiable[932][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit932_0[i][0] ][ unit932_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit932_0[i][2] ][ unit932_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit932_0[i][4] ][ unit932_0[i][5] ] >0);
		X_contra = ( LargeX[932][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit932_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[932][1]=0; L[932][0]=1;}
			satisfiable[932][0]=satisfiable[932][0] & ((x[932] ^ 0) | (x[ unit932_0[i][0] ] ^ unit932_0[i][1]) |(x[ unit932_0[i][2] ] ^ unit932_0[i][3]));
			}
		if(X_contra>0) L[932][0]=2;
		}
	//Check all rules of unit[932][1]
	L[932][1] = LargeX[932][0]>0 ? 1 : 0;
	satisfiable[932][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit932_1[i][0] ][ unit932_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit932_1[i][2] ][ unit932_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit932_1[i][4] ][ unit932_1[i][5] ] >0);
		X_contra = ( LargeX[932][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit932_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[932][0]=0; L[932][1]=1;}
			satisfiable[932][1]=satisfiable[932][1] & ((x[932] ^ 1) | (x[ unit932_1[i][0] ] ^ unit932_1[i][1]) |(x[ unit932_1[i][2] ] ^ unit932_1[i][3]));
			}
		if(X_contra>0) L[932][1]=2;
		}
	//Check all rules of unit[933][0]
	L[933][0] = LargeX[933][1]>0 ? 1 : 0;
	satisfiable[933][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit933_0[i][0] ][ unit933_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit933_0[i][2] ][ unit933_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit933_0[i][4] ][ unit933_0[i][5] ] >0);
		X_contra = ( LargeX[933][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit933_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[933][1]=0; L[933][0]=1;}
			satisfiable[933][0]=satisfiable[933][0] & ((x[933] ^ 0) | (x[ unit933_0[i][0] ] ^ unit933_0[i][1]) |(x[ unit933_0[i][2] ] ^ unit933_0[i][3]));
			}
		if(X_contra>0) L[933][0]=2;
		}
	//Check all rules of unit[933][1]
	L[933][1] = LargeX[933][0]>0 ? 1 : 0;
	satisfiable[933][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit933_1[i][0] ][ unit933_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit933_1[i][2] ][ unit933_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit933_1[i][4] ][ unit933_1[i][5] ] >0);
		X_contra = ( LargeX[933][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit933_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[933][0]=0; L[933][1]=1;}
			satisfiable[933][1]=satisfiable[933][1] & ((x[933] ^ 1) | (x[ unit933_1[i][0] ] ^ unit933_1[i][1]) |(x[ unit933_1[i][2] ] ^ unit933_1[i][3]));
			}
		if(X_contra>0) L[933][1]=2;
		}
	//Check all rules of unit[934][0]
	L[934][0] = LargeX[934][1]>0 ? 1 : 0;
	satisfiable[934][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit934_0[i][0] ][ unit934_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit934_0[i][2] ][ unit934_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit934_0[i][4] ][ unit934_0[i][5] ] >0);
		X_contra = ( LargeX[934][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit934_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[934][1]=0; L[934][0]=1;}
			satisfiable[934][0]=satisfiable[934][0] & ((x[934] ^ 0) | (x[ unit934_0[i][0] ] ^ unit934_0[i][1]) |(x[ unit934_0[i][2] ] ^ unit934_0[i][3]));
			}
		if(X_contra>0) L[934][0]=2;
		}
	//Check all rules of unit[934][1]
	L[934][1] = LargeX[934][0]>0 ? 1 : 0;
	satisfiable[934][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit934_1[i][0] ][ unit934_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit934_1[i][2] ][ unit934_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit934_1[i][4] ][ unit934_1[i][5] ] >0);
		X_contra = ( LargeX[934][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit934_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[934][0]=0; L[934][1]=1;}
			satisfiable[934][1]=satisfiable[934][1] & ((x[934] ^ 1) | (x[ unit934_1[i][0] ] ^ unit934_1[i][1]) |(x[ unit934_1[i][2] ] ^ unit934_1[i][3]));
			}
		if(X_contra>0) L[934][1]=2;
		}
	//Check all rules of unit[935][0]
	L[935][0] = LargeX[935][1]>0 ? 1 : 0;
	satisfiable[935][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit935_0[i][0] ][ unit935_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit935_0[i][2] ][ unit935_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit935_0[i][4] ][ unit935_0[i][5] ] >0);
		X_contra = ( LargeX[935][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit935_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[935][1]=0; L[935][0]=1;}
			satisfiable[935][0]=satisfiable[935][0] & ((x[935] ^ 0) | (x[ unit935_0[i][0] ] ^ unit935_0[i][1]) |(x[ unit935_0[i][2] ] ^ unit935_0[i][3]));
			}
		if(X_contra>0) L[935][0]=2;
		}
	//Check all rules of unit[935][1]
	L[935][1] = LargeX[935][0]>0 ? 1 : 0;
	satisfiable[935][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit935_1[i][0] ][ unit935_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit935_1[i][2] ][ unit935_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit935_1[i][4] ][ unit935_1[i][5] ] >0);
		X_contra = ( LargeX[935][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit935_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[935][0]=0; L[935][1]=1;}
			satisfiable[935][1]=satisfiable[935][1] & ((x[935] ^ 1) | (x[ unit935_1[i][0] ] ^ unit935_1[i][1]) |(x[ unit935_1[i][2] ] ^ unit935_1[i][3]));
			}
		if(X_contra>0) L[935][1]=2;
		}
	//Check all rules of unit[936][0]
	L[936][0] = LargeX[936][1]>0 ? 1 : 0;
	satisfiable[936][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit936_0[i][0] ][ unit936_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit936_0[i][2] ][ unit936_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit936_0[i][4] ][ unit936_0[i][5] ] >0);
		X_contra = ( LargeX[936][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit936_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[936][1]=0; L[936][0]=1;}
			satisfiable[936][0]=satisfiable[936][0] & ((x[936] ^ 0) | (x[ unit936_0[i][0] ] ^ unit936_0[i][1]) |(x[ unit936_0[i][2] ] ^ unit936_0[i][3]));
			}
		if(X_contra>0) L[936][0]=2;
		}
	//Check all rules of unit[936][1]
	L[936][1] = LargeX[936][0]>0 ? 1 : 0;
	satisfiable[936][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit936_1[i][0] ][ unit936_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit936_1[i][2] ][ unit936_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit936_1[i][4] ][ unit936_1[i][5] ] >0);
		X_contra = ( LargeX[936][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit936_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[936][0]=0; L[936][1]=1;}
			satisfiable[936][1]=satisfiable[936][1] & ((x[936] ^ 1) | (x[ unit936_1[i][0] ] ^ unit936_1[i][1]) |(x[ unit936_1[i][2] ] ^ unit936_1[i][3]));
			}
		if(X_contra>0) L[936][1]=2;
		}
	//Check all rules of unit[937][0]
	L[937][0] = LargeX[937][1]>0 ? 1 : 0;
	satisfiable[937][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit937_0[i][0] ][ unit937_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit937_0[i][2] ][ unit937_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit937_0[i][4] ][ unit937_0[i][5] ] >0);
		X_contra = ( LargeX[937][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit937_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[937][1]=0; L[937][0]=1;}
			satisfiable[937][0]=satisfiable[937][0] & ((x[937] ^ 0) | (x[ unit937_0[i][0] ] ^ unit937_0[i][1]) |(x[ unit937_0[i][2] ] ^ unit937_0[i][3]));
			}
		if(X_contra>0) L[937][0]=2;
		}
	//Check all rules of unit[937][1]
	L[937][1] = LargeX[937][0]>0 ? 1 : 0;
	satisfiable[937][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit937_1[i][0] ][ unit937_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit937_1[i][2] ][ unit937_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit937_1[i][4] ][ unit937_1[i][5] ] >0);
		X_contra = ( LargeX[937][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit937_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[937][0]=0; L[937][1]=1;}
			satisfiable[937][1]=satisfiable[937][1] & ((x[937] ^ 1) | (x[ unit937_1[i][0] ] ^ unit937_1[i][1]) |(x[ unit937_1[i][2] ] ^ unit937_1[i][3]));
			}
		if(X_contra>0) L[937][1]=2;
		}
	//Check all rules of unit[938][0]
	L[938][0] = LargeX[938][1]>0 ? 1 : 0;
	satisfiable[938][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit938_0[i][0] ][ unit938_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit938_0[i][2] ][ unit938_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit938_0[i][4] ][ unit938_0[i][5] ] >0);
		X_contra = ( LargeX[938][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit938_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[938][1]=0; L[938][0]=1;}
			satisfiable[938][0]=satisfiable[938][0] & ((x[938] ^ 0) | (x[ unit938_0[i][0] ] ^ unit938_0[i][1]) |(x[ unit938_0[i][2] ] ^ unit938_0[i][3]));
			}
		if(X_contra>0) L[938][0]=2;
		}
	//Check all rules of unit[938][1]
	L[938][1] = LargeX[938][0]>0 ? 1 : 0;
	satisfiable[938][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit938_1[i][0] ][ unit938_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit938_1[i][2] ][ unit938_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit938_1[i][4] ][ unit938_1[i][5] ] >0);
		X_contra = ( LargeX[938][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit938_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[938][0]=0; L[938][1]=1;}
			satisfiable[938][1]=satisfiable[938][1] & ((x[938] ^ 1) | (x[ unit938_1[i][0] ] ^ unit938_1[i][1]) |(x[ unit938_1[i][2] ] ^ unit938_1[i][3]));
			}
		if(X_contra>0) L[938][1]=2;
		}
	//Check all rules of unit[939][0]
	L[939][0] = LargeX[939][1]>0 ? 1 : 0;
	satisfiable[939][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit939_0[i][0] ][ unit939_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit939_0[i][2] ][ unit939_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit939_0[i][4] ][ unit939_0[i][5] ] >0);
		X_contra = ( LargeX[939][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit939_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[939][1]=0; L[939][0]=1;}
			satisfiable[939][0]=satisfiable[939][0] & ((x[939] ^ 0) | (x[ unit939_0[i][0] ] ^ unit939_0[i][1]) |(x[ unit939_0[i][2] ] ^ unit939_0[i][3]));
			}
		if(X_contra>0) L[939][0]=2;
		}
	//Check all rules of unit[939][1]
	L[939][1] = LargeX[939][0]>0 ? 1 : 0;
	satisfiable[939][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit939_1[i][0] ][ unit939_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit939_1[i][2] ][ unit939_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit939_1[i][4] ][ unit939_1[i][5] ] >0);
		X_contra = ( LargeX[939][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit939_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[939][0]=0; L[939][1]=1;}
			satisfiable[939][1]=satisfiable[939][1] & ((x[939] ^ 1) | (x[ unit939_1[i][0] ] ^ unit939_1[i][1]) |(x[ unit939_1[i][2] ] ^ unit939_1[i][3]));
			}
		if(X_contra>0) L[939][1]=2;
		}
	//Check all rules of unit[940][0]
	L[940][0] = LargeX[940][1]>0 ? 1 : 0;
	satisfiable[940][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit940_0[i][0] ][ unit940_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit940_0[i][2] ][ unit940_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit940_0[i][4] ][ unit940_0[i][5] ] >0);
		X_contra = ( LargeX[940][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit940_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[940][1]=0; L[940][0]=1;}
			satisfiable[940][0]=satisfiable[940][0] & ((x[940] ^ 0) | (x[ unit940_0[i][0] ] ^ unit940_0[i][1]) |(x[ unit940_0[i][2] ] ^ unit940_0[i][3]));
			}
		if(X_contra>0) L[940][0]=2;
		}
	//Check all rules of unit[940][1]
	L[940][1] = LargeX[940][0]>0 ? 1 : 0;
	satisfiable[940][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit940_1[i][0] ][ unit940_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit940_1[i][2] ][ unit940_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit940_1[i][4] ][ unit940_1[i][5] ] >0);
		X_contra = ( LargeX[940][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit940_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[940][0]=0; L[940][1]=1;}
			satisfiable[940][1]=satisfiable[940][1] & ((x[940] ^ 1) | (x[ unit940_1[i][0] ] ^ unit940_1[i][1]) |(x[ unit940_1[i][2] ] ^ unit940_1[i][3]));
			}
		if(X_contra>0) L[940][1]=2;
		}
	//Check all rules of unit[941][0]
	L[941][0] = LargeX[941][1]>0 ? 1 : 0;
	satisfiable[941][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit941_0[i][0] ][ unit941_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit941_0[i][2] ][ unit941_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit941_0[i][4] ][ unit941_0[i][5] ] >0);
		X_contra = ( LargeX[941][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit941_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[941][1]=0; L[941][0]=1;}
			satisfiable[941][0]=satisfiable[941][0] & ((x[941] ^ 0) | (x[ unit941_0[i][0] ] ^ unit941_0[i][1]) |(x[ unit941_0[i][2] ] ^ unit941_0[i][3]));
			}
		if(X_contra>0) L[941][0]=2;
		}
	//Check all rules of unit[941][1]
	L[941][1] = LargeX[941][0]>0 ? 1 : 0;
	satisfiable[941][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit941_1[i][0] ][ unit941_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit941_1[i][2] ][ unit941_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit941_1[i][4] ][ unit941_1[i][5] ] >0);
		X_contra = ( LargeX[941][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit941_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[941][0]=0; L[941][1]=1;}
			satisfiable[941][1]=satisfiable[941][1] & ((x[941] ^ 1) | (x[ unit941_1[i][0] ] ^ unit941_1[i][1]) |(x[ unit941_1[i][2] ] ^ unit941_1[i][3]));
			}
		if(X_contra>0) L[941][1]=2;
		}
	//Check all rules of unit[942][0]
	L[942][0] = LargeX[942][1]>0 ? 1 : 0;
	satisfiable[942][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit942_0[i][0] ][ unit942_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit942_0[i][2] ][ unit942_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit942_0[i][4] ][ unit942_0[i][5] ] >0);
		X_contra = ( LargeX[942][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit942_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[942][1]=0; L[942][0]=1;}
			satisfiable[942][0]=satisfiable[942][0] & ((x[942] ^ 0) | (x[ unit942_0[i][0] ] ^ unit942_0[i][1]) |(x[ unit942_0[i][2] ] ^ unit942_0[i][3]));
			}
		if(X_contra>0) L[942][0]=2;
		}
	//Check all rules of unit[942][1]
	L[942][1] = LargeX[942][0]>0 ? 1 : 0;
	satisfiable[942][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit942_1[i][0] ][ unit942_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit942_1[i][2] ][ unit942_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit942_1[i][4] ][ unit942_1[i][5] ] >0);
		X_contra = ( LargeX[942][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit942_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[942][0]=0; L[942][1]=1;}
			satisfiable[942][1]=satisfiable[942][1] & ((x[942] ^ 1) | (x[ unit942_1[i][0] ] ^ unit942_1[i][1]) |(x[ unit942_1[i][2] ] ^ unit942_1[i][3]));
			}
		if(X_contra>0) L[942][1]=2;
		}
	//Check all rules of unit[943][0]
	L[943][0] = LargeX[943][1]>0 ? 1 : 0;
	satisfiable[943][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit943_0[i][0] ][ unit943_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit943_0[i][2] ][ unit943_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit943_0[i][4] ][ unit943_0[i][5] ] >0);
		X_contra = ( LargeX[943][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit943_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[943][1]=0; L[943][0]=1;}
			satisfiable[943][0]=satisfiable[943][0] & ((x[943] ^ 0) | (x[ unit943_0[i][0] ] ^ unit943_0[i][1]) |(x[ unit943_0[i][2] ] ^ unit943_0[i][3]));
			}
		if(X_contra>0) L[943][0]=2;
		}
	//Check all rules of unit[943][1]
	L[943][1] = LargeX[943][0]>0 ? 1 : 0;
	satisfiable[943][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit943_1[i][0] ][ unit943_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit943_1[i][2] ][ unit943_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit943_1[i][4] ][ unit943_1[i][5] ] >0);
		X_contra = ( LargeX[943][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit943_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[943][0]=0; L[943][1]=1;}
			satisfiable[943][1]=satisfiable[943][1] & ((x[943] ^ 1) | (x[ unit943_1[i][0] ] ^ unit943_1[i][1]) |(x[ unit943_1[i][2] ] ^ unit943_1[i][3]));
			}
		if(X_contra>0) L[943][1]=2;
		}
	//Check all rules of unit[944][0]
	L[944][0] = LargeX[944][1]>0 ? 1 : 0;
	satisfiable[944][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit944_0[i][0] ][ unit944_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit944_0[i][2] ][ unit944_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit944_0[i][4] ][ unit944_0[i][5] ] >0);
		X_contra = ( LargeX[944][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit944_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[944][1]=0; L[944][0]=1;}
			satisfiable[944][0]=satisfiable[944][0] & ((x[944] ^ 0) | (x[ unit944_0[i][0] ] ^ unit944_0[i][1]) |(x[ unit944_0[i][2] ] ^ unit944_0[i][3]));
			}
		if(X_contra>0) L[944][0]=2;
		}
	//Check all rules of unit[944][1]
	L[944][1] = LargeX[944][0]>0 ? 1 : 0;
	satisfiable[944][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit944_1[i][0] ][ unit944_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit944_1[i][2] ][ unit944_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit944_1[i][4] ][ unit944_1[i][5] ] >0);
		X_contra = ( LargeX[944][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit944_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[944][0]=0; L[944][1]=1;}
			satisfiable[944][1]=satisfiable[944][1] & ((x[944] ^ 1) | (x[ unit944_1[i][0] ] ^ unit944_1[i][1]) |(x[ unit944_1[i][2] ] ^ unit944_1[i][3]));
			}
		if(X_contra>0) L[944][1]=2;
		}
	//Check all rules of unit[945][0]
	L[945][0] = LargeX[945][1]>0 ? 1 : 0;
	satisfiable[945][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit945_0[i][0] ][ unit945_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit945_0[i][2] ][ unit945_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit945_0[i][4] ][ unit945_0[i][5] ] >0);
		X_contra = ( LargeX[945][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit945_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[945][1]=0; L[945][0]=1;}
			satisfiable[945][0]=satisfiable[945][0] & ((x[945] ^ 0) | (x[ unit945_0[i][0] ] ^ unit945_0[i][1]) |(x[ unit945_0[i][2] ] ^ unit945_0[i][3]));
			}
		if(X_contra>0) L[945][0]=2;
		}
	//Check all rules of unit[945][1]
	L[945][1] = LargeX[945][0]>0 ? 1 : 0;
	satisfiable[945][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit945_1[i][0] ][ unit945_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit945_1[i][2] ][ unit945_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit945_1[i][4] ][ unit945_1[i][5] ] >0);
		X_contra = ( LargeX[945][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit945_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[945][0]=0; L[945][1]=1;}
			satisfiable[945][1]=satisfiable[945][1] & ((x[945] ^ 1) | (x[ unit945_1[i][0] ] ^ unit945_1[i][1]) |(x[ unit945_1[i][2] ] ^ unit945_1[i][3]));
			}
		if(X_contra>0) L[945][1]=2;
		}
	//Check all rules of unit[946][0]
	L[946][0] = LargeX[946][1]>0 ? 1 : 0;
	satisfiable[946][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit946_0[i][0] ][ unit946_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit946_0[i][2] ][ unit946_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit946_0[i][4] ][ unit946_0[i][5] ] >0);
		X_contra = ( LargeX[946][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit946_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[946][1]=0; L[946][0]=1;}
			satisfiable[946][0]=satisfiable[946][0] & ((x[946] ^ 0) | (x[ unit946_0[i][0] ] ^ unit946_0[i][1]) |(x[ unit946_0[i][2] ] ^ unit946_0[i][3]));
			}
		if(X_contra>0) L[946][0]=2;
		}
	//Check all rules of unit[946][1]
	L[946][1] = LargeX[946][0]>0 ? 1 : 0;
	satisfiable[946][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit946_1[i][0] ][ unit946_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit946_1[i][2] ][ unit946_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit946_1[i][4] ][ unit946_1[i][5] ] >0);
		X_contra = ( LargeX[946][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit946_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[946][0]=0; L[946][1]=1;}
			satisfiable[946][1]=satisfiable[946][1] & ((x[946] ^ 1) | (x[ unit946_1[i][0] ] ^ unit946_1[i][1]) |(x[ unit946_1[i][2] ] ^ unit946_1[i][3]));
			}
		if(X_contra>0) L[946][1]=2;
		}
	//Check all rules of unit[947][0]
	L[947][0] = LargeX[947][1]>0 ? 1 : 0;
	satisfiable[947][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit947_0[i][0] ][ unit947_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit947_0[i][2] ][ unit947_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit947_0[i][4] ][ unit947_0[i][5] ] >0);
		X_contra = ( LargeX[947][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit947_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[947][1]=0; L[947][0]=1;}
			satisfiable[947][0]=satisfiable[947][0] & ((x[947] ^ 0) | (x[ unit947_0[i][0] ] ^ unit947_0[i][1]) |(x[ unit947_0[i][2] ] ^ unit947_0[i][3]));
			}
		if(X_contra>0) L[947][0]=2;
		}
	//Check all rules of unit[947][1]
	L[947][1] = LargeX[947][0]>0 ? 1 : 0;
	satisfiable[947][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit947_1[i][0] ][ unit947_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit947_1[i][2] ][ unit947_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit947_1[i][4] ][ unit947_1[i][5] ] >0);
		X_contra = ( LargeX[947][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit947_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[947][0]=0; L[947][1]=1;}
			satisfiable[947][1]=satisfiable[947][1] & ((x[947] ^ 1) | (x[ unit947_1[i][0] ] ^ unit947_1[i][1]) |(x[ unit947_1[i][2] ] ^ unit947_1[i][3]));
			}
		if(X_contra>0) L[947][1]=2;
		}
	//Check all rules of unit[948][0]
	L[948][0] = LargeX[948][1]>0 ? 1 : 0;
	satisfiable[948][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit948_0[i][0] ][ unit948_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit948_0[i][2] ][ unit948_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit948_0[i][4] ][ unit948_0[i][5] ] >0);
		X_contra = ( LargeX[948][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit948_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[948][1]=0; L[948][0]=1;}
			satisfiable[948][0]=satisfiable[948][0] & ((x[948] ^ 0) | (x[ unit948_0[i][0] ] ^ unit948_0[i][1]) |(x[ unit948_0[i][2] ] ^ unit948_0[i][3]));
			}
		if(X_contra>0) L[948][0]=2;
		}
	//Check all rules of unit[948][1]
	L[948][1] = LargeX[948][0]>0 ? 1 : 0;
	satisfiable[948][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit948_1[i][0] ][ unit948_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit948_1[i][2] ][ unit948_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit948_1[i][4] ][ unit948_1[i][5] ] >0);
		X_contra = ( LargeX[948][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit948_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[948][0]=0; L[948][1]=1;}
			satisfiable[948][1]=satisfiable[948][1] & ((x[948] ^ 1) | (x[ unit948_1[i][0] ] ^ unit948_1[i][1]) |(x[ unit948_1[i][2] ] ^ unit948_1[i][3]));
			}
		if(X_contra>0) L[948][1]=2;
		}
	//Check all rules of unit[949][0]
	L[949][0] = LargeX[949][1]>0 ? 1 : 0;
	satisfiable[949][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit949_0[i][0] ][ unit949_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit949_0[i][2] ][ unit949_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit949_0[i][4] ][ unit949_0[i][5] ] >0);
		X_contra = ( LargeX[949][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit949_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[949][1]=0; L[949][0]=1;}
			satisfiable[949][0]=satisfiable[949][0] & ((x[949] ^ 0) | (x[ unit949_0[i][0] ] ^ unit949_0[i][1]) |(x[ unit949_0[i][2] ] ^ unit949_0[i][3]));
			}
		if(X_contra>0) L[949][0]=2;
		}
	//Check all rules of unit[949][1]
	L[949][1] = LargeX[949][0]>0 ? 1 : 0;
	satisfiable[949][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit949_1[i][0] ][ unit949_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit949_1[i][2] ][ unit949_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit949_1[i][4] ][ unit949_1[i][5] ] >0);
		X_contra = ( LargeX[949][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit949_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[949][0]=0; L[949][1]=1;}
			satisfiable[949][1]=satisfiable[949][1] & ((x[949] ^ 1) | (x[ unit949_1[i][0] ] ^ unit949_1[i][1]) |(x[ unit949_1[i][2] ] ^ unit949_1[i][3]));
			}
		if(X_contra>0) L[949][1]=2;
		}
	//Check all rules of unit[950][0]
	L[950][0] = LargeX[950][1]>0 ? 1 : 0;
	satisfiable[950][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit950_0[i][0] ][ unit950_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit950_0[i][2] ][ unit950_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit950_0[i][4] ][ unit950_0[i][5] ] >0);
		X_contra = ( LargeX[950][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit950_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[950][1]=0; L[950][0]=1;}
			satisfiable[950][0]=satisfiable[950][0] & ((x[950] ^ 0) | (x[ unit950_0[i][0] ] ^ unit950_0[i][1]) |(x[ unit950_0[i][2] ] ^ unit950_0[i][3]));
			}
		if(X_contra>0) L[950][0]=2;
		}
	//Check all rules of unit[950][1]
	L[950][1] = LargeX[950][0]>0 ? 1 : 0;
	satisfiable[950][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit950_1[i][0] ][ unit950_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit950_1[i][2] ][ unit950_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit950_1[i][4] ][ unit950_1[i][5] ] >0);
		X_contra = ( LargeX[950][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit950_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[950][0]=0; L[950][1]=1;}
			satisfiable[950][1]=satisfiable[950][1] & ((x[950] ^ 1) | (x[ unit950_1[i][0] ] ^ unit950_1[i][1]) |(x[ unit950_1[i][2] ] ^ unit950_1[i][3]));
			}
		if(X_contra>0) L[950][1]=2;
		}
	//Check all rules of unit[951][0]
	L[951][0] = LargeX[951][1]>0 ? 1 : 0;
	satisfiable[951][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit951_0[i][0] ][ unit951_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit951_0[i][2] ][ unit951_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit951_0[i][4] ][ unit951_0[i][5] ] >0);
		X_contra = ( LargeX[951][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit951_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[951][1]=0; L[951][0]=1;}
			satisfiable[951][0]=satisfiable[951][0] & ((x[951] ^ 0) | (x[ unit951_0[i][0] ] ^ unit951_0[i][1]) |(x[ unit951_0[i][2] ] ^ unit951_0[i][3]));
			}
		if(X_contra>0) L[951][0]=2;
		}
	//Check all rules of unit[951][1]
	L[951][1] = LargeX[951][0]>0 ? 1 : 0;
	satisfiable[951][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit951_1[i][0] ][ unit951_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit951_1[i][2] ][ unit951_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit951_1[i][4] ][ unit951_1[i][5] ] >0);
		X_contra = ( LargeX[951][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit951_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[951][0]=0; L[951][1]=1;}
			satisfiable[951][1]=satisfiable[951][1] & ((x[951] ^ 1) | (x[ unit951_1[i][0] ] ^ unit951_1[i][1]) |(x[ unit951_1[i][2] ] ^ unit951_1[i][3]));
			}
		if(X_contra>0) L[951][1]=2;
		}
	//Check all rules of unit[952][0]
	L[952][0] = LargeX[952][1]>0 ? 1 : 0;
	satisfiable[952][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit952_0[i][0] ][ unit952_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit952_0[i][2] ][ unit952_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit952_0[i][4] ][ unit952_0[i][5] ] >0);
		X_contra = ( LargeX[952][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit952_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[952][1]=0; L[952][0]=1;}
			satisfiable[952][0]=satisfiable[952][0] & ((x[952] ^ 0) | (x[ unit952_0[i][0] ] ^ unit952_0[i][1]) |(x[ unit952_0[i][2] ] ^ unit952_0[i][3]));
			}
		if(X_contra>0) L[952][0]=2;
		}
	//Check all rules of unit[952][1]
	L[952][1] = LargeX[952][0]>0 ? 1 : 0;
	satisfiable[952][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit952_1[i][0] ][ unit952_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit952_1[i][2] ][ unit952_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit952_1[i][4] ][ unit952_1[i][5] ] >0);
		X_contra = ( LargeX[952][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit952_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[952][0]=0; L[952][1]=1;}
			satisfiable[952][1]=satisfiable[952][1] & ((x[952] ^ 1) | (x[ unit952_1[i][0] ] ^ unit952_1[i][1]) |(x[ unit952_1[i][2] ] ^ unit952_1[i][3]));
			}
		if(X_contra>0) L[952][1]=2;
		}
	//Check all rules of unit[953][0]
	L[953][0] = LargeX[953][1]>0 ? 1 : 0;
	satisfiable[953][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit953_0[i][0] ][ unit953_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit953_0[i][2] ][ unit953_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit953_0[i][4] ][ unit953_0[i][5] ] >0);
		X_contra = ( LargeX[953][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit953_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[953][1]=0; L[953][0]=1;}
			satisfiable[953][0]=satisfiable[953][0] & ((x[953] ^ 0) | (x[ unit953_0[i][0] ] ^ unit953_0[i][1]) |(x[ unit953_0[i][2] ] ^ unit953_0[i][3]));
			}
		if(X_contra>0) L[953][0]=2;
		}
	//Check all rules of unit[953][1]
	L[953][1] = LargeX[953][0]>0 ? 1 : 0;
	satisfiable[953][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit953_1[i][0] ][ unit953_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit953_1[i][2] ][ unit953_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit953_1[i][4] ][ unit953_1[i][5] ] >0);
		X_contra = ( LargeX[953][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit953_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[953][0]=0; L[953][1]=1;}
			satisfiable[953][1]=satisfiable[953][1] & ((x[953] ^ 1) | (x[ unit953_1[i][0] ] ^ unit953_1[i][1]) |(x[ unit953_1[i][2] ] ^ unit953_1[i][3]));
			}
		if(X_contra>0) L[953][1]=2;
		}
	//Check all rules of unit[954][0]
	L[954][0] = LargeX[954][1]>0 ? 1 : 0;
	satisfiable[954][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit954_0[i][0] ][ unit954_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit954_0[i][2] ][ unit954_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit954_0[i][4] ][ unit954_0[i][5] ] >0);
		X_contra = ( LargeX[954][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit954_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[954][1]=0; L[954][0]=1;}
			satisfiable[954][0]=satisfiable[954][0] & ((x[954] ^ 0) | (x[ unit954_0[i][0] ] ^ unit954_0[i][1]) |(x[ unit954_0[i][2] ] ^ unit954_0[i][3]));
			}
		if(X_contra>0) L[954][0]=2;
		}
	//Check all rules of unit[954][1]
	L[954][1] = LargeX[954][0]>0 ? 1 : 0;
	satisfiable[954][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit954_1[i][0] ][ unit954_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit954_1[i][2] ][ unit954_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit954_1[i][4] ][ unit954_1[i][5] ] >0);
		X_contra = ( LargeX[954][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit954_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[954][0]=0; L[954][1]=1;}
			satisfiable[954][1]=satisfiable[954][1] & ((x[954] ^ 1) | (x[ unit954_1[i][0] ] ^ unit954_1[i][1]) |(x[ unit954_1[i][2] ] ^ unit954_1[i][3]));
			}
		if(X_contra>0) L[954][1]=2;
		}
	//Check all rules of unit[955][0]
	L[955][0] = LargeX[955][1]>0 ? 1 : 0;
	satisfiable[955][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit955_0[i][0] ][ unit955_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit955_0[i][2] ][ unit955_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit955_0[i][4] ][ unit955_0[i][5] ] >0);
		X_contra = ( LargeX[955][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit955_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[955][1]=0; L[955][0]=1;}
			satisfiable[955][0]=satisfiable[955][0] & ((x[955] ^ 0) | (x[ unit955_0[i][0] ] ^ unit955_0[i][1]) |(x[ unit955_0[i][2] ] ^ unit955_0[i][3]));
			}
		if(X_contra>0) L[955][0]=2;
		}
	//Check all rules of unit[955][1]
	L[955][1] = LargeX[955][0]>0 ? 1 : 0;
	satisfiable[955][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit955_1[i][0] ][ unit955_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit955_1[i][2] ][ unit955_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit955_1[i][4] ][ unit955_1[i][5] ] >0);
		X_contra = ( LargeX[955][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit955_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[955][0]=0; L[955][1]=1;}
			satisfiable[955][1]=satisfiable[955][1] & ((x[955] ^ 1) | (x[ unit955_1[i][0] ] ^ unit955_1[i][1]) |(x[ unit955_1[i][2] ] ^ unit955_1[i][3]));
			}
		if(X_contra>0) L[955][1]=2;
		}
	//Check all rules of unit[956][0]
	L[956][0] = LargeX[956][1]>0 ? 1 : 0;
	satisfiable[956][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit956_0[i][0] ][ unit956_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit956_0[i][2] ][ unit956_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit956_0[i][4] ][ unit956_0[i][5] ] >0);
		X_contra = ( LargeX[956][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit956_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[956][1]=0; L[956][0]=1;}
			satisfiable[956][0]=satisfiable[956][0] & ((x[956] ^ 0) | (x[ unit956_0[i][0] ] ^ unit956_0[i][1]) |(x[ unit956_0[i][2] ] ^ unit956_0[i][3]));
			}
		if(X_contra>0) L[956][0]=2;
		}
	//Check all rules of unit[956][1]
	L[956][1] = LargeX[956][0]>0 ? 1 : 0;
	satisfiable[956][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit956_1[i][0] ][ unit956_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit956_1[i][2] ][ unit956_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit956_1[i][4] ][ unit956_1[i][5] ] >0);
		X_contra = ( LargeX[956][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit956_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[956][0]=0; L[956][1]=1;}
			satisfiable[956][1]=satisfiable[956][1] & ((x[956] ^ 1) | (x[ unit956_1[i][0] ] ^ unit956_1[i][1]) |(x[ unit956_1[i][2] ] ^ unit956_1[i][3]));
			}
		if(X_contra>0) L[956][1]=2;
		}
	//Check all rules of unit[957][0]
	L[957][0] = LargeX[957][1]>0 ? 1 : 0;
	satisfiable[957][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit957_0[i][0] ][ unit957_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit957_0[i][2] ][ unit957_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit957_0[i][4] ][ unit957_0[i][5] ] >0);
		X_contra = ( LargeX[957][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit957_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[957][1]=0; L[957][0]=1;}
			satisfiable[957][0]=satisfiable[957][0] & ((x[957] ^ 0) | (x[ unit957_0[i][0] ] ^ unit957_0[i][1]) |(x[ unit957_0[i][2] ] ^ unit957_0[i][3]));
			}
		if(X_contra>0) L[957][0]=2;
		}
	//Check all rules of unit[957][1]
	L[957][1] = LargeX[957][0]>0 ? 1 : 0;
	satisfiable[957][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit957_1[i][0] ][ unit957_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit957_1[i][2] ][ unit957_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit957_1[i][4] ][ unit957_1[i][5] ] >0);
		X_contra = ( LargeX[957][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit957_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[957][0]=0; L[957][1]=1;}
			satisfiable[957][1]=satisfiable[957][1] & ((x[957] ^ 1) | (x[ unit957_1[i][0] ] ^ unit957_1[i][1]) |(x[ unit957_1[i][2] ] ^ unit957_1[i][3]));
			}
		if(X_contra>0) L[957][1]=2;
		}
	//Check all rules of unit[958][0]
	L[958][0] = LargeX[958][1]>0 ? 1 : 0;
	satisfiable[958][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit958_0[i][0] ][ unit958_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit958_0[i][2] ][ unit958_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit958_0[i][4] ][ unit958_0[i][5] ] >0);
		X_contra = ( LargeX[958][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit958_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[958][1]=0; L[958][0]=1;}
			satisfiable[958][0]=satisfiable[958][0] & ((x[958] ^ 0) | (x[ unit958_0[i][0] ] ^ unit958_0[i][1]) |(x[ unit958_0[i][2] ] ^ unit958_0[i][3]));
			}
		if(X_contra>0) L[958][0]=2;
		}
	//Check all rules of unit[958][1]
	L[958][1] = LargeX[958][0]>0 ? 1 : 0;
	satisfiable[958][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit958_1[i][0] ][ unit958_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit958_1[i][2] ][ unit958_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit958_1[i][4] ][ unit958_1[i][5] ] >0);
		X_contra = ( LargeX[958][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit958_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[958][0]=0; L[958][1]=1;}
			satisfiable[958][1]=satisfiable[958][1] & ((x[958] ^ 1) | (x[ unit958_1[i][0] ] ^ unit958_1[i][1]) |(x[ unit958_1[i][2] ] ^ unit958_1[i][3]));
			}
		if(X_contra>0) L[958][1]=2;
		}
	//Check all rules of unit[959][0]
	L[959][0] = LargeX[959][1]>0 ? 1 : 0;
	satisfiable[959][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit959_0[i][0] ][ unit959_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit959_0[i][2] ][ unit959_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit959_0[i][4] ][ unit959_0[i][5] ] >0);
		X_contra = ( LargeX[959][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit959_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[959][1]=0; L[959][0]=1;}
			satisfiable[959][0]=satisfiable[959][0] & ((x[959] ^ 0) | (x[ unit959_0[i][0] ] ^ unit959_0[i][1]) |(x[ unit959_0[i][2] ] ^ unit959_0[i][3]));
			}
		if(X_contra>0) L[959][0]=2;
		}
	//Check all rules of unit[959][1]
	L[959][1] = LargeX[959][0]>0 ? 1 : 0;
	satisfiable[959][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit959_1[i][0] ][ unit959_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit959_1[i][2] ][ unit959_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit959_1[i][4] ][ unit959_1[i][5] ] >0);
		X_contra = ( LargeX[959][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit959_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[959][0]=0; L[959][1]=1;}
			satisfiable[959][1]=satisfiable[959][1] & ((x[959] ^ 1) | (x[ unit959_1[i][0] ] ^ unit959_1[i][1]) |(x[ unit959_1[i][2] ] ^ unit959_1[i][3]));
			}
		if(X_contra>0) L[959][1]=2;
		}
	//Check all rules of unit[960][0]
	L[960][0] = LargeX[960][1]>0 ? 1 : 0;
	satisfiable[960][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit960_0[i][0] ][ unit960_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit960_0[i][2] ][ unit960_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit960_0[i][4] ][ unit960_0[i][5] ] >0);
		X_contra = ( LargeX[960][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit960_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[960][1]=0; L[960][0]=1;}
			satisfiable[960][0]=satisfiable[960][0] & ((x[960] ^ 0) | (x[ unit960_0[i][0] ] ^ unit960_0[i][1]) |(x[ unit960_0[i][2] ] ^ unit960_0[i][3]));
			}
		if(X_contra>0) L[960][0]=2;
		}
	//Check all rules of unit[960][1]
	L[960][1] = LargeX[960][0]>0 ? 1 : 0;
	satisfiable[960][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit960_1[i][0] ][ unit960_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit960_1[i][2] ][ unit960_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit960_1[i][4] ][ unit960_1[i][5] ] >0);
		X_contra = ( LargeX[960][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit960_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[960][0]=0; L[960][1]=1;}
			satisfiable[960][1]=satisfiable[960][1] & ((x[960] ^ 1) | (x[ unit960_1[i][0] ] ^ unit960_1[i][1]) |(x[ unit960_1[i][2] ] ^ unit960_1[i][3]));
			}
		if(X_contra>0) L[960][1]=2;
		}
	//Check all rules of unit[961][0]
	L[961][0] = LargeX[961][1]>0 ? 1 : 0;
	satisfiable[961][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit961_0[i][0] ][ unit961_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit961_0[i][2] ][ unit961_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit961_0[i][4] ][ unit961_0[i][5] ] >0);
		X_contra = ( LargeX[961][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit961_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[961][1]=0; L[961][0]=1;}
			satisfiable[961][0]=satisfiable[961][0] & ((x[961] ^ 0) | (x[ unit961_0[i][0] ] ^ unit961_0[i][1]) |(x[ unit961_0[i][2] ] ^ unit961_0[i][3]));
			}
		if(X_contra>0) L[961][0]=2;
		}
	//Check all rules of unit[961][1]
	L[961][1] = LargeX[961][0]>0 ? 1 : 0;
	satisfiable[961][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit961_1[i][0] ][ unit961_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit961_1[i][2] ][ unit961_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit961_1[i][4] ][ unit961_1[i][5] ] >0);
		X_contra = ( LargeX[961][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit961_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[961][0]=0; L[961][1]=1;}
			satisfiable[961][1]=satisfiable[961][1] & ((x[961] ^ 1) | (x[ unit961_1[i][0] ] ^ unit961_1[i][1]) |(x[ unit961_1[i][2] ] ^ unit961_1[i][3]));
			}
		if(X_contra>0) L[961][1]=2;
		}
	//Check all rules of unit[962][0]
	L[962][0] = LargeX[962][1]>0 ? 1 : 0;
	satisfiable[962][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit962_0[i][0] ][ unit962_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit962_0[i][2] ][ unit962_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit962_0[i][4] ][ unit962_0[i][5] ] >0);
		X_contra = ( LargeX[962][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit962_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[962][1]=0; L[962][0]=1;}
			satisfiable[962][0]=satisfiable[962][0] & ((x[962] ^ 0) | (x[ unit962_0[i][0] ] ^ unit962_0[i][1]) |(x[ unit962_0[i][2] ] ^ unit962_0[i][3]));
			}
		if(X_contra>0) L[962][0]=2;
		}
	//Check all rules of unit[962][1]
	L[962][1] = LargeX[962][0]>0 ? 1 : 0;
	satisfiable[962][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit962_1[i][0] ][ unit962_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit962_1[i][2] ][ unit962_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit962_1[i][4] ][ unit962_1[i][5] ] >0);
		X_contra = ( LargeX[962][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit962_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[962][0]=0; L[962][1]=1;}
			satisfiable[962][1]=satisfiable[962][1] & ((x[962] ^ 1) | (x[ unit962_1[i][0] ] ^ unit962_1[i][1]) |(x[ unit962_1[i][2] ] ^ unit962_1[i][3]));
			}
		if(X_contra>0) L[962][1]=2;
		}
	//Check all rules of unit[963][0]
	L[963][0] = LargeX[963][1]>0 ? 1 : 0;
	satisfiable[963][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit963_0[i][0] ][ unit963_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit963_0[i][2] ][ unit963_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit963_0[i][4] ][ unit963_0[i][5] ] >0);
		X_contra = ( LargeX[963][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit963_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[963][1]=0; L[963][0]=1;}
			satisfiable[963][0]=satisfiable[963][0] & ((x[963] ^ 0) | (x[ unit963_0[i][0] ] ^ unit963_0[i][1]) |(x[ unit963_0[i][2] ] ^ unit963_0[i][3]));
			}
		if(X_contra>0) L[963][0]=2;
		}
	//Check all rules of unit[963][1]
	L[963][1] = LargeX[963][0]>0 ? 1 : 0;
	satisfiable[963][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit963_1[i][0] ][ unit963_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit963_1[i][2] ][ unit963_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit963_1[i][4] ][ unit963_1[i][5] ] >0);
		X_contra = ( LargeX[963][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit963_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[963][0]=0; L[963][1]=1;}
			satisfiable[963][1]=satisfiable[963][1] & ((x[963] ^ 1) | (x[ unit963_1[i][0] ] ^ unit963_1[i][1]) |(x[ unit963_1[i][2] ] ^ unit963_1[i][3]));
			}
		if(X_contra>0) L[963][1]=2;
		}
	//Check all rules of unit[964][0]
	L[964][0] = LargeX[964][1]>0 ? 1 : 0;
	satisfiable[964][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit964_0[i][0] ][ unit964_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit964_0[i][2] ][ unit964_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit964_0[i][4] ][ unit964_0[i][5] ] >0);
		X_contra = ( LargeX[964][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit964_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[964][1]=0; L[964][0]=1;}
			satisfiable[964][0]=satisfiable[964][0] & ((x[964] ^ 0) | (x[ unit964_0[i][0] ] ^ unit964_0[i][1]) |(x[ unit964_0[i][2] ] ^ unit964_0[i][3]));
			}
		if(X_contra>0) L[964][0]=2;
		}
	//Check all rules of unit[964][1]
	L[964][1] = LargeX[964][0]>0 ? 1 : 0;
	satisfiable[964][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit964_1[i][0] ][ unit964_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit964_1[i][2] ][ unit964_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit964_1[i][4] ][ unit964_1[i][5] ] >0);
		X_contra = ( LargeX[964][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit964_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[964][0]=0; L[964][1]=1;}
			satisfiable[964][1]=satisfiable[964][1] & ((x[964] ^ 1) | (x[ unit964_1[i][0] ] ^ unit964_1[i][1]) |(x[ unit964_1[i][2] ] ^ unit964_1[i][3]));
			}
		if(X_contra>0) L[964][1]=2;
		}
	//Check all rules of unit[965][0]
	L[965][0] = LargeX[965][1]>0 ? 1 : 0;
	satisfiable[965][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit965_0[i][0] ][ unit965_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit965_0[i][2] ][ unit965_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit965_0[i][4] ][ unit965_0[i][5] ] >0);
		X_contra = ( LargeX[965][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit965_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[965][1]=0; L[965][0]=1;}
			satisfiable[965][0]=satisfiable[965][0] & ((x[965] ^ 0) | (x[ unit965_0[i][0] ] ^ unit965_0[i][1]) |(x[ unit965_0[i][2] ] ^ unit965_0[i][3]));
			}
		if(X_contra>0) L[965][0]=2;
		}
	//Check all rules of unit[965][1]
	L[965][1] = LargeX[965][0]>0 ? 1 : 0;
	satisfiable[965][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit965_1[i][0] ][ unit965_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit965_1[i][2] ][ unit965_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit965_1[i][4] ][ unit965_1[i][5] ] >0);
		X_contra = ( LargeX[965][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit965_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[965][0]=0; L[965][1]=1;}
			satisfiable[965][1]=satisfiable[965][1] & ((x[965] ^ 1) | (x[ unit965_1[i][0] ] ^ unit965_1[i][1]) |(x[ unit965_1[i][2] ] ^ unit965_1[i][3]));
			}
		if(X_contra>0) L[965][1]=2;
		}
	//Check all rules of unit[966][0]
	L[966][0] = LargeX[966][1]>0 ? 1 : 0;
	satisfiable[966][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit966_0[i][0] ][ unit966_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit966_0[i][2] ][ unit966_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit966_0[i][4] ][ unit966_0[i][5] ] >0);
		X_contra = ( LargeX[966][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit966_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[966][1]=0; L[966][0]=1;}
			satisfiable[966][0]=satisfiable[966][0] & ((x[966] ^ 0) | (x[ unit966_0[i][0] ] ^ unit966_0[i][1]) |(x[ unit966_0[i][2] ] ^ unit966_0[i][3]));
			}
		if(X_contra>0) L[966][0]=2;
		}
	//Check all rules of unit[966][1]
	L[966][1] = LargeX[966][0]>0 ? 1 : 0;
	satisfiable[966][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit966_1[i][0] ][ unit966_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit966_1[i][2] ][ unit966_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit966_1[i][4] ][ unit966_1[i][5] ] >0);
		X_contra = ( LargeX[966][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit966_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[966][0]=0; L[966][1]=1;}
			satisfiable[966][1]=satisfiable[966][1] & ((x[966] ^ 1) | (x[ unit966_1[i][0] ] ^ unit966_1[i][1]) |(x[ unit966_1[i][2] ] ^ unit966_1[i][3]));
			}
		if(X_contra>0) L[966][1]=2;
		}
	//Check all rules of unit[967][0]
	L[967][0] = LargeX[967][1]>0 ? 1 : 0;
	satisfiable[967][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit967_0[i][0] ][ unit967_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit967_0[i][2] ][ unit967_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit967_0[i][4] ][ unit967_0[i][5] ] >0);
		X_contra = ( LargeX[967][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit967_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[967][1]=0; L[967][0]=1;}
			satisfiable[967][0]=satisfiable[967][0] & ((x[967] ^ 0) | (x[ unit967_0[i][0] ] ^ unit967_0[i][1]) |(x[ unit967_0[i][2] ] ^ unit967_0[i][3]));
			}
		if(X_contra>0) L[967][0]=2;
		}
	//Check all rules of unit[967][1]
	L[967][1] = LargeX[967][0]>0 ? 1 : 0;
	satisfiable[967][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit967_1[i][0] ][ unit967_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit967_1[i][2] ][ unit967_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit967_1[i][4] ][ unit967_1[i][5] ] >0);
		X_contra = ( LargeX[967][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit967_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[967][0]=0; L[967][1]=1;}
			satisfiable[967][1]=satisfiable[967][1] & ((x[967] ^ 1) | (x[ unit967_1[i][0] ] ^ unit967_1[i][1]) |(x[ unit967_1[i][2] ] ^ unit967_1[i][3]));
			}
		if(X_contra>0) L[967][1]=2;
		}
	//Check all rules of unit[968][0]
	L[968][0] = LargeX[968][1]>0 ? 1 : 0;
	satisfiable[968][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit968_0[i][0] ][ unit968_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit968_0[i][2] ][ unit968_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit968_0[i][4] ][ unit968_0[i][5] ] >0);
		X_contra = ( LargeX[968][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit968_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[968][1]=0; L[968][0]=1;}
			satisfiable[968][0]=satisfiable[968][0] & ((x[968] ^ 0) | (x[ unit968_0[i][0] ] ^ unit968_0[i][1]) |(x[ unit968_0[i][2] ] ^ unit968_0[i][3]));
			}
		if(X_contra>0) L[968][0]=2;
		}
	//Check all rules of unit[968][1]
	L[968][1] = LargeX[968][0]>0 ? 1 : 0;
	satisfiable[968][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit968_1[i][0] ][ unit968_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit968_1[i][2] ][ unit968_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit968_1[i][4] ][ unit968_1[i][5] ] >0);
		X_contra = ( LargeX[968][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit968_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[968][0]=0; L[968][1]=1;}
			satisfiable[968][1]=satisfiable[968][1] & ((x[968] ^ 1) | (x[ unit968_1[i][0] ] ^ unit968_1[i][1]) |(x[ unit968_1[i][2] ] ^ unit968_1[i][3]));
			}
		if(X_contra>0) L[968][1]=2;
		}
	//Check all rules of unit[969][0]
	L[969][0] = LargeX[969][1]>0 ? 1 : 0;
	satisfiable[969][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit969_0[i][0] ][ unit969_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit969_0[i][2] ][ unit969_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit969_0[i][4] ][ unit969_0[i][5] ] >0);
		X_contra = ( LargeX[969][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit969_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[969][1]=0; L[969][0]=1;}
			satisfiable[969][0]=satisfiable[969][0] & ((x[969] ^ 0) | (x[ unit969_0[i][0] ] ^ unit969_0[i][1]) |(x[ unit969_0[i][2] ] ^ unit969_0[i][3]));
			}
		if(X_contra>0) L[969][0]=2;
		}
	//Check all rules of unit[969][1]
	L[969][1] = LargeX[969][0]>0 ? 1 : 0;
	satisfiable[969][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit969_1[i][0] ][ unit969_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit969_1[i][2] ][ unit969_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit969_1[i][4] ][ unit969_1[i][5] ] >0);
		X_contra = ( LargeX[969][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit969_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[969][0]=0; L[969][1]=1;}
			satisfiable[969][1]=satisfiable[969][1] & ((x[969] ^ 1) | (x[ unit969_1[i][0] ] ^ unit969_1[i][1]) |(x[ unit969_1[i][2] ] ^ unit969_1[i][3]));
			}
		if(X_contra>0) L[969][1]=2;
		}
	//Check all rules of unit[970][0]
	L[970][0] = LargeX[970][1]>0 ? 1 : 0;
	satisfiable[970][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit970_0[i][0] ][ unit970_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit970_0[i][2] ][ unit970_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit970_0[i][4] ][ unit970_0[i][5] ] >0);
		X_contra = ( LargeX[970][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit970_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[970][1]=0; L[970][0]=1;}
			satisfiable[970][0]=satisfiable[970][0] & ((x[970] ^ 0) | (x[ unit970_0[i][0] ] ^ unit970_0[i][1]) |(x[ unit970_0[i][2] ] ^ unit970_0[i][3]));
			}
		if(X_contra>0) L[970][0]=2;
		}
	//Check all rules of unit[970][1]
	L[970][1] = LargeX[970][0]>0 ? 1 : 0;
	satisfiable[970][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit970_1[i][0] ][ unit970_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit970_1[i][2] ][ unit970_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit970_1[i][4] ][ unit970_1[i][5] ] >0);
		X_contra = ( LargeX[970][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit970_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[970][0]=0; L[970][1]=1;}
			satisfiable[970][1]=satisfiable[970][1] & ((x[970] ^ 1) | (x[ unit970_1[i][0] ] ^ unit970_1[i][1]) |(x[ unit970_1[i][2] ] ^ unit970_1[i][3]));
			}
		if(X_contra>0) L[970][1]=2;
		}
	//Check all rules of unit[971][0]
	L[971][0] = LargeX[971][1]>0 ? 1 : 0;
	satisfiable[971][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit971_0[i][0] ][ unit971_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit971_0[i][2] ][ unit971_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit971_0[i][4] ][ unit971_0[i][5] ] >0);
		X_contra = ( LargeX[971][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit971_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[971][1]=0; L[971][0]=1;}
			satisfiable[971][0]=satisfiable[971][0] & ((x[971] ^ 0) | (x[ unit971_0[i][0] ] ^ unit971_0[i][1]) |(x[ unit971_0[i][2] ] ^ unit971_0[i][3]));
			}
		if(X_contra>0) L[971][0]=2;
		}
	//Check all rules of unit[971][1]
	L[971][1] = LargeX[971][0]>0 ? 1 : 0;
	satisfiable[971][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit971_1[i][0] ][ unit971_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit971_1[i][2] ][ unit971_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit971_1[i][4] ][ unit971_1[i][5] ] >0);
		X_contra = ( LargeX[971][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit971_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[971][0]=0; L[971][1]=1;}
			satisfiable[971][1]=satisfiable[971][1] & ((x[971] ^ 1) | (x[ unit971_1[i][0] ] ^ unit971_1[i][1]) |(x[ unit971_1[i][2] ] ^ unit971_1[i][3]));
			}
		if(X_contra>0) L[971][1]=2;
		}
	//Check all rules of unit[972][0]
	L[972][0] = LargeX[972][1]>0 ? 1 : 0;
	satisfiable[972][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit972_0[i][0] ][ unit972_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit972_0[i][2] ][ unit972_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit972_0[i][4] ][ unit972_0[i][5] ] >0);
		X_contra = ( LargeX[972][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit972_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[972][1]=0; L[972][0]=1;}
			satisfiable[972][0]=satisfiable[972][0] & ((x[972] ^ 0) | (x[ unit972_0[i][0] ] ^ unit972_0[i][1]) |(x[ unit972_0[i][2] ] ^ unit972_0[i][3]));
			}
		if(X_contra>0) L[972][0]=2;
		}
	//Check all rules of unit[972][1]
	L[972][1] = LargeX[972][0]>0 ? 1 : 0;
	satisfiable[972][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit972_1[i][0] ][ unit972_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit972_1[i][2] ][ unit972_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit972_1[i][4] ][ unit972_1[i][5] ] >0);
		X_contra = ( LargeX[972][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit972_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[972][0]=0; L[972][1]=1;}
			satisfiable[972][1]=satisfiable[972][1] & ((x[972] ^ 1) | (x[ unit972_1[i][0] ] ^ unit972_1[i][1]) |(x[ unit972_1[i][2] ] ^ unit972_1[i][3]));
			}
		if(X_contra>0) L[972][1]=2;
		}
	//Check all rules of unit[973][0]
	L[973][0] = LargeX[973][1]>0 ? 1 : 0;
	satisfiable[973][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit973_0[i][0] ][ unit973_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit973_0[i][2] ][ unit973_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit973_0[i][4] ][ unit973_0[i][5] ] >0);
		X_contra = ( LargeX[973][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit973_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[973][1]=0; L[973][0]=1;}
			satisfiable[973][0]=satisfiable[973][0] & ((x[973] ^ 0) | (x[ unit973_0[i][0] ] ^ unit973_0[i][1]) |(x[ unit973_0[i][2] ] ^ unit973_0[i][3]));
			}
		if(X_contra>0) L[973][0]=2;
		}
	//Check all rules of unit[973][1]
	L[973][1] = LargeX[973][0]>0 ? 1 : 0;
	satisfiable[973][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit973_1[i][0] ][ unit973_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit973_1[i][2] ][ unit973_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit973_1[i][4] ][ unit973_1[i][5] ] >0);
		X_contra = ( LargeX[973][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit973_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[973][0]=0; L[973][1]=1;}
			satisfiable[973][1]=satisfiable[973][1] & ((x[973] ^ 1) | (x[ unit973_1[i][0] ] ^ unit973_1[i][1]) |(x[ unit973_1[i][2] ] ^ unit973_1[i][3]));
			}
		if(X_contra>0) L[973][1]=2;
		}
	//Check all rules of unit[974][0]
	L[974][0] = LargeX[974][1]>0 ? 1 : 0;
	satisfiable[974][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit974_0[i][0] ][ unit974_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit974_0[i][2] ][ unit974_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit974_0[i][4] ][ unit974_0[i][5] ] >0);
		X_contra = ( LargeX[974][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit974_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[974][1]=0; L[974][0]=1;}
			satisfiable[974][0]=satisfiable[974][0] & ((x[974] ^ 0) | (x[ unit974_0[i][0] ] ^ unit974_0[i][1]) |(x[ unit974_0[i][2] ] ^ unit974_0[i][3]));
			}
		if(X_contra>0) L[974][0]=2;
		}
	//Check all rules of unit[974][1]
	L[974][1] = LargeX[974][0]>0 ? 1 : 0;
	satisfiable[974][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit974_1[i][0] ][ unit974_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit974_1[i][2] ][ unit974_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit974_1[i][4] ][ unit974_1[i][5] ] >0);
		X_contra = ( LargeX[974][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit974_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[974][0]=0; L[974][1]=1;}
			satisfiable[974][1]=satisfiable[974][1] & ((x[974] ^ 1) | (x[ unit974_1[i][0] ] ^ unit974_1[i][1]) |(x[ unit974_1[i][2] ] ^ unit974_1[i][3]));
			}
		if(X_contra>0) L[974][1]=2;
		}
	//Check all rules of unit[975][0]
	L[975][0] = LargeX[975][1]>0 ? 1 : 0;
	satisfiable[975][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit975_0[i][0] ][ unit975_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit975_0[i][2] ][ unit975_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit975_0[i][4] ][ unit975_0[i][5] ] >0);
		X_contra = ( LargeX[975][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit975_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[975][1]=0; L[975][0]=1;}
			satisfiable[975][0]=satisfiable[975][0] & ((x[975] ^ 0) | (x[ unit975_0[i][0] ] ^ unit975_0[i][1]) |(x[ unit975_0[i][2] ] ^ unit975_0[i][3]));
			}
		if(X_contra>0) L[975][0]=2;
		}
	//Check all rules of unit[975][1]
	L[975][1] = LargeX[975][0]>0 ? 1 : 0;
	satisfiable[975][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit975_1[i][0] ][ unit975_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit975_1[i][2] ][ unit975_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit975_1[i][4] ][ unit975_1[i][5] ] >0);
		X_contra = ( LargeX[975][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit975_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[975][0]=0; L[975][1]=1;}
			satisfiable[975][1]=satisfiable[975][1] & ((x[975] ^ 1) | (x[ unit975_1[i][0] ] ^ unit975_1[i][1]) |(x[ unit975_1[i][2] ] ^ unit975_1[i][3]));
			}
		if(X_contra>0) L[975][1]=2;
		}
	//Check all rules of unit[976][0]
	L[976][0] = LargeX[976][1]>0 ? 1 : 0;
	satisfiable[976][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit976_0[i][0] ][ unit976_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit976_0[i][2] ][ unit976_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit976_0[i][4] ][ unit976_0[i][5] ] >0);
		X_contra = ( LargeX[976][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit976_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[976][1]=0; L[976][0]=1;}
			satisfiable[976][0]=satisfiable[976][0] & ((x[976] ^ 0) | (x[ unit976_0[i][0] ] ^ unit976_0[i][1]) |(x[ unit976_0[i][2] ] ^ unit976_0[i][3]));
			}
		if(X_contra>0) L[976][0]=2;
		}
	//Check all rules of unit[976][1]
	L[976][1] = LargeX[976][0]>0 ? 1 : 0;
	satisfiable[976][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit976_1[i][0] ][ unit976_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit976_1[i][2] ][ unit976_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit976_1[i][4] ][ unit976_1[i][5] ] >0);
		X_contra = ( LargeX[976][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit976_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[976][0]=0; L[976][1]=1;}
			satisfiable[976][1]=satisfiable[976][1] & ((x[976] ^ 1) | (x[ unit976_1[i][0] ] ^ unit976_1[i][1]) |(x[ unit976_1[i][2] ] ^ unit976_1[i][3]));
			}
		if(X_contra>0) L[976][1]=2;
		}
	//Check all rules of unit[977][0]
	L[977][0] = LargeX[977][1]>0 ? 1 : 0;
	satisfiable[977][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit977_0[i][0] ][ unit977_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit977_0[i][2] ][ unit977_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit977_0[i][4] ][ unit977_0[i][5] ] >0);
		X_contra = ( LargeX[977][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit977_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[977][1]=0; L[977][0]=1;}
			satisfiable[977][0]=satisfiable[977][0] & ((x[977] ^ 0) | (x[ unit977_0[i][0] ] ^ unit977_0[i][1]) |(x[ unit977_0[i][2] ] ^ unit977_0[i][3]));
			}
		if(X_contra>0) L[977][0]=2;
		}
	//Check all rules of unit[977][1]
	L[977][1] = LargeX[977][0]>0 ? 1 : 0;
	satisfiable[977][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit977_1[i][0] ][ unit977_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit977_1[i][2] ][ unit977_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit977_1[i][4] ][ unit977_1[i][5] ] >0);
		X_contra = ( LargeX[977][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit977_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[977][0]=0; L[977][1]=1;}
			satisfiable[977][1]=satisfiable[977][1] & ((x[977] ^ 1) | (x[ unit977_1[i][0] ] ^ unit977_1[i][1]) |(x[ unit977_1[i][2] ] ^ unit977_1[i][3]));
			}
		if(X_contra>0) L[977][1]=2;
		}
	//Check all rules of unit[978][0]
	L[978][0] = LargeX[978][1]>0 ? 1 : 0;
	satisfiable[978][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit978_0[i][0] ][ unit978_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit978_0[i][2] ][ unit978_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit978_0[i][4] ][ unit978_0[i][5] ] >0);
		X_contra = ( LargeX[978][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit978_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[978][1]=0; L[978][0]=1;}
			satisfiable[978][0]=satisfiable[978][0] & ((x[978] ^ 0) | (x[ unit978_0[i][0] ] ^ unit978_0[i][1]) |(x[ unit978_0[i][2] ] ^ unit978_0[i][3]));
			}
		if(X_contra>0) L[978][0]=2;
		}
	//Check all rules of unit[978][1]
	L[978][1] = LargeX[978][0]>0 ? 1 : 0;
	satisfiable[978][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit978_1[i][0] ][ unit978_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit978_1[i][2] ][ unit978_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit978_1[i][4] ][ unit978_1[i][5] ] >0);
		X_contra = ( LargeX[978][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit978_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[978][0]=0; L[978][1]=1;}
			satisfiable[978][1]=satisfiable[978][1] & ((x[978] ^ 1) | (x[ unit978_1[i][0] ] ^ unit978_1[i][1]) |(x[ unit978_1[i][2] ] ^ unit978_1[i][3]));
			}
		if(X_contra>0) L[978][1]=2;
		}
	//Check all rules of unit[979][0]
	L[979][0] = LargeX[979][1]>0 ? 1 : 0;
	satisfiable[979][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit979_0[i][0] ][ unit979_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit979_0[i][2] ][ unit979_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit979_0[i][4] ][ unit979_0[i][5] ] >0);
		X_contra = ( LargeX[979][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit979_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[979][1]=0; L[979][0]=1;}
			satisfiable[979][0]=satisfiable[979][0] & ((x[979] ^ 0) | (x[ unit979_0[i][0] ] ^ unit979_0[i][1]) |(x[ unit979_0[i][2] ] ^ unit979_0[i][3]));
			}
		if(X_contra>0) L[979][0]=2;
		}
	//Check all rules of unit[979][1]
	L[979][1] = LargeX[979][0]>0 ? 1 : 0;
	satisfiable[979][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit979_1[i][0] ][ unit979_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit979_1[i][2] ][ unit979_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit979_1[i][4] ][ unit979_1[i][5] ] >0);
		X_contra = ( LargeX[979][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit979_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[979][0]=0; L[979][1]=1;}
			satisfiable[979][1]=satisfiable[979][1] & ((x[979] ^ 1) | (x[ unit979_1[i][0] ] ^ unit979_1[i][1]) |(x[ unit979_1[i][2] ] ^ unit979_1[i][3]));
			}
		if(X_contra>0) L[979][1]=2;
		}
	//Check all rules of unit[980][0]
	L[980][0] = LargeX[980][1]>0 ? 1 : 0;
	satisfiable[980][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit980_0[i][0] ][ unit980_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit980_0[i][2] ][ unit980_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit980_0[i][4] ][ unit980_0[i][5] ] >0);
		X_contra = ( LargeX[980][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit980_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[980][1]=0; L[980][0]=1;}
			satisfiable[980][0]=satisfiable[980][0] & ((x[980] ^ 0) | (x[ unit980_0[i][0] ] ^ unit980_0[i][1]) |(x[ unit980_0[i][2] ] ^ unit980_0[i][3]));
			}
		if(X_contra>0) L[980][0]=2;
		}
	//Check all rules of unit[980][1]
	L[980][1] = LargeX[980][0]>0 ? 1 : 0;
	satisfiable[980][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit980_1[i][0] ][ unit980_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit980_1[i][2] ][ unit980_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit980_1[i][4] ][ unit980_1[i][5] ] >0);
		X_contra = ( LargeX[980][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit980_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[980][0]=0; L[980][1]=1;}
			satisfiable[980][1]=satisfiable[980][1] & ((x[980] ^ 1) | (x[ unit980_1[i][0] ] ^ unit980_1[i][1]) |(x[ unit980_1[i][2] ] ^ unit980_1[i][3]));
			}
		if(X_contra>0) L[980][1]=2;
		}
	//Check all rules of unit[981][0]
	L[981][0] = LargeX[981][1]>0 ? 1 : 0;
	satisfiable[981][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit981_0[i][0] ][ unit981_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit981_0[i][2] ][ unit981_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit981_0[i][4] ][ unit981_0[i][5] ] >0);
		X_contra = ( LargeX[981][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit981_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[981][1]=0; L[981][0]=1;}
			satisfiable[981][0]=satisfiable[981][0] & ((x[981] ^ 0) | (x[ unit981_0[i][0] ] ^ unit981_0[i][1]) |(x[ unit981_0[i][2] ] ^ unit981_0[i][3]));
			}
		if(X_contra>0) L[981][0]=2;
		}
	//Check all rules of unit[981][1]
	L[981][1] = LargeX[981][0]>0 ? 1 : 0;
	satisfiable[981][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit981_1[i][0] ][ unit981_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit981_1[i][2] ][ unit981_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit981_1[i][4] ][ unit981_1[i][5] ] >0);
		X_contra = ( LargeX[981][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit981_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[981][0]=0; L[981][1]=1;}
			satisfiable[981][1]=satisfiable[981][1] & ((x[981] ^ 1) | (x[ unit981_1[i][0] ] ^ unit981_1[i][1]) |(x[ unit981_1[i][2] ] ^ unit981_1[i][3]));
			}
		if(X_contra>0) L[981][1]=2;
		}
	//Check all rules of unit[982][0]
	L[982][0] = LargeX[982][1]>0 ? 1 : 0;
	satisfiable[982][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit982_0[i][0] ][ unit982_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit982_0[i][2] ][ unit982_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit982_0[i][4] ][ unit982_0[i][5] ] >0);
		X_contra = ( LargeX[982][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit982_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[982][1]=0; L[982][0]=1;}
			satisfiable[982][0]=satisfiable[982][0] & ((x[982] ^ 0) | (x[ unit982_0[i][0] ] ^ unit982_0[i][1]) |(x[ unit982_0[i][2] ] ^ unit982_0[i][3]));
			}
		if(X_contra>0) L[982][0]=2;
		}
	//Check all rules of unit[982][1]
	L[982][1] = LargeX[982][0]>0 ? 1 : 0;
	satisfiable[982][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit982_1[i][0] ][ unit982_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit982_1[i][2] ][ unit982_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit982_1[i][4] ][ unit982_1[i][5] ] >0);
		X_contra = ( LargeX[982][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit982_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[982][0]=0; L[982][1]=1;}
			satisfiable[982][1]=satisfiable[982][1] & ((x[982] ^ 1) | (x[ unit982_1[i][0] ] ^ unit982_1[i][1]) |(x[ unit982_1[i][2] ] ^ unit982_1[i][3]));
			}
		if(X_contra>0) L[982][1]=2;
		}
	//Check all rules of unit[983][0]
	L[983][0] = LargeX[983][1]>0 ? 1 : 0;
	satisfiable[983][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit983_0[i][0] ][ unit983_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit983_0[i][2] ][ unit983_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit983_0[i][4] ][ unit983_0[i][5] ] >0);
		X_contra = ( LargeX[983][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit983_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[983][1]=0; L[983][0]=1;}
			satisfiable[983][0]=satisfiable[983][0] & ((x[983] ^ 0) | (x[ unit983_0[i][0] ] ^ unit983_0[i][1]) |(x[ unit983_0[i][2] ] ^ unit983_0[i][3]));
			}
		if(X_contra>0) L[983][0]=2;
		}
	//Check all rules of unit[983][1]
	L[983][1] = LargeX[983][0]>0 ? 1 : 0;
	satisfiable[983][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit983_1[i][0] ][ unit983_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit983_1[i][2] ][ unit983_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit983_1[i][4] ][ unit983_1[i][5] ] >0);
		X_contra = ( LargeX[983][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit983_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[983][0]=0; L[983][1]=1;}
			satisfiable[983][1]=satisfiable[983][1] & ((x[983] ^ 1) | (x[ unit983_1[i][0] ] ^ unit983_1[i][1]) |(x[ unit983_1[i][2] ] ^ unit983_1[i][3]));
			}
		if(X_contra>0) L[983][1]=2;
		}
	//Check all rules of unit[984][0]
	L[984][0] = LargeX[984][1]>0 ? 1 : 0;
	satisfiable[984][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit984_0[i][0] ][ unit984_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit984_0[i][2] ][ unit984_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit984_0[i][4] ][ unit984_0[i][5] ] >0);
		X_contra = ( LargeX[984][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit984_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[984][1]=0; L[984][0]=1;}
			satisfiable[984][0]=satisfiable[984][0] & ((x[984] ^ 0) | (x[ unit984_0[i][0] ] ^ unit984_0[i][1]) |(x[ unit984_0[i][2] ] ^ unit984_0[i][3]));
			}
		if(X_contra>0) L[984][0]=2;
		}
	//Check all rules of unit[984][1]
	L[984][1] = LargeX[984][0]>0 ? 1 : 0;
	satisfiable[984][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit984_1[i][0] ][ unit984_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit984_1[i][2] ][ unit984_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit984_1[i][4] ][ unit984_1[i][5] ] >0);
		X_contra = ( LargeX[984][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit984_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[984][0]=0; L[984][1]=1;}
			satisfiable[984][1]=satisfiable[984][1] & ((x[984] ^ 1) | (x[ unit984_1[i][0] ] ^ unit984_1[i][1]) |(x[ unit984_1[i][2] ] ^ unit984_1[i][3]));
			}
		if(X_contra>0) L[984][1]=2;
		}
	//Check all rules of unit[985][0]
	L[985][0] = LargeX[985][1]>0 ? 1 : 0;
	satisfiable[985][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit985_0[i][0] ][ unit985_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit985_0[i][2] ][ unit985_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit985_0[i][4] ][ unit985_0[i][5] ] >0);
		X_contra = ( LargeX[985][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit985_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[985][1]=0; L[985][0]=1;}
			satisfiable[985][0]=satisfiable[985][0] & ((x[985] ^ 0) | (x[ unit985_0[i][0] ] ^ unit985_0[i][1]) |(x[ unit985_0[i][2] ] ^ unit985_0[i][3]));
			}
		if(X_contra>0) L[985][0]=2;
		}
	//Check all rules of unit[985][1]
	L[985][1] = LargeX[985][0]>0 ? 1 : 0;
	satisfiable[985][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit985_1[i][0] ][ unit985_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit985_1[i][2] ][ unit985_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit985_1[i][4] ][ unit985_1[i][5] ] >0);
		X_contra = ( LargeX[985][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit985_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[985][0]=0; L[985][1]=1;}
			satisfiable[985][1]=satisfiable[985][1] & ((x[985] ^ 1) | (x[ unit985_1[i][0] ] ^ unit985_1[i][1]) |(x[ unit985_1[i][2] ] ^ unit985_1[i][3]));
			}
		if(X_contra>0) L[985][1]=2;
		}
	//Check all rules of unit[986][0]
	L[986][0] = LargeX[986][1]>0 ? 1 : 0;
	satisfiable[986][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit986_0[i][0] ][ unit986_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit986_0[i][2] ][ unit986_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit986_0[i][4] ][ unit986_0[i][5] ] >0);
		X_contra = ( LargeX[986][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit986_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[986][1]=0; L[986][0]=1;}
			satisfiable[986][0]=satisfiable[986][0] & ((x[986] ^ 0) | (x[ unit986_0[i][0] ] ^ unit986_0[i][1]) |(x[ unit986_0[i][2] ] ^ unit986_0[i][3]));
			}
		if(X_contra>0) L[986][0]=2;
		}
	//Check all rules of unit[986][1]
	L[986][1] = LargeX[986][0]>0 ? 1 : 0;
	satisfiable[986][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit986_1[i][0] ][ unit986_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit986_1[i][2] ][ unit986_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit986_1[i][4] ][ unit986_1[i][5] ] >0);
		X_contra = ( LargeX[986][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit986_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[986][0]=0; L[986][1]=1;}
			satisfiable[986][1]=satisfiable[986][1] & ((x[986] ^ 1) | (x[ unit986_1[i][0] ] ^ unit986_1[i][1]) |(x[ unit986_1[i][2] ] ^ unit986_1[i][3]));
			}
		if(X_contra>0) L[986][1]=2;
		}
	//Check all rules of unit[987][0]
	L[987][0] = LargeX[987][1]>0 ? 1 : 0;
	satisfiable[987][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit987_0[i][0] ][ unit987_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit987_0[i][2] ][ unit987_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit987_0[i][4] ][ unit987_0[i][5] ] >0);
		X_contra = ( LargeX[987][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit987_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[987][1]=0; L[987][0]=1;}
			satisfiable[987][0]=satisfiable[987][0] & ((x[987] ^ 0) | (x[ unit987_0[i][0] ] ^ unit987_0[i][1]) |(x[ unit987_0[i][2] ] ^ unit987_0[i][3]));
			}
		if(X_contra>0) L[987][0]=2;
		}
	//Check all rules of unit[987][1]
	L[987][1] = LargeX[987][0]>0 ? 1 : 0;
	satisfiable[987][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit987_1[i][0] ][ unit987_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit987_1[i][2] ][ unit987_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit987_1[i][4] ][ unit987_1[i][5] ] >0);
		X_contra = ( LargeX[987][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit987_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[987][0]=0; L[987][1]=1;}
			satisfiable[987][1]=satisfiable[987][1] & ((x[987] ^ 1) | (x[ unit987_1[i][0] ] ^ unit987_1[i][1]) |(x[ unit987_1[i][2] ] ^ unit987_1[i][3]));
			}
		if(X_contra>0) L[987][1]=2;
		}
	//Check all rules of unit[988][0]
	L[988][0] = LargeX[988][1]>0 ? 1 : 0;
	satisfiable[988][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit988_0[i][0] ][ unit988_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit988_0[i][2] ][ unit988_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit988_0[i][4] ][ unit988_0[i][5] ] >0);
		X_contra = ( LargeX[988][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit988_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[988][1]=0; L[988][0]=1;}
			satisfiable[988][0]=satisfiable[988][0] & ((x[988] ^ 0) | (x[ unit988_0[i][0] ] ^ unit988_0[i][1]) |(x[ unit988_0[i][2] ] ^ unit988_0[i][3]));
			}
		if(X_contra>0) L[988][0]=2;
		}
	//Check all rules of unit[988][1]
	L[988][1] = LargeX[988][0]>0 ? 1 : 0;
	satisfiable[988][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit988_1[i][0] ][ unit988_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit988_1[i][2] ][ unit988_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit988_1[i][4] ][ unit988_1[i][5] ] >0);
		X_contra = ( LargeX[988][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit988_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[988][0]=0; L[988][1]=1;}
			satisfiable[988][1]=satisfiable[988][1] & ((x[988] ^ 1) | (x[ unit988_1[i][0] ] ^ unit988_1[i][1]) |(x[ unit988_1[i][2] ] ^ unit988_1[i][3]));
			}
		if(X_contra>0) L[988][1]=2;
		}
	//Check all rules of unit[989][0]
	L[989][0] = LargeX[989][1]>0 ? 1 : 0;
	satisfiable[989][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit989_0[i][0] ][ unit989_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit989_0[i][2] ][ unit989_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit989_0[i][4] ][ unit989_0[i][5] ] >0);
		X_contra = ( LargeX[989][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit989_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[989][1]=0; L[989][0]=1;}
			satisfiable[989][0]=satisfiable[989][0] & ((x[989] ^ 0) | (x[ unit989_0[i][0] ] ^ unit989_0[i][1]) |(x[ unit989_0[i][2] ] ^ unit989_0[i][3]));
			}
		if(X_contra>0) L[989][0]=2;
		}
	//Check all rules of unit[989][1]
	L[989][1] = LargeX[989][0]>0 ? 1 : 0;
	satisfiable[989][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit989_1[i][0] ][ unit989_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit989_1[i][2] ][ unit989_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit989_1[i][4] ][ unit989_1[i][5] ] >0);
		X_contra = ( LargeX[989][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit989_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[989][0]=0; L[989][1]=1;}
			satisfiable[989][1]=satisfiable[989][1] & ((x[989] ^ 1) | (x[ unit989_1[i][0] ] ^ unit989_1[i][1]) |(x[ unit989_1[i][2] ] ^ unit989_1[i][3]));
			}
		if(X_contra>0) L[989][1]=2;
		}
	//Check all rules of unit[990][0]
	L[990][0] = LargeX[990][1]>0 ? 1 : 0;
	satisfiable[990][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit990_0[i][0] ][ unit990_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit990_0[i][2] ][ unit990_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit990_0[i][4] ][ unit990_0[i][5] ] >0);
		X_contra = ( LargeX[990][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit990_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[990][1]=0; L[990][0]=1;}
			satisfiable[990][0]=satisfiable[990][0] & ((x[990] ^ 0) | (x[ unit990_0[i][0] ] ^ unit990_0[i][1]) |(x[ unit990_0[i][2] ] ^ unit990_0[i][3]));
			}
		if(X_contra>0) L[990][0]=2;
		}
	//Check all rules of unit[990][1]
	L[990][1] = LargeX[990][0]>0 ? 1 : 0;
	satisfiable[990][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit990_1[i][0] ][ unit990_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit990_1[i][2] ][ unit990_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit990_1[i][4] ][ unit990_1[i][5] ] >0);
		X_contra = ( LargeX[990][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit990_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[990][0]=0; L[990][1]=1;}
			satisfiable[990][1]=satisfiable[990][1] & ((x[990] ^ 1) | (x[ unit990_1[i][0] ] ^ unit990_1[i][1]) |(x[ unit990_1[i][2] ] ^ unit990_1[i][3]));
			}
		if(X_contra>0) L[990][1]=2;
		}
	//Check all rules of unit[991][0]
	L[991][0] = LargeX[991][1]>0 ? 1 : 0;
	satisfiable[991][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit991_0[i][0] ][ unit991_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit991_0[i][2] ][ unit991_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit991_0[i][4] ][ unit991_0[i][5] ] >0);
		X_contra = ( LargeX[991][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit991_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[991][1]=0; L[991][0]=1;}
			satisfiable[991][0]=satisfiable[991][0] & ((x[991] ^ 0) | (x[ unit991_0[i][0] ] ^ unit991_0[i][1]) |(x[ unit991_0[i][2] ] ^ unit991_0[i][3]));
			}
		if(X_contra>0) L[991][0]=2;
		}
	//Check all rules of unit[991][1]
	L[991][1] = LargeX[991][0]>0 ? 1 : 0;
	satisfiable[991][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit991_1[i][0] ][ unit991_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit991_1[i][2] ][ unit991_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit991_1[i][4] ][ unit991_1[i][5] ] >0);
		X_contra = ( LargeX[991][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit991_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[991][0]=0; L[991][1]=1;}
			satisfiable[991][1]=satisfiable[991][1] & ((x[991] ^ 1) | (x[ unit991_1[i][0] ] ^ unit991_1[i][1]) |(x[ unit991_1[i][2] ] ^ unit991_1[i][3]));
			}
		if(X_contra>0) L[991][1]=2;
		}
	//Check all rules of unit[992][0]
	L[992][0] = LargeX[992][1]>0 ? 1 : 0;
	satisfiable[992][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit992_0[i][0] ][ unit992_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit992_0[i][2] ][ unit992_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit992_0[i][4] ][ unit992_0[i][5] ] >0);
		X_contra = ( LargeX[992][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit992_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[992][1]=0; L[992][0]=1;}
			satisfiable[992][0]=satisfiable[992][0] & ((x[992] ^ 0) | (x[ unit992_0[i][0] ] ^ unit992_0[i][1]) |(x[ unit992_0[i][2] ] ^ unit992_0[i][3]));
			}
		if(X_contra>0) L[992][0]=2;
		}
	//Check all rules of unit[992][1]
	L[992][1] = LargeX[992][0]>0 ? 1 : 0;
	satisfiable[992][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit992_1[i][0] ][ unit992_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit992_1[i][2] ][ unit992_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit992_1[i][4] ][ unit992_1[i][5] ] >0);
		X_contra = ( LargeX[992][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit992_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[992][0]=0; L[992][1]=1;}
			satisfiable[992][1]=satisfiable[992][1] & ((x[992] ^ 1) | (x[ unit992_1[i][0] ] ^ unit992_1[i][1]) |(x[ unit992_1[i][2] ] ^ unit992_1[i][3]));
			}
		if(X_contra>0) L[992][1]=2;
		}
	//Check all rules of unit[993][0]
	L[993][0] = LargeX[993][1]>0 ? 1 : 0;
	satisfiable[993][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit993_0[i][0] ][ unit993_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit993_0[i][2] ][ unit993_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit993_0[i][4] ][ unit993_0[i][5] ] >0);
		X_contra = ( LargeX[993][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit993_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[993][1]=0; L[993][0]=1;}
			satisfiable[993][0]=satisfiable[993][0] & ((x[993] ^ 0) | (x[ unit993_0[i][0] ] ^ unit993_0[i][1]) |(x[ unit993_0[i][2] ] ^ unit993_0[i][3]));
			}
		if(X_contra>0) L[993][0]=2;
		}
	//Check all rules of unit[993][1]
	L[993][1] = LargeX[993][0]>0 ? 1 : 0;
	satisfiable[993][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit993_1[i][0] ][ unit993_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit993_1[i][2] ][ unit993_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit993_1[i][4] ][ unit993_1[i][5] ] >0);
		X_contra = ( LargeX[993][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit993_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[993][0]=0; L[993][1]=1;}
			satisfiable[993][1]=satisfiable[993][1] & ((x[993] ^ 1) | (x[ unit993_1[i][0] ] ^ unit993_1[i][1]) |(x[ unit993_1[i][2] ] ^ unit993_1[i][3]));
			}
		if(X_contra>0) L[993][1]=2;
		}
	//Check all rules of unit[994][0]
	L[994][0] = LargeX[994][1]>0 ? 1 : 0;
	satisfiable[994][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit994_0[i][0] ][ unit994_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit994_0[i][2] ][ unit994_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit994_0[i][4] ][ unit994_0[i][5] ] >0);
		X_contra = ( LargeX[994][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit994_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[994][1]=0; L[994][0]=1;}
			satisfiable[994][0]=satisfiable[994][0] & ((x[994] ^ 0) | (x[ unit994_0[i][0] ] ^ unit994_0[i][1]) |(x[ unit994_0[i][2] ] ^ unit994_0[i][3]));
			}
		if(X_contra>0) L[994][0]=2;
		}
	//Check all rules of unit[994][1]
	L[994][1] = LargeX[994][0]>0 ? 1 : 0;
	satisfiable[994][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit994_1[i][0] ][ unit994_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit994_1[i][2] ][ unit994_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit994_1[i][4] ][ unit994_1[i][5] ] >0);
		X_contra = ( LargeX[994][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit994_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[994][0]=0; L[994][1]=1;}
			satisfiable[994][1]=satisfiable[994][1] & ((x[994] ^ 1) | (x[ unit994_1[i][0] ] ^ unit994_1[i][1]) |(x[ unit994_1[i][2] ] ^ unit994_1[i][3]));
			}
		if(X_contra>0) L[994][1]=2;
		}
	//Check all rules of unit[995][0]
	L[995][0] = LargeX[995][1]>0 ? 1 : 0;
	satisfiable[995][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit995_0[i][0] ][ unit995_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit995_0[i][2] ][ unit995_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit995_0[i][4] ][ unit995_0[i][5] ] >0);
		X_contra = ( LargeX[995][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit995_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[995][1]=0; L[995][0]=1;}
			satisfiable[995][0]=satisfiable[995][0] & ((x[995] ^ 0) | (x[ unit995_0[i][0] ] ^ unit995_0[i][1]) |(x[ unit995_0[i][2] ] ^ unit995_0[i][3]));
			}
		if(X_contra>0) L[995][0]=2;
		}
	//Check all rules of unit[995][1]
	L[995][1] = LargeX[995][0]>0 ? 1 : 0;
	satisfiable[995][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit995_1[i][0] ][ unit995_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit995_1[i][2] ][ unit995_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit995_1[i][4] ][ unit995_1[i][5] ] >0);
		X_contra = ( LargeX[995][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit995_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[995][0]=0; L[995][1]=1;}
			satisfiable[995][1]=satisfiable[995][1] & ((x[995] ^ 1) | (x[ unit995_1[i][0] ] ^ unit995_1[i][1]) |(x[ unit995_1[i][2] ] ^ unit995_1[i][3]));
			}
		if(X_contra>0) L[995][1]=2;
		}
	//Check all rules of unit[996][0]
	L[996][0] = LargeX[996][1]>0 ? 1 : 0;
	satisfiable[996][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit996_0[i][0] ][ unit996_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit996_0[i][2] ][ unit996_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit996_0[i][4] ][ unit996_0[i][5] ] >0);
		X_contra = ( LargeX[996][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit996_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[996][1]=0; L[996][0]=1;}
			satisfiable[996][0]=satisfiable[996][0] & ((x[996] ^ 0) | (x[ unit996_0[i][0] ] ^ unit996_0[i][1]) |(x[ unit996_0[i][2] ] ^ unit996_0[i][3]));
			}
		if(X_contra>0) L[996][0]=2;
		}
	//Check all rules of unit[996][1]
	L[996][1] = LargeX[996][0]>0 ? 1 : 0;
	satisfiable[996][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit996_1[i][0] ][ unit996_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit996_1[i][2] ][ unit996_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit996_1[i][4] ][ unit996_1[i][5] ] >0);
		X_contra = ( LargeX[996][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit996_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[996][0]=0; L[996][1]=1;}
			satisfiable[996][1]=satisfiable[996][1] & ((x[996] ^ 1) | (x[ unit996_1[i][0] ] ^ unit996_1[i][1]) |(x[ unit996_1[i][2] ] ^ unit996_1[i][3]));
			}
		if(X_contra>0) L[996][1]=2;
		}
	//Check all rules of unit[997][0]
	L[997][0] = LargeX[997][1]>0 ? 1 : 0;
	satisfiable[997][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit997_0[i][0] ][ unit997_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit997_0[i][2] ][ unit997_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit997_0[i][4] ][ unit997_0[i][5] ] >0);
		X_contra = ( LargeX[997][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit997_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[997][1]=0; L[997][0]=1;}
			satisfiable[997][0]=satisfiable[997][0] & ((x[997] ^ 0) | (x[ unit997_0[i][0] ] ^ unit997_0[i][1]) |(x[ unit997_0[i][2] ] ^ unit997_0[i][3]));
			}
		if(X_contra>0) L[997][0]=2;
		}
	//Check all rules of unit[997][1]
	L[997][1] = LargeX[997][0]>0 ? 1 : 0;
	satisfiable[997][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit997_1[i][0] ][ unit997_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit997_1[i][2] ][ unit997_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit997_1[i][4] ][ unit997_1[i][5] ] >0);
		X_contra = ( LargeX[997][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit997_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[997][0]=0; L[997][1]=1;}
			satisfiable[997][1]=satisfiable[997][1] & ((x[997] ^ 1) | (x[ unit997_1[i][0] ] ^ unit997_1[i][1]) |(x[ unit997_1[i][2] ] ^ unit997_1[i][3]));
			}
		if(X_contra>0) L[997][1]=2;
		}
	//Check all rules of unit[998][0]
	L[998][0] = LargeX[998][1]>0 ? 1 : 0;
	satisfiable[998][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit998_0[i][0] ][ unit998_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit998_0[i][2] ][ unit998_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit998_0[i][4] ][ unit998_0[i][5] ] >0);
		X_contra = ( LargeX[998][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit998_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[998][1]=0; L[998][0]=1;}
			satisfiable[998][0]=satisfiable[998][0] & ((x[998] ^ 0) | (x[ unit998_0[i][0] ] ^ unit998_0[i][1]) |(x[ unit998_0[i][2] ] ^ unit998_0[i][3]));
			}
		if(X_contra>0) L[998][0]=2;
		}
	//Check all rules of unit[998][1]
	L[998][1] = LargeX[998][0]>0 ? 1 : 0;
	satisfiable[998][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit998_1[i][0] ][ unit998_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit998_1[i][2] ][ unit998_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit998_1[i][4] ][ unit998_1[i][5] ] >0);
		X_contra = ( LargeX[998][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit998_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[998][0]=0; L[998][1]=1;}
			satisfiable[998][1]=satisfiable[998][1] & ((x[998] ^ 1) | (x[ unit998_1[i][0] ] ^ unit998_1[i][1]) |(x[ unit998_1[i][2] ] ^ unit998_1[i][3]));
			}
		if(X_contra>0) L[998][1]=2;
		}
	//Check all rules of unit[999][0]
	L[999][0] = LargeX[999][1]>0 ? 1 : 0;
	satisfiable[999][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit999_0[i][0] ][ unit999_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit999_0[i][2] ][ unit999_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit999_0[i][4] ][ unit999_0[i][5] ] >0);
		X_contra = ( LargeX[999][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit999_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[999][1]=0; L[999][0]=1;}
			satisfiable[999][0]=satisfiable[999][0] & ((x[999] ^ 0) | (x[ unit999_0[i][0] ] ^ unit999_0[i][1]) |(x[ unit999_0[i][2] ] ^ unit999_0[i][3]));
			}
		if(X_contra>0) L[999][0]=2;
		}
	//Check all rules of unit[999][1]
	L[999][1] = LargeX[999][0]>0 ? 1 : 0;
	satisfiable[999][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit999_1[i][0] ][ unit999_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit999_1[i][2] ][ unit999_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit999_1[i][4] ][ unit999_1[i][5] ] >0);
		X_contra = ( LargeX[999][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit999_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[999][0]=0; L[999][1]=1;}
			satisfiable[999][1]=satisfiable[999][1] & ((x[999] ^ 1) | (x[ unit999_1[i][0] ] ^ unit999_1[i][1]) |(x[ unit999_1[i][2] ] ^ unit999_1[i][3]));
			}
		if(X_contra>0) L[999][1]=2;
		}
	//Check all rules of unit[1000][0]
	L[1000][0] = LargeX[1000][1]>0 ? 1 : 0;
	satisfiable[1000][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1000_0[i][0] ][ unit1000_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1000_0[i][2] ][ unit1000_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1000_0[i][4] ][ unit1000_0[i][5] ] >0);
		X_contra = ( LargeX[1000][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1000_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1000][1]=0; L[1000][0]=1;}
			satisfiable[1000][0]=satisfiable[1000][0] & ((x[1000] ^ 0) | (x[ unit1000_0[i][0] ] ^ unit1000_0[i][1]) |(x[ unit1000_0[i][2] ] ^ unit1000_0[i][3]));
			}
		if(X_contra>0) L[1000][0]=2;
		}
	//Check all rules of unit[1000][1]
	L[1000][1] = LargeX[1000][0]>0 ? 1 : 0;
	satisfiable[1000][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1000_1[i][0] ][ unit1000_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1000_1[i][2] ][ unit1000_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1000_1[i][4] ][ unit1000_1[i][5] ] >0);
		X_contra = ( LargeX[1000][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1000_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1000][0]=0; L[1000][1]=1;}
			satisfiable[1000][1]=satisfiable[1000][1] & ((x[1000] ^ 1) | (x[ unit1000_1[i][0] ] ^ unit1000_1[i][1]) |(x[ unit1000_1[i][2] ] ^ unit1000_1[i][3]));
			}
		if(X_contra>0) L[1000][1]=2;
		}
	//Check all rules of unit[1001][0]
	L[1001][0] = LargeX[1001][1]>0 ? 1 : 0;
	satisfiable[1001][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1001_0[i][0] ][ unit1001_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1001_0[i][2] ][ unit1001_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1001_0[i][4] ][ unit1001_0[i][5] ] >0);
		X_contra = ( LargeX[1001][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1001_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1001][1]=0; L[1001][0]=1;}
			satisfiable[1001][0]=satisfiable[1001][0] & ((x[1001] ^ 0) | (x[ unit1001_0[i][0] ] ^ unit1001_0[i][1]) |(x[ unit1001_0[i][2] ] ^ unit1001_0[i][3]));
			}
		if(X_contra>0) L[1001][0]=2;
		}
	//Check all rules of unit[1001][1]
	L[1001][1] = LargeX[1001][0]>0 ? 1 : 0;
	satisfiable[1001][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1001_1[i][0] ][ unit1001_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1001_1[i][2] ][ unit1001_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1001_1[i][4] ][ unit1001_1[i][5] ] >0);
		X_contra = ( LargeX[1001][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1001_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1001][0]=0; L[1001][1]=1;}
			satisfiable[1001][1]=satisfiable[1001][1] & ((x[1001] ^ 1) | (x[ unit1001_1[i][0] ] ^ unit1001_1[i][1]) |(x[ unit1001_1[i][2] ] ^ unit1001_1[i][3]));
			}
		if(X_contra>0) L[1001][1]=2;
		}
	//Check all rules of unit[1002][0]
	L[1002][0] = LargeX[1002][1]>0 ? 1 : 0;
	satisfiable[1002][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1002_0[i][0] ][ unit1002_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1002_0[i][2] ][ unit1002_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1002_0[i][4] ][ unit1002_0[i][5] ] >0);
		X_contra = ( LargeX[1002][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1002_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1002][1]=0; L[1002][0]=1;}
			satisfiable[1002][0]=satisfiable[1002][0] & ((x[1002] ^ 0) | (x[ unit1002_0[i][0] ] ^ unit1002_0[i][1]) |(x[ unit1002_0[i][2] ] ^ unit1002_0[i][3]));
			}
		if(X_contra>0) L[1002][0]=2;
		}
	//Check all rules of unit[1002][1]
	L[1002][1] = LargeX[1002][0]>0 ? 1 : 0;
	satisfiable[1002][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1002_1[i][0] ][ unit1002_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1002_1[i][2] ][ unit1002_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1002_1[i][4] ][ unit1002_1[i][5] ] >0);
		X_contra = ( LargeX[1002][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1002_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1002][0]=0; L[1002][1]=1;}
			satisfiable[1002][1]=satisfiable[1002][1] & ((x[1002] ^ 1) | (x[ unit1002_1[i][0] ] ^ unit1002_1[i][1]) |(x[ unit1002_1[i][2] ] ^ unit1002_1[i][3]));
			}
		if(X_contra>0) L[1002][1]=2;
		}
	//Check all rules of unit[1003][0]
	L[1003][0] = LargeX[1003][1]>0 ? 1 : 0;
	satisfiable[1003][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1003_0[i][0] ][ unit1003_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1003_0[i][2] ][ unit1003_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1003_0[i][4] ][ unit1003_0[i][5] ] >0);
		X_contra = ( LargeX[1003][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1003_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1003][1]=0; L[1003][0]=1;}
			satisfiable[1003][0]=satisfiable[1003][0] & ((x[1003] ^ 0) | (x[ unit1003_0[i][0] ] ^ unit1003_0[i][1]) |(x[ unit1003_0[i][2] ] ^ unit1003_0[i][3]));
			}
		if(X_contra>0) L[1003][0]=2;
		}
	//Check all rules of unit[1003][1]
	L[1003][1] = LargeX[1003][0]>0 ? 1 : 0;
	satisfiable[1003][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1003_1[i][0] ][ unit1003_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1003_1[i][2] ][ unit1003_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1003_1[i][4] ][ unit1003_1[i][5] ] >0);
		X_contra = ( LargeX[1003][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1003_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1003][0]=0; L[1003][1]=1;}
			satisfiable[1003][1]=satisfiable[1003][1] & ((x[1003] ^ 1) | (x[ unit1003_1[i][0] ] ^ unit1003_1[i][1]) |(x[ unit1003_1[i][2] ] ^ unit1003_1[i][3]));
			}
		if(X_contra>0) L[1003][1]=2;
		}
	//Check all rules of unit[1004][0]
	L[1004][0] = LargeX[1004][1]>0 ? 1 : 0;
	satisfiable[1004][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1004_0[i][0] ][ unit1004_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1004_0[i][2] ][ unit1004_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1004_0[i][4] ][ unit1004_0[i][5] ] >0);
		X_contra = ( LargeX[1004][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1004_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1004][1]=0; L[1004][0]=1;}
			satisfiable[1004][0]=satisfiable[1004][0] & ((x[1004] ^ 0) | (x[ unit1004_0[i][0] ] ^ unit1004_0[i][1]) |(x[ unit1004_0[i][2] ] ^ unit1004_0[i][3]));
			}
		if(X_contra>0) L[1004][0]=2;
		}
	//Check all rules of unit[1004][1]
	L[1004][1] = LargeX[1004][0]>0 ? 1 : 0;
	satisfiable[1004][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1004_1[i][0] ][ unit1004_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1004_1[i][2] ][ unit1004_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1004_1[i][4] ][ unit1004_1[i][5] ] >0);
		X_contra = ( LargeX[1004][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1004_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1004][0]=0; L[1004][1]=1;}
			satisfiable[1004][1]=satisfiable[1004][1] & ((x[1004] ^ 1) | (x[ unit1004_1[i][0] ] ^ unit1004_1[i][1]) |(x[ unit1004_1[i][2] ] ^ unit1004_1[i][3]));
			}
		if(X_contra>0) L[1004][1]=2;
		}
	//Check all rules of unit[1005][0]
	L[1005][0] = LargeX[1005][1]>0 ? 1 : 0;
	satisfiable[1005][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1005_0[i][0] ][ unit1005_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1005_0[i][2] ][ unit1005_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1005_0[i][4] ][ unit1005_0[i][5] ] >0);
		X_contra = ( LargeX[1005][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1005_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1005][1]=0; L[1005][0]=1;}
			satisfiable[1005][0]=satisfiable[1005][0] & ((x[1005] ^ 0) | (x[ unit1005_0[i][0] ] ^ unit1005_0[i][1]) |(x[ unit1005_0[i][2] ] ^ unit1005_0[i][3]));
			}
		if(X_contra>0) L[1005][0]=2;
		}
	//Check all rules of unit[1005][1]
	L[1005][1] = LargeX[1005][0]>0 ? 1 : 0;
	satisfiable[1005][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1005_1[i][0] ][ unit1005_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1005_1[i][2] ][ unit1005_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1005_1[i][4] ][ unit1005_1[i][5] ] >0);
		X_contra = ( LargeX[1005][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1005_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1005][0]=0; L[1005][1]=1;}
			satisfiable[1005][1]=satisfiable[1005][1] & ((x[1005] ^ 1) | (x[ unit1005_1[i][0] ] ^ unit1005_1[i][1]) |(x[ unit1005_1[i][2] ] ^ unit1005_1[i][3]));
			}
		if(X_contra>0) L[1005][1]=2;
		}
	//Check all rules of unit[1006][0]
	L[1006][0] = LargeX[1006][1]>0 ? 1 : 0;
	satisfiable[1006][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1006_0[i][0] ][ unit1006_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1006_0[i][2] ][ unit1006_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1006_0[i][4] ][ unit1006_0[i][5] ] >0);
		X_contra = ( LargeX[1006][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1006_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1006][1]=0; L[1006][0]=1;}
			satisfiable[1006][0]=satisfiable[1006][0] & ((x[1006] ^ 0) | (x[ unit1006_0[i][0] ] ^ unit1006_0[i][1]) |(x[ unit1006_0[i][2] ] ^ unit1006_0[i][3]));
			}
		if(X_contra>0) L[1006][0]=2;
		}
	//Check all rules of unit[1006][1]
	L[1006][1] = LargeX[1006][0]>0 ? 1 : 0;
	satisfiable[1006][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1006_1[i][0] ][ unit1006_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1006_1[i][2] ][ unit1006_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1006_1[i][4] ][ unit1006_1[i][5] ] >0);
		X_contra = ( LargeX[1006][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1006_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1006][0]=0; L[1006][1]=1;}
			satisfiable[1006][1]=satisfiable[1006][1] & ((x[1006] ^ 1) | (x[ unit1006_1[i][0] ] ^ unit1006_1[i][1]) |(x[ unit1006_1[i][2] ] ^ unit1006_1[i][3]));
			}
		if(X_contra>0) L[1006][1]=2;
		}
	//Check all rules of unit[1007][0]
	L[1007][0] = LargeX[1007][1]>0 ? 1 : 0;
	satisfiable[1007][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1007_0[i][0] ][ unit1007_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1007_0[i][2] ][ unit1007_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1007_0[i][4] ][ unit1007_0[i][5] ] >0);
		X_contra = ( LargeX[1007][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1007_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1007][1]=0; L[1007][0]=1;}
			satisfiable[1007][0]=satisfiable[1007][0] & ((x[1007] ^ 0) | (x[ unit1007_0[i][0] ] ^ unit1007_0[i][1]) |(x[ unit1007_0[i][2] ] ^ unit1007_0[i][3]));
			}
		if(X_contra>0) L[1007][0]=2;
		}
	//Check all rules of unit[1007][1]
	L[1007][1] = LargeX[1007][0]>0 ? 1 : 0;
	satisfiable[1007][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1007_1[i][0] ][ unit1007_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1007_1[i][2] ][ unit1007_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1007_1[i][4] ][ unit1007_1[i][5] ] >0);
		X_contra = ( LargeX[1007][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1007_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1007][0]=0; L[1007][1]=1;}
			satisfiable[1007][1]=satisfiable[1007][1] & ((x[1007] ^ 1) | (x[ unit1007_1[i][0] ] ^ unit1007_1[i][1]) |(x[ unit1007_1[i][2] ] ^ unit1007_1[i][3]));
			}
		if(X_contra>0) L[1007][1]=2;
		}
	//Check all rules of unit[1008][0]
	L[1008][0] = LargeX[1008][1]>0 ? 1 : 0;
	satisfiable[1008][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1008_0[i][0] ][ unit1008_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1008_0[i][2] ][ unit1008_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1008_0[i][4] ][ unit1008_0[i][5] ] >0);
		X_contra = ( LargeX[1008][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1008_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1008][1]=0; L[1008][0]=1;}
			satisfiable[1008][0]=satisfiable[1008][0] & ((x[1008] ^ 0) | (x[ unit1008_0[i][0] ] ^ unit1008_0[i][1]) |(x[ unit1008_0[i][2] ] ^ unit1008_0[i][3]));
			}
		if(X_contra>0) L[1008][0]=2;
		}
	//Check all rules of unit[1008][1]
	L[1008][1] = LargeX[1008][0]>0 ? 1 : 0;
	satisfiable[1008][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1008_1[i][0] ][ unit1008_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1008_1[i][2] ][ unit1008_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1008_1[i][4] ][ unit1008_1[i][5] ] >0);
		X_contra = ( LargeX[1008][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1008_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1008][0]=0; L[1008][1]=1;}
			satisfiable[1008][1]=satisfiable[1008][1] & ((x[1008] ^ 1) | (x[ unit1008_1[i][0] ] ^ unit1008_1[i][1]) |(x[ unit1008_1[i][2] ] ^ unit1008_1[i][3]));
			}
		if(X_contra>0) L[1008][1]=2;
		}
	//Check all rules of unit[1009][0]
	L[1009][0] = LargeX[1009][1]>0 ? 1 : 0;
	satisfiable[1009][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1009_0[i][0] ][ unit1009_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1009_0[i][2] ][ unit1009_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1009_0[i][4] ][ unit1009_0[i][5] ] >0);
		X_contra = ( LargeX[1009][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1009_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1009][1]=0; L[1009][0]=1;}
			satisfiable[1009][0]=satisfiable[1009][0] & ((x[1009] ^ 0) | (x[ unit1009_0[i][0] ] ^ unit1009_0[i][1]) |(x[ unit1009_0[i][2] ] ^ unit1009_0[i][3]));
			}
		if(X_contra>0) L[1009][0]=2;
		}
	//Check all rules of unit[1009][1]
	L[1009][1] = LargeX[1009][0]>0 ? 1 : 0;
	satisfiable[1009][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1009_1[i][0] ][ unit1009_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1009_1[i][2] ][ unit1009_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1009_1[i][4] ][ unit1009_1[i][5] ] >0);
		X_contra = ( LargeX[1009][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1009_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1009][0]=0; L[1009][1]=1;}
			satisfiable[1009][1]=satisfiable[1009][1] & ((x[1009] ^ 1) | (x[ unit1009_1[i][0] ] ^ unit1009_1[i][1]) |(x[ unit1009_1[i][2] ] ^ unit1009_1[i][3]));
			}
		if(X_contra>0) L[1009][1]=2;
		}
	//Check all rules of unit[1010][0]
	L[1010][0] = LargeX[1010][1]>0 ? 1 : 0;
	satisfiable[1010][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1010_0[i][0] ][ unit1010_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1010_0[i][2] ][ unit1010_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1010_0[i][4] ][ unit1010_0[i][5] ] >0);
		X_contra = ( LargeX[1010][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1010_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1010][1]=0; L[1010][0]=1;}
			satisfiable[1010][0]=satisfiable[1010][0] & ((x[1010] ^ 0) | (x[ unit1010_0[i][0] ] ^ unit1010_0[i][1]) |(x[ unit1010_0[i][2] ] ^ unit1010_0[i][3]));
			}
		if(X_contra>0) L[1010][0]=2;
		}
	//Check all rules of unit[1010][1]
	L[1010][1] = LargeX[1010][0]>0 ? 1 : 0;
	satisfiable[1010][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1010_1[i][0] ][ unit1010_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1010_1[i][2] ][ unit1010_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1010_1[i][4] ][ unit1010_1[i][5] ] >0);
		X_contra = ( LargeX[1010][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1010_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1010][0]=0; L[1010][1]=1;}
			satisfiable[1010][1]=satisfiable[1010][1] & ((x[1010] ^ 1) | (x[ unit1010_1[i][0] ] ^ unit1010_1[i][1]) |(x[ unit1010_1[i][2] ] ^ unit1010_1[i][3]));
			}
		if(X_contra>0) L[1010][1]=2;
		}
	//Check all rules of unit[1011][0]
	L[1011][0] = LargeX[1011][1]>0 ? 1 : 0;
	satisfiable[1011][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1011_0[i][0] ][ unit1011_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1011_0[i][2] ][ unit1011_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1011_0[i][4] ][ unit1011_0[i][5] ] >0);
		X_contra = ( LargeX[1011][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1011_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1011][1]=0; L[1011][0]=1;}
			satisfiable[1011][0]=satisfiable[1011][0] & ((x[1011] ^ 0) | (x[ unit1011_0[i][0] ] ^ unit1011_0[i][1]) |(x[ unit1011_0[i][2] ] ^ unit1011_0[i][3]));
			}
		if(X_contra>0) L[1011][0]=2;
		}
	//Check all rules of unit[1011][1]
	L[1011][1] = LargeX[1011][0]>0 ? 1 : 0;
	satisfiable[1011][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1011_1[i][0] ][ unit1011_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1011_1[i][2] ][ unit1011_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1011_1[i][4] ][ unit1011_1[i][5] ] >0);
		X_contra = ( LargeX[1011][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1011_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1011][0]=0; L[1011][1]=1;}
			satisfiable[1011][1]=satisfiable[1011][1] & ((x[1011] ^ 1) | (x[ unit1011_1[i][0] ] ^ unit1011_1[i][1]) |(x[ unit1011_1[i][2] ] ^ unit1011_1[i][3]));
			}
		if(X_contra>0) L[1011][1]=2;
		}
	//Check all rules of unit[1012][0]
	L[1012][0] = LargeX[1012][1]>0 ? 1 : 0;
	satisfiable[1012][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1012_0[i][0] ][ unit1012_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1012_0[i][2] ][ unit1012_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1012_0[i][4] ][ unit1012_0[i][5] ] >0);
		X_contra = ( LargeX[1012][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1012_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1012][1]=0; L[1012][0]=1;}
			satisfiable[1012][0]=satisfiable[1012][0] & ((x[1012] ^ 0) | (x[ unit1012_0[i][0] ] ^ unit1012_0[i][1]) |(x[ unit1012_0[i][2] ] ^ unit1012_0[i][3]));
			}
		if(X_contra>0) L[1012][0]=2;
		}
	//Check all rules of unit[1012][1]
	L[1012][1] = LargeX[1012][0]>0 ? 1 : 0;
	satisfiable[1012][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1012_1[i][0] ][ unit1012_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1012_1[i][2] ][ unit1012_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1012_1[i][4] ][ unit1012_1[i][5] ] >0);
		X_contra = ( LargeX[1012][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1012_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1012][0]=0; L[1012][1]=1;}
			satisfiable[1012][1]=satisfiable[1012][1] & ((x[1012] ^ 1) | (x[ unit1012_1[i][0] ] ^ unit1012_1[i][1]) |(x[ unit1012_1[i][2] ] ^ unit1012_1[i][3]));
			}
		if(X_contra>0) L[1012][1]=2;
		}
	//Check all rules of unit[1013][0]
	L[1013][0] = LargeX[1013][1]>0 ? 1 : 0;
	satisfiable[1013][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1013_0[i][0] ][ unit1013_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1013_0[i][2] ][ unit1013_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1013_0[i][4] ][ unit1013_0[i][5] ] >0);
		X_contra = ( LargeX[1013][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1013_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1013][1]=0; L[1013][0]=1;}
			satisfiable[1013][0]=satisfiable[1013][0] & ((x[1013] ^ 0) | (x[ unit1013_0[i][0] ] ^ unit1013_0[i][1]) |(x[ unit1013_0[i][2] ] ^ unit1013_0[i][3]));
			}
		if(X_contra>0) L[1013][0]=2;
		}
	//Check all rules of unit[1013][1]
	L[1013][1] = LargeX[1013][0]>0 ? 1 : 0;
	satisfiable[1013][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1013_1[i][0] ][ unit1013_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1013_1[i][2] ][ unit1013_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1013_1[i][4] ][ unit1013_1[i][5] ] >0);
		X_contra = ( LargeX[1013][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1013_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1013][0]=0; L[1013][1]=1;}
			satisfiable[1013][1]=satisfiable[1013][1] & ((x[1013] ^ 1) | (x[ unit1013_1[i][0] ] ^ unit1013_1[i][1]) |(x[ unit1013_1[i][2] ] ^ unit1013_1[i][3]));
			}
		if(X_contra>0) L[1013][1]=2;
		}
	//Check all rules of unit[1014][0]
	L[1014][0] = LargeX[1014][1]>0 ? 1 : 0;
	satisfiable[1014][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1014_0[i][0] ][ unit1014_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1014_0[i][2] ][ unit1014_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1014_0[i][4] ][ unit1014_0[i][5] ] >0);
		X_contra = ( LargeX[1014][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1014_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1014][1]=0; L[1014][0]=1;}
			satisfiable[1014][0]=satisfiable[1014][0] & ((x[1014] ^ 0) | (x[ unit1014_0[i][0] ] ^ unit1014_0[i][1]) |(x[ unit1014_0[i][2] ] ^ unit1014_0[i][3]));
			}
		if(X_contra>0) L[1014][0]=2;
		}
	//Check all rules of unit[1014][1]
	L[1014][1] = LargeX[1014][0]>0 ? 1 : 0;
	satisfiable[1014][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1014_1[i][0] ][ unit1014_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1014_1[i][2] ][ unit1014_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1014_1[i][4] ][ unit1014_1[i][5] ] >0);
		X_contra = ( LargeX[1014][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1014_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1014][0]=0; L[1014][1]=1;}
			satisfiable[1014][1]=satisfiable[1014][1] & ((x[1014] ^ 1) | (x[ unit1014_1[i][0] ] ^ unit1014_1[i][1]) |(x[ unit1014_1[i][2] ] ^ unit1014_1[i][3]));
			}
		if(X_contra>0) L[1014][1]=2;
		}
	//Check all rules of unit[1015][0]
	L[1015][0] = LargeX[1015][1]>0 ? 1 : 0;
	satisfiable[1015][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1015_0[i][0] ][ unit1015_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1015_0[i][2] ][ unit1015_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1015_0[i][4] ][ unit1015_0[i][5] ] >0);
		X_contra = ( LargeX[1015][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1015_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1015][1]=0; L[1015][0]=1;}
			satisfiable[1015][0]=satisfiable[1015][0] & ((x[1015] ^ 0) | (x[ unit1015_0[i][0] ] ^ unit1015_0[i][1]) |(x[ unit1015_0[i][2] ] ^ unit1015_0[i][3]));
			}
		if(X_contra>0) L[1015][0]=2;
		}
	//Check all rules of unit[1015][1]
	L[1015][1] = LargeX[1015][0]>0 ? 1 : 0;
	satisfiable[1015][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1015_1[i][0] ][ unit1015_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1015_1[i][2] ][ unit1015_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1015_1[i][4] ][ unit1015_1[i][5] ] >0);
		X_contra = ( LargeX[1015][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1015_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1015][0]=0; L[1015][1]=1;}
			satisfiable[1015][1]=satisfiable[1015][1] & ((x[1015] ^ 1) | (x[ unit1015_1[i][0] ] ^ unit1015_1[i][1]) |(x[ unit1015_1[i][2] ] ^ unit1015_1[i][3]));
			}
		if(X_contra>0) L[1015][1]=2;
		}
	//Check all rules of unit[1016][0]
	L[1016][0] = LargeX[1016][1]>0 ? 1 : 0;
	satisfiable[1016][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1016_0[i][0] ][ unit1016_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1016_0[i][2] ][ unit1016_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1016_0[i][4] ][ unit1016_0[i][5] ] >0);
		X_contra = ( LargeX[1016][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1016_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1016][1]=0; L[1016][0]=1;}
			satisfiable[1016][0]=satisfiable[1016][0] & ((x[1016] ^ 0) | (x[ unit1016_0[i][0] ] ^ unit1016_0[i][1]) |(x[ unit1016_0[i][2] ] ^ unit1016_0[i][3]));
			}
		if(X_contra>0) L[1016][0]=2;
		}
	//Check all rules of unit[1016][1]
	L[1016][1] = LargeX[1016][0]>0 ? 1 : 0;
	satisfiable[1016][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1016_1[i][0] ][ unit1016_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1016_1[i][2] ][ unit1016_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1016_1[i][4] ][ unit1016_1[i][5] ] >0);
		X_contra = ( LargeX[1016][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1016_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1016][0]=0; L[1016][1]=1;}
			satisfiable[1016][1]=satisfiable[1016][1] & ((x[1016] ^ 1) | (x[ unit1016_1[i][0] ] ^ unit1016_1[i][1]) |(x[ unit1016_1[i][2] ] ^ unit1016_1[i][3]));
			}
		if(X_contra>0) L[1016][1]=2;
		}
	//Check all rules of unit[1017][0]
	L[1017][0] = LargeX[1017][1]>0 ? 1 : 0;
	satisfiable[1017][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1017_0[i][0] ][ unit1017_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1017_0[i][2] ][ unit1017_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1017_0[i][4] ][ unit1017_0[i][5] ] >0);
		X_contra = ( LargeX[1017][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1017_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1017][1]=0; L[1017][0]=1;}
			satisfiable[1017][0]=satisfiable[1017][0] & ((x[1017] ^ 0) | (x[ unit1017_0[i][0] ] ^ unit1017_0[i][1]) |(x[ unit1017_0[i][2] ] ^ unit1017_0[i][3]));
			}
		if(X_contra>0) L[1017][0]=2;
		}
	//Check all rules of unit[1017][1]
	L[1017][1] = LargeX[1017][0]>0 ? 1 : 0;
	satisfiable[1017][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1017_1[i][0] ][ unit1017_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1017_1[i][2] ][ unit1017_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1017_1[i][4] ][ unit1017_1[i][5] ] >0);
		X_contra = ( LargeX[1017][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1017_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1017][0]=0; L[1017][1]=1;}
			satisfiable[1017][1]=satisfiable[1017][1] & ((x[1017] ^ 1) | (x[ unit1017_1[i][0] ] ^ unit1017_1[i][1]) |(x[ unit1017_1[i][2] ] ^ unit1017_1[i][3]));
			}
		if(X_contra>0) L[1017][1]=2;
		}
	//Check all rules of unit[1018][0]
	L[1018][0] = LargeX[1018][1]>0 ? 1 : 0;
	satisfiable[1018][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1018_0[i][0] ][ unit1018_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1018_0[i][2] ][ unit1018_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1018_0[i][4] ][ unit1018_0[i][5] ] >0);
		X_contra = ( LargeX[1018][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1018_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1018][1]=0; L[1018][0]=1;}
			satisfiable[1018][0]=satisfiable[1018][0] & ((x[1018] ^ 0) | (x[ unit1018_0[i][0] ] ^ unit1018_0[i][1]) |(x[ unit1018_0[i][2] ] ^ unit1018_0[i][3]));
			}
		if(X_contra>0) L[1018][0]=2;
		}
	//Check all rules of unit[1018][1]
	L[1018][1] = LargeX[1018][0]>0 ? 1 : 0;
	satisfiable[1018][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1018_1[i][0] ][ unit1018_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1018_1[i][2] ][ unit1018_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1018_1[i][4] ][ unit1018_1[i][5] ] >0);
		X_contra = ( LargeX[1018][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1018_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1018][0]=0; L[1018][1]=1;}
			satisfiable[1018][1]=satisfiable[1018][1] & ((x[1018] ^ 1) | (x[ unit1018_1[i][0] ] ^ unit1018_1[i][1]) |(x[ unit1018_1[i][2] ] ^ unit1018_1[i][3]));
			}
		if(X_contra>0) L[1018][1]=2;
		}
	//Check all rules of unit[1019][0]
	L[1019][0] = LargeX[1019][1]>0 ? 1 : 0;
	satisfiable[1019][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1019_0[i][0] ][ unit1019_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1019_0[i][2] ][ unit1019_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1019_0[i][4] ][ unit1019_0[i][5] ] >0);
		X_contra = ( LargeX[1019][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1019_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1019][1]=0; L[1019][0]=1;}
			satisfiable[1019][0]=satisfiable[1019][0] & ((x[1019] ^ 0) | (x[ unit1019_0[i][0] ] ^ unit1019_0[i][1]) |(x[ unit1019_0[i][2] ] ^ unit1019_0[i][3]));
			}
		if(X_contra>0) L[1019][0]=2;
		}
	//Check all rules of unit[1019][1]
	L[1019][1] = LargeX[1019][0]>0 ? 1 : 0;
	satisfiable[1019][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1019_1[i][0] ][ unit1019_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1019_1[i][2] ][ unit1019_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1019_1[i][4] ][ unit1019_1[i][5] ] >0);
		X_contra = ( LargeX[1019][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1019_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1019][0]=0; L[1019][1]=1;}
			satisfiable[1019][1]=satisfiable[1019][1] & ((x[1019] ^ 1) | (x[ unit1019_1[i][0] ] ^ unit1019_1[i][1]) |(x[ unit1019_1[i][2] ] ^ unit1019_1[i][3]));
			}
		if(X_contra>0) L[1019][1]=2;
		}
	//Check all rules of unit[1020][0]
	L[1020][0] = LargeX[1020][1]>0 ? 1 : 0;
	satisfiable[1020][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1020_0[i][0] ][ unit1020_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1020_0[i][2] ][ unit1020_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1020_0[i][4] ][ unit1020_0[i][5] ] >0);
		X_contra = ( LargeX[1020][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1020_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1020][1]=0; L[1020][0]=1;}
			satisfiable[1020][0]=satisfiable[1020][0] & ((x[1020] ^ 0) | (x[ unit1020_0[i][0] ] ^ unit1020_0[i][1]) |(x[ unit1020_0[i][2] ] ^ unit1020_0[i][3]));
			}
		if(X_contra>0) L[1020][0]=2;
		}
	//Check all rules of unit[1020][1]
	L[1020][1] = LargeX[1020][0]>0 ? 1 : 0;
	satisfiable[1020][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1020_1[i][0] ][ unit1020_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1020_1[i][2] ][ unit1020_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1020_1[i][4] ][ unit1020_1[i][5] ] >0);
		X_contra = ( LargeX[1020][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1020_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1020][0]=0; L[1020][1]=1;}
			satisfiable[1020][1]=satisfiable[1020][1] & ((x[1020] ^ 1) | (x[ unit1020_1[i][0] ] ^ unit1020_1[i][1]) |(x[ unit1020_1[i][2] ] ^ unit1020_1[i][3]));
			}
		if(X_contra>0) L[1020][1]=2;
		}
	//Check all rules of unit[1021][0]
	L[1021][0] = LargeX[1021][1]>0 ? 1 : 0;
	satisfiable[1021][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1021_0[i][0] ][ unit1021_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1021_0[i][2] ][ unit1021_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1021_0[i][4] ][ unit1021_0[i][5] ] >0);
		X_contra = ( LargeX[1021][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1021_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1021][1]=0; L[1021][0]=1;}
			satisfiable[1021][0]=satisfiable[1021][0] & ((x[1021] ^ 0) | (x[ unit1021_0[i][0] ] ^ unit1021_0[i][1]) |(x[ unit1021_0[i][2] ] ^ unit1021_0[i][3]));
			}
		if(X_contra>0) L[1021][0]=2;
		}
	//Check all rules of unit[1021][1]
	L[1021][1] = LargeX[1021][0]>0 ? 1 : 0;
	satisfiable[1021][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1021_1[i][0] ][ unit1021_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1021_1[i][2] ][ unit1021_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1021_1[i][4] ][ unit1021_1[i][5] ] >0);
		X_contra = ( LargeX[1021][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1021_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1021][0]=0; L[1021][1]=1;}
			satisfiable[1021][1]=satisfiable[1021][1] & ((x[1021] ^ 1) | (x[ unit1021_1[i][0] ] ^ unit1021_1[i][1]) |(x[ unit1021_1[i][2] ] ^ unit1021_1[i][3]));
			}
		if(X_contra>0) L[1021][1]=2;
		}
	//Check all rules of unit[1022][0]
	L[1022][0] = LargeX[1022][1]>0 ? 1 : 0;
	satisfiable[1022][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1022_0[i][0] ][ unit1022_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1022_0[i][2] ][ unit1022_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1022_0[i][4] ][ unit1022_0[i][5] ] >0);
		X_contra = ( LargeX[1022][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1022_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1022][1]=0; L[1022][0]=1;}
			satisfiable[1022][0]=satisfiable[1022][0] & ((x[1022] ^ 0) | (x[ unit1022_0[i][0] ] ^ unit1022_0[i][1]) |(x[ unit1022_0[i][2] ] ^ unit1022_0[i][3]));
			}
		if(X_contra>0) L[1022][0]=2;
		}
	//Check all rules of unit[1022][1]
	L[1022][1] = LargeX[1022][0]>0 ? 1 : 0;
	satisfiable[1022][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1022_1[i][0] ][ unit1022_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1022_1[i][2] ][ unit1022_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1022_1[i][4] ][ unit1022_1[i][5] ] >0);
		X_contra = ( LargeX[1022][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1022_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1022][0]=0; L[1022][1]=1;}
			satisfiable[1022][1]=satisfiable[1022][1] & ((x[1022] ^ 1) | (x[ unit1022_1[i][0] ] ^ unit1022_1[i][1]) |(x[ unit1022_1[i][2] ] ^ unit1022_1[i][3]));
			}
		if(X_contra>0) L[1022][1]=2;
		}
	//Check all rules of unit[1023][0]
	L[1023][0] = LargeX[1023][1]>0 ? 1 : 0;
	satisfiable[1023][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1023_0[i][0] ][ unit1023_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1023_0[i][2] ][ unit1023_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1023_0[i][4] ][ unit1023_0[i][5] ] >0);
		X_contra = ( LargeX[1023][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1023_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1023][1]=0; L[1023][0]=1;}
			satisfiable[1023][0]=satisfiable[1023][0] & ((x[1023] ^ 0) | (x[ unit1023_0[i][0] ] ^ unit1023_0[i][1]) |(x[ unit1023_0[i][2] ] ^ unit1023_0[i][3]));
			}
		if(X_contra>0) L[1023][0]=2;
		}
	//Check all rules of unit[1023][1]
	L[1023][1] = LargeX[1023][0]>0 ? 1 : 0;
	satisfiable[1023][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1023_1[i][0] ][ unit1023_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1023_1[i][2] ][ unit1023_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1023_1[i][4] ][ unit1023_1[i][5] ] >0);
		X_contra = ( LargeX[1023][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1023_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1023][0]=0; L[1023][1]=1;}
			satisfiable[1023][1]=satisfiable[1023][1] & ((x[1023] ^ 1) | (x[ unit1023_1[i][0] ] ^ unit1023_1[i][1]) |(x[ unit1023_1[i][2] ] ^ unit1023_1[i][3]));
			}
		if(X_contra>0) L[1023][1]=2;
		}
	//Check all rules of unit[1024][0]
	L[1024][0] = LargeX[1024][1]>0 ? 1 : 0;
	satisfiable[1024][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1024_0[i][0] ][ unit1024_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1024_0[i][2] ][ unit1024_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1024_0[i][4] ][ unit1024_0[i][5] ] >0);
		X_contra = ( LargeX[1024][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1024_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1024][1]=0; L[1024][0]=1;}
			satisfiable[1024][0]=satisfiable[1024][0] & ((x[1024] ^ 0) | (x[ unit1024_0[i][0] ] ^ unit1024_0[i][1]) |(x[ unit1024_0[i][2] ] ^ unit1024_0[i][3]));
			}
		if(X_contra>0) L[1024][0]=2;
		}
	//Check all rules of unit[1024][1]
	L[1024][1] = LargeX[1024][0]>0 ? 1 : 0;
	satisfiable[1024][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1024_1[i][0] ][ unit1024_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1024_1[i][2] ][ unit1024_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1024_1[i][4] ][ unit1024_1[i][5] ] >0);
		X_contra = ( LargeX[1024][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1024_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1024][0]=0; L[1024][1]=1;}
			satisfiable[1024][1]=satisfiable[1024][1] & ((x[1024] ^ 1) | (x[ unit1024_1[i][0] ] ^ unit1024_1[i][1]) |(x[ unit1024_1[i][2] ] ^ unit1024_1[i][3]));
			}
		if(X_contra>0) L[1024][1]=2;
		}
	//Check all rules of unit[1025][0]
	L[1025][0] = LargeX[1025][1]>0 ? 1 : 0;
	satisfiable[1025][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1025_0[i][0] ][ unit1025_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1025_0[i][2] ][ unit1025_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1025_0[i][4] ][ unit1025_0[i][5] ] >0);
		X_contra = ( LargeX[1025][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1025_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1025][1]=0; L[1025][0]=1;}
			satisfiable[1025][0]=satisfiable[1025][0] & ((x[1025] ^ 0) | (x[ unit1025_0[i][0] ] ^ unit1025_0[i][1]) |(x[ unit1025_0[i][2] ] ^ unit1025_0[i][3]));
			}
		if(X_contra>0) L[1025][0]=2;
		}
	//Check all rules of unit[1025][1]
	L[1025][1] = LargeX[1025][0]>0 ? 1 : 0;
	satisfiable[1025][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1025_1[i][0] ][ unit1025_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1025_1[i][2] ][ unit1025_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1025_1[i][4] ][ unit1025_1[i][5] ] >0);
		X_contra = ( LargeX[1025][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1025_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1025][0]=0; L[1025][1]=1;}
			satisfiable[1025][1]=satisfiable[1025][1] & ((x[1025] ^ 1) | (x[ unit1025_1[i][0] ] ^ unit1025_1[i][1]) |(x[ unit1025_1[i][2] ] ^ unit1025_1[i][3]));
			}
		if(X_contra>0) L[1025][1]=2;
		}
	//Check all rules of unit[1026][0]
	L[1026][0] = LargeX[1026][1]>0 ? 1 : 0;
	satisfiable[1026][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1026_0[i][0] ][ unit1026_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1026_0[i][2] ][ unit1026_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1026_0[i][4] ][ unit1026_0[i][5] ] >0);
		X_contra = ( LargeX[1026][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1026_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1026][1]=0; L[1026][0]=1;}
			satisfiable[1026][0]=satisfiable[1026][0] & ((x[1026] ^ 0) | (x[ unit1026_0[i][0] ] ^ unit1026_0[i][1]) |(x[ unit1026_0[i][2] ] ^ unit1026_0[i][3]));
			}
		if(X_contra>0) L[1026][0]=2;
		}
	//Check all rules of unit[1026][1]
	L[1026][1] = LargeX[1026][0]>0 ? 1 : 0;
	satisfiable[1026][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1026_1[i][0] ][ unit1026_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1026_1[i][2] ][ unit1026_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1026_1[i][4] ][ unit1026_1[i][5] ] >0);
		X_contra = ( LargeX[1026][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1026_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1026][0]=0; L[1026][1]=1;}
			satisfiable[1026][1]=satisfiable[1026][1] & ((x[1026] ^ 1) | (x[ unit1026_1[i][0] ] ^ unit1026_1[i][1]) |(x[ unit1026_1[i][2] ] ^ unit1026_1[i][3]));
			}
		if(X_contra>0) L[1026][1]=2;
		}
	//Check all rules of unit[1027][0]
	L[1027][0] = LargeX[1027][1]>0 ? 1 : 0;
	satisfiable[1027][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1027_0[i][0] ][ unit1027_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1027_0[i][2] ][ unit1027_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1027_0[i][4] ][ unit1027_0[i][5] ] >0);
		X_contra = ( LargeX[1027][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1027_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1027][1]=0; L[1027][0]=1;}
			satisfiable[1027][0]=satisfiable[1027][0] & ((x[1027] ^ 0) | (x[ unit1027_0[i][0] ] ^ unit1027_0[i][1]) |(x[ unit1027_0[i][2] ] ^ unit1027_0[i][3]));
			}
		if(X_contra>0) L[1027][0]=2;
		}
	//Check all rules of unit[1027][1]
	L[1027][1] = LargeX[1027][0]>0 ? 1 : 0;
	satisfiable[1027][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1027_1[i][0] ][ unit1027_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1027_1[i][2] ][ unit1027_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1027_1[i][4] ][ unit1027_1[i][5] ] >0);
		X_contra = ( LargeX[1027][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1027_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1027][0]=0; L[1027][1]=1;}
			satisfiable[1027][1]=satisfiable[1027][1] & ((x[1027] ^ 1) | (x[ unit1027_1[i][0] ] ^ unit1027_1[i][1]) |(x[ unit1027_1[i][2] ] ^ unit1027_1[i][3]));
			}
		if(X_contra>0) L[1027][1]=2;
		}
	//Check all rules of unit[1028][0]
	L[1028][0] = LargeX[1028][1]>0 ? 1 : 0;
	satisfiable[1028][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1028_0[i][0] ][ unit1028_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1028_0[i][2] ][ unit1028_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1028_0[i][4] ][ unit1028_0[i][5] ] >0);
		X_contra = ( LargeX[1028][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1028_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1028][1]=0; L[1028][0]=1;}
			satisfiable[1028][0]=satisfiable[1028][0] & ((x[1028] ^ 0) | (x[ unit1028_0[i][0] ] ^ unit1028_0[i][1]) |(x[ unit1028_0[i][2] ] ^ unit1028_0[i][3]));
			}
		if(X_contra>0) L[1028][0]=2;
		}
	//Check all rules of unit[1028][1]
	L[1028][1] = LargeX[1028][0]>0 ? 1 : 0;
	satisfiable[1028][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1028_1[i][0] ][ unit1028_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1028_1[i][2] ][ unit1028_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1028_1[i][4] ][ unit1028_1[i][5] ] >0);
		X_contra = ( LargeX[1028][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1028_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1028][0]=0; L[1028][1]=1;}
			satisfiable[1028][1]=satisfiable[1028][1] & ((x[1028] ^ 1) | (x[ unit1028_1[i][0] ] ^ unit1028_1[i][1]) |(x[ unit1028_1[i][2] ] ^ unit1028_1[i][3]));
			}
		if(X_contra>0) L[1028][1]=2;
		}
	//Check all rules of unit[1029][0]
	L[1029][0] = LargeX[1029][1]>0 ? 1 : 0;
	satisfiable[1029][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1029_0[i][0] ][ unit1029_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1029_0[i][2] ][ unit1029_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1029_0[i][4] ][ unit1029_0[i][5] ] >0);
		X_contra = ( LargeX[1029][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1029_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1029][1]=0; L[1029][0]=1;}
			satisfiable[1029][0]=satisfiable[1029][0] & ((x[1029] ^ 0) | (x[ unit1029_0[i][0] ] ^ unit1029_0[i][1]) |(x[ unit1029_0[i][2] ] ^ unit1029_0[i][3]));
			}
		if(X_contra>0) L[1029][0]=2;
		}
	//Check all rules of unit[1029][1]
	L[1029][1] = LargeX[1029][0]>0 ? 1 : 0;
	satisfiable[1029][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1029_1[i][0] ][ unit1029_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1029_1[i][2] ][ unit1029_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1029_1[i][4] ][ unit1029_1[i][5] ] >0);
		X_contra = ( LargeX[1029][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1029_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1029][0]=0; L[1029][1]=1;}
			satisfiable[1029][1]=satisfiable[1029][1] & ((x[1029] ^ 1) | (x[ unit1029_1[i][0] ] ^ unit1029_1[i][1]) |(x[ unit1029_1[i][2] ] ^ unit1029_1[i][3]));
			}
		if(X_contra>0) L[1029][1]=2;
		}
	//Check all rules of unit[1030][0]
	L[1030][0] = LargeX[1030][1]>0 ? 1 : 0;
	satisfiable[1030][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1030_0[i][0] ][ unit1030_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1030_0[i][2] ][ unit1030_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1030_0[i][4] ][ unit1030_0[i][5] ] >0);
		X_contra = ( LargeX[1030][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1030_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1030][1]=0; L[1030][0]=1;}
			satisfiable[1030][0]=satisfiable[1030][0] & ((x[1030] ^ 0) | (x[ unit1030_0[i][0] ] ^ unit1030_0[i][1]) |(x[ unit1030_0[i][2] ] ^ unit1030_0[i][3]));
			}
		if(X_contra>0) L[1030][0]=2;
		}
	//Check all rules of unit[1030][1]
	L[1030][1] = LargeX[1030][0]>0 ? 1 : 0;
	satisfiable[1030][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1030_1[i][0] ][ unit1030_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1030_1[i][2] ][ unit1030_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1030_1[i][4] ][ unit1030_1[i][5] ] >0);
		X_contra = ( LargeX[1030][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1030_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1030][0]=0; L[1030][1]=1;}
			satisfiable[1030][1]=satisfiable[1030][1] & ((x[1030] ^ 1) | (x[ unit1030_1[i][0] ] ^ unit1030_1[i][1]) |(x[ unit1030_1[i][2] ] ^ unit1030_1[i][3]));
			}
		if(X_contra>0) L[1030][1]=2;
		}
	//Check all rules of unit[1031][0]
	L[1031][0] = LargeX[1031][1]>0 ? 1 : 0;
	satisfiable[1031][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1031_0[i][0] ][ unit1031_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1031_0[i][2] ][ unit1031_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1031_0[i][4] ][ unit1031_0[i][5] ] >0);
		X_contra = ( LargeX[1031][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1031_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1031][1]=0; L[1031][0]=1;}
			satisfiable[1031][0]=satisfiable[1031][0] & ((x[1031] ^ 0) | (x[ unit1031_0[i][0] ] ^ unit1031_0[i][1]) |(x[ unit1031_0[i][2] ] ^ unit1031_0[i][3]));
			}
		if(X_contra>0) L[1031][0]=2;
		}
	//Check all rules of unit[1031][1]
	L[1031][1] = LargeX[1031][0]>0 ? 1 : 0;
	satisfiable[1031][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1031_1[i][0] ][ unit1031_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1031_1[i][2] ][ unit1031_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1031_1[i][4] ][ unit1031_1[i][5] ] >0);
		X_contra = ( LargeX[1031][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1031_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1031][0]=0; L[1031][1]=1;}
			satisfiable[1031][1]=satisfiable[1031][1] & ((x[1031] ^ 1) | (x[ unit1031_1[i][0] ] ^ unit1031_1[i][1]) |(x[ unit1031_1[i][2] ] ^ unit1031_1[i][3]));
			}
		if(X_contra>0) L[1031][1]=2;
		}
	//Check all rules of unit[1032][0]
	L[1032][0] = LargeX[1032][1]>0 ? 1 : 0;
	satisfiable[1032][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1032_0[i][0] ][ unit1032_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1032_0[i][2] ][ unit1032_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1032_0[i][4] ][ unit1032_0[i][5] ] >0);
		X_contra = ( LargeX[1032][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1032_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1032][1]=0; L[1032][0]=1;}
			satisfiable[1032][0]=satisfiable[1032][0] & ((x[1032] ^ 0) | (x[ unit1032_0[i][0] ] ^ unit1032_0[i][1]) |(x[ unit1032_0[i][2] ] ^ unit1032_0[i][3]));
			}
		if(X_contra>0) L[1032][0]=2;
		}
	//Check all rules of unit[1032][1]
	L[1032][1] = LargeX[1032][0]>0 ? 1 : 0;
	satisfiable[1032][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1032_1[i][0] ][ unit1032_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1032_1[i][2] ][ unit1032_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1032_1[i][4] ][ unit1032_1[i][5] ] >0);
		X_contra = ( LargeX[1032][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1032_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1032][0]=0; L[1032][1]=1;}
			satisfiable[1032][1]=satisfiable[1032][1] & ((x[1032] ^ 1) | (x[ unit1032_1[i][0] ] ^ unit1032_1[i][1]) |(x[ unit1032_1[i][2] ] ^ unit1032_1[i][3]));
			}
		if(X_contra>0) L[1032][1]=2;
		}
	//Check all rules of unit[1033][0]
	L[1033][0] = LargeX[1033][1]>0 ? 1 : 0;
	satisfiable[1033][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1033_0[i][0] ][ unit1033_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1033_0[i][2] ][ unit1033_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1033_0[i][4] ][ unit1033_0[i][5] ] >0);
		X_contra = ( LargeX[1033][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1033_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1033][1]=0; L[1033][0]=1;}
			satisfiable[1033][0]=satisfiable[1033][0] & ((x[1033] ^ 0) | (x[ unit1033_0[i][0] ] ^ unit1033_0[i][1]) |(x[ unit1033_0[i][2] ] ^ unit1033_0[i][3]));
			}
		if(X_contra>0) L[1033][0]=2;
		}
	//Check all rules of unit[1033][1]
	L[1033][1] = LargeX[1033][0]>0 ? 1 : 0;
	satisfiable[1033][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1033_1[i][0] ][ unit1033_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1033_1[i][2] ][ unit1033_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1033_1[i][4] ][ unit1033_1[i][5] ] >0);
		X_contra = ( LargeX[1033][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1033_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1033][0]=0; L[1033][1]=1;}
			satisfiable[1033][1]=satisfiable[1033][1] & ((x[1033] ^ 1) | (x[ unit1033_1[i][0] ] ^ unit1033_1[i][1]) |(x[ unit1033_1[i][2] ] ^ unit1033_1[i][3]));
			}
		if(X_contra>0) L[1033][1]=2;
		}
	//Check all rules of unit[1034][0]
	L[1034][0] = LargeX[1034][1]>0 ? 1 : 0;
	satisfiable[1034][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1034_0[i][0] ][ unit1034_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1034_0[i][2] ][ unit1034_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1034_0[i][4] ][ unit1034_0[i][5] ] >0);
		X_contra = ( LargeX[1034][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1034_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1034][1]=0; L[1034][0]=1;}
			satisfiable[1034][0]=satisfiable[1034][0] & ((x[1034] ^ 0) | (x[ unit1034_0[i][0] ] ^ unit1034_0[i][1]) |(x[ unit1034_0[i][2] ] ^ unit1034_0[i][3]));
			}
		if(X_contra>0) L[1034][0]=2;
		}
	//Check all rules of unit[1034][1]
	L[1034][1] = LargeX[1034][0]>0 ? 1 : 0;
	satisfiable[1034][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1034_1[i][0] ][ unit1034_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1034_1[i][2] ][ unit1034_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1034_1[i][4] ][ unit1034_1[i][5] ] >0);
		X_contra = ( LargeX[1034][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1034_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1034][0]=0; L[1034][1]=1;}
			satisfiable[1034][1]=satisfiable[1034][1] & ((x[1034] ^ 1) | (x[ unit1034_1[i][0] ] ^ unit1034_1[i][1]) |(x[ unit1034_1[i][2] ] ^ unit1034_1[i][3]));
			}
		if(X_contra>0) L[1034][1]=2;
		}
	//Check all rules of unit[1035][0]
	L[1035][0] = LargeX[1035][1]>0 ? 1 : 0;
	satisfiable[1035][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1035_0[i][0] ][ unit1035_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1035_0[i][2] ][ unit1035_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1035_0[i][4] ][ unit1035_0[i][5] ] >0);
		X_contra = ( LargeX[1035][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1035_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1035][1]=0; L[1035][0]=1;}
			satisfiable[1035][0]=satisfiable[1035][0] & ((x[1035] ^ 0) | (x[ unit1035_0[i][0] ] ^ unit1035_0[i][1]) |(x[ unit1035_0[i][2] ] ^ unit1035_0[i][3]));
			}
		if(X_contra>0) L[1035][0]=2;
		}
	//Check all rules of unit[1035][1]
	L[1035][1] = LargeX[1035][0]>0 ? 1 : 0;
	satisfiable[1035][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1035_1[i][0] ][ unit1035_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1035_1[i][2] ][ unit1035_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1035_1[i][4] ][ unit1035_1[i][5] ] >0);
		X_contra = ( LargeX[1035][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1035_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1035][0]=0; L[1035][1]=1;}
			satisfiable[1035][1]=satisfiable[1035][1] & ((x[1035] ^ 1) | (x[ unit1035_1[i][0] ] ^ unit1035_1[i][1]) |(x[ unit1035_1[i][2] ] ^ unit1035_1[i][3]));
			}
		if(X_contra>0) L[1035][1]=2;
		}
	//Check all rules of unit[1036][0]
	L[1036][0] = LargeX[1036][1]>0 ? 1 : 0;
	satisfiable[1036][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1036_0[i][0] ][ unit1036_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1036_0[i][2] ][ unit1036_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1036_0[i][4] ][ unit1036_0[i][5] ] >0);
		X_contra = ( LargeX[1036][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1036_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1036][1]=0; L[1036][0]=1;}
			satisfiable[1036][0]=satisfiable[1036][0] & ((x[1036] ^ 0) | (x[ unit1036_0[i][0] ] ^ unit1036_0[i][1]) |(x[ unit1036_0[i][2] ] ^ unit1036_0[i][3]));
			}
		if(X_contra>0) L[1036][0]=2;
		}
	//Check all rules of unit[1036][1]
	L[1036][1] = LargeX[1036][0]>0 ? 1 : 0;
	satisfiable[1036][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1036_1[i][0] ][ unit1036_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1036_1[i][2] ][ unit1036_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1036_1[i][4] ][ unit1036_1[i][5] ] >0);
		X_contra = ( LargeX[1036][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1036_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1036][0]=0; L[1036][1]=1;}
			satisfiable[1036][1]=satisfiable[1036][1] & ((x[1036] ^ 1) | (x[ unit1036_1[i][0] ] ^ unit1036_1[i][1]) |(x[ unit1036_1[i][2] ] ^ unit1036_1[i][3]));
			}
		if(X_contra>0) L[1036][1]=2;
		}
	//Check all rules of unit[1037][0]
	L[1037][0] = LargeX[1037][1]>0 ? 1 : 0;
	satisfiable[1037][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1037_0[i][0] ][ unit1037_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1037_0[i][2] ][ unit1037_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1037_0[i][4] ][ unit1037_0[i][5] ] >0);
		X_contra = ( LargeX[1037][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1037_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1037][1]=0; L[1037][0]=1;}
			satisfiable[1037][0]=satisfiable[1037][0] & ((x[1037] ^ 0) | (x[ unit1037_0[i][0] ] ^ unit1037_0[i][1]) |(x[ unit1037_0[i][2] ] ^ unit1037_0[i][3]));
			}
		if(X_contra>0) L[1037][0]=2;
		}
	//Check all rules of unit[1037][1]
	L[1037][1] = LargeX[1037][0]>0 ? 1 : 0;
	satisfiable[1037][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1037_1[i][0] ][ unit1037_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1037_1[i][2] ][ unit1037_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1037_1[i][4] ][ unit1037_1[i][5] ] >0);
		X_contra = ( LargeX[1037][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1037_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1037][0]=0; L[1037][1]=1;}
			satisfiable[1037][1]=satisfiable[1037][1] & ((x[1037] ^ 1) | (x[ unit1037_1[i][0] ] ^ unit1037_1[i][1]) |(x[ unit1037_1[i][2] ] ^ unit1037_1[i][3]));
			}
		if(X_contra>0) L[1037][1]=2;
		}
	//Check all rules of unit[1038][0]
	L[1038][0] = LargeX[1038][1]>0 ? 1 : 0;
	satisfiable[1038][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1038_0[i][0] ][ unit1038_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1038_0[i][2] ][ unit1038_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1038_0[i][4] ][ unit1038_0[i][5] ] >0);
		X_contra = ( LargeX[1038][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1038_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1038][1]=0; L[1038][0]=1;}
			satisfiable[1038][0]=satisfiable[1038][0] & ((x[1038] ^ 0) | (x[ unit1038_0[i][0] ] ^ unit1038_0[i][1]) |(x[ unit1038_0[i][2] ] ^ unit1038_0[i][3]));
			}
		if(X_contra>0) L[1038][0]=2;
		}
	//Check all rules of unit[1038][1]
	L[1038][1] = LargeX[1038][0]>0 ? 1 : 0;
	satisfiable[1038][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1038_1[i][0] ][ unit1038_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1038_1[i][2] ][ unit1038_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1038_1[i][4] ][ unit1038_1[i][5] ] >0);
		X_contra = ( LargeX[1038][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1038_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1038][0]=0; L[1038][1]=1;}
			satisfiable[1038][1]=satisfiable[1038][1] & ((x[1038] ^ 1) | (x[ unit1038_1[i][0] ] ^ unit1038_1[i][1]) |(x[ unit1038_1[i][2] ] ^ unit1038_1[i][3]));
			}
		if(X_contra>0) L[1038][1]=2;
		}
	//Check all rules of unit[1039][0]
	L[1039][0] = LargeX[1039][1]>0 ? 1 : 0;
	satisfiable[1039][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1039_0[i][0] ][ unit1039_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1039_0[i][2] ][ unit1039_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1039_0[i][4] ][ unit1039_0[i][5] ] >0);
		X_contra = ( LargeX[1039][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1039_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1039][1]=0; L[1039][0]=1;}
			satisfiable[1039][0]=satisfiable[1039][0] & ((x[1039] ^ 0) | (x[ unit1039_0[i][0] ] ^ unit1039_0[i][1]) |(x[ unit1039_0[i][2] ] ^ unit1039_0[i][3]));
			}
		if(X_contra>0) L[1039][0]=2;
		}
	//Check all rules of unit[1039][1]
	L[1039][1] = LargeX[1039][0]>0 ? 1 : 0;
	satisfiable[1039][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1039_1[i][0] ][ unit1039_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1039_1[i][2] ][ unit1039_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1039_1[i][4] ][ unit1039_1[i][5] ] >0);
		X_contra = ( LargeX[1039][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1039_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1039][0]=0; L[1039][1]=1;}
			satisfiable[1039][1]=satisfiable[1039][1] & ((x[1039] ^ 1) | (x[ unit1039_1[i][0] ] ^ unit1039_1[i][1]) |(x[ unit1039_1[i][2] ] ^ unit1039_1[i][3]));
			}
		if(X_contra>0) L[1039][1]=2;
		}
	//Check all rules of unit[1040][0]
	L[1040][0] = LargeX[1040][1]>0 ? 1 : 0;
	satisfiable[1040][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1040_0[i][0] ][ unit1040_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1040_0[i][2] ][ unit1040_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1040_0[i][4] ][ unit1040_0[i][5] ] >0);
		X_contra = ( LargeX[1040][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1040_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1040][1]=0; L[1040][0]=1;}
			satisfiable[1040][0]=satisfiable[1040][0] & ((x[1040] ^ 0) | (x[ unit1040_0[i][0] ] ^ unit1040_0[i][1]) |(x[ unit1040_0[i][2] ] ^ unit1040_0[i][3]));
			}
		if(X_contra>0) L[1040][0]=2;
		}
	//Check all rules of unit[1040][1]
	L[1040][1] = LargeX[1040][0]>0 ? 1 : 0;
	satisfiable[1040][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1040_1[i][0] ][ unit1040_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1040_1[i][2] ][ unit1040_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1040_1[i][4] ][ unit1040_1[i][5] ] >0);
		X_contra = ( LargeX[1040][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1040_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1040][0]=0; L[1040][1]=1;}
			satisfiable[1040][1]=satisfiable[1040][1] & ((x[1040] ^ 1) | (x[ unit1040_1[i][0] ] ^ unit1040_1[i][1]) |(x[ unit1040_1[i][2] ] ^ unit1040_1[i][3]));
			}
		if(X_contra>0) L[1040][1]=2;
		}
	//Check all rules of unit[1041][0]
	L[1041][0] = LargeX[1041][1]>0 ? 1 : 0;
	satisfiable[1041][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1041_0[i][0] ][ unit1041_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1041_0[i][2] ][ unit1041_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1041_0[i][4] ][ unit1041_0[i][5] ] >0);
		X_contra = ( LargeX[1041][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1041_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1041][1]=0; L[1041][0]=1;}
			satisfiable[1041][0]=satisfiable[1041][0] & ((x[1041] ^ 0) | (x[ unit1041_0[i][0] ] ^ unit1041_0[i][1]) |(x[ unit1041_0[i][2] ] ^ unit1041_0[i][3]));
			}
		if(X_contra>0) L[1041][0]=2;
		}
	//Check all rules of unit[1041][1]
	L[1041][1] = LargeX[1041][0]>0 ? 1 : 0;
	satisfiable[1041][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1041_1[i][0] ][ unit1041_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1041_1[i][2] ][ unit1041_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1041_1[i][4] ][ unit1041_1[i][5] ] >0);
		X_contra = ( LargeX[1041][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1041_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1041][0]=0; L[1041][1]=1;}
			satisfiable[1041][1]=satisfiable[1041][1] & ((x[1041] ^ 1) | (x[ unit1041_1[i][0] ] ^ unit1041_1[i][1]) |(x[ unit1041_1[i][2] ] ^ unit1041_1[i][3]));
			}
		if(X_contra>0) L[1041][1]=2;
		}
	//Check all rules of unit[1042][0]
	L[1042][0] = LargeX[1042][1]>0 ? 1 : 0;
	satisfiable[1042][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1042_0[i][0] ][ unit1042_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1042_0[i][2] ][ unit1042_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1042_0[i][4] ][ unit1042_0[i][5] ] >0);
		X_contra = ( LargeX[1042][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1042_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1042][1]=0; L[1042][0]=1;}
			satisfiable[1042][0]=satisfiable[1042][0] & ((x[1042] ^ 0) | (x[ unit1042_0[i][0] ] ^ unit1042_0[i][1]) |(x[ unit1042_0[i][2] ] ^ unit1042_0[i][3]));
			}
		if(X_contra>0) L[1042][0]=2;
		}
	//Check all rules of unit[1042][1]
	L[1042][1] = LargeX[1042][0]>0 ? 1 : 0;
	satisfiable[1042][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1042_1[i][0] ][ unit1042_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1042_1[i][2] ][ unit1042_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1042_1[i][4] ][ unit1042_1[i][5] ] >0);
		X_contra = ( LargeX[1042][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1042_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1042][0]=0; L[1042][1]=1;}
			satisfiable[1042][1]=satisfiable[1042][1] & ((x[1042] ^ 1) | (x[ unit1042_1[i][0] ] ^ unit1042_1[i][1]) |(x[ unit1042_1[i][2] ] ^ unit1042_1[i][3]));
			}
		if(X_contra>0) L[1042][1]=2;
		}
	//Check all rules of unit[1043][0]
	L[1043][0] = LargeX[1043][1]>0 ? 1 : 0;
	satisfiable[1043][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1043_0[i][0] ][ unit1043_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1043_0[i][2] ][ unit1043_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1043_0[i][4] ][ unit1043_0[i][5] ] >0);
		X_contra = ( LargeX[1043][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1043_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1043][1]=0; L[1043][0]=1;}
			satisfiable[1043][0]=satisfiable[1043][0] & ((x[1043] ^ 0) | (x[ unit1043_0[i][0] ] ^ unit1043_0[i][1]) |(x[ unit1043_0[i][2] ] ^ unit1043_0[i][3]));
			}
		if(X_contra>0) L[1043][0]=2;
		}
	//Check all rules of unit[1043][1]
	L[1043][1] = LargeX[1043][0]>0 ? 1 : 0;
	satisfiable[1043][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1043_1[i][0] ][ unit1043_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1043_1[i][2] ][ unit1043_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1043_1[i][4] ][ unit1043_1[i][5] ] >0);
		X_contra = ( LargeX[1043][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1043_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1043][0]=0; L[1043][1]=1;}
			satisfiable[1043][1]=satisfiable[1043][1] & ((x[1043] ^ 1) | (x[ unit1043_1[i][0] ] ^ unit1043_1[i][1]) |(x[ unit1043_1[i][2] ] ^ unit1043_1[i][3]));
			}
		if(X_contra>0) L[1043][1]=2;
		}
	//Check all rules of unit[1044][0]
	L[1044][0] = LargeX[1044][1]>0 ? 1 : 0;
	satisfiable[1044][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1044_0[i][0] ][ unit1044_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1044_0[i][2] ][ unit1044_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1044_0[i][4] ][ unit1044_0[i][5] ] >0);
		X_contra = ( LargeX[1044][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1044_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1044][1]=0; L[1044][0]=1;}
			satisfiable[1044][0]=satisfiable[1044][0] & ((x[1044] ^ 0) | (x[ unit1044_0[i][0] ] ^ unit1044_0[i][1]) |(x[ unit1044_0[i][2] ] ^ unit1044_0[i][3]));
			}
		if(X_contra>0) L[1044][0]=2;
		}
	//Check all rules of unit[1044][1]
	L[1044][1] = LargeX[1044][0]>0 ? 1 : 0;
	satisfiable[1044][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1044_1[i][0] ][ unit1044_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1044_1[i][2] ][ unit1044_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1044_1[i][4] ][ unit1044_1[i][5] ] >0);
		X_contra = ( LargeX[1044][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1044_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1044][0]=0; L[1044][1]=1;}
			satisfiable[1044][1]=satisfiable[1044][1] & ((x[1044] ^ 1) | (x[ unit1044_1[i][0] ] ^ unit1044_1[i][1]) |(x[ unit1044_1[i][2] ] ^ unit1044_1[i][3]));
			}
		if(X_contra>0) L[1044][1]=2;
		}
	//Check all rules of unit[1045][0]
	L[1045][0] = LargeX[1045][1]>0 ? 1 : 0;
	satisfiable[1045][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1045_0[i][0] ][ unit1045_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1045_0[i][2] ][ unit1045_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1045_0[i][4] ][ unit1045_0[i][5] ] >0);
		X_contra = ( LargeX[1045][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1045_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1045][1]=0; L[1045][0]=1;}
			satisfiable[1045][0]=satisfiable[1045][0] & ((x[1045] ^ 0) | (x[ unit1045_0[i][0] ] ^ unit1045_0[i][1]) |(x[ unit1045_0[i][2] ] ^ unit1045_0[i][3]));
			}
		if(X_contra>0) L[1045][0]=2;
		}
	//Check all rules of unit[1045][1]
	L[1045][1] = LargeX[1045][0]>0 ? 1 : 0;
	satisfiable[1045][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1045_1[i][0] ][ unit1045_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1045_1[i][2] ][ unit1045_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1045_1[i][4] ][ unit1045_1[i][5] ] >0);
		X_contra = ( LargeX[1045][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1045_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1045][0]=0; L[1045][1]=1;}
			satisfiable[1045][1]=satisfiable[1045][1] & ((x[1045] ^ 1) | (x[ unit1045_1[i][0] ] ^ unit1045_1[i][1]) |(x[ unit1045_1[i][2] ] ^ unit1045_1[i][3]));
			}
		if(X_contra>0) L[1045][1]=2;
		}
	//Check all rules of unit[1046][0]
	L[1046][0] = LargeX[1046][1]>0 ? 1 : 0;
	satisfiable[1046][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1046_0[i][0] ][ unit1046_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1046_0[i][2] ][ unit1046_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1046_0[i][4] ][ unit1046_0[i][5] ] >0);
		X_contra = ( LargeX[1046][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1046_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1046][1]=0; L[1046][0]=1;}
			satisfiable[1046][0]=satisfiable[1046][0] & ((x[1046] ^ 0) | (x[ unit1046_0[i][0] ] ^ unit1046_0[i][1]) |(x[ unit1046_0[i][2] ] ^ unit1046_0[i][3]));
			}
		if(X_contra>0) L[1046][0]=2;
		}
	//Check all rules of unit[1046][1]
	L[1046][1] = LargeX[1046][0]>0 ? 1 : 0;
	satisfiable[1046][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1046_1[i][0] ][ unit1046_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1046_1[i][2] ][ unit1046_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1046_1[i][4] ][ unit1046_1[i][5] ] >0);
		X_contra = ( LargeX[1046][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1046_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1046][0]=0; L[1046][1]=1;}
			satisfiable[1046][1]=satisfiable[1046][1] & ((x[1046] ^ 1) | (x[ unit1046_1[i][0] ] ^ unit1046_1[i][1]) |(x[ unit1046_1[i][2] ] ^ unit1046_1[i][3]));
			}
		if(X_contra>0) L[1046][1]=2;
		}
	//Check all rules of unit[1047][0]
	L[1047][0] = LargeX[1047][1]>0 ? 1 : 0;
	satisfiable[1047][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1047_0[i][0] ][ unit1047_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1047_0[i][2] ][ unit1047_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1047_0[i][4] ][ unit1047_0[i][5] ] >0);
		X_contra = ( LargeX[1047][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1047_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1047][1]=0; L[1047][0]=1;}
			satisfiable[1047][0]=satisfiable[1047][0] & ((x[1047] ^ 0) | (x[ unit1047_0[i][0] ] ^ unit1047_0[i][1]) |(x[ unit1047_0[i][2] ] ^ unit1047_0[i][3]));
			}
		if(X_contra>0) L[1047][0]=2;
		}
	//Check all rules of unit[1047][1]
	L[1047][1] = LargeX[1047][0]>0 ? 1 : 0;
	satisfiable[1047][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1047_1[i][0] ][ unit1047_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1047_1[i][2] ][ unit1047_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1047_1[i][4] ][ unit1047_1[i][5] ] >0);
		X_contra = ( LargeX[1047][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1047_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1047][0]=0; L[1047][1]=1;}
			satisfiable[1047][1]=satisfiable[1047][1] & ((x[1047] ^ 1) | (x[ unit1047_1[i][0] ] ^ unit1047_1[i][1]) |(x[ unit1047_1[i][2] ] ^ unit1047_1[i][3]));
			}
		if(X_contra>0) L[1047][1]=2;
		}
	//Check all rules of unit[1048][0]
	L[1048][0] = LargeX[1048][1]>0 ? 1 : 0;
	satisfiable[1048][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1048_0[i][0] ][ unit1048_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1048_0[i][2] ][ unit1048_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1048_0[i][4] ][ unit1048_0[i][5] ] >0);
		X_contra = ( LargeX[1048][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1048_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1048][1]=0; L[1048][0]=1;}
			satisfiable[1048][0]=satisfiable[1048][0] & ((x[1048] ^ 0) | (x[ unit1048_0[i][0] ] ^ unit1048_0[i][1]) |(x[ unit1048_0[i][2] ] ^ unit1048_0[i][3]));
			}
		if(X_contra>0) L[1048][0]=2;
		}
	//Check all rules of unit[1048][1]
	L[1048][1] = LargeX[1048][0]>0 ? 1 : 0;
	satisfiable[1048][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1048_1[i][0] ][ unit1048_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1048_1[i][2] ][ unit1048_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1048_1[i][4] ][ unit1048_1[i][5] ] >0);
		X_contra = ( LargeX[1048][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1048_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1048][0]=0; L[1048][1]=1;}
			satisfiable[1048][1]=satisfiable[1048][1] & ((x[1048] ^ 1) | (x[ unit1048_1[i][0] ] ^ unit1048_1[i][1]) |(x[ unit1048_1[i][2] ] ^ unit1048_1[i][3]));
			}
		if(X_contra>0) L[1048][1]=2;
		}
	//Check all rules of unit[1049][0]
	L[1049][0] = LargeX[1049][1]>0 ? 1 : 0;
	satisfiable[1049][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1049_0[i][0] ][ unit1049_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1049_0[i][2] ][ unit1049_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1049_0[i][4] ][ unit1049_0[i][5] ] >0);
		X_contra = ( LargeX[1049][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1049_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1049][1]=0; L[1049][0]=1;}
			satisfiable[1049][0]=satisfiable[1049][0] & ((x[1049] ^ 0) | (x[ unit1049_0[i][0] ] ^ unit1049_0[i][1]) |(x[ unit1049_0[i][2] ] ^ unit1049_0[i][3]));
			}
		if(X_contra>0) L[1049][0]=2;
		}
	//Check all rules of unit[1049][1]
	L[1049][1] = LargeX[1049][0]>0 ? 1 : 0;
	satisfiable[1049][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1049_1[i][0] ][ unit1049_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1049_1[i][2] ][ unit1049_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1049_1[i][4] ][ unit1049_1[i][5] ] >0);
		X_contra = ( LargeX[1049][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1049_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1049][0]=0; L[1049][1]=1;}
			satisfiable[1049][1]=satisfiable[1049][1] & ((x[1049] ^ 1) | (x[ unit1049_1[i][0] ] ^ unit1049_1[i][1]) |(x[ unit1049_1[i][2] ] ^ unit1049_1[i][3]));
			}
		if(X_contra>0) L[1049][1]=2;
		}
	//Check all rules of unit[1050][0]
	L[1050][0] = LargeX[1050][1]>0 ? 1 : 0;
	satisfiable[1050][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1050_0[i][0] ][ unit1050_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1050_0[i][2] ][ unit1050_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1050_0[i][4] ][ unit1050_0[i][5] ] >0);
		X_contra = ( LargeX[1050][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1050_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1050][1]=0; L[1050][0]=1;}
			satisfiable[1050][0]=satisfiable[1050][0] & ((x[1050] ^ 0) | (x[ unit1050_0[i][0] ] ^ unit1050_0[i][1]) |(x[ unit1050_0[i][2] ] ^ unit1050_0[i][3]));
			}
		if(X_contra>0) L[1050][0]=2;
		}
	//Check all rules of unit[1050][1]
	L[1050][1] = LargeX[1050][0]>0 ? 1 : 0;
	satisfiable[1050][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1050_1[i][0] ][ unit1050_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1050_1[i][2] ][ unit1050_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1050_1[i][4] ][ unit1050_1[i][5] ] >0);
		X_contra = ( LargeX[1050][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1050_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1050][0]=0; L[1050][1]=1;}
			satisfiable[1050][1]=satisfiable[1050][1] & ((x[1050] ^ 1) | (x[ unit1050_1[i][0] ] ^ unit1050_1[i][1]) |(x[ unit1050_1[i][2] ] ^ unit1050_1[i][3]));
			}
		if(X_contra>0) L[1050][1]=2;
		}
	//Check all rules of unit[1051][0]
	L[1051][0] = LargeX[1051][1]>0 ? 1 : 0;
	satisfiable[1051][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1051_0[i][0] ][ unit1051_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1051_0[i][2] ][ unit1051_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1051_0[i][4] ][ unit1051_0[i][5] ] >0);
		X_contra = ( LargeX[1051][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1051_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1051][1]=0; L[1051][0]=1;}
			satisfiable[1051][0]=satisfiable[1051][0] & ((x[1051] ^ 0) | (x[ unit1051_0[i][0] ] ^ unit1051_0[i][1]) |(x[ unit1051_0[i][2] ] ^ unit1051_0[i][3]));
			}
		if(X_contra>0) L[1051][0]=2;
		}
	//Check all rules of unit[1051][1]
	L[1051][1] = LargeX[1051][0]>0 ? 1 : 0;
	satisfiable[1051][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1051_1[i][0] ][ unit1051_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1051_1[i][2] ][ unit1051_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1051_1[i][4] ][ unit1051_1[i][5] ] >0);
		X_contra = ( LargeX[1051][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1051_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1051][0]=0; L[1051][1]=1;}
			satisfiable[1051][1]=satisfiable[1051][1] & ((x[1051] ^ 1) | (x[ unit1051_1[i][0] ] ^ unit1051_1[i][1]) |(x[ unit1051_1[i][2] ] ^ unit1051_1[i][3]));
			}
		if(X_contra>0) L[1051][1]=2;
		}
	//Check all rules of unit[1052][0]
	L[1052][0] = LargeX[1052][1]>0 ? 1 : 0;
	satisfiable[1052][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1052_0[i][0] ][ unit1052_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1052_0[i][2] ][ unit1052_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1052_0[i][4] ][ unit1052_0[i][5] ] >0);
		X_contra = ( LargeX[1052][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1052_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1052][1]=0; L[1052][0]=1;}
			satisfiable[1052][0]=satisfiable[1052][0] & ((x[1052] ^ 0) | (x[ unit1052_0[i][0] ] ^ unit1052_0[i][1]) |(x[ unit1052_0[i][2] ] ^ unit1052_0[i][3]));
			}
		if(X_contra>0) L[1052][0]=2;
		}
	//Check all rules of unit[1052][1]
	L[1052][1] = LargeX[1052][0]>0 ? 1 : 0;
	satisfiable[1052][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1052_1[i][0] ][ unit1052_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1052_1[i][2] ][ unit1052_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1052_1[i][4] ][ unit1052_1[i][5] ] >0);
		X_contra = ( LargeX[1052][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1052_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1052][0]=0; L[1052][1]=1;}
			satisfiable[1052][1]=satisfiable[1052][1] & ((x[1052] ^ 1) | (x[ unit1052_1[i][0] ] ^ unit1052_1[i][1]) |(x[ unit1052_1[i][2] ] ^ unit1052_1[i][3]));
			}
		if(X_contra>0) L[1052][1]=2;
		}
	//Check all rules of unit[1053][0]
	L[1053][0] = LargeX[1053][1]>0 ? 1 : 0;
	satisfiable[1053][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1053_0[i][0] ][ unit1053_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1053_0[i][2] ][ unit1053_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1053_0[i][4] ][ unit1053_0[i][5] ] >0);
		X_contra = ( LargeX[1053][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1053_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1053][1]=0; L[1053][0]=1;}
			satisfiable[1053][0]=satisfiable[1053][0] & ((x[1053] ^ 0) | (x[ unit1053_0[i][0] ] ^ unit1053_0[i][1]) |(x[ unit1053_0[i][2] ] ^ unit1053_0[i][3]));
			}
		if(X_contra>0) L[1053][0]=2;
		}
	//Check all rules of unit[1053][1]
	L[1053][1] = LargeX[1053][0]>0 ? 1 : 0;
	satisfiable[1053][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1053_1[i][0] ][ unit1053_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1053_1[i][2] ][ unit1053_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1053_1[i][4] ][ unit1053_1[i][5] ] >0);
		X_contra = ( LargeX[1053][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1053_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1053][0]=0; L[1053][1]=1;}
			satisfiable[1053][1]=satisfiable[1053][1] & ((x[1053] ^ 1) | (x[ unit1053_1[i][0] ] ^ unit1053_1[i][1]) |(x[ unit1053_1[i][2] ] ^ unit1053_1[i][3]));
			}
		if(X_contra>0) L[1053][1]=2;
		}
	//Check all rules of unit[1054][0]
	L[1054][0] = LargeX[1054][1]>0 ? 1 : 0;
	satisfiable[1054][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1054_0[i][0] ][ unit1054_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1054_0[i][2] ][ unit1054_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1054_0[i][4] ][ unit1054_0[i][5] ] >0);
		X_contra = ( LargeX[1054][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1054_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1054][1]=0; L[1054][0]=1;}
			satisfiable[1054][0]=satisfiable[1054][0] & ((x[1054] ^ 0) | (x[ unit1054_0[i][0] ] ^ unit1054_0[i][1]) |(x[ unit1054_0[i][2] ] ^ unit1054_0[i][3]));
			}
		if(X_contra>0) L[1054][0]=2;
		}
	//Check all rules of unit[1054][1]
	L[1054][1] = LargeX[1054][0]>0 ? 1 : 0;
	satisfiable[1054][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1054_1[i][0] ][ unit1054_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1054_1[i][2] ][ unit1054_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1054_1[i][4] ][ unit1054_1[i][5] ] >0);
		X_contra = ( LargeX[1054][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1054_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1054][0]=0; L[1054][1]=1;}
			satisfiable[1054][1]=satisfiable[1054][1] & ((x[1054] ^ 1) | (x[ unit1054_1[i][0] ] ^ unit1054_1[i][1]) |(x[ unit1054_1[i][2] ] ^ unit1054_1[i][3]));
			}
		if(X_contra>0) L[1054][1]=2;
		}
	//Check all rules of unit[1055][0]
	L[1055][0] = LargeX[1055][1]>0 ? 1 : 0;
	satisfiable[1055][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1055_0[i][0] ][ unit1055_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1055_0[i][2] ][ unit1055_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1055_0[i][4] ][ unit1055_0[i][5] ] >0);
		X_contra = ( LargeX[1055][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1055_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1055][1]=0; L[1055][0]=1;}
			satisfiable[1055][0]=satisfiable[1055][0] & ((x[1055] ^ 0) | (x[ unit1055_0[i][0] ] ^ unit1055_0[i][1]) |(x[ unit1055_0[i][2] ] ^ unit1055_0[i][3]));
			}
		if(X_contra>0) L[1055][0]=2;
		}
	//Check all rules of unit[1055][1]
	L[1055][1] = LargeX[1055][0]>0 ? 1 : 0;
	satisfiable[1055][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1055_1[i][0] ][ unit1055_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1055_1[i][2] ][ unit1055_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1055_1[i][4] ][ unit1055_1[i][5] ] >0);
		X_contra = ( LargeX[1055][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1055_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1055][0]=0; L[1055][1]=1;}
			satisfiable[1055][1]=satisfiable[1055][1] & ((x[1055] ^ 1) | (x[ unit1055_1[i][0] ] ^ unit1055_1[i][1]) |(x[ unit1055_1[i][2] ] ^ unit1055_1[i][3]));
			}
		if(X_contra>0) L[1055][1]=2;
		}
	//Check all rules of unit[1056][0]
	L[1056][0] = LargeX[1056][1]>0 ? 1 : 0;
	satisfiable[1056][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1056_0[i][0] ][ unit1056_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1056_0[i][2] ][ unit1056_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1056_0[i][4] ][ unit1056_0[i][5] ] >0);
		X_contra = ( LargeX[1056][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1056_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1056][1]=0; L[1056][0]=1;}
			satisfiable[1056][0]=satisfiable[1056][0] & ((x[1056] ^ 0) | (x[ unit1056_0[i][0] ] ^ unit1056_0[i][1]) |(x[ unit1056_0[i][2] ] ^ unit1056_0[i][3]));
			}
		if(X_contra>0) L[1056][0]=2;
		}
	//Check all rules of unit[1056][1]
	L[1056][1] = LargeX[1056][0]>0 ? 1 : 0;
	satisfiable[1056][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1056_1[i][0] ][ unit1056_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1056_1[i][2] ][ unit1056_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1056_1[i][4] ][ unit1056_1[i][5] ] >0);
		X_contra = ( LargeX[1056][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1056_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1056][0]=0; L[1056][1]=1;}
			satisfiable[1056][1]=satisfiable[1056][1] & ((x[1056] ^ 1) | (x[ unit1056_1[i][0] ] ^ unit1056_1[i][1]) |(x[ unit1056_1[i][2] ] ^ unit1056_1[i][3]));
			}
		if(X_contra>0) L[1056][1]=2;
		}
	//Check all rules of unit[1057][0]
	L[1057][0] = LargeX[1057][1]>0 ? 1 : 0;
	satisfiable[1057][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1057_0[i][0] ][ unit1057_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1057_0[i][2] ][ unit1057_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1057_0[i][4] ][ unit1057_0[i][5] ] >0);
		X_contra = ( LargeX[1057][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1057_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1057][1]=0; L[1057][0]=1;}
			satisfiable[1057][0]=satisfiable[1057][0] & ((x[1057] ^ 0) | (x[ unit1057_0[i][0] ] ^ unit1057_0[i][1]) |(x[ unit1057_0[i][2] ] ^ unit1057_0[i][3]));
			}
		if(X_contra>0) L[1057][0]=2;
		}
	//Check all rules of unit[1057][1]
	L[1057][1] = LargeX[1057][0]>0 ? 1 : 0;
	satisfiable[1057][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1057_1[i][0] ][ unit1057_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1057_1[i][2] ][ unit1057_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1057_1[i][4] ][ unit1057_1[i][5] ] >0);
		X_contra = ( LargeX[1057][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1057_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1057][0]=0; L[1057][1]=1;}
			satisfiable[1057][1]=satisfiable[1057][1] & ((x[1057] ^ 1) | (x[ unit1057_1[i][0] ] ^ unit1057_1[i][1]) |(x[ unit1057_1[i][2] ] ^ unit1057_1[i][3]));
			}
		if(X_contra>0) L[1057][1]=2;
		}
	//Check all rules of unit[1058][0]
	L[1058][0] = LargeX[1058][1]>0 ? 1 : 0;
	satisfiable[1058][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1058_0[i][0] ][ unit1058_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1058_0[i][2] ][ unit1058_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1058_0[i][4] ][ unit1058_0[i][5] ] >0);
		X_contra = ( LargeX[1058][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1058_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1058][1]=0; L[1058][0]=1;}
			satisfiable[1058][0]=satisfiable[1058][0] & ((x[1058] ^ 0) | (x[ unit1058_0[i][0] ] ^ unit1058_0[i][1]) |(x[ unit1058_0[i][2] ] ^ unit1058_0[i][3]));
			}
		if(X_contra>0) L[1058][0]=2;
		}
	//Check all rules of unit[1058][1]
	L[1058][1] = LargeX[1058][0]>0 ? 1 : 0;
	satisfiable[1058][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1058_1[i][0] ][ unit1058_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1058_1[i][2] ][ unit1058_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1058_1[i][4] ][ unit1058_1[i][5] ] >0);
		X_contra = ( LargeX[1058][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1058_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1058][0]=0; L[1058][1]=1;}
			satisfiable[1058][1]=satisfiable[1058][1] & ((x[1058] ^ 1) | (x[ unit1058_1[i][0] ] ^ unit1058_1[i][1]) |(x[ unit1058_1[i][2] ] ^ unit1058_1[i][3]));
			}
		if(X_contra>0) L[1058][1]=2;
		}
	//Check all rules of unit[1059][0]
	L[1059][0] = LargeX[1059][1]>0 ? 1 : 0;
	satisfiable[1059][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1059_0[i][0] ][ unit1059_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1059_0[i][2] ][ unit1059_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1059_0[i][4] ][ unit1059_0[i][5] ] >0);
		X_contra = ( LargeX[1059][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1059_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1059][1]=0; L[1059][0]=1;}
			satisfiable[1059][0]=satisfiable[1059][0] & ((x[1059] ^ 0) | (x[ unit1059_0[i][0] ] ^ unit1059_0[i][1]) |(x[ unit1059_0[i][2] ] ^ unit1059_0[i][3]));
			}
		if(X_contra>0) L[1059][0]=2;
		}
	//Check all rules of unit[1059][1]
	L[1059][1] = LargeX[1059][0]>0 ? 1 : 0;
	satisfiable[1059][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1059_1[i][0] ][ unit1059_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1059_1[i][2] ][ unit1059_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1059_1[i][4] ][ unit1059_1[i][5] ] >0);
		X_contra = ( LargeX[1059][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1059_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1059][0]=0; L[1059][1]=1;}
			satisfiable[1059][1]=satisfiable[1059][1] & ((x[1059] ^ 1) | (x[ unit1059_1[i][0] ] ^ unit1059_1[i][1]) |(x[ unit1059_1[i][2] ] ^ unit1059_1[i][3]));
			}
		if(X_contra>0) L[1059][1]=2;
		}
	//Check all rules of unit[1060][0]
	L[1060][0] = LargeX[1060][1]>0 ? 1 : 0;
	satisfiable[1060][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1060_0[i][0] ][ unit1060_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1060_0[i][2] ][ unit1060_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1060_0[i][4] ][ unit1060_0[i][5] ] >0);
		X_contra = ( LargeX[1060][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1060_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1060][1]=0; L[1060][0]=1;}
			satisfiable[1060][0]=satisfiable[1060][0] & ((x[1060] ^ 0) | (x[ unit1060_0[i][0] ] ^ unit1060_0[i][1]) |(x[ unit1060_0[i][2] ] ^ unit1060_0[i][3]));
			}
		if(X_contra>0) L[1060][0]=2;
		}
	//Check all rules of unit[1060][1]
	L[1060][1] = LargeX[1060][0]>0 ? 1 : 0;
	satisfiable[1060][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1060_1[i][0] ][ unit1060_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1060_1[i][2] ][ unit1060_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1060_1[i][4] ][ unit1060_1[i][5] ] >0);
		X_contra = ( LargeX[1060][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1060_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1060][0]=0; L[1060][1]=1;}
			satisfiable[1060][1]=satisfiable[1060][1] & ((x[1060] ^ 1) | (x[ unit1060_1[i][0] ] ^ unit1060_1[i][1]) |(x[ unit1060_1[i][2] ] ^ unit1060_1[i][3]));
			}
		if(X_contra>0) L[1060][1]=2;
		}
	//Check all rules of unit[1061][0]
	L[1061][0] = LargeX[1061][1]>0 ? 1 : 0;
	satisfiable[1061][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1061_0[i][0] ][ unit1061_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1061_0[i][2] ][ unit1061_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1061_0[i][4] ][ unit1061_0[i][5] ] >0);
		X_contra = ( LargeX[1061][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1061_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1061][1]=0; L[1061][0]=1;}
			satisfiable[1061][0]=satisfiable[1061][0] & ((x[1061] ^ 0) | (x[ unit1061_0[i][0] ] ^ unit1061_0[i][1]) |(x[ unit1061_0[i][2] ] ^ unit1061_0[i][3]));
			}
		if(X_contra>0) L[1061][0]=2;
		}
	//Check all rules of unit[1061][1]
	L[1061][1] = LargeX[1061][0]>0 ? 1 : 0;
	satisfiable[1061][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1061_1[i][0] ][ unit1061_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1061_1[i][2] ][ unit1061_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1061_1[i][4] ][ unit1061_1[i][5] ] >0);
		X_contra = ( LargeX[1061][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1061_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1061][0]=0; L[1061][1]=1;}
			satisfiable[1061][1]=satisfiable[1061][1] & ((x[1061] ^ 1) | (x[ unit1061_1[i][0] ] ^ unit1061_1[i][1]) |(x[ unit1061_1[i][2] ] ^ unit1061_1[i][3]));
			}
		if(X_contra>0) L[1061][1]=2;
		}
	//Check all rules of unit[1062][0]
	L[1062][0] = LargeX[1062][1]>0 ? 1 : 0;
	satisfiable[1062][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1062_0[i][0] ][ unit1062_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1062_0[i][2] ][ unit1062_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1062_0[i][4] ][ unit1062_0[i][5] ] >0);
		X_contra = ( LargeX[1062][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1062_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1062][1]=0; L[1062][0]=1;}
			satisfiable[1062][0]=satisfiable[1062][0] & ((x[1062] ^ 0) | (x[ unit1062_0[i][0] ] ^ unit1062_0[i][1]) |(x[ unit1062_0[i][2] ] ^ unit1062_0[i][3]));
			}
		if(X_contra>0) L[1062][0]=2;
		}
	//Check all rules of unit[1062][1]
	L[1062][1] = LargeX[1062][0]>0 ? 1 : 0;
	satisfiable[1062][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1062_1[i][0] ][ unit1062_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1062_1[i][2] ][ unit1062_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1062_1[i][4] ][ unit1062_1[i][5] ] >0);
		X_contra = ( LargeX[1062][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1062_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1062][0]=0; L[1062][1]=1;}
			satisfiable[1062][1]=satisfiable[1062][1] & ((x[1062] ^ 1) | (x[ unit1062_1[i][0] ] ^ unit1062_1[i][1]) |(x[ unit1062_1[i][2] ] ^ unit1062_1[i][3]));
			}
		if(X_contra>0) L[1062][1]=2;
		}
	//Check all rules of unit[1063][0]
	L[1063][0] = LargeX[1063][1]>0 ? 1 : 0;
	satisfiable[1063][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1063_0[i][0] ][ unit1063_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1063_0[i][2] ][ unit1063_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1063_0[i][4] ][ unit1063_0[i][5] ] >0);
		X_contra = ( LargeX[1063][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1063_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1063][1]=0; L[1063][0]=1;}
			satisfiable[1063][0]=satisfiable[1063][0] & ((x[1063] ^ 0) | (x[ unit1063_0[i][0] ] ^ unit1063_0[i][1]) |(x[ unit1063_0[i][2] ] ^ unit1063_0[i][3]));
			}
		if(X_contra>0) L[1063][0]=2;
		}
	//Check all rules of unit[1063][1]
	L[1063][1] = LargeX[1063][0]>0 ? 1 : 0;
	satisfiable[1063][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1063_1[i][0] ][ unit1063_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1063_1[i][2] ][ unit1063_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1063_1[i][4] ][ unit1063_1[i][5] ] >0);
		X_contra = ( LargeX[1063][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1063_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1063][0]=0; L[1063][1]=1;}
			satisfiable[1063][1]=satisfiable[1063][1] & ((x[1063] ^ 1) | (x[ unit1063_1[i][0] ] ^ unit1063_1[i][1]) |(x[ unit1063_1[i][2] ] ^ unit1063_1[i][3]));
			}
		if(X_contra>0) L[1063][1]=2;
		}
	//Check all rules of unit[1064][0]
	L[1064][0] = LargeX[1064][1]>0 ? 1 : 0;
	satisfiable[1064][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1064_0[i][0] ][ unit1064_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1064_0[i][2] ][ unit1064_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1064_0[i][4] ][ unit1064_0[i][5] ] >0);
		X_contra = ( LargeX[1064][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1064_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1064][1]=0; L[1064][0]=1;}
			satisfiable[1064][0]=satisfiable[1064][0] & ((x[1064] ^ 0) | (x[ unit1064_0[i][0] ] ^ unit1064_0[i][1]) |(x[ unit1064_0[i][2] ] ^ unit1064_0[i][3]));
			}
		if(X_contra>0) L[1064][0]=2;
		}
	//Check all rules of unit[1064][1]
	L[1064][1] = LargeX[1064][0]>0 ? 1 : 0;
	satisfiable[1064][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1064_1[i][0] ][ unit1064_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1064_1[i][2] ][ unit1064_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1064_1[i][4] ][ unit1064_1[i][5] ] >0);
		X_contra = ( LargeX[1064][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1064_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1064][0]=0; L[1064][1]=1;}
			satisfiable[1064][1]=satisfiable[1064][1] & ((x[1064] ^ 1) | (x[ unit1064_1[i][0] ] ^ unit1064_1[i][1]) |(x[ unit1064_1[i][2] ] ^ unit1064_1[i][3]));
			}
		if(X_contra>0) L[1064][1]=2;
		}
	//Check all rules of unit[1065][0]
	L[1065][0] = LargeX[1065][1]>0 ? 1 : 0;
	satisfiable[1065][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1065_0[i][0] ][ unit1065_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1065_0[i][2] ][ unit1065_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1065_0[i][4] ][ unit1065_0[i][5] ] >0);
		X_contra = ( LargeX[1065][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1065_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1065][1]=0; L[1065][0]=1;}
			satisfiable[1065][0]=satisfiable[1065][0] & ((x[1065] ^ 0) | (x[ unit1065_0[i][0] ] ^ unit1065_0[i][1]) |(x[ unit1065_0[i][2] ] ^ unit1065_0[i][3]));
			}
		if(X_contra>0) L[1065][0]=2;
		}
	//Check all rules of unit[1065][1]
	L[1065][1] = LargeX[1065][0]>0 ? 1 : 0;
	satisfiable[1065][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1065_1[i][0] ][ unit1065_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1065_1[i][2] ][ unit1065_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1065_1[i][4] ][ unit1065_1[i][5] ] >0);
		X_contra = ( LargeX[1065][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1065_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1065][0]=0; L[1065][1]=1;}
			satisfiable[1065][1]=satisfiable[1065][1] & ((x[1065] ^ 1) | (x[ unit1065_1[i][0] ] ^ unit1065_1[i][1]) |(x[ unit1065_1[i][2] ] ^ unit1065_1[i][3]));
			}
		if(X_contra>0) L[1065][1]=2;
		}
	//Check all rules of unit[1066][0]
	L[1066][0] = LargeX[1066][1]>0 ? 1 : 0;
	satisfiable[1066][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1066_0[i][0] ][ unit1066_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1066_0[i][2] ][ unit1066_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1066_0[i][4] ][ unit1066_0[i][5] ] >0);
		X_contra = ( LargeX[1066][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1066_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1066][1]=0; L[1066][0]=1;}
			satisfiable[1066][0]=satisfiable[1066][0] & ((x[1066] ^ 0) | (x[ unit1066_0[i][0] ] ^ unit1066_0[i][1]) |(x[ unit1066_0[i][2] ] ^ unit1066_0[i][3]));
			}
		if(X_contra>0) L[1066][0]=2;
		}
	//Check all rules of unit[1066][1]
	L[1066][1] = LargeX[1066][0]>0 ? 1 : 0;
	satisfiable[1066][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1066_1[i][0] ][ unit1066_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1066_1[i][2] ][ unit1066_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1066_1[i][4] ][ unit1066_1[i][5] ] >0);
		X_contra = ( LargeX[1066][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1066_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1066][0]=0; L[1066][1]=1;}
			satisfiable[1066][1]=satisfiable[1066][1] & ((x[1066] ^ 1) | (x[ unit1066_1[i][0] ] ^ unit1066_1[i][1]) |(x[ unit1066_1[i][2] ] ^ unit1066_1[i][3]));
			}
		if(X_contra>0) L[1066][1]=2;
		}
	//Check all rules of unit[1067][0]
	L[1067][0] = LargeX[1067][1]>0 ? 1 : 0;
	satisfiable[1067][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1067_0[i][0] ][ unit1067_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1067_0[i][2] ][ unit1067_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1067_0[i][4] ][ unit1067_0[i][5] ] >0);
		X_contra = ( LargeX[1067][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1067_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1067][1]=0; L[1067][0]=1;}
			satisfiable[1067][0]=satisfiable[1067][0] & ((x[1067] ^ 0) | (x[ unit1067_0[i][0] ] ^ unit1067_0[i][1]) |(x[ unit1067_0[i][2] ] ^ unit1067_0[i][3]));
			}
		if(X_contra>0) L[1067][0]=2;
		}
	//Check all rules of unit[1067][1]
	L[1067][1] = LargeX[1067][0]>0 ? 1 : 0;
	satisfiable[1067][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1067_1[i][0] ][ unit1067_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1067_1[i][2] ][ unit1067_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1067_1[i][4] ][ unit1067_1[i][5] ] >0);
		X_contra = ( LargeX[1067][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1067_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1067][0]=0; L[1067][1]=1;}
			satisfiable[1067][1]=satisfiable[1067][1] & ((x[1067] ^ 1) | (x[ unit1067_1[i][0] ] ^ unit1067_1[i][1]) |(x[ unit1067_1[i][2] ] ^ unit1067_1[i][3]));
			}
		if(X_contra>0) L[1067][1]=2;
		}
	//Check all rules of unit[1068][0]
	L[1068][0] = LargeX[1068][1]>0 ? 1 : 0;
	satisfiable[1068][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1068_0[i][0] ][ unit1068_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1068_0[i][2] ][ unit1068_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1068_0[i][4] ][ unit1068_0[i][5] ] >0);
		X_contra = ( LargeX[1068][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1068_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1068][1]=0; L[1068][0]=1;}
			satisfiable[1068][0]=satisfiable[1068][0] & ((x[1068] ^ 0) | (x[ unit1068_0[i][0] ] ^ unit1068_0[i][1]) |(x[ unit1068_0[i][2] ] ^ unit1068_0[i][3]));
			}
		if(X_contra>0) L[1068][0]=2;
		}
	//Check all rules of unit[1068][1]
	L[1068][1] = LargeX[1068][0]>0 ? 1 : 0;
	satisfiable[1068][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1068_1[i][0] ][ unit1068_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1068_1[i][2] ][ unit1068_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1068_1[i][4] ][ unit1068_1[i][5] ] >0);
		X_contra = ( LargeX[1068][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1068_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1068][0]=0; L[1068][1]=1;}
			satisfiable[1068][1]=satisfiable[1068][1] & ((x[1068] ^ 1) | (x[ unit1068_1[i][0] ] ^ unit1068_1[i][1]) |(x[ unit1068_1[i][2] ] ^ unit1068_1[i][3]));
			}
		if(X_contra>0) L[1068][1]=2;
		}
	//Check all rules of unit[1069][0]
	L[1069][0] = LargeX[1069][1]>0 ? 1 : 0;
	satisfiable[1069][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1069_0[i][0] ][ unit1069_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1069_0[i][2] ][ unit1069_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1069_0[i][4] ][ unit1069_0[i][5] ] >0);
		X_contra = ( LargeX[1069][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1069_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1069][1]=0; L[1069][0]=1;}
			satisfiable[1069][0]=satisfiable[1069][0] & ((x[1069] ^ 0) | (x[ unit1069_0[i][0] ] ^ unit1069_0[i][1]) |(x[ unit1069_0[i][2] ] ^ unit1069_0[i][3]));
			}
		if(X_contra>0) L[1069][0]=2;
		}
	//Check all rules of unit[1069][1]
	L[1069][1] = LargeX[1069][0]>0 ? 1 : 0;
	satisfiable[1069][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1069_1[i][0] ][ unit1069_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1069_1[i][2] ][ unit1069_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1069_1[i][4] ][ unit1069_1[i][5] ] >0);
		X_contra = ( LargeX[1069][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1069_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1069][0]=0; L[1069][1]=1;}
			satisfiable[1069][1]=satisfiable[1069][1] & ((x[1069] ^ 1) | (x[ unit1069_1[i][0] ] ^ unit1069_1[i][1]) |(x[ unit1069_1[i][2] ] ^ unit1069_1[i][3]));
			}
		if(X_contra>0) L[1069][1]=2;
		}
	//Check all rules of unit[1070][0]
	L[1070][0] = LargeX[1070][1]>0 ? 1 : 0;
	satisfiable[1070][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1070_0[i][0] ][ unit1070_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1070_0[i][2] ][ unit1070_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1070_0[i][4] ][ unit1070_0[i][5] ] >0);
		X_contra = ( LargeX[1070][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1070_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1070][1]=0; L[1070][0]=1;}
			satisfiable[1070][0]=satisfiable[1070][0] & ((x[1070] ^ 0) | (x[ unit1070_0[i][0] ] ^ unit1070_0[i][1]) |(x[ unit1070_0[i][2] ] ^ unit1070_0[i][3]));
			}
		if(X_contra>0) L[1070][0]=2;
		}
	//Check all rules of unit[1070][1]
	L[1070][1] = LargeX[1070][0]>0 ? 1 : 0;
	satisfiable[1070][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1070_1[i][0] ][ unit1070_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1070_1[i][2] ][ unit1070_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1070_1[i][4] ][ unit1070_1[i][5] ] >0);
		X_contra = ( LargeX[1070][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1070_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1070][0]=0; L[1070][1]=1;}
			satisfiable[1070][1]=satisfiable[1070][1] & ((x[1070] ^ 1) | (x[ unit1070_1[i][0] ] ^ unit1070_1[i][1]) |(x[ unit1070_1[i][2] ] ^ unit1070_1[i][3]));
			}
		if(X_contra>0) L[1070][1]=2;
		}
	//Check all rules of unit[1071][0]
	L[1071][0] = LargeX[1071][1]>0 ? 1 : 0;
	satisfiable[1071][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1071_0[i][0] ][ unit1071_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1071_0[i][2] ][ unit1071_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1071_0[i][4] ][ unit1071_0[i][5] ] >0);
		X_contra = ( LargeX[1071][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1071_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1071][1]=0; L[1071][0]=1;}
			satisfiable[1071][0]=satisfiable[1071][0] & ((x[1071] ^ 0) | (x[ unit1071_0[i][0] ] ^ unit1071_0[i][1]) |(x[ unit1071_0[i][2] ] ^ unit1071_0[i][3]));
			}
		if(X_contra>0) L[1071][0]=2;
		}
	//Check all rules of unit[1071][1]
	L[1071][1] = LargeX[1071][0]>0 ? 1 : 0;
	satisfiable[1071][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1071_1[i][0] ][ unit1071_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1071_1[i][2] ][ unit1071_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1071_1[i][4] ][ unit1071_1[i][5] ] >0);
		X_contra = ( LargeX[1071][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1071_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1071][0]=0; L[1071][1]=1;}
			satisfiable[1071][1]=satisfiable[1071][1] & ((x[1071] ^ 1) | (x[ unit1071_1[i][0] ] ^ unit1071_1[i][1]) |(x[ unit1071_1[i][2] ] ^ unit1071_1[i][3]));
			}
		if(X_contra>0) L[1071][1]=2;
		}
	//Check all rules of unit[1072][0]
	L[1072][0] = LargeX[1072][1]>0 ? 1 : 0;
	satisfiable[1072][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1072_0[i][0] ][ unit1072_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1072_0[i][2] ][ unit1072_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1072_0[i][4] ][ unit1072_0[i][5] ] >0);
		X_contra = ( LargeX[1072][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1072_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1072][1]=0; L[1072][0]=1;}
			satisfiable[1072][0]=satisfiable[1072][0] & ((x[1072] ^ 0) | (x[ unit1072_0[i][0] ] ^ unit1072_0[i][1]) |(x[ unit1072_0[i][2] ] ^ unit1072_0[i][3]));
			}
		if(X_contra>0) L[1072][0]=2;
		}
	//Check all rules of unit[1072][1]
	L[1072][1] = LargeX[1072][0]>0 ? 1 : 0;
	satisfiable[1072][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1072_1[i][0] ][ unit1072_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1072_1[i][2] ][ unit1072_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1072_1[i][4] ][ unit1072_1[i][5] ] >0);
		X_contra = ( LargeX[1072][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1072_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1072][0]=0; L[1072][1]=1;}
			satisfiable[1072][1]=satisfiable[1072][1] & ((x[1072] ^ 1) | (x[ unit1072_1[i][0] ] ^ unit1072_1[i][1]) |(x[ unit1072_1[i][2] ] ^ unit1072_1[i][3]));
			}
		if(X_contra>0) L[1072][1]=2;
		}
	//Check all rules of unit[1073][0]
	L[1073][0] = LargeX[1073][1]>0 ? 1 : 0;
	satisfiable[1073][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1073_0[i][0] ][ unit1073_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1073_0[i][2] ][ unit1073_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1073_0[i][4] ][ unit1073_0[i][5] ] >0);
		X_contra = ( LargeX[1073][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1073_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1073][1]=0; L[1073][0]=1;}
			satisfiable[1073][0]=satisfiable[1073][0] & ((x[1073] ^ 0) | (x[ unit1073_0[i][0] ] ^ unit1073_0[i][1]) |(x[ unit1073_0[i][2] ] ^ unit1073_0[i][3]));
			}
		if(X_contra>0) L[1073][0]=2;
		}
	//Check all rules of unit[1073][1]
	L[1073][1] = LargeX[1073][0]>0 ? 1 : 0;
	satisfiable[1073][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1073_1[i][0] ][ unit1073_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1073_1[i][2] ][ unit1073_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1073_1[i][4] ][ unit1073_1[i][5] ] >0);
		X_contra = ( LargeX[1073][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1073_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1073][0]=0; L[1073][1]=1;}
			satisfiable[1073][1]=satisfiable[1073][1] & ((x[1073] ^ 1) | (x[ unit1073_1[i][0] ] ^ unit1073_1[i][1]) |(x[ unit1073_1[i][2] ] ^ unit1073_1[i][3]));
			}
		if(X_contra>0) L[1073][1]=2;
		}
	//Check all rules of unit[1074][0]
	L[1074][0] = LargeX[1074][1]>0 ? 1 : 0;
	satisfiable[1074][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1074_0[i][0] ][ unit1074_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1074_0[i][2] ][ unit1074_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1074_0[i][4] ][ unit1074_0[i][5] ] >0);
		X_contra = ( LargeX[1074][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1074_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1074][1]=0; L[1074][0]=1;}
			satisfiable[1074][0]=satisfiable[1074][0] & ((x[1074] ^ 0) | (x[ unit1074_0[i][0] ] ^ unit1074_0[i][1]) |(x[ unit1074_0[i][2] ] ^ unit1074_0[i][3]));
			}
		if(X_contra>0) L[1074][0]=2;
		}
	//Check all rules of unit[1074][1]
	L[1074][1] = LargeX[1074][0]>0 ? 1 : 0;
	satisfiable[1074][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1074_1[i][0] ][ unit1074_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1074_1[i][2] ][ unit1074_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1074_1[i][4] ][ unit1074_1[i][5] ] >0);
		X_contra = ( LargeX[1074][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1074_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1074][0]=0; L[1074][1]=1;}
			satisfiable[1074][1]=satisfiable[1074][1] & ((x[1074] ^ 1) | (x[ unit1074_1[i][0] ] ^ unit1074_1[i][1]) |(x[ unit1074_1[i][2] ] ^ unit1074_1[i][3]));
			}
		if(X_contra>0) L[1074][1]=2;
		}
	//Check all rules of unit[1075][0]
	L[1075][0] = LargeX[1075][1]>0 ? 1 : 0;
	satisfiable[1075][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1075_0[i][0] ][ unit1075_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1075_0[i][2] ][ unit1075_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1075_0[i][4] ][ unit1075_0[i][5] ] >0);
		X_contra = ( LargeX[1075][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1075_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1075][1]=0; L[1075][0]=1;}
			satisfiable[1075][0]=satisfiable[1075][0] & ((x[1075] ^ 0) | (x[ unit1075_0[i][0] ] ^ unit1075_0[i][1]) |(x[ unit1075_0[i][2] ] ^ unit1075_0[i][3]));
			}
		if(X_contra>0) L[1075][0]=2;
		}
	//Check all rules of unit[1075][1]
	L[1075][1] = LargeX[1075][0]>0 ? 1 : 0;
	satisfiable[1075][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1075_1[i][0] ][ unit1075_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1075_1[i][2] ][ unit1075_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1075_1[i][4] ][ unit1075_1[i][5] ] >0);
		X_contra = ( LargeX[1075][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1075_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1075][0]=0; L[1075][1]=1;}
			satisfiable[1075][1]=satisfiable[1075][1] & ((x[1075] ^ 1) | (x[ unit1075_1[i][0] ] ^ unit1075_1[i][1]) |(x[ unit1075_1[i][2] ] ^ unit1075_1[i][3]));
			}
		if(X_contra>0) L[1075][1]=2;
		}
	//Check all rules of unit[1076][0]
	L[1076][0] = LargeX[1076][1]>0 ? 1 : 0;
	satisfiable[1076][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1076_0[i][0] ][ unit1076_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1076_0[i][2] ][ unit1076_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1076_0[i][4] ][ unit1076_0[i][5] ] >0);
		X_contra = ( LargeX[1076][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1076_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1076][1]=0; L[1076][0]=1;}
			satisfiable[1076][0]=satisfiable[1076][0] & ((x[1076] ^ 0) | (x[ unit1076_0[i][0] ] ^ unit1076_0[i][1]) |(x[ unit1076_0[i][2] ] ^ unit1076_0[i][3]));
			}
		if(X_contra>0) L[1076][0]=2;
		}
	//Check all rules of unit[1076][1]
	L[1076][1] = LargeX[1076][0]>0 ? 1 : 0;
	satisfiable[1076][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1076_1[i][0] ][ unit1076_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1076_1[i][2] ][ unit1076_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1076_1[i][4] ][ unit1076_1[i][5] ] >0);
		X_contra = ( LargeX[1076][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1076_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1076][0]=0; L[1076][1]=1;}
			satisfiable[1076][1]=satisfiable[1076][1] & ((x[1076] ^ 1) | (x[ unit1076_1[i][0] ] ^ unit1076_1[i][1]) |(x[ unit1076_1[i][2] ] ^ unit1076_1[i][3]));
			}
		if(X_contra>0) L[1076][1]=2;
		}
	//Check all rules of unit[1077][0]
	L[1077][0] = LargeX[1077][1]>0 ? 1 : 0;
	satisfiable[1077][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1077_0[i][0] ][ unit1077_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1077_0[i][2] ][ unit1077_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1077_0[i][4] ][ unit1077_0[i][5] ] >0);
		X_contra = ( LargeX[1077][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1077_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1077][1]=0; L[1077][0]=1;}
			satisfiable[1077][0]=satisfiable[1077][0] & ((x[1077] ^ 0) | (x[ unit1077_0[i][0] ] ^ unit1077_0[i][1]) |(x[ unit1077_0[i][2] ] ^ unit1077_0[i][3]));
			}
		if(X_contra>0) L[1077][0]=2;
		}
	//Check all rules of unit[1077][1]
	L[1077][1] = LargeX[1077][0]>0 ? 1 : 0;
	satisfiable[1077][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1077_1[i][0] ][ unit1077_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1077_1[i][2] ][ unit1077_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1077_1[i][4] ][ unit1077_1[i][5] ] >0);
		X_contra = ( LargeX[1077][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1077_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1077][0]=0; L[1077][1]=1;}
			satisfiable[1077][1]=satisfiable[1077][1] & ((x[1077] ^ 1) | (x[ unit1077_1[i][0] ] ^ unit1077_1[i][1]) |(x[ unit1077_1[i][2] ] ^ unit1077_1[i][3]));
			}
		if(X_contra>0) L[1077][1]=2;
		}
	//Check all rules of unit[1078][0]
	L[1078][0] = LargeX[1078][1]>0 ? 1 : 0;
	satisfiable[1078][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1078_0[i][0] ][ unit1078_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1078_0[i][2] ][ unit1078_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1078_0[i][4] ][ unit1078_0[i][5] ] >0);
		X_contra = ( LargeX[1078][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1078_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1078][1]=0; L[1078][0]=1;}
			satisfiable[1078][0]=satisfiable[1078][0] & ((x[1078] ^ 0) | (x[ unit1078_0[i][0] ] ^ unit1078_0[i][1]) |(x[ unit1078_0[i][2] ] ^ unit1078_0[i][3]));
			}
		if(X_contra>0) L[1078][0]=2;
		}
	//Check all rules of unit[1078][1]
	L[1078][1] = LargeX[1078][0]>0 ? 1 : 0;
	satisfiable[1078][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1078_1[i][0] ][ unit1078_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1078_1[i][2] ][ unit1078_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1078_1[i][4] ][ unit1078_1[i][5] ] >0);
		X_contra = ( LargeX[1078][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1078_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1078][0]=0; L[1078][1]=1;}
			satisfiable[1078][1]=satisfiable[1078][1] & ((x[1078] ^ 1) | (x[ unit1078_1[i][0] ] ^ unit1078_1[i][1]) |(x[ unit1078_1[i][2] ] ^ unit1078_1[i][3]));
			}
		if(X_contra>0) L[1078][1]=2;
		}
	//Check all rules of unit[1079][0]
	L[1079][0] = LargeX[1079][1]>0 ? 1 : 0;
	satisfiable[1079][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1079_0[i][0] ][ unit1079_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1079_0[i][2] ][ unit1079_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1079_0[i][4] ][ unit1079_0[i][5] ] >0);
		X_contra = ( LargeX[1079][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1079_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1079][1]=0; L[1079][0]=1;}
			satisfiable[1079][0]=satisfiable[1079][0] & ((x[1079] ^ 0) | (x[ unit1079_0[i][0] ] ^ unit1079_0[i][1]) |(x[ unit1079_0[i][2] ] ^ unit1079_0[i][3]));
			}
		if(X_contra>0) L[1079][0]=2;
		}
	//Check all rules of unit[1079][1]
	L[1079][1] = LargeX[1079][0]>0 ? 1 : 0;
	satisfiable[1079][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1079_1[i][0] ][ unit1079_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1079_1[i][2] ][ unit1079_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1079_1[i][4] ][ unit1079_1[i][5] ] >0);
		X_contra = ( LargeX[1079][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1079_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1079][0]=0; L[1079][1]=1;}
			satisfiable[1079][1]=satisfiable[1079][1] & ((x[1079] ^ 1) | (x[ unit1079_1[i][0] ] ^ unit1079_1[i][1]) |(x[ unit1079_1[i][2] ] ^ unit1079_1[i][3]));
			}
		if(X_contra>0) L[1079][1]=2;
		}
	//Check all rules of unit[1080][0]
	L[1080][0] = LargeX[1080][1]>0 ? 1 : 0;
	satisfiable[1080][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1080_0[i][0] ][ unit1080_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1080_0[i][2] ][ unit1080_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1080_0[i][4] ][ unit1080_0[i][5] ] >0);
		X_contra = ( LargeX[1080][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1080_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1080][1]=0; L[1080][0]=1;}
			satisfiable[1080][0]=satisfiable[1080][0] & ((x[1080] ^ 0) | (x[ unit1080_0[i][0] ] ^ unit1080_0[i][1]) |(x[ unit1080_0[i][2] ] ^ unit1080_0[i][3]));
			}
		if(X_contra>0) L[1080][0]=2;
		}
	//Check all rules of unit[1080][1]
	L[1080][1] = LargeX[1080][0]>0 ? 1 : 0;
	satisfiable[1080][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1080_1[i][0] ][ unit1080_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1080_1[i][2] ][ unit1080_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1080_1[i][4] ][ unit1080_1[i][5] ] >0);
		X_contra = ( LargeX[1080][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1080_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1080][0]=0; L[1080][1]=1;}
			satisfiable[1080][1]=satisfiable[1080][1] & ((x[1080] ^ 1) | (x[ unit1080_1[i][0] ] ^ unit1080_1[i][1]) |(x[ unit1080_1[i][2] ] ^ unit1080_1[i][3]));
			}
		if(X_contra>0) L[1080][1]=2;
		}
	//Check all rules of unit[1081][0]
	L[1081][0] = LargeX[1081][1]>0 ? 1 : 0;
	satisfiable[1081][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1081_0[i][0] ][ unit1081_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1081_0[i][2] ][ unit1081_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1081_0[i][4] ][ unit1081_0[i][5] ] >0);
		X_contra = ( LargeX[1081][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1081_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1081][1]=0; L[1081][0]=1;}
			satisfiable[1081][0]=satisfiable[1081][0] & ((x[1081] ^ 0) | (x[ unit1081_0[i][0] ] ^ unit1081_0[i][1]) |(x[ unit1081_0[i][2] ] ^ unit1081_0[i][3]));
			}
		if(X_contra>0) L[1081][0]=2;
		}
	//Check all rules of unit[1081][1]
	L[1081][1] = LargeX[1081][0]>0 ? 1 : 0;
	satisfiable[1081][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1081_1[i][0] ][ unit1081_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1081_1[i][2] ][ unit1081_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1081_1[i][4] ][ unit1081_1[i][5] ] >0);
		X_contra = ( LargeX[1081][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1081_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1081][0]=0; L[1081][1]=1;}
			satisfiable[1081][1]=satisfiable[1081][1] & ((x[1081] ^ 1) | (x[ unit1081_1[i][0] ] ^ unit1081_1[i][1]) |(x[ unit1081_1[i][2] ] ^ unit1081_1[i][3]));
			}
		if(X_contra>0) L[1081][1]=2;
		}
	//Check all rules of unit[1082][0]
	L[1082][0] = LargeX[1082][1]>0 ? 1 : 0;
	satisfiable[1082][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1082_0[i][0] ][ unit1082_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1082_0[i][2] ][ unit1082_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1082_0[i][4] ][ unit1082_0[i][5] ] >0);
		X_contra = ( LargeX[1082][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1082_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1082][1]=0; L[1082][0]=1;}
			satisfiable[1082][0]=satisfiable[1082][0] & ((x[1082] ^ 0) | (x[ unit1082_0[i][0] ] ^ unit1082_0[i][1]) |(x[ unit1082_0[i][2] ] ^ unit1082_0[i][3]));
			}
		if(X_contra>0) L[1082][0]=2;
		}
	//Check all rules of unit[1082][1]
	L[1082][1] = LargeX[1082][0]>0 ? 1 : 0;
	satisfiable[1082][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1082_1[i][0] ][ unit1082_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1082_1[i][2] ][ unit1082_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1082_1[i][4] ][ unit1082_1[i][5] ] >0);
		X_contra = ( LargeX[1082][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1082_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1082][0]=0; L[1082][1]=1;}
			satisfiable[1082][1]=satisfiable[1082][1] & ((x[1082] ^ 1) | (x[ unit1082_1[i][0] ] ^ unit1082_1[i][1]) |(x[ unit1082_1[i][2] ] ^ unit1082_1[i][3]));
			}
		if(X_contra>0) L[1082][1]=2;
		}
	//Check all rules of unit[1083][0]
	L[1083][0] = LargeX[1083][1]>0 ? 1 : 0;
	satisfiable[1083][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1083_0[i][0] ][ unit1083_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1083_0[i][2] ][ unit1083_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1083_0[i][4] ][ unit1083_0[i][5] ] >0);
		X_contra = ( LargeX[1083][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1083_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1083][1]=0; L[1083][0]=1;}
			satisfiable[1083][0]=satisfiable[1083][0] & ((x[1083] ^ 0) | (x[ unit1083_0[i][0] ] ^ unit1083_0[i][1]) |(x[ unit1083_0[i][2] ] ^ unit1083_0[i][3]));
			}
		if(X_contra>0) L[1083][0]=2;
		}
	//Check all rules of unit[1083][1]
	L[1083][1] = LargeX[1083][0]>0 ? 1 : 0;
	satisfiable[1083][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1083_1[i][0] ][ unit1083_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1083_1[i][2] ][ unit1083_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1083_1[i][4] ][ unit1083_1[i][5] ] >0);
		X_contra = ( LargeX[1083][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1083_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1083][0]=0; L[1083][1]=1;}
			satisfiable[1083][1]=satisfiable[1083][1] & ((x[1083] ^ 1) | (x[ unit1083_1[i][0] ] ^ unit1083_1[i][1]) |(x[ unit1083_1[i][2] ] ^ unit1083_1[i][3]));
			}
		if(X_contra>0) L[1083][1]=2;
		}
	//Check all rules of unit[1084][0]
	L[1084][0] = LargeX[1084][1]>0 ? 1 : 0;
	satisfiable[1084][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1084_0[i][0] ][ unit1084_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1084_0[i][2] ][ unit1084_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1084_0[i][4] ][ unit1084_0[i][5] ] >0);
		X_contra = ( LargeX[1084][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1084_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1084][1]=0; L[1084][0]=1;}
			satisfiable[1084][0]=satisfiable[1084][0] & ((x[1084] ^ 0) | (x[ unit1084_0[i][0] ] ^ unit1084_0[i][1]) |(x[ unit1084_0[i][2] ] ^ unit1084_0[i][3]));
			}
		if(X_contra>0) L[1084][0]=2;
		}
	//Check all rules of unit[1084][1]
	L[1084][1] = LargeX[1084][0]>0 ? 1 : 0;
	satisfiable[1084][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1084_1[i][0] ][ unit1084_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1084_1[i][2] ][ unit1084_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1084_1[i][4] ][ unit1084_1[i][5] ] >0);
		X_contra = ( LargeX[1084][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1084_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1084][0]=0; L[1084][1]=1;}
			satisfiable[1084][1]=satisfiable[1084][1] & ((x[1084] ^ 1) | (x[ unit1084_1[i][0] ] ^ unit1084_1[i][1]) |(x[ unit1084_1[i][2] ] ^ unit1084_1[i][3]));
			}
		if(X_contra>0) L[1084][1]=2;
		}
	//Check all rules of unit[1085][0]
	L[1085][0] = LargeX[1085][1]>0 ? 1 : 0;
	satisfiable[1085][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1085_0[i][0] ][ unit1085_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1085_0[i][2] ][ unit1085_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1085_0[i][4] ][ unit1085_0[i][5] ] >0);
		X_contra = ( LargeX[1085][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1085_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1085][1]=0; L[1085][0]=1;}
			satisfiable[1085][0]=satisfiable[1085][0] & ((x[1085] ^ 0) | (x[ unit1085_0[i][0] ] ^ unit1085_0[i][1]) |(x[ unit1085_0[i][2] ] ^ unit1085_0[i][3]));
			}
		if(X_contra>0) L[1085][0]=2;
		}
	//Check all rules of unit[1085][1]
	L[1085][1] = LargeX[1085][0]>0 ? 1 : 0;
	satisfiable[1085][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1085_1[i][0] ][ unit1085_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1085_1[i][2] ][ unit1085_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1085_1[i][4] ][ unit1085_1[i][5] ] >0);
		X_contra = ( LargeX[1085][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1085_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1085][0]=0; L[1085][1]=1;}
			satisfiable[1085][1]=satisfiable[1085][1] & ((x[1085] ^ 1) | (x[ unit1085_1[i][0] ] ^ unit1085_1[i][1]) |(x[ unit1085_1[i][2] ] ^ unit1085_1[i][3]));
			}
		if(X_contra>0) L[1085][1]=2;
		}
	//Check all rules of unit[1086][0]
	L[1086][0] = LargeX[1086][1]>0 ? 1 : 0;
	satisfiable[1086][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1086_0[i][0] ][ unit1086_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1086_0[i][2] ][ unit1086_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1086_0[i][4] ][ unit1086_0[i][5] ] >0);
		X_contra = ( LargeX[1086][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1086_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1086][1]=0; L[1086][0]=1;}
			satisfiable[1086][0]=satisfiable[1086][0] & ((x[1086] ^ 0) | (x[ unit1086_0[i][0] ] ^ unit1086_0[i][1]) |(x[ unit1086_0[i][2] ] ^ unit1086_0[i][3]));
			}
		if(X_contra>0) L[1086][0]=2;
		}
	//Check all rules of unit[1086][1]
	L[1086][1] = LargeX[1086][0]>0 ? 1 : 0;
	satisfiable[1086][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1086_1[i][0] ][ unit1086_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1086_1[i][2] ][ unit1086_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1086_1[i][4] ][ unit1086_1[i][5] ] >0);
		X_contra = ( LargeX[1086][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1086_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1086][0]=0; L[1086][1]=1;}
			satisfiable[1086][1]=satisfiable[1086][1] & ((x[1086] ^ 1) | (x[ unit1086_1[i][0] ] ^ unit1086_1[i][1]) |(x[ unit1086_1[i][2] ] ^ unit1086_1[i][3]));
			}
		if(X_contra>0) L[1086][1]=2;
		}
	//Check all rules of unit[1087][0]
	L[1087][0] = LargeX[1087][1]>0 ? 1 : 0;
	satisfiable[1087][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1087_0[i][0] ][ unit1087_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1087_0[i][2] ][ unit1087_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1087_0[i][4] ][ unit1087_0[i][5] ] >0);
		X_contra = ( LargeX[1087][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1087_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1087][1]=0; L[1087][0]=1;}
			satisfiable[1087][0]=satisfiable[1087][0] & ((x[1087] ^ 0) | (x[ unit1087_0[i][0] ] ^ unit1087_0[i][1]) |(x[ unit1087_0[i][2] ] ^ unit1087_0[i][3]));
			}
		if(X_contra>0) L[1087][0]=2;
		}
	//Check all rules of unit[1087][1]
	L[1087][1] = LargeX[1087][0]>0 ? 1 : 0;
	satisfiable[1087][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1087_1[i][0] ][ unit1087_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1087_1[i][2] ][ unit1087_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1087_1[i][4] ][ unit1087_1[i][5] ] >0);
		X_contra = ( LargeX[1087][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1087_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1087][0]=0; L[1087][1]=1;}
			satisfiable[1087][1]=satisfiable[1087][1] & ((x[1087] ^ 1) | (x[ unit1087_1[i][0] ] ^ unit1087_1[i][1]) |(x[ unit1087_1[i][2] ] ^ unit1087_1[i][3]));
			}
		if(X_contra>0) L[1087][1]=2;
		}
	//Check all rules of unit[1088][0]
	L[1088][0] = LargeX[1088][1]>0 ? 1 : 0;
	satisfiable[1088][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1088_0[i][0] ][ unit1088_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1088_0[i][2] ][ unit1088_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1088_0[i][4] ][ unit1088_0[i][5] ] >0);
		X_contra = ( LargeX[1088][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1088_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1088][1]=0; L[1088][0]=1;}
			satisfiable[1088][0]=satisfiable[1088][0] & ((x[1088] ^ 0) | (x[ unit1088_0[i][0] ] ^ unit1088_0[i][1]) |(x[ unit1088_0[i][2] ] ^ unit1088_0[i][3]));
			}
		if(X_contra>0) L[1088][0]=2;
		}
	//Check all rules of unit[1088][1]
	L[1088][1] = LargeX[1088][0]>0 ? 1 : 0;
	satisfiable[1088][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1088_1[i][0] ][ unit1088_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1088_1[i][2] ][ unit1088_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1088_1[i][4] ][ unit1088_1[i][5] ] >0);
		X_contra = ( LargeX[1088][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1088_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1088][0]=0; L[1088][1]=1;}
			satisfiable[1088][1]=satisfiable[1088][1] & ((x[1088] ^ 1) | (x[ unit1088_1[i][0] ] ^ unit1088_1[i][1]) |(x[ unit1088_1[i][2] ] ^ unit1088_1[i][3]));
			}
		if(X_contra>0) L[1088][1]=2;
		}
	//Check all rules of unit[1089][0]
	L[1089][0] = LargeX[1089][1]>0 ? 1 : 0;
	satisfiable[1089][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1089_0[i][0] ][ unit1089_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1089_0[i][2] ][ unit1089_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1089_0[i][4] ][ unit1089_0[i][5] ] >0);
		X_contra = ( LargeX[1089][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1089_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1089][1]=0; L[1089][0]=1;}
			satisfiable[1089][0]=satisfiable[1089][0] & ((x[1089] ^ 0) | (x[ unit1089_0[i][0] ] ^ unit1089_0[i][1]) |(x[ unit1089_0[i][2] ] ^ unit1089_0[i][3]));
			}
		if(X_contra>0) L[1089][0]=2;
		}
	//Check all rules of unit[1089][1]
	L[1089][1] = LargeX[1089][0]>0 ? 1 : 0;
	satisfiable[1089][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1089_1[i][0] ][ unit1089_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1089_1[i][2] ][ unit1089_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1089_1[i][4] ][ unit1089_1[i][5] ] >0);
		X_contra = ( LargeX[1089][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1089_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1089][0]=0; L[1089][1]=1;}
			satisfiable[1089][1]=satisfiable[1089][1] & ((x[1089] ^ 1) | (x[ unit1089_1[i][0] ] ^ unit1089_1[i][1]) |(x[ unit1089_1[i][2] ] ^ unit1089_1[i][3]));
			}
		if(X_contra>0) L[1089][1]=2;
		}
	//Check all rules of unit[1090][0]
	L[1090][0] = LargeX[1090][1]>0 ? 1 : 0;
	satisfiable[1090][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1090_0[i][0] ][ unit1090_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1090_0[i][2] ][ unit1090_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1090_0[i][4] ][ unit1090_0[i][5] ] >0);
		X_contra = ( LargeX[1090][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1090_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1090][1]=0; L[1090][0]=1;}
			satisfiable[1090][0]=satisfiable[1090][0] & ((x[1090] ^ 0) | (x[ unit1090_0[i][0] ] ^ unit1090_0[i][1]) |(x[ unit1090_0[i][2] ] ^ unit1090_0[i][3]));
			}
		if(X_contra>0) L[1090][0]=2;
		}
	//Check all rules of unit[1090][1]
	L[1090][1] = LargeX[1090][0]>0 ? 1 : 0;
	satisfiable[1090][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1090_1[i][0] ][ unit1090_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1090_1[i][2] ][ unit1090_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1090_1[i][4] ][ unit1090_1[i][5] ] >0);
		X_contra = ( LargeX[1090][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1090_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1090][0]=0; L[1090][1]=1;}
			satisfiable[1090][1]=satisfiable[1090][1] & ((x[1090] ^ 1) | (x[ unit1090_1[i][0] ] ^ unit1090_1[i][1]) |(x[ unit1090_1[i][2] ] ^ unit1090_1[i][3]));
			}
		if(X_contra>0) L[1090][1]=2;
		}
	//Check all rules of unit[1091][0]
	L[1091][0] = LargeX[1091][1]>0 ? 1 : 0;
	satisfiable[1091][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1091_0[i][0] ][ unit1091_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1091_0[i][2] ][ unit1091_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1091_0[i][4] ][ unit1091_0[i][5] ] >0);
		X_contra = ( LargeX[1091][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1091_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1091][1]=0; L[1091][0]=1;}
			satisfiable[1091][0]=satisfiable[1091][0] & ((x[1091] ^ 0) | (x[ unit1091_0[i][0] ] ^ unit1091_0[i][1]) |(x[ unit1091_0[i][2] ] ^ unit1091_0[i][3]));
			}
		if(X_contra>0) L[1091][0]=2;
		}
	//Check all rules of unit[1091][1]
	L[1091][1] = LargeX[1091][0]>0 ? 1 : 0;
	satisfiable[1091][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1091_1[i][0] ][ unit1091_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1091_1[i][2] ][ unit1091_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1091_1[i][4] ][ unit1091_1[i][5] ] >0);
		X_contra = ( LargeX[1091][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1091_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1091][0]=0; L[1091][1]=1;}
			satisfiable[1091][1]=satisfiable[1091][1] & ((x[1091] ^ 1) | (x[ unit1091_1[i][0] ] ^ unit1091_1[i][1]) |(x[ unit1091_1[i][2] ] ^ unit1091_1[i][3]));
			}
		if(X_contra>0) L[1091][1]=2;
		}
	//Check all rules of unit[1092][0]
	L[1092][0] = LargeX[1092][1]>0 ? 1 : 0;
	satisfiable[1092][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1092_0[i][0] ][ unit1092_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1092_0[i][2] ][ unit1092_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1092_0[i][4] ][ unit1092_0[i][5] ] >0);
		X_contra = ( LargeX[1092][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1092_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1092][1]=0; L[1092][0]=1;}
			satisfiable[1092][0]=satisfiable[1092][0] & ((x[1092] ^ 0) | (x[ unit1092_0[i][0] ] ^ unit1092_0[i][1]) |(x[ unit1092_0[i][2] ] ^ unit1092_0[i][3]));
			}
		if(X_contra>0) L[1092][0]=2;
		}
	//Check all rules of unit[1092][1]
	L[1092][1] = LargeX[1092][0]>0 ? 1 : 0;
	satisfiable[1092][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1092_1[i][0] ][ unit1092_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1092_1[i][2] ][ unit1092_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1092_1[i][4] ][ unit1092_1[i][5] ] >0);
		X_contra = ( LargeX[1092][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1092_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1092][0]=0; L[1092][1]=1;}
			satisfiable[1092][1]=satisfiable[1092][1] & ((x[1092] ^ 1) | (x[ unit1092_1[i][0] ] ^ unit1092_1[i][1]) |(x[ unit1092_1[i][2] ] ^ unit1092_1[i][3]));
			}
		if(X_contra>0) L[1092][1]=2;
		}
	//Check all rules of unit[1093][0]
	L[1093][0] = LargeX[1093][1]>0 ? 1 : 0;
	satisfiable[1093][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1093_0[i][0] ][ unit1093_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1093_0[i][2] ][ unit1093_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1093_0[i][4] ][ unit1093_0[i][5] ] >0);
		X_contra = ( LargeX[1093][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1093_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1093][1]=0; L[1093][0]=1;}
			satisfiable[1093][0]=satisfiable[1093][0] & ((x[1093] ^ 0) | (x[ unit1093_0[i][0] ] ^ unit1093_0[i][1]) |(x[ unit1093_0[i][2] ] ^ unit1093_0[i][3]));
			}
		if(X_contra>0) L[1093][0]=2;
		}
	//Check all rules of unit[1093][1]
	L[1093][1] = LargeX[1093][0]>0 ? 1 : 0;
	satisfiable[1093][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1093_1[i][0] ][ unit1093_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1093_1[i][2] ][ unit1093_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1093_1[i][4] ][ unit1093_1[i][5] ] >0);
		X_contra = ( LargeX[1093][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1093_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1093][0]=0; L[1093][1]=1;}
			satisfiable[1093][1]=satisfiable[1093][1] & ((x[1093] ^ 1) | (x[ unit1093_1[i][0] ] ^ unit1093_1[i][1]) |(x[ unit1093_1[i][2] ] ^ unit1093_1[i][3]));
			}
		if(X_contra>0) L[1093][1]=2;
		}
	//Check all rules of unit[1094][0]
	L[1094][0] = LargeX[1094][1]>0 ? 1 : 0;
	satisfiable[1094][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1094_0[i][0] ][ unit1094_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1094_0[i][2] ][ unit1094_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1094_0[i][4] ][ unit1094_0[i][5] ] >0);
		X_contra = ( LargeX[1094][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1094_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1094][1]=0; L[1094][0]=1;}
			satisfiable[1094][0]=satisfiable[1094][0] & ((x[1094] ^ 0) | (x[ unit1094_0[i][0] ] ^ unit1094_0[i][1]) |(x[ unit1094_0[i][2] ] ^ unit1094_0[i][3]));
			}
		if(X_contra>0) L[1094][0]=2;
		}
	//Check all rules of unit[1094][1]
	L[1094][1] = LargeX[1094][0]>0 ? 1 : 0;
	satisfiable[1094][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1094_1[i][0] ][ unit1094_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1094_1[i][2] ][ unit1094_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1094_1[i][4] ][ unit1094_1[i][5] ] >0);
		X_contra = ( LargeX[1094][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1094_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1094][0]=0; L[1094][1]=1;}
			satisfiable[1094][1]=satisfiable[1094][1] & ((x[1094] ^ 1) | (x[ unit1094_1[i][0] ] ^ unit1094_1[i][1]) |(x[ unit1094_1[i][2] ] ^ unit1094_1[i][3]));
			}
		if(X_contra>0) L[1094][1]=2;
		}
	//Check all rules of unit[1095][0]
	L[1095][0] = LargeX[1095][1]>0 ? 1 : 0;
	satisfiable[1095][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1095_0[i][0] ][ unit1095_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1095_0[i][2] ][ unit1095_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1095_0[i][4] ][ unit1095_0[i][5] ] >0);
		X_contra = ( LargeX[1095][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1095_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1095][1]=0; L[1095][0]=1;}
			satisfiable[1095][0]=satisfiable[1095][0] & ((x[1095] ^ 0) | (x[ unit1095_0[i][0] ] ^ unit1095_0[i][1]) |(x[ unit1095_0[i][2] ] ^ unit1095_0[i][3]));
			}
		if(X_contra>0) L[1095][0]=2;
		}
	//Check all rules of unit[1095][1]
	L[1095][1] = LargeX[1095][0]>0 ? 1 : 0;
	satisfiable[1095][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1095_1[i][0] ][ unit1095_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1095_1[i][2] ][ unit1095_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1095_1[i][4] ][ unit1095_1[i][5] ] >0);
		X_contra = ( LargeX[1095][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1095_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1095][0]=0; L[1095][1]=1;}
			satisfiable[1095][1]=satisfiable[1095][1] & ((x[1095] ^ 1) | (x[ unit1095_1[i][0] ] ^ unit1095_1[i][1]) |(x[ unit1095_1[i][2] ] ^ unit1095_1[i][3]));
			}
		if(X_contra>0) L[1095][1]=2;
		}
	//Check all rules of unit[1096][0]
	L[1096][0] = LargeX[1096][1]>0 ? 1 : 0;
	satisfiable[1096][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1096_0[i][0] ][ unit1096_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1096_0[i][2] ][ unit1096_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1096_0[i][4] ][ unit1096_0[i][5] ] >0);
		X_contra = ( LargeX[1096][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1096_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1096][1]=0; L[1096][0]=1;}
			satisfiable[1096][0]=satisfiable[1096][0] & ((x[1096] ^ 0) | (x[ unit1096_0[i][0] ] ^ unit1096_0[i][1]) |(x[ unit1096_0[i][2] ] ^ unit1096_0[i][3]));
			}
		if(X_contra>0) L[1096][0]=2;
		}
	//Check all rules of unit[1096][1]
	L[1096][1] = LargeX[1096][0]>0 ? 1 : 0;
	satisfiable[1096][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1096_1[i][0] ][ unit1096_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1096_1[i][2] ][ unit1096_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1096_1[i][4] ][ unit1096_1[i][5] ] >0);
		X_contra = ( LargeX[1096][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1096_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1096][0]=0; L[1096][1]=1;}
			satisfiable[1096][1]=satisfiable[1096][1] & ((x[1096] ^ 1) | (x[ unit1096_1[i][0] ] ^ unit1096_1[i][1]) |(x[ unit1096_1[i][2] ] ^ unit1096_1[i][3]));
			}
		if(X_contra>0) L[1096][1]=2;
		}
	//Check all rules of unit[1097][0]
	L[1097][0] = LargeX[1097][1]>0 ? 1 : 0;
	satisfiable[1097][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1097_0[i][0] ][ unit1097_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1097_0[i][2] ][ unit1097_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1097_0[i][4] ][ unit1097_0[i][5] ] >0);
		X_contra = ( LargeX[1097][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1097_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1097][1]=0; L[1097][0]=1;}
			satisfiable[1097][0]=satisfiable[1097][0] & ((x[1097] ^ 0) | (x[ unit1097_0[i][0] ] ^ unit1097_0[i][1]) |(x[ unit1097_0[i][2] ] ^ unit1097_0[i][3]));
			}
		if(X_contra>0) L[1097][0]=2;
		}
	//Check all rules of unit[1097][1]
	L[1097][1] = LargeX[1097][0]>0 ? 1 : 0;
	satisfiable[1097][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1097_1[i][0] ][ unit1097_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1097_1[i][2] ][ unit1097_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1097_1[i][4] ][ unit1097_1[i][5] ] >0);
		X_contra = ( LargeX[1097][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1097_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1097][0]=0; L[1097][1]=1;}
			satisfiable[1097][1]=satisfiable[1097][1] & ((x[1097] ^ 1) | (x[ unit1097_1[i][0] ] ^ unit1097_1[i][1]) |(x[ unit1097_1[i][2] ] ^ unit1097_1[i][3]));
			}
		if(X_contra>0) L[1097][1]=2;
		}
	//Check all rules of unit[1098][0]
	L[1098][0] = LargeX[1098][1]>0 ? 1 : 0;
	satisfiable[1098][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1098_0[i][0] ][ unit1098_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1098_0[i][2] ][ unit1098_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1098_0[i][4] ][ unit1098_0[i][5] ] >0);
		X_contra = ( LargeX[1098][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1098_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1098][1]=0; L[1098][0]=1;}
			satisfiable[1098][0]=satisfiable[1098][0] & ((x[1098] ^ 0) | (x[ unit1098_0[i][0] ] ^ unit1098_0[i][1]) |(x[ unit1098_0[i][2] ] ^ unit1098_0[i][3]));
			}
		if(X_contra>0) L[1098][0]=2;
		}
	//Check all rules of unit[1098][1]
	L[1098][1] = LargeX[1098][0]>0 ? 1 : 0;
	satisfiable[1098][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1098_1[i][0] ][ unit1098_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1098_1[i][2] ][ unit1098_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1098_1[i][4] ][ unit1098_1[i][5] ] >0);
		X_contra = ( LargeX[1098][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1098_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1098][0]=0; L[1098][1]=1;}
			satisfiable[1098][1]=satisfiable[1098][1] & ((x[1098] ^ 1) | (x[ unit1098_1[i][0] ] ^ unit1098_1[i][1]) |(x[ unit1098_1[i][2] ] ^ unit1098_1[i][3]));
			}
		if(X_contra>0) L[1098][1]=2;
		}
	//Check all rules of unit[1099][0]
	L[1099][0] = LargeX[1099][1]>0 ? 1 : 0;
	satisfiable[1099][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1099_0[i][0] ][ unit1099_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1099_0[i][2] ][ unit1099_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1099_0[i][4] ][ unit1099_0[i][5] ] >0);
		X_contra = ( LargeX[1099][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1099_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1099][1]=0; L[1099][0]=1;}
			satisfiable[1099][0]=satisfiable[1099][0] & ((x[1099] ^ 0) | (x[ unit1099_0[i][0] ] ^ unit1099_0[i][1]) |(x[ unit1099_0[i][2] ] ^ unit1099_0[i][3]));
			}
		if(X_contra>0) L[1099][0]=2;
		}
	//Check all rules of unit[1099][1]
	L[1099][1] = LargeX[1099][0]>0 ? 1 : 0;
	satisfiable[1099][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1099_1[i][0] ][ unit1099_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1099_1[i][2] ][ unit1099_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1099_1[i][4] ][ unit1099_1[i][5] ] >0);
		X_contra = ( LargeX[1099][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1099_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1099][0]=0; L[1099][1]=1;}
			satisfiable[1099][1]=satisfiable[1099][1] & ((x[1099] ^ 1) | (x[ unit1099_1[i][0] ] ^ unit1099_1[i][1]) |(x[ unit1099_1[i][2] ] ^ unit1099_1[i][3]));
			}
		if(X_contra>0) L[1099][1]=2;
		}
	//Check all rules of unit[1100][0]
	L[1100][0] = LargeX[1100][1]>0 ? 1 : 0;
	satisfiable[1100][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1100_0[i][0] ][ unit1100_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1100_0[i][2] ][ unit1100_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1100_0[i][4] ][ unit1100_0[i][5] ] >0);
		X_contra = ( LargeX[1100][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1100_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1100][1]=0; L[1100][0]=1;}
			satisfiable[1100][0]=satisfiable[1100][0] & ((x[1100] ^ 0) | (x[ unit1100_0[i][0] ] ^ unit1100_0[i][1]) |(x[ unit1100_0[i][2] ] ^ unit1100_0[i][3]));
			}
		if(X_contra>0) L[1100][0]=2;
		}
	//Check all rules of unit[1100][1]
	L[1100][1] = LargeX[1100][0]>0 ? 1 : 0;
	satisfiable[1100][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1100_1[i][0] ][ unit1100_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1100_1[i][2] ][ unit1100_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1100_1[i][4] ][ unit1100_1[i][5] ] >0);
		X_contra = ( LargeX[1100][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1100_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1100][0]=0; L[1100][1]=1;}
			satisfiable[1100][1]=satisfiable[1100][1] & ((x[1100] ^ 1) | (x[ unit1100_1[i][0] ] ^ unit1100_1[i][1]) |(x[ unit1100_1[i][2] ] ^ unit1100_1[i][3]));
			}
		if(X_contra>0) L[1100][1]=2;
		}
	//Check all rules of unit[1101][0]
	L[1101][0] = LargeX[1101][1]>0 ? 1 : 0;
	satisfiable[1101][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1101_0[i][0] ][ unit1101_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1101_0[i][2] ][ unit1101_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1101_0[i][4] ][ unit1101_0[i][5] ] >0);
		X_contra = ( LargeX[1101][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1101_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1101][1]=0; L[1101][0]=1;}
			satisfiable[1101][0]=satisfiable[1101][0] & ((x[1101] ^ 0) | (x[ unit1101_0[i][0] ] ^ unit1101_0[i][1]) |(x[ unit1101_0[i][2] ] ^ unit1101_0[i][3]));
			}
		if(X_contra>0) L[1101][0]=2;
		}
	//Check all rules of unit[1101][1]
	L[1101][1] = LargeX[1101][0]>0 ? 1 : 0;
	satisfiable[1101][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1101_1[i][0] ][ unit1101_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1101_1[i][2] ][ unit1101_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1101_1[i][4] ][ unit1101_1[i][5] ] >0);
		X_contra = ( LargeX[1101][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1101_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1101][0]=0; L[1101][1]=1;}
			satisfiable[1101][1]=satisfiable[1101][1] & ((x[1101] ^ 1) | (x[ unit1101_1[i][0] ] ^ unit1101_1[i][1]) |(x[ unit1101_1[i][2] ] ^ unit1101_1[i][3]));
			}
		if(X_contra>0) L[1101][1]=2;
		}
	//Check all rules of unit[1102][0]
	L[1102][0] = LargeX[1102][1]>0 ? 1 : 0;
	satisfiable[1102][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1102_0[i][0] ][ unit1102_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1102_0[i][2] ][ unit1102_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1102_0[i][4] ][ unit1102_0[i][5] ] >0);
		X_contra = ( LargeX[1102][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1102_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1102][1]=0; L[1102][0]=1;}
			satisfiable[1102][0]=satisfiable[1102][0] & ((x[1102] ^ 0) | (x[ unit1102_0[i][0] ] ^ unit1102_0[i][1]) |(x[ unit1102_0[i][2] ] ^ unit1102_0[i][3]));
			}
		if(X_contra>0) L[1102][0]=2;
		}
	//Check all rules of unit[1102][1]
	L[1102][1] = LargeX[1102][0]>0 ? 1 : 0;
	satisfiable[1102][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1102_1[i][0] ][ unit1102_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1102_1[i][2] ][ unit1102_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1102_1[i][4] ][ unit1102_1[i][5] ] >0);
		X_contra = ( LargeX[1102][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1102_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1102][0]=0; L[1102][1]=1;}
			satisfiable[1102][1]=satisfiable[1102][1] & ((x[1102] ^ 1) | (x[ unit1102_1[i][0] ] ^ unit1102_1[i][1]) |(x[ unit1102_1[i][2] ] ^ unit1102_1[i][3]));
			}
		if(X_contra>0) L[1102][1]=2;
		}
	//Check all rules of unit[1103][0]
	L[1103][0] = LargeX[1103][1]>0 ? 1 : 0;
	satisfiable[1103][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1103_0[i][0] ][ unit1103_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1103_0[i][2] ][ unit1103_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1103_0[i][4] ][ unit1103_0[i][5] ] >0);
		X_contra = ( LargeX[1103][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1103_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1103][1]=0; L[1103][0]=1;}
			satisfiable[1103][0]=satisfiable[1103][0] & ((x[1103] ^ 0) | (x[ unit1103_0[i][0] ] ^ unit1103_0[i][1]) |(x[ unit1103_0[i][2] ] ^ unit1103_0[i][3]));
			}
		if(X_contra>0) L[1103][0]=2;
		}
	//Check all rules of unit[1103][1]
	L[1103][1] = LargeX[1103][0]>0 ? 1 : 0;
	satisfiable[1103][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1103_1[i][0] ][ unit1103_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1103_1[i][2] ][ unit1103_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1103_1[i][4] ][ unit1103_1[i][5] ] >0);
		X_contra = ( LargeX[1103][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1103_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1103][0]=0; L[1103][1]=1;}
			satisfiable[1103][1]=satisfiable[1103][1] & ((x[1103] ^ 1) | (x[ unit1103_1[i][0] ] ^ unit1103_1[i][1]) |(x[ unit1103_1[i][2] ] ^ unit1103_1[i][3]));
			}
		if(X_contra>0) L[1103][1]=2;
		}
	//Check all rules of unit[1104][0]
	L[1104][0] = LargeX[1104][1]>0 ? 1 : 0;
	satisfiable[1104][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1104_0[i][0] ][ unit1104_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1104_0[i][2] ][ unit1104_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1104_0[i][4] ][ unit1104_0[i][5] ] >0);
		X_contra = ( LargeX[1104][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1104_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1104][1]=0; L[1104][0]=1;}
			satisfiable[1104][0]=satisfiable[1104][0] & ((x[1104] ^ 0) | (x[ unit1104_0[i][0] ] ^ unit1104_0[i][1]) |(x[ unit1104_0[i][2] ] ^ unit1104_0[i][3]));
			}
		if(X_contra>0) L[1104][0]=2;
		}
	//Check all rules of unit[1104][1]
	L[1104][1] = LargeX[1104][0]>0 ? 1 : 0;
	satisfiable[1104][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1104_1[i][0] ][ unit1104_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1104_1[i][2] ][ unit1104_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1104_1[i][4] ][ unit1104_1[i][5] ] >0);
		X_contra = ( LargeX[1104][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1104_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1104][0]=0; L[1104][1]=1;}
			satisfiable[1104][1]=satisfiable[1104][1] & ((x[1104] ^ 1) | (x[ unit1104_1[i][0] ] ^ unit1104_1[i][1]) |(x[ unit1104_1[i][2] ] ^ unit1104_1[i][3]));
			}
		if(X_contra>0) L[1104][1]=2;
		}
	//Check all rules of unit[1105][0]
	L[1105][0] = LargeX[1105][1]>0 ? 1 : 0;
	satisfiable[1105][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1105_0[i][0] ][ unit1105_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1105_0[i][2] ][ unit1105_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1105_0[i][4] ][ unit1105_0[i][5] ] >0);
		X_contra = ( LargeX[1105][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1105_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1105][1]=0; L[1105][0]=1;}
			satisfiable[1105][0]=satisfiable[1105][0] & ((x[1105] ^ 0) | (x[ unit1105_0[i][0] ] ^ unit1105_0[i][1]) |(x[ unit1105_0[i][2] ] ^ unit1105_0[i][3]));
			}
		if(X_contra>0) L[1105][0]=2;
		}
	//Check all rules of unit[1105][1]
	L[1105][1] = LargeX[1105][0]>0 ? 1 : 0;
	satisfiable[1105][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1105_1[i][0] ][ unit1105_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1105_1[i][2] ][ unit1105_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1105_1[i][4] ][ unit1105_1[i][5] ] >0);
		X_contra = ( LargeX[1105][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1105_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1105][0]=0; L[1105][1]=1;}
			satisfiable[1105][1]=satisfiable[1105][1] & ((x[1105] ^ 1) | (x[ unit1105_1[i][0] ] ^ unit1105_1[i][1]) |(x[ unit1105_1[i][2] ] ^ unit1105_1[i][3]));
			}
		if(X_contra>0) L[1105][1]=2;
		}
	//Check all rules of unit[1106][0]
	L[1106][0] = LargeX[1106][1]>0 ? 1 : 0;
	satisfiable[1106][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1106_0[i][0] ][ unit1106_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1106_0[i][2] ][ unit1106_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1106_0[i][4] ][ unit1106_0[i][5] ] >0);
		X_contra = ( LargeX[1106][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1106_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1106][1]=0; L[1106][0]=1;}
			satisfiable[1106][0]=satisfiable[1106][0] & ((x[1106] ^ 0) | (x[ unit1106_0[i][0] ] ^ unit1106_0[i][1]) |(x[ unit1106_0[i][2] ] ^ unit1106_0[i][3]));
			}
		if(X_contra>0) L[1106][0]=2;
		}
	//Check all rules of unit[1106][1]
	L[1106][1] = LargeX[1106][0]>0 ? 1 : 0;
	satisfiable[1106][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1106_1[i][0] ][ unit1106_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1106_1[i][2] ][ unit1106_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1106_1[i][4] ][ unit1106_1[i][5] ] >0);
		X_contra = ( LargeX[1106][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1106_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1106][0]=0; L[1106][1]=1;}
			satisfiable[1106][1]=satisfiable[1106][1] & ((x[1106] ^ 1) | (x[ unit1106_1[i][0] ] ^ unit1106_1[i][1]) |(x[ unit1106_1[i][2] ] ^ unit1106_1[i][3]));
			}
		if(X_contra>0) L[1106][1]=2;
		}
	//Check all rules of unit[1107][0]
	L[1107][0] = LargeX[1107][1]>0 ? 1 : 0;
	satisfiable[1107][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1107_0[i][0] ][ unit1107_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1107_0[i][2] ][ unit1107_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1107_0[i][4] ][ unit1107_0[i][5] ] >0);
		X_contra = ( LargeX[1107][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1107_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1107][1]=0; L[1107][0]=1;}
			satisfiable[1107][0]=satisfiable[1107][0] & ((x[1107] ^ 0) | (x[ unit1107_0[i][0] ] ^ unit1107_0[i][1]) |(x[ unit1107_0[i][2] ] ^ unit1107_0[i][3]));
			}
		if(X_contra>0) L[1107][0]=2;
		}
	//Check all rules of unit[1107][1]
	L[1107][1] = LargeX[1107][0]>0 ? 1 : 0;
	satisfiable[1107][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1107_1[i][0] ][ unit1107_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1107_1[i][2] ][ unit1107_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1107_1[i][4] ][ unit1107_1[i][5] ] >0);
		X_contra = ( LargeX[1107][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1107_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1107][0]=0; L[1107][1]=1;}
			satisfiable[1107][1]=satisfiable[1107][1] & ((x[1107] ^ 1) | (x[ unit1107_1[i][0] ] ^ unit1107_1[i][1]) |(x[ unit1107_1[i][2] ] ^ unit1107_1[i][3]));
			}
		if(X_contra>0) L[1107][1]=2;
		}
	//Check all rules of unit[1108][0]
	L[1108][0] = LargeX[1108][1]>0 ? 1 : 0;
	satisfiable[1108][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1108_0[i][0] ][ unit1108_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1108_0[i][2] ][ unit1108_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1108_0[i][4] ][ unit1108_0[i][5] ] >0);
		X_contra = ( LargeX[1108][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1108_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1108][1]=0; L[1108][0]=1;}
			satisfiable[1108][0]=satisfiable[1108][0] & ((x[1108] ^ 0) | (x[ unit1108_0[i][0] ] ^ unit1108_0[i][1]) |(x[ unit1108_0[i][2] ] ^ unit1108_0[i][3]));
			}
		if(X_contra>0) L[1108][0]=2;
		}
	//Check all rules of unit[1108][1]
	L[1108][1] = LargeX[1108][0]>0 ? 1 : 0;
	satisfiable[1108][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1108_1[i][0] ][ unit1108_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1108_1[i][2] ][ unit1108_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1108_1[i][4] ][ unit1108_1[i][5] ] >0);
		X_contra = ( LargeX[1108][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1108_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1108][0]=0; L[1108][1]=1;}
			satisfiable[1108][1]=satisfiable[1108][1] & ((x[1108] ^ 1) | (x[ unit1108_1[i][0] ] ^ unit1108_1[i][1]) |(x[ unit1108_1[i][2] ] ^ unit1108_1[i][3]));
			}
		if(X_contra>0) L[1108][1]=2;
		}
	//Check all rules of unit[1109][0]
	L[1109][0] = LargeX[1109][1]>0 ? 1 : 0;
	satisfiable[1109][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1109_0[i][0] ][ unit1109_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1109_0[i][2] ][ unit1109_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1109_0[i][4] ][ unit1109_0[i][5] ] >0);
		X_contra = ( LargeX[1109][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1109_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1109][1]=0; L[1109][0]=1;}
			satisfiable[1109][0]=satisfiable[1109][0] & ((x[1109] ^ 0) | (x[ unit1109_0[i][0] ] ^ unit1109_0[i][1]) |(x[ unit1109_0[i][2] ] ^ unit1109_0[i][3]));
			}
		if(X_contra>0) L[1109][0]=2;
		}
	//Check all rules of unit[1109][1]
	L[1109][1] = LargeX[1109][0]>0 ? 1 : 0;
	satisfiable[1109][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1109_1[i][0] ][ unit1109_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1109_1[i][2] ][ unit1109_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1109_1[i][4] ][ unit1109_1[i][5] ] >0);
		X_contra = ( LargeX[1109][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1109_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1109][0]=0; L[1109][1]=1;}
			satisfiable[1109][1]=satisfiable[1109][1] & ((x[1109] ^ 1) | (x[ unit1109_1[i][0] ] ^ unit1109_1[i][1]) |(x[ unit1109_1[i][2] ] ^ unit1109_1[i][3]));
			}
		if(X_contra>0) L[1109][1]=2;
		}
	//Check all rules of unit[1110][0]
	L[1110][0] = LargeX[1110][1]>0 ? 1 : 0;
	satisfiable[1110][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1110_0[i][0] ][ unit1110_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1110_0[i][2] ][ unit1110_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1110_0[i][4] ][ unit1110_0[i][5] ] >0);
		X_contra = ( LargeX[1110][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1110_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1110][1]=0; L[1110][0]=1;}
			satisfiable[1110][0]=satisfiable[1110][0] & ((x[1110] ^ 0) | (x[ unit1110_0[i][0] ] ^ unit1110_0[i][1]) |(x[ unit1110_0[i][2] ] ^ unit1110_0[i][3]));
			}
		if(X_contra>0) L[1110][0]=2;
		}
	//Check all rules of unit[1110][1]
	L[1110][1] = LargeX[1110][0]>0 ? 1 : 0;
	satisfiable[1110][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1110_1[i][0] ][ unit1110_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1110_1[i][2] ][ unit1110_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1110_1[i][4] ][ unit1110_1[i][5] ] >0);
		X_contra = ( LargeX[1110][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1110_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1110][0]=0; L[1110][1]=1;}
			satisfiable[1110][1]=satisfiable[1110][1] & ((x[1110] ^ 1) | (x[ unit1110_1[i][0] ] ^ unit1110_1[i][1]) |(x[ unit1110_1[i][2] ] ^ unit1110_1[i][3]));
			}
		if(X_contra>0) L[1110][1]=2;
		}
	//Check all rules of unit[1111][0]
	L[1111][0] = LargeX[1111][1]>0 ? 1 : 0;
	satisfiable[1111][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1111_0[i][0] ][ unit1111_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1111_0[i][2] ][ unit1111_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1111_0[i][4] ][ unit1111_0[i][5] ] >0);
		X_contra = ( LargeX[1111][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1111_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1111][1]=0; L[1111][0]=1;}
			satisfiable[1111][0]=satisfiable[1111][0] & ((x[1111] ^ 0) | (x[ unit1111_0[i][0] ] ^ unit1111_0[i][1]) |(x[ unit1111_0[i][2] ] ^ unit1111_0[i][3]));
			}
		if(X_contra>0) L[1111][0]=2;
		}
	//Check all rules of unit[1111][1]
	L[1111][1] = LargeX[1111][0]>0 ? 1 : 0;
	satisfiable[1111][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1111_1[i][0] ][ unit1111_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1111_1[i][2] ][ unit1111_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1111_1[i][4] ][ unit1111_1[i][5] ] >0);
		X_contra = ( LargeX[1111][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1111_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1111][0]=0; L[1111][1]=1;}
			satisfiable[1111][1]=satisfiable[1111][1] & ((x[1111] ^ 1) | (x[ unit1111_1[i][0] ] ^ unit1111_1[i][1]) |(x[ unit1111_1[i][2] ] ^ unit1111_1[i][3]));
			}
		if(X_contra>0) L[1111][1]=2;
		}
	//Check all rules of unit[1112][0]
	L[1112][0] = LargeX[1112][1]>0 ? 1 : 0;
	satisfiable[1112][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1112_0[i][0] ][ unit1112_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1112_0[i][2] ][ unit1112_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1112_0[i][4] ][ unit1112_0[i][5] ] >0);
		X_contra = ( LargeX[1112][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1112_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1112][1]=0; L[1112][0]=1;}
			satisfiable[1112][0]=satisfiable[1112][0] & ((x[1112] ^ 0) | (x[ unit1112_0[i][0] ] ^ unit1112_0[i][1]) |(x[ unit1112_0[i][2] ] ^ unit1112_0[i][3]));
			}
		if(X_contra>0) L[1112][0]=2;
		}
	//Check all rules of unit[1112][1]
	L[1112][1] = LargeX[1112][0]>0 ? 1 : 0;
	satisfiable[1112][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1112_1[i][0] ][ unit1112_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1112_1[i][2] ][ unit1112_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1112_1[i][4] ][ unit1112_1[i][5] ] >0);
		X_contra = ( LargeX[1112][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1112_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1112][0]=0; L[1112][1]=1;}
			satisfiable[1112][1]=satisfiable[1112][1] & ((x[1112] ^ 1) | (x[ unit1112_1[i][0] ] ^ unit1112_1[i][1]) |(x[ unit1112_1[i][2] ] ^ unit1112_1[i][3]));
			}
		if(X_contra>0) L[1112][1]=2;
		}
	//Check all rules of unit[1113][0]
	L[1113][0] = LargeX[1113][1]>0 ? 1 : 0;
	satisfiable[1113][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1113_0[i][0] ][ unit1113_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1113_0[i][2] ][ unit1113_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1113_0[i][4] ][ unit1113_0[i][5] ] >0);
		X_contra = ( LargeX[1113][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1113_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1113][1]=0; L[1113][0]=1;}
			satisfiable[1113][0]=satisfiable[1113][0] & ((x[1113] ^ 0) | (x[ unit1113_0[i][0] ] ^ unit1113_0[i][1]) |(x[ unit1113_0[i][2] ] ^ unit1113_0[i][3]));
			}
		if(X_contra>0) L[1113][0]=2;
		}
	//Check all rules of unit[1113][1]
	L[1113][1] = LargeX[1113][0]>0 ? 1 : 0;
	satisfiable[1113][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1113_1[i][0] ][ unit1113_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1113_1[i][2] ][ unit1113_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1113_1[i][4] ][ unit1113_1[i][5] ] >0);
		X_contra = ( LargeX[1113][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1113_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1113][0]=0; L[1113][1]=1;}
			satisfiable[1113][1]=satisfiable[1113][1] & ((x[1113] ^ 1) | (x[ unit1113_1[i][0] ] ^ unit1113_1[i][1]) |(x[ unit1113_1[i][2] ] ^ unit1113_1[i][3]));
			}
		if(X_contra>0) L[1113][1]=2;
		}
	//Check all rules of unit[1114][0]
	L[1114][0] = LargeX[1114][1]>0 ? 1 : 0;
	satisfiable[1114][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1114_0[i][0] ][ unit1114_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1114_0[i][2] ][ unit1114_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1114_0[i][4] ][ unit1114_0[i][5] ] >0);
		X_contra = ( LargeX[1114][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1114_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1114][1]=0; L[1114][0]=1;}
			satisfiable[1114][0]=satisfiable[1114][0] & ((x[1114] ^ 0) | (x[ unit1114_0[i][0] ] ^ unit1114_0[i][1]) |(x[ unit1114_0[i][2] ] ^ unit1114_0[i][3]));
			}
		if(X_contra>0) L[1114][0]=2;
		}
	//Check all rules of unit[1114][1]
	L[1114][1] = LargeX[1114][0]>0 ? 1 : 0;
	satisfiable[1114][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1114_1[i][0] ][ unit1114_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1114_1[i][2] ][ unit1114_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1114_1[i][4] ][ unit1114_1[i][5] ] >0);
		X_contra = ( LargeX[1114][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1114_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1114][0]=0; L[1114][1]=1;}
			satisfiable[1114][1]=satisfiable[1114][1] & ((x[1114] ^ 1) | (x[ unit1114_1[i][0] ] ^ unit1114_1[i][1]) |(x[ unit1114_1[i][2] ] ^ unit1114_1[i][3]));
			}
		if(X_contra>0) L[1114][1]=2;
		}
	//Check all rules of unit[1115][0]
	L[1115][0] = LargeX[1115][1]>0 ? 1 : 0;
	satisfiable[1115][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1115_0[i][0] ][ unit1115_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1115_0[i][2] ][ unit1115_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1115_0[i][4] ][ unit1115_0[i][5] ] >0);
		X_contra = ( LargeX[1115][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1115_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1115][1]=0; L[1115][0]=1;}
			satisfiable[1115][0]=satisfiable[1115][0] & ((x[1115] ^ 0) | (x[ unit1115_0[i][0] ] ^ unit1115_0[i][1]) |(x[ unit1115_0[i][2] ] ^ unit1115_0[i][3]));
			}
		if(X_contra>0) L[1115][0]=2;
		}
	//Check all rules of unit[1115][1]
	L[1115][1] = LargeX[1115][0]>0 ? 1 : 0;
	satisfiable[1115][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1115_1[i][0] ][ unit1115_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1115_1[i][2] ][ unit1115_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1115_1[i][4] ][ unit1115_1[i][5] ] >0);
		X_contra = ( LargeX[1115][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1115_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1115][0]=0; L[1115][1]=1;}
			satisfiable[1115][1]=satisfiable[1115][1] & ((x[1115] ^ 1) | (x[ unit1115_1[i][0] ] ^ unit1115_1[i][1]) |(x[ unit1115_1[i][2] ] ^ unit1115_1[i][3]));
			}
		if(X_contra>0) L[1115][1]=2;
		}
	//Check all rules of unit[1116][0]
	L[1116][0] = LargeX[1116][1]>0 ? 1 : 0;
	satisfiable[1116][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1116_0[i][0] ][ unit1116_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1116_0[i][2] ][ unit1116_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1116_0[i][4] ][ unit1116_0[i][5] ] >0);
		X_contra = ( LargeX[1116][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1116_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1116][1]=0; L[1116][0]=1;}
			satisfiable[1116][0]=satisfiable[1116][0] & ((x[1116] ^ 0) | (x[ unit1116_0[i][0] ] ^ unit1116_0[i][1]) |(x[ unit1116_0[i][2] ] ^ unit1116_0[i][3]));
			}
		if(X_contra>0) L[1116][0]=2;
		}
	//Check all rules of unit[1116][1]
	L[1116][1] = LargeX[1116][0]>0 ? 1 : 0;
	satisfiable[1116][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1116_1[i][0] ][ unit1116_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1116_1[i][2] ][ unit1116_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1116_1[i][4] ][ unit1116_1[i][5] ] >0);
		X_contra = ( LargeX[1116][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1116_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1116][0]=0; L[1116][1]=1;}
			satisfiable[1116][1]=satisfiable[1116][1] & ((x[1116] ^ 1) | (x[ unit1116_1[i][0] ] ^ unit1116_1[i][1]) |(x[ unit1116_1[i][2] ] ^ unit1116_1[i][3]));
			}
		if(X_contra>0) L[1116][1]=2;
		}
	//Check all rules of unit[1117][0]
	L[1117][0] = LargeX[1117][1]>0 ? 1 : 0;
	satisfiable[1117][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1117_0[i][0] ][ unit1117_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1117_0[i][2] ][ unit1117_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1117_0[i][4] ][ unit1117_0[i][5] ] >0);
		X_contra = ( LargeX[1117][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1117_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1117][1]=0; L[1117][0]=1;}
			satisfiable[1117][0]=satisfiable[1117][0] & ((x[1117] ^ 0) | (x[ unit1117_0[i][0] ] ^ unit1117_0[i][1]) |(x[ unit1117_0[i][2] ] ^ unit1117_0[i][3]));
			}
		if(X_contra>0) L[1117][0]=2;
		}
	//Check all rules of unit[1117][1]
	L[1117][1] = LargeX[1117][0]>0 ? 1 : 0;
	satisfiable[1117][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1117_1[i][0] ][ unit1117_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1117_1[i][2] ][ unit1117_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1117_1[i][4] ][ unit1117_1[i][5] ] >0);
		X_contra = ( LargeX[1117][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1117_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1117][0]=0; L[1117][1]=1;}
			satisfiable[1117][1]=satisfiable[1117][1] & ((x[1117] ^ 1) | (x[ unit1117_1[i][0] ] ^ unit1117_1[i][1]) |(x[ unit1117_1[i][2] ] ^ unit1117_1[i][3]));
			}
		if(X_contra>0) L[1117][1]=2;
		}
	//Check all rules of unit[1118][0]
	L[1118][0] = LargeX[1118][1]>0 ? 1 : 0;
	satisfiable[1118][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1118_0[i][0] ][ unit1118_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1118_0[i][2] ][ unit1118_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1118_0[i][4] ][ unit1118_0[i][5] ] >0);
		X_contra = ( LargeX[1118][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1118_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1118][1]=0; L[1118][0]=1;}
			satisfiable[1118][0]=satisfiable[1118][0] & ((x[1118] ^ 0) | (x[ unit1118_0[i][0] ] ^ unit1118_0[i][1]) |(x[ unit1118_0[i][2] ] ^ unit1118_0[i][3]));
			}
		if(X_contra>0) L[1118][0]=2;
		}
	//Check all rules of unit[1118][1]
	L[1118][1] = LargeX[1118][0]>0 ? 1 : 0;
	satisfiable[1118][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1118_1[i][0] ][ unit1118_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1118_1[i][2] ][ unit1118_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1118_1[i][4] ][ unit1118_1[i][5] ] >0);
		X_contra = ( LargeX[1118][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1118_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1118][0]=0; L[1118][1]=1;}
			satisfiable[1118][1]=satisfiable[1118][1] & ((x[1118] ^ 1) | (x[ unit1118_1[i][0] ] ^ unit1118_1[i][1]) |(x[ unit1118_1[i][2] ] ^ unit1118_1[i][3]));
			}
		if(X_contra>0) L[1118][1]=2;
		}
	//Check all rules of unit[1119][0]
	L[1119][0] = LargeX[1119][1]>0 ? 1 : 0;
	satisfiable[1119][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1119_0[i][0] ][ unit1119_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1119_0[i][2] ][ unit1119_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1119_0[i][4] ][ unit1119_0[i][5] ] >0);
		X_contra = ( LargeX[1119][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1119_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1119][1]=0; L[1119][0]=1;}
			satisfiable[1119][0]=satisfiable[1119][0] & ((x[1119] ^ 0) | (x[ unit1119_0[i][0] ] ^ unit1119_0[i][1]) |(x[ unit1119_0[i][2] ] ^ unit1119_0[i][3]));
			}
		if(X_contra>0) L[1119][0]=2;
		}
	//Check all rules of unit[1119][1]
	L[1119][1] = LargeX[1119][0]>0 ? 1 : 0;
	satisfiable[1119][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1119_1[i][0] ][ unit1119_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1119_1[i][2] ][ unit1119_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1119_1[i][4] ][ unit1119_1[i][5] ] >0);
		X_contra = ( LargeX[1119][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1119_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1119][0]=0; L[1119][1]=1;}
			satisfiable[1119][1]=satisfiable[1119][1] & ((x[1119] ^ 1) | (x[ unit1119_1[i][0] ] ^ unit1119_1[i][1]) |(x[ unit1119_1[i][2] ] ^ unit1119_1[i][3]));
			}
		if(X_contra>0) L[1119][1]=2;
		}
	//Check all rules of unit[1120][0]
	L[1120][0] = LargeX[1120][1]>0 ? 1 : 0;
	satisfiable[1120][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1120_0[i][0] ][ unit1120_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1120_0[i][2] ][ unit1120_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1120_0[i][4] ][ unit1120_0[i][5] ] >0);
		X_contra = ( LargeX[1120][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1120_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1120][1]=0; L[1120][0]=1;}
			satisfiable[1120][0]=satisfiable[1120][0] & ((x[1120] ^ 0) | (x[ unit1120_0[i][0] ] ^ unit1120_0[i][1]) |(x[ unit1120_0[i][2] ] ^ unit1120_0[i][3]));
			}
		if(X_contra>0) L[1120][0]=2;
		}
	//Check all rules of unit[1120][1]
	L[1120][1] = LargeX[1120][0]>0 ? 1 : 0;
	satisfiable[1120][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1120_1[i][0] ][ unit1120_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1120_1[i][2] ][ unit1120_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1120_1[i][4] ][ unit1120_1[i][5] ] >0);
		X_contra = ( LargeX[1120][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1120_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1120][0]=0; L[1120][1]=1;}
			satisfiable[1120][1]=satisfiable[1120][1] & ((x[1120] ^ 1) | (x[ unit1120_1[i][0] ] ^ unit1120_1[i][1]) |(x[ unit1120_1[i][2] ] ^ unit1120_1[i][3]));
			}
		if(X_contra>0) L[1120][1]=2;
		}
	//Check all rules of unit[1121][0]
	L[1121][0] = LargeX[1121][1]>0 ? 1 : 0;
	satisfiable[1121][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1121_0[i][0] ][ unit1121_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1121_0[i][2] ][ unit1121_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1121_0[i][4] ][ unit1121_0[i][5] ] >0);
		X_contra = ( LargeX[1121][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1121_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1121][1]=0; L[1121][0]=1;}
			satisfiable[1121][0]=satisfiable[1121][0] & ((x[1121] ^ 0) | (x[ unit1121_0[i][0] ] ^ unit1121_0[i][1]) |(x[ unit1121_0[i][2] ] ^ unit1121_0[i][3]));
			}
		if(X_contra>0) L[1121][0]=2;
		}
	//Check all rules of unit[1121][1]
	L[1121][1] = LargeX[1121][0]>0 ? 1 : 0;
	satisfiable[1121][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1121_1[i][0] ][ unit1121_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1121_1[i][2] ][ unit1121_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1121_1[i][4] ][ unit1121_1[i][5] ] >0);
		X_contra = ( LargeX[1121][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1121_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1121][0]=0; L[1121][1]=1;}
			satisfiable[1121][1]=satisfiable[1121][1] & ((x[1121] ^ 1) | (x[ unit1121_1[i][0] ] ^ unit1121_1[i][1]) |(x[ unit1121_1[i][2] ] ^ unit1121_1[i][3]));
			}
		if(X_contra>0) L[1121][1]=2;
		}
	//Check all rules of unit[1122][0]
	L[1122][0] = LargeX[1122][1]>0 ? 1 : 0;
	satisfiable[1122][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1122_0[i][0] ][ unit1122_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1122_0[i][2] ][ unit1122_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1122_0[i][4] ][ unit1122_0[i][5] ] >0);
		X_contra = ( LargeX[1122][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1122_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1122][1]=0; L[1122][0]=1;}
			satisfiable[1122][0]=satisfiable[1122][0] & ((x[1122] ^ 0) | (x[ unit1122_0[i][0] ] ^ unit1122_0[i][1]) |(x[ unit1122_0[i][2] ] ^ unit1122_0[i][3]));
			}
		if(X_contra>0) L[1122][0]=2;
		}
	//Check all rules of unit[1122][1]
	L[1122][1] = LargeX[1122][0]>0 ? 1 : 0;
	satisfiable[1122][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1122_1[i][0] ][ unit1122_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1122_1[i][2] ][ unit1122_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1122_1[i][4] ][ unit1122_1[i][5] ] >0);
		X_contra = ( LargeX[1122][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1122_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1122][0]=0; L[1122][1]=1;}
			satisfiable[1122][1]=satisfiable[1122][1] & ((x[1122] ^ 1) | (x[ unit1122_1[i][0] ] ^ unit1122_1[i][1]) |(x[ unit1122_1[i][2] ] ^ unit1122_1[i][3]));
			}
		if(X_contra>0) L[1122][1]=2;
		}
	//Check all rules of unit[1123][0]
	L[1123][0] = LargeX[1123][1]>0 ? 1 : 0;
	satisfiable[1123][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1123_0[i][0] ][ unit1123_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1123_0[i][2] ][ unit1123_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1123_0[i][4] ][ unit1123_0[i][5] ] >0);
		X_contra = ( LargeX[1123][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1123_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1123][1]=0; L[1123][0]=1;}
			satisfiable[1123][0]=satisfiable[1123][0] & ((x[1123] ^ 0) | (x[ unit1123_0[i][0] ] ^ unit1123_0[i][1]) |(x[ unit1123_0[i][2] ] ^ unit1123_0[i][3]));
			}
		if(X_contra>0) L[1123][0]=2;
		}
	//Check all rules of unit[1123][1]
	L[1123][1] = LargeX[1123][0]>0 ? 1 : 0;
	satisfiable[1123][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1123_1[i][0] ][ unit1123_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1123_1[i][2] ][ unit1123_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1123_1[i][4] ][ unit1123_1[i][5] ] >0);
		X_contra = ( LargeX[1123][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1123_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1123][0]=0; L[1123][1]=1;}
			satisfiable[1123][1]=satisfiable[1123][1] & ((x[1123] ^ 1) | (x[ unit1123_1[i][0] ] ^ unit1123_1[i][1]) |(x[ unit1123_1[i][2] ] ^ unit1123_1[i][3]));
			}
		if(X_contra>0) L[1123][1]=2;
		}
	//Check all rules of unit[1124][0]
	L[1124][0] = LargeX[1124][1]>0 ? 1 : 0;
	satisfiable[1124][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1124_0[i][0] ][ unit1124_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1124_0[i][2] ][ unit1124_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1124_0[i][4] ][ unit1124_0[i][5] ] >0);
		X_contra = ( LargeX[1124][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1124_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1124][1]=0; L[1124][0]=1;}
			satisfiable[1124][0]=satisfiable[1124][0] & ((x[1124] ^ 0) | (x[ unit1124_0[i][0] ] ^ unit1124_0[i][1]) |(x[ unit1124_0[i][2] ] ^ unit1124_0[i][3]));
			}
		if(X_contra>0) L[1124][0]=2;
		}
	//Check all rules of unit[1124][1]
	L[1124][1] = LargeX[1124][0]>0 ? 1 : 0;
	satisfiable[1124][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1124_1[i][0] ][ unit1124_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1124_1[i][2] ][ unit1124_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1124_1[i][4] ][ unit1124_1[i][5] ] >0);
		X_contra = ( LargeX[1124][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1124_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1124][0]=0; L[1124][1]=1;}
			satisfiable[1124][1]=satisfiable[1124][1] & ((x[1124] ^ 1) | (x[ unit1124_1[i][0] ] ^ unit1124_1[i][1]) |(x[ unit1124_1[i][2] ] ^ unit1124_1[i][3]));
			}
		if(X_contra>0) L[1124][1]=2;
		}
	//Check all rules of unit[1125][0]
	L[1125][0] = LargeX[1125][1]>0 ? 1 : 0;
	satisfiable[1125][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1125_0[i][0] ][ unit1125_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1125_0[i][2] ][ unit1125_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1125_0[i][4] ][ unit1125_0[i][5] ] >0);
		X_contra = ( LargeX[1125][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1125_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1125][1]=0; L[1125][0]=1;}
			satisfiable[1125][0]=satisfiable[1125][0] & ((x[1125] ^ 0) | (x[ unit1125_0[i][0] ] ^ unit1125_0[i][1]) |(x[ unit1125_0[i][2] ] ^ unit1125_0[i][3]));
			}
		if(X_contra>0) L[1125][0]=2;
		}
	//Check all rules of unit[1125][1]
	L[1125][1] = LargeX[1125][0]>0 ? 1 : 0;
	satisfiable[1125][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1125_1[i][0] ][ unit1125_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1125_1[i][2] ][ unit1125_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1125_1[i][4] ][ unit1125_1[i][5] ] >0);
		X_contra = ( LargeX[1125][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1125_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1125][0]=0; L[1125][1]=1;}
			satisfiable[1125][1]=satisfiable[1125][1] & ((x[1125] ^ 1) | (x[ unit1125_1[i][0] ] ^ unit1125_1[i][1]) |(x[ unit1125_1[i][2] ] ^ unit1125_1[i][3]));
			}
		if(X_contra>0) L[1125][1]=2;
		}
	//Check all rules of unit[1126][0]
	L[1126][0] = LargeX[1126][1]>0 ? 1 : 0;
	satisfiable[1126][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1126_0[i][0] ][ unit1126_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1126_0[i][2] ][ unit1126_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1126_0[i][4] ][ unit1126_0[i][5] ] >0);
		X_contra = ( LargeX[1126][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1126_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1126][1]=0; L[1126][0]=1;}
			satisfiable[1126][0]=satisfiable[1126][0] & ((x[1126] ^ 0) | (x[ unit1126_0[i][0] ] ^ unit1126_0[i][1]) |(x[ unit1126_0[i][2] ] ^ unit1126_0[i][3]));
			}
		if(X_contra>0) L[1126][0]=2;
		}
	//Check all rules of unit[1126][1]
	L[1126][1] = LargeX[1126][0]>0 ? 1 : 0;
	satisfiable[1126][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1126_1[i][0] ][ unit1126_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1126_1[i][2] ][ unit1126_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1126_1[i][4] ][ unit1126_1[i][5] ] >0);
		X_contra = ( LargeX[1126][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1126_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1126][0]=0; L[1126][1]=1;}
			satisfiable[1126][1]=satisfiable[1126][1] & ((x[1126] ^ 1) | (x[ unit1126_1[i][0] ] ^ unit1126_1[i][1]) |(x[ unit1126_1[i][2] ] ^ unit1126_1[i][3]));
			}
		if(X_contra>0) L[1126][1]=2;
		}
	//Check all rules of unit[1127][0]
	L[1127][0] = LargeX[1127][1]>0 ? 1 : 0;
	satisfiable[1127][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1127_0[i][0] ][ unit1127_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1127_0[i][2] ][ unit1127_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1127_0[i][4] ][ unit1127_0[i][5] ] >0);
		X_contra = ( LargeX[1127][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1127_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1127][1]=0; L[1127][0]=1;}
			satisfiable[1127][0]=satisfiable[1127][0] & ((x[1127] ^ 0) | (x[ unit1127_0[i][0] ] ^ unit1127_0[i][1]) |(x[ unit1127_0[i][2] ] ^ unit1127_0[i][3]));
			}
		if(X_contra>0) L[1127][0]=2;
		}
	//Check all rules of unit[1127][1]
	L[1127][1] = LargeX[1127][0]>0 ? 1 : 0;
	satisfiable[1127][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1127_1[i][0] ][ unit1127_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1127_1[i][2] ][ unit1127_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1127_1[i][4] ][ unit1127_1[i][5] ] >0);
		X_contra = ( LargeX[1127][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1127_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1127][0]=0; L[1127][1]=1;}
			satisfiable[1127][1]=satisfiable[1127][1] & ((x[1127] ^ 1) | (x[ unit1127_1[i][0] ] ^ unit1127_1[i][1]) |(x[ unit1127_1[i][2] ] ^ unit1127_1[i][3]));
			}
		if(X_contra>0) L[1127][1]=2;
		}
	//Check all rules of unit[1128][0]
	L[1128][0] = LargeX[1128][1]>0 ? 1 : 0;
	satisfiable[1128][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1128_0[i][0] ][ unit1128_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1128_0[i][2] ][ unit1128_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1128_0[i][4] ][ unit1128_0[i][5] ] >0);
		X_contra = ( LargeX[1128][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1128_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1128][1]=0; L[1128][0]=1;}
			satisfiable[1128][0]=satisfiable[1128][0] & ((x[1128] ^ 0) | (x[ unit1128_0[i][0] ] ^ unit1128_0[i][1]) |(x[ unit1128_0[i][2] ] ^ unit1128_0[i][3]));
			}
		if(X_contra>0) L[1128][0]=2;
		}
	//Check all rules of unit[1128][1]
	L[1128][1] = LargeX[1128][0]>0 ? 1 : 0;
	satisfiable[1128][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1128_1[i][0] ][ unit1128_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1128_1[i][2] ][ unit1128_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1128_1[i][4] ][ unit1128_1[i][5] ] >0);
		X_contra = ( LargeX[1128][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1128_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1128][0]=0; L[1128][1]=1;}
			satisfiable[1128][1]=satisfiable[1128][1] & ((x[1128] ^ 1) | (x[ unit1128_1[i][0] ] ^ unit1128_1[i][1]) |(x[ unit1128_1[i][2] ] ^ unit1128_1[i][3]));
			}
		if(X_contra>0) L[1128][1]=2;
		}
	//Check all rules of unit[1129][0]
	L[1129][0] = LargeX[1129][1]>0 ? 1 : 0;
	satisfiable[1129][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1129_0[i][0] ][ unit1129_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1129_0[i][2] ][ unit1129_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1129_0[i][4] ][ unit1129_0[i][5] ] >0);
		X_contra = ( LargeX[1129][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1129_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1129][1]=0; L[1129][0]=1;}
			satisfiable[1129][0]=satisfiable[1129][0] & ((x[1129] ^ 0) | (x[ unit1129_0[i][0] ] ^ unit1129_0[i][1]) |(x[ unit1129_0[i][2] ] ^ unit1129_0[i][3]));
			}
		if(X_contra>0) L[1129][0]=2;
		}
	//Check all rules of unit[1129][1]
	L[1129][1] = LargeX[1129][0]>0 ? 1 : 0;
	satisfiable[1129][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1129_1[i][0] ][ unit1129_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1129_1[i][2] ][ unit1129_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1129_1[i][4] ][ unit1129_1[i][5] ] >0);
		X_contra = ( LargeX[1129][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1129_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1129][0]=0; L[1129][1]=1;}
			satisfiable[1129][1]=satisfiable[1129][1] & ((x[1129] ^ 1) | (x[ unit1129_1[i][0] ] ^ unit1129_1[i][1]) |(x[ unit1129_1[i][2] ] ^ unit1129_1[i][3]));
			}
		if(X_contra>0) L[1129][1]=2;
		}
	//Check all rules of unit[1130][0]
	L[1130][0] = LargeX[1130][1]>0 ? 1 : 0;
	satisfiable[1130][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1130_0[i][0] ][ unit1130_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1130_0[i][2] ][ unit1130_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1130_0[i][4] ][ unit1130_0[i][5] ] >0);
		X_contra = ( LargeX[1130][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1130_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1130][1]=0; L[1130][0]=1;}
			satisfiable[1130][0]=satisfiable[1130][0] & ((x[1130] ^ 0) | (x[ unit1130_0[i][0] ] ^ unit1130_0[i][1]) |(x[ unit1130_0[i][2] ] ^ unit1130_0[i][3]));
			}
		if(X_contra>0) L[1130][0]=2;
		}
	//Check all rules of unit[1130][1]
	L[1130][1] = LargeX[1130][0]>0 ? 1 : 0;
	satisfiable[1130][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1130_1[i][0] ][ unit1130_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1130_1[i][2] ][ unit1130_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1130_1[i][4] ][ unit1130_1[i][5] ] >0);
		X_contra = ( LargeX[1130][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1130_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1130][0]=0; L[1130][1]=1;}
			satisfiable[1130][1]=satisfiable[1130][1] & ((x[1130] ^ 1) | (x[ unit1130_1[i][0] ] ^ unit1130_1[i][1]) |(x[ unit1130_1[i][2] ] ^ unit1130_1[i][3]));
			}
		if(X_contra>0) L[1130][1]=2;
		}
	//Check all rules of unit[1131][0]
	L[1131][0] = LargeX[1131][1]>0 ? 1 : 0;
	satisfiable[1131][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1131_0[i][0] ][ unit1131_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1131_0[i][2] ][ unit1131_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1131_0[i][4] ][ unit1131_0[i][5] ] >0);
		X_contra = ( LargeX[1131][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1131_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1131][1]=0; L[1131][0]=1;}
			satisfiable[1131][0]=satisfiable[1131][0] & ((x[1131] ^ 0) | (x[ unit1131_0[i][0] ] ^ unit1131_0[i][1]) |(x[ unit1131_0[i][2] ] ^ unit1131_0[i][3]));
			}
		if(X_contra>0) L[1131][0]=2;
		}
	//Check all rules of unit[1131][1]
	L[1131][1] = LargeX[1131][0]>0 ? 1 : 0;
	satisfiable[1131][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1131_1[i][0] ][ unit1131_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1131_1[i][2] ][ unit1131_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1131_1[i][4] ][ unit1131_1[i][5] ] >0);
		X_contra = ( LargeX[1131][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1131_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1131][0]=0; L[1131][1]=1;}
			satisfiable[1131][1]=satisfiable[1131][1] & ((x[1131] ^ 1) | (x[ unit1131_1[i][0] ] ^ unit1131_1[i][1]) |(x[ unit1131_1[i][2] ] ^ unit1131_1[i][3]));
			}
		if(X_contra>0) L[1131][1]=2;
		}
	//Check all rules of unit[1132][0]
	L[1132][0] = LargeX[1132][1]>0 ? 1 : 0;
	satisfiable[1132][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1132_0[i][0] ][ unit1132_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1132_0[i][2] ][ unit1132_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1132_0[i][4] ][ unit1132_0[i][5] ] >0);
		X_contra = ( LargeX[1132][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1132_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1132][1]=0; L[1132][0]=1;}
			satisfiable[1132][0]=satisfiable[1132][0] & ((x[1132] ^ 0) | (x[ unit1132_0[i][0] ] ^ unit1132_0[i][1]) |(x[ unit1132_0[i][2] ] ^ unit1132_0[i][3]));
			}
		if(X_contra>0) L[1132][0]=2;
		}
	//Check all rules of unit[1132][1]
	L[1132][1] = LargeX[1132][0]>0 ? 1 : 0;
	satisfiable[1132][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1132_1[i][0] ][ unit1132_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1132_1[i][2] ][ unit1132_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1132_1[i][4] ][ unit1132_1[i][5] ] >0);
		X_contra = ( LargeX[1132][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1132_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1132][0]=0; L[1132][1]=1;}
			satisfiable[1132][1]=satisfiable[1132][1] & ((x[1132] ^ 1) | (x[ unit1132_1[i][0] ] ^ unit1132_1[i][1]) |(x[ unit1132_1[i][2] ] ^ unit1132_1[i][3]));
			}
		if(X_contra>0) L[1132][1]=2;
		}
	//Check all rules of unit[1133][0]
	L[1133][0] = LargeX[1133][1]>0 ? 1 : 0;
	satisfiable[1133][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1133_0[i][0] ][ unit1133_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1133_0[i][2] ][ unit1133_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1133_0[i][4] ][ unit1133_0[i][5] ] >0);
		X_contra = ( LargeX[1133][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1133_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1133][1]=0; L[1133][0]=1;}
			satisfiable[1133][0]=satisfiable[1133][0] & ((x[1133] ^ 0) | (x[ unit1133_0[i][0] ] ^ unit1133_0[i][1]) |(x[ unit1133_0[i][2] ] ^ unit1133_0[i][3]));
			}
		if(X_contra>0) L[1133][0]=2;
		}
	//Check all rules of unit[1133][1]
	L[1133][1] = LargeX[1133][0]>0 ? 1 : 0;
	satisfiable[1133][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1133_1[i][0] ][ unit1133_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1133_1[i][2] ][ unit1133_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1133_1[i][4] ][ unit1133_1[i][5] ] >0);
		X_contra = ( LargeX[1133][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1133_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1133][0]=0; L[1133][1]=1;}
			satisfiable[1133][1]=satisfiable[1133][1] & ((x[1133] ^ 1) | (x[ unit1133_1[i][0] ] ^ unit1133_1[i][1]) |(x[ unit1133_1[i][2] ] ^ unit1133_1[i][3]));
			}
		if(X_contra>0) L[1133][1]=2;
		}
	//Check all rules of unit[1134][0]
	L[1134][0] = LargeX[1134][1]>0 ? 1 : 0;
	satisfiable[1134][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1134_0[i][0] ][ unit1134_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1134_0[i][2] ][ unit1134_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1134_0[i][4] ][ unit1134_0[i][5] ] >0);
		X_contra = ( LargeX[1134][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1134_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1134][1]=0; L[1134][0]=1;}
			satisfiable[1134][0]=satisfiable[1134][0] & ((x[1134] ^ 0) | (x[ unit1134_0[i][0] ] ^ unit1134_0[i][1]) |(x[ unit1134_0[i][2] ] ^ unit1134_0[i][3]));
			}
		if(X_contra>0) L[1134][0]=2;
		}
	//Check all rules of unit[1134][1]
	L[1134][1] = LargeX[1134][0]>0 ? 1 : 0;
	satisfiable[1134][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1134_1[i][0] ][ unit1134_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1134_1[i][2] ][ unit1134_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1134_1[i][4] ][ unit1134_1[i][5] ] >0);
		X_contra = ( LargeX[1134][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1134_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1134][0]=0; L[1134][1]=1;}
			satisfiable[1134][1]=satisfiable[1134][1] & ((x[1134] ^ 1) | (x[ unit1134_1[i][0] ] ^ unit1134_1[i][1]) |(x[ unit1134_1[i][2] ] ^ unit1134_1[i][3]));
			}
		if(X_contra>0) L[1134][1]=2;
		}
	//Check all rules of unit[1135][0]
	L[1135][0] = LargeX[1135][1]>0 ? 1 : 0;
	satisfiable[1135][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1135_0[i][0] ][ unit1135_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1135_0[i][2] ][ unit1135_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1135_0[i][4] ][ unit1135_0[i][5] ] >0);
		X_contra = ( LargeX[1135][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1135_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1135][1]=0; L[1135][0]=1;}
			satisfiable[1135][0]=satisfiable[1135][0] & ((x[1135] ^ 0) | (x[ unit1135_0[i][0] ] ^ unit1135_0[i][1]) |(x[ unit1135_0[i][2] ] ^ unit1135_0[i][3]));
			}
		if(X_contra>0) L[1135][0]=2;
		}
	//Check all rules of unit[1135][1]
	L[1135][1] = LargeX[1135][0]>0 ? 1 : 0;
	satisfiable[1135][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1135_1[i][0] ][ unit1135_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1135_1[i][2] ][ unit1135_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1135_1[i][4] ][ unit1135_1[i][5] ] >0);
		X_contra = ( LargeX[1135][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1135_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1135][0]=0; L[1135][1]=1;}
			satisfiable[1135][1]=satisfiable[1135][1] & ((x[1135] ^ 1) | (x[ unit1135_1[i][0] ] ^ unit1135_1[i][1]) |(x[ unit1135_1[i][2] ] ^ unit1135_1[i][3]));
			}
		if(X_contra>0) L[1135][1]=2;
		}
	//Check all rules of unit[1136][0]
	L[1136][0] = LargeX[1136][1]>0 ? 1 : 0;
	satisfiable[1136][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1136_0[i][0] ][ unit1136_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1136_0[i][2] ][ unit1136_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1136_0[i][4] ][ unit1136_0[i][5] ] >0);
		X_contra = ( LargeX[1136][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1136_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1136][1]=0; L[1136][0]=1;}
			satisfiable[1136][0]=satisfiable[1136][0] & ((x[1136] ^ 0) | (x[ unit1136_0[i][0] ] ^ unit1136_0[i][1]) |(x[ unit1136_0[i][2] ] ^ unit1136_0[i][3]));
			}
		if(X_contra>0) L[1136][0]=2;
		}
	//Check all rules of unit[1136][1]
	L[1136][1] = LargeX[1136][0]>0 ? 1 : 0;
	satisfiable[1136][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1136_1[i][0] ][ unit1136_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1136_1[i][2] ][ unit1136_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1136_1[i][4] ][ unit1136_1[i][5] ] >0);
		X_contra = ( LargeX[1136][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1136_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1136][0]=0; L[1136][1]=1;}
			satisfiable[1136][1]=satisfiable[1136][1] & ((x[1136] ^ 1) | (x[ unit1136_1[i][0] ] ^ unit1136_1[i][1]) |(x[ unit1136_1[i][2] ] ^ unit1136_1[i][3]));
			}
		if(X_contra>0) L[1136][1]=2;
		}
	//Check all rules of unit[1137][0]
	L[1137][0] = LargeX[1137][1]>0 ? 1 : 0;
	satisfiable[1137][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1137_0[i][0] ][ unit1137_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1137_0[i][2] ][ unit1137_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1137_0[i][4] ][ unit1137_0[i][5] ] >0);
		X_contra = ( LargeX[1137][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1137_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1137][1]=0; L[1137][0]=1;}
			satisfiable[1137][0]=satisfiable[1137][0] & ((x[1137] ^ 0) | (x[ unit1137_0[i][0] ] ^ unit1137_0[i][1]) |(x[ unit1137_0[i][2] ] ^ unit1137_0[i][3]));
			}
		if(X_contra>0) L[1137][0]=2;
		}
	//Check all rules of unit[1137][1]
	L[1137][1] = LargeX[1137][0]>0 ? 1 : 0;
	satisfiable[1137][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1137_1[i][0] ][ unit1137_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1137_1[i][2] ][ unit1137_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1137_1[i][4] ][ unit1137_1[i][5] ] >0);
		X_contra = ( LargeX[1137][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1137_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1137][0]=0; L[1137][1]=1;}
			satisfiable[1137][1]=satisfiable[1137][1] & ((x[1137] ^ 1) | (x[ unit1137_1[i][0] ] ^ unit1137_1[i][1]) |(x[ unit1137_1[i][2] ] ^ unit1137_1[i][3]));
			}
		if(X_contra>0) L[1137][1]=2;
		}
	//Check all rules of unit[1138][0]
	L[1138][0] = LargeX[1138][1]>0 ? 1 : 0;
	satisfiable[1138][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1138_0[i][0] ][ unit1138_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1138_0[i][2] ][ unit1138_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1138_0[i][4] ][ unit1138_0[i][5] ] >0);
		X_contra = ( LargeX[1138][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1138_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1138][1]=0; L[1138][0]=1;}
			satisfiable[1138][0]=satisfiable[1138][0] & ((x[1138] ^ 0) | (x[ unit1138_0[i][0] ] ^ unit1138_0[i][1]) |(x[ unit1138_0[i][2] ] ^ unit1138_0[i][3]));
			}
		if(X_contra>0) L[1138][0]=2;
		}
	//Check all rules of unit[1138][1]
	L[1138][1] = LargeX[1138][0]>0 ? 1 : 0;
	satisfiable[1138][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1138_1[i][0] ][ unit1138_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1138_1[i][2] ][ unit1138_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1138_1[i][4] ][ unit1138_1[i][5] ] >0);
		X_contra = ( LargeX[1138][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1138_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1138][0]=0; L[1138][1]=1;}
			satisfiable[1138][1]=satisfiable[1138][1] & ((x[1138] ^ 1) | (x[ unit1138_1[i][0] ] ^ unit1138_1[i][1]) |(x[ unit1138_1[i][2] ] ^ unit1138_1[i][3]));
			}
		if(X_contra>0) L[1138][1]=2;
		}
	//Check all rules of unit[1139][0]
	L[1139][0] = LargeX[1139][1]>0 ? 1 : 0;
	satisfiable[1139][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1139_0[i][0] ][ unit1139_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1139_0[i][2] ][ unit1139_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1139_0[i][4] ][ unit1139_0[i][5] ] >0);
		X_contra = ( LargeX[1139][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1139_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1139][1]=0; L[1139][0]=1;}
			satisfiable[1139][0]=satisfiable[1139][0] & ((x[1139] ^ 0) | (x[ unit1139_0[i][0] ] ^ unit1139_0[i][1]) |(x[ unit1139_0[i][2] ] ^ unit1139_0[i][3]));
			}
		if(X_contra>0) L[1139][0]=2;
		}
	//Check all rules of unit[1139][1]
	L[1139][1] = LargeX[1139][0]>0 ? 1 : 0;
	satisfiable[1139][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1139_1[i][0] ][ unit1139_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1139_1[i][2] ][ unit1139_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1139_1[i][4] ][ unit1139_1[i][5] ] >0);
		X_contra = ( LargeX[1139][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1139_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1139][0]=0; L[1139][1]=1;}
			satisfiable[1139][1]=satisfiable[1139][1] & ((x[1139] ^ 1) | (x[ unit1139_1[i][0] ] ^ unit1139_1[i][1]) |(x[ unit1139_1[i][2] ] ^ unit1139_1[i][3]));
			}
		if(X_contra>0) L[1139][1]=2;
		}
	//Check all rules of unit[1140][0]
	L[1140][0] = LargeX[1140][1]>0 ? 1 : 0;
	satisfiable[1140][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1140_0[i][0] ][ unit1140_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1140_0[i][2] ][ unit1140_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1140_0[i][4] ][ unit1140_0[i][5] ] >0);
		X_contra = ( LargeX[1140][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1140_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1140][1]=0; L[1140][0]=1;}
			satisfiable[1140][0]=satisfiable[1140][0] & ((x[1140] ^ 0) | (x[ unit1140_0[i][0] ] ^ unit1140_0[i][1]) |(x[ unit1140_0[i][2] ] ^ unit1140_0[i][3]));
			}
		if(X_contra>0) L[1140][0]=2;
		}
	//Check all rules of unit[1140][1]
	L[1140][1] = LargeX[1140][0]>0 ? 1 : 0;
	satisfiable[1140][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1140_1[i][0] ][ unit1140_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1140_1[i][2] ][ unit1140_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1140_1[i][4] ][ unit1140_1[i][5] ] >0);
		X_contra = ( LargeX[1140][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1140_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1140][0]=0; L[1140][1]=1;}
			satisfiable[1140][1]=satisfiable[1140][1] & ((x[1140] ^ 1) | (x[ unit1140_1[i][0] ] ^ unit1140_1[i][1]) |(x[ unit1140_1[i][2] ] ^ unit1140_1[i][3]));
			}
		if(X_contra>0) L[1140][1]=2;
		}
	//Check all rules of unit[1141][0]
	L[1141][0] = LargeX[1141][1]>0 ? 1 : 0;
	satisfiable[1141][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1141_0[i][0] ][ unit1141_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1141_0[i][2] ][ unit1141_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1141_0[i][4] ][ unit1141_0[i][5] ] >0);
		X_contra = ( LargeX[1141][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1141_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1141][1]=0; L[1141][0]=1;}
			satisfiable[1141][0]=satisfiable[1141][0] & ((x[1141] ^ 0) | (x[ unit1141_0[i][0] ] ^ unit1141_0[i][1]) |(x[ unit1141_0[i][2] ] ^ unit1141_0[i][3]));
			}
		if(X_contra>0) L[1141][0]=2;
		}
	//Check all rules of unit[1141][1]
	L[1141][1] = LargeX[1141][0]>0 ? 1 : 0;
	satisfiable[1141][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1141_1[i][0] ][ unit1141_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1141_1[i][2] ][ unit1141_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1141_1[i][4] ][ unit1141_1[i][5] ] >0);
		X_contra = ( LargeX[1141][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1141_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1141][0]=0; L[1141][1]=1;}
			satisfiable[1141][1]=satisfiable[1141][1] & ((x[1141] ^ 1) | (x[ unit1141_1[i][0] ] ^ unit1141_1[i][1]) |(x[ unit1141_1[i][2] ] ^ unit1141_1[i][3]));
			}
		if(X_contra>0) L[1141][1]=2;
		}
	//Check all rules of unit[1142][0]
	L[1142][0] = LargeX[1142][1]>0 ? 1 : 0;
	satisfiable[1142][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1142_0[i][0] ][ unit1142_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1142_0[i][2] ][ unit1142_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1142_0[i][4] ][ unit1142_0[i][5] ] >0);
		X_contra = ( LargeX[1142][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1142_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1142][1]=0; L[1142][0]=1;}
			satisfiable[1142][0]=satisfiable[1142][0] & ((x[1142] ^ 0) | (x[ unit1142_0[i][0] ] ^ unit1142_0[i][1]) |(x[ unit1142_0[i][2] ] ^ unit1142_0[i][3]));
			}
		if(X_contra>0) L[1142][0]=2;
		}
	//Check all rules of unit[1142][1]
	L[1142][1] = LargeX[1142][0]>0 ? 1 : 0;
	satisfiable[1142][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1142_1[i][0] ][ unit1142_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1142_1[i][2] ][ unit1142_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1142_1[i][4] ][ unit1142_1[i][5] ] >0);
		X_contra = ( LargeX[1142][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1142_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1142][0]=0; L[1142][1]=1;}
			satisfiable[1142][1]=satisfiable[1142][1] & ((x[1142] ^ 1) | (x[ unit1142_1[i][0] ] ^ unit1142_1[i][1]) |(x[ unit1142_1[i][2] ] ^ unit1142_1[i][3]));
			}
		if(X_contra>0) L[1142][1]=2;
		}
	//Check all rules of unit[1143][0]
	L[1143][0] = LargeX[1143][1]>0 ? 1 : 0;
	satisfiable[1143][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1143_0[i][0] ][ unit1143_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1143_0[i][2] ][ unit1143_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1143_0[i][4] ][ unit1143_0[i][5] ] >0);
		X_contra = ( LargeX[1143][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1143_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1143][1]=0; L[1143][0]=1;}
			satisfiable[1143][0]=satisfiable[1143][0] & ((x[1143] ^ 0) | (x[ unit1143_0[i][0] ] ^ unit1143_0[i][1]) |(x[ unit1143_0[i][2] ] ^ unit1143_0[i][3]));
			}
		if(X_contra>0) L[1143][0]=2;
		}
	//Check all rules of unit[1143][1]
	L[1143][1] = LargeX[1143][0]>0 ? 1 : 0;
	satisfiable[1143][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1143_1[i][0] ][ unit1143_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1143_1[i][2] ][ unit1143_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1143_1[i][4] ][ unit1143_1[i][5] ] >0);
		X_contra = ( LargeX[1143][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1143_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1143][0]=0; L[1143][1]=1;}
			satisfiable[1143][1]=satisfiable[1143][1] & ((x[1143] ^ 1) | (x[ unit1143_1[i][0] ] ^ unit1143_1[i][1]) |(x[ unit1143_1[i][2] ] ^ unit1143_1[i][3]));
			}
		if(X_contra>0) L[1143][1]=2;
		}
	//Check all rules of unit[1144][0]
	L[1144][0] = LargeX[1144][1]>0 ? 1 : 0;
	satisfiable[1144][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1144_0[i][0] ][ unit1144_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1144_0[i][2] ][ unit1144_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1144_0[i][4] ][ unit1144_0[i][5] ] >0);
		X_contra = ( LargeX[1144][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1144_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1144][1]=0; L[1144][0]=1;}
			satisfiable[1144][0]=satisfiable[1144][0] & ((x[1144] ^ 0) | (x[ unit1144_0[i][0] ] ^ unit1144_0[i][1]) |(x[ unit1144_0[i][2] ] ^ unit1144_0[i][3]));
			}
		if(X_contra>0) L[1144][0]=2;
		}
	//Check all rules of unit[1144][1]
	L[1144][1] = LargeX[1144][0]>0 ? 1 : 0;
	satisfiable[1144][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1144_1[i][0] ][ unit1144_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1144_1[i][2] ][ unit1144_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1144_1[i][4] ][ unit1144_1[i][5] ] >0);
		X_contra = ( LargeX[1144][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1144_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1144][0]=0; L[1144][1]=1;}
			satisfiable[1144][1]=satisfiable[1144][1] & ((x[1144] ^ 1) | (x[ unit1144_1[i][0] ] ^ unit1144_1[i][1]) |(x[ unit1144_1[i][2] ] ^ unit1144_1[i][3]));
			}
		if(X_contra>0) L[1144][1]=2;
		}
	//Check all rules of unit[1145][0]
	L[1145][0] = LargeX[1145][1]>0 ? 1 : 0;
	satisfiable[1145][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1145_0[i][0] ][ unit1145_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1145_0[i][2] ][ unit1145_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1145_0[i][4] ][ unit1145_0[i][5] ] >0);
		X_contra = ( LargeX[1145][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1145_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1145][1]=0; L[1145][0]=1;}
			satisfiable[1145][0]=satisfiable[1145][0] & ((x[1145] ^ 0) | (x[ unit1145_0[i][0] ] ^ unit1145_0[i][1]) |(x[ unit1145_0[i][2] ] ^ unit1145_0[i][3]));
			}
		if(X_contra>0) L[1145][0]=2;
		}
	//Check all rules of unit[1145][1]
	L[1145][1] = LargeX[1145][0]>0 ? 1 : 0;
	satisfiable[1145][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1145_1[i][0] ][ unit1145_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1145_1[i][2] ][ unit1145_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1145_1[i][4] ][ unit1145_1[i][5] ] >0);
		X_contra = ( LargeX[1145][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1145_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1145][0]=0; L[1145][1]=1;}
			satisfiable[1145][1]=satisfiable[1145][1] & ((x[1145] ^ 1) | (x[ unit1145_1[i][0] ] ^ unit1145_1[i][1]) |(x[ unit1145_1[i][2] ] ^ unit1145_1[i][3]));
			}
		if(X_contra>0) L[1145][1]=2;
		}
	//Check all rules of unit[1146][0]
	L[1146][0] = LargeX[1146][1]>0 ? 1 : 0;
	satisfiable[1146][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1146_0[i][0] ][ unit1146_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1146_0[i][2] ][ unit1146_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1146_0[i][4] ][ unit1146_0[i][5] ] >0);
		X_contra = ( LargeX[1146][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1146_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1146][1]=0; L[1146][0]=1;}
			satisfiable[1146][0]=satisfiable[1146][0] & ((x[1146] ^ 0) | (x[ unit1146_0[i][0] ] ^ unit1146_0[i][1]) |(x[ unit1146_0[i][2] ] ^ unit1146_0[i][3]));
			}
		if(X_contra>0) L[1146][0]=2;
		}
	//Check all rules of unit[1146][1]
	L[1146][1] = LargeX[1146][0]>0 ? 1 : 0;
	satisfiable[1146][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1146_1[i][0] ][ unit1146_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1146_1[i][2] ][ unit1146_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1146_1[i][4] ][ unit1146_1[i][5] ] >0);
		X_contra = ( LargeX[1146][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1146_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1146][0]=0; L[1146][1]=1;}
			satisfiable[1146][1]=satisfiable[1146][1] & ((x[1146] ^ 1) | (x[ unit1146_1[i][0] ] ^ unit1146_1[i][1]) |(x[ unit1146_1[i][2] ] ^ unit1146_1[i][3]));
			}
		if(X_contra>0) L[1146][1]=2;
		}
	//Check all rules of unit[1147][0]
	L[1147][0] = LargeX[1147][1]>0 ? 1 : 0;
	satisfiable[1147][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1147_0[i][0] ][ unit1147_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1147_0[i][2] ][ unit1147_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1147_0[i][4] ][ unit1147_0[i][5] ] >0);
		X_contra = ( LargeX[1147][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1147_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1147][1]=0; L[1147][0]=1;}
			satisfiable[1147][0]=satisfiable[1147][0] & ((x[1147] ^ 0) | (x[ unit1147_0[i][0] ] ^ unit1147_0[i][1]) |(x[ unit1147_0[i][2] ] ^ unit1147_0[i][3]));
			}
		if(X_contra>0) L[1147][0]=2;
		}
	//Check all rules of unit[1147][1]
	L[1147][1] = LargeX[1147][0]>0 ? 1 : 0;
	satisfiable[1147][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1147_1[i][0] ][ unit1147_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1147_1[i][2] ][ unit1147_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1147_1[i][4] ][ unit1147_1[i][5] ] >0);
		X_contra = ( LargeX[1147][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1147_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1147][0]=0; L[1147][1]=1;}
			satisfiable[1147][1]=satisfiable[1147][1] & ((x[1147] ^ 1) | (x[ unit1147_1[i][0] ] ^ unit1147_1[i][1]) |(x[ unit1147_1[i][2] ] ^ unit1147_1[i][3]));
			}
		if(X_contra>0) L[1147][1]=2;
		}
	//Check all rules of unit[1148][0]
	L[1148][0] = LargeX[1148][1]>0 ? 1 : 0;
	satisfiable[1148][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1148_0[i][0] ][ unit1148_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1148_0[i][2] ][ unit1148_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1148_0[i][4] ][ unit1148_0[i][5] ] >0);
		X_contra = ( LargeX[1148][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1148_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1148][1]=0; L[1148][0]=1;}
			satisfiable[1148][0]=satisfiable[1148][0] & ((x[1148] ^ 0) | (x[ unit1148_0[i][0] ] ^ unit1148_0[i][1]) |(x[ unit1148_0[i][2] ] ^ unit1148_0[i][3]));
			}
		if(X_contra>0) L[1148][0]=2;
		}
	//Check all rules of unit[1148][1]
	L[1148][1] = LargeX[1148][0]>0 ? 1 : 0;
	satisfiable[1148][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1148_1[i][0] ][ unit1148_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1148_1[i][2] ][ unit1148_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1148_1[i][4] ][ unit1148_1[i][5] ] >0);
		X_contra = ( LargeX[1148][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1148_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1148][0]=0; L[1148][1]=1;}
			satisfiable[1148][1]=satisfiable[1148][1] & ((x[1148] ^ 1) | (x[ unit1148_1[i][0] ] ^ unit1148_1[i][1]) |(x[ unit1148_1[i][2] ] ^ unit1148_1[i][3]));
			}
		if(X_contra>0) L[1148][1]=2;
		}
	//Check all rules of unit[1149][0]
	L[1149][0] = LargeX[1149][1]>0 ? 1 : 0;
	satisfiable[1149][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1149_0[i][0] ][ unit1149_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1149_0[i][2] ][ unit1149_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1149_0[i][4] ][ unit1149_0[i][5] ] >0);
		X_contra = ( LargeX[1149][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1149_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1149][1]=0; L[1149][0]=1;}
			satisfiable[1149][0]=satisfiable[1149][0] & ((x[1149] ^ 0) | (x[ unit1149_0[i][0] ] ^ unit1149_0[i][1]) |(x[ unit1149_0[i][2] ] ^ unit1149_0[i][3]));
			}
		if(X_contra>0) L[1149][0]=2;
		}
	//Check all rules of unit[1149][1]
	L[1149][1] = LargeX[1149][0]>0 ? 1 : 0;
	satisfiable[1149][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1149_1[i][0] ][ unit1149_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1149_1[i][2] ][ unit1149_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1149_1[i][4] ][ unit1149_1[i][5] ] >0);
		X_contra = ( LargeX[1149][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1149_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1149][0]=0; L[1149][1]=1;}
			satisfiable[1149][1]=satisfiable[1149][1] & ((x[1149] ^ 1) | (x[ unit1149_1[i][0] ] ^ unit1149_1[i][1]) |(x[ unit1149_1[i][2] ] ^ unit1149_1[i][3]));
			}
		if(X_contra>0) L[1149][1]=2;
		}
	//Check all rules of unit[1150][0]
	L[1150][0] = LargeX[1150][1]>0 ? 1 : 0;
	satisfiable[1150][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1150_0[i][0] ][ unit1150_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1150_0[i][2] ][ unit1150_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1150_0[i][4] ][ unit1150_0[i][5] ] >0);
		X_contra = ( LargeX[1150][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1150_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1150][1]=0; L[1150][0]=1;}
			satisfiable[1150][0]=satisfiable[1150][0] & ((x[1150] ^ 0) | (x[ unit1150_0[i][0] ] ^ unit1150_0[i][1]) |(x[ unit1150_0[i][2] ] ^ unit1150_0[i][3]));
			}
		if(X_contra>0) L[1150][0]=2;
		}
	//Check all rules of unit[1150][1]
	L[1150][1] = LargeX[1150][0]>0 ? 1 : 0;
	satisfiable[1150][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1150_1[i][0] ][ unit1150_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1150_1[i][2] ][ unit1150_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1150_1[i][4] ][ unit1150_1[i][5] ] >0);
		X_contra = ( LargeX[1150][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1150_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1150][0]=0; L[1150][1]=1;}
			satisfiable[1150][1]=satisfiable[1150][1] & ((x[1150] ^ 1) | (x[ unit1150_1[i][0] ] ^ unit1150_1[i][1]) |(x[ unit1150_1[i][2] ] ^ unit1150_1[i][3]));
			}
		if(X_contra>0) L[1150][1]=2;
		}
	//Check all rules of unit[1151][0]
	L[1151][0] = LargeX[1151][1]>0 ? 1 : 0;
	satisfiable[1151][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1151_0[i][0] ][ unit1151_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1151_0[i][2] ][ unit1151_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1151_0[i][4] ][ unit1151_0[i][5] ] >0);
		X_contra = ( LargeX[1151][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1151_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1151][1]=0; L[1151][0]=1;}
			satisfiable[1151][0]=satisfiable[1151][0] & ((x[1151] ^ 0) | (x[ unit1151_0[i][0] ] ^ unit1151_0[i][1]) |(x[ unit1151_0[i][2] ] ^ unit1151_0[i][3]));
			}
		if(X_contra>0) L[1151][0]=2;
		}
	//Check all rules of unit[1151][1]
	L[1151][1] = LargeX[1151][0]>0 ? 1 : 0;
	satisfiable[1151][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1151_1[i][0] ][ unit1151_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1151_1[i][2] ][ unit1151_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1151_1[i][4] ][ unit1151_1[i][5] ] >0);
		X_contra = ( LargeX[1151][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1151_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1151][0]=0; L[1151][1]=1;}
			satisfiable[1151][1]=satisfiable[1151][1] & ((x[1151] ^ 1) | (x[ unit1151_1[i][0] ] ^ unit1151_1[i][1]) |(x[ unit1151_1[i][2] ] ^ unit1151_1[i][3]));
			}
		if(X_contra>0) L[1151][1]=2;
		}
	//Check all rules of unit[1152][0]
	L[1152][0] = LargeX[1152][1]>0 ? 1 : 0;
	satisfiable[1152][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1152_0[i][0] ][ unit1152_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1152_0[i][2] ][ unit1152_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1152_0[i][4] ][ unit1152_0[i][5] ] >0);
		X_contra = ( LargeX[1152][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1152_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1152][1]=0; L[1152][0]=1;}
			satisfiable[1152][0]=satisfiable[1152][0] & ((x[1152] ^ 0) | (x[ unit1152_0[i][0] ] ^ unit1152_0[i][1]) |(x[ unit1152_0[i][2] ] ^ unit1152_0[i][3]));
			}
		if(X_contra>0) L[1152][0]=2;
		}
	//Check all rules of unit[1152][1]
	L[1152][1] = LargeX[1152][0]>0 ? 1 : 0;
	satisfiable[1152][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1152_1[i][0] ][ unit1152_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1152_1[i][2] ][ unit1152_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1152_1[i][4] ][ unit1152_1[i][5] ] >0);
		X_contra = ( LargeX[1152][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1152_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1152][0]=0; L[1152][1]=1;}
			satisfiable[1152][1]=satisfiable[1152][1] & ((x[1152] ^ 1) | (x[ unit1152_1[i][0] ] ^ unit1152_1[i][1]) |(x[ unit1152_1[i][2] ] ^ unit1152_1[i][3]));
			}
		if(X_contra>0) L[1152][1]=2;
		}
	//Check all rules of unit[1153][0]
	L[1153][0] = LargeX[1153][1]>0 ? 1 : 0;
	satisfiable[1153][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1153_0[i][0] ][ unit1153_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1153_0[i][2] ][ unit1153_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1153_0[i][4] ][ unit1153_0[i][5] ] >0);
		X_contra = ( LargeX[1153][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1153_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1153][1]=0; L[1153][0]=1;}
			satisfiable[1153][0]=satisfiable[1153][0] & ((x[1153] ^ 0) | (x[ unit1153_0[i][0] ] ^ unit1153_0[i][1]) |(x[ unit1153_0[i][2] ] ^ unit1153_0[i][3]));
			}
		if(X_contra>0) L[1153][0]=2;
		}
	//Check all rules of unit[1153][1]
	L[1153][1] = LargeX[1153][0]>0 ? 1 : 0;
	satisfiable[1153][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1153_1[i][0] ][ unit1153_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1153_1[i][2] ][ unit1153_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1153_1[i][4] ][ unit1153_1[i][5] ] >0);
		X_contra = ( LargeX[1153][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1153_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1153][0]=0; L[1153][1]=1;}
			satisfiable[1153][1]=satisfiable[1153][1] & ((x[1153] ^ 1) | (x[ unit1153_1[i][0] ] ^ unit1153_1[i][1]) |(x[ unit1153_1[i][2] ] ^ unit1153_1[i][3]));
			}
		if(X_contra>0) L[1153][1]=2;
		}
	//Check all rules of unit[1154][0]
	L[1154][0] = LargeX[1154][1]>0 ? 1 : 0;
	satisfiable[1154][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1154_0[i][0] ][ unit1154_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1154_0[i][2] ][ unit1154_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1154_0[i][4] ][ unit1154_0[i][5] ] >0);
		X_contra = ( LargeX[1154][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1154_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1154][1]=0; L[1154][0]=1;}
			satisfiable[1154][0]=satisfiable[1154][0] & ((x[1154] ^ 0) | (x[ unit1154_0[i][0] ] ^ unit1154_0[i][1]) |(x[ unit1154_0[i][2] ] ^ unit1154_0[i][3]));
			}
		if(X_contra>0) L[1154][0]=2;
		}
	//Check all rules of unit[1154][1]
	L[1154][1] = LargeX[1154][0]>0 ? 1 : 0;
	satisfiable[1154][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1154_1[i][0] ][ unit1154_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1154_1[i][2] ][ unit1154_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1154_1[i][4] ][ unit1154_1[i][5] ] >0);
		X_contra = ( LargeX[1154][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1154_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1154][0]=0; L[1154][1]=1;}
			satisfiable[1154][1]=satisfiable[1154][1] & ((x[1154] ^ 1) | (x[ unit1154_1[i][0] ] ^ unit1154_1[i][1]) |(x[ unit1154_1[i][2] ] ^ unit1154_1[i][3]));
			}
		if(X_contra>0) L[1154][1]=2;
		}
	//Check all rules of unit[1155][0]
	L[1155][0] = LargeX[1155][1]>0 ? 1 : 0;
	satisfiable[1155][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1155_0[i][0] ][ unit1155_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1155_0[i][2] ][ unit1155_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1155_0[i][4] ][ unit1155_0[i][5] ] >0);
		X_contra = ( LargeX[1155][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1155_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1155][1]=0; L[1155][0]=1;}
			satisfiable[1155][0]=satisfiable[1155][0] & ((x[1155] ^ 0) | (x[ unit1155_0[i][0] ] ^ unit1155_0[i][1]) |(x[ unit1155_0[i][2] ] ^ unit1155_0[i][3]));
			}
		if(X_contra>0) L[1155][0]=2;
		}
	//Check all rules of unit[1155][1]
	L[1155][1] = LargeX[1155][0]>0 ? 1 : 0;
	satisfiable[1155][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1155_1[i][0] ][ unit1155_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1155_1[i][2] ][ unit1155_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1155_1[i][4] ][ unit1155_1[i][5] ] >0);
		X_contra = ( LargeX[1155][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1155_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1155][0]=0; L[1155][1]=1;}
			satisfiable[1155][1]=satisfiable[1155][1] & ((x[1155] ^ 1) | (x[ unit1155_1[i][0] ] ^ unit1155_1[i][1]) |(x[ unit1155_1[i][2] ] ^ unit1155_1[i][3]));
			}
		if(X_contra>0) L[1155][1]=2;
		}
	//Check all rules of unit[1156][0]
	L[1156][0] = LargeX[1156][1]>0 ? 1 : 0;
	satisfiable[1156][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1156_0[i][0] ][ unit1156_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1156_0[i][2] ][ unit1156_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1156_0[i][4] ][ unit1156_0[i][5] ] >0);
		X_contra = ( LargeX[1156][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1156_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1156][1]=0; L[1156][0]=1;}
			satisfiable[1156][0]=satisfiable[1156][0] & ((x[1156] ^ 0) | (x[ unit1156_0[i][0] ] ^ unit1156_0[i][1]) |(x[ unit1156_0[i][2] ] ^ unit1156_0[i][3]));
			}
		if(X_contra>0) L[1156][0]=2;
		}
	//Check all rules of unit[1156][1]
	L[1156][1] = LargeX[1156][0]>0 ? 1 : 0;
	satisfiable[1156][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1156_1[i][0] ][ unit1156_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1156_1[i][2] ][ unit1156_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1156_1[i][4] ][ unit1156_1[i][5] ] >0);
		X_contra = ( LargeX[1156][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1156_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1156][0]=0; L[1156][1]=1;}
			satisfiable[1156][1]=satisfiable[1156][1] & ((x[1156] ^ 1) | (x[ unit1156_1[i][0] ] ^ unit1156_1[i][1]) |(x[ unit1156_1[i][2] ] ^ unit1156_1[i][3]));
			}
		if(X_contra>0) L[1156][1]=2;
		}
	//Check all rules of unit[1157][0]
	L[1157][0] = LargeX[1157][1]>0 ? 1 : 0;
	satisfiable[1157][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1157_0[i][0] ][ unit1157_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1157_0[i][2] ][ unit1157_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1157_0[i][4] ][ unit1157_0[i][5] ] >0);
		X_contra = ( LargeX[1157][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1157_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1157][1]=0; L[1157][0]=1;}
			satisfiable[1157][0]=satisfiable[1157][0] & ((x[1157] ^ 0) | (x[ unit1157_0[i][0] ] ^ unit1157_0[i][1]) |(x[ unit1157_0[i][2] ] ^ unit1157_0[i][3]));
			}
		if(X_contra>0) L[1157][0]=2;
		}
	//Check all rules of unit[1157][1]
	L[1157][1] = LargeX[1157][0]>0 ? 1 : 0;
	satisfiable[1157][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1157_1[i][0] ][ unit1157_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1157_1[i][2] ][ unit1157_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1157_1[i][4] ][ unit1157_1[i][5] ] >0);
		X_contra = ( LargeX[1157][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1157_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1157][0]=0; L[1157][1]=1;}
			satisfiable[1157][1]=satisfiable[1157][1] & ((x[1157] ^ 1) | (x[ unit1157_1[i][0] ] ^ unit1157_1[i][1]) |(x[ unit1157_1[i][2] ] ^ unit1157_1[i][3]));
			}
		if(X_contra>0) L[1157][1]=2;
		}
	//Check all rules of unit[1158][0]
	L[1158][0] = LargeX[1158][1]>0 ? 1 : 0;
	satisfiable[1158][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1158_0[i][0] ][ unit1158_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1158_0[i][2] ][ unit1158_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1158_0[i][4] ][ unit1158_0[i][5] ] >0);
		X_contra = ( LargeX[1158][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1158_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1158][1]=0; L[1158][0]=1;}
			satisfiable[1158][0]=satisfiable[1158][0] & ((x[1158] ^ 0) | (x[ unit1158_0[i][0] ] ^ unit1158_0[i][1]) |(x[ unit1158_0[i][2] ] ^ unit1158_0[i][3]));
			}
		if(X_contra>0) L[1158][0]=2;
		}
	//Check all rules of unit[1158][1]
	L[1158][1] = LargeX[1158][0]>0 ? 1 : 0;
	satisfiable[1158][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1158_1[i][0] ][ unit1158_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1158_1[i][2] ][ unit1158_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1158_1[i][4] ][ unit1158_1[i][5] ] >0);
		X_contra = ( LargeX[1158][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1158_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1158][0]=0; L[1158][1]=1;}
			satisfiable[1158][1]=satisfiable[1158][1] & ((x[1158] ^ 1) | (x[ unit1158_1[i][0] ] ^ unit1158_1[i][1]) |(x[ unit1158_1[i][2] ] ^ unit1158_1[i][3]));
			}
		if(X_contra>0) L[1158][1]=2;
		}
	//Check all rules of unit[1159][0]
	L[1159][0] = LargeX[1159][1]>0 ? 1 : 0;
	satisfiable[1159][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1159_0[i][0] ][ unit1159_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1159_0[i][2] ][ unit1159_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1159_0[i][4] ][ unit1159_0[i][5] ] >0);
		X_contra = ( LargeX[1159][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1159_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1159][1]=0; L[1159][0]=1;}
			satisfiable[1159][0]=satisfiable[1159][0] & ((x[1159] ^ 0) | (x[ unit1159_0[i][0] ] ^ unit1159_0[i][1]) |(x[ unit1159_0[i][2] ] ^ unit1159_0[i][3]));
			}
		if(X_contra>0) L[1159][0]=2;
		}
	//Check all rules of unit[1159][1]
	L[1159][1] = LargeX[1159][0]>0 ? 1 : 0;
	satisfiable[1159][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1159_1[i][0] ][ unit1159_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1159_1[i][2] ][ unit1159_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1159_1[i][4] ][ unit1159_1[i][5] ] >0);
		X_contra = ( LargeX[1159][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1159_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1159][0]=0; L[1159][1]=1;}
			satisfiable[1159][1]=satisfiable[1159][1] & ((x[1159] ^ 1) | (x[ unit1159_1[i][0] ] ^ unit1159_1[i][1]) |(x[ unit1159_1[i][2] ] ^ unit1159_1[i][3]));
			}
		if(X_contra>0) L[1159][1]=2;
		}
	//Check all rules of unit[1160][0]
	L[1160][0] = LargeX[1160][1]>0 ? 1 : 0;
	satisfiable[1160][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1160_0[i][0] ][ unit1160_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1160_0[i][2] ][ unit1160_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1160_0[i][4] ][ unit1160_0[i][5] ] >0);
		X_contra = ( LargeX[1160][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1160_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1160][1]=0; L[1160][0]=1;}
			satisfiable[1160][0]=satisfiable[1160][0] & ((x[1160] ^ 0) | (x[ unit1160_0[i][0] ] ^ unit1160_0[i][1]) |(x[ unit1160_0[i][2] ] ^ unit1160_0[i][3]));
			}
		if(X_contra>0) L[1160][0]=2;
		}
	//Check all rules of unit[1160][1]
	L[1160][1] = LargeX[1160][0]>0 ? 1 : 0;
	satisfiable[1160][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1160_1[i][0] ][ unit1160_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1160_1[i][2] ][ unit1160_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1160_1[i][4] ][ unit1160_1[i][5] ] >0);
		X_contra = ( LargeX[1160][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1160_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1160][0]=0; L[1160][1]=1;}
			satisfiable[1160][1]=satisfiable[1160][1] & ((x[1160] ^ 1) | (x[ unit1160_1[i][0] ] ^ unit1160_1[i][1]) |(x[ unit1160_1[i][2] ] ^ unit1160_1[i][3]));
			}
		if(X_contra>0) L[1160][1]=2;
		}
	//Check all rules of unit[1161][0]
	L[1161][0] = LargeX[1161][1]>0 ? 1 : 0;
	satisfiable[1161][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1161_0[i][0] ][ unit1161_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1161_0[i][2] ][ unit1161_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1161_0[i][4] ][ unit1161_0[i][5] ] >0);
		X_contra = ( LargeX[1161][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1161_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1161][1]=0; L[1161][0]=1;}
			satisfiable[1161][0]=satisfiable[1161][0] & ((x[1161] ^ 0) | (x[ unit1161_0[i][0] ] ^ unit1161_0[i][1]) |(x[ unit1161_0[i][2] ] ^ unit1161_0[i][3]));
			}
		if(X_contra>0) L[1161][0]=2;
		}
	//Check all rules of unit[1161][1]
	L[1161][1] = LargeX[1161][0]>0 ? 1 : 0;
	satisfiable[1161][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1161_1[i][0] ][ unit1161_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1161_1[i][2] ][ unit1161_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1161_1[i][4] ][ unit1161_1[i][5] ] >0);
		X_contra = ( LargeX[1161][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1161_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1161][0]=0; L[1161][1]=1;}
			satisfiable[1161][1]=satisfiable[1161][1] & ((x[1161] ^ 1) | (x[ unit1161_1[i][0] ] ^ unit1161_1[i][1]) |(x[ unit1161_1[i][2] ] ^ unit1161_1[i][3]));
			}
		if(X_contra>0) L[1161][1]=2;
		}
	//Check all rules of unit[1162][0]
	L[1162][0] = LargeX[1162][1]>0 ? 1 : 0;
	satisfiable[1162][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1162_0[i][0] ][ unit1162_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1162_0[i][2] ][ unit1162_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1162_0[i][4] ][ unit1162_0[i][5] ] >0);
		X_contra = ( LargeX[1162][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1162_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1162][1]=0; L[1162][0]=1;}
			satisfiable[1162][0]=satisfiable[1162][0] & ((x[1162] ^ 0) | (x[ unit1162_0[i][0] ] ^ unit1162_0[i][1]) |(x[ unit1162_0[i][2] ] ^ unit1162_0[i][3]));
			}
		if(X_contra>0) L[1162][0]=2;
		}
	//Check all rules of unit[1162][1]
	L[1162][1] = LargeX[1162][0]>0 ? 1 : 0;
	satisfiable[1162][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1162_1[i][0] ][ unit1162_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1162_1[i][2] ][ unit1162_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1162_1[i][4] ][ unit1162_1[i][5] ] >0);
		X_contra = ( LargeX[1162][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1162_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1162][0]=0; L[1162][1]=1;}
			satisfiable[1162][1]=satisfiable[1162][1] & ((x[1162] ^ 1) | (x[ unit1162_1[i][0] ] ^ unit1162_1[i][1]) |(x[ unit1162_1[i][2] ] ^ unit1162_1[i][3]));
			}
		if(X_contra>0) L[1162][1]=2;
		}
	//Check all rules of unit[1163][0]
	L[1163][0] = LargeX[1163][1]>0 ? 1 : 0;
	satisfiable[1163][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1163_0[i][0] ][ unit1163_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1163_0[i][2] ][ unit1163_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1163_0[i][4] ][ unit1163_0[i][5] ] >0);
		X_contra = ( LargeX[1163][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1163_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1163][1]=0; L[1163][0]=1;}
			satisfiable[1163][0]=satisfiable[1163][0] & ((x[1163] ^ 0) | (x[ unit1163_0[i][0] ] ^ unit1163_0[i][1]) |(x[ unit1163_0[i][2] ] ^ unit1163_0[i][3]));
			}
		if(X_contra>0) L[1163][0]=2;
		}
	//Check all rules of unit[1163][1]
	L[1163][1] = LargeX[1163][0]>0 ? 1 : 0;
	satisfiable[1163][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1163_1[i][0] ][ unit1163_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1163_1[i][2] ][ unit1163_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1163_1[i][4] ][ unit1163_1[i][5] ] >0);
		X_contra = ( LargeX[1163][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1163_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1163][0]=0; L[1163][1]=1;}
			satisfiable[1163][1]=satisfiable[1163][1] & ((x[1163] ^ 1) | (x[ unit1163_1[i][0] ] ^ unit1163_1[i][1]) |(x[ unit1163_1[i][2] ] ^ unit1163_1[i][3]));
			}
		if(X_contra>0) L[1163][1]=2;
		}
	//Check all rules of unit[1164][0]
	L[1164][0] = LargeX[1164][1]>0 ? 1 : 0;
	satisfiable[1164][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1164_0[i][0] ][ unit1164_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1164_0[i][2] ][ unit1164_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1164_0[i][4] ][ unit1164_0[i][5] ] >0);
		X_contra = ( LargeX[1164][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1164_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1164][1]=0; L[1164][0]=1;}
			satisfiable[1164][0]=satisfiable[1164][0] & ((x[1164] ^ 0) | (x[ unit1164_0[i][0] ] ^ unit1164_0[i][1]) |(x[ unit1164_0[i][2] ] ^ unit1164_0[i][3]));
			}
		if(X_contra>0) L[1164][0]=2;
		}
	//Check all rules of unit[1164][1]
	L[1164][1] = LargeX[1164][0]>0 ? 1 : 0;
	satisfiable[1164][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1164_1[i][0] ][ unit1164_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1164_1[i][2] ][ unit1164_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1164_1[i][4] ][ unit1164_1[i][5] ] >0);
		X_contra = ( LargeX[1164][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1164_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1164][0]=0; L[1164][1]=1;}
			satisfiable[1164][1]=satisfiable[1164][1] & ((x[1164] ^ 1) | (x[ unit1164_1[i][0] ] ^ unit1164_1[i][1]) |(x[ unit1164_1[i][2] ] ^ unit1164_1[i][3]));
			}
		if(X_contra>0) L[1164][1]=2;
		}
	//Check all rules of unit[1165][0]
	L[1165][0] = LargeX[1165][1]>0 ? 1 : 0;
	satisfiable[1165][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1165_0[i][0] ][ unit1165_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1165_0[i][2] ][ unit1165_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1165_0[i][4] ][ unit1165_0[i][5] ] >0);
		X_contra = ( LargeX[1165][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1165_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1165][1]=0; L[1165][0]=1;}
			satisfiable[1165][0]=satisfiable[1165][0] & ((x[1165] ^ 0) | (x[ unit1165_0[i][0] ] ^ unit1165_0[i][1]) |(x[ unit1165_0[i][2] ] ^ unit1165_0[i][3]));
			}
		if(X_contra>0) L[1165][0]=2;
		}
	//Check all rules of unit[1165][1]
	L[1165][1] = LargeX[1165][0]>0 ? 1 : 0;
	satisfiable[1165][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1165_1[i][0] ][ unit1165_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1165_1[i][2] ][ unit1165_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1165_1[i][4] ][ unit1165_1[i][5] ] >0);
		X_contra = ( LargeX[1165][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1165_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1165][0]=0; L[1165][1]=1;}
			satisfiable[1165][1]=satisfiable[1165][1] & ((x[1165] ^ 1) | (x[ unit1165_1[i][0] ] ^ unit1165_1[i][1]) |(x[ unit1165_1[i][2] ] ^ unit1165_1[i][3]));
			}
		if(X_contra>0) L[1165][1]=2;
		}
	//Check all rules of unit[1166][0]
	L[1166][0] = LargeX[1166][1]>0 ? 1 : 0;
	satisfiable[1166][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1166_0[i][0] ][ unit1166_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1166_0[i][2] ][ unit1166_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1166_0[i][4] ][ unit1166_0[i][5] ] >0);
		X_contra = ( LargeX[1166][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1166_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1166][1]=0; L[1166][0]=1;}
			satisfiable[1166][0]=satisfiable[1166][0] & ((x[1166] ^ 0) | (x[ unit1166_0[i][0] ] ^ unit1166_0[i][1]) |(x[ unit1166_0[i][2] ] ^ unit1166_0[i][3]));
			}
		if(X_contra>0) L[1166][0]=2;
		}
	//Check all rules of unit[1166][1]
	L[1166][1] = LargeX[1166][0]>0 ? 1 : 0;
	satisfiable[1166][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1166_1[i][0] ][ unit1166_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1166_1[i][2] ][ unit1166_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1166_1[i][4] ][ unit1166_1[i][5] ] >0);
		X_contra = ( LargeX[1166][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1166_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1166][0]=0; L[1166][1]=1;}
			satisfiable[1166][1]=satisfiable[1166][1] & ((x[1166] ^ 1) | (x[ unit1166_1[i][0] ] ^ unit1166_1[i][1]) |(x[ unit1166_1[i][2] ] ^ unit1166_1[i][3]));
			}
		if(X_contra>0) L[1166][1]=2;
		}
	//Check all rules of unit[1167][0]
	L[1167][0] = LargeX[1167][1]>0 ? 1 : 0;
	satisfiable[1167][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1167_0[i][0] ][ unit1167_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1167_0[i][2] ][ unit1167_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1167_0[i][4] ][ unit1167_0[i][5] ] >0);
		X_contra = ( LargeX[1167][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1167_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1167][1]=0; L[1167][0]=1;}
			satisfiable[1167][0]=satisfiable[1167][0] & ((x[1167] ^ 0) | (x[ unit1167_0[i][0] ] ^ unit1167_0[i][1]) |(x[ unit1167_0[i][2] ] ^ unit1167_0[i][3]));
			}
		if(X_contra>0) L[1167][0]=2;
		}
	//Check all rules of unit[1167][1]
	L[1167][1] = LargeX[1167][0]>0 ? 1 : 0;
	satisfiable[1167][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1167_1[i][0] ][ unit1167_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1167_1[i][2] ][ unit1167_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1167_1[i][4] ][ unit1167_1[i][5] ] >0);
		X_contra = ( LargeX[1167][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1167_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1167][0]=0; L[1167][1]=1;}
			satisfiable[1167][1]=satisfiable[1167][1] & ((x[1167] ^ 1) | (x[ unit1167_1[i][0] ] ^ unit1167_1[i][1]) |(x[ unit1167_1[i][2] ] ^ unit1167_1[i][3]));
			}
		if(X_contra>0) L[1167][1]=2;
		}
	//Check all rules of unit[1168][0]
	L[1168][0] = LargeX[1168][1]>0 ? 1 : 0;
	satisfiable[1168][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1168_0[i][0] ][ unit1168_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1168_0[i][2] ][ unit1168_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1168_0[i][4] ][ unit1168_0[i][5] ] >0);
		X_contra = ( LargeX[1168][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1168_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1168][1]=0; L[1168][0]=1;}
			satisfiable[1168][0]=satisfiable[1168][0] & ((x[1168] ^ 0) | (x[ unit1168_0[i][0] ] ^ unit1168_0[i][1]) |(x[ unit1168_0[i][2] ] ^ unit1168_0[i][3]));
			}
		if(X_contra>0) L[1168][0]=2;
		}
	//Check all rules of unit[1168][1]
	L[1168][1] = LargeX[1168][0]>0 ? 1 : 0;
	satisfiable[1168][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1168_1[i][0] ][ unit1168_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1168_1[i][2] ][ unit1168_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1168_1[i][4] ][ unit1168_1[i][5] ] >0);
		X_contra = ( LargeX[1168][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1168_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1168][0]=0; L[1168][1]=1;}
			satisfiable[1168][1]=satisfiable[1168][1] & ((x[1168] ^ 1) | (x[ unit1168_1[i][0] ] ^ unit1168_1[i][1]) |(x[ unit1168_1[i][2] ] ^ unit1168_1[i][3]));
			}
		if(X_contra>0) L[1168][1]=2;
		}
	//Check all rules of unit[1169][0]
	L[1169][0] = LargeX[1169][1]>0 ? 1 : 0;
	satisfiable[1169][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1169_0[i][0] ][ unit1169_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1169_0[i][2] ][ unit1169_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1169_0[i][4] ][ unit1169_0[i][5] ] >0);
		X_contra = ( LargeX[1169][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1169_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1169][1]=0; L[1169][0]=1;}
			satisfiable[1169][0]=satisfiable[1169][0] & ((x[1169] ^ 0) | (x[ unit1169_0[i][0] ] ^ unit1169_0[i][1]) |(x[ unit1169_0[i][2] ] ^ unit1169_0[i][3]));
			}
		if(X_contra>0) L[1169][0]=2;
		}
	//Check all rules of unit[1169][1]
	L[1169][1] = LargeX[1169][0]>0 ? 1 : 0;
	satisfiable[1169][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1169_1[i][0] ][ unit1169_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1169_1[i][2] ][ unit1169_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1169_1[i][4] ][ unit1169_1[i][5] ] >0);
		X_contra = ( LargeX[1169][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1169_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1169][0]=0; L[1169][1]=1;}
			satisfiable[1169][1]=satisfiable[1169][1] & ((x[1169] ^ 1) | (x[ unit1169_1[i][0] ] ^ unit1169_1[i][1]) |(x[ unit1169_1[i][2] ] ^ unit1169_1[i][3]));
			}
		if(X_contra>0) L[1169][1]=2;
		}
	//Check all rules of unit[1170][0]
	L[1170][0] = LargeX[1170][1]>0 ? 1 : 0;
	satisfiable[1170][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1170_0[i][0] ][ unit1170_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1170_0[i][2] ][ unit1170_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1170_0[i][4] ][ unit1170_0[i][5] ] >0);
		X_contra = ( LargeX[1170][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1170_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1170][1]=0; L[1170][0]=1;}
			satisfiable[1170][0]=satisfiable[1170][0] & ((x[1170] ^ 0) | (x[ unit1170_0[i][0] ] ^ unit1170_0[i][1]) |(x[ unit1170_0[i][2] ] ^ unit1170_0[i][3]));
			}
		if(X_contra>0) L[1170][0]=2;
		}
	//Check all rules of unit[1170][1]
	L[1170][1] = LargeX[1170][0]>0 ? 1 : 0;
	satisfiable[1170][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1170_1[i][0] ][ unit1170_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1170_1[i][2] ][ unit1170_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1170_1[i][4] ][ unit1170_1[i][5] ] >0);
		X_contra = ( LargeX[1170][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1170_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1170][0]=0; L[1170][1]=1;}
			satisfiable[1170][1]=satisfiable[1170][1] & ((x[1170] ^ 1) | (x[ unit1170_1[i][0] ] ^ unit1170_1[i][1]) |(x[ unit1170_1[i][2] ] ^ unit1170_1[i][3]));
			}
		if(X_contra>0) L[1170][1]=2;
		}
	//Check all rules of unit[1171][0]
	L[1171][0] = LargeX[1171][1]>0 ? 1 : 0;
	satisfiable[1171][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1171_0[i][0] ][ unit1171_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1171_0[i][2] ][ unit1171_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1171_0[i][4] ][ unit1171_0[i][5] ] >0);
		X_contra = ( LargeX[1171][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1171_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1171][1]=0; L[1171][0]=1;}
			satisfiable[1171][0]=satisfiable[1171][0] & ((x[1171] ^ 0) | (x[ unit1171_0[i][0] ] ^ unit1171_0[i][1]) |(x[ unit1171_0[i][2] ] ^ unit1171_0[i][3]));
			}
		if(X_contra>0) L[1171][0]=2;
		}
	//Check all rules of unit[1171][1]
	L[1171][1] = LargeX[1171][0]>0 ? 1 : 0;
	satisfiable[1171][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1171_1[i][0] ][ unit1171_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1171_1[i][2] ][ unit1171_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1171_1[i][4] ][ unit1171_1[i][5] ] >0);
		X_contra = ( LargeX[1171][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1171_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1171][0]=0; L[1171][1]=1;}
			satisfiable[1171][1]=satisfiable[1171][1] & ((x[1171] ^ 1) | (x[ unit1171_1[i][0] ] ^ unit1171_1[i][1]) |(x[ unit1171_1[i][2] ] ^ unit1171_1[i][3]));
			}
		if(X_contra>0) L[1171][1]=2;
		}
	//Check all rules of unit[1172][0]
	L[1172][0] = LargeX[1172][1]>0 ? 1 : 0;
	satisfiable[1172][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1172_0[i][0] ][ unit1172_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1172_0[i][2] ][ unit1172_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1172_0[i][4] ][ unit1172_0[i][5] ] >0);
		X_contra = ( LargeX[1172][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1172_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1172][1]=0; L[1172][0]=1;}
			satisfiable[1172][0]=satisfiable[1172][0] & ((x[1172] ^ 0) | (x[ unit1172_0[i][0] ] ^ unit1172_0[i][1]) |(x[ unit1172_0[i][2] ] ^ unit1172_0[i][3]));
			}
		if(X_contra>0) L[1172][0]=2;
		}
	//Check all rules of unit[1172][1]
	L[1172][1] = LargeX[1172][0]>0 ? 1 : 0;
	satisfiable[1172][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1172_1[i][0] ][ unit1172_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1172_1[i][2] ][ unit1172_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1172_1[i][4] ][ unit1172_1[i][5] ] >0);
		X_contra = ( LargeX[1172][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1172_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1172][0]=0; L[1172][1]=1;}
			satisfiable[1172][1]=satisfiable[1172][1] & ((x[1172] ^ 1) | (x[ unit1172_1[i][0] ] ^ unit1172_1[i][1]) |(x[ unit1172_1[i][2] ] ^ unit1172_1[i][3]));
			}
		if(X_contra>0) L[1172][1]=2;
		}
	//Check all rules of unit[1173][0]
	L[1173][0] = LargeX[1173][1]>0 ? 1 : 0;
	satisfiable[1173][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1173_0[i][0] ][ unit1173_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1173_0[i][2] ][ unit1173_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1173_0[i][4] ][ unit1173_0[i][5] ] >0);
		X_contra = ( LargeX[1173][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1173_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1173][1]=0; L[1173][0]=1;}
			satisfiable[1173][0]=satisfiable[1173][0] & ((x[1173] ^ 0) | (x[ unit1173_0[i][0] ] ^ unit1173_0[i][1]) |(x[ unit1173_0[i][2] ] ^ unit1173_0[i][3]));
			}
		if(X_contra>0) L[1173][0]=2;
		}
	//Check all rules of unit[1173][1]
	L[1173][1] = LargeX[1173][0]>0 ? 1 : 0;
	satisfiable[1173][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1173_1[i][0] ][ unit1173_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1173_1[i][2] ][ unit1173_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1173_1[i][4] ][ unit1173_1[i][5] ] >0);
		X_contra = ( LargeX[1173][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1173_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1173][0]=0; L[1173][1]=1;}
			satisfiable[1173][1]=satisfiable[1173][1] & ((x[1173] ^ 1) | (x[ unit1173_1[i][0] ] ^ unit1173_1[i][1]) |(x[ unit1173_1[i][2] ] ^ unit1173_1[i][3]));
			}
		if(X_contra>0) L[1173][1]=2;
		}
	//Check all rules of unit[1174][0]
	L[1174][0] = LargeX[1174][1]>0 ? 1 : 0;
	satisfiable[1174][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1174_0[i][0] ][ unit1174_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1174_0[i][2] ][ unit1174_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1174_0[i][4] ][ unit1174_0[i][5] ] >0);
		X_contra = ( LargeX[1174][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1174_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1174][1]=0; L[1174][0]=1;}
			satisfiable[1174][0]=satisfiable[1174][0] & ((x[1174] ^ 0) | (x[ unit1174_0[i][0] ] ^ unit1174_0[i][1]) |(x[ unit1174_0[i][2] ] ^ unit1174_0[i][3]));
			}
		if(X_contra>0) L[1174][0]=2;
		}
	//Check all rules of unit[1174][1]
	L[1174][1] = LargeX[1174][0]>0 ? 1 : 0;
	satisfiable[1174][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1174_1[i][0] ][ unit1174_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1174_1[i][2] ][ unit1174_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1174_1[i][4] ][ unit1174_1[i][5] ] >0);
		X_contra = ( LargeX[1174][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1174_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1174][0]=0; L[1174][1]=1;}
			satisfiable[1174][1]=satisfiable[1174][1] & ((x[1174] ^ 1) | (x[ unit1174_1[i][0] ] ^ unit1174_1[i][1]) |(x[ unit1174_1[i][2] ] ^ unit1174_1[i][3]));
			}
		if(X_contra>0) L[1174][1]=2;
		}
	//Check all rules of unit[1175][0]
	L[1175][0] = LargeX[1175][1]>0 ? 1 : 0;
	satisfiable[1175][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1175_0[i][0] ][ unit1175_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1175_0[i][2] ][ unit1175_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1175_0[i][4] ][ unit1175_0[i][5] ] >0);
		X_contra = ( LargeX[1175][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1175_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1175][1]=0; L[1175][0]=1;}
			satisfiable[1175][0]=satisfiable[1175][0] & ((x[1175] ^ 0) | (x[ unit1175_0[i][0] ] ^ unit1175_0[i][1]) |(x[ unit1175_0[i][2] ] ^ unit1175_0[i][3]));
			}
		if(X_contra>0) L[1175][0]=2;
		}
	//Check all rules of unit[1175][1]
	L[1175][1] = LargeX[1175][0]>0 ? 1 : 0;
	satisfiable[1175][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1175_1[i][0] ][ unit1175_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1175_1[i][2] ][ unit1175_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1175_1[i][4] ][ unit1175_1[i][5] ] >0);
		X_contra = ( LargeX[1175][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1175_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1175][0]=0; L[1175][1]=1;}
			satisfiable[1175][1]=satisfiable[1175][1] & ((x[1175] ^ 1) | (x[ unit1175_1[i][0] ] ^ unit1175_1[i][1]) |(x[ unit1175_1[i][2] ] ^ unit1175_1[i][3]));
			}
		if(X_contra>0) L[1175][1]=2;
		}
	//Check all rules of unit[1176][0]
	L[1176][0] = LargeX[1176][1]>0 ? 1 : 0;
	satisfiable[1176][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1176_0[i][0] ][ unit1176_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1176_0[i][2] ][ unit1176_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1176_0[i][4] ][ unit1176_0[i][5] ] >0);
		X_contra = ( LargeX[1176][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1176_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1176][1]=0; L[1176][0]=1;}
			satisfiable[1176][0]=satisfiable[1176][0] & ((x[1176] ^ 0) | (x[ unit1176_0[i][0] ] ^ unit1176_0[i][1]) |(x[ unit1176_0[i][2] ] ^ unit1176_0[i][3]));
			}
		if(X_contra>0) L[1176][0]=2;
		}
	//Check all rules of unit[1176][1]
	L[1176][1] = LargeX[1176][0]>0 ? 1 : 0;
	satisfiable[1176][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1176_1[i][0] ][ unit1176_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1176_1[i][2] ][ unit1176_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1176_1[i][4] ][ unit1176_1[i][5] ] >0);
		X_contra = ( LargeX[1176][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1176_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1176][0]=0; L[1176][1]=1;}
			satisfiable[1176][1]=satisfiable[1176][1] & ((x[1176] ^ 1) | (x[ unit1176_1[i][0] ] ^ unit1176_1[i][1]) |(x[ unit1176_1[i][2] ] ^ unit1176_1[i][3]));
			}
		if(X_contra>0) L[1176][1]=2;
		}
	//Check all rules of unit[1177][0]
	L[1177][0] = LargeX[1177][1]>0 ? 1 : 0;
	satisfiable[1177][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1177_0[i][0] ][ unit1177_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1177_0[i][2] ][ unit1177_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1177_0[i][4] ][ unit1177_0[i][5] ] >0);
		X_contra = ( LargeX[1177][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1177_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1177][1]=0; L[1177][0]=1;}
			satisfiable[1177][0]=satisfiable[1177][0] & ((x[1177] ^ 0) | (x[ unit1177_0[i][0] ] ^ unit1177_0[i][1]) |(x[ unit1177_0[i][2] ] ^ unit1177_0[i][3]));
			}
		if(X_contra>0) L[1177][0]=2;
		}
	//Check all rules of unit[1177][1]
	L[1177][1] = LargeX[1177][0]>0 ? 1 : 0;
	satisfiable[1177][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1177_1[i][0] ][ unit1177_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1177_1[i][2] ][ unit1177_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1177_1[i][4] ][ unit1177_1[i][5] ] >0);
		X_contra = ( LargeX[1177][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1177_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1177][0]=0; L[1177][1]=1;}
			satisfiable[1177][1]=satisfiable[1177][1] & ((x[1177] ^ 1) | (x[ unit1177_1[i][0] ] ^ unit1177_1[i][1]) |(x[ unit1177_1[i][2] ] ^ unit1177_1[i][3]));
			}
		if(X_contra>0) L[1177][1]=2;
		}
	//Check all rules of unit[1178][0]
	L[1178][0] = LargeX[1178][1]>0 ? 1 : 0;
	satisfiable[1178][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1178_0[i][0] ][ unit1178_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1178_0[i][2] ][ unit1178_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1178_0[i][4] ][ unit1178_0[i][5] ] >0);
		X_contra = ( LargeX[1178][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1178_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1178][1]=0; L[1178][0]=1;}
			satisfiable[1178][0]=satisfiable[1178][0] & ((x[1178] ^ 0) | (x[ unit1178_0[i][0] ] ^ unit1178_0[i][1]) |(x[ unit1178_0[i][2] ] ^ unit1178_0[i][3]));
			}
		if(X_contra>0) L[1178][0]=2;
		}
	//Check all rules of unit[1178][1]
	L[1178][1] = LargeX[1178][0]>0 ? 1 : 0;
	satisfiable[1178][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1178_1[i][0] ][ unit1178_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1178_1[i][2] ][ unit1178_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1178_1[i][4] ][ unit1178_1[i][5] ] >0);
		X_contra = ( LargeX[1178][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1178_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1178][0]=0; L[1178][1]=1;}
			satisfiable[1178][1]=satisfiable[1178][1] & ((x[1178] ^ 1) | (x[ unit1178_1[i][0] ] ^ unit1178_1[i][1]) |(x[ unit1178_1[i][2] ] ^ unit1178_1[i][3]));
			}
		if(X_contra>0) L[1178][1]=2;
		}
	//Check all rules of unit[1179][0]
	L[1179][0] = LargeX[1179][1]>0 ? 1 : 0;
	satisfiable[1179][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1179_0[i][0] ][ unit1179_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1179_0[i][2] ][ unit1179_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1179_0[i][4] ][ unit1179_0[i][5] ] >0);
		X_contra = ( LargeX[1179][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1179_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1179][1]=0; L[1179][0]=1;}
			satisfiable[1179][0]=satisfiable[1179][0] & ((x[1179] ^ 0) | (x[ unit1179_0[i][0] ] ^ unit1179_0[i][1]) |(x[ unit1179_0[i][2] ] ^ unit1179_0[i][3]));
			}
		if(X_contra>0) L[1179][0]=2;
		}
	//Check all rules of unit[1179][1]
	L[1179][1] = LargeX[1179][0]>0 ? 1 : 0;
	satisfiable[1179][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1179_1[i][0] ][ unit1179_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1179_1[i][2] ][ unit1179_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1179_1[i][4] ][ unit1179_1[i][5] ] >0);
		X_contra = ( LargeX[1179][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1179_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1179][0]=0; L[1179][1]=1;}
			satisfiable[1179][1]=satisfiable[1179][1] & ((x[1179] ^ 1) | (x[ unit1179_1[i][0] ] ^ unit1179_1[i][1]) |(x[ unit1179_1[i][2] ] ^ unit1179_1[i][3]));
			}
		if(X_contra>0) L[1179][1]=2;
		}
	//Check all rules of unit[1180][0]
	L[1180][0] = LargeX[1180][1]>0 ? 1 : 0;
	satisfiable[1180][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1180_0[i][0] ][ unit1180_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1180_0[i][2] ][ unit1180_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1180_0[i][4] ][ unit1180_0[i][5] ] >0);
		X_contra = ( LargeX[1180][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1180_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1180][1]=0; L[1180][0]=1;}
			satisfiable[1180][0]=satisfiable[1180][0] & ((x[1180] ^ 0) | (x[ unit1180_0[i][0] ] ^ unit1180_0[i][1]) |(x[ unit1180_0[i][2] ] ^ unit1180_0[i][3]));
			}
		if(X_contra>0) L[1180][0]=2;
		}
	//Check all rules of unit[1180][1]
	L[1180][1] = LargeX[1180][0]>0 ? 1 : 0;
	satisfiable[1180][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1180_1[i][0] ][ unit1180_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1180_1[i][2] ][ unit1180_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1180_1[i][4] ][ unit1180_1[i][5] ] >0);
		X_contra = ( LargeX[1180][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1180_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1180][0]=0; L[1180][1]=1;}
			satisfiable[1180][1]=satisfiable[1180][1] & ((x[1180] ^ 1) | (x[ unit1180_1[i][0] ] ^ unit1180_1[i][1]) |(x[ unit1180_1[i][2] ] ^ unit1180_1[i][3]));
			}
		if(X_contra>0) L[1180][1]=2;
		}
	//Check all rules of unit[1181][0]
	L[1181][0] = LargeX[1181][1]>0 ? 1 : 0;
	satisfiable[1181][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1181_0[i][0] ][ unit1181_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1181_0[i][2] ][ unit1181_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1181_0[i][4] ][ unit1181_0[i][5] ] >0);
		X_contra = ( LargeX[1181][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1181_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1181][1]=0; L[1181][0]=1;}
			satisfiable[1181][0]=satisfiable[1181][0] & ((x[1181] ^ 0) | (x[ unit1181_0[i][0] ] ^ unit1181_0[i][1]) |(x[ unit1181_0[i][2] ] ^ unit1181_0[i][3]));
			}
		if(X_contra>0) L[1181][0]=2;
		}
	//Check all rules of unit[1181][1]
	L[1181][1] = LargeX[1181][0]>0 ? 1 : 0;
	satisfiable[1181][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1181_1[i][0] ][ unit1181_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1181_1[i][2] ][ unit1181_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1181_1[i][4] ][ unit1181_1[i][5] ] >0);
		X_contra = ( LargeX[1181][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1181_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1181][0]=0; L[1181][1]=1;}
			satisfiable[1181][1]=satisfiable[1181][1] & ((x[1181] ^ 1) | (x[ unit1181_1[i][0] ] ^ unit1181_1[i][1]) |(x[ unit1181_1[i][2] ] ^ unit1181_1[i][3]));
			}
		if(X_contra>0) L[1181][1]=2;
		}
	//Check all rules of unit[1182][0]
	L[1182][0] = LargeX[1182][1]>0 ? 1 : 0;
	satisfiable[1182][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1182_0[i][0] ][ unit1182_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1182_0[i][2] ][ unit1182_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1182_0[i][4] ][ unit1182_0[i][5] ] >0);
		X_contra = ( LargeX[1182][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1182_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1182][1]=0; L[1182][0]=1;}
			satisfiable[1182][0]=satisfiable[1182][0] & ((x[1182] ^ 0) | (x[ unit1182_0[i][0] ] ^ unit1182_0[i][1]) |(x[ unit1182_0[i][2] ] ^ unit1182_0[i][3]));
			}
		if(X_contra>0) L[1182][0]=2;
		}
	//Check all rules of unit[1182][1]
	L[1182][1] = LargeX[1182][0]>0 ? 1 : 0;
	satisfiable[1182][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1182_1[i][0] ][ unit1182_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1182_1[i][2] ][ unit1182_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1182_1[i][4] ][ unit1182_1[i][5] ] >0);
		X_contra = ( LargeX[1182][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1182_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1182][0]=0; L[1182][1]=1;}
			satisfiable[1182][1]=satisfiable[1182][1] & ((x[1182] ^ 1) | (x[ unit1182_1[i][0] ] ^ unit1182_1[i][1]) |(x[ unit1182_1[i][2] ] ^ unit1182_1[i][3]));
			}
		if(X_contra>0) L[1182][1]=2;
		}
	//Check all rules of unit[1183][0]
	L[1183][0] = LargeX[1183][1]>0 ? 1 : 0;
	satisfiable[1183][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1183_0[i][0] ][ unit1183_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1183_0[i][2] ][ unit1183_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1183_0[i][4] ][ unit1183_0[i][5] ] >0);
		X_contra = ( LargeX[1183][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1183_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1183][1]=0; L[1183][0]=1;}
			satisfiable[1183][0]=satisfiable[1183][0] & ((x[1183] ^ 0) | (x[ unit1183_0[i][0] ] ^ unit1183_0[i][1]) |(x[ unit1183_0[i][2] ] ^ unit1183_0[i][3]));
			}
		if(X_contra>0) L[1183][0]=2;
		}
	//Check all rules of unit[1183][1]
	L[1183][1] = LargeX[1183][0]>0 ? 1 : 0;
	satisfiable[1183][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1183_1[i][0] ][ unit1183_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1183_1[i][2] ][ unit1183_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1183_1[i][4] ][ unit1183_1[i][5] ] >0);
		X_contra = ( LargeX[1183][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1183_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1183][0]=0; L[1183][1]=1;}
			satisfiable[1183][1]=satisfiable[1183][1] & ((x[1183] ^ 1) | (x[ unit1183_1[i][0] ] ^ unit1183_1[i][1]) |(x[ unit1183_1[i][2] ] ^ unit1183_1[i][3]));
			}
		if(X_contra>0) L[1183][1]=2;
		}
	//Check all rules of unit[1184][0]
	L[1184][0] = LargeX[1184][1]>0 ? 1 : 0;
	satisfiable[1184][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1184_0[i][0] ][ unit1184_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1184_0[i][2] ][ unit1184_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1184_0[i][4] ][ unit1184_0[i][5] ] >0);
		X_contra = ( LargeX[1184][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1184_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1184][1]=0; L[1184][0]=1;}
			satisfiable[1184][0]=satisfiable[1184][0] & ((x[1184] ^ 0) | (x[ unit1184_0[i][0] ] ^ unit1184_0[i][1]) |(x[ unit1184_0[i][2] ] ^ unit1184_0[i][3]));
			}
		if(X_contra>0) L[1184][0]=2;
		}
	//Check all rules of unit[1184][1]
	L[1184][1] = LargeX[1184][0]>0 ? 1 : 0;
	satisfiable[1184][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1184_1[i][0] ][ unit1184_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1184_1[i][2] ][ unit1184_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1184_1[i][4] ][ unit1184_1[i][5] ] >0);
		X_contra = ( LargeX[1184][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1184_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1184][0]=0; L[1184][1]=1;}
			satisfiable[1184][1]=satisfiable[1184][1] & ((x[1184] ^ 1) | (x[ unit1184_1[i][0] ] ^ unit1184_1[i][1]) |(x[ unit1184_1[i][2] ] ^ unit1184_1[i][3]));
			}
		if(X_contra>0) L[1184][1]=2;
		}
	//Check all rules of unit[1185][0]
	L[1185][0] = LargeX[1185][1]>0 ? 1 : 0;
	satisfiable[1185][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1185_0[i][0] ][ unit1185_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1185_0[i][2] ][ unit1185_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1185_0[i][4] ][ unit1185_0[i][5] ] >0);
		X_contra = ( LargeX[1185][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1185_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1185][1]=0; L[1185][0]=1;}
			satisfiable[1185][0]=satisfiable[1185][0] & ((x[1185] ^ 0) | (x[ unit1185_0[i][0] ] ^ unit1185_0[i][1]) |(x[ unit1185_0[i][2] ] ^ unit1185_0[i][3]));
			}
		if(X_contra>0) L[1185][0]=2;
		}
	//Check all rules of unit[1185][1]
	L[1185][1] = LargeX[1185][0]>0 ? 1 : 0;
	satisfiable[1185][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1185_1[i][0] ][ unit1185_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1185_1[i][2] ][ unit1185_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1185_1[i][4] ][ unit1185_1[i][5] ] >0);
		X_contra = ( LargeX[1185][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1185_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1185][0]=0; L[1185][1]=1;}
			satisfiable[1185][1]=satisfiable[1185][1] & ((x[1185] ^ 1) | (x[ unit1185_1[i][0] ] ^ unit1185_1[i][1]) |(x[ unit1185_1[i][2] ] ^ unit1185_1[i][3]));
			}
		if(X_contra>0) L[1185][1]=2;
		}
	//Check all rules of unit[1186][0]
	L[1186][0] = LargeX[1186][1]>0 ? 1 : 0;
	satisfiable[1186][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1186_0[i][0] ][ unit1186_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1186_0[i][2] ][ unit1186_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1186_0[i][4] ][ unit1186_0[i][5] ] >0);
		X_contra = ( LargeX[1186][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1186_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1186][1]=0; L[1186][0]=1;}
			satisfiable[1186][0]=satisfiable[1186][0] & ((x[1186] ^ 0) | (x[ unit1186_0[i][0] ] ^ unit1186_0[i][1]) |(x[ unit1186_0[i][2] ] ^ unit1186_0[i][3]));
			}
		if(X_contra>0) L[1186][0]=2;
		}
	//Check all rules of unit[1186][1]
	L[1186][1] = LargeX[1186][0]>0 ? 1 : 0;
	satisfiable[1186][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1186_1[i][0] ][ unit1186_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1186_1[i][2] ][ unit1186_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1186_1[i][4] ][ unit1186_1[i][5] ] >0);
		X_contra = ( LargeX[1186][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1186_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1186][0]=0; L[1186][1]=1;}
			satisfiable[1186][1]=satisfiable[1186][1] & ((x[1186] ^ 1) | (x[ unit1186_1[i][0] ] ^ unit1186_1[i][1]) |(x[ unit1186_1[i][2] ] ^ unit1186_1[i][3]));
			}
		if(X_contra>0) L[1186][1]=2;
		}
	//Check all rules of unit[1187][0]
	L[1187][0] = LargeX[1187][1]>0 ? 1 : 0;
	satisfiable[1187][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1187_0[i][0] ][ unit1187_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1187_0[i][2] ][ unit1187_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1187_0[i][4] ][ unit1187_0[i][5] ] >0);
		X_contra = ( LargeX[1187][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1187_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1187][1]=0; L[1187][0]=1;}
			satisfiable[1187][0]=satisfiable[1187][0] & ((x[1187] ^ 0) | (x[ unit1187_0[i][0] ] ^ unit1187_0[i][1]) |(x[ unit1187_0[i][2] ] ^ unit1187_0[i][3]));
			}
		if(X_contra>0) L[1187][0]=2;
		}
	//Check all rules of unit[1187][1]
	L[1187][1] = LargeX[1187][0]>0 ? 1 : 0;
	satisfiable[1187][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1187_1[i][0] ][ unit1187_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1187_1[i][2] ][ unit1187_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1187_1[i][4] ][ unit1187_1[i][5] ] >0);
		X_contra = ( LargeX[1187][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1187_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1187][0]=0; L[1187][1]=1;}
			satisfiable[1187][1]=satisfiable[1187][1] & ((x[1187] ^ 1) | (x[ unit1187_1[i][0] ] ^ unit1187_1[i][1]) |(x[ unit1187_1[i][2] ] ^ unit1187_1[i][3]));
			}
		if(X_contra>0) L[1187][1]=2;
		}
	//Check all rules of unit[1188][0]
	L[1188][0] = LargeX[1188][1]>0 ? 1 : 0;
	satisfiable[1188][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1188_0[i][0] ][ unit1188_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1188_0[i][2] ][ unit1188_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1188_0[i][4] ][ unit1188_0[i][5] ] >0);
		X_contra = ( LargeX[1188][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1188_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1188][1]=0; L[1188][0]=1;}
			satisfiable[1188][0]=satisfiable[1188][0] & ((x[1188] ^ 0) | (x[ unit1188_0[i][0] ] ^ unit1188_0[i][1]) |(x[ unit1188_0[i][2] ] ^ unit1188_0[i][3]));
			}
		if(X_contra>0) L[1188][0]=2;
		}
	//Check all rules of unit[1188][1]
	L[1188][1] = LargeX[1188][0]>0 ? 1 : 0;
	satisfiable[1188][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1188_1[i][0] ][ unit1188_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1188_1[i][2] ][ unit1188_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1188_1[i][4] ][ unit1188_1[i][5] ] >0);
		X_contra = ( LargeX[1188][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1188_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1188][0]=0; L[1188][1]=1;}
			satisfiable[1188][1]=satisfiable[1188][1] & ((x[1188] ^ 1) | (x[ unit1188_1[i][0] ] ^ unit1188_1[i][1]) |(x[ unit1188_1[i][2] ] ^ unit1188_1[i][3]));
			}
		if(X_contra>0) L[1188][1]=2;
		}
	//Check all rules of unit[1189][0]
	L[1189][0] = LargeX[1189][1]>0 ? 1 : 0;
	satisfiable[1189][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1189_0[i][0] ][ unit1189_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1189_0[i][2] ][ unit1189_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1189_0[i][4] ][ unit1189_0[i][5] ] >0);
		X_contra = ( LargeX[1189][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1189_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1189][1]=0; L[1189][0]=1;}
			satisfiable[1189][0]=satisfiable[1189][0] & ((x[1189] ^ 0) | (x[ unit1189_0[i][0] ] ^ unit1189_0[i][1]) |(x[ unit1189_0[i][2] ] ^ unit1189_0[i][3]));
			}
		if(X_contra>0) L[1189][0]=2;
		}
	//Check all rules of unit[1189][1]
	L[1189][1] = LargeX[1189][0]>0 ? 1 : 0;
	satisfiable[1189][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1189_1[i][0] ][ unit1189_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1189_1[i][2] ][ unit1189_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1189_1[i][4] ][ unit1189_1[i][5] ] >0);
		X_contra = ( LargeX[1189][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1189_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1189][0]=0; L[1189][1]=1;}
			satisfiable[1189][1]=satisfiable[1189][1] & ((x[1189] ^ 1) | (x[ unit1189_1[i][0] ] ^ unit1189_1[i][1]) |(x[ unit1189_1[i][2] ] ^ unit1189_1[i][3]));
			}
		if(X_contra>0) L[1189][1]=2;
		}
	//Check all rules of unit[1190][0]
	L[1190][0] = LargeX[1190][1]>0 ? 1 : 0;
	satisfiable[1190][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1190_0[i][0] ][ unit1190_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1190_0[i][2] ][ unit1190_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1190_0[i][4] ][ unit1190_0[i][5] ] >0);
		X_contra = ( LargeX[1190][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1190_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1190][1]=0; L[1190][0]=1;}
			satisfiable[1190][0]=satisfiable[1190][0] & ((x[1190] ^ 0) | (x[ unit1190_0[i][0] ] ^ unit1190_0[i][1]) |(x[ unit1190_0[i][2] ] ^ unit1190_0[i][3]));
			}
		if(X_contra>0) L[1190][0]=2;
		}
	//Check all rules of unit[1190][1]
	L[1190][1] = LargeX[1190][0]>0 ? 1 : 0;
	satisfiable[1190][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1190_1[i][0] ][ unit1190_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1190_1[i][2] ][ unit1190_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1190_1[i][4] ][ unit1190_1[i][5] ] >0);
		X_contra = ( LargeX[1190][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1190_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1190][0]=0; L[1190][1]=1;}
			satisfiable[1190][1]=satisfiable[1190][1] & ((x[1190] ^ 1) | (x[ unit1190_1[i][0] ] ^ unit1190_1[i][1]) |(x[ unit1190_1[i][2] ] ^ unit1190_1[i][3]));
			}
		if(X_contra>0) L[1190][1]=2;
		}
	//Check all rules of unit[1191][0]
	L[1191][0] = LargeX[1191][1]>0 ? 1 : 0;
	satisfiable[1191][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1191_0[i][0] ][ unit1191_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1191_0[i][2] ][ unit1191_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1191_0[i][4] ][ unit1191_0[i][5] ] >0);
		X_contra = ( LargeX[1191][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1191_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1191][1]=0; L[1191][0]=1;}
			satisfiable[1191][0]=satisfiable[1191][0] & ((x[1191] ^ 0) | (x[ unit1191_0[i][0] ] ^ unit1191_0[i][1]) |(x[ unit1191_0[i][2] ] ^ unit1191_0[i][3]));
			}
		if(X_contra>0) L[1191][0]=2;
		}
	//Check all rules of unit[1191][1]
	L[1191][1] = LargeX[1191][0]>0 ? 1 : 0;
	satisfiable[1191][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1191_1[i][0] ][ unit1191_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1191_1[i][2] ][ unit1191_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1191_1[i][4] ][ unit1191_1[i][5] ] >0);
		X_contra = ( LargeX[1191][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1191_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1191][0]=0; L[1191][1]=1;}
			satisfiable[1191][1]=satisfiable[1191][1] & ((x[1191] ^ 1) | (x[ unit1191_1[i][0] ] ^ unit1191_1[i][1]) |(x[ unit1191_1[i][2] ] ^ unit1191_1[i][3]));
			}
		if(X_contra>0) L[1191][1]=2;
		}
	//Check all rules of unit[1192][0]
	L[1192][0] = LargeX[1192][1]>0 ? 1 : 0;
	satisfiable[1192][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1192_0[i][0] ][ unit1192_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1192_0[i][2] ][ unit1192_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1192_0[i][4] ][ unit1192_0[i][5] ] >0);
		X_contra = ( LargeX[1192][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1192_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1192][1]=0; L[1192][0]=1;}
			satisfiable[1192][0]=satisfiable[1192][0] & ((x[1192] ^ 0) | (x[ unit1192_0[i][0] ] ^ unit1192_0[i][1]) |(x[ unit1192_0[i][2] ] ^ unit1192_0[i][3]));
			}
		if(X_contra>0) L[1192][0]=2;
		}
	//Check all rules of unit[1192][1]
	L[1192][1] = LargeX[1192][0]>0 ? 1 : 0;
	satisfiable[1192][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1192_1[i][0] ][ unit1192_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1192_1[i][2] ][ unit1192_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1192_1[i][4] ][ unit1192_1[i][5] ] >0);
		X_contra = ( LargeX[1192][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1192_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1192][0]=0; L[1192][1]=1;}
			satisfiable[1192][1]=satisfiable[1192][1] & ((x[1192] ^ 1) | (x[ unit1192_1[i][0] ] ^ unit1192_1[i][1]) |(x[ unit1192_1[i][2] ] ^ unit1192_1[i][3]));
			}
		if(X_contra>0) L[1192][1]=2;
		}
	//Check all rules of unit[1193][0]
	L[1193][0] = LargeX[1193][1]>0 ? 1 : 0;
	satisfiable[1193][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1193_0[i][0] ][ unit1193_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1193_0[i][2] ][ unit1193_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1193_0[i][4] ][ unit1193_0[i][5] ] >0);
		X_contra = ( LargeX[1193][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1193_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1193][1]=0; L[1193][0]=1;}
			satisfiable[1193][0]=satisfiable[1193][0] & ((x[1193] ^ 0) | (x[ unit1193_0[i][0] ] ^ unit1193_0[i][1]) |(x[ unit1193_0[i][2] ] ^ unit1193_0[i][3]));
			}
		if(X_contra>0) L[1193][0]=2;
		}
	//Check all rules of unit[1193][1]
	L[1193][1] = LargeX[1193][0]>0 ? 1 : 0;
	satisfiable[1193][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1193_1[i][0] ][ unit1193_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1193_1[i][2] ][ unit1193_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1193_1[i][4] ][ unit1193_1[i][5] ] >0);
		X_contra = ( LargeX[1193][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1193_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1193][0]=0; L[1193][1]=1;}
			satisfiable[1193][1]=satisfiable[1193][1] & ((x[1193] ^ 1) | (x[ unit1193_1[i][0] ] ^ unit1193_1[i][1]) |(x[ unit1193_1[i][2] ] ^ unit1193_1[i][3]));
			}
		if(X_contra>0) L[1193][1]=2;
		}
	//Check all rules of unit[1194][0]
	L[1194][0] = LargeX[1194][1]>0 ? 1 : 0;
	satisfiable[1194][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1194_0[i][0] ][ unit1194_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1194_0[i][2] ][ unit1194_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1194_0[i][4] ][ unit1194_0[i][5] ] >0);
		X_contra = ( LargeX[1194][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1194_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1194][1]=0; L[1194][0]=1;}
			satisfiable[1194][0]=satisfiable[1194][0] & ((x[1194] ^ 0) | (x[ unit1194_0[i][0] ] ^ unit1194_0[i][1]) |(x[ unit1194_0[i][2] ] ^ unit1194_0[i][3]));
			}
		if(X_contra>0) L[1194][0]=2;
		}
	//Check all rules of unit[1194][1]
	L[1194][1] = LargeX[1194][0]>0 ? 1 : 0;
	satisfiable[1194][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1194_1[i][0] ][ unit1194_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1194_1[i][2] ][ unit1194_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1194_1[i][4] ][ unit1194_1[i][5] ] >0);
		X_contra = ( LargeX[1194][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1194_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1194][0]=0; L[1194][1]=1;}
			satisfiable[1194][1]=satisfiable[1194][1] & ((x[1194] ^ 1) | (x[ unit1194_1[i][0] ] ^ unit1194_1[i][1]) |(x[ unit1194_1[i][2] ] ^ unit1194_1[i][3]));
			}
		if(X_contra>0) L[1194][1]=2;
		}
	//Check all rules of unit[1195][0]
	L[1195][0] = LargeX[1195][1]>0 ? 1 : 0;
	satisfiable[1195][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1195_0[i][0] ][ unit1195_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1195_0[i][2] ][ unit1195_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1195_0[i][4] ][ unit1195_0[i][5] ] >0);
		X_contra = ( LargeX[1195][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1195_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1195][1]=0; L[1195][0]=1;}
			satisfiable[1195][0]=satisfiable[1195][0] & ((x[1195] ^ 0) | (x[ unit1195_0[i][0] ] ^ unit1195_0[i][1]) |(x[ unit1195_0[i][2] ] ^ unit1195_0[i][3]));
			}
		if(X_contra>0) L[1195][0]=2;
		}
	//Check all rules of unit[1195][1]
	L[1195][1] = LargeX[1195][0]>0 ? 1 : 0;
	satisfiable[1195][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1195_1[i][0] ][ unit1195_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1195_1[i][2] ][ unit1195_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1195_1[i][4] ][ unit1195_1[i][5] ] >0);
		X_contra = ( LargeX[1195][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1195_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1195][0]=0; L[1195][1]=1;}
			satisfiable[1195][1]=satisfiable[1195][1] & ((x[1195] ^ 1) | (x[ unit1195_1[i][0] ] ^ unit1195_1[i][1]) |(x[ unit1195_1[i][2] ] ^ unit1195_1[i][3]));
			}
		if(X_contra>0) L[1195][1]=2;
		}
	//Check all rules of unit[1196][0]
	L[1196][0] = LargeX[1196][1]>0 ? 1 : 0;
	satisfiable[1196][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1196_0[i][0] ][ unit1196_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1196_0[i][2] ][ unit1196_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1196_0[i][4] ][ unit1196_0[i][5] ] >0);
		X_contra = ( LargeX[1196][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1196_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1196][1]=0; L[1196][0]=1;}
			satisfiable[1196][0]=satisfiable[1196][0] & ((x[1196] ^ 0) | (x[ unit1196_0[i][0] ] ^ unit1196_0[i][1]) |(x[ unit1196_0[i][2] ] ^ unit1196_0[i][3]));
			}
		if(X_contra>0) L[1196][0]=2;
		}
	//Check all rules of unit[1196][1]
	L[1196][1] = LargeX[1196][0]>0 ? 1 : 0;
	satisfiable[1196][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1196_1[i][0] ][ unit1196_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1196_1[i][2] ][ unit1196_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1196_1[i][4] ][ unit1196_1[i][5] ] >0);
		X_contra = ( LargeX[1196][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1196_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1196][0]=0; L[1196][1]=1;}
			satisfiable[1196][1]=satisfiable[1196][1] & ((x[1196] ^ 1) | (x[ unit1196_1[i][0] ] ^ unit1196_1[i][1]) |(x[ unit1196_1[i][2] ] ^ unit1196_1[i][3]));
			}
		if(X_contra>0) L[1196][1]=2;
		}
	//Check all rules of unit[1197][0]
	L[1197][0] = LargeX[1197][1]>0 ? 1 : 0;
	satisfiable[1197][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1197_0[i][0] ][ unit1197_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1197_0[i][2] ][ unit1197_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1197_0[i][4] ][ unit1197_0[i][5] ] >0);
		X_contra = ( LargeX[1197][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1197_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1197][1]=0; L[1197][0]=1;}
			satisfiable[1197][0]=satisfiable[1197][0] & ((x[1197] ^ 0) | (x[ unit1197_0[i][0] ] ^ unit1197_0[i][1]) |(x[ unit1197_0[i][2] ] ^ unit1197_0[i][3]));
			}
		if(X_contra>0) L[1197][0]=2;
		}
	//Check all rules of unit[1197][1]
	L[1197][1] = LargeX[1197][0]>0 ? 1 : 0;
	satisfiable[1197][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1197_1[i][0] ][ unit1197_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1197_1[i][2] ][ unit1197_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1197_1[i][4] ][ unit1197_1[i][5] ] >0);
		X_contra = ( LargeX[1197][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1197_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1197][0]=0; L[1197][1]=1;}
			satisfiable[1197][1]=satisfiable[1197][1] & ((x[1197] ^ 1) | (x[ unit1197_1[i][0] ] ^ unit1197_1[i][1]) |(x[ unit1197_1[i][2] ] ^ unit1197_1[i][3]));
			}
		if(X_contra>0) L[1197][1]=2;
		}
	//Check all rules of unit[1198][0]
	L[1198][0] = LargeX[1198][1]>0 ? 1 : 0;
	satisfiable[1198][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1198_0[i][0] ][ unit1198_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1198_0[i][2] ][ unit1198_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1198_0[i][4] ][ unit1198_0[i][5] ] >0);
		X_contra = ( LargeX[1198][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1198_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1198][1]=0; L[1198][0]=1;}
			satisfiable[1198][0]=satisfiable[1198][0] & ((x[1198] ^ 0) | (x[ unit1198_0[i][0] ] ^ unit1198_0[i][1]) |(x[ unit1198_0[i][2] ] ^ unit1198_0[i][3]));
			}
		if(X_contra>0) L[1198][0]=2;
		}
	//Check all rules of unit[1198][1]
	L[1198][1] = LargeX[1198][0]>0 ? 1 : 0;
	satisfiable[1198][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1198_1[i][0] ][ unit1198_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1198_1[i][2] ][ unit1198_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1198_1[i][4] ][ unit1198_1[i][5] ] >0);
		X_contra = ( LargeX[1198][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1198_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1198][0]=0; L[1198][1]=1;}
			satisfiable[1198][1]=satisfiable[1198][1] & ((x[1198] ^ 1) | (x[ unit1198_1[i][0] ] ^ unit1198_1[i][1]) |(x[ unit1198_1[i][2] ] ^ unit1198_1[i][3]));
			}
		if(X_contra>0) L[1198][1]=2;
		}
	//Check all rules of unit[1199][0]
	L[1199][0] = LargeX[1199][1]>0 ? 1 : 0;
	satisfiable[1199][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1199_0[i][0] ][ unit1199_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1199_0[i][2] ][ unit1199_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1199_0[i][4] ][ unit1199_0[i][5] ] >0);
		X_contra = ( LargeX[1199][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1199_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1199][1]=0; L[1199][0]=1;}
			satisfiable[1199][0]=satisfiable[1199][0] & ((x[1199] ^ 0) | (x[ unit1199_0[i][0] ] ^ unit1199_0[i][1]) |(x[ unit1199_0[i][2] ] ^ unit1199_0[i][3]));
			}
		if(X_contra>0) L[1199][0]=2;
		}
	//Check all rules of unit[1199][1]
	L[1199][1] = LargeX[1199][0]>0 ? 1 : 0;
	satisfiable[1199][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1199_1[i][0] ][ unit1199_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1199_1[i][2] ][ unit1199_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1199_1[i][4] ][ unit1199_1[i][5] ] >0);
		X_contra = ( LargeX[1199][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1199_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1199][0]=0; L[1199][1]=1;}
			satisfiable[1199][1]=satisfiable[1199][1] & ((x[1199] ^ 1) | (x[ unit1199_1[i][0] ] ^ unit1199_1[i][1]) |(x[ unit1199_1[i][2] ] ^ unit1199_1[i][3]));
			}
		if(X_contra>0) L[1199][1]=2;
		}
	//Check all rules of unit[1200][0]
	L[1200][0] = LargeX[1200][1]>0 ? 1 : 0;
	satisfiable[1200][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1200_0[i][0] ][ unit1200_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1200_0[i][2] ][ unit1200_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1200_0[i][4] ][ unit1200_0[i][5] ] >0);
		X_contra = ( LargeX[1200][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1200_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1200][1]=0; L[1200][0]=1;}
			satisfiable[1200][0]=satisfiable[1200][0] & ((x[1200] ^ 0) | (x[ unit1200_0[i][0] ] ^ unit1200_0[i][1]) |(x[ unit1200_0[i][2] ] ^ unit1200_0[i][3]));
			}
		if(X_contra>0) L[1200][0]=2;
		}
	//Check all rules of unit[1200][1]
	L[1200][1] = LargeX[1200][0]>0 ? 1 : 0;
	satisfiable[1200][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1200_1[i][0] ][ unit1200_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1200_1[i][2] ][ unit1200_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1200_1[i][4] ][ unit1200_1[i][5] ] >0);
		X_contra = ( LargeX[1200][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1200_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1200][0]=0; L[1200][1]=1;}
			satisfiable[1200][1]=satisfiable[1200][1] & ((x[1200] ^ 1) | (x[ unit1200_1[i][0] ] ^ unit1200_1[i][1]) |(x[ unit1200_1[i][2] ] ^ unit1200_1[i][3]));
			}
		if(X_contra>0) L[1200][1]=2;
		}
	//Check all rules of unit[1201][0]
	L[1201][0] = LargeX[1201][1]>0 ? 1 : 0;
	satisfiable[1201][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1201_0[i][0] ][ unit1201_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1201_0[i][2] ][ unit1201_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1201_0[i][4] ][ unit1201_0[i][5] ] >0);
		X_contra = ( LargeX[1201][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1201_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1201][1]=0; L[1201][0]=1;}
			satisfiable[1201][0]=satisfiable[1201][0] & ((x[1201] ^ 0) | (x[ unit1201_0[i][0] ] ^ unit1201_0[i][1]) |(x[ unit1201_0[i][2] ] ^ unit1201_0[i][3]));
			}
		if(X_contra>0) L[1201][0]=2;
		}
	//Check all rules of unit[1201][1]
	L[1201][1] = LargeX[1201][0]>0 ? 1 : 0;
	satisfiable[1201][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1201_1[i][0] ][ unit1201_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1201_1[i][2] ][ unit1201_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1201_1[i][4] ][ unit1201_1[i][5] ] >0);
		X_contra = ( LargeX[1201][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1201_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1201][0]=0; L[1201][1]=1;}
			satisfiable[1201][1]=satisfiable[1201][1] & ((x[1201] ^ 1) | (x[ unit1201_1[i][0] ] ^ unit1201_1[i][1]) |(x[ unit1201_1[i][2] ] ^ unit1201_1[i][3]));
			}
		if(X_contra>0) L[1201][1]=2;
		}
	//Check all rules of unit[1202][0]
	L[1202][0] = LargeX[1202][1]>0 ? 1 : 0;
	satisfiable[1202][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1202_0[i][0] ][ unit1202_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1202_0[i][2] ][ unit1202_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1202_0[i][4] ][ unit1202_0[i][5] ] >0);
		X_contra = ( LargeX[1202][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1202_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1202][1]=0; L[1202][0]=1;}
			satisfiable[1202][0]=satisfiable[1202][0] & ((x[1202] ^ 0) | (x[ unit1202_0[i][0] ] ^ unit1202_0[i][1]) |(x[ unit1202_0[i][2] ] ^ unit1202_0[i][3]));
			}
		if(X_contra>0) L[1202][0]=2;
		}
	//Check all rules of unit[1202][1]
	L[1202][1] = LargeX[1202][0]>0 ? 1 : 0;
	satisfiable[1202][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1202_1[i][0] ][ unit1202_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1202_1[i][2] ][ unit1202_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1202_1[i][4] ][ unit1202_1[i][5] ] >0);
		X_contra = ( LargeX[1202][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1202_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1202][0]=0; L[1202][1]=1;}
			satisfiable[1202][1]=satisfiable[1202][1] & ((x[1202] ^ 1) | (x[ unit1202_1[i][0] ] ^ unit1202_1[i][1]) |(x[ unit1202_1[i][2] ] ^ unit1202_1[i][3]));
			}
		if(X_contra>0) L[1202][1]=2;
		}
	//Check all rules of unit[1203][0]
	L[1203][0] = LargeX[1203][1]>0 ? 1 : 0;
	satisfiable[1203][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1203_0[i][0] ][ unit1203_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1203_0[i][2] ][ unit1203_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1203_0[i][4] ][ unit1203_0[i][5] ] >0);
		X_contra = ( LargeX[1203][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1203_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1203][1]=0; L[1203][0]=1;}
			satisfiable[1203][0]=satisfiable[1203][0] & ((x[1203] ^ 0) | (x[ unit1203_0[i][0] ] ^ unit1203_0[i][1]) |(x[ unit1203_0[i][2] ] ^ unit1203_0[i][3]));
			}
		if(X_contra>0) L[1203][0]=2;
		}
	//Check all rules of unit[1203][1]
	L[1203][1] = LargeX[1203][0]>0 ? 1 : 0;
	satisfiable[1203][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1203_1[i][0] ][ unit1203_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1203_1[i][2] ][ unit1203_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1203_1[i][4] ][ unit1203_1[i][5] ] >0);
		X_contra = ( LargeX[1203][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1203_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1203][0]=0; L[1203][1]=1;}
			satisfiable[1203][1]=satisfiable[1203][1] & ((x[1203] ^ 1) | (x[ unit1203_1[i][0] ] ^ unit1203_1[i][1]) |(x[ unit1203_1[i][2] ] ^ unit1203_1[i][3]));
			}
		if(X_contra>0) L[1203][1]=2;
		}
	//Check all rules of unit[1204][0]
	L[1204][0] = LargeX[1204][1]>0 ? 1 : 0;
	satisfiable[1204][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1204_0[i][0] ][ unit1204_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1204_0[i][2] ][ unit1204_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1204_0[i][4] ][ unit1204_0[i][5] ] >0);
		X_contra = ( LargeX[1204][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1204_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1204][1]=0; L[1204][0]=1;}
			satisfiable[1204][0]=satisfiable[1204][0] & ((x[1204] ^ 0) | (x[ unit1204_0[i][0] ] ^ unit1204_0[i][1]) |(x[ unit1204_0[i][2] ] ^ unit1204_0[i][3]));
			}
		if(X_contra>0) L[1204][0]=2;
		}
	//Check all rules of unit[1204][1]
	L[1204][1] = LargeX[1204][0]>0 ? 1 : 0;
	satisfiable[1204][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1204_1[i][0] ][ unit1204_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1204_1[i][2] ][ unit1204_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1204_1[i][4] ][ unit1204_1[i][5] ] >0);
		X_contra = ( LargeX[1204][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1204_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1204][0]=0; L[1204][1]=1;}
			satisfiable[1204][1]=satisfiable[1204][1] & ((x[1204] ^ 1) | (x[ unit1204_1[i][0] ] ^ unit1204_1[i][1]) |(x[ unit1204_1[i][2] ] ^ unit1204_1[i][3]));
			}
		if(X_contra>0) L[1204][1]=2;
		}
	//Check all rules of unit[1205][0]
	L[1205][0] = LargeX[1205][1]>0 ? 1 : 0;
	satisfiable[1205][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1205_0[i][0] ][ unit1205_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1205_0[i][2] ][ unit1205_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1205_0[i][4] ][ unit1205_0[i][5] ] >0);
		X_contra = ( LargeX[1205][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1205_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1205][1]=0; L[1205][0]=1;}
			satisfiable[1205][0]=satisfiable[1205][0] & ((x[1205] ^ 0) | (x[ unit1205_0[i][0] ] ^ unit1205_0[i][1]) |(x[ unit1205_0[i][2] ] ^ unit1205_0[i][3]));
			}
		if(X_contra>0) L[1205][0]=2;
		}
	//Check all rules of unit[1205][1]
	L[1205][1] = LargeX[1205][0]>0 ? 1 : 0;
	satisfiable[1205][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1205_1[i][0] ][ unit1205_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1205_1[i][2] ][ unit1205_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1205_1[i][4] ][ unit1205_1[i][5] ] >0);
		X_contra = ( LargeX[1205][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1205_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1205][0]=0; L[1205][1]=1;}
			satisfiable[1205][1]=satisfiable[1205][1] & ((x[1205] ^ 1) | (x[ unit1205_1[i][0] ] ^ unit1205_1[i][1]) |(x[ unit1205_1[i][2] ] ^ unit1205_1[i][3]));
			}
		if(X_contra>0) L[1205][1]=2;
		}
	//Check all rules of unit[1206][0]
	L[1206][0] = LargeX[1206][1]>0 ? 1 : 0;
	satisfiable[1206][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1206_0[i][0] ][ unit1206_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1206_0[i][2] ][ unit1206_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1206_0[i][4] ][ unit1206_0[i][5] ] >0);
		X_contra = ( LargeX[1206][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1206_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1206][1]=0; L[1206][0]=1;}
			satisfiable[1206][0]=satisfiable[1206][0] & ((x[1206] ^ 0) | (x[ unit1206_0[i][0] ] ^ unit1206_0[i][1]) |(x[ unit1206_0[i][2] ] ^ unit1206_0[i][3]));
			}
		if(X_contra>0) L[1206][0]=2;
		}
	//Check all rules of unit[1206][1]
	L[1206][1] = LargeX[1206][0]>0 ? 1 : 0;
	satisfiable[1206][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1206_1[i][0] ][ unit1206_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1206_1[i][2] ][ unit1206_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1206_1[i][4] ][ unit1206_1[i][5] ] >0);
		X_contra = ( LargeX[1206][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1206_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1206][0]=0; L[1206][1]=1;}
			satisfiable[1206][1]=satisfiable[1206][1] & ((x[1206] ^ 1) | (x[ unit1206_1[i][0] ] ^ unit1206_1[i][1]) |(x[ unit1206_1[i][2] ] ^ unit1206_1[i][3]));
			}
		if(X_contra>0) L[1206][1]=2;
		}
	//Check all rules of unit[1207][0]
	L[1207][0] = LargeX[1207][1]>0 ? 1 : 0;
	satisfiable[1207][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1207_0[i][0] ][ unit1207_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1207_0[i][2] ][ unit1207_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1207_0[i][4] ][ unit1207_0[i][5] ] >0);
		X_contra = ( LargeX[1207][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1207_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1207][1]=0; L[1207][0]=1;}
			satisfiable[1207][0]=satisfiable[1207][0] & ((x[1207] ^ 0) | (x[ unit1207_0[i][0] ] ^ unit1207_0[i][1]) |(x[ unit1207_0[i][2] ] ^ unit1207_0[i][3]));
			}
		if(X_contra>0) L[1207][0]=2;
		}
	//Check all rules of unit[1207][1]
	L[1207][1] = LargeX[1207][0]>0 ? 1 : 0;
	satisfiable[1207][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1207_1[i][0] ][ unit1207_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1207_1[i][2] ][ unit1207_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1207_1[i][4] ][ unit1207_1[i][5] ] >0);
		X_contra = ( LargeX[1207][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1207_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1207][0]=0; L[1207][1]=1;}
			satisfiable[1207][1]=satisfiable[1207][1] & ((x[1207] ^ 1) | (x[ unit1207_1[i][0] ] ^ unit1207_1[i][1]) |(x[ unit1207_1[i][2] ] ^ unit1207_1[i][3]));
			}
		if(X_contra>0) L[1207][1]=2;
		}
	//Check all rules of unit[1208][0]
	L[1208][0] = LargeX[1208][1]>0 ? 1 : 0;
	satisfiable[1208][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1208_0[i][0] ][ unit1208_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1208_0[i][2] ][ unit1208_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1208_0[i][4] ][ unit1208_0[i][5] ] >0);
		X_contra = ( LargeX[1208][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1208_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1208][1]=0; L[1208][0]=1;}
			satisfiable[1208][0]=satisfiable[1208][0] & ((x[1208] ^ 0) | (x[ unit1208_0[i][0] ] ^ unit1208_0[i][1]) |(x[ unit1208_0[i][2] ] ^ unit1208_0[i][3]));
			}
		if(X_contra>0) L[1208][0]=2;
		}
	//Check all rules of unit[1208][1]
	L[1208][1] = LargeX[1208][0]>0 ? 1 : 0;
	satisfiable[1208][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1208_1[i][0] ][ unit1208_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1208_1[i][2] ][ unit1208_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1208_1[i][4] ][ unit1208_1[i][5] ] >0);
		X_contra = ( LargeX[1208][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1208_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1208][0]=0; L[1208][1]=1;}
			satisfiable[1208][1]=satisfiable[1208][1] & ((x[1208] ^ 1) | (x[ unit1208_1[i][0] ] ^ unit1208_1[i][1]) |(x[ unit1208_1[i][2] ] ^ unit1208_1[i][3]));
			}
		if(X_contra>0) L[1208][1]=2;
		}
	//Check all rules of unit[1209][0]
	L[1209][0] = LargeX[1209][1]>0 ? 1 : 0;
	satisfiable[1209][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1209_0[i][0] ][ unit1209_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1209_0[i][2] ][ unit1209_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1209_0[i][4] ][ unit1209_0[i][5] ] >0);
		X_contra = ( LargeX[1209][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1209_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1209][1]=0; L[1209][0]=1;}
			satisfiable[1209][0]=satisfiable[1209][0] & ((x[1209] ^ 0) | (x[ unit1209_0[i][0] ] ^ unit1209_0[i][1]) |(x[ unit1209_0[i][2] ] ^ unit1209_0[i][3]));
			}
		if(X_contra>0) L[1209][0]=2;
		}
	//Check all rules of unit[1209][1]
	L[1209][1] = LargeX[1209][0]>0 ? 1 : 0;
	satisfiable[1209][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1209_1[i][0] ][ unit1209_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1209_1[i][2] ][ unit1209_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1209_1[i][4] ][ unit1209_1[i][5] ] >0);
		X_contra = ( LargeX[1209][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1209_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1209][0]=0; L[1209][1]=1;}
			satisfiable[1209][1]=satisfiable[1209][1] & ((x[1209] ^ 1) | (x[ unit1209_1[i][0] ] ^ unit1209_1[i][1]) |(x[ unit1209_1[i][2] ] ^ unit1209_1[i][3]));
			}
		if(X_contra>0) L[1209][1]=2;
		}
	//Check all rules of unit[1210][0]
	L[1210][0] = LargeX[1210][1]>0 ? 1 : 0;
	satisfiable[1210][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1210_0[i][0] ][ unit1210_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1210_0[i][2] ][ unit1210_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1210_0[i][4] ][ unit1210_0[i][5] ] >0);
		X_contra = ( LargeX[1210][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1210_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1210][1]=0; L[1210][0]=1;}
			satisfiable[1210][0]=satisfiable[1210][0] & ((x[1210] ^ 0) | (x[ unit1210_0[i][0] ] ^ unit1210_0[i][1]) |(x[ unit1210_0[i][2] ] ^ unit1210_0[i][3]));
			}
		if(X_contra>0) L[1210][0]=2;
		}
	//Check all rules of unit[1210][1]
	L[1210][1] = LargeX[1210][0]>0 ? 1 : 0;
	satisfiable[1210][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1210_1[i][0] ][ unit1210_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1210_1[i][2] ][ unit1210_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1210_1[i][4] ][ unit1210_1[i][5] ] >0);
		X_contra = ( LargeX[1210][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1210_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1210][0]=0; L[1210][1]=1;}
			satisfiable[1210][1]=satisfiable[1210][1] & ((x[1210] ^ 1) | (x[ unit1210_1[i][0] ] ^ unit1210_1[i][1]) |(x[ unit1210_1[i][2] ] ^ unit1210_1[i][3]));
			}
		if(X_contra>0) L[1210][1]=2;
		}
	//Check all rules of unit[1211][0]
	L[1211][0] = LargeX[1211][1]>0 ? 1 : 0;
	satisfiable[1211][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1211_0[i][0] ][ unit1211_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1211_0[i][2] ][ unit1211_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1211_0[i][4] ][ unit1211_0[i][5] ] >0);
		X_contra = ( LargeX[1211][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1211_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1211][1]=0; L[1211][0]=1;}
			satisfiable[1211][0]=satisfiable[1211][0] & ((x[1211] ^ 0) | (x[ unit1211_0[i][0] ] ^ unit1211_0[i][1]) |(x[ unit1211_0[i][2] ] ^ unit1211_0[i][3]));
			}
		if(X_contra>0) L[1211][0]=2;
		}
	//Check all rules of unit[1211][1]
	L[1211][1] = LargeX[1211][0]>0 ? 1 : 0;
	satisfiable[1211][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1211_1[i][0] ][ unit1211_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1211_1[i][2] ][ unit1211_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1211_1[i][4] ][ unit1211_1[i][5] ] >0);
		X_contra = ( LargeX[1211][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1211_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1211][0]=0; L[1211][1]=1;}
			satisfiable[1211][1]=satisfiable[1211][1] & ((x[1211] ^ 1) | (x[ unit1211_1[i][0] ] ^ unit1211_1[i][1]) |(x[ unit1211_1[i][2] ] ^ unit1211_1[i][3]));
			}
		if(X_contra>0) L[1211][1]=2;
		}
	//Check all rules of unit[1212][0]
	L[1212][0] = LargeX[1212][1]>0 ? 1 : 0;
	satisfiable[1212][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1212_0[i][0] ][ unit1212_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1212_0[i][2] ][ unit1212_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1212_0[i][4] ][ unit1212_0[i][5] ] >0);
		X_contra = ( LargeX[1212][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1212_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1212][1]=0; L[1212][0]=1;}
			satisfiable[1212][0]=satisfiable[1212][0] & ((x[1212] ^ 0) | (x[ unit1212_0[i][0] ] ^ unit1212_0[i][1]) |(x[ unit1212_0[i][2] ] ^ unit1212_0[i][3]));
			}
		if(X_contra>0) L[1212][0]=2;
		}
	//Check all rules of unit[1212][1]
	L[1212][1] = LargeX[1212][0]>0 ? 1 : 0;
	satisfiable[1212][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1212_1[i][0] ][ unit1212_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1212_1[i][2] ][ unit1212_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1212_1[i][4] ][ unit1212_1[i][5] ] >0);
		X_contra = ( LargeX[1212][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1212_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1212][0]=0; L[1212][1]=1;}
			satisfiable[1212][1]=satisfiable[1212][1] & ((x[1212] ^ 1) | (x[ unit1212_1[i][0] ] ^ unit1212_1[i][1]) |(x[ unit1212_1[i][2] ] ^ unit1212_1[i][3]));
			}
		if(X_contra>0) L[1212][1]=2;
		}
	//Check all rules of unit[1213][0]
	L[1213][0] = LargeX[1213][1]>0 ? 1 : 0;
	satisfiable[1213][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1213_0[i][0] ][ unit1213_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1213_0[i][2] ][ unit1213_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1213_0[i][4] ][ unit1213_0[i][5] ] >0);
		X_contra = ( LargeX[1213][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1213_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1213][1]=0; L[1213][0]=1;}
			satisfiable[1213][0]=satisfiable[1213][0] & ((x[1213] ^ 0) | (x[ unit1213_0[i][0] ] ^ unit1213_0[i][1]) |(x[ unit1213_0[i][2] ] ^ unit1213_0[i][3]));
			}
		if(X_contra>0) L[1213][0]=2;
		}
	//Check all rules of unit[1213][1]
	L[1213][1] = LargeX[1213][0]>0 ? 1 : 0;
	satisfiable[1213][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1213_1[i][0] ][ unit1213_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1213_1[i][2] ][ unit1213_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1213_1[i][4] ][ unit1213_1[i][5] ] >0);
		X_contra = ( LargeX[1213][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1213_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1213][0]=0; L[1213][1]=1;}
			satisfiable[1213][1]=satisfiable[1213][1] & ((x[1213] ^ 1) | (x[ unit1213_1[i][0] ] ^ unit1213_1[i][1]) |(x[ unit1213_1[i][2] ] ^ unit1213_1[i][3]));
			}
		if(X_contra>0) L[1213][1]=2;
		}
	//Check all rules of unit[1214][0]
	L[1214][0] = LargeX[1214][1]>0 ? 1 : 0;
	satisfiable[1214][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1214_0[i][0] ][ unit1214_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1214_0[i][2] ][ unit1214_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1214_0[i][4] ][ unit1214_0[i][5] ] >0);
		X_contra = ( LargeX[1214][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1214_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1214][1]=0; L[1214][0]=1;}
			satisfiable[1214][0]=satisfiable[1214][0] & ((x[1214] ^ 0) | (x[ unit1214_0[i][0] ] ^ unit1214_0[i][1]) |(x[ unit1214_0[i][2] ] ^ unit1214_0[i][3]));
			}
		if(X_contra>0) L[1214][0]=2;
		}
	//Check all rules of unit[1214][1]
	L[1214][1] = LargeX[1214][0]>0 ? 1 : 0;
	satisfiable[1214][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1214_1[i][0] ][ unit1214_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1214_1[i][2] ][ unit1214_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1214_1[i][4] ][ unit1214_1[i][5] ] >0);
		X_contra = ( LargeX[1214][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1214_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1214][0]=0; L[1214][1]=1;}
			satisfiable[1214][1]=satisfiable[1214][1] & ((x[1214] ^ 1) | (x[ unit1214_1[i][0] ] ^ unit1214_1[i][1]) |(x[ unit1214_1[i][2] ] ^ unit1214_1[i][3]));
			}
		if(X_contra>0) L[1214][1]=2;
		}
	//Check all rules of unit[1215][0]
	L[1215][0] = LargeX[1215][1]>0 ? 1 : 0;
	satisfiable[1215][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1215_0[i][0] ][ unit1215_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1215_0[i][2] ][ unit1215_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1215_0[i][4] ][ unit1215_0[i][5] ] >0);
		X_contra = ( LargeX[1215][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1215_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1215][1]=0; L[1215][0]=1;}
			satisfiable[1215][0]=satisfiable[1215][0] & ((x[1215] ^ 0) | (x[ unit1215_0[i][0] ] ^ unit1215_0[i][1]) |(x[ unit1215_0[i][2] ] ^ unit1215_0[i][3]));
			}
		if(X_contra>0) L[1215][0]=2;
		}
	//Check all rules of unit[1215][1]
	L[1215][1] = LargeX[1215][0]>0 ? 1 : 0;
	satisfiable[1215][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1215_1[i][0] ][ unit1215_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1215_1[i][2] ][ unit1215_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1215_1[i][4] ][ unit1215_1[i][5] ] >0);
		X_contra = ( LargeX[1215][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1215_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1215][0]=0; L[1215][1]=1;}
			satisfiable[1215][1]=satisfiable[1215][1] & ((x[1215] ^ 1) | (x[ unit1215_1[i][0] ] ^ unit1215_1[i][1]) |(x[ unit1215_1[i][2] ] ^ unit1215_1[i][3]));
			}
		if(X_contra>0) L[1215][1]=2;
		}
	//Check all rules of unit[1216][0]
	L[1216][0] = LargeX[1216][1]>0 ? 1 : 0;
	satisfiable[1216][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1216_0[i][0] ][ unit1216_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1216_0[i][2] ][ unit1216_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1216_0[i][4] ][ unit1216_0[i][5] ] >0);
		X_contra = ( LargeX[1216][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1216_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1216][1]=0; L[1216][0]=1;}
			satisfiable[1216][0]=satisfiable[1216][0] & ((x[1216] ^ 0) | (x[ unit1216_0[i][0] ] ^ unit1216_0[i][1]) |(x[ unit1216_0[i][2] ] ^ unit1216_0[i][3]));
			}
		if(X_contra>0) L[1216][0]=2;
		}
	//Check all rules of unit[1216][1]
	L[1216][1] = LargeX[1216][0]>0 ? 1 : 0;
	satisfiable[1216][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1216_1[i][0] ][ unit1216_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1216_1[i][2] ][ unit1216_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1216_1[i][4] ][ unit1216_1[i][5] ] >0);
		X_contra = ( LargeX[1216][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1216_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1216][0]=0; L[1216][1]=1;}
			satisfiable[1216][1]=satisfiable[1216][1] & ((x[1216] ^ 1) | (x[ unit1216_1[i][0] ] ^ unit1216_1[i][1]) |(x[ unit1216_1[i][2] ] ^ unit1216_1[i][3]));
			}
		if(X_contra>0) L[1216][1]=2;
		}
	//Check all rules of unit[1217][0]
	L[1217][0] = LargeX[1217][1]>0 ? 1 : 0;
	satisfiable[1217][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1217_0[i][0] ][ unit1217_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1217_0[i][2] ][ unit1217_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1217_0[i][4] ][ unit1217_0[i][5] ] >0);
		X_contra = ( LargeX[1217][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1217_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1217][1]=0; L[1217][0]=1;}
			satisfiable[1217][0]=satisfiable[1217][0] & ((x[1217] ^ 0) | (x[ unit1217_0[i][0] ] ^ unit1217_0[i][1]) |(x[ unit1217_0[i][2] ] ^ unit1217_0[i][3]));
			}
		if(X_contra>0) L[1217][0]=2;
		}
	//Check all rules of unit[1217][1]
	L[1217][1] = LargeX[1217][0]>0 ? 1 : 0;
	satisfiable[1217][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1217_1[i][0] ][ unit1217_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1217_1[i][2] ][ unit1217_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1217_1[i][4] ][ unit1217_1[i][5] ] >0);
		X_contra = ( LargeX[1217][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1217_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1217][0]=0; L[1217][1]=1;}
			satisfiable[1217][1]=satisfiable[1217][1] & ((x[1217] ^ 1) | (x[ unit1217_1[i][0] ] ^ unit1217_1[i][1]) |(x[ unit1217_1[i][2] ] ^ unit1217_1[i][3]));
			}
		if(X_contra>0) L[1217][1]=2;
		}
	//Check all rules of unit[1218][0]
	L[1218][0] = LargeX[1218][1]>0 ? 1 : 0;
	satisfiable[1218][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1218_0[i][0] ][ unit1218_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1218_0[i][2] ][ unit1218_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1218_0[i][4] ][ unit1218_0[i][5] ] >0);
		X_contra = ( LargeX[1218][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1218_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1218][1]=0; L[1218][0]=1;}
			satisfiable[1218][0]=satisfiable[1218][0] & ((x[1218] ^ 0) | (x[ unit1218_0[i][0] ] ^ unit1218_0[i][1]) |(x[ unit1218_0[i][2] ] ^ unit1218_0[i][3]));
			}
		if(X_contra>0) L[1218][0]=2;
		}
	//Check all rules of unit[1218][1]
	L[1218][1] = LargeX[1218][0]>0 ? 1 : 0;
	satisfiable[1218][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1218_1[i][0] ][ unit1218_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1218_1[i][2] ][ unit1218_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1218_1[i][4] ][ unit1218_1[i][5] ] >0);
		X_contra = ( LargeX[1218][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1218_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1218][0]=0; L[1218][1]=1;}
			satisfiable[1218][1]=satisfiable[1218][1] & ((x[1218] ^ 1) | (x[ unit1218_1[i][0] ] ^ unit1218_1[i][1]) |(x[ unit1218_1[i][2] ] ^ unit1218_1[i][3]));
			}
		if(X_contra>0) L[1218][1]=2;
		}
	//Check all rules of unit[1219][0]
	L[1219][0] = LargeX[1219][1]>0 ? 1 : 0;
	satisfiable[1219][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1219_0[i][0] ][ unit1219_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1219_0[i][2] ][ unit1219_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1219_0[i][4] ][ unit1219_0[i][5] ] >0);
		X_contra = ( LargeX[1219][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1219_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1219][1]=0; L[1219][0]=1;}
			satisfiable[1219][0]=satisfiable[1219][0] & ((x[1219] ^ 0) | (x[ unit1219_0[i][0] ] ^ unit1219_0[i][1]) |(x[ unit1219_0[i][2] ] ^ unit1219_0[i][3]));
			}
		if(X_contra>0) L[1219][0]=2;
		}
	//Check all rules of unit[1219][1]
	L[1219][1] = LargeX[1219][0]>0 ? 1 : 0;
	satisfiable[1219][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1219_1[i][0] ][ unit1219_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1219_1[i][2] ][ unit1219_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1219_1[i][4] ][ unit1219_1[i][5] ] >0);
		X_contra = ( LargeX[1219][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1219_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1219][0]=0; L[1219][1]=1;}
			satisfiable[1219][1]=satisfiable[1219][1] & ((x[1219] ^ 1) | (x[ unit1219_1[i][0] ] ^ unit1219_1[i][1]) |(x[ unit1219_1[i][2] ] ^ unit1219_1[i][3]));
			}
		if(X_contra>0) L[1219][1]=2;
		}
	//Check all rules of unit[1220][0]
	L[1220][0] = LargeX[1220][1]>0 ? 1 : 0;
	satisfiable[1220][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1220_0[i][0] ][ unit1220_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1220_0[i][2] ][ unit1220_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1220_0[i][4] ][ unit1220_0[i][5] ] >0);
		X_contra = ( LargeX[1220][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1220_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1220][1]=0; L[1220][0]=1;}
			satisfiable[1220][0]=satisfiable[1220][0] & ((x[1220] ^ 0) | (x[ unit1220_0[i][0] ] ^ unit1220_0[i][1]) |(x[ unit1220_0[i][2] ] ^ unit1220_0[i][3]));
			}
		if(X_contra>0) L[1220][0]=2;
		}
	//Check all rules of unit[1220][1]
	L[1220][1] = LargeX[1220][0]>0 ? 1 : 0;
	satisfiable[1220][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1220_1[i][0] ][ unit1220_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1220_1[i][2] ][ unit1220_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1220_1[i][4] ][ unit1220_1[i][5] ] >0);
		X_contra = ( LargeX[1220][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1220_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1220][0]=0; L[1220][1]=1;}
			satisfiable[1220][1]=satisfiable[1220][1] & ((x[1220] ^ 1) | (x[ unit1220_1[i][0] ] ^ unit1220_1[i][1]) |(x[ unit1220_1[i][2] ] ^ unit1220_1[i][3]));
			}
		if(X_contra>0) L[1220][1]=2;
		}
	//Check all rules of unit[1221][0]
	L[1221][0] = LargeX[1221][1]>0 ? 1 : 0;
	satisfiable[1221][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1221_0[i][0] ][ unit1221_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1221_0[i][2] ][ unit1221_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1221_0[i][4] ][ unit1221_0[i][5] ] >0);
		X_contra = ( LargeX[1221][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1221_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1221][1]=0; L[1221][0]=1;}
			satisfiable[1221][0]=satisfiable[1221][0] & ((x[1221] ^ 0) | (x[ unit1221_0[i][0] ] ^ unit1221_0[i][1]) |(x[ unit1221_0[i][2] ] ^ unit1221_0[i][3]));
			}
		if(X_contra>0) L[1221][0]=2;
		}
	//Check all rules of unit[1221][1]
	L[1221][1] = LargeX[1221][0]>0 ? 1 : 0;
	satisfiable[1221][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1221_1[i][0] ][ unit1221_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1221_1[i][2] ][ unit1221_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1221_1[i][4] ][ unit1221_1[i][5] ] >0);
		X_contra = ( LargeX[1221][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1221_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1221][0]=0; L[1221][1]=1;}
			satisfiable[1221][1]=satisfiable[1221][1] & ((x[1221] ^ 1) | (x[ unit1221_1[i][0] ] ^ unit1221_1[i][1]) |(x[ unit1221_1[i][2] ] ^ unit1221_1[i][3]));
			}
		if(X_contra>0) L[1221][1]=2;
		}
	//Check all rules of unit[1222][0]
	L[1222][0] = LargeX[1222][1]>0 ? 1 : 0;
	satisfiable[1222][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1222_0[i][0] ][ unit1222_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1222_0[i][2] ][ unit1222_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1222_0[i][4] ][ unit1222_0[i][5] ] >0);
		X_contra = ( LargeX[1222][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1222_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1222][1]=0; L[1222][0]=1;}
			satisfiable[1222][0]=satisfiable[1222][0] & ((x[1222] ^ 0) | (x[ unit1222_0[i][0] ] ^ unit1222_0[i][1]) |(x[ unit1222_0[i][2] ] ^ unit1222_0[i][3]));
			}
		if(X_contra>0) L[1222][0]=2;
		}
	//Check all rules of unit[1222][1]
	L[1222][1] = LargeX[1222][0]>0 ? 1 : 0;
	satisfiable[1222][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1222_1[i][0] ][ unit1222_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1222_1[i][2] ][ unit1222_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1222_1[i][4] ][ unit1222_1[i][5] ] >0);
		X_contra = ( LargeX[1222][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1222_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1222][0]=0; L[1222][1]=1;}
			satisfiable[1222][1]=satisfiable[1222][1] & ((x[1222] ^ 1) | (x[ unit1222_1[i][0] ] ^ unit1222_1[i][1]) |(x[ unit1222_1[i][2] ] ^ unit1222_1[i][3]));
			}
		if(X_contra>0) L[1222][1]=2;
		}
	//Check all rules of unit[1223][0]
	L[1223][0] = LargeX[1223][1]>0 ? 1 : 0;
	satisfiable[1223][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1223_0[i][0] ][ unit1223_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1223_0[i][2] ][ unit1223_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1223_0[i][4] ][ unit1223_0[i][5] ] >0);
		X_contra = ( LargeX[1223][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1223_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1223][1]=0; L[1223][0]=1;}
			satisfiable[1223][0]=satisfiable[1223][0] & ((x[1223] ^ 0) | (x[ unit1223_0[i][0] ] ^ unit1223_0[i][1]) |(x[ unit1223_0[i][2] ] ^ unit1223_0[i][3]));
			}
		if(X_contra>0) L[1223][0]=2;
		}
	//Check all rules of unit[1223][1]
	L[1223][1] = LargeX[1223][0]>0 ? 1 : 0;
	satisfiable[1223][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1223_1[i][0] ][ unit1223_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1223_1[i][2] ][ unit1223_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1223_1[i][4] ][ unit1223_1[i][5] ] >0);
		X_contra = ( LargeX[1223][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1223_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1223][0]=0; L[1223][1]=1;}
			satisfiable[1223][1]=satisfiable[1223][1] & ((x[1223] ^ 1) | (x[ unit1223_1[i][0] ] ^ unit1223_1[i][1]) |(x[ unit1223_1[i][2] ] ^ unit1223_1[i][3]));
			}
		if(X_contra>0) L[1223][1]=2;
		}
	//Check all rules of unit[1224][0]
	L[1224][0] = LargeX[1224][1]>0 ? 1 : 0;
	satisfiable[1224][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1224_0[i][0] ][ unit1224_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1224_0[i][2] ][ unit1224_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1224_0[i][4] ][ unit1224_0[i][5] ] >0);
		X_contra = ( LargeX[1224][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1224_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1224][1]=0; L[1224][0]=1;}
			satisfiable[1224][0]=satisfiable[1224][0] & ((x[1224] ^ 0) | (x[ unit1224_0[i][0] ] ^ unit1224_0[i][1]) |(x[ unit1224_0[i][2] ] ^ unit1224_0[i][3]));
			}
		if(X_contra>0) L[1224][0]=2;
		}
	//Check all rules of unit[1224][1]
	L[1224][1] = LargeX[1224][0]>0 ? 1 : 0;
	satisfiable[1224][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1224_1[i][0] ][ unit1224_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1224_1[i][2] ][ unit1224_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1224_1[i][4] ][ unit1224_1[i][5] ] >0);
		X_contra = ( LargeX[1224][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1224_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1224][0]=0; L[1224][1]=1;}
			satisfiable[1224][1]=satisfiable[1224][1] & ((x[1224] ^ 1) | (x[ unit1224_1[i][0] ] ^ unit1224_1[i][1]) |(x[ unit1224_1[i][2] ] ^ unit1224_1[i][3]));
			}
		if(X_contra>0) L[1224][1]=2;
		}
	//Check all rules of unit[1225][0]
	L[1225][0] = LargeX[1225][1]>0 ? 1 : 0;
	satisfiable[1225][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1225_0[i][0] ][ unit1225_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1225_0[i][2] ][ unit1225_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1225_0[i][4] ][ unit1225_0[i][5] ] >0);
		X_contra = ( LargeX[1225][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1225_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1225][1]=0; L[1225][0]=1;}
			satisfiable[1225][0]=satisfiable[1225][0] & ((x[1225] ^ 0) | (x[ unit1225_0[i][0] ] ^ unit1225_0[i][1]) |(x[ unit1225_0[i][2] ] ^ unit1225_0[i][3]));
			}
		if(X_contra>0) L[1225][0]=2;
		}
	//Check all rules of unit[1225][1]
	L[1225][1] = LargeX[1225][0]>0 ? 1 : 0;
	satisfiable[1225][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1225_1[i][0] ][ unit1225_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1225_1[i][2] ][ unit1225_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1225_1[i][4] ][ unit1225_1[i][5] ] >0);
		X_contra = ( LargeX[1225][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1225_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1225][0]=0; L[1225][1]=1;}
			satisfiable[1225][1]=satisfiable[1225][1] & ((x[1225] ^ 1) | (x[ unit1225_1[i][0] ] ^ unit1225_1[i][1]) |(x[ unit1225_1[i][2] ] ^ unit1225_1[i][3]));
			}
		if(X_contra>0) L[1225][1]=2;
		}
	//Check all rules of unit[1226][0]
	L[1226][0] = LargeX[1226][1]>0 ? 1 : 0;
	satisfiable[1226][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1226_0[i][0] ][ unit1226_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1226_0[i][2] ][ unit1226_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1226_0[i][4] ][ unit1226_0[i][5] ] >0);
		X_contra = ( LargeX[1226][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1226_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1226][1]=0; L[1226][0]=1;}
			satisfiable[1226][0]=satisfiable[1226][0] & ((x[1226] ^ 0) | (x[ unit1226_0[i][0] ] ^ unit1226_0[i][1]) |(x[ unit1226_0[i][2] ] ^ unit1226_0[i][3]));
			}
		if(X_contra>0) L[1226][0]=2;
		}
	//Check all rules of unit[1226][1]
	L[1226][1] = LargeX[1226][0]>0 ? 1 : 0;
	satisfiable[1226][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1226_1[i][0] ][ unit1226_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1226_1[i][2] ][ unit1226_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1226_1[i][4] ][ unit1226_1[i][5] ] >0);
		X_contra = ( LargeX[1226][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1226_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1226][0]=0; L[1226][1]=1;}
			satisfiable[1226][1]=satisfiable[1226][1] & ((x[1226] ^ 1) | (x[ unit1226_1[i][0] ] ^ unit1226_1[i][1]) |(x[ unit1226_1[i][2] ] ^ unit1226_1[i][3]));
			}
		if(X_contra>0) L[1226][1]=2;
		}
	//Check all rules of unit[1227][0]
	L[1227][0] = LargeX[1227][1]>0 ? 1 : 0;
	satisfiable[1227][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1227_0[i][0] ][ unit1227_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1227_0[i][2] ][ unit1227_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1227_0[i][4] ][ unit1227_0[i][5] ] >0);
		X_contra = ( LargeX[1227][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1227_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1227][1]=0; L[1227][0]=1;}
			satisfiable[1227][0]=satisfiable[1227][0] & ((x[1227] ^ 0) | (x[ unit1227_0[i][0] ] ^ unit1227_0[i][1]) |(x[ unit1227_0[i][2] ] ^ unit1227_0[i][3]));
			}
		if(X_contra>0) L[1227][0]=2;
		}
	//Check all rules of unit[1227][1]
	L[1227][1] = LargeX[1227][0]>0 ? 1 : 0;
	satisfiable[1227][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1227_1[i][0] ][ unit1227_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1227_1[i][2] ][ unit1227_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1227_1[i][4] ][ unit1227_1[i][5] ] >0);
		X_contra = ( LargeX[1227][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1227_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1227][0]=0; L[1227][1]=1;}
			satisfiable[1227][1]=satisfiable[1227][1] & ((x[1227] ^ 1) | (x[ unit1227_1[i][0] ] ^ unit1227_1[i][1]) |(x[ unit1227_1[i][2] ] ^ unit1227_1[i][3]));
			}
		if(X_contra>0) L[1227][1]=2;
		}
	//Check all rules of unit[1228][0]
	L[1228][0] = LargeX[1228][1]>0 ? 1 : 0;
	satisfiable[1228][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1228_0[i][0] ][ unit1228_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1228_0[i][2] ][ unit1228_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1228_0[i][4] ][ unit1228_0[i][5] ] >0);
		X_contra = ( LargeX[1228][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1228_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1228][1]=0; L[1228][0]=1;}
			satisfiable[1228][0]=satisfiable[1228][0] & ((x[1228] ^ 0) | (x[ unit1228_0[i][0] ] ^ unit1228_0[i][1]) |(x[ unit1228_0[i][2] ] ^ unit1228_0[i][3]));
			}
		if(X_contra>0) L[1228][0]=2;
		}
	//Check all rules of unit[1228][1]
	L[1228][1] = LargeX[1228][0]>0 ? 1 : 0;
	satisfiable[1228][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1228_1[i][0] ][ unit1228_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1228_1[i][2] ][ unit1228_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1228_1[i][4] ][ unit1228_1[i][5] ] >0);
		X_contra = ( LargeX[1228][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1228_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1228][0]=0; L[1228][1]=1;}
			satisfiable[1228][1]=satisfiable[1228][1] & ((x[1228] ^ 1) | (x[ unit1228_1[i][0] ] ^ unit1228_1[i][1]) |(x[ unit1228_1[i][2] ] ^ unit1228_1[i][3]));
			}
		if(X_contra>0) L[1228][1]=2;
		}
	//Check all rules of unit[1229][0]
	L[1229][0] = LargeX[1229][1]>0 ? 1 : 0;
	satisfiable[1229][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1229_0[i][0] ][ unit1229_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1229_0[i][2] ][ unit1229_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1229_0[i][4] ][ unit1229_0[i][5] ] >0);
		X_contra = ( LargeX[1229][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1229_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1229][1]=0; L[1229][0]=1;}
			satisfiable[1229][0]=satisfiable[1229][0] & ((x[1229] ^ 0) | (x[ unit1229_0[i][0] ] ^ unit1229_0[i][1]) |(x[ unit1229_0[i][2] ] ^ unit1229_0[i][3]));
			}
		if(X_contra>0) L[1229][0]=2;
		}
	//Check all rules of unit[1229][1]
	L[1229][1] = LargeX[1229][0]>0 ? 1 : 0;
	satisfiable[1229][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1229_1[i][0] ][ unit1229_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1229_1[i][2] ][ unit1229_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1229_1[i][4] ][ unit1229_1[i][5] ] >0);
		X_contra = ( LargeX[1229][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1229_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1229][0]=0; L[1229][1]=1;}
			satisfiable[1229][1]=satisfiable[1229][1] & ((x[1229] ^ 1) | (x[ unit1229_1[i][0] ] ^ unit1229_1[i][1]) |(x[ unit1229_1[i][2] ] ^ unit1229_1[i][3]));
			}
		if(X_contra>0) L[1229][1]=2;
		}
	//Check all rules of unit[1230][0]
	L[1230][0] = LargeX[1230][1]>0 ? 1 : 0;
	satisfiable[1230][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1230_0[i][0] ][ unit1230_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1230_0[i][2] ][ unit1230_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1230_0[i][4] ][ unit1230_0[i][5] ] >0);
		X_contra = ( LargeX[1230][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1230_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1230][1]=0; L[1230][0]=1;}
			satisfiable[1230][0]=satisfiable[1230][0] & ((x[1230] ^ 0) | (x[ unit1230_0[i][0] ] ^ unit1230_0[i][1]) |(x[ unit1230_0[i][2] ] ^ unit1230_0[i][3]));
			}
		if(X_contra>0) L[1230][0]=2;
		}
	//Check all rules of unit[1230][1]
	L[1230][1] = LargeX[1230][0]>0 ? 1 : 0;
	satisfiable[1230][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1230_1[i][0] ][ unit1230_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1230_1[i][2] ][ unit1230_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1230_1[i][4] ][ unit1230_1[i][5] ] >0);
		X_contra = ( LargeX[1230][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1230_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1230][0]=0; L[1230][1]=1;}
			satisfiable[1230][1]=satisfiable[1230][1] & ((x[1230] ^ 1) | (x[ unit1230_1[i][0] ] ^ unit1230_1[i][1]) |(x[ unit1230_1[i][2] ] ^ unit1230_1[i][3]));
			}
		if(X_contra>0) L[1230][1]=2;
		}
	//Check all rules of unit[1231][0]
	L[1231][0] = LargeX[1231][1]>0 ? 1 : 0;
	satisfiable[1231][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1231_0[i][0] ][ unit1231_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1231_0[i][2] ][ unit1231_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1231_0[i][4] ][ unit1231_0[i][5] ] >0);
		X_contra = ( LargeX[1231][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1231_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1231][1]=0; L[1231][0]=1;}
			satisfiable[1231][0]=satisfiable[1231][0] & ((x[1231] ^ 0) | (x[ unit1231_0[i][0] ] ^ unit1231_0[i][1]) |(x[ unit1231_0[i][2] ] ^ unit1231_0[i][3]));
			}
		if(X_contra>0) L[1231][0]=2;
		}
	//Check all rules of unit[1231][1]
	L[1231][1] = LargeX[1231][0]>0 ? 1 : 0;
	satisfiable[1231][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1231_1[i][0] ][ unit1231_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1231_1[i][2] ][ unit1231_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1231_1[i][4] ][ unit1231_1[i][5] ] >0);
		X_contra = ( LargeX[1231][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1231_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1231][0]=0; L[1231][1]=1;}
			satisfiable[1231][1]=satisfiable[1231][1] & ((x[1231] ^ 1) | (x[ unit1231_1[i][0] ] ^ unit1231_1[i][1]) |(x[ unit1231_1[i][2] ] ^ unit1231_1[i][3]));
			}
		if(X_contra>0) L[1231][1]=2;
		}
	//Check all rules of unit[1232][0]
	L[1232][0] = LargeX[1232][1]>0 ? 1 : 0;
	satisfiable[1232][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1232_0[i][0] ][ unit1232_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1232_0[i][2] ][ unit1232_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1232_0[i][4] ][ unit1232_0[i][5] ] >0);
		X_contra = ( LargeX[1232][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1232_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1232][1]=0; L[1232][0]=1;}
			satisfiable[1232][0]=satisfiable[1232][0] & ((x[1232] ^ 0) | (x[ unit1232_0[i][0] ] ^ unit1232_0[i][1]) |(x[ unit1232_0[i][2] ] ^ unit1232_0[i][3]));
			}
		if(X_contra>0) L[1232][0]=2;
		}
	//Check all rules of unit[1232][1]
	L[1232][1] = LargeX[1232][0]>0 ? 1 : 0;
	satisfiable[1232][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1232_1[i][0] ][ unit1232_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1232_1[i][2] ][ unit1232_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1232_1[i][4] ][ unit1232_1[i][5] ] >0);
		X_contra = ( LargeX[1232][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1232_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1232][0]=0; L[1232][1]=1;}
			satisfiable[1232][1]=satisfiable[1232][1] & ((x[1232] ^ 1) | (x[ unit1232_1[i][0] ] ^ unit1232_1[i][1]) |(x[ unit1232_1[i][2] ] ^ unit1232_1[i][3]));
			}
		if(X_contra>0) L[1232][1]=2;
		}
	//Check all rules of unit[1233][0]
	L[1233][0] = LargeX[1233][1]>0 ? 1 : 0;
	satisfiable[1233][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1233_0[i][0] ][ unit1233_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1233_0[i][2] ][ unit1233_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1233_0[i][4] ][ unit1233_0[i][5] ] >0);
		X_contra = ( LargeX[1233][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1233_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1233][1]=0; L[1233][0]=1;}
			satisfiable[1233][0]=satisfiable[1233][0] & ((x[1233] ^ 0) | (x[ unit1233_0[i][0] ] ^ unit1233_0[i][1]) |(x[ unit1233_0[i][2] ] ^ unit1233_0[i][3]));
			}
		if(X_contra>0) L[1233][0]=2;
		}
	//Check all rules of unit[1233][1]
	L[1233][1] = LargeX[1233][0]>0 ? 1 : 0;
	satisfiable[1233][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1233_1[i][0] ][ unit1233_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1233_1[i][2] ][ unit1233_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1233_1[i][4] ][ unit1233_1[i][5] ] >0);
		X_contra = ( LargeX[1233][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1233_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1233][0]=0; L[1233][1]=1;}
			satisfiable[1233][1]=satisfiable[1233][1] & ((x[1233] ^ 1) | (x[ unit1233_1[i][0] ] ^ unit1233_1[i][1]) |(x[ unit1233_1[i][2] ] ^ unit1233_1[i][3]));
			}
		if(X_contra>0) L[1233][1]=2;
		}
	//Check all rules of unit[1234][0]
	L[1234][0] = LargeX[1234][1]>0 ? 1 : 0;
	satisfiable[1234][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1234_0[i][0] ][ unit1234_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1234_0[i][2] ][ unit1234_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1234_0[i][4] ][ unit1234_0[i][5] ] >0);
		X_contra = ( LargeX[1234][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1234_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1234][1]=0; L[1234][0]=1;}
			satisfiable[1234][0]=satisfiable[1234][0] & ((x[1234] ^ 0) | (x[ unit1234_0[i][0] ] ^ unit1234_0[i][1]) |(x[ unit1234_0[i][2] ] ^ unit1234_0[i][3]));
			}
		if(X_contra>0) L[1234][0]=2;
		}
	//Check all rules of unit[1234][1]
	L[1234][1] = LargeX[1234][0]>0 ? 1 : 0;
	satisfiable[1234][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1234_1[i][0] ][ unit1234_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1234_1[i][2] ][ unit1234_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1234_1[i][4] ][ unit1234_1[i][5] ] >0);
		X_contra = ( LargeX[1234][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1234_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1234][0]=0; L[1234][1]=1;}
			satisfiable[1234][1]=satisfiable[1234][1] & ((x[1234] ^ 1) | (x[ unit1234_1[i][0] ] ^ unit1234_1[i][1]) |(x[ unit1234_1[i][2] ] ^ unit1234_1[i][3]));
			}
		if(X_contra>0) L[1234][1]=2;
		}
	//Check all rules of unit[1235][0]
	L[1235][0] = LargeX[1235][1]>0 ? 1 : 0;
	satisfiable[1235][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1235_0[i][0] ][ unit1235_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1235_0[i][2] ][ unit1235_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1235_0[i][4] ][ unit1235_0[i][5] ] >0);
		X_contra = ( LargeX[1235][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1235_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1235][1]=0; L[1235][0]=1;}
			satisfiable[1235][0]=satisfiable[1235][0] & ((x[1235] ^ 0) | (x[ unit1235_0[i][0] ] ^ unit1235_0[i][1]) |(x[ unit1235_0[i][2] ] ^ unit1235_0[i][3]));
			}
		if(X_contra>0) L[1235][0]=2;
		}
	//Check all rules of unit[1235][1]
	L[1235][1] = LargeX[1235][0]>0 ? 1 : 0;
	satisfiable[1235][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1235_1[i][0] ][ unit1235_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1235_1[i][2] ][ unit1235_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1235_1[i][4] ][ unit1235_1[i][5] ] >0);
		X_contra = ( LargeX[1235][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1235_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1235][0]=0; L[1235][1]=1;}
			satisfiable[1235][1]=satisfiable[1235][1] & ((x[1235] ^ 1) | (x[ unit1235_1[i][0] ] ^ unit1235_1[i][1]) |(x[ unit1235_1[i][2] ] ^ unit1235_1[i][3]));
			}
		if(X_contra>0) L[1235][1]=2;
		}
	//Check all rules of unit[1236][0]
	L[1236][0] = LargeX[1236][1]>0 ? 1 : 0;
	satisfiable[1236][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1236_0[i][0] ][ unit1236_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1236_0[i][2] ][ unit1236_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1236_0[i][4] ][ unit1236_0[i][5] ] >0);
		X_contra = ( LargeX[1236][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1236_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1236][1]=0; L[1236][0]=1;}
			satisfiable[1236][0]=satisfiable[1236][0] & ((x[1236] ^ 0) | (x[ unit1236_0[i][0] ] ^ unit1236_0[i][1]) |(x[ unit1236_0[i][2] ] ^ unit1236_0[i][3]));
			}
		if(X_contra>0) L[1236][0]=2;
		}
	//Check all rules of unit[1236][1]
	L[1236][1] = LargeX[1236][0]>0 ? 1 : 0;
	satisfiable[1236][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1236_1[i][0] ][ unit1236_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1236_1[i][2] ][ unit1236_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1236_1[i][4] ][ unit1236_1[i][5] ] >0);
		X_contra = ( LargeX[1236][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1236_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1236][0]=0; L[1236][1]=1;}
			satisfiable[1236][1]=satisfiable[1236][1] & ((x[1236] ^ 1) | (x[ unit1236_1[i][0] ] ^ unit1236_1[i][1]) |(x[ unit1236_1[i][2] ] ^ unit1236_1[i][3]));
			}
		if(X_contra>0) L[1236][1]=2;
		}
	//Check all rules of unit[1237][0]
	L[1237][0] = LargeX[1237][1]>0 ? 1 : 0;
	satisfiable[1237][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1237_0[i][0] ][ unit1237_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1237_0[i][2] ][ unit1237_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1237_0[i][4] ][ unit1237_0[i][5] ] >0);
		X_contra = ( LargeX[1237][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1237_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1237][1]=0; L[1237][0]=1;}
			satisfiable[1237][0]=satisfiable[1237][0] & ((x[1237] ^ 0) | (x[ unit1237_0[i][0] ] ^ unit1237_0[i][1]) |(x[ unit1237_0[i][2] ] ^ unit1237_0[i][3]));
			}
		if(X_contra>0) L[1237][0]=2;
		}
	//Check all rules of unit[1237][1]
	L[1237][1] = LargeX[1237][0]>0 ? 1 : 0;
	satisfiable[1237][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1237_1[i][0] ][ unit1237_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1237_1[i][2] ][ unit1237_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1237_1[i][4] ][ unit1237_1[i][5] ] >0);
		X_contra = ( LargeX[1237][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1237_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1237][0]=0; L[1237][1]=1;}
			satisfiable[1237][1]=satisfiable[1237][1] & ((x[1237] ^ 1) | (x[ unit1237_1[i][0] ] ^ unit1237_1[i][1]) |(x[ unit1237_1[i][2] ] ^ unit1237_1[i][3]));
			}
		if(X_contra>0) L[1237][1]=2;
		}
	//Check all rules of unit[1238][0]
	L[1238][0] = LargeX[1238][1]>0 ? 1 : 0;
	satisfiable[1238][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1238_0[i][0] ][ unit1238_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1238_0[i][2] ][ unit1238_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1238_0[i][4] ][ unit1238_0[i][5] ] >0);
		X_contra = ( LargeX[1238][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1238_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1238][1]=0; L[1238][0]=1;}
			satisfiable[1238][0]=satisfiable[1238][0] & ((x[1238] ^ 0) | (x[ unit1238_0[i][0] ] ^ unit1238_0[i][1]) |(x[ unit1238_0[i][2] ] ^ unit1238_0[i][3]));
			}
		if(X_contra>0) L[1238][0]=2;
		}
	//Check all rules of unit[1238][1]
	L[1238][1] = LargeX[1238][0]>0 ? 1 : 0;
	satisfiable[1238][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1238_1[i][0] ][ unit1238_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1238_1[i][2] ][ unit1238_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1238_1[i][4] ][ unit1238_1[i][5] ] >0);
		X_contra = ( LargeX[1238][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1238_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1238][0]=0; L[1238][1]=1;}
			satisfiable[1238][1]=satisfiable[1238][1] & ((x[1238] ^ 1) | (x[ unit1238_1[i][0] ] ^ unit1238_1[i][1]) |(x[ unit1238_1[i][2] ] ^ unit1238_1[i][3]));
			}
		if(X_contra>0) L[1238][1]=2;
		}
=======
#include "amoeba_local_rules.h"
#include "local_rules_1238.h"
void update_L(two_bit_t L[N_VARIABLE+1][2], largeX_t LargeX[N_VARIABLE+1][2], one_bit_t x[N_VARIABLE+1], one_bit_t satisfiable[N_VARIABLE+1][2]){
	//Check all rules of unit[7][0]
	L[7][0] = LargeX[7][1]>0 ? 1 : 0;
	satisfiable[7][0]=1; 
	for(int i=0;i<95;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit7_0[i][0] ][ unit7_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit7_0[i][2] ][ unit7_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit7_0[i][4] ][ unit7_0[i][5] ] >0);
		X_contra = ( LargeX[7][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit7_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[7][1]=0; L[7][0]=1;}
			satisfiable[7][0]=satisfiable[7][0] & ((x[7] ^ 0) | (x[ unit7_0[i][0] ] ^ unit7_0[i][1]) |(x[ unit7_0[i][2] ] ^ unit7_0[i][3]));
			}
		if(X_contra>0) L[7][0]=2;
		}
	//Check all rules of unit[7][1]
	L[7][1] = LargeX[7][0]>0 ? 1 : 0;
	satisfiable[7][1]=1; 
	for(int i=0;i<42;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit7_1[i][0] ][ unit7_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit7_1[i][2] ][ unit7_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit7_1[i][4] ][ unit7_1[i][5] ] >0);
		X_contra = ( LargeX[7][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit7_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[7][0]=0; L[7][1]=1;}
			satisfiable[7][1]=satisfiable[7][1] & ((x[7] ^ 1) | (x[ unit7_1[i][0] ] ^ unit7_1[i][1]) |(x[ unit7_1[i][2] ] ^ unit7_1[i][3]));
			}
		if(X_contra>0) L[7][1]=2;
		}
	//Check all rules of unit[8][0]
	L[8][0] = LargeX[8][1]>0 ? 1 : 0;
	satisfiable[8][0]=1; 
	for(int i=0;i<101;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit8_0[i][0] ][ unit8_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit8_0[i][2] ][ unit8_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit8_0[i][4] ][ unit8_0[i][5] ] >0);
		X_contra = ( LargeX[8][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit8_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[8][1]=0; L[8][0]=1;}
			satisfiable[8][0]=satisfiable[8][0] & ((x[8] ^ 0) | (x[ unit8_0[i][0] ] ^ unit8_0[i][1]) |(x[ unit8_0[i][2] ] ^ unit8_0[i][3]));
			}
		if(X_contra>0) L[8][0]=2;
		}
	//Check all rules of unit[8][1]
	L[8][1] = LargeX[8][0]>0 ? 1 : 0;
	satisfiable[8][1]=1; 
	for(int i=0;i<54;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit8_1[i][0] ][ unit8_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit8_1[i][2] ][ unit8_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit8_1[i][4] ][ unit8_1[i][5] ] >0);
		X_contra = ( LargeX[8][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit8_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[8][0]=0; L[8][1]=1;}
			satisfiable[8][1]=satisfiable[8][1] & ((x[8] ^ 1) | (x[ unit8_1[i][0] ] ^ unit8_1[i][1]) |(x[ unit8_1[i][2] ] ^ unit8_1[i][3]));
			}
		if(X_contra>0) L[8][1]=2;
		}
	//Check all rules of unit[13][0]
	L[13][0] = LargeX[13][1]>0 ? 1 : 0;
	satisfiable[13][0]=1; 
	for(int i=0;i<77;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit13_0[i][0] ][ unit13_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit13_0[i][2] ][ unit13_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit13_0[i][4] ][ unit13_0[i][5] ] >0);
		X_contra = ( LargeX[13][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit13_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[13][1]=0; L[13][0]=1;}
			satisfiable[13][0]=satisfiable[13][0] & ((x[13] ^ 0) | (x[ unit13_0[i][0] ] ^ unit13_0[i][1]) |(x[ unit13_0[i][2] ] ^ unit13_0[i][3]));
			}
		if(X_contra>0) L[13][0]=2;
		}
	//Check all rules of unit[13][1]
	L[13][1] = LargeX[13][0]>0 ? 1 : 0;
	satisfiable[13][1]=1; 
	for(int i=0;i<433;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit13_1[i][0] ][ unit13_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit13_1[i][2] ][ unit13_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit13_1[i][4] ][ unit13_1[i][5] ] >0);
		X_contra = ( LargeX[13][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit13_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[13][0]=0; L[13][1]=1;}
			satisfiable[13][1]=satisfiable[13][1] & ((x[13] ^ 1) | (x[ unit13_1[i][0] ] ^ unit13_1[i][1]) |(x[ unit13_1[i][2] ] ^ unit13_1[i][3]));
			}
		if(X_contra>0) L[13][1]=2;
		}
	//Check all rules of unit[14][0]
	L[14][0] = LargeX[14][1]>0 ? 1 : 0;
	satisfiable[14][0]=1; 
	for(int i=0;i<68;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit14_0[i][0] ][ unit14_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit14_0[i][2] ][ unit14_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit14_0[i][4] ][ unit14_0[i][5] ] >0);
		X_contra = ( LargeX[14][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit14_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[14][1]=0; L[14][0]=1;}
			satisfiable[14][0]=satisfiable[14][0] & ((x[14] ^ 0) | (x[ unit14_0[i][0] ] ^ unit14_0[i][1]) |(x[ unit14_0[i][2] ] ^ unit14_0[i][3]));
			}
		if(X_contra>0) L[14][0]=2;
		}
	//Check all rules of unit[14][1]
	L[14][1] = LargeX[14][0]>0 ? 1 : 0;
	satisfiable[14][1]=1; 
	for(int i=0;i<459;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit14_1[i][0] ][ unit14_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit14_1[i][2] ][ unit14_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit14_1[i][4] ][ unit14_1[i][5] ] >0);
		X_contra = ( LargeX[14][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit14_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[14][0]=0; L[14][1]=1;}
			satisfiable[14][1]=satisfiable[14][1] & ((x[14] ^ 1) | (x[ unit14_1[i][0] ] ^ unit14_1[i][1]) |(x[ unit14_1[i][2] ] ^ unit14_1[i][3]));
			}
		if(X_contra>0) L[14][1]=2;
		}
	//Check all rules of unit[15][0]
	L[15][0] = LargeX[15][1]>0 ? 1 : 0;
	satisfiable[15][0]=1; 
	for(int i=0;i<105;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit15_0[i][0] ][ unit15_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit15_0[i][2] ][ unit15_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit15_0[i][4] ][ unit15_0[i][5] ] >0);
		X_contra = ( LargeX[15][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit15_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[15][1]=0; L[15][0]=1;}
			satisfiable[15][0]=satisfiable[15][0] & ((x[15] ^ 0) | (x[ unit15_0[i][0] ] ^ unit15_0[i][1]) |(x[ unit15_0[i][2] ] ^ unit15_0[i][3]));
			}
		if(X_contra>0) L[15][0]=2;
		}
	//Check all rules of unit[15][1]
	L[15][1] = LargeX[15][0]>0 ? 1 : 0;
	satisfiable[15][1]=1; 
	for(int i=0;i<279;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit15_1[i][0] ][ unit15_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit15_1[i][2] ][ unit15_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit15_1[i][4] ][ unit15_1[i][5] ] >0);
		X_contra = ( LargeX[15][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit15_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[15][0]=0; L[15][1]=1;}
			satisfiable[15][1]=satisfiable[15][1] & ((x[15] ^ 1) | (x[ unit15_1[i][0] ] ^ unit15_1[i][1]) |(x[ unit15_1[i][2] ] ^ unit15_1[i][3]));
			}
		if(X_contra>0) L[15][1]=2;
		}
	//Check all rules of unit[16][0]
	L[16][0] = LargeX[16][1]>0 ? 1 : 0;
	satisfiable[16][0]=1; 
	for(int i=0;i<105;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit16_0[i][0] ][ unit16_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit16_0[i][2] ][ unit16_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit16_0[i][4] ][ unit16_0[i][5] ] >0);
		X_contra = ( LargeX[16][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit16_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[16][1]=0; L[16][0]=1;}
			satisfiable[16][0]=satisfiable[16][0] & ((x[16] ^ 0) | (x[ unit16_0[i][0] ] ^ unit16_0[i][1]) |(x[ unit16_0[i][2] ] ^ unit16_0[i][3]));
			}
		if(X_contra>0) L[16][0]=2;
		}
	//Check all rules of unit[16][1]
	L[16][1] = LargeX[16][0]>0 ? 1 : 0;
	satisfiable[16][1]=1; 
	for(int i=0;i<213;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit16_1[i][0] ][ unit16_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit16_1[i][2] ][ unit16_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit16_1[i][4] ][ unit16_1[i][5] ] >0);
		X_contra = ( LargeX[16][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit16_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[16][0]=0; L[16][1]=1;}
			satisfiable[16][1]=satisfiable[16][1] & ((x[16] ^ 1) | (x[ unit16_1[i][0] ] ^ unit16_1[i][1]) |(x[ unit16_1[i][2] ] ^ unit16_1[i][3]));
			}
		if(X_contra>0) L[16][1]=2;
		}
	//Check all rules of unit[17][0]
	L[17][0] = LargeX[17][1]>0 ? 1 : 0;
	satisfiable[17][0]=1; 
	for(int i=0;i<92;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit17_0[i][0] ][ unit17_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit17_0[i][2] ][ unit17_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit17_0[i][4] ][ unit17_0[i][5] ] >0);
		X_contra = ( LargeX[17][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit17_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[17][1]=0; L[17][0]=1;}
			satisfiable[17][0]=satisfiable[17][0] & ((x[17] ^ 0) | (x[ unit17_0[i][0] ] ^ unit17_0[i][1]) |(x[ unit17_0[i][2] ] ^ unit17_0[i][3]));
			}
		if(X_contra>0) L[17][0]=2;
		}
	//Check all rules of unit[17][1]
	L[17][1] = LargeX[17][0]>0 ? 1 : 0;
	satisfiable[17][1]=1; 
	for(int i=0;i<146;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit17_1[i][0] ][ unit17_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit17_1[i][2] ][ unit17_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit17_1[i][4] ][ unit17_1[i][5] ] >0);
		X_contra = ( LargeX[17][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit17_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[17][0]=0; L[17][1]=1;}
			satisfiable[17][1]=satisfiable[17][1] & ((x[17] ^ 1) | (x[ unit17_1[i][0] ] ^ unit17_1[i][1]) |(x[ unit17_1[i][2] ] ^ unit17_1[i][3]));
			}
		if(X_contra>0) L[17][1]=2;
		}
	//Check all rules of unit[18][0]
	L[18][0] = LargeX[18][1]>0 ? 1 : 0;
	satisfiable[18][0]=1; 
	for(int i=0;i<104;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit18_0[i][0] ][ unit18_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit18_0[i][2] ][ unit18_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit18_0[i][4] ][ unit18_0[i][5] ] >0);
		X_contra = ( LargeX[18][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit18_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[18][1]=0; L[18][0]=1;}
			satisfiable[18][0]=satisfiable[18][0] & ((x[18] ^ 0) | (x[ unit18_0[i][0] ] ^ unit18_0[i][1]) |(x[ unit18_0[i][2] ] ^ unit18_0[i][3]));
			}
		if(X_contra>0) L[18][0]=2;
		}
	//Check all rules of unit[18][1]
	L[18][1] = LargeX[18][0]>0 ? 1 : 0;
	satisfiable[18][1]=1; 
	for(int i=0;i<46;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit18_1[i][0] ][ unit18_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit18_1[i][2] ][ unit18_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit18_1[i][4] ][ unit18_1[i][5] ] >0);
		X_contra = ( LargeX[18][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit18_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[18][0]=0; L[18][1]=1;}
			satisfiable[18][1]=satisfiable[18][1] & ((x[18] ^ 1) | (x[ unit18_1[i][0] ] ^ unit18_1[i][1]) |(x[ unit18_1[i][2] ] ^ unit18_1[i][3]));
			}
		if(X_contra>0) L[18][1]=2;
		}
	//Check all rules of unit[19][0]
	L[19][0] = LargeX[19][1]>0 ? 1 : 0;
	satisfiable[19][0]=1; 
	for(int i=0;i<127;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit19_0[i][0] ][ unit19_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit19_0[i][2] ][ unit19_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit19_0[i][4] ][ unit19_0[i][5] ] >0);
		X_contra = ( LargeX[19][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit19_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[19][1]=0; L[19][0]=1;}
			satisfiable[19][0]=satisfiable[19][0] & ((x[19] ^ 0) | (x[ unit19_0[i][0] ] ^ unit19_0[i][1]) |(x[ unit19_0[i][2] ] ^ unit19_0[i][3]));
			}
		if(X_contra>0) L[19][0]=2;
		}
	//Check all rules of unit[19][1]
	L[19][1] = LargeX[19][0]>0 ? 1 : 0;
	satisfiable[19][1]=1; 
	for(int i=0;i<606;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit19_1[i][0] ][ unit19_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit19_1[i][2] ][ unit19_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit19_1[i][4] ][ unit19_1[i][5] ] >0);
		X_contra = ( LargeX[19][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit19_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[19][0]=0; L[19][1]=1;}
			satisfiable[19][1]=satisfiable[19][1] & ((x[19] ^ 1) | (x[ unit19_1[i][0] ] ^ unit19_1[i][1]) |(x[ unit19_1[i][2] ] ^ unit19_1[i][3]));
			}
		if(X_contra>0) L[19][1]=2;
		}
	//Check all rules of unit[20][0]
	L[20][0] = LargeX[20][1]>0 ? 1 : 0;
	satisfiable[20][0]=1; 
	for(int i=0;i<134;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit20_0[i][0] ][ unit20_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit20_0[i][2] ][ unit20_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit20_0[i][4] ][ unit20_0[i][5] ] >0);
		X_contra = ( LargeX[20][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit20_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[20][1]=0; L[20][0]=1;}
			satisfiable[20][0]=satisfiable[20][0] & ((x[20] ^ 0) | (x[ unit20_0[i][0] ] ^ unit20_0[i][1]) |(x[ unit20_0[i][2] ] ^ unit20_0[i][3]));
			}
		if(X_contra>0) L[20][0]=2;
		}
	//Check all rules of unit[20][1]
	L[20][1] = LargeX[20][0]>0 ? 1 : 0;
	satisfiable[20][1]=1; 
	for(int i=0;i<608;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit20_1[i][0] ][ unit20_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit20_1[i][2] ][ unit20_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit20_1[i][4] ][ unit20_1[i][5] ] >0);
		X_contra = ( LargeX[20][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit20_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[20][0]=0; L[20][1]=1;}
			satisfiable[20][1]=satisfiable[20][1] & ((x[20] ^ 1) | (x[ unit20_1[i][0] ] ^ unit20_1[i][1]) |(x[ unit20_1[i][2] ] ^ unit20_1[i][3]));
			}
		if(X_contra>0) L[20][1]=2;
		}
	//Check all rules of unit[21][0]
	L[21][0] = LargeX[21][1]>0 ? 1 : 0;
	satisfiable[21][0]=1; 
	for(int i=0;i<63;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit21_0[i][0] ][ unit21_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit21_0[i][2] ][ unit21_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit21_0[i][4] ][ unit21_0[i][5] ] >0);
		X_contra = ( LargeX[21][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit21_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[21][1]=0; L[21][0]=1;}
			satisfiable[21][0]=satisfiable[21][0] & ((x[21] ^ 0) | (x[ unit21_0[i][0] ] ^ unit21_0[i][1]) |(x[ unit21_0[i][2] ] ^ unit21_0[i][3]));
			}
		if(X_contra>0) L[21][0]=2;
		}
	//Check all rules of unit[21][1]
	L[21][1] = LargeX[21][0]>0 ? 1 : 0;
	satisfiable[21][1]=1; 
	for(int i=0;i<661;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit21_1[i][0] ][ unit21_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit21_1[i][2] ][ unit21_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit21_1[i][4] ][ unit21_1[i][5] ] >0);
		X_contra = ( LargeX[21][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit21_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[21][0]=0; L[21][1]=1;}
			satisfiable[21][1]=satisfiable[21][1] & ((x[21] ^ 1) | (x[ unit21_1[i][0] ] ^ unit21_1[i][1]) |(x[ unit21_1[i][2] ] ^ unit21_1[i][3]));
			}
		if(X_contra>0) L[21][1]=2;
		}
	//Check all rules of unit[22][0]
	L[22][0] = LargeX[22][1]>0 ? 1 : 0;
	satisfiable[22][0]=1; 
	for(int i=0;i<89;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit22_0[i][0] ][ unit22_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit22_0[i][2] ][ unit22_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit22_0[i][4] ][ unit22_0[i][5] ] >0);
		X_contra = ( LargeX[22][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit22_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[22][1]=0; L[22][0]=1;}
			satisfiable[22][0]=satisfiable[22][0] & ((x[22] ^ 0) | (x[ unit22_0[i][0] ] ^ unit22_0[i][1]) |(x[ unit22_0[i][2] ] ^ unit22_0[i][3]));
			}
		if(X_contra>0) L[22][0]=2;
		}
	//Check all rules of unit[22][1]
	L[22][1] = LargeX[22][0]>0 ? 1 : 0;
	satisfiable[22][1]=1; 
	for(int i=0;i<595;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit22_1[i][0] ][ unit22_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit22_1[i][2] ][ unit22_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit22_1[i][4] ][ unit22_1[i][5] ] >0);
		X_contra = ( LargeX[22][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit22_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[22][0]=0; L[22][1]=1;}
			satisfiable[22][1]=satisfiable[22][1] & ((x[22] ^ 1) | (x[ unit22_1[i][0] ] ^ unit22_1[i][1]) |(x[ unit22_1[i][2] ] ^ unit22_1[i][3]));
			}
		if(X_contra>0) L[22][1]=2;
		}
	//Check all rules of unit[23][0]
	L[23][0] = LargeX[23][1]>0 ? 1 : 0;
	satisfiable[23][0]=1; 
	for(int i=0;i<113;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit23_0[i][0] ][ unit23_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit23_0[i][2] ][ unit23_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit23_0[i][4] ][ unit23_0[i][5] ] >0);
		X_contra = ( LargeX[23][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit23_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[23][1]=0; L[23][0]=1;}
			satisfiable[23][0]=satisfiable[23][0] & ((x[23] ^ 0) | (x[ unit23_0[i][0] ] ^ unit23_0[i][1]) |(x[ unit23_0[i][2] ] ^ unit23_0[i][3]));
			}
		if(X_contra>0) L[23][0]=2;
		}
	//Check all rules of unit[23][1]
	L[23][1] = LargeX[23][0]>0 ? 1 : 0;
	satisfiable[23][1]=1; 
	for(int i=0;i<552;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit23_1[i][0] ][ unit23_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit23_1[i][2] ][ unit23_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit23_1[i][4] ][ unit23_1[i][5] ] >0);
		X_contra = ( LargeX[23][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit23_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[23][0]=0; L[23][1]=1;}
			satisfiable[23][1]=satisfiable[23][1] & ((x[23] ^ 1) | (x[ unit23_1[i][0] ] ^ unit23_1[i][1]) |(x[ unit23_1[i][2] ] ^ unit23_1[i][3]));
			}
		if(X_contra>0) L[23][1]=2;
		}
	//Check all rules of unit[24][0]
	L[24][0] = LargeX[24][1]>0 ? 1 : 0;
	satisfiable[24][0]=1; 
	for(int i=0;i<107;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit24_0[i][0] ][ unit24_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit24_0[i][2] ][ unit24_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit24_0[i][4] ][ unit24_0[i][5] ] >0);
		X_contra = ( LargeX[24][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit24_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[24][1]=0; L[24][0]=1;}
			satisfiable[24][0]=satisfiable[24][0] & ((x[24] ^ 0) | (x[ unit24_0[i][0] ] ^ unit24_0[i][1]) |(x[ unit24_0[i][2] ] ^ unit24_0[i][3]));
			}
		if(X_contra>0) L[24][0]=2;
		}
	//Check all rules of unit[24][1]
	L[24][1] = LargeX[24][0]>0 ? 1 : 0;
	satisfiable[24][1]=1; 
	for(int i=0;i<505;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit24_1[i][0] ][ unit24_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit24_1[i][2] ][ unit24_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit24_1[i][4] ][ unit24_1[i][5] ] >0);
		X_contra = ( LargeX[24][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit24_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[24][0]=0; L[24][1]=1;}
			satisfiable[24][1]=satisfiable[24][1] & ((x[24] ^ 1) | (x[ unit24_1[i][0] ] ^ unit24_1[i][1]) |(x[ unit24_1[i][2] ] ^ unit24_1[i][3]));
			}
		if(X_contra>0) L[24][1]=2;
		}
	//Check all rules of unit[25][0]
	L[25][0] = LargeX[25][1]>0 ? 1 : 0;
	satisfiable[25][0]=1; 
	for(int i=0;i<84;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit25_0[i][0] ][ unit25_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit25_0[i][2] ][ unit25_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit25_0[i][4] ][ unit25_0[i][5] ] >0);
		X_contra = ( LargeX[25][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit25_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[25][1]=0; L[25][0]=1;}
			satisfiable[25][0]=satisfiable[25][0] & ((x[25] ^ 0) | (x[ unit25_0[i][0] ] ^ unit25_0[i][1]) |(x[ unit25_0[i][2] ] ^ unit25_0[i][3]));
			}
		if(X_contra>0) L[25][0]=2;
		}
	//Check all rules of unit[25][1]
	L[25][1] = LargeX[25][0]>0 ? 1 : 0;
	satisfiable[25][1]=1; 
	for(int i=0;i<598;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit25_1[i][0] ][ unit25_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit25_1[i][2] ][ unit25_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit25_1[i][4] ][ unit25_1[i][5] ] >0);
		X_contra = ( LargeX[25][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit25_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[25][0]=0; L[25][1]=1;}
			satisfiable[25][1]=satisfiable[25][1] & ((x[25] ^ 1) | (x[ unit25_1[i][0] ] ^ unit25_1[i][1]) |(x[ unit25_1[i][2] ] ^ unit25_1[i][3]));
			}
		if(X_contra>0) L[25][1]=2;
		}
	//Check all rules of unit[26][0]
	L[26][0] = LargeX[26][1]>0 ? 1 : 0;
	satisfiable[26][0]=1; 
	for(int i=0;i<77;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit26_0[i][0] ][ unit26_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit26_0[i][2] ][ unit26_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit26_0[i][4] ][ unit26_0[i][5] ] >0);
		X_contra = ( LargeX[26][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit26_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[26][1]=0; L[26][0]=1;}
			satisfiable[26][0]=satisfiable[26][0] & ((x[26] ^ 0) | (x[ unit26_0[i][0] ] ^ unit26_0[i][1]) |(x[ unit26_0[i][2] ] ^ unit26_0[i][3]));
			}
		if(X_contra>0) L[26][0]=2;
		}
	//Check all rules of unit[26][1]
	L[26][1] = LargeX[26][0]>0 ? 1 : 0;
	satisfiable[26][1]=1; 
	for(int i=0;i<548;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit26_1[i][0] ][ unit26_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit26_1[i][2] ][ unit26_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit26_1[i][4] ][ unit26_1[i][5] ] >0);
		X_contra = ( LargeX[26][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit26_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[26][0]=0; L[26][1]=1;}
			satisfiable[26][1]=satisfiable[26][1] & ((x[26] ^ 1) | (x[ unit26_1[i][0] ] ^ unit26_1[i][1]) |(x[ unit26_1[i][2] ] ^ unit26_1[i][3]));
			}
		if(X_contra>0) L[26][1]=2;
		}
	//Check all rules of unit[27][0]
	L[27][0] = LargeX[27][1]>0 ? 1 : 0;
	satisfiable[27][0]=1; 
	for(int i=0;i<140;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit27_0[i][0] ][ unit27_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit27_0[i][2] ][ unit27_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit27_0[i][4] ][ unit27_0[i][5] ] >0);
		X_contra = ( LargeX[27][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit27_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[27][1]=0; L[27][0]=1;}
			satisfiable[27][0]=satisfiable[27][0] & ((x[27] ^ 0) | (x[ unit27_0[i][0] ] ^ unit27_0[i][1]) |(x[ unit27_0[i][2] ] ^ unit27_0[i][3]));
			}
		if(X_contra>0) L[27][0]=2;
		}
	//Check all rules of unit[27][1]
	L[27][1] = LargeX[27][0]>0 ? 1 : 0;
	satisfiable[27][1]=1; 
	for(int i=0;i<468;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit27_1[i][0] ][ unit27_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit27_1[i][2] ][ unit27_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit27_1[i][4] ][ unit27_1[i][5] ] >0);
		X_contra = ( LargeX[27][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit27_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[27][0]=0; L[27][1]=1;}
			satisfiable[27][1]=satisfiable[27][1] & ((x[27] ^ 1) | (x[ unit27_1[i][0] ] ^ unit27_1[i][1]) |(x[ unit27_1[i][2] ] ^ unit27_1[i][3]));
			}
		if(X_contra>0) L[27][1]=2;
		}
	//Check all rules of unit[28][0]
	L[28][0] = LargeX[28][1]>0 ? 1 : 0;
	satisfiable[28][0]=1; 
	for(int i=0;i<136;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit28_0[i][0] ][ unit28_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit28_0[i][2] ][ unit28_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit28_0[i][4] ][ unit28_0[i][5] ] >0);
		X_contra = ( LargeX[28][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit28_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[28][1]=0; L[28][0]=1;}
			satisfiable[28][0]=satisfiable[28][0] & ((x[28] ^ 0) | (x[ unit28_0[i][0] ] ^ unit28_0[i][1]) |(x[ unit28_0[i][2] ] ^ unit28_0[i][3]));
			}
		if(X_contra>0) L[28][0]=2;
		}
	//Check all rules of unit[28][1]
	L[28][1] = LargeX[28][0]>0 ? 1 : 0;
	satisfiable[28][1]=1; 
	for(int i=0;i<528;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit28_1[i][0] ][ unit28_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit28_1[i][2] ][ unit28_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit28_1[i][4] ][ unit28_1[i][5] ] >0);
		X_contra = ( LargeX[28][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit28_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[28][0]=0; L[28][1]=1;}
			satisfiable[28][1]=satisfiable[28][1] & ((x[28] ^ 1) | (x[ unit28_1[i][0] ] ^ unit28_1[i][1]) |(x[ unit28_1[i][2] ] ^ unit28_1[i][3]));
			}
		if(X_contra>0) L[28][1]=2;
		}
	//Check all rules of unit[29][0]
	L[29][0] = LargeX[29][1]>0 ? 1 : 0;
	satisfiable[29][0]=1; 
	for(int i=0;i<133;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit29_0[i][0] ][ unit29_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit29_0[i][2] ][ unit29_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit29_0[i][4] ][ unit29_0[i][5] ] >0);
		X_contra = ( LargeX[29][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit29_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[29][1]=0; L[29][0]=1;}
			satisfiable[29][0]=satisfiable[29][0] & ((x[29] ^ 0) | (x[ unit29_0[i][0] ] ^ unit29_0[i][1]) |(x[ unit29_0[i][2] ] ^ unit29_0[i][3]));
			}
		if(X_contra>0) L[29][0]=2;
		}
	//Check all rules of unit[29][1]
	L[29][1] = LargeX[29][0]>0 ? 1 : 0;
	satisfiable[29][1]=1; 
	for(int i=0;i<642;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit29_1[i][0] ][ unit29_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit29_1[i][2] ][ unit29_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit29_1[i][4] ][ unit29_1[i][5] ] >0);
		X_contra = ( LargeX[29][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit29_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[29][0]=0; L[29][1]=1;}
			satisfiable[29][1]=satisfiable[29][1] & ((x[29] ^ 1) | (x[ unit29_1[i][0] ] ^ unit29_1[i][1]) |(x[ unit29_1[i][2] ] ^ unit29_1[i][3]));
			}
		if(X_contra>0) L[29][1]=2;
		}
	//Check all rules of unit[30][0]
	L[30][0] = LargeX[30][1]>0 ? 1 : 0;
	satisfiable[30][0]=1; 
	for(int i=0;i<142;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit30_0[i][0] ][ unit30_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit30_0[i][2] ][ unit30_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit30_0[i][4] ][ unit30_0[i][5] ] >0);
		X_contra = ( LargeX[30][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit30_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[30][1]=0; L[30][0]=1;}
			satisfiable[30][0]=satisfiable[30][0] & ((x[30] ^ 0) | (x[ unit30_0[i][0] ] ^ unit30_0[i][1]) |(x[ unit30_0[i][2] ] ^ unit30_0[i][3]));
			}
		if(X_contra>0) L[30][0]=2;
		}
	//Check all rules of unit[30][1]
	L[30][1] = LargeX[30][0]>0 ? 1 : 0;
	satisfiable[30][1]=1; 
	for(int i=0;i<752;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit30_1[i][0] ][ unit30_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit30_1[i][2] ][ unit30_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit30_1[i][4] ][ unit30_1[i][5] ] >0);
		X_contra = ( LargeX[30][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit30_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[30][0]=0; L[30][1]=1;}
			satisfiable[30][1]=satisfiable[30][1] & ((x[30] ^ 1) | (x[ unit30_1[i][0] ] ^ unit30_1[i][1]) |(x[ unit30_1[i][2] ] ^ unit30_1[i][3]));
			}
		if(X_contra>0) L[30][1]=2;
		}
	//Check all rules of unit[31][0]
	L[31][0] = LargeX[31][1]>0 ? 1 : 0;
	satisfiable[31][0]=1; 
	for(int i=0;i<103;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit31_0[i][0] ][ unit31_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit31_0[i][2] ][ unit31_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit31_0[i][4] ][ unit31_0[i][5] ] >0);
		X_contra = ( LargeX[31][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit31_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[31][1]=0; L[31][0]=1;}
			satisfiable[31][0]=satisfiable[31][0] & ((x[31] ^ 0) | (x[ unit31_0[i][0] ] ^ unit31_0[i][1]) |(x[ unit31_0[i][2] ] ^ unit31_0[i][3]));
			}
		if(X_contra>0) L[31][0]=2;
		}
	//Check all rules of unit[31][1]
	L[31][1] = LargeX[31][0]>0 ? 1 : 0;
	satisfiable[31][1]=1; 
	for(int i=0;i<32;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit31_1[i][0] ][ unit31_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit31_1[i][2] ][ unit31_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit31_1[i][4] ][ unit31_1[i][5] ] >0);
		X_contra = ( LargeX[31][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit31_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[31][0]=0; L[31][1]=1;}
			satisfiable[31][1]=satisfiable[31][1] & ((x[31] ^ 1) | (x[ unit31_1[i][0] ] ^ unit31_1[i][1]) |(x[ unit31_1[i][2] ] ^ unit31_1[i][3]));
			}
		if(X_contra>0) L[31][1]=2;
		}
	//Check all rules of unit[32][0]
	L[32][0] = LargeX[32][1]>0 ? 1 : 0;
	satisfiable[32][0]=1; 
	for(int i=0;i<100;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit32_0[i][0] ][ unit32_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit32_0[i][2] ][ unit32_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit32_0[i][4] ][ unit32_0[i][5] ] >0);
		X_contra = ( LargeX[32][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit32_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[32][1]=0; L[32][0]=1;}
			satisfiable[32][0]=satisfiable[32][0] & ((x[32] ^ 0) | (x[ unit32_0[i][0] ] ^ unit32_0[i][1]) |(x[ unit32_0[i][2] ] ^ unit32_0[i][3]));
			}
		if(X_contra>0) L[32][0]=2;
		}
	//Check all rules of unit[32][1]
	L[32][1] = LargeX[32][0]>0 ? 1 : 0;
	satisfiable[32][1]=1; 
	for(int i=0;i<153;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit32_1[i][0] ][ unit32_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit32_1[i][2] ][ unit32_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit32_1[i][4] ][ unit32_1[i][5] ] >0);
		X_contra = ( LargeX[32][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit32_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[32][0]=0; L[32][1]=1;}
			satisfiable[32][1]=satisfiable[32][1] & ((x[32] ^ 1) | (x[ unit32_1[i][0] ] ^ unit32_1[i][1]) |(x[ unit32_1[i][2] ] ^ unit32_1[i][3]));
			}
		if(X_contra>0) L[32][1]=2;
		}
	//Check all rules of unit[33][0]
	L[33][0] = LargeX[33][1]>0 ? 1 : 0;
	satisfiable[33][0]=1; 
	for(int i=0;i<53;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit33_0[i][0] ][ unit33_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit33_0[i][2] ][ unit33_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit33_0[i][4] ][ unit33_0[i][5] ] >0);
		X_contra = ( LargeX[33][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit33_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[33][1]=0; L[33][0]=1;}
			satisfiable[33][0]=satisfiable[33][0] & ((x[33] ^ 0) | (x[ unit33_0[i][0] ] ^ unit33_0[i][1]) |(x[ unit33_0[i][2] ] ^ unit33_0[i][3]));
			}
		if(X_contra>0) L[33][0]=2;
		}
	//Check all rules of unit[33][1]
	L[33][1] = LargeX[33][0]>0 ? 1 : 0;
	satisfiable[33][1]=1; 
	for(int i=0;i<236;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit33_1[i][0] ][ unit33_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit33_1[i][2] ][ unit33_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit33_1[i][4] ][ unit33_1[i][5] ] >0);
		X_contra = ( LargeX[33][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit33_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[33][0]=0; L[33][1]=1;}
			satisfiable[33][1]=satisfiable[33][1] & ((x[33] ^ 1) | (x[ unit33_1[i][0] ] ^ unit33_1[i][1]) |(x[ unit33_1[i][2] ] ^ unit33_1[i][3]));
			}
		if(X_contra>0) L[33][1]=2;
		}
	//Check all rules of unit[34][0]
	L[34][0] = LargeX[34][1]>0 ? 1 : 0;
	satisfiable[34][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit34_0[i][0] ][ unit34_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit34_0[i][2] ][ unit34_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit34_0[i][4] ][ unit34_0[i][5] ] >0);
		X_contra = ( LargeX[34][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit34_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[34][1]=0; L[34][0]=1;}
			satisfiable[34][0]=satisfiable[34][0] & ((x[34] ^ 0) | (x[ unit34_0[i][0] ] ^ unit34_0[i][1]) |(x[ unit34_0[i][2] ] ^ unit34_0[i][3]));
			}
		if(X_contra>0) L[34][0]=2;
		}
	//Check all rules of unit[34][1]
	L[34][1] = LargeX[34][0]>0 ? 1 : 0;
	satisfiable[34][1]=1; 
	for(int i=0;i<308;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit34_1[i][0] ][ unit34_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit34_1[i][2] ][ unit34_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit34_1[i][4] ][ unit34_1[i][5] ] >0);
		X_contra = ( LargeX[34][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit34_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[34][0]=0; L[34][1]=1;}
			satisfiable[34][1]=satisfiable[34][1] & ((x[34] ^ 1) | (x[ unit34_1[i][0] ] ^ unit34_1[i][1]) |(x[ unit34_1[i][2] ] ^ unit34_1[i][3]));
			}
		if(X_contra>0) L[34][1]=2;
		}
	//Check all rules of unit[35][0]
	L[35][0] = LargeX[35][1]>0 ? 1 : 0;
	satisfiable[35][0]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit35_0[i][0] ][ unit35_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit35_0[i][2] ][ unit35_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit35_0[i][4] ][ unit35_0[i][5] ] >0);
		X_contra = ( LargeX[35][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit35_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[35][1]=0; L[35][0]=1;}
			satisfiable[35][0]=satisfiable[35][0] & ((x[35] ^ 0) | (x[ unit35_0[i][0] ] ^ unit35_0[i][1]) |(x[ unit35_0[i][2] ] ^ unit35_0[i][3]));
			}
		if(X_contra>0) L[35][0]=2;
		}
	//Check all rules of unit[35][1]
	L[35][1] = LargeX[35][0]>0 ? 1 : 0;
	satisfiable[35][1]=1; 
	for(int i=0;i<325;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit35_1[i][0] ][ unit35_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit35_1[i][2] ][ unit35_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit35_1[i][4] ][ unit35_1[i][5] ] >0);
		X_contra = ( LargeX[35][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit35_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[35][0]=0; L[35][1]=1;}
			satisfiable[35][1]=satisfiable[35][1] & ((x[35] ^ 1) | (x[ unit35_1[i][0] ] ^ unit35_1[i][1]) |(x[ unit35_1[i][2] ] ^ unit35_1[i][3]));
			}
		if(X_contra>0) L[35][1]=2;
		}
	//Check all rules of unit[36][0]
	L[36][0] = LargeX[36][1]>0 ? 1 : 0;
	satisfiable[36][0]=1; 
	for(int i=0;i<136;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit36_0[i][0] ][ unit36_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit36_0[i][2] ][ unit36_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit36_0[i][4] ][ unit36_0[i][5] ] >0);
		X_contra = ( LargeX[36][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit36_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[36][1]=0; L[36][0]=1;}
			satisfiable[36][0]=satisfiable[36][0] & ((x[36] ^ 0) | (x[ unit36_0[i][0] ] ^ unit36_0[i][1]) |(x[ unit36_0[i][2] ] ^ unit36_0[i][3]));
			}
		if(X_contra>0) L[36][0]=2;
		}
	//Check all rules of unit[36][1]
	L[36][1] = LargeX[36][0]>0 ? 1 : 0;
	satisfiable[36][1]=1; 
	for(int i=0;i<397;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit36_1[i][0] ][ unit36_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit36_1[i][2] ][ unit36_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit36_1[i][4] ][ unit36_1[i][5] ] >0);
		X_contra = ( LargeX[36][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit36_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[36][0]=0; L[36][1]=1;}
			satisfiable[36][1]=satisfiable[36][1] & ((x[36] ^ 1) | (x[ unit36_1[i][0] ] ^ unit36_1[i][1]) |(x[ unit36_1[i][2] ] ^ unit36_1[i][3]));
			}
		if(X_contra>0) L[36][1]=2;
		}
	//Check all rules of unit[43][0]
	L[43][0] = LargeX[43][1]>0 ? 1 : 0;
	satisfiable[43][0]=1; 
	for(int i=0;i<102;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit43_0[i][0] ][ unit43_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit43_0[i][2] ][ unit43_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit43_0[i][4] ][ unit43_0[i][5] ] >0);
		X_contra = ( LargeX[43][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit43_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[43][1]=0; L[43][0]=1;}
			satisfiable[43][0]=satisfiable[43][0] & ((x[43] ^ 0) | (x[ unit43_0[i][0] ] ^ unit43_0[i][1]) |(x[ unit43_0[i][2] ] ^ unit43_0[i][3]));
			}
		if(X_contra>0) L[43][0]=2;
		}
	//Check all rules of unit[43][1]
	L[43][1] = LargeX[43][0]>0 ? 1 : 0;
	satisfiable[43][1]=1; 
	for(int i=0;i<44;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit43_1[i][0] ][ unit43_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit43_1[i][2] ][ unit43_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit43_1[i][4] ][ unit43_1[i][5] ] >0);
		X_contra = ( LargeX[43][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit43_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[43][0]=0; L[43][1]=1;}
			satisfiable[43][1]=satisfiable[43][1] & ((x[43] ^ 1) | (x[ unit43_1[i][0] ] ^ unit43_1[i][1]) |(x[ unit43_1[i][2] ] ^ unit43_1[i][3]));
			}
		if(X_contra>0) L[43][1]=2;
		}
	//Check all rules of unit[44][0]
	L[44][0] = LargeX[44][1]>0 ? 1 : 0;
	satisfiable[44][0]=1; 
	for(int i=0;i<107;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit44_0[i][0] ][ unit44_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit44_0[i][2] ][ unit44_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit44_0[i][4] ][ unit44_0[i][5] ] >0);
		X_contra = ( LargeX[44][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit44_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[44][1]=0; L[44][0]=1;}
			satisfiable[44][0]=satisfiable[44][0] & ((x[44] ^ 0) | (x[ unit44_0[i][0] ] ^ unit44_0[i][1]) |(x[ unit44_0[i][2] ] ^ unit44_0[i][3]));
			}
		if(X_contra>0) L[44][0]=2;
		}
	//Check all rules of unit[44][1]
	L[44][1] = LargeX[44][0]>0 ? 1 : 0;
	satisfiable[44][1]=1; 
	for(int i=0;i<39;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit44_1[i][0] ][ unit44_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit44_1[i][2] ][ unit44_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit44_1[i][4] ][ unit44_1[i][5] ] >0);
		X_contra = ( LargeX[44][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit44_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[44][0]=0; L[44][1]=1;}
			satisfiable[44][1]=satisfiable[44][1] & ((x[44] ^ 1) | (x[ unit44_1[i][0] ] ^ unit44_1[i][1]) |(x[ unit44_1[i][2] ] ^ unit44_1[i][3]));
			}
		if(X_contra>0) L[44][1]=2;
		}
	//Check all rules of unit[47][0]
	L[47][0] = LargeX[47][1]>0 ? 1 : 0;
	satisfiable[47][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit47_0[i][0] ][ unit47_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit47_0[i][2] ][ unit47_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit47_0[i][4] ][ unit47_0[i][5] ] >0);
		X_contra = ( LargeX[47][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit47_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[47][1]=0; L[47][0]=1;}
			satisfiable[47][0]=satisfiable[47][0] & ((x[47] ^ 0) | (x[ unit47_0[i][0] ] ^ unit47_0[i][1]) |(x[ unit47_0[i][2] ] ^ unit47_0[i][3]));
			}
		if(X_contra>0) L[47][0]=2;
		}
	//Check all rules of unit[47][1]
	L[47][1] = LargeX[47][0]>0 ? 1 : 0;
	satisfiable[47][1]=1; 
	for(int i=0;i<22;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit47_1[i][0] ][ unit47_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit47_1[i][2] ][ unit47_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit47_1[i][4] ][ unit47_1[i][5] ] >0);
		X_contra = ( LargeX[47][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit47_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[47][0]=0; L[47][1]=1;}
			satisfiable[47][1]=satisfiable[47][1] & ((x[47] ^ 1) | (x[ unit47_1[i][0] ] ^ unit47_1[i][1]) |(x[ unit47_1[i][2] ] ^ unit47_1[i][3]));
			}
		if(X_contra>0) L[47][1]=2;
		}
	//Check all rules of unit[49][0]
	L[49][0] = LargeX[49][1]>0 ? 1 : 0;
	satisfiable[49][0]=1; 
	for(int i=0;i<103;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit49_0[i][0] ][ unit49_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit49_0[i][2] ][ unit49_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit49_0[i][4] ][ unit49_0[i][5] ] >0);
		X_contra = ( LargeX[49][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit49_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[49][1]=0; L[49][0]=1;}
			satisfiable[49][0]=satisfiable[49][0] & ((x[49] ^ 0) | (x[ unit49_0[i][0] ] ^ unit49_0[i][1]) |(x[ unit49_0[i][2] ] ^ unit49_0[i][3]));
			}
		if(X_contra>0) L[49][0]=2;
		}
	//Check all rules of unit[49][1]
	L[49][1] = LargeX[49][0]>0 ? 1 : 0;
	satisfiable[49][1]=1; 
	for(int i=0;i<136;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit49_1[i][0] ][ unit49_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit49_1[i][2] ][ unit49_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit49_1[i][4] ][ unit49_1[i][5] ] >0);
		X_contra = ( LargeX[49][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit49_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[49][0]=0; L[49][1]=1;}
			satisfiable[49][1]=satisfiable[49][1] & ((x[49] ^ 1) | (x[ unit49_1[i][0] ] ^ unit49_1[i][1]) |(x[ unit49_1[i][2] ] ^ unit49_1[i][3]));
			}
		if(X_contra>0) L[49][1]=2;
		}
	//Check all rules of unit[50][0]
	L[50][0] = LargeX[50][1]>0 ? 1 : 0;
	satisfiable[50][0]=1; 
	for(int i=0;i<86;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit50_0[i][0] ][ unit50_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit50_0[i][2] ][ unit50_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit50_0[i][4] ][ unit50_0[i][5] ] >0);
		X_contra = ( LargeX[50][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit50_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[50][1]=0; L[50][0]=1;}
			satisfiable[50][0]=satisfiable[50][0] & ((x[50] ^ 0) | (x[ unit50_0[i][0] ] ^ unit50_0[i][1]) |(x[ unit50_0[i][2] ] ^ unit50_0[i][3]));
			}
		if(X_contra>0) L[50][0]=2;
		}
	//Check all rules of unit[50][1]
	L[50][1] = LargeX[50][0]>0 ? 1 : 0;
	satisfiable[50][1]=1; 
	for(int i=0;i<122;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit50_1[i][0] ][ unit50_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit50_1[i][2] ][ unit50_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit50_1[i][4] ][ unit50_1[i][5] ] >0);
		X_contra = ( LargeX[50][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit50_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[50][0]=0; L[50][1]=1;}
			satisfiable[50][1]=satisfiable[50][1] & ((x[50] ^ 1) | (x[ unit50_1[i][0] ] ^ unit50_1[i][1]) |(x[ unit50_1[i][2] ] ^ unit50_1[i][3]));
			}
		if(X_contra>0) L[50][1]=2;
		}
	//Check all rules of unit[51][0]
	L[51][0] = LargeX[51][1]>0 ? 1 : 0;
	satisfiable[51][0]=1; 
	for(int i=0;i<143;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit51_0[i][0] ][ unit51_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit51_0[i][2] ][ unit51_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit51_0[i][4] ][ unit51_0[i][5] ] >0);
		X_contra = ( LargeX[51][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit51_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[51][1]=0; L[51][0]=1;}
			satisfiable[51][0]=satisfiable[51][0] & ((x[51] ^ 0) | (x[ unit51_0[i][0] ] ^ unit51_0[i][1]) |(x[ unit51_0[i][2] ] ^ unit51_0[i][3]));
			}
		if(X_contra>0) L[51][0]=2;
		}
	//Check all rules of unit[51][1]
	L[51][1] = LargeX[51][0]>0 ? 1 : 0;
	satisfiable[51][1]=1; 
	for(int i=0;i<98;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit51_1[i][0] ][ unit51_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit51_1[i][2] ][ unit51_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit51_1[i][4] ][ unit51_1[i][5] ] >0);
		X_contra = ( LargeX[51][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit51_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[51][0]=0; L[51][1]=1;}
			satisfiable[51][1]=satisfiable[51][1] & ((x[51] ^ 1) | (x[ unit51_1[i][0] ] ^ unit51_1[i][1]) |(x[ unit51_1[i][2] ] ^ unit51_1[i][3]));
			}
		if(X_contra>0) L[51][1]=2;
		}
	//Check all rules of unit[52][0]
	L[52][0] = LargeX[52][1]>0 ? 1 : 0;
	satisfiable[52][0]=1; 
	for(int i=0;i<148;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit52_0[i][0] ][ unit52_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit52_0[i][2] ][ unit52_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit52_0[i][4] ][ unit52_0[i][5] ] >0);
		X_contra = ( LargeX[52][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit52_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[52][1]=0; L[52][0]=1;}
			satisfiable[52][0]=satisfiable[52][0] & ((x[52] ^ 0) | (x[ unit52_0[i][0] ] ^ unit52_0[i][1]) |(x[ unit52_0[i][2] ] ^ unit52_0[i][3]));
			}
		if(X_contra>0) L[52][0]=2;
		}
	//Check all rules of unit[52][1]
	L[52][1] = LargeX[52][0]>0 ? 1 : 0;
	satisfiable[52][1]=1; 
	for(int i=0;i<82;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit52_1[i][0] ][ unit52_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit52_1[i][2] ][ unit52_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit52_1[i][4] ][ unit52_1[i][5] ] >0);
		X_contra = ( LargeX[52][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit52_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[52][0]=0; L[52][1]=1;}
			satisfiable[52][1]=satisfiable[52][1] & ((x[52] ^ 1) | (x[ unit52_1[i][0] ] ^ unit52_1[i][1]) |(x[ unit52_1[i][2] ] ^ unit52_1[i][3]));
			}
		if(X_contra>0) L[52][1]=2;
		}
	//Check all rules of unit[53][0]
	L[53][0] = LargeX[53][1]>0 ? 1 : 0;
	satisfiable[53][0]=1; 
	for(int i=0;i<137;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit53_0[i][0] ][ unit53_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit53_0[i][2] ][ unit53_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit53_0[i][4] ][ unit53_0[i][5] ] >0);
		X_contra = ( LargeX[53][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit53_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[53][1]=0; L[53][0]=1;}
			satisfiable[53][0]=satisfiable[53][0] & ((x[53] ^ 0) | (x[ unit53_0[i][0] ] ^ unit53_0[i][1]) |(x[ unit53_0[i][2] ] ^ unit53_0[i][3]));
			}
		if(X_contra>0) L[53][0]=2;
		}
	//Check all rules of unit[53][1]
	L[53][1] = LargeX[53][0]>0 ? 1 : 0;
	satisfiable[53][1]=1; 
	for(int i=0;i<66;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit53_1[i][0] ][ unit53_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit53_1[i][2] ][ unit53_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit53_1[i][4] ][ unit53_1[i][5] ] >0);
		X_contra = ( LargeX[53][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit53_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[53][0]=0; L[53][1]=1;}
			satisfiable[53][1]=satisfiable[53][1] & ((x[53] ^ 1) | (x[ unit53_1[i][0] ] ^ unit53_1[i][1]) |(x[ unit53_1[i][2] ] ^ unit53_1[i][3]));
			}
		if(X_contra>0) L[53][1]=2;
		}
	//Check all rules of unit[54][0]
	L[54][0] = LargeX[54][1]>0 ? 1 : 0;
	satisfiable[54][0]=1; 
	for(int i=0;i<75;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit54_0[i][0] ][ unit54_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit54_0[i][2] ][ unit54_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit54_0[i][4] ][ unit54_0[i][5] ] >0);
		X_contra = ( LargeX[54][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit54_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[54][1]=0; L[54][0]=1;}
			satisfiable[54][0]=satisfiable[54][0] & ((x[54] ^ 0) | (x[ unit54_0[i][0] ] ^ unit54_0[i][1]) |(x[ unit54_0[i][2] ] ^ unit54_0[i][3]));
			}
		if(X_contra>0) L[54][0]=2;
		}
	//Check all rules of unit[54][1]
	L[54][1] = LargeX[54][0]>0 ? 1 : 0;
	satisfiable[54][1]=1; 
	for(int i=0;i<49;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit54_1[i][0] ][ unit54_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit54_1[i][2] ][ unit54_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit54_1[i][4] ][ unit54_1[i][5] ] >0);
		X_contra = ( LargeX[54][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit54_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[54][0]=0; L[54][1]=1;}
			satisfiable[54][1]=satisfiable[54][1] & ((x[54] ^ 1) | (x[ unit54_1[i][0] ] ^ unit54_1[i][1]) |(x[ unit54_1[i][2] ] ^ unit54_1[i][3]));
			}
		if(X_contra>0) L[54][1]=2;
		}
	//Check all rules of unit[55][0]
	L[55][0] = LargeX[55][1]>0 ? 1 : 0;
	satisfiable[55][0]=1; 
	for(int i=0;i<114;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit55_0[i][0] ][ unit55_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit55_0[i][2] ][ unit55_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit55_0[i][4] ][ unit55_0[i][5] ] >0);
		X_contra = ( LargeX[55][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit55_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[55][1]=0; L[55][0]=1;}
			satisfiable[55][0]=satisfiable[55][0] & ((x[55] ^ 0) | (x[ unit55_0[i][0] ] ^ unit55_0[i][1]) |(x[ unit55_0[i][2] ] ^ unit55_0[i][3]));
			}
		if(X_contra>0) L[55][0]=2;
		}
	//Check all rules of unit[55][1]
	L[55][1] = LargeX[55][0]>0 ? 1 : 0;
	satisfiable[55][1]=1; 
	for(int i=0;i<167;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit55_1[i][0] ][ unit55_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit55_1[i][2] ][ unit55_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit55_1[i][4] ][ unit55_1[i][5] ] >0);
		X_contra = ( LargeX[55][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit55_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[55][0]=0; L[55][1]=1;}
			satisfiable[55][1]=satisfiable[55][1] & ((x[55] ^ 1) | (x[ unit55_1[i][0] ] ^ unit55_1[i][1]) |(x[ unit55_1[i][2] ] ^ unit55_1[i][3]));
			}
		if(X_contra>0) L[55][1]=2;
		}
	//Check all rules of unit[56][0]
	L[56][0] = LargeX[56][1]>0 ? 1 : 0;
	satisfiable[56][0]=1; 
	for(int i=0;i<141;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit56_0[i][0] ][ unit56_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit56_0[i][2] ][ unit56_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit56_0[i][4] ][ unit56_0[i][5] ] >0);
		X_contra = ( LargeX[56][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit56_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[56][1]=0; L[56][0]=1;}
			satisfiable[56][0]=satisfiable[56][0] & ((x[56] ^ 0) | (x[ unit56_0[i][0] ] ^ unit56_0[i][1]) |(x[ unit56_0[i][2] ] ^ unit56_0[i][3]));
			}
		if(X_contra>0) L[56][0]=2;
		}
	//Check all rules of unit[56][1]
	L[56][1] = LargeX[56][0]>0 ? 1 : 0;
	satisfiable[56][1]=1; 
	for(int i=0;i<160;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit56_1[i][0] ][ unit56_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit56_1[i][2] ][ unit56_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit56_1[i][4] ][ unit56_1[i][5] ] >0);
		X_contra = ( LargeX[56][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit56_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[56][0]=0; L[56][1]=1;}
			satisfiable[56][1]=satisfiable[56][1] & ((x[56] ^ 1) | (x[ unit56_1[i][0] ] ^ unit56_1[i][1]) |(x[ unit56_1[i][2] ] ^ unit56_1[i][3]));
			}
		if(X_contra>0) L[56][1]=2;
		}
	//Check all rules of unit[57][0]
	L[57][0] = LargeX[57][1]>0 ? 1 : 0;
	satisfiable[57][0]=1; 
	for(int i=0;i<138;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit57_0[i][0] ][ unit57_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit57_0[i][2] ][ unit57_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit57_0[i][4] ][ unit57_0[i][5] ] >0);
		X_contra = ( LargeX[57][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit57_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[57][1]=0; L[57][0]=1;}
			satisfiable[57][0]=satisfiable[57][0] & ((x[57] ^ 0) | (x[ unit57_0[i][0] ] ^ unit57_0[i][1]) |(x[ unit57_0[i][2] ] ^ unit57_0[i][3]));
			}
		if(X_contra>0) L[57][0]=2;
		}
	//Check all rules of unit[57][1]
	L[57][1] = LargeX[57][0]>0 ? 1 : 0;
	satisfiable[57][1]=1; 
	for(int i=0;i<158;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit57_1[i][0] ][ unit57_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit57_1[i][2] ][ unit57_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit57_1[i][4] ][ unit57_1[i][5] ] >0);
		X_contra = ( LargeX[57][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit57_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[57][0]=0; L[57][1]=1;}
			satisfiable[57][1]=satisfiable[57][1] & ((x[57] ^ 1) | (x[ unit57_1[i][0] ] ^ unit57_1[i][1]) |(x[ unit57_1[i][2] ] ^ unit57_1[i][3]));
			}
		if(X_contra>0) L[57][1]=2;
		}
	//Check all rules of unit[58][0]
	L[58][0] = LargeX[58][1]>0 ? 1 : 0;
	satisfiable[58][0]=1; 
	for(int i=0;i<138;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit58_0[i][0] ][ unit58_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit58_0[i][2] ][ unit58_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit58_0[i][4] ][ unit58_0[i][5] ] >0);
		X_contra = ( LargeX[58][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit58_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[58][1]=0; L[58][0]=1;}
			satisfiable[58][0]=satisfiable[58][0] & ((x[58] ^ 0) | (x[ unit58_0[i][0] ] ^ unit58_0[i][1]) |(x[ unit58_0[i][2] ] ^ unit58_0[i][3]));
			}
		if(X_contra>0) L[58][0]=2;
		}
	//Check all rules of unit[58][1]
	L[58][1] = LargeX[58][0]>0 ? 1 : 0;
	satisfiable[58][1]=1; 
	for(int i=0;i<149;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit58_1[i][0] ][ unit58_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit58_1[i][2] ][ unit58_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit58_1[i][4] ][ unit58_1[i][5] ] >0);
		X_contra = ( LargeX[58][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit58_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[58][0]=0; L[58][1]=1;}
			satisfiable[58][1]=satisfiable[58][1] & ((x[58] ^ 1) | (x[ unit58_1[i][0] ] ^ unit58_1[i][1]) |(x[ unit58_1[i][2] ] ^ unit58_1[i][3]));
			}
		if(X_contra>0) L[58][1]=2;
		}
	//Check all rules of unit[59][0]
	L[59][0] = LargeX[59][1]>0 ? 1 : 0;
	satisfiable[59][0]=1; 
	for(int i=0;i<112;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit59_0[i][0] ][ unit59_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit59_0[i][2] ][ unit59_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit59_0[i][4] ][ unit59_0[i][5] ] >0);
		X_contra = ( LargeX[59][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit59_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[59][1]=0; L[59][0]=1;}
			satisfiable[59][0]=satisfiable[59][0] & ((x[59] ^ 0) | (x[ unit59_0[i][0] ] ^ unit59_0[i][1]) |(x[ unit59_0[i][2] ] ^ unit59_0[i][3]));
			}
		if(X_contra>0) L[59][0]=2;
		}
	//Check all rules of unit[59][1]
	L[59][1] = LargeX[59][0]>0 ? 1 : 0;
	satisfiable[59][1]=1; 
	for(int i=0;i<144;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit59_1[i][0] ][ unit59_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit59_1[i][2] ][ unit59_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit59_1[i][4] ][ unit59_1[i][5] ] >0);
		X_contra = ( LargeX[59][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit59_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[59][0]=0; L[59][1]=1;}
			satisfiable[59][1]=satisfiable[59][1] & ((x[59] ^ 1) | (x[ unit59_1[i][0] ] ^ unit59_1[i][1]) |(x[ unit59_1[i][2] ] ^ unit59_1[i][3]));
			}
		if(X_contra>0) L[59][1]=2;
		}
	//Check all rules of unit[60][0]
	L[60][0] = LargeX[60][1]>0 ? 1 : 0;
	satisfiable[60][0]=1; 
	for(int i=0;i<144;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit60_0[i][0] ][ unit60_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit60_0[i][2] ][ unit60_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit60_0[i][4] ][ unit60_0[i][5] ] >0);
		X_contra = ( LargeX[60][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit60_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[60][1]=0; L[60][0]=1;}
			satisfiable[60][0]=satisfiable[60][0] & ((x[60] ^ 0) | (x[ unit60_0[i][0] ] ^ unit60_0[i][1]) |(x[ unit60_0[i][2] ] ^ unit60_0[i][3]));
			}
		if(X_contra>0) L[60][0]=2;
		}
	//Check all rules of unit[60][1]
	L[60][1] = LargeX[60][0]>0 ? 1 : 0;
	satisfiable[60][1]=1; 
	for(int i=0;i<140;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit60_1[i][0] ][ unit60_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit60_1[i][2] ][ unit60_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit60_1[i][4] ][ unit60_1[i][5] ] >0);
		X_contra = ( LargeX[60][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit60_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[60][0]=0; L[60][1]=1;}
			satisfiable[60][1]=satisfiable[60][1] & ((x[60] ^ 1) | (x[ unit60_1[i][0] ] ^ unit60_1[i][1]) |(x[ unit60_1[i][2] ] ^ unit60_1[i][3]));
			}
		if(X_contra>0) L[60][1]=2;
		}
	//Check all rules of unit[61][0]
	L[61][0] = LargeX[61][1]>0 ? 1 : 0;
	satisfiable[61][0]=1; 
	for(int i=0;i<144;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit61_0[i][0] ][ unit61_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit61_0[i][2] ][ unit61_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit61_0[i][4] ][ unit61_0[i][5] ] >0);
		X_contra = ( LargeX[61][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit61_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[61][1]=0; L[61][0]=1;}
			satisfiable[61][0]=satisfiable[61][0] & ((x[61] ^ 0) | (x[ unit61_0[i][0] ] ^ unit61_0[i][1]) |(x[ unit61_0[i][2] ] ^ unit61_0[i][3]));
			}
		if(X_contra>0) L[61][0]=2;
		}
	//Check all rules of unit[61][1]
	L[61][1] = LargeX[61][0]>0 ? 1 : 0;
	satisfiable[61][1]=1; 
	for(int i=0;i<178;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit61_1[i][0] ][ unit61_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit61_1[i][2] ][ unit61_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit61_1[i][4] ][ unit61_1[i][5] ] >0);
		X_contra = ( LargeX[61][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit61_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[61][0]=0; L[61][1]=1;}
			satisfiable[61][1]=satisfiable[61][1] & ((x[61] ^ 1) | (x[ unit61_1[i][0] ] ^ unit61_1[i][1]) |(x[ unit61_1[i][2] ] ^ unit61_1[i][3]));
			}
		if(X_contra>0) L[61][1]=2;
		}
	//Check all rules of unit[62][0]
	L[62][0] = LargeX[62][1]>0 ? 1 : 0;
	satisfiable[62][0]=1; 
	for(int i=0;i<146;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit62_0[i][0] ][ unit62_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit62_0[i][2] ][ unit62_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit62_0[i][4] ][ unit62_0[i][5] ] >0);
		X_contra = ( LargeX[62][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit62_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[62][1]=0; L[62][0]=1;}
			satisfiable[62][0]=satisfiable[62][0] & ((x[62] ^ 0) | (x[ unit62_0[i][0] ] ^ unit62_0[i][1]) |(x[ unit62_0[i][2] ] ^ unit62_0[i][3]));
			}
		if(X_contra>0) L[62][0]=2;
		}
	//Check all rules of unit[62][1]
	L[62][1] = LargeX[62][0]>0 ? 1 : 0;
	satisfiable[62][1]=1; 
	for(int i=0;i<175;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit62_1[i][0] ][ unit62_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit62_1[i][2] ][ unit62_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit62_1[i][4] ][ unit62_1[i][5] ] >0);
		X_contra = ( LargeX[62][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit62_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[62][0]=0; L[62][1]=1;}
			satisfiable[62][1]=satisfiable[62][1] & ((x[62] ^ 1) | (x[ unit62_1[i][0] ] ^ unit62_1[i][1]) |(x[ unit62_1[i][2] ] ^ unit62_1[i][3]));
			}
		if(X_contra>0) L[62][1]=2;
		}
	//Check all rules of unit[63][0]
	L[63][0] = LargeX[63][1]>0 ? 1 : 0;
	satisfiable[63][0]=1; 
	for(int i=0;i<110;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit63_0[i][0] ][ unit63_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit63_0[i][2] ][ unit63_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit63_0[i][4] ][ unit63_0[i][5] ] >0);
		X_contra = ( LargeX[63][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit63_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[63][1]=0; L[63][0]=1;}
			satisfiable[63][0]=satisfiable[63][0] & ((x[63] ^ 0) | (x[ unit63_0[i][0] ] ^ unit63_0[i][1]) |(x[ unit63_0[i][2] ] ^ unit63_0[i][3]));
			}
		if(X_contra>0) L[63][0]=2;
		}
	//Check all rules of unit[63][1]
	L[63][1] = LargeX[63][0]>0 ? 1 : 0;
	satisfiable[63][1]=1; 
	for(int i=0;i<181;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit63_1[i][0] ][ unit63_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit63_1[i][2] ][ unit63_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit63_1[i][4] ][ unit63_1[i][5] ] >0);
		X_contra = ( LargeX[63][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit63_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[63][0]=0; L[63][1]=1;}
			satisfiable[63][1]=satisfiable[63][1] & ((x[63] ^ 1) | (x[ unit63_1[i][0] ] ^ unit63_1[i][1]) |(x[ unit63_1[i][2] ] ^ unit63_1[i][3]));
			}
		if(X_contra>0) L[63][1]=2;
		}
	//Check all rules of unit[64][0]
	L[64][0] = LargeX[64][1]>0 ? 1 : 0;
	satisfiable[64][0]=1; 
	for(int i=0;i<134;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit64_0[i][0] ][ unit64_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit64_0[i][2] ][ unit64_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit64_0[i][4] ][ unit64_0[i][5] ] >0);
		X_contra = ( LargeX[64][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit64_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[64][1]=0; L[64][0]=1;}
			satisfiable[64][0]=satisfiable[64][0] & ((x[64] ^ 0) | (x[ unit64_0[i][0] ] ^ unit64_0[i][1]) |(x[ unit64_0[i][2] ] ^ unit64_0[i][3]));
			}
		if(X_contra>0) L[64][0]=2;
		}
	//Check all rules of unit[64][1]
	L[64][1] = LargeX[64][0]>0 ? 1 : 0;
	satisfiable[64][1]=1; 
	for(int i=0;i<182;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit64_1[i][0] ][ unit64_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit64_1[i][2] ][ unit64_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit64_1[i][4] ][ unit64_1[i][5] ] >0);
		X_contra = ( LargeX[64][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit64_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[64][0]=0; L[64][1]=1;}
			satisfiable[64][1]=satisfiable[64][1] & ((x[64] ^ 1) | (x[ unit64_1[i][0] ] ^ unit64_1[i][1]) |(x[ unit64_1[i][2] ] ^ unit64_1[i][3]));
			}
		if(X_contra>0) L[64][1]=2;
		}
	//Check all rules of unit[65][0]
	L[65][0] = LargeX[65][1]>0 ? 1 : 0;
	satisfiable[65][0]=1; 
	for(int i=0;i<160;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit65_0[i][0] ][ unit65_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit65_0[i][2] ][ unit65_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit65_0[i][4] ][ unit65_0[i][5] ] >0);
		X_contra = ( LargeX[65][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit65_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[65][1]=0; L[65][0]=1;}
			satisfiable[65][0]=satisfiable[65][0] & ((x[65] ^ 0) | (x[ unit65_0[i][0] ] ^ unit65_0[i][1]) |(x[ unit65_0[i][2] ] ^ unit65_0[i][3]));
			}
		if(X_contra>0) L[65][0]=2;
		}
	//Check all rules of unit[65][1]
	L[65][1] = LargeX[65][0]>0 ? 1 : 0;
	satisfiable[65][1]=1; 
	for(int i=0;i<174;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit65_1[i][0] ][ unit65_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit65_1[i][2] ][ unit65_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit65_1[i][4] ][ unit65_1[i][5] ] >0);
		X_contra = ( LargeX[65][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit65_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[65][0]=0; L[65][1]=1;}
			satisfiable[65][1]=satisfiable[65][1] & ((x[65] ^ 1) | (x[ unit65_1[i][0] ] ^ unit65_1[i][1]) |(x[ unit65_1[i][2] ] ^ unit65_1[i][3]));
			}
		if(X_contra>0) L[65][1]=2;
		}
	//Check all rules of unit[66][0]
	L[66][0] = LargeX[66][1]>0 ? 1 : 0;
	satisfiable[66][0]=1; 
	for(int i=0;i<163;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit66_0[i][0] ][ unit66_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit66_0[i][2] ][ unit66_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit66_0[i][4] ][ unit66_0[i][5] ] >0);
		X_contra = ( LargeX[66][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit66_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[66][1]=0; L[66][0]=1;}
			satisfiable[66][0]=satisfiable[66][0] & ((x[66] ^ 0) | (x[ unit66_0[i][0] ] ^ unit66_0[i][1]) |(x[ unit66_0[i][2] ] ^ unit66_0[i][3]));
			}
		if(X_contra>0) L[66][0]=2;
		}
	//Check all rules of unit[66][1]
	L[66][1] = LargeX[66][0]>0 ? 1 : 0;
	satisfiable[66][1]=1; 
	for(int i=0;i<171;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit66_1[i][0] ][ unit66_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit66_1[i][2] ][ unit66_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit66_1[i][4] ][ unit66_1[i][5] ] >0);
		X_contra = ( LargeX[66][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit66_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[66][0]=0; L[66][1]=1;}
			satisfiable[66][1]=satisfiable[66][1] & ((x[66] ^ 1) | (x[ unit66_1[i][0] ] ^ unit66_1[i][1]) |(x[ unit66_1[i][2] ] ^ unit66_1[i][3]));
			}
		if(X_contra>0) L[66][1]=2;
		}
	//Check all rules of unit[67][0]
	L[67][0] = LargeX[67][1]>0 ? 1 : 0;
	satisfiable[67][0]=1; 
	for(int i=0;i<110;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit67_0[i][0] ][ unit67_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit67_0[i][2] ][ unit67_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit67_0[i][4] ][ unit67_0[i][5] ] >0);
		X_contra = ( LargeX[67][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit67_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[67][1]=0; L[67][0]=1;}
			satisfiable[67][0]=satisfiable[67][0] & ((x[67] ^ 0) | (x[ unit67_0[i][0] ] ^ unit67_0[i][1]) |(x[ unit67_0[i][2] ] ^ unit67_0[i][3]));
			}
		if(X_contra>0) L[67][0]=2;
		}
	//Check all rules of unit[67][1]
	L[67][1] = LargeX[67][0]>0 ? 1 : 0;
	satisfiable[67][1]=1; 
	for(int i=0;i<32;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit67_1[i][0] ][ unit67_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit67_1[i][2] ][ unit67_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit67_1[i][4] ][ unit67_1[i][5] ] >0);
		X_contra = ( LargeX[67][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit67_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[67][0]=0; L[67][1]=1;}
			satisfiable[67][1]=satisfiable[67][1] & ((x[67] ^ 1) | (x[ unit67_1[i][0] ] ^ unit67_1[i][1]) |(x[ unit67_1[i][2] ] ^ unit67_1[i][3]));
			}
		if(X_contra>0) L[67][1]=2;
		}
	//Check all rules of unit[68][0]
	L[68][0] = LargeX[68][1]>0 ? 1 : 0;
	satisfiable[68][0]=1; 
	for(int i=0;i<98;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit68_0[i][0] ][ unit68_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit68_0[i][2] ][ unit68_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit68_0[i][4] ][ unit68_0[i][5] ] >0);
		X_contra = ( LargeX[68][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit68_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[68][1]=0; L[68][0]=1;}
			satisfiable[68][0]=satisfiable[68][0] & ((x[68] ^ 0) | (x[ unit68_0[i][0] ] ^ unit68_0[i][1]) |(x[ unit68_0[i][2] ] ^ unit68_0[i][3]));
			}
		if(X_contra>0) L[68][0]=2;
		}
	//Check all rules of unit[68][1]
	L[68][1] = LargeX[68][0]>0 ? 1 : 0;
	satisfiable[68][1]=1; 
	for(int i=0;i<56;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit68_1[i][0] ][ unit68_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit68_1[i][2] ][ unit68_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit68_1[i][4] ][ unit68_1[i][5] ] >0);
		X_contra = ( LargeX[68][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit68_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[68][0]=0; L[68][1]=1;}
			satisfiable[68][1]=satisfiable[68][1] & ((x[68] ^ 1) | (x[ unit68_1[i][0] ] ^ unit68_1[i][1]) |(x[ unit68_1[i][2] ] ^ unit68_1[i][3]));
			}
		if(X_contra>0) L[68][1]=2;
		}
	//Check all rules of unit[69][0]
	L[69][0] = LargeX[69][1]>0 ? 1 : 0;
	satisfiable[69][0]=1; 
	for(int i=0;i<153;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit69_0[i][0] ][ unit69_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit69_0[i][2] ][ unit69_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit69_0[i][4] ][ unit69_0[i][5] ] >0);
		X_contra = ( LargeX[69][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit69_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[69][1]=0; L[69][0]=1;}
			satisfiable[69][0]=satisfiable[69][0] & ((x[69] ^ 0) | (x[ unit69_0[i][0] ] ^ unit69_0[i][1]) |(x[ unit69_0[i][2] ] ^ unit69_0[i][3]));
			}
		if(X_contra>0) L[69][0]=2;
		}
	//Check all rules of unit[69][1]
	L[69][1] = LargeX[69][0]>0 ? 1 : 0;
	satisfiable[69][1]=1; 
	for(int i=0;i<81;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit69_1[i][0] ][ unit69_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit69_1[i][2] ][ unit69_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit69_1[i][4] ][ unit69_1[i][5] ] >0);
		X_contra = ( LargeX[69][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit69_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[69][0]=0; L[69][1]=1;}
			satisfiable[69][1]=satisfiable[69][1] & ((x[69] ^ 1) | (x[ unit69_1[i][0] ] ^ unit69_1[i][1]) |(x[ unit69_1[i][2] ] ^ unit69_1[i][3]));
			}
		if(X_contra>0) L[69][1]=2;
		}
	//Check all rules of unit[70][0]
	L[70][0] = LargeX[70][1]>0 ? 1 : 0;
	satisfiable[70][0]=1; 
	for(int i=0;i<148;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit70_0[i][0] ][ unit70_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit70_0[i][2] ][ unit70_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit70_0[i][4] ][ unit70_0[i][5] ] >0);
		X_contra = ( LargeX[70][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit70_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[70][1]=0; L[70][0]=1;}
			satisfiable[70][0]=satisfiable[70][0] & ((x[70] ^ 0) | (x[ unit70_0[i][0] ] ^ unit70_0[i][1]) |(x[ unit70_0[i][2] ] ^ unit70_0[i][3]));
			}
		if(X_contra>0) L[70][0]=2;
		}
	//Check all rules of unit[70][1]
	L[70][1] = LargeX[70][0]>0 ? 1 : 0;
	satisfiable[70][1]=1; 
	for(int i=0;i<106;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit70_1[i][0] ][ unit70_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit70_1[i][2] ][ unit70_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit70_1[i][4] ][ unit70_1[i][5] ] >0);
		X_contra = ( LargeX[70][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit70_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[70][0]=0; L[70][1]=1;}
			satisfiable[70][1]=satisfiable[70][1] & ((x[70] ^ 1) | (x[ unit70_1[i][0] ] ^ unit70_1[i][1]) |(x[ unit70_1[i][2] ] ^ unit70_1[i][3]));
			}
		if(X_contra>0) L[70][1]=2;
		}
	//Check all rules of unit[71][0]
	L[71][0] = LargeX[71][1]>0 ? 1 : 0;
	satisfiable[71][0]=1; 
	for(int i=0;i<209;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit71_0[i][0] ][ unit71_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit71_0[i][2] ][ unit71_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit71_0[i][4] ][ unit71_0[i][5] ] >0);
		X_contra = ( LargeX[71][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit71_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[71][1]=0; L[71][0]=1;}
			satisfiable[71][0]=satisfiable[71][0] & ((x[71] ^ 0) | (x[ unit71_0[i][0] ] ^ unit71_0[i][1]) |(x[ unit71_0[i][2] ] ^ unit71_0[i][3]));
			}
		if(X_contra>0) L[71][0]=2;
		}
	//Check all rules of unit[71][1]
	L[71][1] = LargeX[71][0]>0 ? 1 : 0;
	satisfiable[71][1]=1; 
	for(int i=0;i<129;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit71_1[i][0] ][ unit71_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit71_1[i][2] ][ unit71_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit71_1[i][4] ][ unit71_1[i][5] ] >0);
		X_contra = ( LargeX[71][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit71_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[71][0]=0; L[71][1]=1;}
			satisfiable[71][1]=satisfiable[71][1] & ((x[71] ^ 1) | (x[ unit71_1[i][0] ] ^ unit71_1[i][1]) |(x[ unit71_1[i][2] ] ^ unit71_1[i][3]));
			}
		if(X_contra>0) L[71][1]=2;
		}
	//Check all rules of unit[72][0]
	L[72][0] = LargeX[72][1]>0 ? 1 : 0;
	satisfiable[72][0]=1; 
	for(int i=0;i<132;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit72_0[i][0] ][ unit72_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit72_0[i][2] ][ unit72_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit72_0[i][4] ][ unit72_0[i][5] ] >0);
		X_contra = ( LargeX[72][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit72_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[72][1]=0; L[72][0]=1;}
			satisfiable[72][0]=satisfiable[72][0] & ((x[72] ^ 0) | (x[ unit72_0[i][0] ] ^ unit72_0[i][1]) |(x[ unit72_0[i][2] ] ^ unit72_0[i][3]));
			}
		if(X_contra>0) L[72][0]=2;
		}
	//Check all rules of unit[72][1]
	L[72][1] = LargeX[72][0]>0 ? 1 : 0;
	satisfiable[72][1]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit72_1[i][0] ][ unit72_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit72_1[i][2] ][ unit72_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit72_1[i][4] ][ unit72_1[i][5] ] >0);
		X_contra = ( LargeX[72][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit72_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[72][0]=0; L[72][1]=1;}
			satisfiable[72][1]=satisfiable[72][1] & ((x[72] ^ 1) | (x[ unit72_1[i][0] ] ^ unit72_1[i][1]) |(x[ unit72_1[i][2] ] ^ unit72_1[i][3]));
			}
		if(X_contra>0) L[72][1]=2;
		}
	//Check all rules of unit[81][0]
	L[81][0] = LargeX[81][1]>0 ? 1 : 0;
	satisfiable[81][0]=1; 
	for(int i=0;i<13;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit81_0[i][0] ][ unit81_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit81_0[i][2] ][ unit81_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit81_0[i][4] ][ unit81_0[i][5] ] >0);
		X_contra = ( LargeX[81][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit81_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[81][1]=0; L[81][0]=1;}
			satisfiable[81][0]=satisfiable[81][0] & ((x[81] ^ 0) | (x[ unit81_0[i][0] ] ^ unit81_0[i][1]) |(x[ unit81_0[i][2] ] ^ unit81_0[i][3]));
			}
		if(X_contra>0) L[81][0]=2;
		}
	//Check all rules of unit[81][1]
	L[81][1] = LargeX[81][0]>0 ? 1 : 0;
	satisfiable[81][1]=1; 
	for(int i=0;i<36;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit81_1[i][0] ][ unit81_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit81_1[i][2] ][ unit81_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit81_1[i][4] ][ unit81_1[i][5] ] >0);
		X_contra = ( LargeX[81][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit81_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[81][0]=0; L[81][1]=1;}
			satisfiable[81][1]=satisfiable[81][1] & ((x[81] ^ 1) | (x[ unit81_1[i][0] ] ^ unit81_1[i][1]) |(x[ unit81_1[i][2] ] ^ unit81_1[i][3]));
			}
		if(X_contra>0) L[81][1]=2;
		}
	//Check all rules of unit[82][0]
	L[82][0] = LargeX[82][1]>0 ? 1 : 0;
	satisfiable[82][0]=1; 
	for(int i=0;i<15;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit82_0[i][0] ][ unit82_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit82_0[i][2] ][ unit82_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit82_0[i][4] ][ unit82_0[i][5] ] >0);
		X_contra = ( LargeX[82][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit82_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[82][1]=0; L[82][0]=1;}
			satisfiable[82][0]=satisfiable[82][0] & ((x[82] ^ 0) | (x[ unit82_0[i][0] ] ^ unit82_0[i][1]) |(x[ unit82_0[i][2] ] ^ unit82_0[i][3]));
			}
		if(X_contra>0) L[82][0]=2;
		}
	//Check all rules of unit[82][1]
	L[82][1] = LargeX[82][0]>0 ? 1 : 0;
	satisfiable[82][1]=1; 
	for(int i=0;i<27;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit82_1[i][0] ][ unit82_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit82_1[i][2] ][ unit82_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit82_1[i][4] ][ unit82_1[i][5] ] >0);
		X_contra = ( LargeX[82][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit82_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[82][0]=0; L[82][1]=1;}
			satisfiable[82][1]=satisfiable[82][1] & ((x[82] ^ 1) | (x[ unit82_1[i][0] ] ^ unit82_1[i][1]) |(x[ unit82_1[i][2] ] ^ unit82_1[i][3]));
			}
		if(X_contra>0) L[82][1]=2;
		}
	//Check all rules of unit[85][0]
	L[85][0] = LargeX[85][1]>0 ? 1 : 0;
	satisfiable[85][0]=1; 
	for(int i=0;i<74;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit85_0[i][0] ][ unit85_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit85_0[i][2] ][ unit85_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit85_0[i][4] ][ unit85_0[i][5] ] >0);
		X_contra = ( LargeX[85][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit85_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[85][1]=0; L[85][0]=1;}
			satisfiable[85][0]=satisfiable[85][0] & ((x[85] ^ 0) | (x[ unit85_0[i][0] ] ^ unit85_0[i][1]) |(x[ unit85_0[i][2] ] ^ unit85_0[i][3]));
			}
		if(X_contra>0) L[85][0]=2;
		}
	//Check all rules of unit[85][1]
	L[85][1] = LargeX[85][0]>0 ? 1 : 0;
	satisfiable[85][1]=1; 
	for(int i=0;i<142;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit85_1[i][0] ][ unit85_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit85_1[i][2] ][ unit85_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit85_1[i][4] ][ unit85_1[i][5] ] >0);
		X_contra = ( LargeX[85][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit85_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[85][0]=0; L[85][1]=1;}
			satisfiable[85][1]=satisfiable[85][1] & ((x[85] ^ 1) | (x[ unit85_1[i][0] ] ^ unit85_1[i][1]) |(x[ unit85_1[i][2] ] ^ unit85_1[i][3]));
			}
		if(X_contra>0) L[85][1]=2;
		}
	//Check all rules of unit[86][0]
	L[86][0] = LargeX[86][1]>0 ? 1 : 0;
	satisfiable[86][0]=1; 
	for(int i=0;i<80;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit86_0[i][0] ][ unit86_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit86_0[i][2] ][ unit86_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit86_0[i][4] ][ unit86_0[i][5] ] >0);
		X_contra = ( LargeX[86][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit86_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[86][1]=0; L[86][0]=1;}
			satisfiable[86][0]=satisfiable[86][0] & ((x[86] ^ 0) | (x[ unit86_0[i][0] ] ^ unit86_0[i][1]) |(x[ unit86_0[i][2] ] ^ unit86_0[i][3]));
			}
		if(X_contra>0) L[86][0]=2;
		}
	//Check all rules of unit[86][1]
	L[86][1] = LargeX[86][0]>0 ? 1 : 0;
	satisfiable[86][1]=1; 
	for(int i=0;i<118;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit86_1[i][0] ][ unit86_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit86_1[i][2] ][ unit86_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit86_1[i][4] ][ unit86_1[i][5] ] >0);
		X_contra = ( LargeX[86][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit86_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[86][0]=0; L[86][1]=1;}
			satisfiable[86][1]=satisfiable[86][1] & ((x[86] ^ 1) | (x[ unit86_1[i][0] ] ^ unit86_1[i][1]) |(x[ unit86_1[i][2] ] ^ unit86_1[i][3]));
			}
		if(X_contra>0) L[86][1]=2;
		}
	//Check all rules of unit[87][0]
	L[87][0] = LargeX[87][1]>0 ? 1 : 0;
	satisfiable[87][0]=1; 
	for(int i=0;i<69;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit87_0[i][0] ][ unit87_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit87_0[i][2] ][ unit87_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit87_0[i][4] ][ unit87_0[i][5] ] >0);
		X_contra = ( LargeX[87][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit87_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[87][1]=0; L[87][0]=1;}
			satisfiable[87][0]=satisfiable[87][0] & ((x[87] ^ 0) | (x[ unit87_0[i][0] ] ^ unit87_0[i][1]) |(x[ unit87_0[i][2] ] ^ unit87_0[i][3]));
			}
		if(X_contra>0) L[87][0]=2;
		}
	//Check all rules of unit[87][1]
	L[87][1] = LargeX[87][0]>0 ? 1 : 0;
	satisfiable[87][1]=1; 
	for(int i=0;i<82;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit87_1[i][0] ][ unit87_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit87_1[i][2] ][ unit87_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit87_1[i][4] ][ unit87_1[i][5] ] >0);
		X_contra = ( LargeX[87][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit87_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[87][0]=0; L[87][1]=1;}
			satisfiable[87][1]=satisfiable[87][1] & ((x[87] ^ 1) | (x[ unit87_1[i][0] ] ^ unit87_1[i][1]) |(x[ unit87_1[i][2] ] ^ unit87_1[i][3]));
			}
		if(X_contra>0) L[87][1]=2;
		}
	//Check all rules of unit[88][0]
	L[88][0] = LargeX[88][1]>0 ? 1 : 0;
	satisfiable[88][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit88_0[i][0] ][ unit88_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit88_0[i][2] ][ unit88_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit88_0[i][4] ][ unit88_0[i][5] ] >0);
		X_contra = ( LargeX[88][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit88_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[88][1]=0; L[88][0]=1;}
			satisfiable[88][0]=satisfiable[88][0] & ((x[88] ^ 0) | (x[ unit88_0[i][0] ] ^ unit88_0[i][1]) |(x[ unit88_0[i][2] ] ^ unit88_0[i][3]));
			}
		if(X_contra>0) L[88][0]=2;
		}
	//Check all rules of unit[88][1]
	L[88][1] = LargeX[88][0]>0 ? 1 : 0;
	satisfiable[88][1]=1; 
	for(int i=0;i<74;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit88_1[i][0] ][ unit88_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit88_1[i][2] ][ unit88_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit88_1[i][4] ][ unit88_1[i][5] ] >0);
		X_contra = ( LargeX[88][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit88_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[88][0]=0; L[88][1]=1;}
			satisfiable[88][1]=satisfiable[88][1] & ((x[88] ^ 1) | (x[ unit88_1[i][0] ] ^ unit88_1[i][1]) |(x[ unit88_1[i][2] ] ^ unit88_1[i][3]));
			}
		if(X_contra>0) L[88][1]=2;
		}
	//Check all rules of unit[89][0]
	L[89][0] = LargeX[89][1]>0 ? 1 : 0;
	satisfiable[89][0]=1; 
	for(int i=0;i<63;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit89_0[i][0] ][ unit89_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit89_0[i][2] ][ unit89_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit89_0[i][4] ][ unit89_0[i][5] ] >0);
		X_contra = ( LargeX[89][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit89_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[89][1]=0; L[89][0]=1;}
			satisfiable[89][0]=satisfiable[89][0] & ((x[89] ^ 0) | (x[ unit89_0[i][0] ] ^ unit89_0[i][1]) |(x[ unit89_0[i][2] ] ^ unit89_0[i][3]));
			}
		if(X_contra>0) L[89][0]=2;
		}
	//Check all rules of unit[89][1]
	L[89][1] = LargeX[89][0]>0 ? 1 : 0;
	satisfiable[89][1]=1; 
	for(int i=0;i<66;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit89_1[i][0] ][ unit89_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit89_1[i][2] ][ unit89_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit89_1[i][4] ][ unit89_1[i][5] ] >0);
		X_contra = ( LargeX[89][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit89_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[89][0]=0; L[89][1]=1;}
			satisfiable[89][1]=satisfiable[89][1] & ((x[89] ^ 1) | (x[ unit89_1[i][0] ] ^ unit89_1[i][1]) |(x[ unit89_1[i][2] ] ^ unit89_1[i][3]));
			}
		if(X_contra>0) L[89][1]=2;
		}
	//Check all rules of unit[90][0]
	L[90][0] = LargeX[90][1]>0 ? 1 : 0;
	satisfiable[90][0]=1; 
	for(int i=0;i<67;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit90_0[i][0] ][ unit90_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit90_0[i][2] ][ unit90_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit90_0[i][4] ][ unit90_0[i][5] ] >0);
		X_contra = ( LargeX[90][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit90_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[90][1]=0; L[90][0]=1;}
			satisfiable[90][0]=satisfiable[90][0] & ((x[90] ^ 0) | (x[ unit90_0[i][0] ] ^ unit90_0[i][1]) |(x[ unit90_0[i][2] ] ^ unit90_0[i][3]));
			}
		if(X_contra>0) L[90][0]=2;
		}
	//Check all rules of unit[90][1]
	L[90][1] = LargeX[90][0]>0 ? 1 : 0;
	satisfiable[90][1]=1; 
	for(int i=0;i<48;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit90_1[i][0] ][ unit90_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit90_1[i][2] ][ unit90_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit90_1[i][4] ][ unit90_1[i][5] ] >0);
		X_contra = ( LargeX[90][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit90_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[90][0]=0; L[90][1]=1;}
			satisfiable[90][1]=satisfiable[90][1] & ((x[90] ^ 1) | (x[ unit90_1[i][0] ] ^ unit90_1[i][1]) |(x[ unit90_1[i][2] ] ^ unit90_1[i][3]));
			}
		if(X_contra>0) L[90][1]=2;
		}
	//Check all rules of unit[91][0]
	L[91][0] = LargeX[91][1]>0 ? 1 : 0;
	satisfiable[91][0]=1; 
	for(int i=0;i<91;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit91_0[i][0] ][ unit91_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit91_0[i][2] ][ unit91_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit91_0[i][4] ][ unit91_0[i][5] ] >0);
		X_contra = ( LargeX[91][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit91_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[91][1]=0; L[91][0]=1;}
			satisfiable[91][0]=satisfiable[91][0] & ((x[91] ^ 0) | (x[ unit91_0[i][0] ] ^ unit91_0[i][1]) |(x[ unit91_0[i][2] ] ^ unit91_0[i][3]));
			}
		if(X_contra>0) L[91][0]=2;
		}
	//Check all rules of unit[91][1]
	L[91][1] = LargeX[91][0]>0 ? 1 : 0;
	satisfiable[91][1]=1; 
	for(int i=0;i<165;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit91_1[i][0] ][ unit91_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit91_1[i][2] ][ unit91_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit91_1[i][4] ][ unit91_1[i][5] ] >0);
		X_contra = ( LargeX[91][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit91_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[91][0]=0; L[91][1]=1;}
			satisfiable[91][1]=satisfiable[91][1] & ((x[91] ^ 1) | (x[ unit91_1[i][0] ] ^ unit91_1[i][1]) |(x[ unit91_1[i][2] ] ^ unit91_1[i][3]));
			}
		if(X_contra>0) L[91][1]=2;
		}
	//Check all rules of unit[92][0]
	L[92][0] = LargeX[92][1]>0 ? 1 : 0;
	satisfiable[92][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit92_0[i][0] ][ unit92_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit92_0[i][2] ][ unit92_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit92_0[i][4] ][ unit92_0[i][5] ] >0);
		X_contra = ( LargeX[92][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit92_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[92][1]=0; L[92][0]=1;}
			satisfiable[92][0]=satisfiable[92][0] & ((x[92] ^ 0) | (x[ unit92_0[i][0] ] ^ unit92_0[i][1]) |(x[ unit92_0[i][2] ] ^ unit92_0[i][3]));
			}
		if(X_contra>0) L[92][0]=2;
		}
	//Check all rules of unit[92][1]
	L[92][1] = LargeX[92][0]>0 ? 1 : 0;
	satisfiable[92][1]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit92_1[i][0] ][ unit92_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit92_1[i][2] ][ unit92_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit92_1[i][4] ][ unit92_1[i][5] ] >0);
		X_contra = ( LargeX[92][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit92_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[92][0]=0; L[92][1]=1;}
			satisfiable[92][1]=satisfiable[92][1] & ((x[92] ^ 1) | (x[ unit92_1[i][0] ] ^ unit92_1[i][1]) |(x[ unit92_1[i][2] ] ^ unit92_1[i][3]));
			}
		if(X_contra>0) L[92][1]=2;
		}
	//Check all rules of unit[93][0]
	L[93][0] = LargeX[93][1]>0 ? 1 : 0;
	satisfiable[93][0]=1; 
	for(int i=0;i<89;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit93_0[i][0] ][ unit93_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit93_0[i][2] ][ unit93_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit93_0[i][4] ][ unit93_0[i][5] ] >0);
		X_contra = ( LargeX[93][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit93_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[93][1]=0; L[93][0]=1;}
			satisfiable[93][0]=satisfiable[93][0] & ((x[93] ^ 0) | (x[ unit93_0[i][0] ] ^ unit93_0[i][1]) |(x[ unit93_0[i][2] ] ^ unit93_0[i][3]));
			}
		if(X_contra>0) L[93][0]=2;
		}
	//Check all rules of unit[93][1]
	L[93][1] = LargeX[93][0]>0 ? 1 : 0;
	satisfiable[93][1]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit93_1[i][0] ][ unit93_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit93_1[i][2] ][ unit93_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit93_1[i][4] ][ unit93_1[i][5] ] >0);
		X_contra = ( LargeX[93][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit93_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[93][0]=0; L[93][1]=1;}
			satisfiable[93][1]=satisfiable[93][1] & ((x[93] ^ 1) | (x[ unit93_1[i][0] ] ^ unit93_1[i][1]) |(x[ unit93_1[i][2] ] ^ unit93_1[i][3]));
			}
		if(X_contra>0) L[93][1]=2;
		}
	//Check all rules of unit[94][0]
	L[94][0] = LargeX[94][1]>0 ? 1 : 0;
	satisfiable[94][0]=1; 
	for(int i=0;i<91;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit94_0[i][0] ][ unit94_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit94_0[i][2] ][ unit94_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit94_0[i][4] ][ unit94_0[i][5] ] >0);
		X_contra = ( LargeX[94][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit94_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[94][1]=0; L[94][0]=1;}
			satisfiable[94][0]=satisfiable[94][0] & ((x[94] ^ 0) | (x[ unit94_0[i][0] ] ^ unit94_0[i][1]) |(x[ unit94_0[i][2] ] ^ unit94_0[i][3]));
			}
		if(X_contra>0) L[94][0]=2;
		}
	//Check all rules of unit[94][1]
	L[94][1] = LargeX[94][0]>0 ? 1 : 0;
	satisfiable[94][1]=1; 
	for(int i=0;i<150;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit94_1[i][0] ][ unit94_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit94_1[i][2] ][ unit94_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit94_1[i][4] ][ unit94_1[i][5] ] >0);
		X_contra = ( LargeX[94][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit94_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[94][0]=0; L[94][1]=1;}
			satisfiable[94][1]=satisfiable[94][1] & ((x[94] ^ 1) | (x[ unit94_1[i][0] ] ^ unit94_1[i][1]) |(x[ unit94_1[i][2] ] ^ unit94_1[i][3]));
			}
		if(X_contra>0) L[94][1]=2;
		}
	//Check all rules of unit[95][0]
	L[95][0] = LargeX[95][1]>0 ? 1 : 0;
	satisfiable[95][0]=1; 
	for(int i=0;i<88;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit95_0[i][0] ][ unit95_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit95_0[i][2] ][ unit95_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit95_0[i][4] ][ unit95_0[i][5] ] >0);
		X_contra = ( LargeX[95][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit95_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[95][1]=0; L[95][0]=1;}
			satisfiable[95][0]=satisfiable[95][0] & ((x[95] ^ 0) | (x[ unit95_0[i][0] ] ^ unit95_0[i][1]) |(x[ unit95_0[i][2] ] ^ unit95_0[i][3]));
			}
		if(X_contra>0) L[95][0]=2;
		}
	//Check all rules of unit[95][1]
	L[95][1] = LargeX[95][0]>0 ? 1 : 0;
	satisfiable[95][1]=1; 
	for(int i=0;i<146;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit95_1[i][0] ][ unit95_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit95_1[i][2] ][ unit95_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit95_1[i][4] ][ unit95_1[i][5] ] >0);
		X_contra = ( LargeX[95][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit95_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[95][0]=0; L[95][1]=1;}
			satisfiable[95][1]=satisfiable[95][1] & ((x[95] ^ 1) | (x[ unit95_1[i][0] ] ^ unit95_1[i][1]) |(x[ unit95_1[i][2] ] ^ unit95_1[i][3]));
			}
		if(X_contra>0) L[95][1]=2;
		}
	//Check all rules of unit[96][0]
	L[96][0] = LargeX[96][1]>0 ? 1 : 0;
	satisfiable[96][0]=1; 
	for(int i=0;i<89;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit96_0[i][0] ][ unit96_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit96_0[i][2] ][ unit96_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit96_0[i][4] ][ unit96_0[i][5] ] >0);
		X_contra = ( LargeX[96][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit96_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[96][1]=0; L[96][0]=1;}
			satisfiable[96][0]=satisfiable[96][0] & ((x[96] ^ 0) | (x[ unit96_0[i][0] ] ^ unit96_0[i][1]) |(x[ unit96_0[i][2] ] ^ unit96_0[i][3]));
			}
		if(X_contra>0) L[96][0]=2;
		}
	//Check all rules of unit[96][1]
	L[96][1] = LargeX[96][0]>0 ? 1 : 0;
	satisfiable[96][1]=1; 
	for(int i=0;i<143;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit96_1[i][0] ][ unit96_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit96_1[i][2] ][ unit96_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit96_1[i][4] ][ unit96_1[i][5] ] >0);
		X_contra = ( LargeX[96][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit96_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[96][0]=0; L[96][1]=1;}
			satisfiable[96][1]=satisfiable[96][1] & ((x[96] ^ 1) | (x[ unit96_1[i][0] ] ^ unit96_1[i][1]) |(x[ unit96_1[i][2] ] ^ unit96_1[i][3]));
			}
		if(X_contra>0) L[96][1]=2;
		}
	//Check all rules of unit[97][0]
	L[97][0] = LargeX[97][1]>0 ? 1 : 0;
	satisfiable[97][0]=1; 
	for(int i=0;i<94;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit97_0[i][0] ][ unit97_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit97_0[i][2] ][ unit97_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit97_0[i][4] ][ unit97_0[i][5] ] >0);
		X_contra = ( LargeX[97][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit97_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[97][1]=0; L[97][0]=1;}
			satisfiable[97][0]=satisfiable[97][0] & ((x[97] ^ 0) | (x[ unit97_0[i][0] ] ^ unit97_0[i][1]) |(x[ unit97_0[i][2] ] ^ unit97_0[i][3]));
			}
		if(X_contra>0) L[97][0]=2;
		}
	//Check all rules of unit[97][1]
	L[97][1] = LargeX[97][0]>0 ? 1 : 0;
	satisfiable[97][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit97_1[i][0] ][ unit97_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit97_1[i][2] ][ unit97_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit97_1[i][4] ][ unit97_1[i][5] ] >0);
		X_contra = ( LargeX[97][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit97_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[97][0]=0; L[97][1]=1;}
			satisfiable[97][1]=satisfiable[97][1] & ((x[97] ^ 1) | (x[ unit97_1[i][0] ] ^ unit97_1[i][1]) |(x[ unit97_1[i][2] ] ^ unit97_1[i][3]));
			}
		if(X_contra>0) L[97][1]=2;
		}
	//Check all rules of unit[98][0]
	L[98][0] = LargeX[98][1]>0 ? 1 : 0;
	satisfiable[98][0]=1; 
	for(int i=0;i<95;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit98_0[i][0] ][ unit98_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit98_0[i][2] ][ unit98_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit98_0[i][4] ][ unit98_0[i][5] ] >0);
		X_contra = ( LargeX[98][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit98_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[98][1]=0; L[98][0]=1;}
			satisfiable[98][0]=satisfiable[98][0] & ((x[98] ^ 0) | (x[ unit98_0[i][0] ] ^ unit98_0[i][1]) |(x[ unit98_0[i][2] ] ^ unit98_0[i][3]));
			}
		if(X_contra>0) L[98][0]=2;
		}
	//Check all rules of unit[98][1]
	L[98][1] = LargeX[98][0]>0 ? 1 : 0;
	satisfiable[98][1]=1; 
	for(int i=0;i<175;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit98_1[i][0] ][ unit98_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit98_1[i][2] ][ unit98_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit98_1[i][4] ][ unit98_1[i][5] ] >0);
		X_contra = ( LargeX[98][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit98_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[98][0]=0; L[98][1]=1;}
			satisfiable[98][1]=satisfiable[98][1] & ((x[98] ^ 1) | (x[ unit98_1[i][0] ] ^ unit98_1[i][1]) |(x[ unit98_1[i][2] ] ^ unit98_1[i][3]));
			}
		if(X_contra>0) L[98][1]=2;
		}
	//Check all rules of unit[99][0]
	L[99][0] = LargeX[99][1]>0 ? 1 : 0;
	satisfiable[99][0]=1; 
	for(int i=0;i<59;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit99_0[i][0] ][ unit99_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit99_0[i][2] ][ unit99_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit99_0[i][4] ][ unit99_0[i][5] ] >0);
		X_contra = ( LargeX[99][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit99_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[99][1]=0; L[99][0]=1;}
			satisfiable[99][0]=satisfiable[99][0] & ((x[99] ^ 0) | (x[ unit99_0[i][0] ] ^ unit99_0[i][1]) |(x[ unit99_0[i][2] ] ^ unit99_0[i][3]));
			}
		if(X_contra>0) L[99][0]=2;
		}
	//Check all rules of unit[99][1]
	L[99][1] = LargeX[99][0]>0 ? 1 : 0;
	satisfiable[99][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit99_1[i][0] ][ unit99_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit99_1[i][2] ][ unit99_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit99_1[i][4] ][ unit99_1[i][5] ] >0);
		X_contra = ( LargeX[99][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit99_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[99][0]=0; L[99][1]=1;}
			satisfiable[99][1]=satisfiable[99][1] & ((x[99] ^ 1) | (x[ unit99_1[i][0] ] ^ unit99_1[i][1]) |(x[ unit99_1[i][2] ] ^ unit99_1[i][3]));
			}
		if(X_contra>0) L[99][1]=2;
		}
	//Check all rules of unit[100][0]
	L[100][0] = LargeX[100][1]>0 ? 1 : 0;
	satisfiable[100][0]=1; 
	for(int i=0;i<59;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit100_0[i][0] ][ unit100_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit100_0[i][2] ][ unit100_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit100_0[i][4] ][ unit100_0[i][5] ] >0);
		X_contra = ( LargeX[100][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit100_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[100][1]=0; L[100][0]=1;}
			satisfiable[100][0]=satisfiable[100][0] & ((x[100] ^ 0) | (x[ unit100_0[i][0] ] ^ unit100_0[i][1]) |(x[ unit100_0[i][2] ] ^ unit100_0[i][3]));
			}
		if(X_contra>0) L[100][0]=2;
		}
	//Check all rules of unit[100][1]
	L[100][1] = LargeX[100][0]>0 ? 1 : 0;
	satisfiable[100][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit100_1[i][0] ][ unit100_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit100_1[i][2] ][ unit100_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit100_1[i][4] ][ unit100_1[i][5] ] >0);
		X_contra = ( LargeX[100][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit100_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[100][0]=0; L[100][1]=1;}
			satisfiable[100][1]=satisfiable[100][1] & ((x[100] ^ 1) | (x[ unit100_1[i][0] ] ^ unit100_1[i][1]) |(x[ unit100_1[i][2] ] ^ unit100_1[i][3]));
			}
		if(X_contra>0) L[100][1]=2;
		}
	//Check all rules of unit[101][0]
	L[101][0] = LargeX[101][1]>0 ? 1 : 0;
	satisfiable[101][0]=1; 
	for(int i=0;i<67;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit101_0[i][0] ][ unit101_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit101_0[i][2] ][ unit101_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit101_0[i][4] ][ unit101_0[i][5] ] >0);
		X_contra = ( LargeX[101][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit101_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[101][1]=0; L[101][0]=1;}
			satisfiable[101][0]=satisfiable[101][0] & ((x[101] ^ 0) | (x[ unit101_0[i][0] ] ^ unit101_0[i][1]) |(x[ unit101_0[i][2] ] ^ unit101_0[i][3]));
			}
		if(X_contra>0) L[101][0]=2;
		}
	//Check all rules of unit[101][1]
	L[101][1] = LargeX[101][0]>0 ? 1 : 0;
	satisfiable[101][1]=1; 
	for(int i=0;i<173;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit101_1[i][0] ][ unit101_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit101_1[i][2] ][ unit101_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit101_1[i][4] ][ unit101_1[i][5] ] >0);
		X_contra = ( LargeX[101][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit101_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[101][0]=0; L[101][1]=1;}
			satisfiable[101][1]=satisfiable[101][1] & ((x[101] ^ 1) | (x[ unit101_1[i][0] ] ^ unit101_1[i][1]) |(x[ unit101_1[i][2] ] ^ unit101_1[i][3]));
			}
		if(X_contra>0) L[101][1]=2;
		}
	//Check all rules of unit[102][0]
	L[102][0] = LargeX[102][1]>0 ? 1 : 0;
	satisfiable[102][0]=1; 
	for(int i=0;i<66;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit102_0[i][0] ][ unit102_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit102_0[i][2] ][ unit102_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit102_0[i][4] ][ unit102_0[i][5] ] >0);
		X_contra = ( LargeX[102][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit102_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[102][1]=0; L[102][0]=1;}
			satisfiable[102][0]=satisfiable[102][0] & ((x[102] ^ 0) | (x[ unit102_0[i][0] ] ^ unit102_0[i][1]) |(x[ unit102_0[i][2] ] ^ unit102_0[i][3]));
			}
		if(X_contra>0) L[102][0]=2;
		}
	//Check all rules of unit[102][1]
	L[102][1] = LargeX[102][0]>0 ? 1 : 0;
	satisfiable[102][1]=1; 
	for(int i=0;i<170;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit102_1[i][0] ][ unit102_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit102_1[i][2] ][ unit102_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit102_1[i][4] ][ unit102_1[i][5] ] >0);
		X_contra = ( LargeX[102][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit102_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[102][0]=0; L[102][1]=1;}
			satisfiable[102][1]=satisfiable[102][1] & ((x[102] ^ 1) | (x[ unit102_1[i][0] ] ^ unit102_1[i][1]) |(x[ unit102_1[i][2] ] ^ unit102_1[i][3]));
			}
		if(X_contra>0) L[102][1]=2;
		}
	//Check all rules of unit[103][0]
	L[103][0] = LargeX[103][1]>0 ? 1 : 0;
	satisfiable[103][0]=1; 
	for(int i=0;i<43;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit103_0[i][0] ][ unit103_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit103_0[i][2] ][ unit103_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit103_0[i][4] ][ unit103_0[i][5] ] >0);
		X_contra = ( LargeX[103][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit103_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[103][1]=0; L[103][0]=1;}
			satisfiable[103][0]=satisfiable[103][0] & ((x[103] ^ 0) | (x[ unit103_0[i][0] ] ^ unit103_0[i][1]) |(x[ unit103_0[i][2] ] ^ unit103_0[i][3]));
			}
		if(X_contra>0) L[103][0]=2;
		}
	//Check all rules of unit[103][1]
	L[103][1] = LargeX[103][0]>0 ? 1 : 0;
	satisfiable[103][1]=1; 
	for(int i=0;i<33;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit103_1[i][0] ][ unit103_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit103_1[i][2] ][ unit103_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit103_1[i][4] ][ unit103_1[i][5] ] >0);
		X_contra = ( LargeX[103][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit103_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[103][0]=0; L[103][1]=1;}
			satisfiable[103][1]=satisfiable[103][1] & ((x[103] ^ 1) | (x[ unit103_1[i][0] ] ^ unit103_1[i][1]) |(x[ unit103_1[i][2] ] ^ unit103_1[i][3]));
			}
		if(X_contra>0) L[103][1]=2;
		}
	//Check all rules of unit[104][0]
	L[104][0] = LargeX[104][1]>0 ? 1 : 0;
	satisfiable[104][0]=1; 
	for(int i=0;i<37;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit104_0[i][0] ][ unit104_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit104_0[i][2] ][ unit104_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit104_0[i][4] ][ unit104_0[i][5] ] >0);
		X_contra = ( LargeX[104][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit104_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[104][1]=0; L[104][0]=1;}
			satisfiable[104][0]=satisfiable[104][0] & ((x[104] ^ 0) | (x[ unit104_0[i][0] ] ^ unit104_0[i][1]) |(x[ unit104_0[i][2] ] ^ unit104_0[i][3]));
			}
		if(X_contra>0) L[104][0]=2;
		}
	//Check all rules of unit[104][1]
	L[104][1] = LargeX[104][0]>0 ? 1 : 0;
	satisfiable[104][1]=1; 
	for(int i=0;i<57;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit104_1[i][0] ][ unit104_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit104_1[i][2] ][ unit104_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit104_1[i][4] ][ unit104_1[i][5] ] >0);
		X_contra = ( LargeX[104][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit104_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[104][0]=0; L[104][1]=1;}
			satisfiable[104][1]=satisfiable[104][1] & ((x[104] ^ 1) | (x[ unit104_1[i][0] ] ^ unit104_1[i][1]) |(x[ unit104_1[i][2] ] ^ unit104_1[i][3]));
			}
		if(X_contra>0) L[104][1]=2;
		}
	//Check all rules of unit[105][0]
	L[105][0] = LargeX[105][1]>0 ? 1 : 0;
	satisfiable[105][0]=1; 
	for(int i=0;i<61;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit105_0[i][0] ][ unit105_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit105_0[i][2] ][ unit105_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit105_0[i][4] ][ unit105_0[i][5] ] >0);
		X_contra = ( LargeX[105][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit105_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[105][1]=0; L[105][0]=1;}
			satisfiable[105][0]=satisfiable[105][0] & ((x[105] ^ 0) | (x[ unit105_0[i][0] ] ^ unit105_0[i][1]) |(x[ unit105_0[i][2] ] ^ unit105_0[i][3]));
			}
		if(X_contra>0) L[105][0]=2;
		}
	//Check all rules of unit[105][1]
	L[105][1] = LargeX[105][0]>0 ? 1 : 0;
	satisfiable[105][1]=1; 
	for(int i=0;i<81;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit105_1[i][0] ][ unit105_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit105_1[i][2] ][ unit105_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit105_1[i][4] ][ unit105_1[i][5] ] >0);
		X_contra = ( LargeX[105][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit105_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[105][0]=0; L[105][1]=1;}
			satisfiable[105][1]=satisfiable[105][1] & ((x[105] ^ 1) | (x[ unit105_1[i][0] ] ^ unit105_1[i][1]) |(x[ unit105_1[i][2] ] ^ unit105_1[i][3]));
			}
		if(X_contra>0) L[105][1]=2;
		}
	//Check all rules of unit[106][0]
	L[106][0] = LargeX[106][1]>0 ? 1 : 0;
	satisfiable[106][0]=1; 
	for(int i=0;i<55;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit106_0[i][0] ][ unit106_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit106_0[i][2] ][ unit106_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit106_0[i][4] ][ unit106_0[i][5] ] >0);
		X_contra = ( LargeX[106][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit106_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[106][1]=0; L[106][0]=1;}
			satisfiable[106][0]=satisfiable[106][0] & ((x[106] ^ 0) | (x[ unit106_0[i][0] ] ^ unit106_0[i][1]) |(x[ unit106_0[i][2] ] ^ unit106_0[i][3]));
			}
		if(X_contra>0) L[106][0]=2;
		}
	//Check all rules of unit[106][1]
	L[106][1] = LargeX[106][0]>0 ? 1 : 0;
	satisfiable[106][1]=1; 
	for(int i=0;i<105;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit106_1[i][0] ][ unit106_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit106_1[i][2] ][ unit106_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit106_1[i][4] ][ unit106_1[i][5] ] >0);
		X_contra = ( LargeX[106][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit106_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[106][0]=0; L[106][1]=1;}
			satisfiable[106][1]=satisfiable[106][1] & ((x[106] ^ 1) | (x[ unit106_1[i][0] ] ^ unit106_1[i][1]) |(x[ unit106_1[i][2] ] ^ unit106_1[i][3]));
			}
		if(X_contra>0) L[106][1]=2;
		}
	//Check all rules of unit[107][0]
	L[107][0] = LargeX[107][1]>0 ? 1 : 0;
	satisfiable[107][0]=1; 
	for(int i=0;i<121;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit107_0[i][0] ][ unit107_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit107_0[i][2] ][ unit107_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit107_0[i][4] ][ unit107_0[i][5] ] >0);
		X_contra = ( LargeX[107][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit107_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[107][1]=0; L[107][0]=1;}
			satisfiable[107][0]=satisfiable[107][0] & ((x[107] ^ 0) | (x[ unit107_0[i][0] ] ^ unit107_0[i][1]) |(x[ unit107_0[i][2] ] ^ unit107_0[i][3]));
			}
		if(X_contra>0) L[107][0]=2;
		}
	//Check all rules of unit[107][1]
	L[107][1] = LargeX[107][0]>0 ? 1 : 0;
	satisfiable[107][1]=1; 
	for(int i=0;i<127;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit107_1[i][0] ][ unit107_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit107_1[i][2] ][ unit107_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit107_1[i][4] ][ unit107_1[i][5] ] >0);
		X_contra = ( LargeX[107][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit107_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[107][0]=0; L[107][1]=1;}
			satisfiable[107][1]=satisfiable[107][1] & ((x[107] ^ 1) | (x[ unit107_1[i][0] ] ^ unit107_1[i][1]) |(x[ unit107_1[i][2] ] ^ unit107_1[i][3]));
			}
		if(X_contra>0) L[107][1]=2;
		}
	//Check all rules of unit[108][0]
	L[108][0] = LargeX[108][1]>0 ? 1 : 0;
	satisfiable[108][0]=1; 
	for(int i=0;i<107;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit108_0[i][0] ][ unit108_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit108_0[i][2] ][ unit108_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit108_0[i][4] ][ unit108_0[i][5] ] >0);
		X_contra = ( LargeX[108][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit108_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[108][1]=0; L[108][0]=1;}
			satisfiable[108][0]=satisfiable[108][0] & ((x[108] ^ 0) | (x[ unit108_0[i][0] ] ^ unit108_0[i][1]) |(x[ unit108_0[i][2] ] ^ unit108_0[i][3]));
			}
		if(X_contra>0) L[108][0]=2;
		}
	//Check all rules of unit[108][1]
	L[108][1] = LargeX[108][0]>0 ? 1 : 0;
	satisfiable[108][1]=1; 
	for(int i=0;i<154;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit108_1[i][0] ][ unit108_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit108_1[i][2] ][ unit108_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit108_1[i][4] ][ unit108_1[i][5] ] >0);
		X_contra = ( LargeX[108][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit108_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[108][0]=0; L[108][1]=1;}
			satisfiable[108][1]=satisfiable[108][1] & ((x[108] ^ 1) | (x[ unit108_1[i][0] ] ^ unit108_1[i][1]) |(x[ unit108_1[i][2] ] ^ unit108_1[i][3]));
			}
		if(X_contra>0) L[108][1]=2;
		}
	//Check all rules of unit[117][0]
	L[117][0] = LargeX[117][1]>0 ? 1 : 0;
	satisfiable[117][0]=1; 
	for(int i=0;i<14;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit117_0[i][0] ][ unit117_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit117_0[i][2] ][ unit117_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit117_0[i][4] ][ unit117_0[i][5] ] >0);
		X_contra = ( LargeX[117][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit117_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[117][1]=0; L[117][0]=1;}
			satisfiable[117][0]=satisfiable[117][0] & ((x[117] ^ 0) | (x[ unit117_0[i][0] ] ^ unit117_0[i][1]) |(x[ unit117_0[i][2] ] ^ unit117_0[i][3]));
			}
		if(X_contra>0) L[117][0]=2;
		}
	//Check all rules of unit[117][1]
	L[117][1] = LargeX[117][0]>0 ? 1 : 0;
	satisfiable[117][1]=1; 
	for(int i=0;i<37;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit117_1[i][0] ][ unit117_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit117_1[i][2] ][ unit117_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit117_1[i][4] ][ unit117_1[i][5] ] >0);
		X_contra = ( LargeX[117][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit117_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[117][0]=0; L[117][1]=1;}
			satisfiable[117][1]=satisfiable[117][1] & ((x[117] ^ 1) | (x[ unit117_1[i][0] ] ^ unit117_1[i][1]) |(x[ unit117_1[i][2] ] ^ unit117_1[i][3]));
			}
		if(X_contra>0) L[117][1]=2;
		}
	//Check all rules of unit[118][0]
	L[118][0] = LargeX[118][1]>0 ? 1 : 0;
	satisfiable[118][0]=1; 
	for(int i=0;i<16;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit118_0[i][0] ][ unit118_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit118_0[i][2] ][ unit118_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit118_0[i][4] ][ unit118_0[i][5] ] >0);
		X_contra = ( LargeX[118][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit118_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[118][1]=0; L[118][0]=1;}
			satisfiable[118][0]=satisfiable[118][0] & ((x[118] ^ 0) | (x[ unit118_0[i][0] ] ^ unit118_0[i][1]) |(x[ unit118_0[i][2] ] ^ unit118_0[i][3]));
			}
		if(X_contra>0) L[118][0]=2;
		}
	//Check all rules of unit[118][1]
	L[118][1] = LargeX[118][0]>0 ? 1 : 0;
	satisfiable[118][1]=1; 
	for(int i=0;i<28;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit118_1[i][0] ][ unit118_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit118_1[i][2] ][ unit118_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit118_1[i][4] ][ unit118_1[i][5] ] >0);
		X_contra = ( LargeX[118][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit118_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[118][0]=0; L[118][1]=1;}
			satisfiable[118][1]=satisfiable[118][1] & ((x[118] ^ 1) | (x[ unit118_1[i][0] ] ^ unit118_1[i][1]) |(x[ unit118_1[i][2] ] ^ unit118_1[i][3]));
			}
		if(X_contra>0) L[118][1]=2;
		}
	//Check all rules of unit[121][0]
	L[121][0] = LargeX[121][1]>0 ? 1 : 0;
	satisfiable[121][0]=1; 
	for(int i=0;i<78;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit121_0[i][0] ][ unit121_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit121_0[i][2] ][ unit121_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit121_0[i][4] ][ unit121_0[i][5] ] >0);
		X_contra = ( LargeX[121][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit121_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[121][1]=0; L[121][0]=1;}
			satisfiable[121][0]=satisfiable[121][0] & ((x[121] ^ 0) | (x[ unit121_0[i][0] ] ^ unit121_0[i][1]) |(x[ unit121_0[i][2] ] ^ unit121_0[i][3]));
			}
		if(X_contra>0) L[121][0]=2;
		}
	//Check all rules of unit[121][1]
	L[121][1] = LargeX[121][0]>0 ? 1 : 0;
	satisfiable[121][1]=1; 
	for(int i=0;i<138;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit121_1[i][0] ][ unit121_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit121_1[i][2] ][ unit121_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit121_1[i][4] ][ unit121_1[i][5] ] >0);
		X_contra = ( LargeX[121][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit121_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[121][0]=0; L[121][1]=1;}
			satisfiable[121][1]=satisfiable[121][1] & ((x[121] ^ 1) | (x[ unit121_1[i][0] ] ^ unit121_1[i][1]) |(x[ unit121_1[i][2] ] ^ unit121_1[i][3]));
			}
		if(X_contra>0) L[121][1]=2;
		}
	//Check all rules of unit[122][0]
	L[122][0] = LargeX[122][1]>0 ? 1 : 0;
	satisfiable[122][0]=1; 
	for(int i=0;i<83;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit122_0[i][0] ][ unit122_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit122_0[i][2] ][ unit122_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit122_0[i][4] ][ unit122_0[i][5] ] >0);
		X_contra = ( LargeX[122][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit122_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[122][1]=0; L[122][0]=1;}
			satisfiable[122][0]=satisfiable[122][0] & ((x[122] ^ 0) | (x[ unit122_0[i][0] ] ^ unit122_0[i][1]) |(x[ unit122_0[i][2] ] ^ unit122_0[i][3]));
			}
		if(X_contra>0) L[122][0]=2;
		}
	//Check all rules of unit[122][1]
	L[122][1] = LargeX[122][0]>0 ? 1 : 0;
	satisfiable[122][1]=1; 
	for(int i=0;i<115;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit122_1[i][0] ][ unit122_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit122_1[i][2] ][ unit122_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit122_1[i][4] ][ unit122_1[i][5] ] >0);
		X_contra = ( LargeX[122][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit122_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[122][0]=0; L[122][1]=1;}
			satisfiable[122][1]=satisfiable[122][1] & ((x[122] ^ 1) | (x[ unit122_1[i][0] ] ^ unit122_1[i][1]) |(x[ unit122_1[i][2] ] ^ unit122_1[i][3]));
			}
		if(X_contra>0) L[122][1]=2;
		}
	//Check all rules of unit[123][0]
	L[123][0] = LargeX[123][1]>0 ? 1 : 0;
	satisfiable[123][0]=1; 
	for(int i=0;i<26;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit123_0[i][0] ][ unit123_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit123_0[i][2] ][ unit123_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit123_0[i][4] ][ unit123_0[i][5] ] >0);
		X_contra = ( LargeX[123][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit123_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[123][1]=0; L[123][0]=1;}
			satisfiable[123][0]=satisfiable[123][0] & ((x[123] ^ 0) | (x[ unit123_0[i][0] ] ^ unit123_0[i][1]) |(x[ unit123_0[i][2] ] ^ unit123_0[i][3]));
			}
		if(X_contra>0) L[123][0]=2;
		}
	//Check all rules of unit[123][1]
	L[123][1] = LargeX[123][0]>0 ? 1 : 0;
	satisfiable[123][1]=1; 
	for(int i=0;i<79;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit123_1[i][0] ][ unit123_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit123_1[i][2] ][ unit123_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit123_1[i][4] ][ unit123_1[i][5] ] >0);
		X_contra = ( LargeX[123][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit123_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[123][0]=0; L[123][1]=1;}
			satisfiable[123][1]=satisfiable[123][1] & ((x[123] ^ 1) | (x[ unit123_1[i][0] ] ^ unit123_1[i][1]) |(x[ unit123_1[i][2] ] ^ unit123_1[i][3]));
			}
		if(X_contra>0) L[123][1]=2;
		}
	//Check all rules of unit[124][0]
	L[124][0] = LargeX[124][1]>0 ? 1 : 0;
	satisfiable[124][0]=1; 
	for(int i=0;i<29;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit124_0[i][0] ][ unit124_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit124_0[i][2] ][ unit124_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit124_0[i][4] ][ unit124_0[i][5] ] >0);
		X_contra = ( LargeX[124][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit124_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[124][1]=0; L[124][0]=1;}
			satisfiable[124][0]=satisfiable[124][0] & ((x[124] ^ 0) | (x[ unit124_0[i][0] ] ^ unit124_0[i][1]) |(x[ unit124_0[i][2] ] ^ unit124_0[i][3]));
			}
		if(X_contra>0) L[124][0]=2;
		}
	//Check all rules of unit[124][1]
	L[124][1] = LargeX[124][0]>0 ? 1 : 0;
	satisfiable[124][1]=1; 
	for(int i=0;i<73;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit124_1[i][0] ][ unit124_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit124_1[i][2] ][ unit124_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit124_1[i][4] ][ unit124_1[i][5] ] >0);
		X_contra = ( LargeX[124][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit124_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[124][0]=0; L[124][1]=1;}
			satisfiable[124][1]=satisfiable[124][1] & ((x[124] ^ 1) | (x[ unit124_1[i][0] ] ^ unit124_1[i][1]) |(x[ unit124_1[i][2] ] ^ unit124_1[i][3]));
			}
		if(X_contra>0) L[124][1]=2;
		}
	//Check all rules of unit[125][0]
	L[125][0] = LargeX[125][1]>0 ? 1 : 0;
	satisfiable[125][0]=1; 
	for(int i=0;i<22;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit125_0[i][0] ][ unit125_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit125_0[i][2] ][ unit125_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit125_0[i][4] ][ unit125_0[i][5] ] >0);
		X_contra = ( LargeX[125][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit125_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[125][1]=0; L[125][0]=1;}
			satisfiable[125][0]=satisfiable[125][0] & ((x[125] ^ 0) | (x[ unit125_0[i][0] ] ^ unit125_0[i][1]) |(x[ unit125_0[i][2] ] ^ unit125_0[i][3]));
			}
		if(X_contra>0) L[125][0]=2;
		}
	//Check all rules of unit[125][1]
	L[125][1] = LargeX[125][0]>0 ? 1 : 0;
	satisfiable[125][1]=1; 
	for(int i=0;i<65;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit125_1[i][0] ][ unit125_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit125_1[i][2] ][ unit125_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit125_1[i][4] ][ unit125_1[i][5] ] >0);
		X_contra = ( LargeX[125][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit125_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[125][0]=0; L[125][1]=1;}
			satisfiable[125][1]=satisfiable[125][1] & ((x[125] ^ 1) | (x[ unit125_1[i][0] ] ^ unit125_1[i][1]) |(x[ unit125_1[i][2] ] ^ unit125_1[i][3]));
			}
		if(X_contra>0) L[125][1]=2;
		}
	//Check all rules of unit[126][0]
	L[126][0] = LargeX[126][1]>0 ? 1 : 0;
	satisfiable[126][0]=1; 
	for(int i=0;i<26;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit126_0[i][0] ][ unit126_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit126_0[i][2] ][ unit126_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit126_0[i][4] ][ unit126_0[i][5] ] >0);
		X_contra = ( LargeX[126][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit126_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[126][1]=0; L[126][0]=1;}
			satisfiable[126][0]=satisfiable[126][0] & ((x[126] ^ 0) | (x[ unit126_0[i][0] ] ^ unit126_0[i][1]) |(x[ unit126_0[i][2] ] ^ unit126_0[i][3]));
			}
		if(X_contra>0) L[126][0]=2;
		}
	//Check all rules of unit[126][1]
	L[126][1] = LargeX[126][0]>0 ? 1 : 0;
	satisfiable[126][1]=1; 
	for(int i=0;i<49;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit126_1[i][0] ][ unit126_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit126_1[i][2] ][ unit126_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit126_1[i][4] ][ unit126_1[i][5] ] >0);
		X_contra = ( LargeX[126][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit126_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[126][0]=0; L[126][1]=1;}
			satisfiable[126][1]=satisfiable[126][1] & ((x[126] ^ 1) | (x[ unit126_1[i][0] ] ^ unit126_1[i][1]) |(x[ unit126_1[i][2] ] ^ unit126_1[i][3]));
			}
		if(X_contra>0) L[126][1]=2;
		}
	//Check all rules of unit[127][0]
	L[127][0] = LargeX[127][1]>0 ? 1 : 0;
	satisfiable[127][0]=1; 
	for(int i=0;i<49;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit127_0[i][0] ][ unit127_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit127_0[i][2] ][ unit127_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit127_0[i][4] ][ unit127_0[i][5] ] >0);
		X_contra = ( LargeX[127][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit127_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[127][1]=0; L[127][0]=1;}
			satisfiable[127][0]=satisfiable[127][0] & ((x[127] ^ 0) | (x[ unit127_0[i][0] ] ^ unit127_0[i][1]) |(x[ unit127_0[i][2] ] ^ unit127_0[i][3]));
			}
		if(X_contra>0) L[127][0]=2;
		}
	//Check all rules of unit[127][1]
	L[127][1] = LargeX[127][0]>0 ? 1 : 0;
	satisfiable[127][1]=1; 
	for(int i=0;i<164;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit127_1[i][0] ][ unit127_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit127_1[i][2] ][ unit127_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit127_1[i][4] ][ unit127_1[i][5] ] >0);
		X_contra = ( LargeX[127][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit127_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[127][0]=0; L[127][1]=1;}
			satisfiable[127][1]=satisfiable[127][1] & ((x[127] ^ 1) | (x[ unit127_1[i][0] ] ^ unit127_1[i][1]) |(x[ unit127_1[i][2] ] ^ unit127_1[i][3]));
			}
		if(X_contra>0) L[127][1]=2;
		}
	//Check all rules of unit[128][0]
	L[128][0] = LargeX[128][1]>0 ? 1 : 0;
	satisfiable[128][0]=1; 
	for(int i=0;i<51;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit128_0[i][0] ][ unit128_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit128_0[i][2] ][ unit128_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit128_0[i][4] ][ unit128_0[i][5] ] >0);
		X_contra = ( LargeX[128][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit128_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[128][1]=0; L[128][0]=1;}
			satisfiable[128][0]=satisfiable[128][0] & ((x[128] ^ 0) | (x[ unit128_0[i][0] ] ^ unit128_0[i][1]) |(x[ unit128_0[i][2] ] ^ unit128_0[i][3]));
			}
		if(X_contra>0) L[128][0]=2;
		}
	//Check all rules of unit[128][1]
	L[128][1] = LargeX[128][0]>0 ? 1 : 0;
	satisfiable[128][1]=1; 
	for(int i=0;i<157;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit128_1[i][0] ][ unit128_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit128_1[i][2] ][ unit128_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit128_1[i][4] ][ unit128_1[i][5] ] >0);
		X_contra = ( LargeX[128][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit128_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[128][0]=0; L[128][1]=1;}
			satisfiable[128][1]=satisfiable[128][1] & ((x[128] ^ 1) | (x[ unit128_1[i][0] ] ^ unit128_1[i][1]) |(x[ unit128_1[i][2] ] ^ unit128_1[i][3]));
			}
		if(X_contra>0) L[128][1]=2;
		}
	//Check all rules of unit[129][0]
	L[129][0] = LargeX[129][1]>0 ? 1 : 0;
	satisfiable[129][0]=1; 
	for(int i=0;i<46;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit129_0[i][0] ][ unit129_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit129_0[i][2] ][ unit129_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit129_0[i][4] ][ unit129_0[i][5] ] >0);
		X_contra = ( LargeX[129][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit129_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[129][1]=0; L[129][0]=1;}
			satisfiable[129][0]=satisfiable[129][0] & ((x[129] ^ 0) | (x[ unit129_0[i][0] ] ^ unit129_0[i][1]) |(x[ unit129_0[i][2] ] ^ unit129_0[i][3]));
			}
		if(X_contra>0) L[129][0]=2;
		}
	//Check all rules of unit[129][1]
	L[129][1] = LargeX[129][0]>0 ? 1 : 0;
	satisfiable[129][1]=1; 
	for(int i=0;i<155;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit129_1[i][0] ][ unit129_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit129_1[i][2] ][ unit129_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit129_1[i][4] ][ unit129_1[i][5] ] >0);
		X_contra = ( LargeX[129][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit129_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[129][0]=0; L[129][1]=1;}
			satisfiable[129][1]=satisfiable[129][1] & ((x[129] ^ 1) | (x[ unit129_1[i][0] ] ^ unit129_1[i][1]) |(x[ unit129_1[i][2] ] ^ unit129_1[i][3]));
			}
		if(X_contra>0) L[129][1]=2;
		}
	//Check all rules of unit[130][0]
	L[130][0] = LargeX[130][1]>0 ? 1 : 0;
	satisfiable[130][0]=1; 
	for(int i=0;i<48;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit130_0[i][0] ][ unit130_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit130_0[i][2] ][ unit130_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit130_0[i][4] ][ unit130_0[i][5] ] >0);
		X_contra = ( LargeX[130][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit130_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[130][1]=0; L[130][0]=1;}
			satisfiable[130][0]=satisfiable[130][0] & ((x[130] ^ 0) | (x[ unit130_0[i][0] ] ^ unit130_0[i][1]) |(x[ unit130_0[i][2] ] ^ unit130_0[i][3]));
			}
		if(X_contra>0) L[130][0]=2;
		}
	//Check all rules of unit[130][1]
	L[130][1] = LargeX[130][0]>0 ? 1 : 0;
	satisfiable[130][1]=1; 
	for(int i=0;i<147;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit130_1[i][0] ][ unit130_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit130_1[i][2] ][ unit130_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit130_1[i][4] ][ unit130_1[i][5] ] >0);
		X_contra = ( LargeX[130][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit130_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[130][0]=0; L[130][1]=1;}
			satisfiable[130][1]=satisfiable[130][1] & ((x[130] ^ 1) | (x[ unit130_1[i][0] ] ^ unit130_1[i][1]) |(x[ unit130_1[i][2] ] ^ unit130_1[i][3]));
			}
		if(X_contra>0) L[130][1]=2;
		}
	//Check all rules of unit[131][0]
	L[131][0] = LargeX[131][1]>0 ? 1 : 0;
	satisfiable[131][0]=1; 
	for(int i=0;i<44;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit131_0[i][0] ][ unit131_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit131_0[i][2] ][ unit131_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit131_0[i][4] ][ unit131_0[i][5] ] >0);
		X_contra = ( LargeX[131][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit131_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[131][1]=0; L[131][0]=1;}
			satisfiable[131][0]=satisfiable[131][0] & ((x[131] ^ 0) | (x[ unit131_0[i][0] ] ^ unit131_0[i][1]) |(x[ unit131_0[i][2] ] ^ unit131_0[i][3]));
			}
		if(X_contra>0) L[131][0]=2;
		}
	//Check all rules of unit[131][1]
	L[131][1] = LargeX[131][0]>0 ? 1 : 0;
	satisfiable[131][1]=1; 
	for(int i=0;i<142;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit131_1[i][0] ][ unit131_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit131_1[i][2] ][ unit131_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit131_1[i][4] ][ unit131_1[i][5] ] >0);
		X_contra = ( LargeX[131][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit131_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[131][0]=0; L[131][1]=1;}
			satisfiable[131][1]=satisfiable[131][1] & ((x[131] ^ 1) | (x[ unit131_1[i][0] ] ^ unit131_1[i][1]) |(x[ unit131_1[i][2] ] ^ unit131_1[i][3]));
			}
		if(X_contra>0) L[131][1]=2;
		}
	//Check all rules of unit[132][0]
	L[132][0] = LargeX[132][1]>0 ? 1 : 0;
	satisfiable[132][0]=1; 
	for(int i=0;i<45;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit132_0[i][0] ][ unit132_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit132_0[i][2] ][ unit132_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit132_0[i][4] ][ unit132_0[i][5] ] >0);
		X_contra = ( LargeX[132][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit132_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[132][1]=0; L[132][0]=1;}
			satisfiable[132][0]=satisfiable[132][0] & ((x[132] ^ 0) | (x[ unit132_0[i][0] ] ^ unit132_0[i][1]) |(x[ unit132_0[i][2] ] ^ unit132_0[i][3]));
			}
		if(X_contra>0) L[132][0]=2;
		}
	//Check all rules of unit[132][1]
	L[132][1] = LargeX[132][0]>0 ? 1 : 0;
	satisfiable[132][1]=1; 
	for(int i=0;i<137;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit132_1[i][0] ][ unit132_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit132_1[i][2] ][ unit132_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit132_1[i][4] ][ unit132_1[i][5] ] >0);
		X_contra = ( LargeX[132][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit132_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[132][0]=0; L[132][1]=1;}
			satisfiable[132][1]=satisfiable[132][1] & ((x[132] ^ 1) | (x[ unit132_1[i][0] ] ^ unit132_1[i][1]) |(x[ unit132_1[i][2] ] ^ unit132_1[i][3]));
			}
		if(X_contra>0) L[132][1]=2;
		}
	//Check all rules of unit[133][0]
	L[133][0] = LargeX[133][1]>0 ? 1 : 0;
	satisfiable[133][0]=1; 
	for(int i=0;i<49;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit133_0[i][0] ][ unit133_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit133_0[i][2] ][ unit133_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit133_0[i][4] ][ unit133_0[i][5] ] >0);
		X_contra = ( LargeX[133][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit133_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[133][1]=0; L[133][0]=1;}
			satisfiable[133][0]=satisfiable[133][0] & ((x[133] ^ 0) | (x[ unit133_0[i][0] ] ^ unit133_0[i][1]) |(x[ unit133_0[i][2] ] ^ unit133_0[i][3]));
			}
		if(X_contra>0) L[133][0]=2;
		}
	//Check all rules of unit[133][1]
	L[133][1] = LargeX[133][0]>0 ? 1 : 0;
	satisfiable[133][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit133_1[i][0] ][ unit133_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit133_1[i][2] ][ unit133_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit133_1[i][4] ][ unit133_1[i][5] ] >0);
		X_contra = ( LargeX[133][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit133_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[133][0]=0; L[133][1]=1;}
			satisfiable[133][1]=satisfiable[133][1] & ((x[133] ^ 1) | (x[ unit133_1[i][0] ] ^ unit133_1[i][1]) |(x[ unit133_1[i][2] ] ^ unit133_1[i][3]));
			}
		if(X_contra>0) L[133][1]=2;
		}
	//Check all rules of unit[134][0]
	L[134][0] = LargeX[134][1]>0 ? 1 : 0;
	satisfiable[134][0]=1; 
	for(int i=0;i<50;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit134_0[i][0] ][ unit134_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit134_0[i][2] ][ unit134_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit134_0[i][4] ][ unit134_0[i][5] ] >0);
		X_contra = ( LargeX[134][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit134_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[134][1]=0; L[134][0]=1;}
			satisfiable[134][0]=satisfiable[134][0] & ((x[134] ^ 0) | (x[ unit134_0[i][0] ] ^ unit134_0[i][1]) |(x[ unit134_0[i][2] ] ^ unit134_0[i][3]));
			}
		if(X_contra>0) L[134][0]=2;
		}
	//Check all rules of unit[134][1]
	L[134][1] = LargeX[134][0]>0 ? 1 : 0;
	satisfiable[134][1]=1; 
	for(int i=0;i<173;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit134_1[i][0] ][ unit134_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit134_1[i][2] ][ unit134_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit134_1[i][4] ][ unit134_1[i][5] ] >0);
		X_contra = ( LargeX[134][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit134_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[134][0]=0; L[134][1]=1;}
			satisfiable[134][1]=satisfiable[134][1] & ((x[134] ^ 1) | (x[ unit134_1[i][0] ] ^ unit134_1[i][1]) |(x[ unit134_1[i][2] ] ^ unit134_1[i][3]));
			}
		if(X_contra>0) L[134][1]=2;
		}
	//Check all rules of unit[135][0]
	L[135][0] = LargeX[135][1]>0 ? 1 : 0;
	satisfiable[135][0]=1; 
	for(int i=0;i<62;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit135_0[i][0] ][ unit135_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit135_0[i][2] ][ unit135_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit135_0[i][4] ][ unit135_0[i][5] ] >0);
		X_contra = ( LargeX[135][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit135_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[135][1]=0; L[135][0]=1;}
			satisfiable[135][0]=satisfiable[135][0] & ((x[135] ^ 0) | (x[ unit135_0[i][0] ] ^ unit135_0[i][1]) |(x[ unit135_0[i][2] ] ^ unit135_0[i][3]));
			}
		if(X_contra>0) L[135][0]=2;
		}
	//Check all rules of unit[135][1]
	L[135][1] = LargeX[135][0]>0 ? 1 : 0;
	satisfiable[135][1]=1; 
	for(int i=0;i<177;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit135_1[i][0] ][ unit135_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit135_1[i][2] ][ unit135_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit135_1[i][4] ][ unit135_1[i][5] ] >0);
		X_contra = ( LargeX[135][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit135_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[135][0]=0; L[135][1]=1;}
			satisfiable[135][1]=satisfiable[135][1] & ((x[135] ^ 1) | (x[ unit135_1[i][0] ] ^ unit135_1[i][1]) |(x[ unit135_1[i][2] ] ^ unit135_1[i][3]));
			}
		if(X_contra>0) L[135][1]=2;
		}
	//Check all rules of unit[136][0]
	L[136][0] = LargeX[136][1]>0 ? 1 : 0;
	satisfiable[136][0]=1; 
	for(int i=0;i<62;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit136_0[i][0] ][ unit136_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit136_0[i][2] ][ unit136_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit136_0[i][4] ][ unit136_0[i][5] ] >0);
		X_contra = ( LargeX[136][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit136_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[136][1]=0; L[136][0]=1;}
			satisfiable[136][0]=satisfiable[136][0] & ((x[136] ^ 0) | (x[ unit136_0[i][0] ] ^ unit136_0[i][1]) |(x[ unit136_0[i][2] ] ^ unit136_0[i][3]));
			}
		if(X_contra>0) L[136][0]=2;
		}
	//Check all rules of unit[136][1]
	L[136][1] = LargeX[136][0]>0 ? 1 : 0;
	satisfiable[136][1]=1; 
	for(int i=0;i<178;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit136_1[i][0] ][ unit136_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit136_1[i][2] ][ unit136_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit136_1[i][4] ][ unit136_1[i][5] ] >0);
		X_contra = ( LargeX[136][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit136_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[136][0]=0; L[136][1]=1;}
			satisfiable[136][1]=satisfiable[136][1] & ((x[136] ^ 1) | (x[ unit136_1[i][0] ] ^ unit136_1[i][1]) |(x[ unit136_1[i][2] ] ^ unit136_1[i][3]));
			}
		if(X_contra>0) L[136][1]=2;
		}
	//Check all rules of unit[137][0]
	L[137][0] = LargeX[137][1]>0 ? 1 : 0;
	satisfiable[137][0]=1; 
	for(int i=0;i<62;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit137_0[i][0] ][ unit137_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit137_0[i][2] ][ unit137_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit137_0[i][4] ][ unit137_0[i][5] ] >0);
		X_contra = ( LargeX[137][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit137_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[137][1]=0; L[137][0]=1;}
			satisfiable[137][0]=satisfiable[137][0] & ((x[137] ^ 0) | (x[ unit137_0[i][0] ] ^ unit137_0[i][1]) |(x[ unit137_0[i][2] ] ^ unit137_0[i][3]));
			}
		if(X_contra>0) L[137][0]=2;
		}
	//Check all rules of unit[137][1]
	L[137][1] = LargeX[137][0]>0 ? 1 : 0;
	satisfiable[137][1]=1; 
	for(int i=0;i<174;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit137_1[i][0] ][ unit137_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit137_1[i][2] ][ unit137_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit137_1[i][4] ][ unit137_1[i][5] ] >0);
		X_contra = ( LargeX[137][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit137_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[137][0]=0; L[137][1]=1;}
			satisfiable[137][1]=satisfiable[137][1] & ((x[137] ^ 1) | (x[ unit137_1[i][0] ] ^ unit137_1[i][1]) |(x[ unit137_1[i][2] ] ^ unit137_1[i][3]));
			}
		if(X_contra>0) L[137][1]=2;
		}
	//Check all rules of unit[138][0]
	L[138][0] = LargeX[138][1]>0 ? 1 : 0;
	satisfiable[138][0]=1; 
	for(int i=0;i<61;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit138_0[i][0] ][ unit138_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit138_0[i][2] ][ unit138_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit138_0[i][4] ][ unit138_0[i][5] ] >0);
		X_contra = ( LargeX[138][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit138_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[138][1]=0; L[138][0]=1;}
			satisfiable[138][0]=satisfiable[138][0] & ((x[138] ^ 0) | (x[ unit138_0[i][0] ] ^ unit138_0[i][1]) |(x[ unit138_0[i][2] ] ^ unit138_0[i][3]));
			}
		if(X_contra>0) L[138][0]=2;
		}
	//Check all rules of unit[138][1]
	L[138][1] = LargeX[138][0]>0 ? 1 : 0;
	satisfiable[138][1]=1; 
	for(int i=0;i<170;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit138_1[i][0] ][ unit138_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit138_1[i][2] ][ unit138_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit138_1[i][4] ][ unit138_1[i][5] ] >0);
		X_contra = ( LargeX[138][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit138_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[138][0]=0; L[138][1]=1;}
			satisfiable[138][1]=satisfiable[138][1] & ((x[138] ^ 1) | (x[ unit138_1[i][0] ] ^ unit138_1[i][1]) |(x[ unit138_1[i][2] ] ^ unit138_1[i][3]));
			}
		if(X_contra>0) L[138][1]=2;
		}
	//Check all rules of unit[139][0]
	L[139][0] = LargeX[139][1]>0 ? 1 : 0;
	satisfiable[139][0]=1; 
	for(int i=0;i<22;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit139_0[i][0] ][ unit139_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit139_0[i][2] ][ unit139_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit139_0[i][4] ][ unit139_0[i][5] ] >0);
		X_contra = ( LargeX[139][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit139_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[139][1]=0; L[139][0]=1;}
			satisfiable[139][0]=satisfiable[139][0] & ((x[139] ^ 0) | (x[ unit139_0[i][0] ] ^ unit139_0[i][1]) |(x[ unit139_0[i][2] ] ^ unit139_0[i][3]));
			}
		if(X_contra>0) L[139][0]=2;
		}
	//Check all rules of unit[139][1]
	L[139][1] = LargeX[139][0]>0 ? 1 : 0;
	satisfiable[139][1]=1; 
	for(int i=0;i<33;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit139_1[i][0] ][ unit139_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit139_1[i][2] ][ unit139_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit139_1[i][4] ][ unit139_1[i][5] ] >0);
		X_contra = ( LargeX[139][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit139_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[139][0]=0; L[139][1]=1;}
			satisfiable[139][1]=satisfiable[139][1] & ((x[139] ^ 1) | (x[ unit139_1[i][0] ] ^ unit139_1[i][1]) |(x[ unit139_1[i][2] ] ^ unit139_1[i][3]));
			}
		if(X_contra>0) L[139][1]=2;
		}
	//Check all rules of unit[140][0]
	L[140][0] = LargeX[140][1]>0 ? 1 : 0;
	satisfiable[140][0]=1; 
	for(int i=0;i<16;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit140_0[i][0] ][ unit140_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit140_0[i][2] ][ unit140_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit140_0[i][4] ][ unit140_0[i][5] ] >0);
		X_contra = ( LargeX[140][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit140_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[140][1]=0; L[140][0]=1;}
			satisfiable[140][0]=satisfiable[140][0] & ((x[140] ^ 0) | (x[ unit140_0[i][0] ] ^ unit140_0[i][1]) |(x[ unit140_0[i][2] ] ^ unit140_0[i][3]));
			}
		if(X_contra>0) L[140][0]=2;
		}
	//Check all rules of unit[140][1]
	L[140][1] = LargeX[140][0]>0 ? 1 : 0;
	satisfiable[140][1]=1; 
	for(int i=0;i<57;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit140_1[i][0] ][ unit140_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit140_1[i][2] ][ unit140_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit140_1[i][4] ][ unit140_1[i][5] ] >0);
		X_contra = ( LargeX[140][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit140_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[140][0]=0; L[140][1]=1;}
			satisfiable[140][1]=satisfiable[140][1] & ((x[140] ^ 1) | (x[ unit140_1[i][0] ] ^ unit140_1[i][1]) |(x[ unit140_1[i][2] ] ^ unit140_1[i][3]));
			}
		if(X_contra>0) L[140][1]=2;
		}
	//Check all rules of unit[141][0]
	L[141][0] = LargeX[141][1]>0 ? 1 : 0;
	satisfiable[141][0]=1; 
	for(int i=0;i<34;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit141_0[i][0] ][ unit141_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit141_0[i][2] ][ unit141_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit141_0[i][4] ][ unit141_0[i][5] ] >0);
		X_contra = ( LargeX[141][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit141_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[141][1]=0; L[141][0]=1;}
			satisfiable[141][0]=satisfiable[141][0] & ((x[141] ^ 0) | (x[ unit141_0[i][0] ] ^ unit141_0[i][1]) |(x[ unit141_0[i][2] ] ^ unit141_0[i][3]));
			}
		if(X_contra>0) L[141][0]=2;
		}
	//Check all rules of unit[141][1]
	L[141][1] = LargeX[141][0]>0 ? 1 : 0;
	satisfiable[141][1]=1; 
	for(int i=0;i<81;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit141_1[i][0] ][ unit141_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit141_1[i][2] ][ unit141_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit141_1[i][4] ][ unit141_1[i][5] ] >0);
		X_contra = ( LargeX[141][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit141_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[141][0]=0; L[141][1]=1;}
			satisfiable[141][1]=satisfiable[141][1] & ((x[141] ^ 1) | (x[ unit141_1[i][0] ] ^ unit141_1[i][1]) |(x[ unit141_1[i][2] ] ^ unit141_1[i][3]));
			}
		if(X_contra>0) L[141][1]=2;
		}
	//Check all rules of unit[142][0]
	L[142][0] = LargeX[142][1]>0 ? 1 : 0;
	satisfiable[142][0]=1; 
	for(int i=0;i<28;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit142_0[i][0] ][ unit142_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit142_0[i][2] ][ unit142_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit142_0[i][4] ][ unit142_0[i][5] ] >0);
		X_contra = ( LargeX[142][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit142_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[142][1]=0; L[142][0]=1;}
			satisfiable[142][0]=satisfiable[142][0] & ((x[142] ^ 0) | (x[ unit142_0[i][0] ] ^ unit142_0[i][1]) |(x[ unit142_0[i][2] ] ^ unit142_0[i][3]));
			}
		if(X_contra>0) L[142][0]=2;
		}
	//Check all rules of unit[142][1]
	L[142][1] = LargeX[142][0]>0 ? 1 : 0;
	satisfiable[142][1]=1; 
	for(int i=0;i<105;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit142_1[i][0] ][ unit142_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit142_1[i][2] ][ unit142_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit142_1[i][4] ][ unit142_1[i][5] ] >0);
		X_contra = ( LargeX[142][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit142_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[142][0]=0; L[142][1]=1;}
			satisfiable[142][1]=satisfiable[142][1] & ((x[142] ^ 1) | (x[ unit142_1[i][0] ] ^ unit142_1[i][1]) |(x[ unit142_1[i][2] ] ^ unit142_1[i][3]));
			}
		if(X_contra>0) L[142][1]=2;
		}
	//Check all rules of unit[143][0]
	L[143][0] = LargeX[143][1]>0 ? 1 : 0;
	satisfiable[143][0]=1; 
	for(int i=0;i<95;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit143_0[i][0] ][ unit143_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit143_0[i][2] ][ unit143_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit143_0[i][4] ][ unit143_0[i][5] ] >0);
		X_contra = ( LargeX[143][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit143_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[143][1]=0; L[143][0]=1;}
			satisfiable[143][0]=satisfiable[143][0] & ((x[143] ^ 0) | (x[ unit143_0[i][0] ] ^ unit143_0[i][1]) |(x[ unit143_0[i][2] ] ^ unit143_0[i][3]));
			}
		if(X_contra>0) L[143][0]=2;
		}
	//Check all rules of unit[143][1]
	L[143][1] = LargeX[143][0]>0 ? 1 : 0;
	satisfiable[143][1]=1; 
	for(int i=0;i<127;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit143_1[i][0] ][ unit143_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit143_1[i][2] ][ unit143_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit143_1[i][4] ][ unit143_1[i][5] ] >0);
		X_contra = ( LargeX[143][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit143_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[143][0]=0; L[143][1]=1;}
			satisfiable[143][1]=satisfiable[143][1] & ((x[143] ^ 1) | (x[ unit143_1[i][0] ] ^ unit143_1[i][1]) |(x[ unit143_1[i][2] ] ^ unit143_1[i][3]));
			}
		if(X_contra>0) L[143][1]=2;
		}
	//Check all rules of unit[144][0]
	L[144][0] = LargeX[144][1]>0 ? 1 : 0;
	satisfiable[144][0]=1; 
	for(int i=0;i<81;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit144_0[i][0] ][ unit144_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit144_0[i][2] ][ unit144_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit144_0[i][4] ][ unit144_0[i][5] ] >0);
		X_contra = ( LargeX[144][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit144_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[144][1]=0; L[144][0]=1;}
			satisfiable[144][0]=satisfiable[144][0] & ((x[144] ^ 0) | (x[ unit144_0[i][0] ] ^ unit144_0[i][1]) |(x[ unit144_0[i][2] ] ^ unit144_0[i][3]));
			}
		if(X_contra>0) L[144][0]=2;
		}
	//Check all rules of unit[144][1]
	L[144][1] = LargeX[144][0]>0 ? 1 : 0;
	satisfiable[144][1]=1; 
	for(int i=0;i<156;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit144_1[i][0] ][ unit144_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit144_1[i][2] ][ unit144_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit144_1[i][4] ][ unit144_1[i][5] ] >0);
		X_contra = ( LargeX[144][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit144_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[144][0]=0; L[144][1]=1;}
			satisfiable[144][1]=satisfiable[144][1] & ((x[144] ^ 1) | (x[ unit144_1[i][0] ] ^ unit144_1[i][1]) |(x[ unit144_1[i][2] ] ^ unit144_1[i][3]));
			}
		if(X_contra>0) L[144][1]=2;
		}
	//Check all rules of unit[217][0]
	L[217][0] = LargeX[217][1]>0 ? 1 : 0;
	satisfiable[217][0]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit217_0[i][0] ][ unit217_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit217_0[i][2] ][ unit217_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit217_0[i][4] ][ unit217_0[i][5] ] >0);
		X_contra = ( LargeX[217][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit217_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[217][1]=0; L[217][0]=1;}
			satisfiable[217][0]=satisfiable[217][0] & ((x[217] ^ 0) | (x[ unit217_0[i][0] ] ^ unit217_0[i][1]) |(x[ unit217_0[i][2] ] ^ unit217_0[i][3]));
			}
		if(X_contra>0) L[217][0]=2;
		}
	//Check all rules of unit[217][1]
	L[217][1] = LargeX[217][0]>0 ? 1 : 0;
	satisfiable[217][1]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit217_1[i][0] ][ unit217_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit217_1[i][2] ][ unit217_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit217_1[i][4] ][ unit217_1[i][5] ] >0);
		X_contra = ( LargeX[217][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit217_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[217][0]=0; L[217][1]=1;}
			satisfiable[217][1]=satisfiable[217][1] & ((x[217] ^ 1) | (x[ unit217_1[i][0] ] ^ unit217_1[i][1]) |(x[ unit217_1[i][2] ] ^ unit217_1[i][3]));
			}
		if(X_contra>0) L[217][1]=2;
		}
	//Check all rules of unit[218][0]
	L[218][0] = LargeX[218][1]>0 ? 1 : 0;
	satisfiable[218][0]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit218_0[i][0] ][ unit218_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit218_0[i][2] ][ unit218_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit218_0[i][4] ][ unit218_0[i][5] ] >0);
		X_contra = ( LargeX[218][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit218_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[218][1]=0; L[218][0]=1;}
			satisfiable[218][0]=satisfiable[218][0] & ((x[218] ^ 0) | (x[ unit218_0[i][0] ] ^ unit218_0[i][1]) |(x[ unit218_0[i][2] ] ^ unit218_0[i][3]));
			}
		if(X_contra>0) L[218][0]=2;
		}
	//Check all rules of unit[218][1]
	L[218][1] = LargeX[218][0]>0 ? 1 : 0;
	satisfiable[218][1]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit218_1[i][0] ][ unit218_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit218_1[i][2] ][ unit218_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit218_1[i][4] ][ unit218_1[i][5] ] >0);
		X_contra = ( LargeX[218][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit218_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[218][0]=0; L[218][1]=1;}
			satisfiable[218][1]=satisfiable[218][1] & ((x[218] ^ 1) | (x[ unit218_1[i][0] ] ^ unit218_1[i][1]) |(x[ unit218_1[i][2] ] ^ unit218_1[i][3]));
			}
		if(X_contra>0) L[218][1]=2;
		}
	//Check all rules of unit[229][0]
	L[229][0] = LargeX[229][1]>0 ? 1 : 0;
	satisfiable[229][0]=1; 
	for(int i=0;i<32;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit229_0[i][0] ][ unit229_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit229_0[i][2] ][ unit229_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit229_0[i][4] ][ unit229_0[i][5] ] >0);
		X_contra = ( LargeX[229][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit229_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[229][1]=0; L[229][0]=1;}
			satisfiable[229][0]=satisfiable[229][0] & ((x[229] ^ 0) | (x[ unit229_0[i][0] ] ^ unit229_0[i][1]) |(x[ unit229_0[i][2] ] ^ unit229_0[i][3]));
			}
		if(X_contra>0) L[229][0]=2;
		}
	//Check all rules of unit[229][1]
	L[229][1] = LargeX[229][0]>0 ? 1 : 0;
	satisfiable[229][1]=1; 
	for(int i=0;i<119;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit229_1[i][0] ][ unit229_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit229_1[i][2] ][ unit229_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit229_1[i][4] ][ unit229_1[i][5] ] >0);
		X_contra = ( LargeX[229][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit229_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[229][0]=0; L[229][1]=1;}
			satisfiable[229][1]=satisfiable[229][1] & ((x[229] ^ 1) | (x[ unit229_1[i][0] ] ^ unit229_1[i][1]) |(x[ unit229_1[i][2] ] ^ unit229_1[i][3]));
			}
		if(X_contra>0) L[229][1]=2;
		}
	//Check all rules of unit[230][0]
	L[230][0] = LargeX[230][1]>0 ? 1 : 0;
	satisfiable[230][0]=1; 
	for(int i=0;i<36;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit230_0[i][0] ][ unit230_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit230_0[i][2] ][ unit230_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit230_0[i][4] ][ unit230_0[i][5] ] >0);
		X_contra = ( LargeX[230][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit230_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[230][1]=0; L[230][0]=1;}
			satisfiable[230][0]=satisfiable[230][0] & ((x[230] ^ 0) | (x[ unit230_0[i][0] ] ^ unit230_0[i][1]) |(x[ unit230_0[i][2] ] ^ unit230_0[i][3]));
			}
		if(X_contra>0) L[230][0]=2;
		}
	//Check all rules of unit[230][1]
	L[230][1] = LargeX[230][0]>0 ? 1 : 0;
	satisfiable[230][1]=1; 
	for(int i=0;i<106;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit230_1[i][0] ][ unit230_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit230_1[i][2] ][ unit230_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit230_1[i][4] ][ unit230_1[i][5] ] >0);
		X_contra = ( LargeX[230][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit230_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[230][0]=0; L[230][1]=1;}
			satisfiable[230][1]=satisfiable[230][1] & ((x[230] ^ 1) | (x[ unit230_1[i][0] ] ^ unit230_1[i][1]) |(x[ unit230_1[i][2] ] ^ unit230_1[i][3]));
			}
		if(X_contra>0) L[230][1]=2;
		}
	//Check all rules of unit[235][0]
	L[235][0] = LargeX[235][1]>0 ? 1 : 0;
	satisfiable[235][0]=1; 
	for(int i=0;i<43;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit235_0[i][0] ][ unit235_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit235_0[i][2] ][ unit235_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit235_0[i][4] ][ unit235_0[i][5] ] >0);
		X_contra = ( LargeX[235][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit235_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[235][1]=0; L[235][0]=1;}
			satisfiable[235][0]=satisfiable[235][0] & ((x[235] ^ 0) | (x[ unit235_0[i][0] ] ^ unit235_0[i][1]) |(x[ unit235_0[i][2] ] ^ unit235_0[i][3]));
			}
		if(X_contra>0) L[235][0]=2;
		}
	//Check all rules of unit[235][1]
	L[235][1] = LargeX[235][0]>0 ? 1 : 0;
	satisfiable[235][1]=1; 
	for(int i=0;i<152;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit235_1[i][0] ][ unit235_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit235_1[i][2] ][ unit235_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit235_1[i][4] ][ unit235_1[i][5] ] >0);
		X_contra = ( LargeX[235][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit235_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[235][0]=0; L[235][1]=1;}
			satisfiable[235][1]=satisfiable[235][1] & ((x[235] ^ 1) | (x[ unit235_1[i][0] ] ^ unit235_1[i][1]) |(x[ unit235_1[i][2] ] ^ unit235_1[i][3]));
			}
		if(X_contra>0) L[235][1]=2;
		}
	//Check all rules of unit[236][0]
	L[236][0] = LargeX[236][1]>0 ? 1 : 0;
	satisfiable[236][0]=1; 
	for(int i=0;i<45;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit236_0[i][0] ][ unit236_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit236_0[i][2] ][ unit236_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit236_0[i][4] ][ unit236_0[i][5] ] >0);
		X_contra = ( LargeX[236][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit236_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[236][1]=0; L[236][0]=1;}
			satisfiable[236][0]=satisfiable[236][0] & ((x[236] ^ 0) | (x[ unit236_0[i][0] ] ^ unit236_0[i][1]) |(x[ unit236_0[i][2] ] ^ unit236_0[i][3]));
			}
		if(X_contra>0) L[236][0]=2;
		}
	//Check all rules of unit[236][1]
	L[236][1] = LargeX[236][0]>0 ? 1 : 0;
	satisfiable[236][1]=1; 
	for(int i=0;i<143;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit236_1[i][0] ][ unit236_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit236_1[i][2] ][ unit236_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit236_1[i][4] ][ unit236_1[i][5] ] >0);
		X_contra = ( LargeX[236][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit236_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[236][0]=0; L[236][1]=1;}
			satisfiable[236][1]=satisfiable[236][1] & ((x[236] ^ 1) | (x[ unit236_1[i][0] ] ^ unit236_1[i][1]) |(x[ unit236_1[i][2] ] ^ unit236_1[i][3]));
			}
		if(X_contra>0) L[236][1]=2;
		}
	//Check all rules of unit[237][0]
	L[237][0] = LargeX[237][1]>0 ? 1 : 0;
	satisfiable[237][0]=1; 
	for(int i=0;i<74;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit237_0[i][0] ][ unit237_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit237_0[i][2] ][ unit237_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit237_0[i][4] ][ unit237_0[i][5] ] >0);
		X_contra = ( LargeX[237][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit237_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[237][1]=0; L[237][0]=1;}
			satisfiable[237][0]=satisfiable[237][0] & ((x[237] ^ 0) | (x[ unit237_0[i][0] ] ^ unit237_0[i][1]) |(x[ unit237_0[i][2] ] ^ unit237_0[i][3]));
			}
		if(X_contra>0) L[237][0]=2;
		}
	//Check all rules of unit[237][1]
	L[237][1] = LargeX[237][0]>0 ? 1 : 0;
	satisfiable[237][1]=1; 
	for(int i=0;i<149;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit237_1[i][0] ][ unit237_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit237_1[i][2] ][ unit237_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit237_1[i][4] ][ unit237_1[i][5] ] >0);
		X_contra = ( LargeX[237][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit237_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[237][0]=0; L[237][1]=1;}
			satisfiable[237][1]=satisfiable[237][1] & ((x[237] ^ 1) | (x[ unit237_1[i][0] ] ^ unit237_1[i][1]) |(x[ unit237_1[i][2] ] ^ unit237_1[i][3]));
			}
		if(X_contra>0) L[237][1]=2;
		}
	//Check all rules of unit[238][0]
	L[238][0] = LargeX[238][1]>0 ? 1 : 0;
	satisfiable[238][0]=1; 
	for(int i=0;i<80;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit238_0[i][0] ][ unit238_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit238_0[i][2] ][ unit238_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit238_0[i][4] ][ unit238_0[i][5] ] >0);
		X_contra = ( LargeX[238][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit238_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[238][1]=0; L[238][0]=1;}
			satisfiable[238][0]=satisfiable[238][0] & ((x[238] ^ 0) | (x[ unit238_0[i][0] ] ^ unit238_0[i][1]) |(x[ unit238_0[i][2] ] ^ unit238_0[i][3]));
			}
		if(X_contra>0) L[238][0]=2;
		}
	//Check all rules of unit[238][1]
	L[238][1] = LargeX[238][0]>0 ? 1 : 0;
	satisfiable[238][1]=1; 
	for(int i=0;i<126;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit238_1[i][0] ][ unit238_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit238_1[i][2] ][ unit238_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit238_1[i][4] ][ unit238_1[i][5] ] >0);
		X_contra = ( LargeX[238][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit238_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[238][0]=0; L[238][1]=1;}
			satisfiable[238][1]=satisfiable[238][1] & ((x[238] ^ 1) | (x[ unit238_1[i][0] ] ^ unit238_1[i][1]) |(x[ unit238_1[i][2] ] ^ unit238_1[i][3]));
			}
		if(X_contra>0) L[238][1]=2;
		}
	//Check all rules of unit[239][0]
	L[239][0] = LargeX[239][1]>0 ? 1 : 0;
	satisfiable[239][0]=1; 
	for(int i=0;i<60;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit239_0[i][0] ][ unit239_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit239_0[i][2] ][ unit239_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit239_0[i][4] ][ unit239_0[i][5] ] >0);
		X_contra = ( LargeX[239][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit239_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[239][1]=0; L[239][0]=1;}
			satisfiable[239][0]=satisfiable[239][0] & ((x[239] ^ 0) | (x[ unit239_0[i][0] ] ^ unit239_0[i][1]) |(x[ unit239_0[i][2] ] ^ unit239_0[i][3]));
			}
		if(X_contra>0) L[239][0]=2;
		}
	//Check all rules of unit[239][1]
	L[239][1] = LargeX[239][0]>0 ? 1 : 0;
	satisfiable[239][1]=1; 
	for(int i=0;i<102;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit239_1[i][0] ][ unit239_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit239_1[i][2] ][ unit239_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit239_1[i][4] ][ unit239_1[i][5] ] >0);
		X_contra = ( LargeX[239][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit239_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[239][0]=0; L[239][1]=1;}
			satisfiable[239][1]=satisfiable[239][1] & ((x[239] ^ 1) | (x[ unit239_1[i][0] ] ^ unit239_1[i][1]) |(x[ unit239_1[i][2] ] ^ unit239_1[i][3]));
			}
		if(X_contra>0) L[239][1]=2;
		}
	//Check all rules of unit[240][0]
	L[240][0] = LargeX[240][1]>0 ? 1 : 0;
	satisfiable[240][0]=1; 
	for(int i=0;i<65;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit240_0[i][0] ][ unit240_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit240_0[i][2] ][ unit240_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit240_0[i][4] ][ unit240_0[i][5] ] >0);
		X_contra = ( LargeX[240][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit240_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[240][1]=0; L[240][0]=1;}
			satisfiable[240][0]=satisfiable[240][0] & ((x[240] ^ 0) | (x[ unit240_0[i][0] ] ^ unit240_0[i][1]) |(x[ unit240_0[i][2] ] ^ unit240_0[i][3]));
			}
		if(X_contra>0) L[240][0]=2;
		}
	//Check all rules of unit[240][1]
	L[240][1] = LargeX[240][0]>0 ? 1 : 0;
	satisfiable[240][1]=1; 
	for(int i=0;i<80;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit240_1[i][0] ][ unit240_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit240_1[i][2] ][ unit240_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit240_1[i][4] ][ unit240_1[i][5] ] >0);
		X_contra = ( LargeX[240][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit240_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[240][0]=0; L[240][1]=1;}
			satisfiable[240][1]=satisfiable[240][1] & ((x[240] ^ 1) | (x[ unit240_1[i][0] ] ^ unit240_1[i][1]) |(x[ unit240_1[i][2] ] ^ unit240_1[i][3]));
			}
		if(X_contra>0) L[240][1]=2;
		}
	//Check all rules of unit[241][0]
	L[241][0] = LargeX[241][1]>0 ? 1 : 0;
	satisfiable[241][0]=1; 
	for(int i=0;i<75;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit241_0[i][0] ][ unit241_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit241_0[i][2] ][ unit241_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit241_0[i][4] ][ unit241_0[i][5] ] >0);
		X_contra = ( LargeX[241][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit241_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[241][1]=0; L[241][0]=1;}
			satisfiable[241][0]=satisfiable[241][0] & ((x[241] ^ 0) | (x[ unit241_0[i][0] ] ^ unit241_0[i][1]) |(x[ unit241_0[i][2] ] ^ unit241_0[i][3]));
			}
		if(X_contra>0) L[241][0]=2;
		}
	//Check all rules of unit[241][1]
	L[241][1] = LargeX[241][0]>0 ? 1 : 0;
	satisfiable[241][1]=1; 
	for(int i=0;i<182;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit241_1[i][0] ][ unit241_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit241_1[i][2] ][ unit241_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit241_1[i][4] ][ unit241_1[i][5] ] >0);
		X_contra = ( LargeX[241][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit241_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[241][0]=0; L[241][1]=1;}
			satisfiable[241][1]=satisfiable[241][1] & ((x[241] ^ 1) | (x[ unit241_1[i][0] ] ^ unit241_1[i][1]) |(x[ unit241_1[i][2] ] ^ unit241_1[i][3]));
			}
		if(X_contra>0) L[241][1]=2;
		}
	//Check all rules of unit[242][0]
	L[242][0] = LargeX[242][1]>0 ? 1 : 0;
	satisfiable[242][0]=1; 
	for(int i=0;i<76;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit242_0[i][0] ][ unit242_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit242_0[i][2] ][ unit242_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit242_0[i][4] ][ unit242_0[i][5] ] >0);
		X_contra = ( LargeX[242][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit242_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[242][1]=0; L[242][0]=1;}
			satisfiable[242][0]=satisfiable[242][0] & ((x[242] ^ 0) | (x[ unit242_0[i][0] ] ^ unit242_0[i][1]) |(x[ unit242_0[i][2] ] ^ unit242_0[i][3]));
			}
		if(X_contra>0) L[242][0]=2;
		}
	//Check all rules of unit[242][1]
	L[242][1] = LargeX[242][0]>0 ? 1 : 0;
	satisfiable[242][1]=1; 
	for(int i=0;i<172;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit242_1[i][0] ][ unit242_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit242_1[i][2] ][ unit242_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit242_1[i][4] ][ unit242_1[i][5] ] >0);
		X_contra = ( LargeX[242][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit242_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[242][0]=0; L[242][1]=1;}
			satisfiable[242][1]=satisfiable[242][1] & ((x[242] ^ 1) | (x[ unit242_1[i][0] ] ^ unit242_1[i][1]) |(x[ unit242_1[i][2] ] ^ unit242_1[i][3]));
			}
		if(X_contra>0) L[242][1]=2;
		}
	//Check all rules of unit[243][0]
	L[243][0] = LargeX[243][1]>0 ? 1 : 0;
	satisfiable[243][0]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit243_0[i][0] ][ unit243_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit243_0[i][2] ][ unit243_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit243_0[i][4] ][ unit243_0[i][5] ] >0);
		X_contra = ( LargeX[243][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit243_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[243][1]=0; L[243][0]=1;}
			satisfiable[243][0]=satisfiable[243][0] & ((x[243] ^ 0) | (x[ unit243_0[i][0] ] ^ unit243_0[i][1]) |(x[ unit243_0[i][2] ] ^ unit243_0[i][3]));
			}
		if(X_contra>0) L[243][0]=2;
		}
	//Check all rules of unit[243][1]
	L[243][1] = LargeX[243][0]>0 ? 1 : 0;
	satisfiable[243][1]=1; 
	for(int i=0;i<182;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit243_1[i][0] ][ unit243_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit243_1[i][2] ][ unit243_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit243_1[i][4] ][ unit243_1[i][5] ] >0);
		X_contra = ( LargeX[243][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit243_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[243][0]=0; L[243][1]=1;}
			satisfiable[243][1]=satisfiable[243][1] & ((x[243] ^ 1) | (x[ unit243_1[i][0] ] ^ unit243_1[i][1]) |(x[ unit243_1[i][2] ] ^ unit243_1[i][3]));
			}
		if(X_contra>0) L[243][1]=2;
		}
	//Check all rules of unit[244][0]
	L[244][0] = LargeX[244][1]>0 ? 1 : 0;
	satisfiable[244][0]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit244_0[i][0] ][ unit244_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit244_0[i][2] ][ unit244_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit244_0[i][4] ][ unit244_0[i][5] ] >0);
		X_contra = ( LargeX[244][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit244_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[244][1]=0; L[244][0]=1;}
			satisfiable[244][0]=satisfiable[244][0] & ((x[244] ^ 0) | (x[ unit244_0[i][0] ] ^ unit244_0[i][1]) |(x[ unit244_0[i][2] ] ^ unit244_0[i][3]));
			}
		if(X_contra>0) L[244][0]=2;
		}
	//Check all rules of unit[244][1]
	L[244][1] = LargeX[244][0]>0 ? 1 : 0;
	satisfiable[244][1]=1; 
	for(int i=0;i<179;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit244_1[i][0] ][ unit244_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit244_1[i][2] ][ unit244_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit244_1[i][4] ][ unit244_1[i][5] ] >0);
		X_contra = ( LargeX[244][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit244_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[244][0]=0; L[244][1]=1;}
			satisfiable[244][1]=satisfiable[244][1] & ((x[244] ^ 1) | (x[ unit244_1[i][0] ] ^ unit244_1[i][1]) |(x[ unit244_1[i][2] ] ^ unit244_1[i][3]));
			}
		if(X_contra>0) L[244][1]=2;
		}
	//Check all rules of unit[245][0]
	L[245][0] = LargeX[245][1]>0 ? 1 : 0;
	satisfiable[245][0]=1; 
	for(int i=0;i<70;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit245_0[i][0] ][ unit245_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit245_0[i][2] ][ unit245_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit245_0[i][4] ][ unit245_0[i][5] ] >0);
		X_contra = ( LargeX[245][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit245_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[245][1]=0; L[245][0]=1;}
			satisfiable[245][0]=satisfiable[245][0] & ((x[245] ^ 0) | (x[ unit245_0[i][0] ] ^ unit245_0[i][1]) |(x[ unit245_0[i][2] ] ^ unit245_0[i][3]));
			}
		if(X_contra>0) L[245][0]=2;
		}
	//Check all rules of unit[245][1]
	L[245][1] = LargeX[245][0]>0 ? 1 : 0;
	satisfiable[245][1]=1; 
	for(int i=0;i<172;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit245_1[i][0] ][ unit245_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit245_1[i][2] ][ unit245_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit245_1[i][4] ][ unit245_1[i][5] ] >0);
		X_contra = ( LargeX[245][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit245_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[245][0]=0; L[245][1]=1;}
			satisfiable[245][1]=satisfiable[245][1] & ((x[245] ^ 1) | (x[ unit245_1[i][0] ] ^ unit245_1[i][1]) |(x[ unit245_1[i][2] ] ^ unit245_1[i][3]));
			}
		if(X_contra>0) L[245][1]=2;
		}
	//Check all rules of unit[246][0]
	L[246][0] = LargeX[246][1]>0 ? 1 : 0;
	satisfiable[246][0]=1; 
	for(int i=0;i<70;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit246_0[i][0] ][ unit246_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit246_0[i][2] ][ unit246_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit246_0[i][4] ][ unit246_0[i][5] ] >0);
		X_contra = ( LargeX[246][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit246_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[246][1]=0; L[246][0]=1;}
			satisfiable[246][0]=satisfiable[246][0] & ((x[246] ^ 0) | (x[ unit246_0[i][0] ] ^ unit246_0[i][1]) |(x[ unit246_0[i][2] ] ^ unit246_0[i][3]));
			}
		if(X_contra>0) L[246][0]=2;
		}
	//Check all rules of unit[246][1]
	L[246][1] = LargeX[246][0]>0 ? 1 : 0;
	satisfiable[246][1]=1; 
	for(int i=0;i<175;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit246_1[i][0] ][ unit246_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit246_1[i][2] ][ unit246_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit246_1[i][4] ][ unit246_1[i][5] ] >0);
		X_contra = ( LargeX[246][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit246_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[246][0]=0; L[246][1]=1;}
			satisfiable[246][1]=satisfiable[246][1] & ((x[246] ^ 1) | (x[ unit246_1[i][0] ] ^ unit246_1[i][1]) |(x[ unit246_1[i][2] ] ^ unit246_1[i][3]));
			}
		if(X_contra>0) L[246][1]=2;
		}
	//Check all rules of unit[247][0]
	L[247][0] = LargeX[247][1]>0 ? 1 : 0;
	satisfiable[247][0]=1; 
	for(int i=0;i<38;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit247_0[i][0] ][ unit247_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit247_0[i][2] ][ unit247_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit247_0[i][4] ][ unit247_0[i][5] ] >0);
		X_contra = ( LargeX[247][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit247_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[247][1]=0; L[247][0]=1;}
			satisfiable[247][0]=satisfiable[247][0] & ((x[247] ^ 0) | (x[ unit247_0[i][0] ] ^ unit247_0[i][1]) |(x[ unit247_0[i][2] ] ^ unit247_0[i][3]));
			}
		if(X_contra>0) L[247][0]=2;
		}
	//Check all rules of unit[247][1]
	L[247][1] = LargeX[247][0]>0 ? 1 : 0;
	satisfiable[247][1]=1; 
	for(int i=0;i<34;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit247_1[i][0] ][ unit247_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit247_1[i][2] ][ unit247_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit247_1[i][4] ][ unit247_1[i][5] ] >0);
		X_contra = ( LargeX[247][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit247_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[247][0]=0; L[247][1]=1;}
			satisfiable[247][1]=satisfiable[247][1] & ((x[247] ^ 1) | (x[ unit247_1[i][0] ] ^ unit247_1[i][1]) |(x[ unit247_1[i][2] ] ^ unit247_1[i][3]));
			}
		if(X_contra>0) L[247][1]=2;
		}
	//Check all rules of unit[248][0]
	L[248][0] = LargeX[248][1]>0 ? 1 : 0;
	satisfiable[248][0]=1; 
	for(int i=0;i<31;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit248_0[i][0] ][ unit248_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit248_0[i][2] ][ unit248_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit248_0[i][4] ][ unit248_0[i][5] ] >0);
		X_contra = ( LargeX[248][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit248_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[248][1]=0; L[248][0]=1;}
			satisfiable[248][0]=satisfiable[248][0] & ((x[248] ^ 0) | (x[ unit248_0[i][0] ] ^ unit248_0[i][1]) |(x[ unit248_0[i][2] ] ^ unit248_0[i][3]));
			}
		if(X_contra>0) L[248][0]=2;
		}
	//Check all rules of unit[248][1]
	L[248][1] = LargeX[248][0]>0 ? 1 : 0;
	satisfiable[248][1]=1; 
	for(int i=0;i<58;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit248_1[i][0] ][ unit248_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit248_1[i][2] ][ unit248_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit248_1[i][4] ][ unit248_1[i][5] ] >0);
		X_contra = ( LargeX[248][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit248_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[248][0]=0; L[248][1]=1;}
			satisfiable[248][1]=satisfiable[248][1] & ((x[248] ^ 1) | (x[ unit248_1[i][0] ] ^ unit248_1[i][1]) |(x[ unit248_1[i][2] ] ^ unit248_1[i][3]));
			}
		if(X_contra>0) L[248][1]=2;
		}
	//Check all rules of unit[249][0]
	L[249][0] = LargeX[249][1]>0 ? 1 : 0;
	satisfiable[249][0]=1; 
	for(int i=0;i<76;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit249_0[i][0] ][ unit249_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit249_0[i][2] ][ unit249_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit249_0[i][4] ][ unit249_0[i][5] ] >0);
		X_contra = ( LargeX[249][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit249_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[249][1]=0; L[249][0]=1;}
			satisfiable[249][0]=satisfiable[249][0] & ((x[249] ^ 0) | (x[ unit249_0[i][0] ] ^ unit249_0[i][1]) |(x[ unit249_0[i][2] ] ^ unit249_0[i][3]));
			}
		if(X_contra>0) L[249][0]=2;
		}
	//Check all rules of unit[249][1]
	L[249][1] = LargeX[249][0]>0 ? 1 : 0;
	satisfiable[249][1]=1; 
	for(int i=0;i<82;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit249_1[i][0] ][ unit249_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit249_1[i][2] ][ unit249_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit249_1[i][4] ][ unit249_1[i][5] ] >0);
		X_contra = ( LargeX[249][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit249_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[249][0]=0; L[249][1]=1;}
			satisfiable[249][1]=satisfiable[249][1] & ((x[249] ^ 1) | (x[ unit249_1[i][0] ] ^ unit249_1[i][1]) |(x[ unit249_1[i][2] ] ^ unit249_1[i][3]));
			}
		if(X_contra>0) L[249][1]=2;
		}
	//Check all rules of unit[250][0]
	L[250][0] = LargeX[250][1]>0 ? 1 : 0;
	satisfiable[250][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit250_0[i][0] ][ unit250_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit250_0[i][2] ][ unit250_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit250_0[i][4] ][ unit250_0[i][5] ] >0);
		X_contra = ( LargeX[250][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit250_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[250][1]=0; L[250][0]=1;}
			satisfiable[250][0]=satisfiable[250][0] & ((x[250] ^ 0) | (x[ unit250_0[i][0] ] ^ unit250_0[i][1]) |(x[ unit250_0[i][2] ] ^ unit250_0[i][3]));
			}
		if(X_contra>0) L[250][0]=2;
		}
	//Check all rules of unit[250][1]
	L[250][1] = LargeX[250][0]>0 ? 1 : 0;
	satisfiable[250][1]=1; 
	for(int i=0;i<109;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit250_1[i][0] ][ unit250_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit250_1[i][2] ][ unit250_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit250_1[i][4] ][ unit250_1[i][5] ] >0);
		X_contra = ( LargeX[250][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit250_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[250][0]=0; L[250][1]=1;}
			satisfiable[250][1]=satisfiable[250][1] & ((x[250] ^ 1) | (x[ unit250_1[i][0] ] ^ unit250_1[i][1]) |(x[ unit250_1[i][2] ] ^ unit250_1[i][3]));
			}
		if(X_contra>0) L[250][1]=2;
		}
	//Check all rules of unit[251][0]
	L[251][0] = LargeX[251][1]>0 ? 1 : 0;
	satisfiable[251][0]=1; 
	for(int i=0;i<128;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit251_0[i][0] ][ unit251_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit251_0[i][2] ][ unit251_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit251_0[i][4] ][ unit251_0[i][5] ] >0);
		X_contra = ( LargeX[251][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit251_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[251][1]=0; L[251][0]=1;}
			satisfiable[251][0]=satisfiable[251][0] & ((x[251] ^ 0) | (x[ unit251_0[i][0] ] ^ unit251_0[i][1]) |(x[ unit251_0[i][2] ] ^ unit251_0[i][3]));
			}
		if(X_contra>0) L[251][0]=2;
		}
	//Check all rules of unit[251][1]
	L[251][1] = LargeX[251][0]>0 ? 1 : 0;
	satisfiable[251][1]=1; 
	for(int i=0;i<129;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit251_1[i][0] ][ unit251_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit251_1[i][2] ][ unit251_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit251_1[i][4] ][ unit251_1[i][5] ] >0);
		X_contra = ( LargeX[251][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit251_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[251][0]=0; L[251][1]=1;}
			satisfiable[251][1]=satisfiable[251][1] & ((x[251] ^ 1) | (x[ unit251_1[i][0] ] ^ unit251_1[i][1]) |(x[ unit251_1[i][2] ] ^ unit251_1[i][3]));
			}
		if(X_contra>0) L[251][1]=2;
		}
	//Check all rules of unit[252][0]
	L[252][0] = LargeX[252][1]>0 ? 1 : 0;
	satisfiable[252][0]=1; 
	for(int i=0;i<113;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit252_0[i][0] ][ unit252_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit252_0[i][2] ][ unit252_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit252_0[i][4] ][ unit252_0[i][5] ] >0);
		X_contra = ( LargeX[252][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit252_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[252][1]=0; L[252][0]=1;}
			satisfiable[252][0]=satisfiable[252][0] & ((x[252] ^ 0) | (x[ unit252_0[i][0] ] ^ unit252_0[i][1]) |(x[ unit252_0[i][2] ] ^ unit252_0[i][3]));
			}
		if(X_contra>0) L[252][0]=2;
		}
	//Check all rules of unit[252][1]
	L[252][1] = LargeX[252][0]>0 ? 1 : 0;
	satisfiable[252][1]=1; 
	for(int i=0;i<156;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit252_1[i][0] ][ unit252_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit252_1[i][2] ][ unit252_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit252_1[i][4] ][ unit252_1[i][5] ] >0);
		X_contra = ( LargeX[252][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit252_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[252][0]=0; L[252][1]=1;}
			satisfiable[252][1]=satisfiable[252][1] & ((x[252] ^ 1) | (x[ unit252_1[i][0] ] ^ unit252_1[i][1]) |(x[ unit252_1[i][2] ] ^ unit252_1[i][3]));
			}
		if(X_contra>0) L[252][1]=2;
		}
	//Check all rules of unit[253][0]
	L[253][0] = LargeX[253][1]>0 ? 1 : 0;
	satisfiable[253][0]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit253_0[i][0] ][ unit253_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit253_0[i][2] ][ unit253_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit253_0[i][4] ][ unit253_0[i][5] ] >0);
		X_contra = ( LargeX[253][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit253_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[253][1]=0; L[253][0]=1;}
			satisfiable[253][0]=satisfiable[253][0] & ((x[253] ^ 0) | (x[ unit253_0[i][0] ] ^ unit253_0[i][1]) |(x[ unit253_0[i][2] ] ^ unit253_0[i][3]));
			}
		if(X_contra>0) L[253][0]=2;
		}
	//Check all rules of unit[253][1]
	L[253][1] = LargeX[253][0]>0 ? 1 : 0;
	satisfiable[253][1]=1; 
	for(int i=0;i<11;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit253_1[i][0] ][ unit253_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit253_1[i][2] ][ unit253_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit253_1[i][4] ][ unit253_1[i][5] ] >0);
		X_contra = ( LargeX[253][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit253_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[253][0]=0; L[253][1]=1;}
			satisfiable[253][1]=satisfiable[253][1] & ((x[253] ^ 1) | (x[ unit253_1[i][0] ] ^ unit253_1[i][1]) |(x[ unit253_1[i][2] ] ^ unit253_1[i][3]));
			}
		if(X_contra>0) L[253][1]=2;
		}
	//Check all rules of unit[254][0]
	L[254][0] = LargeX[254][1]>0 ? 1 : 0;
	satisfiable[254][0]=1; 
	for(int i=0;i<9;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit254_0[i][0] ][ unit254_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit254_0[i][2] ][ unit254_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit254_0[i][4] ][ unit254_0[i][5] ] >0);
		X_contra = ( LargeX[254][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit254_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[254][1]=0; L[254][0]=1;}
			satisfiable[254][0]=satisfiable[254][0] & ((x[254] ^ 0) | (x[ unit254_0[i][0] ] ^ unit254_0[i][1]) |(x[ unit254_0[i][2] ] ^ unit254_0[i][3]));
			}
		if(X_contra>0) L[254][0]=2;
		}
	//Check all rules of unit[254][1]
	L[254][1] = LargeX[254][0]>0 ? 1 : 0;
	satisfiable[254][1]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit254_1[i][0] ][ unit254_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit254_1[i][2] ][ unit254_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit254_1[i][4] ][ unit254_1[i][5] ] >0);
		X_contra = ( LargeX[254][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit254_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[254][0]=0; L[254][1]=1;}
			satisfiable[254][1]=satisfiable[254][1] & ((x[254] ^ 1) | (x[ unit254_1[i][0] ] ^ unit254_1[i][1]) |(x[ unit254_1[i][2] ] ^ unit254_1[i][3]));
			}
		if(X_contra>0) L[254][1]=2;
		}
	//Check all rules of unit[265][0]
	L[265][0] = LargeX[265][1]>0 ? 1 : 0;
	satisfiable[265][0]=1; 
	for(int i=0;i<41;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit265_0[i][0] ][ unit265_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit265_0[i][2] ][ unit265_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit265_0[i][4] ][ unit265_0[i][5] ] >0);
		X_contra = ( LargeX[265][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit265_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[265][1]=0; L[265][0]=1;}
			satisfiable[265][0]=satisfiable[265][0] & ((x[265] ^ 0) | (x[ unit265_0[i][0] ] ^ unit265_0[i][1]) |(x[ unit265_0[i][2] ] ^ unit265_0[i][3]));
			}
		if(X_contra>0) L[265][0]=2;
		}
	//Check all rules of unit[265][1]
	L[265][1] = LargeX[265][0]>0 ? 1 : 0;
	satisfiable[265][1]=1; 
	for(int i=0;i<120;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit265_1[i][0] ][ unit265_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit265_1[i][2] ][ unit265_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit265_1[i][4] ][ unit265_1[i][5] ] >0);
		X_contra = ( LargeX[265][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit265_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[265][0]=0; L[265][1]=1;}
			satisfiable[265][1]=satisfiable[265][1] & ((x[265] ^ 1) | (x[ unit265_1[i][0] ] ^ unit265_1[i][1]) |(x[ unit265_1[i][2] ] ^ unit265_1[i][3]));
			}
		if(X_contra>0) L[265][1]=2;
		}
	//Check all rules of unit[266][0]
	L[266][0] = LargeX[266][1]>0 ? 1 : 0;
	satisfiable[266][0]=1; 
	for(int i=0;i<47;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit266_0[i][0] ][ unit266_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit266_0[i][2] ][ unit266_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit266_0[i][4] ][ unit266_0[i][5] ] >0);
		X_contra = ( LargeX[266][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit266_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[266][1]=0; L[266][0]=1;}
			satisfiable[266][0]=satisfiable[266][0] & ((x[266] ^ 0) | (x[ unit266_0[i][0] ] ^ unit266_0[i][1]) |(x[ unit266_0[i][2] ] ^ unit266_0[i][3]));
			}
		if(X_contra>0) L[266][0]=2;
		}
	//Check all rules of unit[266][1]
	L[266][1] = LargeX[266][0]>0 ? 1 : 0;
	satisfiable[266][1]=1; 
	for(int i=0;i<97;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit266_1[i][0] ][ unit266_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit266_1[i][2] ][ unit266_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit266_1[i][4] ][ unit266_1[i][5] ] >0);
		X_contra = ( LargeX[266][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit266_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[266][0]=0; L[266][1]=1;}
			satisfiable[266][1]=satisfiable[266][1] & ((x[266] ^ 1) | (x[ unit266_1[i][0] ] ^ unit266_1[i][1]) |(x[ unit266_1[i][2] ] ^ unit266_1[i][3]));
			}
		if(X_contra>0) L[266][1]=2;
		}
	//Check all rules of unit[269][0]
	L[269][0] = LargeX[269][1]>0 ? 1 : 0;
	satisfiable[269][0]=1; 
	for(int i=0;i<58;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit269_0[i][0] ][ unit269_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit269_0[i][2] ][ unit269_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit269_0[i][4] ][ unit269_0[i][5] ] >0);
		X_contra = ( LargeX[269][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit269_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[269][1]=0; L[269][0]=1;}
			satisfiable[269][0]=satisfiable[269][0] & ((x[269] ^ 0) | (x[ unit269_0[i][0] ] ^ unit269_0[i][1]) |(x[ unit269_0[i][2] ] ^ unit269_0[i][3]));
			}
		if(X_contra>0) L[269][0]=2;
		}
	//Check all rules of unit[269][1]
	L[269][1] = LargeX[269][0]>0 ? 1 : 0;
	satisfiable[269][1]=1; 
	for(int i=0;i<50;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit269_1[i][0] ][ unit269_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit269_1[i][2] ][ unit269_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit269_1[i][4] ][ unit269_1[i][5] ] >0);
		X_contra = ( LargeX[269][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit269_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[269][0]=0; L[269][1]=1;}
			satisfiable[269][1]=satisfiable[269][1] & ((x[269] ^ 1) | (x[ unit269_1[i][0] ] ^ unit269_1[i][1]) |(x[ unit269_1[i][2] ] ^ unit269_1[i][3]));
			}
		if(X_contra>0) L[269][1]=2;
		}
	//Check all rules of unit[271][0]
	L[271][0] = LargeX[271][1]>0 ? 1 : 0;
	satisfiable[271][0]=1; 
	for(int i=0;i<85;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit271_0[i][0] ][ unit271_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit271_0[i][2] ][ unit271_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit271_0[i][4] ][ unit271_0[i][5] ] >0);
		X_contra = ( LargeX[271][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit271_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[271][1]=0; L[271][0]=1;}
			satisfiable[271][0]=satisfiable[271][0] & ((x[271] ^ 0) | (x[ unit271_0[i][0] ] ^ unit271_0[i][1]) |(x[ unit271_0[i][2] ] ^ unit271_0[i][3]));
			}
		if(X_contra>0) L[271][0]=2;
		}
	//Check all rules of unit[271][1]
	L[271][1] = LargeX[271][0]>0 ? 1 : 0;
	satisfiable[271][1]=1; 
	for(int i=0;i<154;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit271_1[i][0] ][ unit271_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit271_1[i][2] ][ unit271_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit271_1[i][4] ][ unit271_1[i][5] ] >0);
		X_contra = ( LargeX[271][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit271_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[271][0]=0; L[271][1]=1;}
			satisfiable[271][1]=satisfiable[271][1] & ((x[271] ^ 1) | (x[ unit271_1[i][0] ] ^ unit271_1[i][1]) |(x[ unit271_1[i][2] ] ^ unit271_1[i][3]));
			}
		if(X_contra>0) L[271][1]=2;
		}
	//Check all rules of unit[272][0]
	L[272][0] = LargeX[272][1]>0 ? 1 : 0;
	satisfiable[272][0]=1; 
	for(int i=0;i<87;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit272_0[i][0] ][ unit272_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit272_0[i][2] ][ unit272_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit272_0[i][4] ][ unit272_0[i][5] ] >0);
		X_contra = ( LargeX[272][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit272_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[272][1]=0; L[272][0]=1;}
			satisfiable[272][0]=satisfiable[272][0] & ((x[272] ^ 0) | (x[ unit272_0[i][0] ] ^ unit272_0[i][1]) |(x[ unit272_0[i][2] ] ^ unit272_0[i][3]));
			}
		if(X_contra>0) L[272][0]=2;
		}
	//Check all rules of unit[272][1]
	L[272][1] = LargeX[272][0]>0 ? 1 : 0;
	satisfiable[272][1]=1; 
	for(int i=0;i<150;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit272_1[i][0] ][ unit272_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit272_1[i][2] ][ unit272_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit272_1[i][4] ][ unit272_1[i][5] ] >0);
		X_contra = ( LargeX[272][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit272_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[272][0]=0; L[272][1]=1;}
			satisfiable[272][1]=satisfiable[272][1] & ((x[272] ^ 1) | (x[ unit272_1[i][0] ] ^ unit272_1[i][1]) |(x[ unit272_1[i][2] ] ^ unit272_1[i][3]));
			}
		if(X_contra>0) L[272][1]=2;
		}
	//Check all rules of unit[273][0]
	L[273][0] = LargeX[273][1]>0 ? 1 : 0;
	satisfiable[273][0]=1; 
	for(int i=0;i<80;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit273_0[i][0] ][ unit273_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit273_0[i][2] ][ unit273_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit273_0[i][4] ][ unit273_0[i][5] ] >0);
		X_contra = ( LargeX[273][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit273_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[273][1]=0; L[273][0]=1;}
			satisfiable[273][0]=satisfiable[273][0] & ((x[273] ^ 0) | (x[ unit273_0[i][0] ] ^ unit273_0[i][1]) |(x[ unit273_0[i][2] ] ^ unit273_0[i][3]));
			}
		if(X_contra>0) L[273][0]=2;
		}
	//Check all rules of unit[273][1]
	L[273][1] = LargeX[273][0]>0 ? 1 : 0;
	satisfiable[273][1]=1; 
	for(int i=0;i<155;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit273_1[i][0] ][ unit273_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit273_1[i][2] ][ unit273_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit273_1[i][4] ][ unit273_1[i][5] ] >0);
		X_contra = ( LargeX[273][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit273_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[273][0]=0; L[273][1]=1;}
			satisfiable[273][1]=satisfiable[273][1] & ((x[273] ^ 1) | (x[ unit273_1[i][0] ] ^ unit273_1[i][1]) |(x[ unit273_1[i][2] ] ^ unit273_1[i][3]));
			}
		if(X_contra>0) L[273][1]=2;
		}
	//Check all rules of unit[274][0]
	L[274][0] = LargeX[274][1]>0 ? 1 : 0;
	satisfiable[274][0]=1; 
	for(int i=0;i<86;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit274_0[i][0] ][ unit274_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit274_0[i][2] ][ unit274_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit274_0[i][4] ][ unit274_0[i][5] ] >0);
		X_contra = ( LargeX[274][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit274_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[274][1]=0; L[274][0]=1;}
			satisfiable[274][0]=satisfiable[274][0] & ((x[274] ^ 0) | (x[ unit274_0[i][0] ] ^ unit274_0[i][1]) |(x[ unit274_0[i][2] ] ^ unit274_0[i][3]));
			}
		if(X_contra>0) L[274][0]=2;
		}
	//Check all rules of unit[274][1]
	L[274][1] = LargeX[274][0]>0 ? 1 : 0;
	satisfiable[274][1]=1; 
	for(int i=0;i<128;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit274_1[i][0] ][ unit274_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit274_1[i][2] ][ unit274_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit274_1[i][4] ][ unit274_1[i][5] ] >0);
		X_contra = ( LargeX[274][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit274_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[274][0]=0; L[274][1]=1;}
			satisfiable[274][1]=satisfiable[274][1] & ((x[274] ^ 1) | (x[ unit274_1[i][0] ] ^ unit274_1[i][1]) |(x[ unit274_1[i][2] ] ^ unit274_1[i][3]));
			}
		if(X_contra>0) L[274][1]=2;
		}
	//Check all rules of unit[275][0]
	L[275][0] = LargeX[275][1]>0 ? 1 : 0;
	satisfiable[275][0]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit275_0[i][0] ][ unit275_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit275_0[i][2] ][ unit275_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit275_0[i][4] ][ unit275_0[i][5] ] >0);
		X_contra = ( LargeX[275][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit275_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[275][1]=0; L[275][0]=1;}
			satisfiable[275][0]=satisfiable[275][0] & ((x[275] ^ 0) | (x[ unit275_0[i][0] ] ^ unit275_0[i][1]) |(x[ unit275_0[i][2] ] ^ unit275_0[i][3]));
			}
		if(X_contra>0) L[275][0]=2;
		}
	//Check all rules of unit[275][1]
	L[275][1] = LargeX[275][0]>0 ? 1 : 0;
	satisfiable[275][1]=1; 
	for(int i=0;i<101;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit275_1[i][0] ][ unit275_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit275_1[i][2] ][ unit275_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit275_1[i][4] ][ unit275_1[i][5] ] >0);
		X_contra = ( LargeX[275][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit275_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[275][0]=0; L[275][1]=1;}
			satisfiable[275][1]=satisfiable[275][1] & ((x[275] ^ 1) | (x[ unit275_1[i][0] ] ^ unit275_1[i][1]) |(x[ unit275_1[i][2] ] ^ unit275_1[i][3]));
			}
		if(X_contra>0) L[275][1]=2;
		}
	//Check all rules of unit[276][0]
	L[276][0] = LargeX[276][1]>0 ? 1 : 0;
	satisfiable[276][0]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit276_0[i][0] ][ unit276_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit276_0[i][2] ][ unit276_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit276_0[i][4] ][ unit276_0[i][5] ] >0);
		X_contra = ( LargeX[276][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit276_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[276][1]=0; L[276][0]=1;}
			satisfiable[276][0]=satisfiable[276][0] & ((x[276] ^ 0) | (x[ unit276_0[i][0] ] ^ unit276_0[i][1]) |(x[ unit276_0[i][2] ] ^ unit276_0[i][3]));
			}
		if(X_contra>0) L[276][0]=2;
		}
	//Check all rules of unit[276][1]
	L[276][1] = LargeX[276][0]>0 ? 1 : 0;
	satisfiable[276][1]=1; 
	for(int i=0;i<100;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit276_1[i][0] ][ unit276_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit276_1[i][2] ][ unit276_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit276_1[i][4] ][ unit276_1[i][5] ] >0);
		X_contra = ( LargeX[276][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit276_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[276][0]=0; L[276][1]=1;}
			satisfiable[276][1]=satisfiable[276][1] & ((x[276] ^ 1) | (x[ unit276_1[i][0] ] ^ unit276_1[i][1]) |(x[ unit276_1[i][2] ] ^ unit276_1[i][3]));
			}
		if(X_contra>0) L[276][1]=2;
		}
	//Check all rules of unit[277][0]
	L[277][0] = LargeX[277][1]>0 ? 1 : 0;
	satisfiable[277][0]=1; 
	for(int i=0;i<86;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit277_0[i][0] ][ unit277_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit277_0[i][2] ][ unit277_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit277_0[i][4] ][ unit277_0[i][5] ] >0);
		X_contra = ( LargeX[277][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit277_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[277][1]=0; L[277][0]=1;}
			satisfiable[277][0]=satisfiable[277][0] & ((x[277] ^ 0) | (x[ unit277_0[i][0] ] ^ unit277_0[i][1]) |(x[ unit277_0[i][2] ] ^ unit277_0[i][3]));
			}
		if(X_contra>0) L[277][0]=2;
		}
	//Check all rules of unit[277][1]
	L[277][1] = LargeX[277][0]>0 ? 1 : 0;
	satisfiable[277][1]=1; 
	for(int i=0;i<175;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit277_1[i][0] ][ unit277_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit277_1[i][2] ][ unit277_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit277_1[i][4] ][ unit277_1[i][5] ] >0);
		X_contra = ( LargeX[277][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit277_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[277][0]=0; L[277][1]=1;}
			satisfiable[277][1]=satisfiable[277][1] & ((x[277] ^ 1) | (x[ unit277_1[i][0] ] ^ unit277_1[i][1]) |(x[ unit277_1[i][2] ] ^ unit277_1[i][3]));
			}
		if(X_contra>0) L[277][1]=2;
		}
	//Check all rules of unit[278][0]
	L[278][0] = LargeX[278][1]>0 ? 1 : 0;
	satisfiable[278][0]=1; 
	for(int i=0;i<87;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit278_0[i][0] ][ unit278_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit278_0[i][2] ][ unit278_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit278_0[i][4] ][ unit278_0[i][5] ] >0);
		X_contra = ( LargeX[278][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit278_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[278][1]=0; L[278][0]=1;}
			satisfiable[278][0]=satisfiable[278][0] & ((x[278] ^ 0) | (x[ unit278_0[i][0] ] ^ unit278_0[i][1]) |(x[ unit278_0[i][2] ] ^ unit278_0[i][3]));
			}
		if(X_contra>0) L[278][0]=2;
		}
	//Check all rules of unit[278][1]
	L[278][1] = LargeX[278][0]>0 ? 1 : 0;
	satisfiable[278][1]=1; 
	for(int i=0;i<176;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit278_1[i][0] ][ unit278_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit278_1[i][2] ][ unit278_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit278_1[i][4] ][ unit278_1[i][5] ] >0);
		X_contra = ( LargeX[278][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit278_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[278][0]=0; L[278][1]=1;}
			satisfiable[278][1]=satisfiable[278][1] & ((x[278] ^ 1) | (x[ unit278_1[i][0] ] ^ unit278_1[i][1]) |(x[ unit278_1[i][2] ] ^ unit278_1[i][3]));
			}
		if(X_contra>0) L[278][1]=2;
		}
	//Check all rules of unit[279][0]
	L[279][0] = LargeX[279][1]>0 ? 1 : 0;
	satisfiable[279][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit279_0[i][0] ][ unit279_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit279_0[i][2] ][ unit279_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit279_0[i][4] ][ unit279_0[i][5] ] >0);
		X_contra = ( LargeX[279][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit279_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[279][1]=0; L[279][0]=1;}
			satisfiable[279][0]=satisfiable[279][0] & ((x[279] ^ 0) | (x[ unit279_0[i][0] ] ^ unit279_0[i][1]) |(x[ unit279_0[i][2] ] ^ unit279_0[i][3]));
			}
		if(X_contra>0) L[279][0]=2;
		}
	//Check all rules of unit[279][1]
	L[279][1] = LargeX[279][0]>0 ? 1 : 0;
	satisfiable[279][1]=1; 
	for(int i=0;i<180;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit279_1[i][0] ][ unit279_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit279_1[i][2] ][ unit279_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit279_1[i][4] ][ unit279_1[i][5] ] >0);
		X_contra = ( LargeX[279][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit279_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[279][0]=0; L[279][1]=1;}
			satisfiable[279][1]=satisfiable[279][1] & ((x[279] ^ 1) | (x[ unit279_1[i][0] ] ^ unit279_1[i][1]) |(x[ unit279_1[i][2] ] ^ unit279_1[i][3]));
			}
		if(X_contra>0) L[279][1]=2;
		}
	//Check all rules of unit[280][0]
	L[280][0] = LargeX[280][1]>0 ? 1 : 0;
	satisfiable[280][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit280_0[i][0] ][ unit280_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit280_0[i][2] ][ unit280_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit280_0[i][4] ][ unit280_0[i][5] ] >0);
		X_contra = ( LargeX[280][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit280_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[280][1]=0; L[280][0]=1;}
			satisfiable[280][0]=satisfiable[280][0] & ((x[280] ^ 0) | (x[ unit280_0[i][0] ] ^ unit280_0[i][1]) |(x[ unit280_0[i][2] ] ^ unit280_0[i][3]));
			}
		if(X_contra>0) L[280][0]=2;
		}
	//Check all rules of unit[280][1]
	L[280][1] = LargeX[280][0]>0 ? 1 : 0;
	satisfiable[280][1]=1; 
	for(int i=0;i<179;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit280_1[i][0] ][ unit280_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit280_1[i][2] ][ unit280_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit280_1[i][4] ][ unit280_1[i][5] ] >0);
		X_contra = ( LargeX[280][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit280_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[280][0]=0; L[280][1]=1;}
			satisfiable[280][1]=satisfiable[280][1] & ((x[280] ^ 1) | (x[ unit280_1[i][0] ] ^ unit280_1[i][1]) |(x[ unit280_1[i][2] ] ^ unit280_1[i][3]));
			}
		if(X_contra>0) L[280][1]=2;
		}
	//Check all rules of unit[281][0]
	L[281][0] = LargeX[281][1]>0 ? 1 : 0;
	satisfiable[281][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit281_0[i][0] ][ unit281_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit281_0[i][2] ][ unit281_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit281_0[i][4] ][ unit281_0[i][5] ] >0);
		X_contra = ( LargeX[281][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit281_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[281][1]=0; L[281][0]=1;}
			satisfiable[281][0]=satisfiable[281][0] & ((x[281] ^ 0) | (x[ unit281_0[i][0] ] ^ unit281_0[i][1]) |(x[ unit281_0[i][2] ] ^ unit281_0[i][3]));
			}
		if(X_contra>0) L[281][0]=2;
		}
	//Check all rules of unit[281][1]
	L[281][1] = LargeX[281][0]>0 ? 1 : 0;
	satisfiable[281][1]=1; 
	for(int i=0;i<176;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit281_1[i][0] ][ unit281_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit281_1[i][2] ][ unit281_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit281_1[i][4] ][ unit281_1[i][5] ] >0);
		X_contra = ( LargeX[281][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit281_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[281][0]=0; L[281][1]=1;}
			satisfiable[281][1]=satisfiable[281][1] & ((x[281] ^ 1) | (x[ unit281_1[i][0] ] ^ unit281_1[i][1]) |(x[ unit281_1[i][2] ] ^ unit281_1[i][3]));
			}
		if(X_contra>0) L[281][1]=2;
		}
	//Check all rules of unit[282][0]
	L[282][0] = LargeX[282][1]>0 ? 1 : 0;
	satisfiable[282][0]=1; 
	for(int i=0;i<92;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit282_0[i][0] ][ unit282_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit282_0[i][2] ][ unit282_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit282_0[i][4] ][ unit282_0[i][5] ] >0);
		X_contra = ( LargeX[282][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit282_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[282][1]=0; L[282][0]=1;}
			satisfiable[282][0]=satisfiable[282][0] & ((x[282] ^ 0) | (x[ unit282_0[i][0] ] ^ unit282_0[i][1]) |(x[ unit282_0[i][2] ] ^ unit282_0[i][3]));
			}
		if(X_contra>0) L[282][0]=2;
		}
	//Check all rules of unit[282][1]
	L[282][1] = LargeX[282][0]>0 ? 1 : 0;
	satisfiable[282][1]=1; 
	for(int i=0;i<170;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit282_1[i][0] ][ unit282_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit282_1[i][2] ][ unit282_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit282_1[i][4] ][ unit282_1[i][5] ] >0);
		X_contra = ( LargeX[282][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit282_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[282][0]=0; L[282][1]=1;}
			satisfiable[282][1]=satisfiable[282][1] & ((x[282] ^ 1) | (x[ unit282_1[i][0] ] ^ unit282_1[i][1]) |(x[ unit282_1[i][2] ] ^ unit282_1[i][3]));
			}
		if(X_contra>0) L[282][1]=2;
		}
	//Check all rules of unit[283][0]
	L[283][0] = LargeX[283][1]>0 ? 1 : 0;
	satisfiable[283][0]=1; 
	for(int i=0;i<64;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit283_0[i][0] ][ unit283_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit283_0[i][2] ][ unit283_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit283_0[i][4] ][ unit283_0[i][5] ] >0);
		X_contra = ( LargeX[283][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit283_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[283][1]=0; L[283][0]=1;}
			satisfiable[283][0]=satisfiable[283][0] & ((x[283] ^ 0) | (x[ unit283_0[i][0] ] ^ unit283_0[i][1]) |(x[ unit283_0[i][2] ] ^ unit283_0[i][3]));
			}
		if(X_contra>0) L[283][0]=2;
		}
	//Check all rules of unit[283][1]
	L[283][1] = LargeX[283][0]>0 ? 1 : 0;
	satisfiable[283][1]=1; 
	for(int i=0;i<32;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit283_1[i][0] ][ unit283_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit283_1[i][2] ][ unit283_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit283_1[i][4] ][ unit283_1[i][5] ] >0);
		X_contra = ( LargeX[283][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit283_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[283][0]=0; L[283][1]=1;}
			satisfiable[283][1]=satisfiable[283][1] & ((x[283] ^ 1) | (x[ unit283_1[i][0] ] ^ unit283_1[i][1]) |(x[ unit283_1[i][2] ] ^ unit283_1[i][3]));
			}
		if(X_contra>0) L[283][1]=2;
		}
	//Check all rules of unit[284][0]
	L[284][0] = LargeX[284][1]>0 ? 1 : 0;
	satisfiable[284][0]=1; 
	for(int i=0;i<58;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit284_0[i][0] ][ unit284_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit284_0[i][2] ][ unit284_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit284_0[i][4] ][ unit284_0[i][5] ] >0);
		X_contra = ( LargeX[284][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit284_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[284][1]=0; L[284][0]=1;}
			satisfiable[284][0]=satisfiable[284][0] & ((x[284] ^ 0) | (x[ unit284_0[i][0] ] ^ unit284_0[i][1]) |(x[ unit284_0[i][2] ] ^ unit284_0[i][3]));
			}
		if(X_contra>0) L[284][0]=2;
		}
	//Check all rules of unit[284][1]
	L[284][1] = LargeX[284][0]>0 ? 1 : 0;
	satisfiable[284][1]=1; 
	for(int i=0;i<57;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit284_1[i][0] ][ unit284_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit284_1[i][2] ][ unit284_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit284_1[i][4] ][ unit284_1[i][5] ] >0);
		X_contra = ( LargeX[284][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit284_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[284][0]=0; L[284][1]=1;}
			satisfiable[284][1]=satisfiable[284][1] & ((x[284] ^ 1) | (x[ unit284_1[i][0] ] ^ unit284_1[i][1]) |(x[ unit284_1[i][2] ] ^ unit284_1[i][3]));
			}
		if(X_contra>0) L[284][1]=2;
		}
	//Check all rules of unit[285][0]
	L[285][0] = LargeX[285][1]>0 ? 1 : 0;
	satisfiable[285][0]=1; 
	for(int i=0;i<76;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit285_0[i][0] ][ unit285_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit285_0[i][2] ][ unit285_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit285_0[i][4] ][ unit285_0[i][5] ] >0);
		X_contra = ( LargeX[285][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit285_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[285][1]=0; L[285][0]=1;}
			satisfiable[285][0]=satisfiable[285][0] & ((x[285] ^ 0) | (x[ unit285_0[i][0] ] ^ unit285_0[i][1]) |(x[ unit285_0[i][2] ] ^ unit285_0[i][3]));
			}
		if(X_contra>0) L[285][0]=2;
		}
	//Check all rules of unit[285][1]
	L[285][1] = LargeX[285][0]>0 ? 1 : 0;
	satisfiable[285][1]=1; 
	for(int i=0;i<83;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit285_1[i][0] ][ unit285_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit285_1[i][2] ][ unit285_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit285_1[i][4] ][ unit285_1[i][5] ] >0);
		X_contra = ( LargeX[285][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit285_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[285][0]=0; L[285][1]=1;}
			satisfiable[285][1]=satisfiable[285][1] & ((x[285] ^ 1) | (x[ unit285_1[i][0] ] ^ unit285_1[i][1]) |(x[ unit285_1[i][2] ] ^ unit285_1[i][3]));
			}
		if(X_contra>0) L[285][1]=2;
		}
	//Check all rules of unit[286][0]
	L[286][0] = LargeX[286][1]>0 ? 1 : 0;
	satisfiable[286][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit286_0[i][0] ][ unit286_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit286_0[i][2] ][ unit286_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit286_0[i][4] ][ unit286_0[i][5] ] >0);
		X_contra = ( LargeX[286][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit286_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[286][1]=0; L[286][0]=1;}
			satisfiable[286][0]=satisfiable[286][0] & ((x[286] ^ 0) | (x[ unit286_0[i][0] ] ^ unit286_0[i][1]) |(x[ unit286_0[i][2] ] ^ unit286_0[i][3]));
			}
		if(X_contra>0) L[286][0]=2;
		}
	//Check all rules of unit[286][1]
	L[286][1] = LargeX[286][0]>0 ? 1 : 0;
	satisfiable[286][1]=1; 
	for(int i=0;i<107;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit286_1[i][0] ][ unit286_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit286_1[i][2] ][ unit286_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit286_1[i][4] ][ unit286_1[i][5] ] >0);
		X_contra = ( LargeX[286][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit286_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[286][0]=0; L[286][1]=1;}
			satisfiable[286][1]=satisfiable[286][1] & ((x[286] ^ 1) | (x[ unit286_1[i][0] ] ^ unit286_1[i][1]) |(x[ unit286_1[i][2] ] ^ unit286_1[i][3]));
			}
		if(X_contra>0) L[286][1]=2;
		}
	//Check all rules of unit[287][0]
	L[287][0] = LargeX[287][1]>0 ? 1 : 0;
	satisfiable[287][0]=1; 
	for(int i=0;i<131;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit287_0[i][0] ][ unit287_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit287_0[i][2] ][ unit287_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit287_0[i][4] ][ unit287_0[i][5] ] >0);
		X_contra = ( LargeX[287][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit287_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[287][1]=0; L[287][0]=1;}
			satisfiable[287][0]=satisfiable[287][0] & ((x[287] ^ 0) | (x[ unit287_0[i][0] ] ^ unit287_0[i][1]) |(x[ unit287_0[i][2] ] ^ unit287_0[i][3]));
			}
		if(X_contra>0) L[287][0]=2;
		}
	//Check all rules of unit[287][1]
	L[287][1] = LargeX[287][0]>0 ? 1 : 0;
	satisfiable[287][1]=1; 
	for(int i=0;i<127;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit287_1[i][0] ][ unit287_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit287_1[i][2] ][ unit287_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit287_1[i][4] ][ unit287_1[i][5] ] >0);
		X_contra = ( LargeX[287][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit287_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[287][0]=0; L[287][1]=1;}
			satisfiable[287][1]=satisfiable[287][1] & ((x[287] ^ 1) | (x[ unit287_1[i][0] ] ^ unit287_1[i][1]) |(x[ unit287_1[i][2] ] ^ unit287_1[i][3]));
			}
		if(X_contra>0) L[287][1]=2;
		}
	//Check all rules of unit[288][0]
	L[288][0] = LargeX[288][1]>0 ? 1 : 0;
	satisfiable[288][0]=1; 
	for(int i=0;i<116;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit288_0[i][0] ][ unit288_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit288_0[i][2] ][ unit288_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit288_0[i][4] ][ unit288_0[i][5] ] >0);
		X_contra = ( LargeX[288][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit288_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[288][1]=0; L[288][0]=1;}
			satisfiable[288][0]=satisfiable[288][0] & ((x[288] ^ 0) | (x[ unit288_0[i][0] ] ^ unit288_0[i][1]) |(x[ unit288_0[i][2] ] ^ unit288_0[i][3]));
			}
		if(X_contra>0) L[288][0]=2;
		}
	//Check all rules of unit[288][1]
	L[288][1] = LargeX[288][0]>0 ? 1 : 0;
	satisfiable[288][1]=1; 
	for(int i=0;i<155;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit288_1[i][0] ][ unit288_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit288_1[i][2] ][ unit288_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit288_1[i][4] ][ unit288_1[i][5] ] >0);
		X_contra = ( LargeX[288][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit288_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[288][0]=0; L[288][1]=1;}
			satisfiable[288][1]=satisfiable[288][1] & ((x[288] ^ 1) | (x[ unit288_1[i][0] ] ^ unit288_1[i][1]) |(x[ unit288_1[i][2] ] ^ unit288_1[i][3]));
			}
		if(X_contra>0) L[288][1]=2;
		}
	//Check all rules of unit[291][0]
	L[291][0] = LargeX[291][1]>0 ? 1 : 0;
	satisfiable[291][0]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit291_0[i][0] ][ unit291_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit291_0[i][2] ][ unit291_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit291_0[i][4] ][ unit291_0[i][5] ] >0);
		X_contra = ( LargeX[291][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit291_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[291][1]=0; L[291][0]=1;}
			satisfiable[291][0]=satisfiable[291][0] & ((x[291] ^ 0) | (x[ unit291_0[i][0] ] ^ unit291_0[i][1]) |(x[ unit291_0[i][2] ] ^ unit291_0[i][3]));
			}
		if(X_contra>0) L[291][0]=2;
		}
	//Check all rules of unit[291][1]
	L[291][1] = LargeX[291][0]>0 ? 1 : 0;
	satisfiable[291][1]=1; 
	for(int i=0;i<8;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit291_1[i][0] ][ unit291_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit291_1[i][2] ][ unit291_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit291_1[i][4] ][ unit291_1[i][5] ] >0);
		X_contra = ( LargeX[291][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit291_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[291][0]=0; L[291][1]=1;}
			satisfiable[291][1]=satisfiable[291][1] & ((x[291] ^ 1) | (x[ unit291_1[i][0] ] ^ unit291_1[i][1]) |(x[ unit291_1[i][2] ] ^ unit291_1[i][3]));
			}
		if(X_contra>0) L[291][1]=2;
		}
	//Check all rules of unit[292][0]
	L[292][0] = LargeX[292][1]>0 ? 1 : 0;
	satisfiable[292][0]=1; 
	for(int i=0;i<7;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit292_0[i][0] ][ unit292_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit292_0[i][2] ][ unit292_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit292_0[i][4] ][ unit292_0[i][5] ] >0);
		X_contra = ( LargeX[292][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit292_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[292][1]=0; L[292][0]=1;}
			satisfiable[292][0]=satisfiable[292][0] & ((x[292] ^ 0) | (x[ unit292_0[i][0] ] ^ unit292_0[i][1]) |(x[ unit292_0[i][2] ] ^ unit292_0[i][3]));
			}
		if(X_contra>0) L[292][0]=2;
		}
	//Check all rules of unit[292][1]
	L[292][1] = LargeX[292][0]>0 ? 1 : 0;
	satisfiable[292][1]=1; 
	for(int i=0;i<7;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit292_1[i][0] ][ unit292_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit292_1[i][2] ][ unit292_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit292_1[i][4] ][ unit292_1[i][5] ] >0);
		X_contra = ( LargeX[292][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit292_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[292][0]=0; L[292][1]=1;}
			satisfiable[292][1]=satisfiable[292][1] & ((x[292] ^ 1) | (x[ unit292_1[i][0] ] ^ unit292_1[i][1]) |(x[ unit292_1[i][2] ] ^ unit292_1[i][3]));
			}
		if(X_contra>0) L[292][1]=2;
		}
	//Check all rules of unit[303][0]
	L[303][0] = LargeX[303][1]>0 ? 1 : 0;
	satisfiable[303][0]=1; 
	for(int i=0;i<21;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit303_0[i][0] ][ unit303_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit303_0[i][2] ][ unit303_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit303_0[i][4] ][ unit303_0[i][5] ] >0);
		X_contra = ( LargeX[303][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit303_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[303][1]=0; L[303][0]=1;}
			satisfiable[303][0]=satisfiable[303][0] & ((x[303] ^ 0) | (x[ unit303_0[i][0] ] ^ unit303_0[i][1]) |(x[ unit303_0[i][2] ] ^ unit303_0[i][3]));
			}
		if(X_contra>0) L[303][0]=2;
		}
	//Check all rules of unit[303][1]
	L[303][1] = LargeX[303][0]>0 ? 1 : 0;
	satisfiable[303][1]=1; 
	for(int i=0;i<67;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit303_1[i][0] ][ unit303_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit303_1[i][2] ][ unit303_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit303_1[i][4] ][ unit303_1[i][5] ] >0);
		X_contra = ( LargeX[303][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit303_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[303][0]=0; L[303][1]=1;}
			satisfiable[303][1]=satisfiable[303][1] & ((x[303] ^ 1) | (x[ unit303_1[i][0] ] ^ unit303_1[i][1]) |(x[ unit303_1[i][2] ] ^ unit303_1[i][3]));
			}
		if(X_contra>0) L[303][1]=2;
		}
	//Check all rules of unit[304][0]
	L[304][0] = LargeX[304][1]>0 ? 1 : 0;
	satisfiable[304][0]=1; 
	for(int i=0;i<23;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit304_0[i][0] ][ unit304_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit304_0[i][2] ][ unit304_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit304_0[i][4] ][ unit304_0[i][5] ] >0);
		X_contra = ( LargeX[304][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit304_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[304][1]=0; L[304][0]=1;}
			satisfiable[304][0]=satisfiable[304][0] & ((x[304] ^ 0) | (x[ unit304_0[i][0] ] ^ unit304_0[i][1]) |(x[ unit304_0[i][2] ] ^ unit304_0[i][3]));
			}
		if(X_contra>0) L[304][0]=2;
		}
	//Check all rules of unit[304][1]
	L[304][1] = LargeX[304][0]>0 ? 1 : 0;
	satisfiable[304][1]=1; 
	for(int i=0;i<61;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit304_1[i][0] ][ unit304_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit304_1[i][2] ][ unit304_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit304_1[i][4] ][ unit304_1[i][5] ] >0);
		X_contra = ( LargeX[304][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit304_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[304][0]=0; L[304][1]=1;}
			satisfiable[304][1]=satisfiable[304][1] & ((x[304] ^ 1) | (x[ unit304_1[i][0] ] ^ unit304_1[i][1]) |(x[ unit304_1[i][2] ] ^ unit304_1[i][3]));
			}
		if(X_contra>0) L[304][1]=2;
		}
	//Check all rules of unit[307][0]
	L[307][0] = LargeX[307][1]>0 ? 1 : 0;
	satisfiable[307][0]=1; 
	for(int i=0;i<86;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit307_0[i][0] ][ unit307_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit307_0[i][2] ][ unit307_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit307_0[i][4] ][ unit307_0[i][5] ] >0);
		X_contra = ( LargeX[307][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit307_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[307][1]=0; L[307][0]=1;}
			satisfiable[307][0]=satisfiable[307][0] & ((x[307] ^ 0) | (x[ unit307_0[i][0] ] ^ unit307_0[i][1]) |(x[ unit307_0[i][2] ] ^ unit307_0[i][3]));
			}
		if(X_contra>0) L[307][0]=2;
		}
	//Check all rules of unit[307][1]
	L[307][1] = LargeX[307][0]>0 ? 1 : 0;
	satisfiable[307][1]=1; 
	for(int i=0;i<158;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit307_1[i][0] ][ unit307_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit307_1[i][2] ][ unit307_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit307_1[i][4] ][ unit307_1[i][5] ] >0);
		X_contra = ( LargeX[307][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit307_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[307][0]=0; L[307][1]=1;}
			satisfiable[307][1]=satisfiable[307][1] & ((x[307] ^ 1) | (x[ unit307_1[i][0] ] ^ unit307_1[i][1]) |(x[ unit307_1[i][2] ] ^ unit307_1[i][3]));
			}
		if(X_contra>0) L[307][1]=2;
		}
	//Check all rules of unit[308][0]
	L[308][0] = LargeX[308][1]>0 ? 1 : 0;
	satisfiable[308][0]=1; 
	for(int i=0;i<93;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit308_0[i][0] ][ unit308_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit308_0[i][2] ][ unit308_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit308_0[i][4] ][ unit308_0[i][5] ] >0);
		X_contra = ( LargeX[308][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit308_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[308][1]=0; L[308][0]=1;}
			satisfiable[308][0]=satisfiable[308][0] & ((x[308] ^ 0) | (x[ unit308_0[i][0] ] ^ unit308_0[i][1]) |(x[ unit308_0[i][2] ] ^ unit308_0[i][3]));
			}
		if(X_contra>0) L[308][0]=2;
		}
	//Check all rules of unit[308][1]
	L[308][1] = LargeX[308][0]>0 ? 1 : 0;
	satisfiable[308][1]=1; 
	for(int i=0;i<132;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit308_1[i][0] ][ unit308_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit308_1[i][2] ][ unit308_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit308_1[i][4] ][ unit308_1[i][5] ] >0);
		X_contra = ( LargeX[308][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit308_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[308][0]=0; L[308][1]=1;}
			satisfiable[308][1]=satisfiable[308][1] & ((x[308] ^ 1) | (x[ unit308_1[i][0] ] ^ unit308_1[i][1]) |(x[ unit308_1[i][2] ] ^ unit308_1[i][3]));
			}
		if(X_contra>0) L[308][1]=2;
		}
	//Check all rules of unit[309][0]
	L[309][0] = LargeX[309][1]>0 ? 1 : 0;
	satisfiable[309][0]=1; 
	for(int i=0;i<41;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit309_0[i][0] ][ unit309_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit309_0[i][2] ][ unit309_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit309_0[i][4] ][ unit309_0[i][5] ] >0);
		X_contra = ( LargeX[309][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit309_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[309][1]=0; L[309][0]=1;}
			satisfiable[309][0]=satisfiable[309][0] & ((x[309] ^ 0) | (x[ unit309_0[i][0] ] ^ unit309_0[i][1]) |(x[ unit309_0[i][2] ] ^ unit309_0[i][3]));
			}
		if(X_contra>0) L[309][0]=2;
		}
	//Check all rules of unit[309][1]
	L[309][1] = LargeX[309][0]>0 ? 1 : 0;
	satisfiable[309][1]=1; 
	for(int i=0;i<106;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit309_1[i][0] ][ unit309_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit309_1[i][2] ][ unit309_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit309_1[i][4] ][ unit309_1[i][5] ] >0);
		X_contra = ( LargeX[309][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit309_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[309][0]=0; L[309][1]=1;}
			satisfiable[309][1]=satisfiable[309][1] & ((x[309] ^ 1) | (x[ unit309_1[i][0] ] ^ unit309_1[i][1]) |(x[ unit309_1[i][2] ] ^ unit309_1[i][3]));
			}
		if(X_contra>0) L[309][1]=2;
		}
	//Check all rules of unit[310][0]
	L[310][0] = LargeX[310][1]>0 ? 1 : 0;
	satisfiable[310][0]=1; 
	for(int i=0;i<43;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit310_0[i][0] ][ unit310_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit310_0[i][2] ][ unit310_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit310_0[i][4] ][ unit310_0[i][5] ] >0);
		X_contra = ( LargeX[310][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit310_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[310][1]=0; L[310][0]=1;}
			satisfiable[310][0]=satisfiable[310][0] & ((x[310] ^ 0) | (x[ unit310_0[i][0] ] ^ unit310_0[i][1]) |(x[ unit310_0[i][2] ] ^ unit310_0[i][3]));
			}
		if(X_contra>0) L[310][0]=2;
		}
	//Check all rules of unit[310][1]
	L[310][1] = LargeX[310][0]>0 ? 1 : 0;
	satisfiable[310][1]=1; 
	for(int i=0;i<97;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit310_1[i][0] ][ unit310_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit310_1[i][2] ][ unit310_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit310_1[i][4] ][ unit310_1[i][5] ] >0);
		X_contra = ( LargeX[310][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit310_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[310][0]=0; L[310][1]=1;}
			satisfiable[310][1]=satisfiable[310][1] & ((x[310] ^ 1) | (x[ unit310_1[i][0] ] ^ unit310_1[i][1]) |(x[ unit310_1[i][2] ] ^ unit310_1[i][3]));
			}
		if(X_contra>0) L[310][1]=2;
		}
	//Check all rules of unit[311][0]
	L[311][0] = LargeX[311][1]>0 ? 1 : 0;
	satisfiable[311][0]=1; 
	for(int i=0;i<42;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit311_0[i][0] ][ unit311_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit311_0[i][2] ][ unit311_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit311_0[i][4] ][ unit311_0[i][5] ] >0);
		X_contra = ( LargeX[311][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit311_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[311][1]=0; L[311][0]=1;}
			satisfiable[311][0]=satisfiable[311][0] & ((x[311] ^ 0) | (x[ unit311_0[i][0] ] ^ unit311_0[i][1]) |(x[ unit311_0[i][2] ] ^ unit311_0[i][3]));
			}
		if(X_contra>0) L[311][0]=2;
		}
	//Check all rules of unit[311][1]
	L[311][1] = LargeX[311][0]>0 ? 1 : 0;
	satisfiable[311][1]=1; 
	for(int i=0;i<95;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit311_1[i][0] ][ unit311_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit311_1[i][2] ][ unit311_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit311_1[i][4] ][ unit311_1[i][5] ] >0);
		X_contra = ( LargeX[311][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit311_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[311][0]=0; L[311][1]=1;}
			satisfiable[311][1]=satisfiable[311][1] & ((x[311] ^ 1) | (x[ unit311_1[i][0] ] ^ unit311_1[i][1]) |(x[ unit311_1[i][2] ] ^ unit311_1[i][3]));
			}
		if(X_contra>0) L[311][1]=2;
		}
	//Check all rules of unit[312][0]
	L[312][0] = LargeX[312][1]>0 ? 1 : 0;
	satisfiable[312][0]=1; 
	for(int i=0;i<48;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit312_0[i][0] ][ unit312_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit312_0[i][2] ][ unit312_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit312_0[i][4] ][ unit312_0[i][5] ] >0);
		X_contra = ( LargeX[312][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit312_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[312][1]=0; L[312][0]=1;}
			satisfiable[312][0]=satisfiable[312][0] & ((x[312] ^ 0) | (x[ unit312_0[i][0] ] ^ unit312_0[i][1]) |(x[ unit312_0[i][2] ] ^ unit312_0[i][3]));
			}
		if(X_contra>0) L[312][0]=2;
		}
	//Check all rules of unit[312][1]
	L[312][1] = LargeX[312][0]>0 ? 1 : 0;
	satisfiable[312][1]=1; 
	for(int i=0;i<72;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit312_1[i][0] ][ unit312_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit312_1[i][2] ][ unit312_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit312_1[i][4] ][ unit312_1[i][5] ] >0);
		X_contra = ( LargeX[312][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit312_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[312][0]=0; L[312][1]=1;}
			satisfiable[312][1]=satisfiable[312][1] & ((x[312] ^ 1) | (x[ unit312_1[i][0] ] ^ unit312_1[i][1]) |(x[ unit312_1[i][2] ] ^ unit312_1[i][3]));
			}
		if(X_contra>0) L[312][1]=2;
		}
	//Check all rules of unit[313][0]
	L[313][0] = LargeX[313][1]>0 ? 1 : 0;
	satisfiable[313][0]=1; 
	for(int i=0;i<70;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit313_0[i][0] ][ unit313_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit313_0[i][2] ][ unit313_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit313_0[i][4] ][ unit313_0[i][5] ] >0);
		X_contra = ( LargeX[313][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit313_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[313][1]=0; L[313][0]=1;}
			satisfiable[313][0]=satisfiable[313][0] & ((x[313] ^ 0) | (x[ unit313_0[i][0] ] ^ unit313_0[i][1]) |(x[ unit313_0[i][2] ] ^ unit313_0[i][3]));
			}
		if(X_contra>0) L[313][0]=2;
		}
	//Check all rules of unit[313][1]
	L[313][1] = LargeX[313][0]>0 ? 1 : 0;
	satisfiable[313][1]=1; 
	for(int i=0;i<182;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit313_1[i][0] ][ unit313_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit313_1[i][2] ][ unit313_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit313_1[i][4] ][ unit313_1[i][5] ] >0);
		X_contra = ( LargeX[313][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit313_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[313][0]=0; L[313][1]=1;}
			satisfiable[313][1]=satisfiable[313][1] & ((x[313] ^ 1) | (x[ unit313_1[i][0] ] ^ unit313_1[i][1]) |(x[ unit313_1[i][2] ] ^ unit313_1[i][3]));
			}
		if(X_contra>0) L[313][1]=2;
		}
	//Check all rules of unit[314][0]
	L[314][0] = LargeX[314][1]>0 ? 1 : 0;
	satisfiable[314][0]=1; 
	for(int i=0;i<71;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit314_0[i][0] ][ unit314_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit314_0[i][2] ][ unit314_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit314_0[i][4] ][ unit314_0[i][5] ] >0);
		X_contra = ( LargeX[314][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit314_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[314][1]=0; L[314][0]=1;}
			satisfiable[314][0]=satisfiable[314][0] & ((x[314] ^ 0) | (x[ unit314_0[i][0] ] ^ unit314_0[i][1]) |(x[ unit314_0[i][2] ] ^ unit314_0[i][3]));
			}
		if(X_contra>0) L[314][0]=2;
		}
	//Check all rules of unit[314][1]
	L[314][1] = LargeX[314][0]>0 ? 1 : 0;
	satisfiable[314][1]=1; 
	for(int i=0;i<178;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit314_1[i][0] ][ unit314_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit314_1[i][2] ][ unit314_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit314_1[i][4] ][ unit314_1[i][5] ] >0);
		X_contra = ( LargeX[314][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit314_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[314][0]=0; L[314][1]=1;}
			satisfiable[314][1]=satisfiable[314][1] & ((x[314] ^ 1) | (x[ unit314_1[i][0] ] ^ unit314_1[i][1]) |(x[ unit314_1[i][2] ] ^ unit314_1[i][3]));
			}
		if(X_contra>0) L[314][1]=2;
		}
	//Check all rules of unit[315][0]
	L[315][0] = LargeX[315][1]>0 ? 1 : 0;
	satisfiable[315][0]=1; 
	for(int i=0;i<77;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit315_0[i][0] ][ unit315_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit315_0[i][2] ][ unit315_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit315_0[i][4] ][ unit315_0[i][5] ] >0);
		X_contra = ( LargeX[315][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit315_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[315][1]=0; L[315][0]=1;}
			satisfiable[315][0]=satisfiable[315][0] & ((x[315] ^ 0) | (x[ unit315_0[i][0] ] ^ unit315_0[i][1]) |(x[ unit315_0[i][2] ] ^ unit315_0[i][3]));
			}
		if(X_contra>0) L[315][0]=2;
		}
	//Check all rules of unit[315][1]
	L[315][1] = LargeX[315][0]>0 ? 1 : 0;
	satisfiable[315][1]=1; 
	for(int i=0;i<179;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit315_1[i][0] ][ unit315_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit315_1[i][2] ][ unit315_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit315_1[i][4] ][ unit315_1[i][5] ] >0);
		X_contra = ( LargeX[315][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit315_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[315][0]=0; L[315][1]=1;}
			satisfiable[315][1]=satisfiable[315][1] & ((x[315] ^ 1) | (x[ unit315_1[i][0] ] ^ unit315_1[i][1]) |(x[ unit315_1[i][2] ] ^ unit315_1[i][3]));
			}
		if(X_contra>0) L[315][1]=2;
		}
	//Check all rules of unit[316][0]
	L[316][0] = LargeX[316][1]>0 ? 1 : 0;
	satisfiable[316][0]=1; 
	for(int i=0;i<77;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit316_0[i][0] ][ unit316_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit316_0[i][2] ][ unit316_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit316_0[i][4] ][ unit316_0[i][5] ] >0);
		X_contra = ( LargeX[316][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit316_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[316][1]=0; L[316][0]=1;}
			satisfiable[316][0]=satisfiable[316][0] & ((x[316] ^ 0) | (x[ unit316_0[i][0] ] ^ unit316_0[i][1]) |(x[ unit316_0[i][2] ] ^ unit316_0[i][3]));
			}
		if(X_contra>0) L[316][0]=2;
		}
	//Check all rules of unit[316][1]
	L[316][1] = LargeX[316][0]>0 ? 1 : 0;
	satisfiable[316][1]=1; 
	for(int i=0;i<179;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit316_1[i][0] ][ unit316_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit316_1[i][2] ][ unit316_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit316_1[i][4] ][ unit316_1[i][5] ] >0);
		X_contra = ( LargeX[316][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit316_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[316][0]=0; L[316][1]=1;}
			satisfiable[316][1]=satisfiable[316][1] & ((x[316] ^ 1) | (x[ unit316_1[i][0] ] ^ unit316_1[i][1]) |(x[ unit316_1[i][2] ] ^ unit316_1[i][3]));
			}
		if(X_contra>0) L[316][1]=2;
		}
	//Check all rules of unit[318][0]
	L[318][0] = LargeX[318][1]>0 ? 1 : 0;
	satisfiable[318][0]=1; 
	for(int i=0;i<83;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit318_0[i][0] ][ unit318_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit318_0[i][2] ][ unit318_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit318_0[i][4] ][ unit318_0[i][5] ] >0);
		X_contra = ( LargeX[318][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit318_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[318][1]=0; L[318][0]=1;}
			satisfiable[318][0]=satisfiable[318][0] & ((x[318] ^ 0) | (x[ unit318_0[i][0] ] ^ unit318_0[i][1]) |(x[ unit318_0[i][2] ] ^ unit318_0[i][3]));
			}
		if(X_contra>0) L[318][0]=2;
		}
	//Check all rules of unit[318][1]
	L[318][1] = LargeX[318][0]>0 ? 1 : 0;
	satisfiable[318][1]=1; 
	for(int i=0;i<174;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit318_1[i][0] ][ unit318_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit318_1[i][2] ][ unit318_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit318_1[i][4] ][ unit318_1[i][5] ] >0);
		X_contra = ( LargeX[318][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit318_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[318][0]=0; L[318][1]=1;}
			satisfiable[318][1]=satisfiable[318][1] & ((x[318] ^ 1) | (x[ unit318_1[i][0] ] ^ unit318_1[i][1]) |(x[ unit318_1[i][2] ] ^ unit318_1[i][3]));
			}
		if(X_contra>0) L[318][1]=2;
		}
	//Check all rules of unit[319][0]
	L[319][0] = LargeX[319][1]>0 ? 1 : 0;
	satisfiable[319][0]=1; 
	for(int i=0;i<62;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit319_0[i][0] ][ unit319_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit319_0[i][2] ][ unit319_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit319_0[i][4] ][ unit319_0[i][5] ] >0);
		X_contra = ( LargeX[319][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit319_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[319][1]=0; L[319][0]=1;}
			satisfiable[319][0]=satisfiable[319][0] & ((x[319] ^ 0) | (x[ unit319_0[i][0] ] ^ unit319_0[i][1]) |(x[ unit319_0[i][2] ] ^ unit319_0[i][3]));
			}
		if(X_contra>0) L[319][0]=2;
		}
	//Check all rules of unit[319][1]
	L[319][1] = LargeX[319][0]>0 ? 1 : 0;
	satisfiable[319][1]=1; 
	for(int i=0;i<33;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit319_1[i][0] ][ unit319_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit319_1[i][2] ][ unit319_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit319_1[i][4] ][ unit319_1[i][5] ] >0);
		X_contra = ( LargeX[319][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit319_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[319][0]=0; L[319][1]=1;}
			satisfiable[319][1]=satisfiable[319][1] & ((x[319] ^ 1) | (x[ unit319_1[i][0] ] ^ unit319_1[i][1]) |(x[ unit319_1[i][2] ] ^ unit319_1[i][3]));
			}
		if(X_contra>0) L[319][1]=2;
		}
	//Check all rules of unit[320][0]
	L[320][0] = LargeX[320][1]>0 ? 1 : 0;
	satisfiable[320][0]=1; 
	for(int i=0;i<56;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit320_0[i][0] ][ unit320_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit320_0[i][2] ][ unit320_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit320_0[i][4] ][ unit320_0[i][5] ] >0);
		X_contra = ( LargeX[320][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit320_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[320][1]=0; L[320][0]=1;}
			satisfiable[320][0]=satisfiable[320][0] & ((x[320] ^ 0) | (x[ unit320_0[i][0] ] ^ unit320_0[i][1]) |(x[ unit320_0[i][2] ] ^ unit320_0[i][3]));
			}
		if(X_contra>0) L[320][0]=2;
		}
	//Check all rules of unit[320][1]
	L[320][1] = LargeX[320][0]>0 ? 1 : 0;
	satisfiable[320][1]=1; 
	for(int i=0;i<58;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit320_1[i][0] ][ unit320_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit320_1[i][2] ][ unit320_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit320_1[i][4] ][ unit320_1[i][5] ] >0);
		X_contra = ( LargeX[320][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit320_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[320][0]=0; L[320][1]=1;}
			satisfiable[320][1]=satisfiable[320][1] & ((x[320] ^ 1) | (x[ unit320_1[i][0] ] ^ unit320_1[i][1]) |(x[ unit320_1[i][2] ] ^ unit320_1[i][3]));
			}
		if(X_contra>0) L[320][1]=2;
		}
	//Check all rules of unit[321][0]
	L[321][0] = LargeX[321][1]>0 ? 1 : 0;
	satisfiable[321][0]=1; 
	for(int i=0;i<35;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit321_0[i][0] ][ unit321_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit321_0[i][2] ][ unit321_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit321_0[i][4] ][ unit321_0[i][5] ] >0);
		X_contra = ( LargeX[321][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit321_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[321][1]=0; L[321][0]=1;}
			satisfiable[321][0]=satisfiable[321][0] & ((x[321] ^ 0) | (x[ unit321_0[i][0] ] ^ unit321_0[i][1]) |(x[ unit321_0[i][2] ] ^ unit321_0[i][3]));
			}
		if(X_contra>0) L[321][0]=2;
		}
	//Check all rules of unit[321][1]
	L[321][1] = LargeX[321][0]>0 ? 1 : 0;
	satisfiable[321][1]=1; 
	for(int i=0;i<85;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit321_1[i][0] ][ unit321_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit321_1[i][2] ][ unit321_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit321_1[i][4] ][ unit321_1[i][5] ] >0);
		X_contra = ( LargeX[321][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit321_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[321][0]=0; L[321][1]=1;}
			satisfiable[321][1]=satisfiable[321][1] & ((x[321] ^ 1) | (x[ unit321_1[i][0] ] ^ unit321_1[i][1]) |(x[ unit321_1[i][2] ] ^ unit321_1[i][3]));
			}
		if(X_contra>0) L[321][1]=2;
		}
	//Check all rules of unit[322][0]
	L[322][0] = LargeX[322][1]>0 ? 1 : 0;
	satisfiable[322][0]=1; 
	for(int i=0;i<29;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit322_0[i][0] ][ unit322_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit322_0[i][2] ][ unit322_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit322_0[i][4] ][ unit322_0[i][5] ] >0);
		X_contra = ( LargeX[322][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit322_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[322][1]=0; L[322][0]=1;}
			satisfiable[322][0]=satisfiable[322][0] & ((x[322] ^ 0) | (x[ unit322_0[i][0] ] ^ unit322_0[i][1]) |(x[ unit322_0[i][2] ] ^ unit322_0[i][3]));
			}
		if(X_contra>0) L[322][0]=2;
		}
	//Check all rules of unit[322][1]
	L[322][1] = LargeX[322][0]>0 ? 1 : 0;
	satisfiable[322][1]=1; 
	for(int i=0;i<109;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit322_1[i][0] ][ unit322_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit322_1[i][2] ][ unit322_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit322_1[i][4] ][ unit322_1[i][5] ] >0);
		X_contra = ( LargeX[322][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit322_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[322][0]=0; L[322][1]=1;}
			satisfiable[322][1]=satisfiable[322][1] & ((x[322] ^ 1) | (x[ unit322_1[i][0] ] ^ unit322_1[i][1]) |(x[ unit322_1[i][2] ] ^ unit322_1[i][3]));
			}
		if(X_contra>0) L[322][1]=2;
		}
	//Check all rules of unit[323][0]
	L[323][0] = LargeX[323][1]>0 ? 1 : 0;
	satisfiable[323][0]=1; 
	for(int i=0;i<88;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit323_0[i][0] ][ unit323_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit323_0[i][2] ][ unit323_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit323_0[i][4] ][ unit323_0[i][5] ] >0);
		X_contra = ( LargeX[323][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit323_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[323][1]=0; L[323][0]=1;}
			satisfiable[323][0]=satisfiable[323][0] & ((x[323] ^ 0) | (x[ unit323_0[i][0] ] ^ unit323_0[i][1]) |(x[ unit323_0[i][2] ] ^ unit323_0[i][3]));
			}
		if(X_contra>0) L[323][0]=2;
		}
	//Check all rules of unit[323][1]
	L[323][1] = LargeX[323][0]>0 ? 1 : 0;
	satisfiable[323][1]=1; 
	for(int i=0;i<128;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit323_1[i][0] ][ unit323_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit323_1[i][2] ][ unit323_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit323_1[i][4] ][ unit323_1[i][5] ] >0);
		X_contra = ( LargeX[323][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit323_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[323][0]=0; L[323][1]=1;}
			satisfiable[323][1]=satisfiable[323][1] & ((x[323] ^ 1) | (x[ unit323_1[i][0] ] ^ unit323_1[i][1]) |(x[ unit323_1[i][2] ] ^ unit323_1[i][3]));
			}
		if(X_contra>0) L[323][1]=2;
		}
	//Check all rules of unit[324][0]
	L[324][0] = LargeX[324][1]>0 ? 1 : 0;
	satisfiable[324][0]=1; 
	for(int i=0;i<74;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit324_0[i][0] ][ unit324_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit324_0[i][2] ][ unit324_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit324_0[i][4] ][ unit324_0[i][5] ] >0);
		X_contra = ( LargeX[324][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit324_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[324][1]=0; L[324][0]=1;}
			satisfiable[324][0]=satisfiable[324][0] & ((x[324] ^ 0) | (x[ unit324_0[i][0] ] ^ unit324_0[i][1]) |(x[ unit324_0[i][2] ] ^ unit324_0[i][3]));
			}
		if(X_contra>0) L[324][0]=2;
		}
	//Check all rules of unit[324][1]
	L[324][1] = LargeX[324][0]>0 ? 1 : 0;
	satisfiable[324][1]=1; 
	for(int i=0;i<155;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit324_1[i][0] ][ unit324_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit324_1[i][2] ][ unit324_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit324_1[i][4] ][ unit324_1[i][5] ] >0);
		X_contra = ( LargeX[324][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit324_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[324][0]=0; L[324][1]=1;}
			satisfiable[324][1]=satisfiable[324][1] & ((x[324] ^ 1) | (x[ unit324_1[i][0] ] ^ unit324_1[i][1]) |(x[ unit324_1[i][2] ] ^ unit324_1[i][3]));
			}
		if(X_contra>0) L[324][1]=2;
		}
	//Check all rules of unit[325][0]
	L[325][0] = LargeX[325][1]>0 ? 1 : 0;
	satisfiable[325][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit325_0[i][0] ][ unit325_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit325_0[i][2] ][ unit325_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit325_0[i][4] ][ unit325_0[i][5] ] >0);
		X_contra = ( LargeX[325][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit325_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[325][1]=0; L[325][0]=1;}
			satisfiable[325][0]=satisfiable[325][0] & ((x[325] ^ 0) | (x[ unit325_0[i][0] ] ^ unit325_0[i][1]) |(x[ unit325_0[i][2] ] ^ unit325_0[i][3]));
			}
		if(X_contra>0) L[325][0]=2;
		}
	//Check all rules of unit[325][1]
	L[325][1] = LargeX[325][0]>0 ? 1 : 0;
	satisfiable[325][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit325_1[i][0] ][ unit325_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit325_1[i][2] ][ unit325_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit325_1[i][4] ][ unit325_1[i][5] ] >0);
		X_contra = ( LargeX[325][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit325_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[325][0]=0; L[325][1]=1;}
			satisfiable[325][1]=satisfiable[325][1] & ((x[325] ^ 1) | (x[ unit325_1[i][0] ] ^ unit325_1[i][1]) |(x[ unit325_1[i][2] ] ^ unit325_1[i][3]));
			}
		if(X_contra>0) L[325][1]=2;
		}
	//Check all rules of unit[326][0]
	L[326][0] = LargeX[326][1]>0 ? 1 : 0;
	satisfiable[326][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit326_0[i][0] ][ unit326_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit326_0[i][2] ][ unit326_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit326_0[i][4] ][ unit326_0[i][5] ] >0);
		X_contra = ( LargeX[326][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit326_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[326][1]=0; L[326][0]=1;}
			satisfiable[326][0]=satisfiable[326][0] & ((x[326] ^ 0) | (x[ unit326_0[i][0] ] ^ unit326_0[i][1]) |(x[ unit326_0[i][2] ] ^ unit326_0[i][3]));
			}
		if(X_contra>0) L[326][0]=2;
		}
	//Check all rules of unit[326][1]
	L[326][1] = LargeX[326][0]>0 ? 1 : 0;
	satisfiable[326][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit326_1[i][0] ][ unit326_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit326_1[i][2] ][ unit326_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit326_1[i][4] ][ unit326_1[i][5] ] >0);
		X_contra = ( LargeX[326][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit326_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[326][0]=0; L[326][1]=1;}
			satisfiable[326][1]=satisfiable[326][1] & ((x[326] ^ 1) | (x[ unit326_1[i][0] ] ^ unit326_1[i][1]) |(x[ unit326_1[i][2] ] ^ unit326_1[i][3]));
			}
		if(X_contra>0) L[326][1]=2;
		}
	//Check all rules of unit[327][0]
	L[327][0] = LargeX[327][1]>0 ? 1 : 0;
	satisfiable[327][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit327_0[i][0] ][ unit327_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit327_0[i][2] ][ unit327_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit327_0[i][4] ][ unit327_0[i][5] ] >0);
		X_contra = ( LargeX[327][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit327_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[327][1]=0; L[327][0]=1;}
			satisfiable[327][0]=satisfiable[327][0] & ((x[327] ^ 0) | (x[ unit327_0[i][0] ] ^ unit327_0[i][1]) |(x[ unit327_0[i][2] ] ^ unit327_0[i][3]));
			}
		if(X_contra>0) L[327][0]=2;
		}
	//Check all rules of unit[327][1]
	L[327][1] = LargeX[327][0]>0 ? 1 : 0;
	satisfiable[327][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit327_1[i][0] ][ unit327_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit327_1[i][2] ][ unit327_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit327_1[i][4] ][ unit327_1[i][5] ] >0);
		X_contra = ( LargeX[327][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit327_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[327][0]=0; L[327][1]=1;}
			satisfiable[327][1]=satisfiable[327][1] & ((x[327] ^ 1) | (x[ unit327_1[i][0] ] ^ unit327_1[i][1]) |(x[ unit327_1[i][2] ] ^ unit327_1[i][3]));
			}
		if(X_contra>0) L[327][1]=2;
		}
	//Check all rules of unit[328][0]
	L[328][0] = LargeX[328][1]>0 ? 1 : 0;
	satisfiable[328][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit328_0[i][0] ][ unit328_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit328_0[i][2] ][ unit328_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit328_0[i][4] ][ unit328_0[i][5] ] >0);
		X_contra = ( LargeX[328][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit328_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[328][1]=0; L[328][0]=1;}
			satisfiable[328][0]=satisfiable[328][0] & ((x[328] ^ 0) | (x[ unit328_0[i][0] ] ^ unit328_0[i][1]) |(x[ unit328_0[i][2] ] ^ unit328_0[i][3]));
			}
		if(X_contra>0) L[328][0]=2;
		}
	//Check all rules of unit[328][1]
	L[328][1] = LargeX[328][0]>0 ? 1 : 0;
	satisfiable[328][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit328_1[i][0] ][ unit328_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit328_1[i][2] ][ unit328_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit328_1[i][4] ][ unit328_1[i][5] ] >0);
		X_contra = ( LargeX[328][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit328_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[328][0]=0; L[328][1]=1;}
			satisfiable[328][1]=satisfiable[328][1] & ((x[328] ^ 1) | (x[ unit328_1[i][0] ] ^ unit328_1[i][1]) |(x[ unit328_1[i][2] ] ^ unit328_1[i][3]));
			}
		if(X_contra>0) L[328][1]=2;
		}
	//Check all rules of unit[329][0]
	L[329][0] = LargeX[329][1]>0 ? 1 : 0;
	satisfiable[329][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit329_0[i][0] ][ unit329_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit329_0[i][2] ][ unit329_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit329_0[i][4] ][ unit329_0[i][5] ] >0);
		X_contra = ( LargeX[329][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit329_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[329][1]=0; L[329][0]=1;}
			satisfiable[329][0]=satisfiable[329][0] & ((x[329] ^ 0) | (x[ unit329_0[i][0] ] ^ unit329_0[i][1]) |(x[ unit329_0[i][2] ] ^ unit329_0[i][3]));
			}
		if(X_contra>0) L[329][0]=2;
		}
	//Check all rules of unit[329][1]
	L[329][1] = LargeX[329][0]>0 ? 1 : 0;
	satisfiable[329][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit329_1[i][0] ][ unit329_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit329_1[i][2] ][ unit329_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit329_1[i][4] ][ unit329_1[i][5] ] >0);
		X_contra = ( LargeX[329][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit329_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[329][0]=0; L[329][1]=1;}
			satisfiable[329][1]=satisfiable[329][1] & ((x[329] ^ 1) | (x[ unit329_1[i][0] ] ^ unit329_1[i][1]) |(x[ unit329_1[i][2] ] ^ unit329_1[i][3]));
			}
		if(X_contra>0) L[329][1]=2;
		}
	//Check all rules of unit[330][0]
	L[330][0] = LargeX[330][1]>0 ? 1 : 0;
	satisfiable[330][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit330_0[i][0] ][ unit330_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit330_0[i][2] ][ unit330_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit330_0[i][4] ][ unit330_0[i][5] ] >0);
		X_contra = ( LargeX[330][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit330_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[330][1]=0; L[330][0]=1;}
			satisfiable[330][0]=satisfiable[330][0] & ((x[330] ^ 0) | (x[ unit330_0[i][0] ] ^ unit330_0[i][1]) |(x[ unit330_0[i][2] ] ^ unit330_0[i][3]));
			}
		if(X_contra>0) L[330][0]=2;
		}
	//Check all rules of unit[330][1]
	L[330][1] = LargeX[330][0]>0 ? 1 : 0;
	satisfiable[330][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit330_1[i][0] ][ unit330_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit330_1[i][2] ][ unit330_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit330_1[i][4] ][ unit330_1[i][5] ] >0);
		X_contra = ( LargeX[330][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit330_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[330][0]=0; L[330][1]=1;}
			satisfiable[330][1]=satisfiable[330][1] & ((x[330] ^ 1) | (x[ unit330_1[i][0] ] ^ unit330_1[i][1]) |(x[ unit330_1[i][2] ] ^ unit330_1[i][3]));
			}
		if(X_contra>0) L[330][1]=2;
		}
	//Check all rules of unit[331][0]
	L[331][0] = LargeX[331][1]>0 ? 1 : 0;
	satisfiable[331][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit331_0[i][0] ][ unit331_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit331_0[i][2] ][ unit331_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit331_0[i][4] ][ unit331_0[i][5] ] >0);
		X_contra = ( LargeX[331][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit331_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[331][1]=0; L[331][0]=1;}
			satisfiable[331][0]=satisfiable[331][0] & ((x[331] ^ 0) | (x[ unit331_0[i][0] ] ^ unit331_0[i][1]) |(x[ unit331_0[i][2] ] ^ unit331_0[i][3]));
			}
		if(X_contra>0) L[331][0]=2;
		}
	//Check all rules of unit[331][1]
	L[331][1] = LargeX[331][0]>0 ? 1 : 0;
	satisfiable[331][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit331_1[i][0] ][ unit331_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit331_1[i][2] ][ unit331_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit331_1[i][4] ][ unit331_1[i][5] ] >0);
		X_contra = ( LargeX[331][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit331_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[331][0]=0; L[331][1]=1;}
			satisfiable[331][1]=satisfiable[331][1] & ((x[331] ^ 1) | (x[ unit331_1[i][0] ] ^ unit331_1[i][1]) |(x[ unit331_1[i][2] ] ^ unit331_1[i][3]));
			}
		if(X_contra>0) L[331][1]=2;
		}
	//Check all rules of unit[332][0]
	L[332][0] = LargeX[332][1]>0 ? 1 : 0;
	satisfiable[332][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit332_0[i][0] ][ unit332_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit332_0[i][2] ][ unit332_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit332_0[i][4] ][ unit332_0[i][5] ] >0);
		X_contra = ( LargeX[332][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit332_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[332][1]=0; L[332][0]=1;}
			satisfiable[332][0]=satisfiable[332][0] & ((x[332] ^ 0) | (x[ unit332_0[i][0] ] ^ unit332_0[i][1]) |(x[ unit332_0[i][2] ] ^ unit332_0[i][3]));
			}
		if(X_contra>0) L[332][0]=2;
		}
	//Check all rules of unit[332][1]
	L[332][1] = LargeX[332][0]>0 ? 1 : 0;
	satisfiable[332][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit332_1[i][0] ][ unit332_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit332_1[i][2] ][ unit332_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit332_1[i][4] ][ unit332_1[i][5] ] >0);
		X_contra = ( LargeX[332][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit332_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[332][0]=0; L[332][1]=1;}
			satisfiable[332][1]=satisfiable[332][1] & ((x[332] ^ 1) | (x[ unit332_1[i][0] ] ^ unit332_1[i][1]) |(x[ unit332_1[i][2] ] ^ unit332_1[i][3]));
			}
		if(X_contra>0) L[332][1]=2;
		}
	//Check all rules of unit[333][0]
	L[333][0] = LargeX[333][1]>0 ? 1 : 0;
	satisfiable[333][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit333_0[i][0] ][ unit333_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit333_0[i][2] ][ unit333_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit333_0[i][4] ][ unit333_0[i][5] ] >0);
		X_contra = ( LargeX[333][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit333_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[333][1]=0; L[333][0]=1;}
			satisfiable[333][0]=satisfiable[333][0] & ((x[333] ^ 0) | (x[ unit333_0[i][0] ] ^ unit333_0[i][1]) |(x[ unit333_0[i][2] ] ^ unit333_0[i][3]));
			}
		if(X_contra>0) L[333][0]=2;
		}
	//Check all rules of unit[333][1]
	L[333][1] = LargeX[333][0]>0 ? 1 : 0;
	satisfiable[333][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit333_1[i][0] ][ unit333_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit333_1[i][2] ][ unit333_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit333_1[i][4] ][ unit333_1[i][5] ] >0);
		X_contra = ( LargeX[333][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit333_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[333][0]=0; L[333][1]=1;}
			satisfiable[333][1]=satisfiable[333][1] & ((x[333] ^ 1) | (x[ unit333_1[i][0] ] ^ unit333_1[i][1]) |(x[ unit333_1[i][2] ] ^ unit333_1[i][3]));
			}
		if(X_contra>0) L[333][1]=2;
		}
	//Check all rules of unit[334][0]
	L[334][0] = LargeX[334][1]>0 ? 1 : 0;
	satisfiable[334][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit334_0[i][0] ][ unit334_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit334_0[i][2] ][ unit334_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit334_0[i][4] ][ unit334_0[i][5] ] >0);
		X_contra = ( LargeX[334][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit334_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[334][1]=0; L[334][0]=1;}
			satisfiable[334][0]=satisfiable[334][0] & ((x[334] ^ 0) | (x[ unit334_0[i][0] ] ^ unit334_0[i][1]) |(x[ unit334_0[i][2] ] ^ unit334_0[i][3]));
			}
		if(X_contra>0) L[334][0]=2;
		}
	//Check all rules of unit[334][1]
	L[334][1] = LargeX[334][0]>0 ? 1 : 0;
	satisfiable[334][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit334_1[i][0] ][ unit334_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit334_1[i][2] ][ unit334_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit334_1[i][4] ][ unit334_1[i][5] ] >0);
		X_contra = ( LargeX[334][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit334_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[334][0]=0; L[334][1]=1;}
			satisfiable[334][1]=satisfiable[334][1] & ((x[334] ^ 1) | (x[ unit334_1[i][0] ] ^ unit334_1[i][1]) |(x[ unit334_1[i][2] ] ^ unit334_1[i][3]));
			}
		if(X_contra>0) L[334][1]=2;
		}
	//Check all rules of unit[335][0]
	L[335][0] = LargeX[335][1]>0 ? 1 : 0;
	satisfiable[335][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit335_0[i][0] ][ unit335_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit335_0[i][2] ][ unit335_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit335_0[i][4] ][ unit335_0[i][5] ] >0);
		X_contra = ( LargeX[335][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit335_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[335][1]=0; L[335][0]=1;}
			satisfiable[335][0]=satisfiable[335][0] & ((x[335] ^ 0) | (x[ unit335_0[i][0] ] ^ unit335_0[i][1]) |(x[ unit335_0[i][2] ] ^ unit335_0[i][3]));
			}
		if(X_contra>0) L[335][0]=2;
		}
	//Check all rules of unit[335][1]
	L[335][1] = LargeX[335][0]>0 ? 1 : 0;
	satisfiable[335][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit335_1[i][0] ][ unit335_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit335_1[i][2] ][ unit335_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit335_1[i][4] ][ unit335_1[i][5] ] >0);
		X_contra = ( LargeX[335][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit335_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[335][0]=0; L[335][1]=1;}
			satisfiable[335][1]=satisfiable[335][1] & ((x[335] ^ 1) | (x[ unit335_1[i][0] ] ^ unit335_1[i][1]) |(x[ unit335_1[i][2] ] ^ unit335_1[i][3]));
			}
		if(X_contra>0) L[335][1]=2;
		}
	//Check all rules of unit[336][0]
	L[336][0] = LargeX[336][1]>0 ? 1 : 0;
	satisfiable[336][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit336_0[i][0] ][ unit336_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit336_0[i][2] ][ unit336_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit336_0[i][4] ][ unit336_0[i][5] ] >0);
		X_contra = ( LargeX[336][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit336_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[336][1]=0; L[336][0]=1;}
			satisfiable[336][0]=satisfiable[336][0] & ((x[336] ^ 0) | (x[ unit336_0[i][0] ] ^ unit336_0[i][1]) |(x[ unit336_0[i][2] ] ^ unit336_0[i][3]));
			}
		if(X_contra>0) L[336][0]=2;
		}
	//Check all rules of unit[336][1]
	L[336][1] = LargeX[336][0]>0 ? 1 : 0;
	satisfiable[336][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit336_1[i][0] ][ unit336_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit336_1[i][2] ][ unit336_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit336_1[i][4] ][ unit336_1[i][5] ] >0);
		X_contra = ( LargeX[336][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit336_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[336][0]=0; L[336][1]=1;}
			satisfiable[336][1]=satisfiable[336][1] & ((x[336] ^ 1) | (x[ unit336_1[i][0] ] ^ unit336_1[i][1]) |(x[ unit336_1[i][2] ] ^ unit336_1[i][3]));
			}
		if(X_contra>0) L[336][1]=2;
		}
	//Check all rules of unit[337][0]
	L[337][0] = LargeX[337][1]>0 ? 1 : 0;
	satisfiable[337][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit337_0[i][0] ][ unit337_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit337_0[i][2] ][ unit337_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit337_0[i][4] ][ unit337_0[i][5] ] >0);
		X_contra = ( LargeX[337][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit337_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[337][1]=0; L[337][0]=1;}
			satisfiable[337][0]=satisfiable[337][0] & ((x[337] ^ 0) | (x[ unit337_0[i][0] ] ^ unit337_0[i][1]) |(x[ unit337_0[i][2] ] ^ unit337_0[i][3]));
			}
		if(X_contra>0) L[337][0]=2;
		}
	//Check all rules of unit[337][1]
	L[337][1] = LargeX[337][0]>0 ? 1 : 0;
	satisfiable[337][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit337_1[i][0] ][ unit337_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit337_1[i][2] ][ unit337_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit337_1[i][4] ][ unit337_1[i][5] ] >0);
		X_contra = ( LargeX[337][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit337_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[337][0]=0; L[337][1]=1;}
			satisfiable[337][1]=satisfiable[337][1] & ((x[337] ^ 1) | (x[ unit337_1[i][0] ] ^ unit337_1[i][1]) |(x[ unit337_1[i][2] ] ^ unit337_1[i][3]));
			}
		if(X_contra>0) L[337][1]=2;
		}
	//Check all rules of unit[338][0]
	L[338][0] = LargeX[338][1]>0 ? 1 : 0;
	satisfiable[338][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit338_0[i][0] ][ unit338_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit338_0[i][2] ][ unit338_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit338_0[i][4] ][ unit338_0[i][5] ] >0);
		X_contra = ( LargeX[338][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit338_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[338][1]=0; L[338][0]=1;}
			satisfiable[338][0]=satisfiable[338][0] & ((x[338] ^ 0) | (x[ unit338_0[i][0] ] ^ unit338_0[i][1]) |(x[ unit338_0[i][2] ] ^ unit338_0[i][3]));
			}
		if(X_contra>0) L[338][0]=2;
		}
	//Check all rules of unit[338][1]
	L[338][1] = LargeX[338][0]>0 ? 1 : 0;
	satisfiable[338][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit338_1[i][0] ][ unit338_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit338_1[i][2] ][ unit338_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit338_1[i][4] ][ unit338_1[i][5] ] >0);
		X_contra = ( LargeX[338][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit338_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[338][0]=0; L[338][1]=1;}
			satisfiable[338][1]=satisfiable[338][1] & ((x[338] ^ 1) | (x[ unit338_1[i][0] ] ^ unit338_1[i][1]) |(x[ unit338_1[i][2] ] ^ unit338_1[i][3]));
			}
		if(X_contra>0) L[338][1]=2;
		}
	//Check all rules of unit[339][0]
	L[339][0] = LargeX[339][1]>0 ? 1 : 0;
	satisfiable[339][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit339_0[i][0] ][ unit339_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit339_0[i][2] ][ unit339_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit339_0[i][4] ][ unit339_0[i][5] ] >0);
		X_contra = ( LargeX[339][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit339_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[339][1]=0; L[339][0]=1;}
			satisfiable[339][0]=satisfiable[339][0] & ((x[339] ^ 0) | (x[ unit339_0[i][0] ] ^ unit339_0[i][1]) |(x[ unit339_0[i][2] ] ^ unit339_0[i][3]));
			}
		if(X_contra>0) L[339][0]=2;
		}
	//Check all rules of unit[339][1]
	L[339][1] = LargeX[339][0]>0 ? 1 : 0;
	satisfiable[339][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit339_1[i][0] ][ unit339_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit339_1[i][2] ][ unit339_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit339_1[i][4] ][ unit339_1[i][5] ] >0);
		X_contra = ( LargeX[339][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit339_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[339][0]=0; L[339][1]=1;}
			satisfiable[339][1]=satisfiable[339][1] & ((x[339] ^ 1) | (x[ unit339_1[i][0] ] ^ unit339_1[i][1]) |(x[ unit339_1[i][2] ] ^ unit339_1[i][3]));
			}
		if(X_contra>0) L[339][1]=2;
		}
	//Check all rules of unit[340][0]
	L[340][0] = LargeX[340][1]>0 ? 1 : 0;
	satisfiable[340][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit340_0[i][0] ][ unit340_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit340_0[i][2] ][ unit340_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit340_0[i][4] ][ unit340_0[i][5] ] >0);
		X_contra = ( LargeX[340][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit340_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[340][1]=0; L[340][0]=1;}
			satisfiable[340][0]=satisfiable[340][0] & ((x[340] ^ 0) | (x[ unit340_0[i][0] ] ^ unit340_0[i][1]) |(x[ unit340_0[i][2] ] ^ unit340_0[i][3]));
			}
		if(X_contra>0) L[340][0]=2;
		}
	//Check all rules of unit[340][1]
	L[340][1] = LargeX[340][0]>0 ? 1 : 0;
	satisfiable[340][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit340_1[i][0] ][ unit340_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit340_1[i][2] ][ unit340_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit340_1[i][4] ][ unit340_1[i][5] ] >0);
		X_contra = ( LargeX[340][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit340_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[340][0]=0; L[340][1]=1;}
			satisfiable[340][1]=satisfiable[340][1] & ((x[340] ^ 1) | (x[ unit340_1[i][0] ] ^ unit340_1[i][1]) |(x[ unit340_1[i][2] ] ^ unit340_1[i][3]));
			}
		if(X_contra>0) L[340][1]=2;
		}
	//Check all rules of unit[341][0]
	L[341][0] = LargeX[341][1]>0 ? 1 : 0;
	satisfiable[341][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit341_0[i][0] ][ unit341_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit341_0[i][2] ][ unit341_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit341_0[i][4] ][ unit341_0[i][5] ] >0);
		X_contra = ( LargeX[341][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit341_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[341][1]=0; L[341][0]=1;}
			satisfiable[341][0]=satisfiable[341][0] & ((x[341] ^ 0) | (x[ unit341_0[i][0] ] ^ unit341_0[i][1]) |(x[ unit341_0[i][2] ] ^ unit341_0[i][3]));
			}
		if(X_contra>0) L[341][0]=2;
		}
	//Check all rules of unit[341][1]
	L[341][1] = LargeX[341][0]>0 ? 1 : 0;
	satisfiable[341][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit341_1[i][0] ][ unit341_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit341_1[i][2] ][ unit341_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit341_1[i][4] ][ unit341_1[i][5] ] >0);
		X_contra = ( LargeX[341][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit341_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[341][0]=0; L[341][1]=1;}
			satisfiable[341][1]=satisfiable[341][1] & ((x[341] ^ 1) | (x[ unit341_1[i][0] ] ^ unit341_1[i][1]) |(x[ unit341_1[i][2] ] ^ unit341_1[i][3]));
			}
		if(X_contra>0) L[341][1]=2;
		}
	//Check all rules of unit[342][0]
	L[342][0] = LargeX[342][1]>0 ? 1 : 0;
	satisfiable[342][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit342_0[i][0] ][ unit342_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit342_0[i][2] ][ unit342_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit342_0[i][4] ][ unit342_0[i][5] ] >0);
		X_contra = ( LargeX[342][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit342_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[342][1]=0; L[342][0]=1;}
			satisfiable[342][0]=satisfiable[342][0] & ((x[342] ^ 0) | (x[ unit342_0[i][0] ] ^ unit342_0[i][1]) |(x[ unit342_0[i][2] ] ^ unit342_0[i][3]));
			}
		if(X_contra>0) L[342][0]=2;
		}
	//Check all rules of unit[342][1]
	L[342][1] = LargeX[342][0]>0 ? 1 : 0;
	satisfiable[342][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit342_1[i][0] ][ unit342_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit342_1[i][2] ][ unit342_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit342_1[i][4] ][ unit342_1[i][5] ] >0);
		X_contra = ( LargeX[342][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit342_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[342][0]=0; L[342][1]=1;}
			satisfiable[342][1]=satisfiable[342][1] & ((x[342] ^ 1) | (x[ unit342_1[i][0] ] ^ unit342_1[i][1]) |(x[ unit342_1[i][2] ] ^ unit342_1[i][3]));
			}
		if(X_contra>0) L[342][1]=2;
		}
	//Check all rules of unit[343][0]
	L[343][0] = LargeX[343][1]>0 ? 1 : 0;
	satisfiable[343][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit343_0[i][0] ][ unit343_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit343_0[i][2] ][ unit343_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit343_0[i][4] ][ unit343_0[i][5] ] >0);
		X_contra = ( LargeX[343][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit343_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[343][1]=0; L[343][0]=1;}
			satisfiable[343][0]=satisfiable[343][0] & ((x[343] ^ 0) | (x[ unit343_0[i][0] ] ^ unit343_0[i][1]) |(x[ unit343_0[i][2] ] ^ unit343_0[i][3]));
			}
		if(X_contra>0) L[343][0]=2;
		}
	//Check all rules of unit[343][1]
	L[343][1] = LargeX[343][0]>0 ? 1 : 0;
	satisfiable[343][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit343_1[i][0] ][ unit343_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit343_1[i][2] ][ unit343_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit343_1[i][4] ][ unit343_1[i][5] ] >0);
		X_contra = ( LargeX[343][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit343_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[343][0]=0; L[343][1]=1;}
			satisfiable[343][1]=satisfiable[343][1] & ((x[343] ^ 1) | (x[ unit343_1[i][0] ] ^ unit343_1[i][1]) |(x[ unit343_1[i][2] ] ^ unit343_1[i][3]));
			}
		if(X_contra>0) L[343][1]=2;
		}
	//Check all rules of unit[344][0]
	L[344][0] = LargeX[344][1]>0 ? 1 : 0;
	satisfiable[344][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit344_0[i][0] ][ unit344_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit344_0[i][2] ][ unit344_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit344_0[i][4] ][ unit344_0[i][5] ] >0);
		X_contra = ( LargeX[344][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit344_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[344][1]=0; L[344][0]=1;}
			satisfiable[344][0]=satisfiable[344][0] & ((x[344] ^ 0) | (x[ unit344_0[i][0] ] ^ unit344_0[i][1]) |(x[ unit344_0[i][2] ] ^ unit344_0[i][3]));
			}
		if(X_contra>0) L[344][0]=2;
		}
	//Check all rules of unit[344][1]
	L[344][1] = LargeX[344][0]>0 ? 1 : 0;
	satisfiable[344][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit344_1[i][0] ][ unit344_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit344_1[i][2] ][ unit344_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit344_1[i][4] ][ unit344_1[i][5] ] >0);
		X_contra = ( LargeX[344][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit344_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[344][0]=0; L[344][1]=1;}
			satisfiable[344][1]=satisfiable[344][1] & ((x[344] ^ 1) | (x[ unit344_1[i][0] ] ^ unit344_1[i][1]) |(x[ unit344_1[i][2] ] ^ unit344_1[i][3]));
			}
		if(X_contra>0) L[344][1]=2;
		}
	//Check all rules of unit[345][0]
	L[345][0] = LargeX[345][1]>0 ? 1 : 0;
	satisfiable[345][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit345_0[i][0] ][ unit345_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit345_0[i][2] ][ unit345_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit345_0[i][4] ][ unit345_0[i][5] ] >0);
		X_contra = ( LargeX[345][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit345_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[345][1]=0; L[345][0]=1;}
			satisfiable[345][0]=satisfiable[345][0] & ((x[345] ^ 0) | (x[ unit345_0[i][0] ] ^ unit345_0[i][1]) |(x[ unit345_0[i][2] ] ^ unit345_0[i][3]));
			}
		if(X_contra>0) L[345][0]=2;
		}
	//Check all rules of unit[345][1]
	L[345][1] = LargeX[345][0]>0 ? 1 : 0;
	satisfiable[345][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit345_1[i][0] ][ unit345_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit345_1[i][2] ][ unit345_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit345_1[i][4] ][ unit345_1[i][5] ] >0);
		X_contra = ( LargeX[345][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit345_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[345][0]=0; L[345][1]=1;}
			satisfiable[345][1]=satisfiable[345][1] & ((x[345] ^ 1) | (x[ unit345_1[i][0] ] ^ unit345_1[i][1]) |(x[ unit345_1[i][2] ] ^ unit345_1[i][3]));
			}
		if(X_contra>0) L[345][1]=2;
		}
	//Check all rules of unit[346][0]
	L[346][0] = LargeX[346][1]>0 ? 1 : 0;
	satisfiable[346][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit346_0[i][0] ][ unit346_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit346_0[i][2] ][ unit346_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit346_0[i][4] ][ unit346_0[i][5] ] >0);
		X_contra = ( LargeX[346][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit346_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[346][1]=0; L[346][0]=1;}
			satisfiable[346][0]=satisfiable[346][0] & ((x[346] ^ 0) | (x[ unit346_0[i][0] ] ^ unit346_0[i][1]) |(x[ unit346_0[i][2] ] ^ unit346_0[i][3]));
			}
		if(X_contra>0) L[346][0]=2;
		}
	//Check all rules of unit[346][1]
	L[346][1] = LargeX[346][0]>0 ? 1 : 0;
	satisfiable[346][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit346_1[i][0] ][ unit346_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit346_1[i][2] ][ unit346_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit346_1[i][4] ][ unit346_1[i][5] ] >0);
		X_contra = ( LargeX[346][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit346_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[346][0]=0; L[346][1]=1;}
			satisfiable[346][1]=satisfiable[346][1] & ((x[346] ^ 1) | (x[ unit346_1[i][0] ] ^ unit346_1[i][1]) |(x[ unit346_1[i][2] ] ^ unit346_1[i][3]));
			}
		if(X_contra>0) L[346][1]=2;
		}
	//Check all rules of unit[347][0]
	L[347][0] = LargeX[347][1]>0 ? 1 : 0;
	satisfiable[347][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit347_0[i][0] ][ unit347_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit347_0[i][2] ][ unit347_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit347_0[i][4] ][ unit347_0[i][5] ] >0);
		X_contra = ( LargeX[347][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit347_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[347][1]=0; L[347][0]=1;}
			satisfiable[347][0]=satisfiable[347][0] & ((x[347] ^ 0) | (x[ unit347_0[i][0] ] ^ unit347_0[i][1]) |(x[ unit347_0[i][2] ] ^ unit347_0[i][3]));
			}
		if(X_contra>0) L[347][0]=2;
		}
	//Check all rules of unit[347][1]
	L[347][1] = LargeX[347][0]>0 ? 1 : 0;
	satisfiable[347][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit347_1[i][0] ][ unit347_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit347_1[i][2] ][ unit347_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit347_1[i][4] ][ unit347_1[i][5] ] >0);
		X_contra = ( LargeX[347][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit347_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[347][0]=0; L[347][1]=1;}
			satisfiable[347][1]=satisfiable[347][1] & ((x[347] ^ 1) | (x[ unit347_1[i][0] ] ^ unit347_1[i][1]) |(x[ unit347_1[i][2] ] ^ unit347_1[i][3]));
			}
		if(X_contra>0) L[347][1]=2;
		}
	//Check all rules of unit[348][0]
	L[348][0] = LargeX[348][1]>0 ? 1 : 0;
	satisfiable[348][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit348_0[i][0] ][ unit348_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit348_0[i][2] ][ unit348_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit348_0[i][4] ][ unit348_0[i][5] ] >0);
		X_contra = ( LargeX[348][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit348_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[348][1]=0; L[348][0]=1;}
			satisfiable[348][0]=satisfiable[348][0] & ((x[348] ^ 0) | (x[ unit348_0[i][0] ] ^ unit348_0[i][1]) |(x[ unit348_0[i][2] ] ^ unit348_0[i][3]));
			}
		if(X_contra>0) L[348][0]=2;
		}
	//Check all rules of unit[348][1]
	L[348][1] = LargeX[348][0]>0 ? 1 : 0;
	satisfiable[348][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit348_1[i][0] ][ unit348_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit348_1[i][2] ][ unit348_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit348_1[i][4] ][ unit348_1[i][5] ] >0);
		X_contra = ( LargeX[348][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit348_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[348][0]=0; L[348][1]=1;}
			satisfiable[348][1]=satisfiable[348][1] & ((x[348] ^ 1) | (x[ unit348_1[i][0] ] ^ unit348_1[i][1]) |(x[ unit348_1[i][2] ] ^ unit348_1[i][3]));
			}
		if(X_contra>0) L[348][1]=2;
		}
	//Check all rules of unit[349][0]
	L[349][0] = LargeX[349][1]>0 ? 1 : 0;
	satisfiable[349][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit349_0[i][0] ][ unit349_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit349_0[i][2] ][ unit349_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit349_0[i][4] ][ unit349_0[i][5] ] >0);
		X_contra = ( LargeX[349][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit349_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[349][1]=0; L[349][0]=1;}
			satisfiable[349][0]=satisfiable[349][0] & ((x[349] ^ 0) | (x[ unit349_0[i][0] ] ^ unit349_0[i][1]) |(x[ unit349_0[i][2] ] ^ unit349_0[i][3]));
			}
		if(X_contra>0) L[349][0]=2;
		}
	//Check all rules of unit[349][1]
	L[349][1] = LargeX[349][0]>0 ? 1 : 0;
	satisfiable[349][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit349_1[i][0] ][ unit349_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit349_1[i][2] ][ unit349_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit349_1[i][4] ][ unit349_1[i][5] ] >0);
		X_contra = ( LargeX[349][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit349_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[349][0]=0; L[349][1]=1;}
			satisfiable[349][1]=satisfiable[349][1] & ((x[349] ^ 1) | (x[ unit349_1[i][0] ] ^ unit349_1[i][1]) |(x[ unit349_1[i][2] ] ^ unit349_1[i][3]));
			}
		if(X_contra>0) L[349][1]=2;
		}
	//Check all rules of unit[350][0]
	L[350][0] = LargeX[350][1]>0 ? 1 : 0;
	satisfiable[350][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit350_0[i][0] ][ unit350_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit350_0[i][2] ][ unit350_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit350_0[i][4] ][ unit350_0[i][5] ] >0);
		X_contra = ( LargeX[350][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit350_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[350][1]=0; L[350][0]=1;}
			satisfiable[350][0]=satisfiable[350][0] & ((x[350] ^ 0) | (x[ unit350_0[i][0] ] ^ unit350_0[i][1]) |(x[ unit350_0[i][2] ] ^ unit350_0[i][3]));
			}
		if(X_contra>0) L[350][0]=2;
		}
	//Check all rules of unit[350][1]
	L[350][1] = LargeX[350][0]>0 ? 1 : 0;
	satisfiable[350][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit350_1[i][0] ][ unit350_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit350_1[i][2] ][ unit350_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit350_1[i][4] ][ unit350_1[i][5] ] >0);
		X_contra = ( LargeX[350][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit350_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[350][0]=0; L[350][1]=1;}
			satisfiable[350][1]=satisfiable[350][1] & ((x[350] ^ 1) | (x[ unit350_1[i][0] ] ^ unit350_1[i][1]) |(x[ unit350_1[i][2] ] ^ unit350_1[i][3]));
			}
		if(X_contra>0) L[350][1]=2;
		}
	//Check all rules of unit[351][0]
	L[351][0] = LargeX[351][1]>0 ? 1 : 0;
	satisfiable[351][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit351_0[i][0] ][ unit351_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit351_0[i][2] ][ unit351_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit351_0[i][4] ][ unit351_0[i][5] ] >0);
		X_contra = ( LargeX[351][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit351_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[351][1]=0; L[351][0]=1;}
			satisfiable[351][0]=satisfiable[351][0] & ((x[351] ^ 0) | (x[ unit351_0[i][0] ] ^ unit351_0[i][1]) |(x[ unit351_0[i][2] ] ^ unit351_0[i][3]));
			}
		if(X_contra>0) L[351][0]=2;
		}
	//Check all rules of unit[351][1]
	L[351][1] = LargeX[351][0]>0 ? 1 : 0;
	satisfiable[351][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit351_1[i][0] ][ unit351_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit351_1[i][2] ][ unit351_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit351_1[i][4] ][ unit351_1[i][5] ] >0);
		X_contra = ( LargeX[351][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit351_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[351][0]=0; L[351][1]=1;}
			satisfiable[351][1]=satisfiable[351][1] & ((x[351] ^ 1) | (x[ unit351_1[i][0] ] ^ unit351_1[i][1]) |(x[ unit351_1[i][2] ] ^ unit351_1[i][3]));
			}
		if(X_contra>0) L[351][1]=2;
		}
	//Check all rules of unit[352][0]
	L[352][0] = LargeX[352][1]>0 ? 1 : 0;
	satisfiable[352][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit352_0[i][0] ][ unit352_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit352_0[i][2] ][ unit352_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit352_0[i][4] ][ unit352_0[i][5] ] >0);
		X_contra = ( LargeX[352][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit352_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[352][1]=0; L[352][0]=1;}
			satisfiable[352][0]=satisfiable[352][0] & ((x[352] ^ 0) | (x[ unit352_0[i][0] ] ^ unit352_0[i][1]) |(x[ unit352_0[i][2] ] ^ unit352_0[i][3]));
			}
		if(X_contra>0) L[352][0]=2;
		}
	//Check all rules of unit[352][1]
	L[352][1] = LargeX[352][0]>0 ? 1 : 0;
	satisfiable[352][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit352_1[i][0] ][ unit352_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit352_1[i][2] ][ unit352_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit352_1[i][4] ][ unit352_1[i][5] ] >0);
		X_contra = ( LargeX[352][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit352_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[352][0]=0; L[352][1]=1;}
			satisfiable[352][1]=satisfiable[352][1] & ((x[352] ^ 1) | (x[ unit352_1[i][0] ] ^ unit352_1[i][1]) |(x[ unit352_1[i][2] ] ^ unit352_1[i][3]));
			}
		if(X_contra>0) L[352][1]=2;
		}
	//Check all rules of unit[353][0]
	L[353][0] = LargeX[353][1]>0 ? 1 : 0;
	satisfiable[353][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit353_0[i][0] ][ unit353_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit353_0[i][2] ][ unit353_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit353_0[i][4] ][ unit353_0[i][5] ] >0);
		X_contra = ( LargeX[353][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit353_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[353][1]=0; L[353][0]=1;}
			satisfiable[353][0]=satisfiable[353][0] & ((x[353] ^ 0) | (x[ unit353_0[i][0] ] ^ unit353_0[i][1]) |(x[ unit353_0[i][2] ] ^ unit353_0[i][3]));
			}
		if(X_contra>0) L[353][0]=2;
		}
	//Check all rules of unit[353][1]
	L[353][1] = LargeX[353][0]>0 ? 1 : 0;
	satisfiable[353][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit353_1[i][0] ][ unit353_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit353_1[i][2] ][ unit353_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit353_1[i][4] ][ unit353_1[i][5] ] >0);
		X_contra = ( LargeX[353][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit353_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[353][0]=0; L[353][1]=1;}
			satisfiable[353][1]=satisfiable[353][1] & ((x[353] ^ 1) | (x[ unit353_1[i][0] ] ^ unit353_1[i][1]) |(x[ unit353_1[i][2] ] ^ unit353_1[i][3]));
			}
		if(X_contra>0) L[353][1]=2;
		}
	//Check all rules of unit[354][0]
	L[354][0] = LargeX[354][1]>0 ? 1 : 0;
	satisfiable[354][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit354_0[i][0] ][ unit354_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit354_0[i][2] ][ unit354_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit354_0[i][4] ][ unit354_0[i][5] ] >0);
		X_contra = ( LargeX[354][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit354_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[354][1]=0; L[354][0]=1;}
			satisfiable[354][0]=satisfiable[354][0] & ((x[354] ^ 0) | (x[ unit354_0[i][0] ] ^ unit354_0[i][1]) |(x[ unit354_0[i][2] ] ^ unit354_0[i][3]));
			}
		if(X_contra>0) L[354][0]=2;
		}
	//Check all rules of unit[354][1]
	L[354][1] = LargeX[354][0]>0 ? 1 : 0;
	satisfiable[354][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit354_1[i][0] ][ unit354_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit354_1[i][2] ][ unit354_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit354_1[i][4] ][ unit354_1[i][5] ] >0);
		X_contra = ( LargeX[354][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit354_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[354][0]=0; L[354][1]=1;}
			satisfiable[354][1]=satisfiable[354][1] & ((x[354] ^ 1) | (x[ unit354_1[i][0] ] ^ unit354_1[i][1]) |(x[ unit354_1[i][2] ] ^ unit354_1[i][3]));
			}
		if(X_contra>0) L[354][1]=2;
		}
	//Check all rules of unit[355][0]
	L[355][0] = LargeX[355][1]>0 ? 1 : 0;
	satisfiable[355][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit355_0[i][0] ][ unit355_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit355_0[i][2] ][ unit355_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit355_0[i][4] ][ unit355_0[i][5] ] >0);
		X_contra = ( LargeX[355][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit355_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[355][1]=0; L[355][0]=1;}
			satisfiable[355][0]=satisfiable[355][0] & ((x[355] ^ 0) | (x[ unit355_0[i][0] ] ^ unit355_0[i][1]) |(x[ unit355_0[i][2] ] ^ unit355_0[i][3]));
			}
		if(X_contra>0) L[355][0]=2;
		}
	//Check all rules of unit[355][1]
	L[355][1] = LargeX[355][0]>0 ? 1 : 0;
	satisfiable[355][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit355_1[i][0] ][ unit355_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit355_1[i][2] ][ unit355_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit355_1[i][4] ][ unit355_1[i][5] ] >0);
		X_contra = ( LargeX[355][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit355_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[355][0]=0; L[355][1]=1;}
			satisfiable[355][1]=satisfiable[355][1] & ((x[355] ^ 1) | (x[ unit355_1[i][0] ] ^ unit355_1[i][1]) |(x[ unit355_1[i][2] ] ^ unit355_1[i][3]));
			}
		if(X_contra>0) L[355][1]=2;
		}
	//Check all rules of unit[356][0]
	L[356][0] = LargeX[356][1]>0 ? 1 : 0;
	satisfiable[356][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit356_0[i][0] ][ unit356_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit356_0[i][2] ][ unit356_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit356_0[i][4] ][ unit356_0[i][5] ] >0);
		X_contra = ( LargeX[356][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit356_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[356][1]=0; L[356][0]=1;}
			satisfiable[356][0]=satisfiable[356][0] & ((x[356] ^ 0) | (x[ unit356_0[i][0] ] ^ unit356_0[i][1]) |(x[ unit356_0[i][2] ] ^ unit356_0[i][3]));
			}
		if(X_contra>0) L[356][0]=2;
		}
	//Check all rules of unit[356][1]
	L[356][1] = LargeX[356][0]>0 ? 1 : 0;
	satisfiable[356][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit356_1[i][0] ][ unit356_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit356_1[i][2] ][ unit356_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit356_1[i][4] ][ unit356_1[i][5] ] >0);
		X_contra = ( LargeX[356][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit356_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[356][0]=0; L[356][1]=1;}
			satisfiable[356][1]=satisfiable[356][1] & ((x[356] ^ 1) | (x[ unit356_1[i][0] ] ^ unit356_1[i][1]) |(x[ unit356_1[i][2] ] ^ unit356_1[i][3]));
			}
		if(X_contra>0) L[356][1]=2;
		}
	//Check all rules of unit[357][0]
	L[357][0] = LargeX[357][1]>0 ? 1 : 0;
	satisfiable[357][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit357_0[i][0] ][ unit357_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit357_0[i][2] ][ unit357_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit357_0[i][4] ][ unit357_0[i][5] ] >0);
		X_contra = ( LargeX[357][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit357_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[357][1]=0; L[357][0]=1;}
			satisfiable[357][0]=satisfiable[357][0] & ((x[357] ^ 0) | (x[ unit357_0[i][0] ] ^ unit357_0[i][1]) |(x[ unit357_0[i][2] ] ^ unit357_0[i][3]));
			}
		if(X_contra>0) L[357][0]=2;
		}
	//Check all rules of unit[357][1]
	L[357][1] = LargeX[357][0]>0 ? 1 : 0;
	satisfiable[357][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit357_1[i][0] ][ unit357_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit357_1[i][2] ][ unit357_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit357_1[i][4] ][ unit357_1[i][5] ] >0);
		X_contra = ( LargeX[357][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit357_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[357][0]=0; L[357][1]=1;}
			satisfiable[357][1]=satisfiable[357][1] & ((x[357] ^ 1) | (x[ unit357_1[i][0] ] ^ unit357_1[i][1]) |(x[ unit357_1[i][2] ] ^ unit357_1[i][3]));
			}
		if(X_contra>0) L[357][1]=2;
		}
	//Check all rules of unit[358][0]
	L[358][0] = LargeX[358][1]>0 ? 1 : 0;
	satisfiable[358][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit358_0[i][0] ][ unit358_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit358_0[i][2] ][ unit358_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit358_0[i][4] ][ unit358_0[i][5] ] >0);
		X_contra = ( LargeX[358][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit358_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[358][1]=0; L[358][0]=1;}
			satisfiable[358][0]=satisfiable[358][0] & ((x[358] ^ 0) | (x[ unit358_0[i][0] ] ^ unit358_0[i][1]) |(x[ unit358_0[i][2] ] ^ unit358_0[i][3]));
			}
		if(X_contra>0) L[358][0]=2;
		}
	//Check all rules of unit[358][1]
	L[358][1] = LargeX[358][0]>0 ? 1 : 0;
	satisfiable[358][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit358_1[i][0] ][ unit358_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit358_1[i][2] ][ unit358_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit358_1[i][4] ][ unit358_1[i][5] ] >0);
		X_contra = ( LargeX[358][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit358_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[358][0]=0; L[358][1]=1;}
			satisfiable[358][1]=satisfiable[358][1] & ((x[358] ^ 1) | (x[ unit358_1[i][0] ] ^ unit358_1[i][1]) |(x[ unit358_1[i][2] ] ^ unit358_1[i][3]));
			}
		if(X_contra>0) L[358][1]=2;
		}
	//Check all rules of unit[359][0]
	L[359][0] = LargeX[359][1]>0 ? 1 : 0;
	satisfiable[359][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit359_0[i][0] ][ unit359_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit359_0[i][2] ][ unit359_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit359_0[i][4] ][ unit359_0[i][5] ] >0);
		X_contra = ( LargeX[359][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit359_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[359][1]=0; L[359][0]=1;}
			satisfiable[359][0]=satisfiable[359][0] & ((x[359] ^ 0) | (x[ unit359_0[i][0] ] ^ unit359_0[i][1]) |(x[ unit359_0[i][2] ] ^ unit359_0[i][3]));
			}
		if(X_contra>0) L[359][0]=2;
		}
	//Check all rules of unit[359][1]
	L[359][1] = LargeX[359][0]>0 ? 1 : 0;
	satisfiable[359][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit359_1[i][0] ][ unit359_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit359_1[i][2] ][ unit359_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit359_1[i][4] ][ unit359_1[i][5] ] >0);
		X_contra = ( LargeX[359][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit359_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[359][0]=0; L[359][1]=1;}
			satisfiable[359][1]=satisfiable[359][1] & ((x[359] ^ 1) | (x[ unit359_1[i][0] ] ^ unit359_1[i][1]) |(x[ unit359_1[i][2] ] ^ unit359_1[i][3]));
			}
		if(X_contra>0) L[359][1]=2;
		}
	//Check all rules of unit[360][0]
	L[360][0] = LargeX[360][1]>0 ? 1 : 0;
	satisfiable[360][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit360_0[i][0] ][ unit360_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit360_0[i][2] ][ unit360_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit360_0[i][4] ][ unit360_0[i][5] ] >0);
		X_contra = ( LargeX[360][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit360_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[360][1]=0; L[360][0]=1;}
			satisfiable[360][0]=satisfiable[360][0] & ((x[360] ^ 0) | (x[ unit360_0[i][0] ] ^ unit360_0[i][1]) |(x[ unit360_0[i][2] ] ^ unit360_0[i][3]));
			}
		if(X_contra>0) L[360][0]=2;
		}
	//Check all rules of unit[360][1]
	L[360][1] = LargeX[360][0]>0 ? 1 : 0;
	satisfiable[360][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit360_1[i][0] ][ unit360_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit360_1[i][2] ][ unit360_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit360_1[i][4] ][ unit360_1[i][5] ] >0);
		X_contra = ( LargeX[360][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit360_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[360][0]=0; L[360][1]=1;}
			satisfiable[360][1]=satisfiable[360][1] & ((x[360] ^ 1) | (x[ unit360_1[i][0] ] ^ unit360_1[i][1]) |(x[ unit360_1[i][2] ] ^ unit360_1[i][3]));
			}
		if(X_contra>0) L[360][1]=2;
		}
	//Check all rules of unit[361][0]
	L[361][0] = LargeX[361][1]>0 ? 1 : 0;
	satisfiable[361][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit361_0[i][0] ][ unit361_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit361_0[i][2] ][ unit361_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit361_0[i][4] ][ unit361_0[i][5] ] >0);
		X_contra = ( LargeX[361][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit361_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[361][1]=0; L[361][0]=1;}
			satisfiable[361][0]=satisfiable[361][0] & ((x[361] ^ 0) | (x[ unit361_0[i][0] ] ^ unit361_0[i][1]) |(x[ unit361_0[i][2] ] ^ unit361_0[i][3]));
			}
		if(X_contra>0) L[361][0]=2;
		}
	//Check all rules of unit[361][1]
	L[361][1] = LargeX[361][0]>0 ? 1 : 0;
	satisfiable[361][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit361_1[i][0] ][ unit361_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit361_1[i][2] ][ unit361_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit361_1[i][4] ][ unit361_1[i][5] ] >0);
		X_contra = ( LargeX[361][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit361_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[361][0]=0; L[361][1]=1;}
			satisfiable[361][1]=satisfiable[361][1] & ((x[361] ^ 1) | (x[ unit361_1[i][0] ] ^ unit361_1[i][1]) |(x[ unit361_1[i][2] ] ^ unit361_1[i][3]));
			}
		if(X_contra>0) L[361][1]=2;
		}
	//Check all rules of unit[362][0]
	L[362][0] = LargeX[362][1]>0 ? 1 : 0;
	satisfiable[362][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit362_0[i][0] ][ unit362_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit362_0[i][2] ][ unit362_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit362_0[i][4] ][ unit362_0[i][5] ] >0);
		X_contra = ( LargeX[362][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit362_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[362][1]=0; L[362][0]=1;}
			satisfiable[362][0]=satisfiable[362][0] & ((x[362] ^ 0) | (x[ unit362_0[i][0] ] ^ unit362_0[i][1]) |(x[ unit362_0[i][2] ] ^ unit362_0[i][3]));
			}
		if(X_contra>0) L[362][0]=2;
		}
	//Check all rules of unit[362][1]
	L[362][1] = LargeX[362][0]>0 ? 1 : 0;
	satisfiable[362][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit362_1[i][0] ][ unit362_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit362_1[i][2] ][ unit362_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit362_1[i][4] ][ unit362_1[i][5] ] >0);
		X_contra = ( LargeX[362][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit362_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[362][0]=0; L[362][1]=1;}
			satisfiable[362][1]=satisfiable[362][1] & ((x[362] ^ 1) | (x[ unit362_1[i][0] ] ^ unit362_1[i][1]) |(x[ unit362_1[i][2] ] ^ unit362_1[i][3]));
			}
		if(X_contra>0) L[362][1]=2;
		}
	//Check all rules of unit[363][0]
	L[363][0] = LargeX[363][1]>0 ? 1 : 0;
	satisfiable[363][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit363_0[i][0] ][ unit363_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit363_0[i][2] ][ unit363_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit363_0[i][4] ][ unit363_0[i][5] ] >0);
		X_contra = ( LargeX[363][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit363_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[363][1]=0; L[363][0]=1;}
			satisfiable[363][0]=satisfiable[363][0] & ((x[363] ^ 0) | (x[ unit363_0[i][0] ] ^ unit363_0[i][1]) |(x[ unit363_0[i][2] ] ^ unit363_0[i][3]));
			}
		if(X_contra>0) L[363][0]=2;
		}
	//Check all rules of unit[363][1]
	L[363][1] = LargeX[363][0]>0 ? 1 : 0;
	satisfiable[363][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit363_1[i][0] ][ unit363_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit363_1[i][2] ][ unit363_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit363_1[i][4] ][ unit363_1[i][5] ] >0);
		X_contra = ( LargeX[363][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit363_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[363][0]=0; L[363][1]=1;}
			satisfiable[363][1]=satisfiable[363][1] & ((x[363] ^ 1) | (x[ unit363_1[i][0] ] ^ unit363_1[i][1]) |(x[ unit363_1[i][2] ] ^ unit363_1[i][3]));
			}
		if(X_contra>0) L[363][1]=2;
		}
	//Check all rules of unit[364][0]
	L[364][0] = LargeX[364][1]>0 ? 1 : 0;
	satisfiable[364][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit364_0[i][0] ][ unit364_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit364_0[i][2] ][ unit364_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit364_0[i][4] ][ unit364_0[i][5] ] >0);
		X_contra = ( LargeX[364][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit364_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[364][1]=0; L[364][0]=1;}
			satisfiable[364][0]=satisfiable[364][0] & ((x[364] ^ 0) | (x[ unit364_0[i][0] ] ^ unit364_0[i][1]) |(x[ unit364_0[i][2] ] ^ unit364_0[i][3]));
			}
		if(X_contra>0) L[364][0]=2;
		}
	//Check all rules of unit[364][1]
	L[364][1] = LargeX[364][0]>0 ? 1 : 0;
	satisfiable[364][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit364_1[i][0] ][ unit364_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit364_1[i][2] ][ unit364_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit364_1[i][4] ][ unit364_1[i][5] ] >0);
		X_contra = ( LargeX[364][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit364_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[364][0]=0; L[364][1]=1;}
			satisfiable[364][1]=satisfiable[364][1] & ((x[364] ^ 1) | (x[ unit364_1[i][0] ] ^ unit364_1[i][1]) |(x[ unit364_1[i][2] ] ^ unit364_1[i][3]));
			}
		if(X_contra>0) L[364][1]=2;
		}
	//Check all rules of unit[365][0]
	L[365][0] = LargeX[365][1]>0 ? 1 : 0;
	satisfiable[365][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit365_0[i][0] ][ unit365_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit365_0[i][2] ][ unit365_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit365_0[i][4] ][ unit365_0[i][5] ] >0);
		X_contra = ( LargeX[365][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit365_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[365][1]=0; L[365][0]=1;}
			satisfiable[365][0]=satisfiable[365][0] & ((x[365] ^ 0) | (x[ unit365_0[i][0] ] ^ unit365_0[i][1]) |(x[ unit365_0[i][2] ] ^ unit365_0[i][3]));
			}
		if(X_contra>0) L[365][0]=2;
		}
	//Check all rules of unit[365][1]
	L[365][1] = LargeX[365][0]>0 ? 1 : 0;
	satisfiable[365][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit365_1[i][0] ][ unit365_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit365_1[i][2] ][ unit365_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit365_1[i][4] ][ unit365_1[i][5] ] >0);
		X_contra = ( LargeX[365][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit365_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[365][0]=0; L[365][1]=1;}
			satisfiable[365][1]=satisfiable[365][1] & ((x[365] ^ 1) | (x[ unit365_1[i][0] ] ^ unit365_1[i][1]) |(x[ unit365_1[i][2] ] ^ unit365_1[i][3]));
			}
		if(X_contra>0) L[365][1]=2;
		}
	//Check all rules of unit[366][0]
	L[366][0] = LargeX[366][1]>0 ? 1 : 0;
	satisfiable[366][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit366_0[i][0] ][ unit366_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit366_0[i][2] ][ unit366_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit366_0[i][4] ][ unit366_0[i][5] ] >0);
		X_contra = ( LargeX[366][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit366_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[366][1]=0; L[366][0]=1;}
			satisfiable[366][0]=satisfiable[366][0] & ((x[366] ^ 0) | (x[ unit366_0[i][0] ] ^ unit366_0[i][1]) |(x[ unit366_0[i][2] ] ^ unit366_0[i][3]));
			}
		if(X_contra>0) L[366][0]=2;
		}
	//Check all rules of unit[366][1]
	L[366][1] = LargeX[366][0]>0 ? 1 : 0;
	satisfiable[366][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit366_1[i][0] ][ unit366_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit366_1[i][2] ][ unit366_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit366_1[i][4] ][ unit366_1[i][5] ] >0);
		X_contra = ( LargeX[366][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit366_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[366][0]=0; L[366][1]=1;}
			satisfiable[366][1]=satisfiable[366][1] & ((x[366] ^ 1) | (x[ unit366_1[i][0] ] ^ unit366_1[i][1]) |(x[ unit366_1[i][2] ] ^ unit366_1[i][3]));
			}
		if(X_contra>0) L[366][1]=2;
		}
	//Check all rules of unit[367][0]
	L[367][0] = LargeX[367][1]>0 ? 1 : 0;
	satisfiable[367][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit367_0[i][0] ][ unit367_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit367_0[i][2] ][ unit367_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit367_0[i][4] ][ unit367_0[i][5] ] >0);
		X_contra = ( LargeX[367][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit367_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[367][1]=0; L[367][0]=1;}
			satisfiable[367][0]=satisfiable[367][0] & ((x[367] ^ 0) | (x[ unit367_0[i][0] ] ^ unit367_0[i][1]) |(x[ unit367_0[i][2] ] ^ unit367_0[i][3]));
			}
		if(X_contra>0) L[367][0]=2;
		}
	//Check all rules of unit[367][1]
	L[367][1] = LargeX[367][0]>0 ? 1 : 0;
	satisfiable[367][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit367_1[i][0] ][ unit367_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit367_1[i][2] ][ unit367_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit367_1[i][4] ][ unit367_1[i][5] ] >0);
		X_contra = ( LargeX[367][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit367_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[367][0]=0; L[367][1]=1;}
			satisfiable[367][1]=satisfiable[367][1] & ((x[367] ^ 1) | (x[ unit367_1[i][0] ] ^ unit367_1[i][1]) |(x[ unit367_1[i][2] ] ^ unit367_1[i][3]));
			}
		if(X_contra>0) L[367][1]=2;
		}
	//Check all rules of unit[368][0]
	L[368][0] = LargeX[368][1]>0 ? 1 : 0;
	satisfiable[368][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit368_0[i][0] ][ unit368_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit368_0[i][2] ][ unit368_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit368_0[i][4] ][ unit368_0[i][5] ] >0);
		X_contra = ( LargeX[368][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit368_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[368][1]=0; L[368][0]=1;}
			satisfiable[368][0]=satisfiable[368][0] & ((x[368] ^ 0) | (x[ unit368_0[i][0] ] ^ unit368_0[i][1]) |(x[ unit368_0[i][2] ] ^ unit368_0[i][3]));
			}
		if(X_contra>0) L[368][0]=2;
		}
	//Check all rules of unit[368][1]
	L[368][1] = LargeX[368][0]>0 ? 1 : 0;
	satisfiable[368][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit368_1[i][0] ][ unit368_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit368_1[i][2] ][ unit368_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit368_1[i][4] ][ unit368_1[i][5] ] >0);
		X_contra = ( LargeX[368][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit368_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[368][0]=0; L[368][1]=1;}
			satisfiable[368][1]=satisfiable[368][1] & ((x[368] ^ 1) | (x[ unit368_1[i][0] ] ^ unit368_1[i][1]) |(x[ unit368_1[i][2] ] ^ unit368_1[i][3]));
			}
		if(X_contra>0) L[368][1]=2;
		}
	//Check all rules of unit[369][0]
	L[369][0] = LargeX[369][1]>0 ? 1 : 0;
	satisfiable[369][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit369_0[i][0] ][ unit369_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit369_0[i][2] ][ unit369_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit369_0[i][4] ][ unit369_0[i][5] ] >0);
		X_contra = ( LargeX[369][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit369_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[369][1]=0; L[369][0]=1;}
			satisfiable[369][0]=satisfiable[369][0] & ((x[369] ^ 0) | (x[ unit369_0[i][0] ] ^ unit369_0[i][1]) |(x[ unit369_0[i][2] ] ^ unit369_0[i][3]));
			}
		if(X_contra>0) L[369][0]=2;
		}
	//Check all rules of unit[369][1]
	L[369][1] = LargeX[369][0]>0 ? 1 : 0;
	satisfiable[369][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit369_1[i][0] ][ unit369_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit369_1[i][2] ][ unit369_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit369_1[i][4] ][ unit369_1[i][5] ] >0);
		X_contra = ( LargeX[369][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit369_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[369][0]=0; L[369][1]=1;}
			satisfiable[369][1]=satisfiable[369][1] & ((x[369] ^ 1) | (x[ unit369_1[i][0] ] ^ unit369_1[i][1]) |(x[ unit369_1[i][2] ] ^ unit369_1[i][3]));
			}
		if(X_contra>0) L[369][1]=2;
		}
	//Check all rules of unit[370][0]
	L[370][0] = LargeX[370][1]>0 ? 1 : 0;
	satisfiable[370][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit370_0[i][0] ][ unit370_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit370_0[i][2] ][ unit370_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit370_0[i][4] ][ unit370_0[i][5] ] >0);
		X_contra = ( LargeX[370][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit370_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[370][1]=0; L[370][0]=1;}
			satisfiable[370][0]=satisfiable[370][0] & ((x[370] ^ 0) | (x[ unit370_0[i][0] ] ^ unit370_0[i][1]) |(x[ unit370_0[i][2] ] ^ unit370_0[i][3]));
			}
		if(X_contra>0) L[370][0]=2;
		}
	//Check all rules of unit[370][1]
	L[370][1] = LargeX[370][0]>0 ? 1 : 0;
	satisfiable[370][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit370_1[i][0] ][ unit370_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit370_1[i][2] ][ unit370_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit370_1[i][4] ][ unit370_1[i][5] ] >0);
		X_contra = ( LargeX[370][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit370_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[370][0]=0; L[370][1]=1;}
			satisfiable[370][1]=satisfiable[370][1] & ((x[370] ^ 1) | (x[ unit370_1[i][0] ] ^ unit370_1[i][1]) |(x[ unit370_1[i][2] ] ^ unit370_1[i][3]));
			}
		if(X_contra>0) L[370][1]=2;
		}
	//Check all rules of unit[371][0]
	L[371][0] = LargeX[371][1]>0 ? 1 : 0;
	satisfiable[371][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit371_0[i][0] ][ unit371_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit371_0[i][2] ][ unit371_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit371_0[i][4] ][ unit371_0[i][5] ] >0);
		X_contra = ( LargeX[371][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit371_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[371][1]=0; L[371][0]=1;}
			satisfiable[371][0]=satisfiable[371][0] & ((x[371] ^ 0) | (x[ unit371_0[i][0] ] ^ unit371_0[i][1]) |(x[ unit371_0[i][2] ] ^ unit371_0[i][3]));
			}
		if(X_contra>0) L[371][0]=2;
		}
	//Check all rules of unit[371][1]
	L[371][1] = LargeX[371][0]>0 ? 1 : 0;
	satisfiable[371][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit371_1[i][0] ][ unit371_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit371_1[i][2] ][ unit371_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit371_1[i][4] ][ unit371_1[i][5] ] >0);
		X_contra = ( LargeX[371][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit371_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[371][0]=0; L[371][1]=1;}
			satisfiable[371][1]=satisfiable[371][1] & ((x[371] ^ 1) | (x[ unit371_1[i][0] ] ^ unit371_1[i][1]) |(x[ unit371_1[i][2] ] ^ unit371_1[i][3]));
			}
		if(X_contra>0) L[371][1]=2;
		}
	//Check all rules of unit[372][0]
	L[372][0] = LargeX[372][1]>0 ? 1 : 0;
	satisfiable[372][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit372_0[i][0] ][ unit372_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit372_0[i][2] ][ unit372_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit372_0[i][4] ][ unit372_0[i][5] ] >0);
		X_contra = ( LargeX[372][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit372_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[372][1]=0; L[372][0]=1;}
			satisfiable[372][0]=satisfiable[372][0] & ((x[372] ^ 0) | (x[ unit372_0[i][0] ] ^ unit372_0[i][1]) |(x[ unit372_0[i][2] ] ^ unit372_0[i][3]));
			}
		if(X_contra>0) L[372][0]=2;
		}
	//Check all rules of unit[372][1]
	L[372][1] = LargeX[372][0]>0 ? 1 : 0;
	satisfiable[372][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit372_1[i][0] ][ unit372_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit372_1[i][2] ][ unit372_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit372_1[i][4] ][ unit372_1[i][5] ] >0);
		X_contra = ( LargeX[372][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit372_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[372][0]=0; L[372][1]=1;}
			satisfiable[372][1]=satisfiable[372][1] & ((x[372] ^ 1) | (x[ unit372_1[i][0] ] ^ unit372_1[i][1]) |(x[ unit372_1[i][2] ] ^ unit372_1[i][3]));
			}
		if(X_contra>0) L[372][1]=2;
		}
	//Check all rules of unit[373][0]
	L[373][0] = LargeX[373][1]>0 ? 1 : 0;
	satisfiable[373][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit373_0[i][0] ][ unit373_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit373_0[i][2] ][ unit373_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit373_0[i][4] ][ unit373_0[i][5] ] >0);
		X_contra = ( LargeX[373][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit373_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[373][1]=0; L[373][0]=1;}
			satisfiable[373][0]=satisfiable[373][0] & ((x[373] ^ 0) | (x[ unit373_0[i][0] ] ^ unit373_0[i][1]) |(x[ unit373_0[i][2] ] ^ unit373_0[i][3]));
			}
		if(X_contra>0) L[373][0]=2;
		}
	//Check all rules of unit[373][1]
	L[373][1] = LargeX[373][0]>0 ? 1 : 0;
	satisfiable[373][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit373_1[i][0] ][ unit373_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit373_1[i][2] ][ unit373_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit373_1[i][4] ][ unit373_1[i][5] ] >0);
		X_contra = ( LargeX[373][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit373_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[373][0]=0; L[373][1]=1;}
			satisfiable[373][1]=satisfiable[373][1] & ((x[373] ^ 1) | (x[ unit373_1[i][0] ] ^ unit373_1[i][1]) |(x[ unit373_1[i][2] ] ^ unit373_1[i][3]));
			}
		if(X_contra>0) L[373][1]=2;
		}
	//Check all rules of unit[374][0]
	L[374][0] = LargeX[374][1]>0 ? 1 : 0;
	satisfiable[374][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit374_0[i][0] ][ unit374_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit374_0[i][2] ][ unit374_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit374_0[i][4] ][ unit374_0[i][5] ] >0);
		X_contra = ( LargeX[374][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit374_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[374][1]=0; L[374][0]=1;}
			satisfiable[374][0]=satisfiable[374][0] & ((x[374] ^ 0) | (x[ unit374_0[i][0] ] ^ unit374_0[i][1]) |(x[ unit374_0[i][2] ] ^ unit374_0[i][3]));
			}
		if(X_contra>0) L[374][0]=2;
		}
	//Check all rules of unit[374][1]
	L[374][1] = LargeX[374][0]>0 ? 1 : 0;
	satisfiable[374][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit374_1[i][0] ][ unit374_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit374_1[i][2] ][ unit374_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit374_1[i][4] ][ unit374_1[i][5] ] >0);
		X_contra = ( LargeX[374][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit374_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[374][0]=0; L[374][1]=1;}
			satisfiable[374][1]=satisfiable[374][1] & ((x[374] ^ 1) | (x[ unit374_1[i][0] ] ^ unit374_1[i][1]) |(x[ unit374_1[i][2] ] ^ unit374_1[i][3]));
			}
		if(X_contra>0) L[374][1]=2;
		}
	//Check all rules of unit[375][0]
	L[375][0] = LargeX[375][1]>0 ? 1 : 0;
	satisfiable[375][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit375_0[i][0] ][ unit375_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit375_0[i][2] ][ unit375_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit375_0[i][4] ][ unit375_0[i][5] ] >0);
		X_contra = ( LargeX[375][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit375_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[375][1]=0; L[375][0]=1;}
			satisfiable[375][0]=satisfiable[375][0] & ((x[375] ^ 0) | (x[ unit375_0[i][0] ] ^ unit375_0[i][1]) |(x[ unit375_0[i][2] ] ^ unit375_0[i][3]));
			}
		if(X_contra>0) L[375][0]=2;
		}
	//Check all rules of unit[375][1]
	L[375][1] = LargeX[375][0]>0 ? 1 : 0;
	satisfiable[375][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit375_1[i][0] ][ unit375_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit375_1[i][2] ][ unit375_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit375_1[i][4] ][ unit375_1[i][5] ] >0);
		X_contra = ( LargeX[375][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit375_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[375][0]=0; L[375][1]=1;}
			satisfiable[375][1]=satisfiable[375][1] & ((x[375] ^ 1) | (x[ unit375_1[i][0] ] ^ unit375_1[i][1]) |(x[ unit375_1[i][2] ] ^ unit375_1[i][3]));
			}
		if(X_contra>0) L[375][1]=2;
		}
	//Check all rules of unit[376][0]
	L[376][0] = LargeX[376][1]>0 ? 1 : 0;
	satisfiable[376][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit376_0[i][0] ][ unit376_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit376_0[i][2] ][ unit376_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit376_0[i][4] ][ unit376_0[i][5] ] >0);
		X_contra = ( LargeX[376][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit376_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[376][1]=0; L[376][0]=1;}
			satisfiable[376][0]=satisfiable[376][0] & ((x[376] ^ 0) | (x[ unit376_0[i][0] ] ^ unit376_0[i][1]) |(x[ unit376_0[i][2] ] ^ unit376_0[i][3]));
			}
		if(X_contra>0) L[376][0]=2;
		}
	//Check all rules of unit[376][1]
	L[376][1] = LargeX[376][0]>0 ? 1 : 0;
	satisfiable[376][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit376_1[i][0] ][ unit376_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit376_1[i][2] ][ unit376_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit376_1[i][4] ][ unit376_1[i][5] ] >0);
		X_contra = ( LargeX[376][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit376_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[376][0]=0; L[376][1]=1;}
			satisfiable[376][1]=satisfiable[376][1] & ((x[376] ^ 1) | (x[ unit376_1[i][0] ] ^ unit376_1[i][1]) |(x[ unit376_1[i][2] ] ^ unit376_1[i][3]));
			}
		if(X_contra>0) L[376][1]=2;
		}
	//Check all rules of unit[377][0]
	L[377][0] = LargeX[377][1]>0 ? 1 : 0;
	satisfiable[377][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit377_0[i][0] ][ unit377_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit377_0[i][2] ][ unit377_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit377_0[i][4] ][ unit377_0[i][5] ] >0);
		X_contra = ( LargeX[377][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit377_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[377][1]=0; L[377][0]=1;}
			satisfiable[377][0]=satisfiable[377][0] & ((x[377] ^ 0) | (x[ unit377_0[i][0] ] ^ unit377_0[i][1]) |(x[ unit377_0[i][2] ] ^ unit377_0[i][3]));
			}
		if(X_contra>0) L[377][0]=2;
		}
	//Check all rules of unit[377][1]
	L[377][1] = LargeX[377][0]>0 ? 1 : 0;
	satisfiable[377][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit377_1[i][0] ][ unit377_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit377_1[i][2] ][ unit377_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit377_1[i][4] ][ unit377_1[i][5] ] >0);
		X_contra = ( LargeX[377][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit377_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[377][0]=0; L[377][1]=1;}
			satisfiable[377][1]=satisfiable[377][1] & ((x[377] ^ 1) | (x[ unit377_1[i][0] ] ^ unit377_1[i][1]) |(x[ unit377_1[i][2] ] ^ unit377_1[i][3]));
			}
		if(X_contra>0) L[377][1]=2;
		}
	//Check all rules of unit[378][0]
	L[378][0] = LargeX[378][1]>0 ? 1 : 0;
	satisfiable[378][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit378_0[i][0] ][ unit378_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit378_0[i][2] ][ unit378_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit378_0[i][4] ][ unit378_0[i][5] ] >0);
		X_contra = ( LargeX[378][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit378_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[378][1]=0; L[378][0]=1;}
			satisfiable[378][0]=satisfiable[378][0] & ((x[378] ^ 0) | (x[ unit378_0[i][0] ] ^ unit378_0[i][1]) |(x[ unit378_0[i][2] ] ^ unit378_0[i][3]));
			}
		if(X_contra>0) L[378][0]=2;
		}
	//Check all rules of unit[378][1]
	L[378][1] = LargeX[378][0]>0 ? 1 : 0;
	satisfiable[378][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit378_1[i][0] ][ unit378_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit378_1[i][2] ][ unit378_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit378_1[i][4] ][ unit378_1[i][5] ] >0);
		X_contra = ( LargeX[378][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit378_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[378][0]=0; L[378][1]=1;}
			satisfiable[378][1]=satisfiable[378][1] & ((x[378] ^ 1) | (x[ unit378_1[i][0] ] ^ unit378_1[i][1]) |(x[ unit378_1[i][2] ] ^ unit378_1[i][3]));
			}
		if(X_contra>0) L[378][1]=2;
		}
	//Check all rules of unit[379][0]
	L[379][0] = LargeX[379][1]>0 ? 1 : 0;
	satisfiable[379][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit379_0[i][0] ][ unit379_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit379_0[i][2] ][ unit379_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit379_0[i][4] ][ unit379_0[i][5] ] >0);
		X_contra = ( LargeX[379][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit379_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[379][1]=0; L[379][0]=1;}
			satisfiable[379][0]=satisfiable[379][0] & ((x[379] ^ 0) | (x[ unit379_0[i][0] ] ^ unit379_0[i][1]) |(x[ unit379_0[i][2] ] ^ unit379_0[i][3]));
			}
		if(X_contra>0) L[379][0]=2;
		}
	//Check all rules of unit[379][1]
	L[379][1] = LargeX[379][0]>0 ? 1 : 0;
	satisfiable[379][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit379_1[i][0] ][ unit379_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit379_1[i][2] ][ unit379_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit379_1[i][4] ][ unit379_1[i][5] ] >0);
		X_contra = ( LargeX[379][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit379_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[379][0]=0; L[379][1]=1;}
			satisfiable[379][1]=satisfiable[379][1] & ((x[379] ^ 1) | (x[ unit379_1[i][0] ] ^ unit379_1[i][1]) |(x[ unit379_1[i][2] ] ^ unit379_1[i][3]));
			}
		if(X_contra>0) L[379][1]=2;
		}
	//Check all rules of unit[380][0]
	L[380][0] = LargeX[380][1]>0 ? 1 : 0;
	satisfiable[380][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit380_0[i][0] ][ unit380_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit380_0[i][2] ][ unit380_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit380_0[i][4] ][ unit380_0[i][5] ] >0);
		X_contra = ( LargeX[380][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit380_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[380][1]=0; L[380][0]=1;}
			satisfiable[380][0]=satisfiable[380][0] & ((x[380] ^ 0) | (x[ unit380_0[i][0] ] ^ unit380_0[i][1]) |(x[ unit380_0[i][2] ] ^ unit380_0[i][3]));
			}
		if(X_contra>0) L[380][0]=2;
		}
	//Check all rules of unit[380][1]
	L[380][1] = LargeX[380][0]>0 ? 1 : 0;
	satisfiable[380][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit380_1[i][0] ][ unit380_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit380_1[i][2] ][ unit380_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit380_1[i][4] ][ unit380_1[i][5] ] >0);
		X_contra = ( LargeX[380][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit380_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[380][0]=0; L[380][1]=1;}
			satisfiable[380][1]=satisfiable[380][1] & ((x[380] ^ 1) | (x[ unit380_1[i][0] ] ^ unit380_1[i][1]) |(x[ unit380_1[i][2] ] ^ unit380_1[i][3]));
			}
		if(X_contra>0) L[380][1]=2;
		}
	//Check all rules of unit[381][0]
	L[381][0] = LargeX[381][1]>0 ? 1 : 0;
	satisfiable[381][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit381_0[i][0] ][ unit381_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit381_0[i][2] ][ unit381_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit381_0[i][4] ][ unit381_0[i][5] ] >0);
		X_contra = ( LargeX[381][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit381_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[381][1]=0; L[381][0]=1;}
			satisfiable[381][0]=satisfiable[381][0] & ((x[381] ^ 0) | (x[ unit381_0[i][0] ] ^ unit381_0[i][1]) |(x[ unit381_0[i][2] ] ^ unit381_0[i][3]));
			}
		if(X_contra>0) L[381][0]=2;
		}
	//Check all rules of unit[381][1]
	L[381][1] = LargeX[381][0]>0 ? 1 : 0;
	satisfiable[381][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit381_1[i][0] ][ unit381_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit381_1[i][2] ][ unit381_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit381_1[i][4] ][ unit381_1[i][5] ] >0);
		X_contra = ( LargeX[381][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit381_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[381][0]=0; L[381][1]=1;}
			satisfiable[381][1]=satisfiable[381][1] & ((x[381] ^ 1) | (x[ unit381_1[i][0] ] ^ unit381_1[i][1]) |(x[ unit381_1[i][2] ] ^ unit381_1[i][3]));
			}
		if(X_contra>0) L[381][1]=2;
		}
	//Check all rules of unit[382][0]
	L[382][0] = LargeX[382][1]>0 ? 1 : 0;
	satisfiable[382][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit382_0[i][0] ][ unit382_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit382_0[i][2] ][ unit382_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit382_0[i][4] ][ unit382_0[i][5] ] >0);
		X_contra = ( LargeX[382][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit382_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[382][1]=0; L[382][0]=1;}
			satisfiable[382][0]=satisfiable[382][0] & ((x[382] ^ 0) | (x[ unit382_0[i][0] ] ^ unit382_0[i][1]) |(x[ unit382_0[i][2] ] ^ unit382_0[i][3]));
			}
		if(X_contra>0) L[382][0]=2;
		}
	//Check all rules of unit[382][1]
	L[382][1] = LargeX[382][0]>0 ? 1 : 0;
	satisfiable[382][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit382_1[i][0] ][ unit382_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit382_1[i][2] ][ unit382_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit382_1[i][4] ][ unit382_1[i][5] ] >0);
		X_contra = ( LargeX[382][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit382_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[382][0]=0; L[382][1]=1;}
			satisfiable[382][1]=satisfiable[382][1] & ((x[382] ^ 1) | (x[ unit382_1[i][0] ] ^ unit382_1[i][1]) |(x[ unit382_1[i][2] ] ^ unit382_1[i][3]));
			}
		if(X_contra>0) L[382][1]=2;
		}
	//Check all rules of unit[383][0]
	L[383][0] = LargeX[383][1]>0 ? 1 : 0;
	satisfiable[383][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit383_0[i][0] ][ unit383_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit383_0[i][2] ][ unit383_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit383_0[i][4] ][ unit383_0[i][5] ] >0);
		X_contra = ( LargeX[383][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit383_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[383][1]=0; L[383][0]=1;}
			satisfiable[383][0]=satisfiable[383][0] & ((x[383] ^ 0) | (x[ unit383_0[i][0] ] ^ unit383_0[i][1]) |(x[ unit383_0[i][2] ] ^ unit383_0[i][3]));
			}
		if(X_contra>0) L[383][0]=2;
		}
	//Check all rules of unit[383][1]
	L[383][1] = LargeX[383][0]>0 ? 1 : 0;
	satisfiable[383][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit383_1[i][0] ][ unit383_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit383_1[i][2] ][ unit383_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit383_1[i][4] ][ unit383_1[i][5] ] >0);
		X_contra = ( LargeX[383][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit383_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[383][0]=0; L[383][1]=1;}
			satisfiable[383][1]=satisfiable[383][1] & ((x[383] ^ 1) | (x[ unit383_1[i][0] ] ^ unit383_1[i][1]) |(x[ unit383_1[i][2] ] ^ unit383_1[i][3]));
			}
		if(X_contra>0) L[383][1]=2;
		}
	//Check all rules of unit[384][0]
	L[384][0] = LargeX[384][1]>0 ? 1 : 0;
	satisfiable[384][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit384_0[i][0] ][ unit384_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit384_0[i][2] ][ unit384_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit384_0[i][4] ][ unit384_0[i][5] ] >0);
		X_contra = ( LargeX[384][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit384_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[384][1]=0; L[384][0]=1;}
			satisfiable[384][0]=satisfiable[384][0] & ((x[384] ^ 0) | (x[ unit384_0[i][0] ] ^ unit384_0[i][1]) |(x[ unit384_0[i][2] ] ^ unit384_0[i][3]));
			}
		if(X_contra>0) L[384][0]=2;
		}
	//Check all rules of unit[384][1]
	L[384][1] = LargeX[384][0]>0 ? 1 : 0;
	satisfiable[384][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit384_1[i][0] ][ unit384_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit384_1[i][2] ][ unit384_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit384_1[i][4] ][ unit384_1[i][5] ] >0);
		X_contra = ( LargeX[384][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit384_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[384][0]=0; L[384][1]=1;}
			satisfiable[384][1]=satisfiable[384][1] & ((x[384] ^ 1) | (x[ unit384_1[i][0] ] ^ unit384_1[i][1]) |(x[ unit384_1[i][2] ] ^ unit384_1[i][3]));
			}
		if(X_contra>0) L[384][1]=2;
		}
	//Check all rules of unit[385][0]
	L[385][0] = LargeX[385][1]>0 ? 1 : 0;
	satisfiable[385][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit385_0[i][0] ][ unit385_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit385_0[i][2] ][ unit385_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit385_0[i][4] ][ unit385_0[i][5] ] >0);
		X_contra = ( LargeX[385][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit385_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[385][1]=0; L[385][0]=1;}
			satisfiable[385][0]=satisfiable[385][0] & ((x[385] ^ 0) | (x[ unit385_0[i][0] ] ^ unit385_0[i][1]) |(x[ unit385_0[i][2] ] ^ unit385_0[i][3]));
			}
		if(X_contra>0) L[385][0]=2;
		}
	//Check all rules of unit[385][1]
	L[385][1] = LargeX[385][0]>0 ? 1 : 0;
	satisfiable[385][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit385_1[i][0] ][ unit385_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit385_1[i][2] ][ unit385_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit385_1[i][4] ][ unit385_1[i][5] ] >0);
		X_contra = ( LargeX[385][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit385_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[385][0]=0; L[385][1]=1;}
			satisfiable[385][1]=satisfiable[385][1] & ((x[385] ^ 1) | (x[ unit385_1[i][0] ] ^ unit385_1[i][1]) |(x[ unit385_1[i][2] ] ^ unit385_1[i][3]));
			}
		if(X_contra>0) L[385][1]=2;
		}
	//Check all rules of unit[386][0]
	L[386][0] = LargeX[386][1]>0 ? 1 : 0;
	satisfiable[386][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit386_0[i][0] ][ unit386_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit386_0[i][2] ][ unit386_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit386_0[i][4] ][ unit386_0[i][5] ] >0);
		X_contra = ( LargeX[386][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit386_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[386][1]=0; L[386][0]=1;}
			satisfiable[386][0]=satisfiable[386][0] & ((x[386] ^ 0) | (x[ unit386_0[i][0] ] ^ unit386_0[i][1]) |(x[ unit386_0[i][2] ] ^ unit386_0[i][3]));
			}
		if(X_contra>0) L[386][0]=2;
		}
	//Check all rules of unit[386][1]
	L[386][1] = LargeX[386][0]>0 ? 1 : 0;
	satisfiable[386][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit386_1[i][0] ][ unit386_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit386_1[i][2] ][ unit386_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit386_1[i][4] ][ unit386_1[i][5] ] >0);
		X_contra = ( LargeX[386][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit386_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[386][0]=0; L[386][1]=1;}
			satisfiable[386][1]=satisfiable[386][1] & ((x[386] ^ 1) | (x[ unit386_1[i][0] ] ^ unit386_1[i][1]) |(x[ unit386_1[i][2] ] ^ unit386_1[i][3]));
			}
		if(X_contra>0) L[386][1]=2;
		}
	//Check all rules of unit[387][0]
	L[387][0] = LargeX[387][1]>0 ? 1 : 0;
	satisfiable[387][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit387_0[i][0] ][ unit387_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit387_0[i][2] ][ unit387_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit387_0[i][4] ][ unit387_0[i][5] ] >0);
		X_contra = ( LargeX[387][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit387_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[387][1]=0; L[387][0]=1;}
			satisfiable[387][0]=satisfiable[387][0] & ((x[387] ^ 0) | (x[ unit387_0[i][0] ] ^ unit387_0[i][1]) |(x[ unit387_0[i][2] ] ^ unit387_0[i][3]));
			}
		if(X_contra>0) L[387][0]=2;
		}
	//Check all rules of unit[387][1]
	L[387][1] = LargeX[387][0]>0 ? 1 : 0;
	satisfiable[387][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit387_1[i][0] ][ unit387_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit387_1[i][2] ][ unit387_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit387_1[i][4] ][ unit387_1[i][5] ] >0);
		X_contra = ( LargeX[387][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit387_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[387][0]=0; L[387][1]=1;}
			satisfiable[387][1]=satisfiable[387][1] & ((x[387] ^ 1) | (x[ unit387_1[i][0] ] ^ unit387_1[i][1]) |(x[ unit387_1[i][2] ] ^ unit387_1[i][3]));
			}
		if(X_contra>0) L[387][1]=2;
		}
	//Check all rules of unit[388][0]
	L[388][0] = LargeX[388][1]>0 ? 1 : 0;
	satisfiable[388][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit388_0[i][0] ][ unit388_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit388_0[i][2] ][ unit388_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit388_0[i][4] ][ unit388_0[i][5] ] >0);
		X_contra = ( LargeX[388][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit388_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[388][1]=0; L[388][0]=1;}
			satisfiable[388][0]=satisfiable[388][0] & ((x[388] ^ 0) | (x[ unit388_0[i][0] ] ^ unit388_0[i][1]) |(x[ unit388_0[i][2] ] ^ unit388_0[i][3]));
			}
		if(X_contra>0) L[388][0]=2;
		}
	//Check all rules of unit[388][1]
	L[388][1] = LargeX[388][0]>0 ? 1 : 0;
	satisfiable[388][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit388_1[i][0] ][ unit388_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit388_1[i][2] ][ unit388_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit388_1[i][4] ][ unit388_1[i][5] ] >0);
		X_contra = ( LargeX[388][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit388_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[388][0]=0; L[388][1]=1;}
			satisfiable[388][1]=satisfiable[388][1] & ((x[388] ^ 1) | (x[ unit388_1[i][0] ] ^ unit388_1[i][1]) |(x[ unit388_1[i][2] ] ^ unit388_1[i][3]));
			}
		if(X_contra>0) L[388][1]=2;
		}
	//Check all rules of unit[389][0]
	L[389][0] = LargeX[389][1]>0 ? 1 : 0;
	satisfiable[389][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit389_0[i][0] ][ unit389_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit389_0[i][2] ][ unit389_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit389_0[i][4] ][ unit389_0[i][5] ] >0);
		X_contra = ( LargeX[389][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit389_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[389][1]=0; L[389][0]=1;}
			satisfiable[389][0]=satisfiable[389][0] & ((x[389] ^ 0) | (x[ unit389_0[i][0] ] ^ unit389_0[i][1]) |(x[ unit389_0[i][2] ] ^ unit389_0[i][3]));
			}
		if(X_contra>0) L[389][0]=2;
		}
	//Check all rules of unit[389][1]
	L[389][1] = LargeX[389][0]>0 ? 1 : 0;
	satisfiable[389][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit389_1[i][0] ][ unit389_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit389_1[i][2] ][ unit389_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit389_1[i][4] ][ unit389_1[i][5] ] >0);
		X_contra = ( LargeX[389][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit389_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[389][0]=0; L[389][1]=1;}
			satisfiable[389][1]=satisfiable[389][1] & ((x[389] ^ 1) | (x[ unit389_1[i][0] ] ^ unit389_1[i][1]) |(x[ unit389_1[i][2] ] ^ unit389_1[i][3]));
			}
		if(X_contra>0) L[389][1]=2;
		}
	//Check all rules of unit[390][0]
	L[390][0] = LargeX[390][1]>0 ? 1 : 0;
	satisfiable[390][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit390_0[i][0] ][ unit390_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit390_0[i][2] ][ unit390_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit390_0[i][4] ][ unit390_0[i][5] ] >0);
		X_contra = ( LargeX[390][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit390_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[390][1]=0; L[390][0]=1;}
			satisfiable[390][0]=satisfiable[390][0] & ((x[390] ^ 0) | (x[ unit390_0[i][0] ] ^ unit390_0[i][1]) |(x[ unit390_0[i][2] ] ^ unit390_0[i][3]));
			}
		if(X_contra>0) L[390][0]=2;
		}
	//Check all rules of unit[390][1]
	L[390][1] = LargeX[390][0]>0 ? 1 : 0;
	satisfiable[390][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit390_1[i][0] ][ unit390_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit390_1[i][2] ][ unit390_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit390_1[i][4] ][ unit390_1[i][5] ] >0);
		X_contra = ( LargeX[390][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit390_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[390][0]=0; L[390][1]=1;}
			satisfiable[390][1]=satisfiable[390][1] & ((x[390] ^ 1) | (x[ unit390_1[i][0] ] ^ unit390_1[i][1]) |(x[ unit390_1[i][2] ] ^ unit390_1[i][3]));
			}
		if(X_contra>0) L[390][1]=2;
		}
	//Check all rules of unit[391][0]
	L[391][0] = LargeX[391][1]>0 ? 1 : 0;
	satisfiable[391][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit391_0[i][0] ][ unit391_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit391_0[i][2] ][ unit391_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit391_0[i][4] ][ unit391_0[i][5] ] >0);
		X_contra = ( LargeX[391][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit391_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[391][1]=0; L[391][0]=1;}
			satisfiable[391][0]=satisfiable[391][0] & ((x[391] ^ 0) | (x[ unit391_0[i][0] ] ^ unit391_0[i][1]) |(x[ unit391_0[i][2] ] ^ unit391_0[i][3]));
			}
		if(X_contra>0) L[391][0]=2;
		}
	//Check all rules of unit[391][1]
	L[391][1] = LargeX[391][0]>0 ? 1 : 0;
	satisfiable[391][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit391_1[i][0] ][ unit391_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit391_1[i][2] ][ unit391_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit391_1[i][4] ][ unit391_1[i][5] ] >0);
		X_contra = ( LargeX[391][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit391_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[391][0]=0; L[391][1]=1;}
			satisfiable[391][1]=satisfiable[391][1] & ((x[391] ^ 1) | (x[ unit391_1[i][0] ] ^ unit391_1[i][1]) |(x[ unit391_1[i][2] ] ^ unit391_1[i][3]));
			}
		if(X_contra>0) L[391][1]=2;
		}
	//Check all rules of unit[392][0]
	L[392][0] = LargeX[392][1]>0 ? 1 : 0;
	satisfiable[392][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit392_0[i][0] ][ unit392_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit392_0[i][2] ][ unit392_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit392_0[i][4] ][ unit392_0[i][5] ] >0);
		X_contra = ( LargeX[392][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit392_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[392][1]=0; L[392][0]=1;}
			satisfiable[392][0]=satisfiable[392][0] & ((x[392] ^ 0) | (x[ unit392_0[i][0] ] ^ unit392_0[i][1]) |(x[ unit392_0[i][2] ] ^ unit392_0[i][3]));
			}
		if(X_contra>0) L[392][0]=2;
		}
	//Check all rules of unit[392][1]
	L[392][1] = LargeX[392][0]>0 ? 1 : 0;
	satisfiable[392][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit392_1[i][0] ][ unit392_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit392_1[i][2] ][ unit392_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit392_1[i][4] ][ unit392_1[i][5] ] >0);
		X_contra = ( LargeX[392][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit392_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[392][0]=0; L[392][1]=1;}
			satisfiable[392][1]=satisfiable[392][1] & ((x[392] ^ 1) | (x[ unit392_1[i][0] ] ^ unit392_1[i][1]) |(x[ unit392_1[i][2] ] ^ unit392_1[i][3]));
			}
		if(X_contra>0) L[392][1]=2;
		}
	//Check all rules of unit[393][0]
	L[393][0] = LargeX[393][1]>0 ? 1 : 0;
	satisfiable[393][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit393_0[i][0] ][ unit393_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit393_0[i][2] ][ unit393_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit393_0[i][4] ][ unit393_0[i][5] ] >0);
		X_contra = ( LargeX[393][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit393_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[393][1]=0; L[393][0]=1;}
			satisfiable[393][0]=satisfiable[393][0] & ((x[393] ^ 0) | (x[ unit393_0[i][0] ] ^ unit393_0[i][1]) |(x[ unit393_0[i][2] ] ^ unit393_0[i][3]));
			}
		if(X_contra>0) L[393][0]=2;
		}
	//Check all rules of unit[393][1]
	L[393][1] = LargeX[393][0]>0 ? 1 : 0;
	satisfiable[393][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit393_1[i][0] ][ unit393_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit393_1[i][2] ][ unit393_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit393_1[i][4] ][ unit393_1[i][5] ] >0);
		X_contra = ( LargeX[393][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit393_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[393][0]=0; L[393][1]=1;}
			satisfiable[393][1]=satisfiable[393][1] & ((x[393] ^ 1) | (x[ unit393_1[i][0] ] ^ unit393_1[i][1]) |(x[ unit393_1[i][2] ] ^ unit393_1[i][3]));
			}
		if(X_contra>0) L[393][1]=2;
		}
	//Check all rules of unit[394][0]
	L[394][0] = LargeX[394][1]>0 ? 1 : 0;
	satisfiable[394][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit394_0[i][0] ][ unit394_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit394_0[i][2] ][ unit394_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit394_0[i][4] ][ unit394_0[i][5] ] >0);
		X_contra = ( LargeX[394][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit394_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[394][1]=0; L[394][0]=1;}
			satisfiable[394][0]=satisfiable[394][0] & ((x[394] ^ 0) | (x[ unit394_0[i][0] ] ^ unit394_0[i][1]) |(x[ unit394_0[i][2] ] ^ unit394_0[i][3]));
			}
		if(X_contra>0) L[394][0]=2;
		}
	//Check all rules of unit[394][1]
	L[394][1] = LargeX[394][0]>0 ? 1 : 0;
	satisfiable[394][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit394_1[i][0] ][ unit394_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit394_1[i][2] ][ unit394_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit394_1[i][4] ][ unit394_1[i][5] ] >0);
		X_contra = ( LargeX[394][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit394_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[394][0]=0; L[394][1]=1;}
			satisfiable[394][1]=satisfiable[394][1] & ((x[394] ^ 1) | (x[ unit394_1[i][0] ] ^ unit394_1[i][1]) |(x[ unit394_1[i][2] ] ^ unit394_1[i][3]));
			}
		if(X_contra>0) L[394][1]=2;
		}
	//Check all rules of unit[395][0]
	L[395][0] = LargeX[395][1]>0 ? 1 : 0;
	satisfiable[395][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit395_0[i][0] ][ unit395_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit395_0[i][2] ][ unit395_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit395_0[i][4] ][ unit395_0[i][5] ] >0);
		X_contra = ( LargeX[395][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit395_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[395][1]=0; L[395][0]=1;}
			satisfiable[395][0]=satisfiable[395][0] & ((x[395] ^ 0) | (x[ unit395_0[i][0] ] ^ unit395_0[i][1]) |(x[ unit395_0[i][2] ] ^ unit395_0[i][3]));
			}
		if(X_contra>0) L[395][0]=2;
		}
	//Check all rules of unit[395][1]
	L[395][1] = LargeX[395][0]>0 ? 1 : 0;
	satisfiable[395][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit395_1[i][0] ][ unit395_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit395_1[i][2] ][ unit395_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit395_1[i][4] ][ unit395_1[i][5] ] >0);
		X_contra = ( LargeX[395][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit395_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[395][0]=0; L[395][1]=1;}
			satisfiable[395][1]=satisfiable[395][1] & ((x[395] ^ 1) | (x[ unit395_1[i][0] ] ^ unit395_1[i][1]) |(x[ unit395_1[i][2] ] ^ unit395_1[i][3]));
			}
		if(X_contra>0) L[395][1]=2;
		}
	//Check all rules of unit[396][0]
	L[396][0] = LargeX[396][1]>0 ? 1 : 0;
	satisfiable[396][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit396_0[i][0] ][ unit396_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit396_0[i][2] ][ unit396_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit396_0[i][4] ][ unit396_0[i][5] ] >0);
		X_contra = ( LargeX[396][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit396_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[396][1]=0; L[396][0]=1;}
			satisfiable[396][0]=satisfiable[396][0] & ((x[396] ^ 0) | (x[ unit396_0[i][0] ] ^ unit396_0[i][1]) |(x[ unit396_0[i][2] ] ^ unit396_0[i][3]));
			}
		if(X_contra>0) L[396][0]=2;
		}
	//Check all rules of unit[396][1]
	L[396][1] = LargeX[396][0]>0 ? 1 : 0;
	satisfiable[396][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit396_1[i][0] ][ unit396_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit396_1[i][2] ][ unit396_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit396_1[i][4] ][ unit396_1[i][5] ] >0);
		X_contra = ( LargeX[396][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit396_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[396][0]=0; L[396][1]=1;}
			satisfiable[396][1]=satisfiable[396][1] & ((x[396] ^ 1) | (x[ unit396_1[i][0] ] ^ unit396_1[i][1]) |(x[ unit396_1[i][2] ] ^ unit396_1[i][3]));
			}
		if(X_contra>0) L[396][1]=2;
		}
	//Check all rules of unit[397][0]
	L[397][0] = LargeX[397][1]>0 ? 1 : 0;
	satisfiable[397][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit397_0[i][0] ][ unit397_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit397_0[i][2] ][ unit397_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit397_0[i][4] ][ unit397_0[i][5] ] >0);
		X_contra = ( LargeX[397][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit397_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[397][1]=0; L[397][0]=1;}
			satisfiable[397][0]=satisfiable[397][0] & ((x[397] ^ 0) | (x[ unit397_0[i][0] ] ^ unit397_0[i][1]) |(x[ unit397_0[i][2] ] ^ unit397_0[i][3]));
			}
		if(X_contra>0) L[397][0]=2;
		}
	//Check all rules of unit[397][1]
	L[397][1] = LargeX[397][0]>0 ? 1 : 0;
	satisfiable[397][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit397_1[i][0] ][ unit397_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit397_1[i][2] ][ unit397_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit397_1[i][4] ][ unit397_1[i][5] ] >0);
		X_contra = ( LargeX[397][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit397_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[397][0]=0; L[397][1]=1;}
			satisfiable[397][1]=satisfiable[397][1] & ((x[397] ^ 1) | (x[ unit397_1[i][0] ] ^ unit397_1[i][1]) |(x[ unit397_1[i][2] ] ^ unit397_1[i][3]));
			}
		if(X_contra>0) L[397][1]=2;
		}
	//Check all rules of unit[398][0]
	L[398][0] = LargeX[398][1]>0 ? 1 : 0;
	satisfiable[398][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit398_0[i][0] ][ unit398_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit398_0[i][2] ][ unit398_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit398_0[i][4] ][ unit398_0[i][5] ] >0);
		X_contra = ( LargeX[398][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit398_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[398][1]=0; L[398][0]=1;}
			satisfiable[398][0]=satisfiable[398][0] & ((x[398] ^ 0) | (x[ unit398_0[i][0] ] ^ unit398_0[i][1]) |(x[ unit398_0[i][2] ] ^ unit398_0[i][3]));
			}
		if(X_contra>0) L[398][0]=2;
		}
	//Check all rules of unit[398][1]
	L[398][1] = LargeX[398][0]>0 ? 1 : 0;
	satisfiable[398][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit398_1[i][0] ][ unit398_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit398_1[i][2] ][ unit398_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit398_1[i][4] ][ unit398_1[i][5] ] >0);
		X_contra = ( LargeX[398][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit398_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[398][0]=0; L[398][1]=1;}
			satisfiable[398][1]=satisfiable[398][1] & ((x[398] ^ 1) | (x[ unit398_1[i][0] ] ^ unit398_1[i][1]) |(x[ unit398_1[i][2] ] ^ unit398_1[i][3]));
			}
		if(X_contra>0) L[398][1]=2;
		}
	//Check all rules of unit[399][0]
	L[399][0] = LargeX[399][1]>0 ? 1 : 0;
	satisfiable[399][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit399_0[i][0] ][ unit399_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit399_0[i][2] ][ unit399_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit399_0[i][4] ][ unit399_0[i][5] ] >0);
		X_contra = ( LargeX[399][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit399_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[399][1]=0; L[399][0]=1;}
			satisfiable[399][0]=satisfiable[399][0] & ((x[399] ^ 0) | (x[ unit399_0[i][0] ] ^ unit399_0[i][1]) |(x[ unit399_0[i][2] ] ^ unit399_0[i][3]));
			}
		if(X_contra>0) L[399][0]=2;
		}
	//Check all rules of unit[399][1]
	L[399][1] = LargeX[399][0]>0 ? 1 : 0;
	satisfiable[399][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit399_1[i][0] ][ unit399_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit399_1[i][2] ][ unit399_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit399_1[i][4] ][ unit399_1[i][5] ] >0);
		X_contra = ( LargeX[399][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit399_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[399][0]=0; L[399][1]=1;}
			satisfiable[399][1]=satisfiable[399][1] & ((x[399] ^ 1) | (x[ unit399_1[i][0] ] ^ unit399_1[i][1]) |(x[ unit399_1[i][2] ] ^ unit399_1[i][3]));
			}
		if(X_contra>0) L[399][1]=2;
		}
	//Check all rules of unit[400][0]
	L[400][0] = LargeX[400][1]>0 ? 1 : 0;
	satisfiable[400][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit400_0[i][0] ][ unit400_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit400_0[i][2] ][ unit400_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit400_0[i][4] ][ unit400_0[i][5] ] >0);
		X_contra = ( LargeX[400][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit400_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[400][1]=0; L[400][0]=1;}
			satisfiable[400][0]=satisfiable[400][0] & ((x[400] ^ 0) | (x[ unit400_0[i][0] ] ^ unit400_0[i][1]) |(x[ unit400_0[i][2] ] ^ unit400_0[i][3]));
			}
		if(X_contra>0) L[400][0]=2;
		}
	//Check all rules of unit[400][1]
	L[400][1] = LargeX[400][0]>0 ? 1 : 0;
	satisfiable[400][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit400_1[i][0] ][ unit400_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit400_1[i][2] ][ unit400_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit400_1[i][4] ][ unit400_1[i][5] ] >0);
		X_contra = ( LargeX[400][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit400_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[400][0]=0; L[400][1]=1;}
			satisfiable[400][1]=satisfiable[400][1] & ((x[400] ^ 1) | (x[ unit400_1[i][0] ] ^ unit400_1[i][1]) |(x[ unit400_1[i][2] ] ^ unit400_1[i][3]));
			}
		if(X_contra>0) L[400][1]=2;
		}
	//Check all rules of unit[401][0]
	L[401][0] = LargeX[401][1]>0 ? 1 : 0;
	satisfiable[401][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit401_0[i][0] ][ unit401_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit401_0[i][2] ][ unit401_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit401_0[i][4] ][ unit401_0[i][5] ] >0);
		X_contra = ( LargeX[401][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit401_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[401][1]=0; L[401][0]=1;}
			satisfiable[401][0]=satisfiable[401][0] & ((x[401] ^ 0) | (x[ unit401_0[i][0] ] ^ unit401_0[i][1]) |(x[ unit401_0[i][2] ] ^ unit401_0[i][3]));
			}
		if(X_contra>0) L[401][0]=2;
		}
	//Check all rules of unit[401][1]
	L[401][1] = LargeX[401][0]>0 ? 1 : 0;
	satisfiable[401][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit401_1[i][0] ][ unit401_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit401_1[i][2] ][ unit401_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit401_1[i][4] ][ unit401_1[i][5] ] >0);
		X_contra = ( LargeX[401][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit401_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[401][0]=0; L[401][1]=1;}
			satisfiable[401][1]=satisfiable[401][1] & ((x[401] ^ 1) | (x[ unit401_1[i][0] ] ^ unit401_1[i][1]) |(x[ unit401_1[i][2] ] ^ unit401_1[i][3]));
			}
		if(X_contra>0) L[401][1]=2;
		}
	//Check all rules of unit[402][0]
	L[402][0] = LargeX[402][1]>0 ? 1 : 0;
	satisfiable[402][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit402_0[i][0] ][ unit402_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit402_0[i][2] ][ unit402_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit402_0[i][4] ][ unit402_0[i][5] ] >0);
		X_contra = ( LargeX[402][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit402_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[402][1]=0; L[402][0]=1;}
			satisfiable[402][0]=satisfiable[402][0] & ((x[402] ^ 0) | (x[ unit402_0[i][0] ] ^ unit402_0[i][1]) |(x[ unit402_0[i][2] ] ^ unit402_0[i][3]));
			}
		if(X_contra>0) L[402][0]=2;
		}
	//Check all rules of unit[402][1]
	L[402][1] = LargeX[402][0]>0 ? 1 : 0;
	satisfiable[402][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit402_1[i][0] ][ unit402_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit402_1[i][2] ][ unit402_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit402_1[i][4] ][ unit402_1[i][5] ] >0);
		X_contra = ( LargeX[402][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit402_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[402][0]=0; L[402][1]=1;}
			satisfiable[402][1]=satisfiable[402][1] & ((x[402] ^ 1) | (x[ unit402_1[i][0] ] ^ unit402_1[i][1]) |(x[ unit402_1[i][2] ] ^ unit402_1[i][3]));
			}
		if(X_contra>0) L[402][1]=2;
		}
	//Check all rules of unit[403][0]
	L[403][0] = LargeX[403][1]>0 ? 1 : 0;
	satisfiable[403][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit403_0[i][0] ][ unit403_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit403_0[i][2] ][ unit403_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit403_0[i][4] ][ unit403_0[i][5] ] >0);
		X_contra = ( LargeX[403][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit403_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[403][1]=0; L[403][0]=1;}
			satisfiable[403][0]=satisfiable[403][0] & ((x[403] ^ 0) | (x[ unit403_0[i][0] ] ^ unit403_0[i][1]) |(x[ unit403_0[i][2] ] ^ unit403_0[i][3]));
			}
		if(X_contra>0) L[403][0]=2;
		}
	//Check all rules of unit[403][1]
	L[403][1] = LargeX[403][0]>0 ? 1 : 0;
	satisfiable[403][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit403_1[i][0] ][ unit403_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit403_1[i][2] ][ unit403_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit403_1[i][4] ][ unit403_1[i][5] ] >0);
		X_contra = ( LargeX[403][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit403_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[403][0]=0; L[403][1]=1;}
			satisfiable[403][1]=satisfiable[403][1] & ((x[403] ^ 1) | (x[ unit403_1[i][0] ] ^ unit403_1[i][1]) |(x[ unit403_1[i][2] ] ^ unit403_1[i][3]));
			}
		if(X_contra>0) L[403][1]=2;
		}
	//Check all rules of unit[404][0]
	L[404][0] = LargeX[404][1]>0 ? 1 : 0;
	satisfiable[404][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit404_0[i][0] ][ unit404_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit404_0[i][2] ][ unit404_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit404_0[i][4] ][ unit404_0[i][5] ] >0);
		X_contra = ( LargeX[404][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit404_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[404][1]=0; L[404][0]=1;}
			satisfiable[404][0]=satisfiable[404][0] & ((x[404] ^ 0) | (x[ unit404_0[i][0] ] ^ unit404_0[i][1]) |(x[ unit404_0[i][2] ] ^ unit404_0[i][3]));
			}
		if(X_contra>0) L[404][0]=2;
		}
	//Check all rules of unit[404][1]
	L[404][1] = LargeX[404][0]>0 ? 1 : 0;
	satisfiable[404][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit404_1[i][0] ][ unit404_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit404_1[i][2] ][ unit404_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit404_1[i][4] ][ unit404_1[i][5] ] >0);
		X_contra = ( LargeX[404][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit404_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[404][0]=0; L[404][1]=1;}
			satisfiable[404][1]=satisfiable[404][1] & ((x[404] ^ 1) | (x[ unit404_1[i][0] ] ^ unit404_1[i][1]) |(x[ unit404_1[i][2] ] ^ unit404_1[i][3]));
			}
		if(X_contra>0) L[404][1]=2;
		}
	//Check all rules of unit[405][0]
	L[405][0] = LargeX[405][1]>0 ? 1 : 0;
	satisfiable[405][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit405_0[i][0] ][ unit405_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit405_0[i][2] ][ unit405_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit405_0[i][4] ][ unit405_0[i][5] ] >0);
		X_contra = ( LargeX[405][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit405_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[405][1]=0; L[405][0]=1;}
			satisfiable[405][0]=satisfiable[405][0] & ((x[405] ^ 0) | (x[ unit405_0[i][0] ] ^ unit405_0[i][1]) |(x[ unit405_0[i][2] ] ^ unit405_0[i][3]));
			}
		if(X_contra>0) L[405][0]=2;
		}
	//Check all rules of unit[405][1]
	L[405][1] = LargeX[405][0]>0 ? 1 : 0;
	satisfiable[405][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit405_1[i][0] ][ unit405_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit405_1[i][2] ][ unit405_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit405_1[i][4] ][ unit405_1[i][5] ] >0);
		X_contra = ( LargeX[405][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit405_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[405][0]=0; L[405][1]=1;}
			satisfiable[405][1]=satisfiable[405][1] & ((x[405] ^ 1) | (x[ unit405_1[i][0] ] ^ unit405_1[i][1]) |(x[ unit405_1[i][2] ] ^ unit405_1[i][3]));
			}
		if(X_contra>0) L[405][1]=2;
		}
	//Check all rules of unit[406][0]
	L[406][0] = LargeX[406][1]>0 ? 1 : 0;
	satisfiable[406][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit406_0[i][0] ][ unit406_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit406_0[i][2] ][ unit406_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit406_0[i][4] ][ unit406_0[i][5] ] >0);
		X_contra = ( LargeX[406][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit406_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[406][1]=0; L[406][0]=1;}
			satisfiable[406][0]=satisfiable[406][0] & ((x[406] ^ 0) | (x[ unit406_0[i][0] ] ^ unit406_0[i][1]) |(x[ unit406_0[i][2] ] ^ unit406_0[i][3]));
			}
		if(X_contra>0) L[406][0]=2;
		}
	//Check all rules of unit[406][1]
	L[406][1] = LargeX[406][0]>0 ? 1 : 0;
	satisfiable[406][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit406_1[i][0] ][ unit406_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit406_1[i][2] ][ unit406_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit406_1[i][4] ][ unit406_1[i][5] ] >0);
		X_contra = ( LargeX[406][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit406_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[406][0]=0; L[406][1]=1;}
			satisfiable[406][1]=satisfiable[406][1] & ((x[406] ^ 1) | (x[ unit406_1[i][0] ] ^ unit406_1[i][1]) |(x[ unit406_1[i][2] ] ^ unit406_1[i][3]));
			}
		if(X_contra>0) L[406][1]=2;
		}
	//Check all rules of unit[407][0]
	L[407][0] = LargeX[407][1]>0 ? 1 : 0;
	satisfiable[407][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit407_0[i][0] ][ unit407_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit407_0[i][2] ][ unit407_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit407_0[i][4] ][ unit407_0[i][5] ] >0);
		X_contra = ( LargeX[407][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit407_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[407][1]=0; L[407][0]=1;}
			satisfiable[407][0]=satisfiable[407][0] & ((x[407] ^ 0) | (x[ unit407_0[i][0] ] ^ unit407_0[i][1]) |(x[ unit407_0[i][2] ] ^ unit407_0[i][3]));
			}
		if(X_contra>0) L[407][0]=2;
		}
	//Check all rules of unit[407][1]
	L[407][1] = LargeX[407][0]>0 ? 1 : 0;
	satisfiable[407][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit407_1[i][0] ][ unit407_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit407_1[i][2] ][ unit407_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit407_1[i][4] ][ unit407_1[i][5] ] >0);
		X_contra = ( LargeX[407][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit407_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[407][0]=0; L[407][1]=1;}
			satisfiable[407][1]=satisfiable[407][1] & ((x[407] ^ 1) | (x[ unit407_1[i][0] ] ^ unit407_1[i][1]) |(x[ unit407_1[i][2] ] ^ unit407_1[i][3]));
			}
		if(X_contra>0) L[407][1]=2;
		}
	//Check all rules of unit[408][0]
	L[408][0] = LargeX[408][1]>0 ? 1 : 0;
	satisfiable[408][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit408_0[i][0] ][ unit408_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit408_0[i][2] ][ unit408_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit408_0[i][4] ][ unit408_0[i][5] ] >0);
		X_contra = ( LargeX[408][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit408_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[408][1]=0; L[408][0]=1;}
			satisfiable[408][0]=satisfiable[408][0] & ((x[408] ^ 0) | (x[ unit408_0[i][0] ] ^ unit408_0[i][1]) |(x[ unit408_0[i][2] ] ^ unit408_0[i][3]));
			}
		if(X_contra>0) L[408][0]=2;
		}
	//Check all rules of unit[408][1]
	L[408][1] = LargeX[408][0]>0 ? 1 : 0;
	satisfiable[408][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit408_1[i][0] ][ unit408_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit408_1[i][2] ][ unit408_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit408_1[i][4] ][ unit408_1[i][5] ] >0);
		X_contra = ( LargeX[408][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit408_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[408][0]=0; L[408][1]=1;}
			satisfiable[408][1]=satisfiable[408][1] & ((x[408] ^ 1) | (x[ unit408_1[i][0] ] ^ unit408_1[i][1]) |(x[ unit408_1[i][2] ] ^ unit408_1[i][3]));
			}
		if(X_contra>0) L[408][1]=2;
		}
	//Check all rules of unit[409][0]
	L[409][0] = LargeX[409][1]>0 ? 1 : 0;
	satisfiable[409][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit409_0[i][0] ][ unit409_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit409_0[i][2] ][ unit409_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit409_0[i][4] ][ unit409_0[i][5] ] >0);
		X_contra = ( LargeX[409][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit409_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[409][1]=0; L[409][0]=1;}
			satisfiable[409][0]=satisfiable[409][0] & ((x[409] ^ 0) | (x[ unit409_0[i][0] ] ^ unit409_0[i][1]) |(x[ unit409_0[i][2] ] ^ unit409_0[i][3]));
			}
		if(X_contra>0) L[409][0]=2;
		}
	//Check all rules of unit[409][1]
	L[409][1] = LargeX[409][0]>0 ? 1 : 0;
	satisfiable[409][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit409_1[i][0] ][ unit409_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit409_1[i][2] ][ unit409_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit409_1[i][4] ][ unit409_1[i][5] ] >0);
		X_contra = ( LargeX[409][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit409_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[409][0]=0; L[409][1]=1;}
			satisfiable[409][1]=satisfiable[409][1] & ((x[409] ^ 1) | (x[ unit409_1[i][0] ] ^ unit409_1[i][1]) |(x[ unit409_1[i][2] ] ^ unit409_1[i][3]));
			}
		if(X_contra>0) L[409][1]=2;
		}
	//Check all rules of unit[410][0]
	L[410][0] = LargeX[410][1]>0 ? 1 : 0;
	satisfiable[410][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit410_0[i][0] ][ unit410_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit410_0[i][2] ][ unit410_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit410_0[i][4] ][ unit410_0[i][5] ] >0);
		X_contra = ( LargeX[410][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit410_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[410][1]=0; L[410][0]=1;}
			satisfiable[410][0]=satisfiable[410][0] & ((x[410] ^ 0) | (x[ unit410_0[i][0] ] ^ unit410_0[i][1]) |(x[ unit410_0[i][2] ] ^ unit410_0[i][3]));
			}
		if(X_contra>0) L[410][0]=2;
		}
	//Check all rules of unit[410][1]
	L[410][1] = LargeX[410][0]>0 ? 1 : 0;
	satisfiable[410][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit410_1[i][0] ][ unit410_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit410_1[i][2] ][ unit410_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit410_1[i][4] ][ unit410_1[i][5] ] >0);
		X_contra = ( LargeX[410][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit410_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[410][0]=0; L[410][1]=1;}
			satisfiable[410][1]=satisfiable[410][1] & ((x[410] ^ 1) | (x[ unit410_1[i][0] ] ^ unit410_1[i][1]) |(x[ unit410_1[i][2] ] ^ unit410_1[i][3]));
			}
		if(X_contra>0) L[410][1]=2;
		}
	//Check all rules of unit[411][0]
	L[411][0] = LargeX[411][1]>0 ? 1 : 0;
	satisfiable[411][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit411_0[i][0] ][ unit411_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit411_0[i][2] ][ unit411_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit411_0[i][4] ][ unit411_0[i][5] ] >0);
		X_contra = ( LargeX[411][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit411_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[411][1]=0; L[411][0]=1;}
			satisfiable[411][0]=satisfiable[411][0] & ((x[411] ^ 0) | (x[ unit411_0[i][0] ] ^ unit411_0[i][1]) |(x[ unit411_0[i][2] ] ^ unit411_0[i][3]));
			}
		if(X_contra>0) L[411][0]=2;
		}
	//Check all rules of unit[411][1]
	L[411][1] = LargeX[411][0]>0 ? 1 : 0;
	satisfiable[411][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit411_1[i][0] ][ unit411_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit411_1[i][2] ][ unit411_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit411_1[i][4] ][ unit411_1[i][5] ] >0);
		X_contra = ( LargeX[411][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit411_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[411][0]=0; L[411][1]=1;}
			satisfiable[411][1]=satisfiable[411][1] & ((x[411] ^ 1) | (x[ unit411_1[i][0] ] ^ unit411_1[i][1]) |(x[ unit411_1[i][2] ] ^ unit411_1[i][3]));
			}
		if(X_contra>0) L[411][1]=2;
		}
	//Check all rules of unit[412][0]
	L[412][0] = LargeX[412][1]>0 ? 1 : 0;
	satisfiable[412][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit412_0[i][0] ][ unit412_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit412_0[i][2] ][ unit412_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit412_0[i][4] ][ unit412_0[i][5] ] >0);
		X_contra = ( LargeX[412][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit412_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[412][1]=0; L[412][0]=1;}
			satisfiable[412][0]=satisfiable[412][0] & ((x[412] ^ 0) | (x[ unit412_0[i][0] ] ^ unit412_0[i][1]) |(x[ unit412_0[i][2] ] ^ unit412_0[i][3]));
			}
		if(X_contra>0) L[412][0]=2;
		}
	//Check all rules of unit[412][1]
	L[412][1] = LargeX[412][0]>0 ? 1 : 0;
	satisfiable[412][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit412_1[i][0] ][ unit412_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit412_1[i][2] ][ unit412_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit412_1[i][4] ][ unit412_1[i][5] ] >0);
		X_contra = ( LargeX[412][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit412_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[412][0]=0; L[412][1]=1;}
			satisfiable[412][1]=satisfiable[412][1] & ((x[412] ^ 1) | (x[ unit412_1[i][0] ] ^ unit412_1[i][1]) |(x[ unit412_1[i][2] ] ^ unit412_1[i][3]));
			}
		if(X_contra>0) L[412][1]=2;
		}
	//Check all rules of unit[413][0]
	L[413][0] = LargeX[413][1]>0 ? 1 : 0;
	satisfiable[413][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit413_0[i][0] ][ unit413_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit413_0[i][2] ][ unit413_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit413_0[i][4] ][ unit413_0[i][5] ] >0);
		X_contra = ( LargeX[413][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit413_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[413][1]=0; L[413][0]=1;}
			satisfiable[413][0]=satisfiable[413][0] & ((x[413] ^ 0) | (x[ unit413_0[i][0] ] ^ unit413_0[i][1]) |(x[ unit413_0[i][2] ] ^ unit413_0[i][3]));
			}
		if(X_contra>0) L[413][0]=2;
		}
	//Check all rules of unit[413][1]
	L[413][1] = LargeX[413][0]>0 ? 1 : 0;
	satisfiable[413][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit413_1[i][0] ][ unit413_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit413_1[i][2] ][ unit413_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit413_1[i][4] ][ unit413_1[i][5] ] >0);
		X_contra = ( LargeX[413][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit413_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[413][0]=0; L[413][1]=1;}
			satisfiable[413][1]=satisfiable[413][1] & ((x[413] ^ 1) | (x[ unit413_1[i][0] ] ^ unit413_1[i][1]) |(x[ unit413_1[i][2] ] ^ unit413_1[i][3]));
			}
		if(X_contra>0) L[413][1]=2;
		}
	//Check all rules of unit[414][0]
	L[414][0] = LargeX[414][1]>0 ? 1 : 0;
	satisfiable[414][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit414_0[i][0] ][ unit414_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit414_0[i][2] ][ unit414_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit414_0[i][4] ][ unit414_0[i][5] ] >0);
		X_contra = ( LargeX[414][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit414_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[414][1]=0; L[414][0]=1;}
			satisfiable[414][0]=satisfiable[414][0] & ((x[414] ^ 0) | (x[ unit414_0[i][0] ] ^ unit414_0[i][1]) |(x[ unit414_0[i][2] ] ^ unit414_0[i][3]));
			}
		if(X_contra>0) L[414][0]=2;
		}
	//Check all rules of unit[414][1]
	L[414][1] = LargeX[414][0]>0 ? 1 : 0;
	satisfiable[414][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit414_1[i][0] ][ unit414_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit414_1[i][2] ][ unit414_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit414_1[i][4] ][ unit414_1[i][5] ] >0);
		X_contra = ( LargeX[414][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit414_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[414][0]=0; L[414][1]=1;}
			satisfiable[414][1]=satisfiable[414][1] & ((x[414] ^ 1) | (x[ unit414_1[i][0] ] ^ unit414_1[i][1]) |(x[ unit414_1[i][2] ] ^ unit414_1[i][3]));
			}
		if(X_contra>0) L[414][1]=2;
		}
	//Check all rules of unit[415][0]
	L[415][0] = LargeX[415][1]>0 ? 1 : 0;
	satisfiable[415][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit415_0[i][0] ][ unit415_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit415_0[i][2] ][ unit415_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit415_0[i][4] ][ unit415_0[i][5] ] >0);
		X_contra = ( LargeX[415][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit415_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[415][1]=0; L[415][0]=1;}
			satisfiable[415][0]=satisfiable[415][0] & ((x[415] ^ 0) | (x[ unit415_0[i][0] ] ^ unit415_0[i][1]) |(x[ unit415_0[i][2] ] ^ unit415_0[i][3]));
			}
		if(X_contra>0) L[415][0]=2;
		}
	//Check all rules of unit[415][1]
	L[415][1] = LargeX[415][0]>0 ? 1 : 0;
	satisfiable[415][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit415_1[i][0] ][ unit415_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit415_1[i][2] ][ unit415_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit415_1[i][4] ][ unit415_1[i][5] ] >0);
		X_contra = ( LargeX[415][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit415_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[415][0]=0; L[415][1]=1;}
			satisfiable[415][1]=satisfiable[415][1] & ((x[415] ^ 1) | (x[ unit415_1[i][0] ] ^ unit415_1[i][1]) |(x[ unit415_1[i][2] ] ^ unit415_1[i][3]));
			}
		if(X_contra>0) L[415][1]=2;
		}
	//Check all rules of unit[416][0]
	L[416][0] = LargeX[416][1]>0 ? 1 : 0;
	satisfiable[416][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit416_0[i][0] ][ unit416_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit416_0[i][2] ][ unit416_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit416_0[i][4] ][ unit416_0[i][5] ] >0);
		X_contra = ( LargeX[416][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit416_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[416][1]=0; L[416][0]=1;}
			satisfiable[416][0]=satisfiable[416][0] & ((x[416] ^ 0) | (x[ unit416_0[i][0] ] ^ unit416_0[i][1]) |(x[ unit416_0[i][2] ] ^ unit416_0[i][3]));
			}
		if(X_contra>0) L[416][0]=2;
		}
	//Check all rules of unit[416][1]
	L[416][1] = LargeX[416][0]>0 ? 1 : 0;
	satisfiable[416][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit416_1[i][0] ][ unit416_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit416_1[i][2] ][ unit416_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit416_1[i][4] ][ unit416_1[i][5] ] >0);
		X_contra = ( LargeX[416][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit416_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[416][0]=0; L[416][1]=1;}
			satisfiable[416][1]=satisfiable[416][1] & ((x[416] ^ 1) | (x[ unit416_1[i][0] ] ^ unit416_1[i][1]) |(x[ unit416_1[i][2] ] ^ unit416_1[i][3]));
			}
		if(X_contra>0) L[416][1]=2;
		}
	//Check all rules of unit[417][0]
	L[417][0] = LargeX[417][1]>0 ? 1 : 0;
	satisfiable[417][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit417_0[i][0] ][ unit417_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit417_0[i][2] ][ unit417_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit417_0[i][4] ][ unit417_0[i][5] ] >0);
		X_contra = ( LargeX[417][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit417_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[417][1]=0; L[417][0]=1;}
			satisfiable[417][0]=satisfiable[417][0] & ((x[417] ^ 0) | (x[ unit417_0[i][0] ] ^ unit417_0[i][1]) |(x[ unit417_0[i][2] ] ^ unit417_0[i][3]));
			}
		if(X_contra>0) L[417][0]=2;
		}
	//Check all rules of unit[417][1]
	L[417][1] = LargeX[417][0]>0 ? 1 : 0;
	satisfiable[417][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit417_1[i][0] ][ unit417_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit417_1[i][2] ][ unit417_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit417_1[i][4] ][ unit417_1[i][5] ] >0);
		X_contra = ( LargeX[417][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit417_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[417][0]=0; L[417][1]=1;}
			satisfiable[417][1]=satisfiable[417][1] & ((x[417] ^ 1) | (x[ unit417_1[i][0] ] ^ unit417_1[i][1]) |(x[ unit417_1[i][2] ] ^ unit417_1[i][3]));
			}
		if(X_contra>0) L[417][1]=2;
		}
	//Check all rules of unit[418][0]
	L[418][0] = LargeX[418][1]>0 ? 1 : 0;
	satisfiable[418][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit418_0[i][0] ][ unit418_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit418_0[i][2] ][ unit418_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit418_0[i][4] ][ unit418_0[i][5] ] >0);
		X_contra = ( LargeX[418][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit418_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[418][1]=0; L[418][0]=1;}
			satisfiable[418][0]=satisfiable[418][0] & ((x[418] ^ 0) | (x[ unit418_0[i][0] ] ^ unit418_0[i][1]) |(x[ unit418_0[i][2] ] ^ unit418_0[i][3]));
			}
		if(X_contra>0) L[418][0]=2;
		}
	//Check all rules of unit[418][1]
	L[418][1] = LargeX[418][0]>0 ? 1 : 0;
	satisfiable[418][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit418_1[i][0] ][ unit418_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit418_1[i][2] ][ unit418_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit418_1[i][4] ][ unit418_1[i][5] ] >0);
		X_contra = ( LargeX[418][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit418_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[418][0]=0; L[418][1]=1;}
			satisfiable[418][1]=satisfiable[418][1] & ((x[418] ^ 1) | (x[ unit418_1[i][0] ] ^ unit418_1[i][1]) |(x[ unit418_1[i][2] ] ^ unit418_1[i][3]));
			}
		if(X_contra>0) L[418][1]=2;
		}
	//Check all rules of unit[419][0]
	L[419][0] = LargeX[419][1]>0 ? 1 : 0;
	satisfiable[419][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit419_0[i][0] ][ unit419_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit419_0[i][2] ][ unit419_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit419_0[i][4] ][ unit419_0[i][5] ] >0);
		X_contra = ( LargeX[419][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit419_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[419][1]=0; L[419][0]=1;}
			satisfiable[419][0]=satisfiable[419][0] & ((x[419] ^ 0) | (x[ unit419_0[i][0] ] ^ unit419_0[i][1]) |(x[ unit419_0[i][2] ] ^ unit419_0[i][3]));
			}
		if(X_contra>0) L[419][0]=2;
		}
	//Check all rules of unit[419][1]
	L[419][1] = LargeX[419][0]>0 ? 1 : 0;
	satisfiable[419][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit419_1[i][0] ][ unit419_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit419_1[i][2] ][ unit419_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit419_1[i][4] ][ unit419_1[i][5] ] >0);
		X_contra = ( LargeX[419][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit419_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[419][0]=0; L[419][1]=1;}
			satisfiable[419][1]=satisfiable[419][1] & ((x[419] ^ 1) | (x[ unit419_1[i][0] ] ^ unit419_1[i][1]) |(x[ unit419_1[i][2] ] ^ unit419_1[i][3]));
			}
		if(X_contra>0) L[419][1]=2;
		}
	//Check all rules of unit[420][0]
	L[420][0] = LargeX[420][1]>0 ? 1 : 0;
	satisfiable[420][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit420_0[i][0] ][ unit420_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit420_0[i][2] ][ unit420_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit420_0[i][4] ][ unit420_0[i][5] ] >0);
		X_contra = ( LargeX[420][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit420_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[420][1]=0; L[420][0]=1;}
			satisfiable[420][0]=satisfiable[420][0] & ((x[420] ^ 0) | (x[ unit420_0[i][0] ] ^ unit420_0[i][1]) |(x[ unit420_0[i][2] ] ^ unit420_0[i][3]));
			}
		if(X_contra>0) L[420][0]=2;
		}
	//Check all rules of unit[420][1]
	L[420][1] = LargeX[420][0]>0 ? 1 : 0;
	satisfiable[420][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit420_1[i][0] ][ unit420_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit420_1[i][2] ][ unit420_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit420_1[i][4] ][ unit420_1[i][5] ] >0);
		X_contra = ( LargeX[420][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit420_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[420][0]=0; L[420][1]=1;}
			satisfiable[420][1]=satisfiable[420][1] & ((x[420] ^ 1) | (x[ unit420_1[i][0] ] ^ unit420_1[i][1]) |(x[ unit420_1[i][2] ] ^ unit420_1[i][3]));
			}
		if(X_contra>0) L[420][1]=2;
		}
	//Check all rules of unit[421][0]
	L[421][0] = LargeX[421][1]>0 ? 1 : 0;
	satisfiable[421][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit421_0[i][0] ][ unit421_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit421_0[i][2] ][ unit421_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit421_0[i][4] ][ unit421_0[i][5] ] >0);
		X_contra = ( LargeX[421][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit421_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[421][1]=0; L[421][0]=1;}
			satisfiable[421][0]=satisfiable[421][0] & ((x[421] ^ 0) | (x[ unit421_0[i][0] ] ^ unit421_0[i][1]) |(x[ unit421_0[i][2] ] ^ unit421_0[i][3]));
			}
		if(X_contra>0) L[421][0]=2;
		}
	//Check all rules of unit[421][1]
	L[421][1] = LargeX[421][0]>0 ? 1 : 0;
	satisfiable[421][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit421_1[i][0] ][ unit421_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit421_1[i][2] ][ unit421_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit421_1[i][4] ][ unit421_1[i][5] ] >0);
		X_contra = ( LargeX[421][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit421_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[421][0]=0; L[421][1]=1;}
			satisfiable[421][1]=satisfiable[421][1] & ((x[421] ^ 1) | (x[ unit421_1[i][0] ] ^ unit421_1[i][1]) |(x[ unit421_1[i][2] ] ^ unit421_1[i][3]));
			}
		if(X_contra>0) L[421][1]=2;
		}
	//Check all rules of unit[422][0]
	L[422][0] = LargeX[422][1]>0 ? 1 : 0;
	satisfiable[422][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit422_0[i][0] ][ unit422_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit422_0[i][2] ][ unit422_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit422_0[i][4] ][ unit422_0[i][5] ] >0);
		X_contra = ( LargeX[422][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit422_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[422][1]=0; L[422][0]=1;}
			satisfiable[422][0]=satisfiable[422][0] & ((x[422] ^ 0) | (x[ unit422_0[i][0] ] ^ unit422_0[i][1]) |(x[ unit422_0[i][2] ] ^ unit422_0[i][3]));
			}
		if(X_contra>0) L[422][0]=2;
		}
	//Check all rules of unit[422][1]
	L[422][1] = LargeX[422][0]>0 ? 1 : 0;
	satisfiable[422][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit422_1[i][0] ][ unit422_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit422_1[i][2] ][ unit422_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit422_1[i][4] ][ unit422_1[i][5] ] >0);
		X_contra = ( LargeX[422][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit422_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[422][0]=0; L[422][1]=1;}
			satisfiable[422][1]=satisfiable[422][1] & ((x[422] ^ 1) | (x[ unit422_1[i][0] ] ^ unit422_1[i][1]) |(x[ unit422_1[i][2] ] ^ unit422_1[i][3]));
			}
		if(X_contra>0) L[422][1]=2;
		}
	//Check all rules of unit[423][0]
	L[423][0] = LargeX[423][1]>0 ? 1 : 0;
	satisfiable[423][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit423_0[i][0] ][ unit423_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit423_0[i][2] ][ unit423_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit423_0[i][4] ][ unit423_0[i][5] ] >0);
		X_contra = ( LargeX[423][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit423_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[423][1]=0; L[423][0]=1;}
			satisfiable[423][0]=satisfiable[423][0] & ((x[423] ^ 0) | (x[ unit423_0[i][0] ] ^ unit423_0[i][1]) |(x[ unit423_0[i][2] ] ^ unit423_0[i][3]));
			}
		if(X_contra>0) L[423][0]=2;
		}
	//Check all rules of unit[423][1]
	L[423][1] = LargeX[423][0]>0 ? 1 : 0;
	satisfiable[423][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit423_1[i][0] ][ unit423_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit423_1[i][2] ][ unit423_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit423_1[i][4] ][ unit423_1[i][5] ] >0);
		X_contra = ( LargeX[423][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit423_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[423][0]=0; L[423][1]=1;}
			satisfiable[423][1]=satisfiable[423][1] & ((x[423] ^ 1) | (x[ unit423_1[i][0] ] ^ unit423_1[i][1]) |(x[ unit423_1[i][2] ] ^ unit423_1[i][3]));
			}
		if(X_contra>0) L[423][1]=2;
		}
	//Check all rules of unit[424][0]
	L[424][0] = LargeX[424][1]>0 ? 1 : 0;
	satisfiable[424][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit424_0[i][0] ][ unit424_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit424_0[i][2] ][ unit424_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit424_0[i][4] ][ unit424_0[i][5] ] >0);
		X_contra = ( LargeX[424][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit424_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[424][1]=0; L[424][0]=1;}
			satisfiable[424][0]=satisfiable[424][0] & ((x[424] ^ 0) | (x[ unit424_0[i][0] ] ^ unit424_0[i][1]) |(x[ unit424_0[i][2] ] ^ unit424_0[i][3]));
			}
		if(X_contra>0) L[424][0]=2;
		}
	//Check all rules of unit[424][1]
	L[424][1] = LargeX[424][0]>0 ? 1 : 0;
	satisfiable[424][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit424_1[i][0] ][ unit424_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit424_1[i][2] ][ unit424_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit424_1[i][4] ][ unit424_1[i][5] ] >0);
		X_contra = ( LargeX[424][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit424_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[424][0]=0; L[424][1]=1;}
			satisfiable[424][1]=satisfiable[424][1] & ((x[424] ^ 1) | (x[ unit424_1[i][0] ] ^ unit424_1[i][1]) |(x[ unit424_1[i][2] ] ^ unit424_1[i][3]));
			}
		if(X_contra>0) L[424][1]=2;
		}
	//Check all rules of unit[425][0]
	L[425][0] = LargeX[425][1]>0 ? 1 : 0;
	satisfiable[425][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit425_0[i][0] ][ unit425_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit425_0[i][2] ][ unit425_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit425_0[i][4] ][ unit425_0[i][5] ] >0);
		X_contra = ( LargeX[425][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit425_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[425][1]=0; L[425][0]=1;}
			satisfiable[425][0]=satisfiable[425][0] & ((x[425] ^ 0) | (x[ unit425_0[i][0] ] ^ unit425_0[i][1]) |(x[ unit425_0[i][2] ] ^ unit425_0[i][3]));
			}
		if(X_contra>0) L[425][0]=2;
		}
	//Check all rules of unit[425][1]
	L[425][1] = LargeX[425][0]>0 ? 1 : 0;
	satisfiable[425][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit425_1[i][0] ][ unit425_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit425_1[i][2] ][ unit425_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit425_1[i][4] ][ unit425_1[i][5] ] >0);
		X_contra = ( LargeX[425][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit425_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[425][0]=0; L[425][1]=1;}
			satisfiable[425][1]=satisfiable[425][1] & ((x[425] ^ 1) | (x[ unit425_1[i][0] ] ^ unit425_1[i][1]) |(x[ unit425_1[i][2] ] ^ unit425_1[i][3]));
			}
		if(X_contra>0) L[425][1]=2;
		}
	//Check all rules of unit[426][0]
	L[426][0] = LargeX[426][1]>0 ? 1 : 0;
	satisfiable[426][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit426_0[i][0] ][ unit426_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit426_0[i][2] ][ unit426_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit426_0[i][4] ][ unit426_0[i][5] ] >0);
		X_contra = ( LargeX[426][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit426_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[426][1]=0; L[426][0]=1;}
			satisfiable[426][0]=satisfiable[426][0] & ((x[426] ^ 0) | (x[ unit426_0[i][0] ] ^ unit426_0[i][1]) |(x[ unit426_0[i][2] ] ^ unit426_0[i][3]));
			}
		if(X_contra>0) L[426][0]=2;
		}
	//Check all rules of unit[426][1]
	L[426][1] = LargeX[426][0]>0 ? 1 : 0;
	satisfiable[426][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit426_1[i][0] ][ unit426_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit426_1[i][2] ][ unit426_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit426_1[i][4] ][ unit426_1[i][5] ] >0);
		X_contra = ( LargeX[426][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit426_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[426][0]=0; L[426][1]=1;}
			satisfiable[426][1]=satisfiable[426][1] & ((x[426] ^ 1) | (x[ unit426_1[i][0] ] ^ unit426_1[i][1]) |(x[ unit426_1[i][2] ] ^ unit426_1[i][3]));
			}
		if(X_contra>0) L[426][1]=2;
		}
	//Check all rules of unit[427][0]
	L[427][0] = LargeX[427][1]>0 ? 1 : 0;
	satisfiable[427][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit427_0[i][0] ][ unit427_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit427_0[i][2] ][ unit427_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit427_0[i][4] ][ unit427_0[i][5] ] >0);
		X_contra = ( LargeX[427][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit427_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[427][1]=0; L[427][0]=1;}
			satisfiable[427][0]=satisfiable[427][0] & ((x[427] ^ 0) | (x[ unit427_0[i][0] ] ^ unit427_0[i][1]) |(x[ unit427_0[i][2] ] ^ unit427_0[i][3]));
			}
		if(X_contra>0) L[427][0]=2;
		}
	//Check all rules of unit[427][1]
	L[427][1] = LargeX[427][0]>0 ? 1 : 0;
	satisfiable[427][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit427_1[i][0] ][ unit427_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit427_1[i][2] ][ unit427_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit427_1[i][4] ][ unit427_1[i][5] ] >0);
		X_contra = ( LargeX[427][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit427_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[427][0]=0; L[427][1]=1;}
			satisfiable[427][1]=satisfiable[427][1] & ((x[427] ^ 1) | (x[ unit427_1[i][0] ] ^ unit427_1[i][1]) |(x[ unit427_1[i][2] ] ^ unit427_1[i][3]));
			}
		if(X_contra>0) L[427][1]=2;
		}
	//Check all rules of unit[428][0]
	L[428][0] = LargeX[428][1]>0 ? 1 : 0;
	satisfiable[428][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit428_0[i][0] ][ unit428_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit428_0[i][2] ][ unit428_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit428_0[i][4] ][ unit428_0[i][5] ] >0);
		X_contra = ( LargeX[428][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit428_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[428][1]=0; L[428][0]=1;}
			satisfiable[428][0]=satisfiable[428][0] & ((x[428] ^ 0) | (x[ unit428_0[i][0] ] ^ unit428_0[i][1]) |(x[ unit428_0[i][2] ] ^ unit428_0[i][3]));
			}
		if(X_contra>0) L[428][0]=2;
		}
	//Check all rules of unit[428][1]
	L[428][1] = LargeX[428][0]>0 ? 1 : 0;
	satisfiable[428][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit428_1[i][0] ][ unit428_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit428_1[i][2] ][ unit428_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit428_1[i][4] ][ unit428_1[i][5] ] >0);
		X_contra = ( LargeX[428][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit428_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[428][0]=0; L[428][1]=1;}
			satisfiable[428][1]=satisfiable[428][1] & ((x[428] ^ 1) | (x[ unit428_1[i][0] ] ^ unit428_1[i][1]) |(x[ unit428_1[i][2] ] ^ unit428_1[i][3]));
			}
		if(X_contra>0) L[428][1]=2;
		}
	//Check all rules of unit[429][0]
	L[429][0] = LargeX[429][1]>0 ? 1 : 0;
	satisfiable[429][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit429_0[i][0] ][ unit429_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit429_0[i][2] ][ unit429_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit429_0[i][4] ][ unit429_0[i][5] ] >0);
		X_contra = ( LargeX[429][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit429_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[429][1]=0; L[429][0]=1;}
			satisfiable[429][0]=satisfiable[429][0] & ((x[429] ^ 0) | (x[ unit429_0[i][0] ] ^ unit429_0[i][1]) |(x[ unit429_0[i][2] ] ^ unit429_0[i][3]));
			}
		if(X_contra>0) L[429][0]=2;
		}
	//Check all rules of unit[429][1]
	L[429][1] = LargeX[429][0]>0 ? 1 : 0;
	satisfiable[429][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit429_1[i][0] ][ unit429_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit429_1[i][2] ][ unit429_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit429_1[i][4] ][ unit429_1[i][5] ] >0);
		X_contra = ( LargeX[429][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit429_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[429][0]=0; L[429][1]=1;}
			satisfiable[429][1]=satisfiable[429][1] & ((x[429] ^ 1) | (x[ unit429_1[i][0] ] ^ unit429_1[i][1]) |(x[ unit429_1[i][2] ] ^ unit429_1[i][3]));
			}
		if(X_contra>0) L[429][1]=2;
		}
	//Check all rules of unit[430][0]
	L[430][0] = LargeX[430][1]>0 ? 1 : 0;
	satisfiable[430][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit430_0[i][0] ][ unit430_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit430_0[i][2] ][ unit430_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit430_0[i][4] ][ unit430_0[i][5] ] >0);
		X_contra = ( LargeX[430][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit430_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[430][1]=0; L[430][0]=1;}
			satisfiable[430][0]=satisfiable[430][0] & ((x[430] ^ 0) | (x[ unit430_0[i][0] ] ^ unit430_0[i][1]) |(x[ unit430_0[i][2] ] ^ unit430_0[i][3]));
			}
		if(X_contra>0) L[430][0]=2;
		}
	//Check all rules of unit[430][1]
	L[430][1] = LargeX[430][0]>0 ? 1 : 0;
	satisfiable[430][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit430_1[i][0] ][ unit430_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit430_1[i][2] ][ unit430_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit430_1[i][4] ][ unit430_1[i][5] ] >0);
		X_contra = ( LargeX[430][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit430_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[430][0]=0; L[430][1]=1;}
			satisfiable[430][1]=satisfiable[430][1] & ((x[430] ^ 1) | (x[ unit430_1[i][0] ] ^ unit430_1[i][1]) |(x[ unit430_1[i][2] ] ^ unit430_1[i][3]));
			}
		if(X_contra>0) L[430][1]=2;
		}
	//Check all rules of unit[431][0]
	L[431][0] = LargeX[431][1]>0 ? 1 : 0;
	satisfiable[431][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit431_0[i][0] ][ unit431_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit431_0[i][2] ][ unit431_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit431_0[i][4] ][ unit431_0[i][5] ] >0);
		X_contra = ( LargeX[431][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit431_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[431][1]=0; L[431][0]=1;}
			satisfiable[431][0]=satisfiable[431][0] & ((x[431] ^ 0) | (x[ unit431_0[i][0] ] ^ unit431_0[i][1]) |(x[ unit431_0[i][2] ] ^ unit431_0[i][3]));
			}
		if(X_contra>0) L[431][0]=2;
		}
	//Check all rules of unit[431][1]
	L[431][1] = LargeX[431][0]>0 ? 1 : 0;
	satisfiable[431][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit431_1[i][0] ][ unit431_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit431_1[i][2] ][ unit431_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit431_1[i][4] ][ unit431_1[i][5] ] >0);
		X_contra = ( LargeX[431][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit431_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[431][0]=0; L[431][1]=1;}
			satisfiable[431][1]=satisfiable[431][1] & ((x[431] ^ 1) | (x[ unit431_1[i][0] ] ^ unit431_1[i][1]) |(x[ unit431_1[i][2] ] ^ unit431_1[i][3]));
			}
		if(X_contra>0) L[431][1]=2;
		}
	//Check all rules of unit[432][0]
	L[432][0] = LargeX[432][1]>0 ? 1 : 0;
	satisfiable[432][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit432_0[i][0] ][ unit432_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit432_0[i][2] ][ unit432_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit432_0[i][4] ][ unit432_0[i][5] ] >0);
		X_contra = ( LargeX[432][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit432_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[432][1]=0; L[432][0]=1;}
			satisfiable[432][0]=satisfiable[432][0] & ((x[432] ^ 0) | (x[ unit432_0[i][0] ] ^ unit432_0[i][1]) |(x[ unit432_0[i][2] ] ^ unit432_0[i][3]));
			}
		if(X_contra>0) L[432][0]=2;
		}
	//Check all rules of unit[432][1]
	L[432][1] = LargeX[432][0]>0 ? 1 : 0;
	satisfiable[432][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit432_1[i][0] ][ unit432_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit432_1[i][2] ][ unit432_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit432_1[i][4] ][ unit432_1[i][5] ] >0);
		X_contra = ( LargeX[432][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit432_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[432][0]=0; L[432][1]=1;}
			satisfiable[432][1]=satisfiable[432][1] & ((x[432] ^ 1) | (x[ unit432_1[i][0] ] ^ unit432_1[i][1]) |(x[ unit432_1[i][2] ] ^ unit432_1[i][3]));
			}
		if(X_contra>0) L[432][1]=2;
		}
	//Check all rules of unit[433][0]
	L[433][0] = LargeX[433][1]>0 ? 1 : 0;
	satisfiable[433][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit433_0[i][0] ][ unit433_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit433_0[i][2] ][ unit433_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit433_0[i][4] ][ unit433_0[i][5] ] >0);
		X_contra = ( LargeX[433][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit433_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[433][1]=0; L[433][0]=1;}
			satisfiable[433][0]=satisfiable[433][0] & ((x[433] ^ 0) | (x[ unit433_0[i][0] ] ^ unit433_0[i][1]) |(x[ unit433_0[i][2] ] ^ unit433_0[i][3]));
			}
		if(X_contra>0) L[433][0]=2;
		}
	//Check all rules of unit[433][1]
	L[433][1] = LargeX[433][0]>0 ? 1 : 0;
	satisfiable[433][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit433_1[i][0] ][ unit433_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit433_1[i][2] ][ unit433_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit433_1[i][4] ][ unit433_1[i][5] ] >0);
		X_contra = ( LargeX[433][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit433_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[433][0]=0; L[433][1]=1;}
			satisfiable[433][1]=satisfiable[433][1] & ((x[433] ^ 1) | (x[ unit433_1[i][0] ] ^ unit433_1[i][1]) |(x[ unit433_1[i][2] ] ^ unit433_1[i][3]));
			}
		if(X_contra>0) L[433][1]=2;
		}
	//Check all rules of unit[434][0]
	L[434][0] = LargeX[434][1]>0 ? 1 : 0;
	satisfiable[434][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit434_0[i][0] ][ unit434_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit434_0[i][2] ][ unit434_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit434_0[i][4] ][ unit434_0[i][5] ] >0);
		X_contra = ( LargeX[434][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit434_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[434][1]=0; L[434][0]=1;}
			satisfiable[434][0]=satisfiable[434][0] & ((x[434] ^ 0) | (x[ unit434_0[i][0] ] ^ unit434_0[i][1]) |(x[ unit434_0[i][2] ] ^ unit434_0[i][3]));
			}
		if(X_contra>0) L[434][0]=2;
		}
	//Check all rules of unit[434][1]
	L[434][1] = LargeX[434][0]>0 ? 1 : 0;
	satisfiable[434][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit434_1[i][0] ][ unit434_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit434_1[i][2] ][ unit434_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit434_1[i][4] ][ unit434_1[i][5] ] >0);
		X_contra = ( LargeX[434][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit434_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[434][0]=0; L[434][1]=1;}
			satisfiable[434][1]=satisfiable[434][1] & ((x[434] ^ 1) | (x[ unit434_1[i][0] ] ^ unit434_1[i][1]) |(x[ unit434_1[i][2] ] ^ unit434_1[i][3]));
			}
		if(X_contra>0) L[434][1]=2;
		}
	//Check all rules of unit[435][0]
	L[435][0] = LargeX[435][1]>0 ? 1 : 0;
	satisfiable[435][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit435_0[i][0] ][ unit435_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit435_0[i][2] ][ unit435_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit435_0[i][4] ][ unit435_0[i][5] ] >0);
		X_contra = ( LargeX[435][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit435_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[435][1]=0; L[435][0]=1;}
			satisfiable[435][0]=satisfiable[435][0] & ((x[435] ^ 0) | (x[ unit435_0[i][0] ] ^ unit435_0[i][1]) |(x[ unit435_0[i][2] ] ^ unit435_0[i][3]));
			}
		if(X_contra>0) L[435][0]=2;
		}
	//Check all rules of unit[435][1]
	L[435][1] = LargeX[435][0]>0 ? 1 : 0;
	satisfiable[435][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit435_1[i][0] ][ unit435_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit435_1[i][2] ][ unit435_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit435_1[i][4] ][ unit435_1[i][5] ] >0);
		X_contra = ( LargeX[435][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit435_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[435][0]=0; L[435][1]=1;}
			satisfiable[435][1]=satisfiable[435][1] & ((x[435] ^ 1) | (x[ unit435_1[i][0] ] ^ unit435_1[i][1]) |(x[ unit435_1[i][2] ] ^ unit435_1[i][3]));
			}
		if(X_contra>0) L[435][1]=2;
		}
	//Check all rules of unit[436][0]
	L[436][0] = LargeX[436][1]>0 ? 1 : 0;
	satisfiable[436][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit436_0[i][0] ][ unit436_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit436_0[i][2] ][ unit436_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit436_0[i][4] ][ unit436_0[i][5] ] >0);
		X_contra = ( LargeX[436][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit436_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[436][1]=0; L[436][0]=1;}
			satisfiable[436][0]=satisfiable[436][0] & ((x[436] ^ 0) | (x[ unit436_0[i][0] ] ^ unit436_0[i][1]) |(x[ unit436_0[i][2] ] ^ unit436_0[i][3]));
			}
		if(X_contra>0) L[436][0]=2;
		}
	//Check all rules of unit[436][1]
	L[436][1] = LargeX[436][0]>0 ? 1 : 0;
	satisfiable[436][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit436_1[i][0] ][ unit436_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit436_1[i][2] ][ unit436_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit436_1[i][4] ][ unit436_1[i][5] ] >0);
		X_contra = ( LargeX[436][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit436_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[436][0]=0; L[436][1]=1;}
			satisfiable[436][1]=satisfiable[436][1] & ((x[436] ^ 1) | (x[ unit436_1[i][0] ] ^ unit436_1[i][1]) |(x[ unit436_1[i][2] ] ^ unit436_1[i][3]));
			}
		if(X_contra>0) L[436][1]=2;
		}
	//Check all rules of unit[437][0]
	L[437][0] = LargeX[437][1]>0 ? 1 : 0;
	satisfiable[437][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit437_0[i][0] ][ unit437_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit437_0[i][2] ][ unit437_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit437_0[i][4] ][ unit437_0[i][5] ] >0);
		X_contra = ( LargeX[437][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit437_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[437][1]=0; L[437][0]=1;}
			satisfiable[437][0]=satisfiable[437][0] & ((x[437] ^ 0) | (x[ unit437_0[i][0] ] ^ unit437_0[i][1]) |(x[ unit437_0[i][2] ] ^ unit437_0[i][3]));
			}
		if(X_contra>0) L[437][0]=2;
		}
	//Check all rules of unit[437][1]
	L[437][1] = LargeX[437][0]>0 ? 1 : 0;
	satisfiable[437][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit437_1[i][0] ][ unit437_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit437_1[i][2] ][ unit437_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit437_1[i][4] ][ unit437_1[i][5] ] >0);
		X_contra = ( LargeX[437][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit437_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[437][0]=0; L[437][1]=1;}
			satisfiable[437][1]=satisfiable[437][1] & ((x[437] ^ 1) | (x[ unit437_1[i][0] ] ^ unit437_1[i][1]) |(x[ unit437_1[i][2] ] ^ unit437_1[i][3]));
			}
		if(X_contra>0) L[437][1]=2;
		}
	//Check all rules of unit[438][0]
	L[438][0] = LargeX[438][1]>0 ? 1 : 0;
	satisfiable[438][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit438_0[i][0] ][ unit438_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit438_0[i][2] ][ unit438_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit438_0[i][4] ][ unit438_0[i][5] ] >0);
		X_contra = ( LargeX[438][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit438_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[438][1]=0; L[438][0]=1;}
			satisfiable[438][0]=satisfiable[438][0] & ((x[438] ^ 0) | (x[ unit438_0[i][0] ] ^ unit438_0[i][1]) |(x[ unit438_0[i][2] ] ^ unit438_0[i][3]));
			}
		if(X_contra>0) L[438][0]=2;
		}
	//Check all rules of unit[438][1]
	L[438][1] = LargeX[438][0]>0 ? 1 : 0;
	satisfiable[438][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit438_1[i][0] ][ unit438_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit438_1[i][2] ][ unit438_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit438_1[i][4] ][ unit438_1[i][5] ] >0);
		X_contra = ( LargeX[438][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit438_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[438][0]=0; L[438][1]=1;}
			satisfiable[438][1]=satisfiable[438][1] & ((x[438] ^ 1) | (x[ unit438_1[i][0] ] ^ unit438_1[i][1]) |(x[ unit438_1[i][2] ] ^ unit438_1[i][3]));
			}
		if(X_contra>0) L[438][1]=2;
		}
	//Check all rules of unit[439][0]
	L[439][0] = LargeX[439][1]>0 ? 1 : 0;
	satisfiable[439][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit439_0[i][0] ][ unit439_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit439_0[i][2] ][ unit439_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit439_0[i][4] ][ unit439_0[i][5] ] >0);
		X_contra = ( LargeX[439][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit439_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[439][1]=0; L[439][0]=1;}
			satisfiable[439][0]=satisfiable[439][0] & ((x[439] ^ 0) | (x[ unit439_0[i][0] ] ^ unit439_0[i][1]) |(x[ unit439_0[i][2] ] ^ unit439_0[i][3]));
			}
		if(X_contra>0) L[439][0]=2;
		}
	//Check all rules of unit[439][1]
	L[439][1] = LargeX[439][0]>0 ? 1 : 0;
	satisfiable[439][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit439_1[i][0] ][ unit439_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit439_1[i][2] ][ unit439_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit439_1[i][4] ][ unit439_1[i][5] ] >0);
		X_contra = ( LargeX[439][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit439_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[439][0]=0; L[439][1]=1;}
			satisfiable[439][1]=satisfiable[439][1] & ((x[439] ^ 1) | (x[ unit439_1[i][0] ] ^ unit439_1[i][1]) |(x[ unit439_1[i][2] ] ^ unit439_1[i][3]));
			}
		if(X_contra>0) L[439][1]=2;
		}
	//Check all rules of unit[440][0]
	L[440][0] = LargeX[440][1]>0 ? 1 : 0;
	satisfiable[440][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit440_0[i][0] ][ unit440_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit440_0[i][2] ][ unit440_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit440_0[i][4] ][ unit440_0[i][5] ] >0);
		X_contra = ( LargeX[440][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit440_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[440][1]=0; L[440][0]=1;}
			satisfiable[440][0]=satisfiable[440][0] & ((x[440] ^ 0) | (x[ unit440_0[i][0] ] ^ unit440_0[i][1]) |(x[ unit440_0[i][2] ] ^ unit440_0[i][3]));
			}
		if(X_contra>0) L[440][0]=2;
		}
	//Check all rules of unit[440][1]
	L[440][1] = LargeX[440][0]>0 ? 1 : 0;
	satisfiable[440][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit440_1[i][0] ][ unit440_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit440_1[i][2] ][ unit440_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit440_1[i][4] ][ unit440_1[i][5] ] >0);
		X_contra = ( LargeX[440][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit440_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[440][0]=0; L[440][1]=1;}
			satisfiable[440][1]=satisfiable[440][1] & ((x[440] ^ 1) | (x[ unit440_1[i][0] ] ^ unit440_1[i][1]) |(x[ unit440_1[i][2] ] ^ unit440_1[i][3]));
			}
		if(X_contra>0) L[440][1]=2;
		}
	//Check all rules of unit[441][0]
	L[441][0] = LargeX[441][1]>0 ? 1 : 0;
	satisfiable[441][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit441_0[i][0] ][ unit441_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit441_0[i][2] ][ unit441_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit441_0[i][4] ][ unit441_0[i][5] ] >0);
		X_contra = ( LargeX[441][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit441_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[441][1]=0; L[441][0]=1;}
			satisfiable[441][0]=satisfiable[441][0] & ((x[441] ^ 0) | (x[ unit441_0[i][0] ] ^ unit441_0[i][1]) |(x[ unit441_0[i][2] ] ^ unit441_0[i][3]));
			}
		if(X_contra>0) L[441][0]=2;
		}
	//Check all rules of unit[441][1]
	L[441][1] = LargeX[441][0]>0 ? 1 : 0;
	satisfiable[441][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit441_1[i][0] ][ unit441_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit441_1[i][2] ][ unit441_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit441_1[i][4] ][ unit441_1[i][5] ] >0);
		X_contra = ( LargeX[441][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit441_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[441][0]=0; L[441][1]=1;}
			satisfiable[441][1]=satisfiable[441][1] & ((x[441] ^ 1) | (x[ unit441_1[i][0] ] ^ unit441_1[i][1]) |(x[ unit441_1[i][2] ] ^ unit441_1[i][3]));
			}
		if(X_contra>0) L[441][1]=2;
		}
	//Check all rules of unit[442][0]
	L[442][0] = LargeX[442][1]>0 ? 1 : 0;
	satisfiable[442][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit442_0[i][0] ][ unit442_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit442_0[i][2] ][ unit442_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit442_0[i][4] ][ unit442_0[i][5] ] >0);
		X_contra = ( LargeX[442][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit442_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[442][1]=0; L[442][0]=1;}
			satisfiable[442][0]=satisfiable[442][0] & ((x[442] ^ 0) | (x[ unit442_0[i][0] ] ^ unit442_0[i][1]) |(x[ unit442_0[i][2] ] ^ unit442_0[i][3]));
			}
		if(X_contra>0) L[442][0]=2;
		}
	//Check all rules of unit[442][1]
	L[442][1] = LargeX[442][0]>0 ? 1 : 0;
	satisfiable[442][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit442_1[i][0] ][ unit442_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit442_1[i][2] ][ unit442_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit442_1[i][4] ][ unit442_1[i][5] ] >0);
		X_contra = ( LargeX[442][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit442_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[442][0]=0; L[442][1]=1;}
			satisfiable[442][1]=satisfiable[442][1] & ((x[442] ^ 1) | (x[ unit442_1[i][0] ] ^ unit442_1[i][1]) |(x[ unit442_1[i][2] ] ^ unit442_1[i][3]));
			}
		if(X_contra>0) L[442][1]=2;
		}
	//Check all rules of unit[443][0]
	L[443][0] = LargeX[443][1]>0 ? 1 : 0;
	satisfiable[443][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit443_0[i][0] ][ unit443_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit443_0[i][2] ][ unit443_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit443_0[i][4] ][ unit443_0[i][5] ] >0);
		X_contra = ( LargeX[443][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit443_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[443][1]=0; L[443][0]=1;}
			satisfiable[443][0]=satisfiable[443][0] & ((x[443] ^ 0) | (x[ unit443_0[i][0] ] ^ unit443_0[i][1]) |(x[ unit443_0[i][2] ] ^ unit443_0[i][3]));
			}
		if(X_contra>0) L[443][0]=2;
		}
	//Check all rules of unit[443][1]
	L[443][1] = LargeX[443][0]>0 ? 1 : 0;
	satisfiable[443][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit443_1[i][0] ][ unit443_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit443_1[i][2] ][ unit443_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit443_1[i][4] ][ unit443_1[i][5] ] >0);
		X_contra = ( LargeX[443][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit443_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[443][0]=0; L[443][1]=1;}
			satisfiable[443][1]=satisfiable[443][1] & ((x[443] ^ 1) | (x[ unit443_1[i][0] ] ^ unit443_1[i][1]) |(x[ unit443_1[i][2] ] ^ unit443_1[i][3]));
			}
		if(X_contra>0) L[443][1]=2;
		}
	//Check all rules of unit[444][0]
	L[444][0] = LargeX[444][1]>0 ? 1 : 0;
	satisfiable[444][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit444_0[i][0] ][ unit444_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit444_0[i][2] ][ unit444_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit444_0[i][4] ][ unit444_0[i][5] ] >0);
		X_contra = ( LargeX[444][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit444_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[444][1]=0; L[444][0]=1;}
			satisfiable[444][0]=satisfiable[444][0] & ((x[444] ^ 0) | (x[ unit444_0[i][0] ] ^ unit444_0[i][1]) |(x[ unit444_0[i][2] ] ^ unit444_0[i][3]));
			}
		if(X_contra>0) L[444][0]=2;
		}
	//Check all rules of unit[444][1]
	L[444][1] = LargeX[444][0]>0 ? 1 : 0;
	satisfiable[444][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit444_1[i][0] ][ unit444_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit444_1[i][2] ][ unit444_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit444_1[i][4] ][ unit444_1[i][5] ] >0);
		X_contra = ( LargeX[444][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit444_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[444][0]=0; L[444][1]=1;}
			satisfiable[444][1]=satisfiable[444][1] & ((x[444] ^ 1) | (x[ unit444_1[i][0] ] ^ unit444_1[i][1]) |(x[ unit444_1[i][2] ] ^ unit444_1[i][3]));
			}
		if(X_contra>0) L[444][1]=2;
		}
	//Check all rules of unit[445][0]
	L[445][0] = LargeX[445][1]>0 ? 1 : 0;
	satisfiable[445][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit445_0[i][0] ][ unit445_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit445_0[i][2] ][ unit445_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit445_0[i][4] ][ unit445_0[i][5] ] >0);
		X_contra = ( LargeX[445][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit445_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[445][1]=0; L[445][0]=1;}
			satisfiable[445][0]=satisfiable[445][0] & ((x[445] ^ 0) | (x[ unit445_0[i][0] ] ^ unit445_0[i][1]) |(x[ unit445_0[i][2] ] ^ unit445_0[i][3]));
			}
		if(X_contra>0) L[445][0]=2;
		}
	//Check all rules of unit[445][1]
	L[445][1] = LargeX[445][0]>0 ? 1 : 0;
	satisfiable[445][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit445_1[i][0] ][ unit445_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit445_1[i][2] ][ unit445_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit445_1[i][4] ][ unit445_1[i][5] ] >0);
		X_contra = ( LargeX[445][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit445_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[445][0]=0; L[445][1]=1;}
			satisfiable[445][1]=satisfiable[445][1] & ((x[445] ^ 1) | (x[ unit445_1[i][0] ] ^ unit445_1[i][1]) |(x[ unit445_1[i][2] ] ^ unit445_1[i][3]));
			}
		if(X_contra>0) L[445][1]=2;
		}
	//Check all rules of unit[446][0]
	L[446][0] = LargeX[446][1]>0 ? 1 : 0;
	satisfiable[446][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit446_0[i][0] ][ unit446_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit446_0[i][2] ][ unit446_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit446_0[i][4] ][ unit446_0[i][5] ] >0);
		X_contra = ( LargeX[446][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit446_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[446][1]=0; L[446][0]=1;}
			satisfiable[446][0]=satisfiable[446][0] & ((x[446] ^ 0) | (x[ unit446_0[i][0] ] ^ unit446_0[i][1]) |(x[ unit446_0[i][2] ] ^ unit446_0[i][3]));
			}
		if(X_contra>0) L[446][0]=2;
		}
	//Check all rules of unit[446][1]
	L[446][1] = LargeX[446][0]>0 ? 1 : 0;
	satisfiable[446][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit446_1[i][0] ][ unit446_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit446_1[i][2] ][ unit446_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit446_1[i][4] ][ unit446_1[i][5] ] >0);
		X_contra = ( LargeX[446][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit446_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[446][0]=0; L[446][1]=1;}
			satisfiable[446][1]=satisfiable[446][1] & ((x[446] ^ 1) | (x[ unit446_1[i][0] ] ^ unit446_1[i][1]) |(x[ unit446_1[i][2] ] ^ unit446_1[i][3]));
			}
		if(X_contra>0) L[446][1]=2;
		}
	//Check all rules of unit[447][0]
	L[447][0] = LargeX[447][1]>0 ? 1 : 0;
	satisfiable[447][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit447_0[i][0] ][ unit447_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit447_0[i][2] ][ unit447_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit447_0[i][4] ][ unit447_0[i][5] ] >0);
		X_contra = ( LargeX[447][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit447_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[447][1]=0; L[447][0]=1;}
			satisfiable[447][0]=satisfiable[447][0] & ((x[447] ^ 0) | (x[ unit447_0[i][0] ] ^ unit447_0[i][1]) |(x[ unit447_0[i][2] ] ^ unit447_0[i][3]));
			}
		if(X_contra>0) L[447][0]=2;
		}
	//Check all rules of unit[447][1]
	L[447][1] = LargeX[447][0]>0 ? 1 : 0;
	satisfiable[447][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit447_1[i][0] ][ unit447_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit447_1[i][2] ][ unit447_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit447_1[i][4] ][ unit447_1[i][5] ] >0);
		X_contra = ( LargeX[447][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit447_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[447][0]=0; L[447][1]=1;}
			satisfiable[447][1]=satisfiable[447][1] & ((x[447] ^ 1) | (x[ unit447_1[i][0] ] ^ unit447_1[i][1]) |(x[ unit447_1[i][2] ] ^ unit447_1[i][3]));
			}
		if(X_contra>0) L[447][1]=2;
		}
	//Check all rules of unit[448][0]
	L[448][0] = LargeX[448][1]>0 ? 1 : 0;
	satisfiable[448][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit448_0[i][0] ][ unit448_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit448_0[i][2] ][ unit448_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit448_0[i][4] ][ unit448_0[i][5] ] >0);
		X_contra = ( LargeX[448][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit448_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[448][1]=0; L[448][0]=1;}
			satisfiable[448][0]=satisfiable[448][0] & ((x[448] ^ 0) | (x[ unit448_0[i][0] ] ^ unit448_0[i][1]) |(x[ unit448_0[i][2] ] ^ unit448_0[i][3]));
			}
		if(X_contra>0) L[448][0]=2;
		}
	//Check all rules of unit[448][1]
	L[448][1] = LargeX[448][0]>0 ? 1 : 0;
	satisfiable[448][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit448_1[i][0] ][ unit448_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit448_1[i][2] ][ unit448_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit448_1[i][4] ][ unit448_1[i][5] ] >0);
		X_contra = ( LargeX[448][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit448_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[448][0]=0; L[448][1]=1;}
			satisfiable[448][1]=satisfiable[448][1] & ((x[448] ^ 1) | (x[ unit448_1[i][0] ] ^ unit448_1[i][1]) |(x[ unit448_1[i][2] ] ^ unit448_1[i][3]));
			}
		if(X_contra>0) L[448][1]=2;
		}
	//Check all rules of unit[449][0]
	L[449][0] = LargeX[449][1]>0 ? 1 : 0;
	satisfiable[449][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit449_0[i][0] ][ unit449_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit449_0[i][2] ][ unit449_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit449_0[i][4] ][ unit449_0[i][5] ] >0);
		X_contra = ( LargeX[449][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit449_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[449][1]=0; L[449][0]=1;}
			satisfiable[449][0]=satisfiable[449][0] & ((x[449] ^ 0) | (x[ unit449_0[i][0] ] ^ unit449_0[i][1]) |(x[ unit449_0[i][2] ] ^ unit449_0[i][3]));
			}
		if(X_contra>0) L[449][0]=2;
		}
	//Check all rules of unit[449][1]
	L[449][1] = LargeX[449][0]>0 ? 1 : 0;
	satisfiable[449][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit449_1[i][0] ][ unit449_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit449_1[i][2] ][ unit449_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit449_1[i][4] ][ unit449_1[i][5] ] >0);
		X_contra = ( LargeX[449][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit449_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[449][0]=0; L[449][1]=1;}
			satisfiable[449][1]=satisfiable[449][1] & ((x[449] ^ 1) | (x[ unit449_1[i][0] ] ^ unit449_1[i][1]) |(x[ unit449_1[i][2] ] ^ unit449_1[i][3]));
			}
		if(X_contra>0) L[449][1]=2;
		}
	//Check all rules of unit[450][0]
	L[450][0] = LargeX[450][1]>0 ? 1 : 0;
	satisfiable[450][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit450_0[i][0] ][ unit450_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit450_0[i][2] ][ unit450_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit450_0[i][4] ][ unit450_0[i][5] ] >0);
		X_contra = ( LargeX[450][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit450_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[450][1]=0; L[450][0]=1;}
			satisfiable[450][0]=satisfiable[450][0] & ((x[450] ^ 0) | (x[ unit450_0[i][0] ] ^ unit450_0[i][1]) |(x[ unit450_0[i][2] ] ^ unit450_0[i][3]));
			}
		if(X_contra>0) L[450][0]=2;
		}
	//Check all rules of unit[450][1]
	L[450][1] = LargeX[450][0]>0 ? 1 : 0;
	satisfiable[450][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit450_1[i][0] ][ unit450_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit450_1[i][2] ][ unit450_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit450_1[i][4] ][ unit450_1[i][5] ] >0);
		X_contra = ( LargeX[450][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit450_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[450][0]=0; L[450][1]=1;}
			satisfiable[450][1]=satisfiable[450][1] & ((x[450] ^ 1) | (x[ unit450_1[i][0] ] ^ unit450_1[i][1]) |(x[ unit450_1[i][2] ] ^ unit450_1[i][3]));
			}
		if(X_contra>0) L[450][1]=2;
		}
	//Check all rules of unit[451][0]
	L[451][0] = LargeX[451][1]>0 ? 1 : 0;
	satisfiable[451][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit451_0[i][0] ][ unit451_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit451_0[i][2] ][ unit451_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit451_0[i][4] ][ unit451_0[i][5] ] >0);
		X_contra = ( LargeX[451][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit451_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[451][1]=0; L[451][0]=1;}
			satisfiable[451][0]=satisfiable[451][0] & ((x[451] ^ 0) | (x[ unit451_0[i][0] ] ^ unit451_0[i][1]) |(x[ unit451_0[i][2] ] ^ unit451_0[i][3]));
			}
		if(X_contra>0) L[451][0]=2;
		}
	//Check all rules of unit[451][1]
	L[451][1] = LargeX[451][0]>0 ? 1 : 0;
	satisfiable[451][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit451_1[i][0] ][ unit451_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit451_1[i][2] ][ unit451_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit451_1[i][4] ][ unit451_1[i][5] ] >0);
		X_contra = ( LargeX[451][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit451_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[451][0]=0; L[451][1]=1;}
			satisfiable[451][1]=satisfiable[451][1] & ((x[451] ^ 1) | (x[ unit451_1[i][0] ] ^ unit451_1[i][1]) |(x[ unit451_1[i][2] ] ^ unit451_1[i][3]));
			}
		if(X_contra>0) L[451][1]=2;
		}
	//Check all rules of unit[452][0]
	L[452][0] = LargeX[452][1]>0 ? 1 : 0;
	satisfiable[452][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit452_0[i][0] ][ unit452_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit452_0[i][2] ][ unit452_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit452_0[i][4] ][ unit452_0[i][5] ] >0);
		X_contra = ( LargeX[452][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit452_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[452][1]=0; L[452][0]=1;}
			satisfiable[452][0]=satisfiable[452][0] & ((x[452] ^ 0) | (x[ unit452_0[i][0] ] ^ unit452_0[i][1]) |(x[ unit452_0[i][2] ] ^ unit452_0[i][3]));
			}
		if(X_contra>0) L[452][0]=2;
		}
	//Check all rules of unit[452][1]
	L[452][1] = LargeX[452][0]>0 ? 1 : 0;
	satisfiable[452][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit452_1[i][0] ][ unit452_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit452_1[i][2] ][ unit452_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit452_1[i][4] ][ unit452_1[i][5] ] >0);
		X_contra = ( LargeX[452][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit452_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[452][0]=0; L[452][1]=1;}
			satisfiable[452][1]=satisfiable[452][1] & ((x[452] ^ 1) | (x[ unit452_1[i][0] ] ^ unit452_1[i][1]) |(x[ unit452_1[i][2] ] ^ unit452_1[i][3]));
			}
		if(X_contra>0) L[452][1]=2;
		}
	//Check all rules of unit[453][0]
	L[453][0] = LargeX[453][1]>0 ? 1 : 0;
	satisfiable[453][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit453_0[i][0] ][ unit453_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit453_0[i][2] ][ unit453_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit453_0[i][4] ][ unit453_0[i][5] ] >0);
		X_contra = ( LargeX[453][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit453_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[453][1]=0; L[453][0]=1;}
			satisfiable[453][0]=satisfiable[453][0] & ((x[453] ^ 0) | (x[ unit453_0[i][0] ] ^ unit453_0[i][1]) |(x[ unit453_0[i][2] ] ^ unit453_0[i][3]));
			}
		if(X_contra>0) L[453][0]=2;
		}
	//Check all rules of unit[453][1]
	L[453][1] = LargeX[453][0]>0 ? 1 : 0;
	satisfiable[453][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit453_1[i][0] ][ unit453_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit453_1[i][2] ][ unit453_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit453_1[i][4] ][ unit453_1[i][5] ] >0);
		X_contra = ( LargeX[453][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit453_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[453][0]=0; L[453][1]=1;}
			satisfiable[453][1]=satisfiable[453][1] & ((x[453] ^ 1) | (x[ unit453_1[i][0] ] ^ unit453_1[i][1]) |(x[ unit453_1[i][2] ] ^ unit453_1[i][3]));
			}
		if(X_contra>0) L[453][1]=2;
		}
	//Check all rules of unit[454][0]
	L[454][0] = LargeX[454][1]>0 ? 1 : 0;
	satisfiable[454][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit454_0[i][0] ][ unit454_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit454_0[i][2] ][ unit454_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit454_0[i][4] ][ unit454_0[i][5] ] >0);
		X_contra = ( LargeX[454][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit454_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[454][1]=0; L[454][0]=1;}
			satisfiable[454][0]=satisfiable[454][0] & ((x[454] ^ 0) | (x[ unit454_0[i][0] ] ^ unit454_0[i][1]) |(x[ unit454_0[i][2] ] ^ unit454_0[i][3]));
			}
		if(X_contra>0) L[454][0]=2;
		}
	//Check all rules of unit[454][1]
	L[454][1] = LargeX[454][0]>0 ? 1 : 0;
	satisfiable[454][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit454_1[i][0] ][ unit454_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit454_1[i][2] ][ unit454_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit454_1[i][4] ][ unit454_1[i][5] ] >0);
		X_contra = ( LargeX[454][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit454_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[454][0]=0; L[454][1]=1;}
			satisfiable[454][1]=satisfiable[454][1] & ((x[454] ^ 1) | (x[ unit454_1[i][0] ] ^ unit454_1[i][1]) |(x[ unit454_1[i][2] ] ^ unit454_1[i][3]));
			}
		if(X_contra>0) L[454][1]=2;
		}
	//Check all rules of unit[455][0]
	L[455][0] = LargeX[455][1]>0 ? 1 : 0;
	satisfiable[455][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit455_0[i][0] ][ unit455_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit455_0[i][2] ][ unit455_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit455_0[i][4] ][ unit455_0[i][5] ] >0);
		X_contra = ( LargeX[455][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit455_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[455][1]=0; L[455][0]=1;}
			satisfiable[455][0]=satisfiable[455][0] & ((x[455] ^ 0) | (x[ unit455_0[i][0] ] ^ unit455_0[i][1]) |(x[ unit455_0[i][2] ] ^ unit455_0[i][3]));
			}
		if(X_contra>0) L[455][0]=2;
		}
	//Check all rules of unit[455][1]
	L[455][1] = LargeX[455][0]>0 ? 1 : 0;
	satisfiable[455][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit455_1[i][0] ][ unit455_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit455_1[i][2] ][ unit455_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit455_1[i][4] ][ unit455_1[i][5] ] >0);
		X_contra = ( LargeX[455][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit455_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[455][0]=0; L[455][1]=1;}
			satisfiable[455][1]=satisfiable[455][1] & ((x[455] ^ 1) | (x[ unit455_1[i][0] ] ^ unit455_1[i][1]) |(x[ unit455_1[i][2] ] ^ unit455_1[i][3]));
			}
		if(X_contra>0) L[455][1]=2;
		}
	//Check all rules of unit[456][0]
	L[456][0] = LargeX[456][1]>0 ? 1 : 0;
	satisfiable[456][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit456_0[i][0] ][ unit456_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit456_0[i][2] ][ unit456_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit456_0[i][4] ][ unit456_0[i][5] ] >0);
		X_contra = ( LargeX[456][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit456_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[456][1]=0; L[456][0]=1;}
			satisfiable[456][0]=satisfiable[456][0] & ((x[456] ^ 0) | (x[ unit456_0[i][0] ] ^ unit456_0[i][1]) |(x[ unit456_0[i][2] ] ^ unit456_0[i][3]));
			}
		if(X_contra>0) L[456][0]=2;
		}
	//Check all rules of unit[456][1]
	L[456][1] = LargeX[456][0]>0 ? 1 : 0;
	satisfiable[456][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit456_1[i][0] ][ unit456_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit456_1[i][2] ][ unit456_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit456_1[i][4] ][ unit456_1[i][5] ] >0);
		X_contra = ( LargeX[456][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit456_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[456][0]=0; L[456][1]=1;}
			satisfiable[456][1]=satisfiable[456][1] & ((x[456] ^ 1) | (x[ unit456_1[i][0] ] ^ unit456_1[i][1]) |(x[ unit456_1[i][2] ] ^ unit456_1[i][3]));
			}
		if(X_contra>0) L[456][1]=2;
		}
	//Check all rules of unit[457][0]
	L[457][0] = LargeX[457][1]>0 ? 1 : 0;
	satisfiable[457][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit457_0[i][0] ][ unit457_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit457_0[i][2] ][ unit457_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit457_0[i][4] ][ unit457_0[i][5] ] >0);
		X_contra = ( LargeX[457][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit457_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[457][1]=0; L[457][0]=1;}
			satisfiable[457][0]=satisfiable[457][0] & ((x[457] ^ 0) | (x[ unit457_0[i][0] ] ^ unit457_0[i][1]) |(x[ unit457_0[i][2] ] ^ unit457_0[i][3]));
			}
		if(X_contra>0) L[457][0]=2;
		}
	//Check all rules of unit[457][1]
	L[457][1] = LargeX[457][0]>0 ? 1 : 0;
	satisfiable[457][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit457_1[i][0] ][ unit457_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit457_1[i][2] ][ unit457_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit457_1[i][4] ][ unit457_1[i][5] ] >0);
		X_contra = ( LargeX[457][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit457_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[457][0]=0; L[457][1]=1;}
			satisfiable[457][1]=satisfiable[457][1] & ((x[457] ^ 1) | (x[ unit457_1[i][0] ] ^ unit457_1[i][1]) |(x[ unit457_1[i][2] ] ^ unit457_1[i][3]));
			}
		if(X_contra>0) L[457][1]=2;
		}
	//Check all rules of unit[458][0]
	L[458][0] = LargeX[458][1]>0 ? 1 : 0;
	satisfiable[458][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit458_0[i][0] ][ unit458_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit458_0[i][2] ][ unit458_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit458_0[i][4] ][ unit458_0[i][5] ] >0);
		X_contra = ( LargeX[458][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit458_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[458][1]=0; L[458][0]=1;}
			satisfiable[458][0]=satisfiable[458][0] & ((x[458] ^ 0) | (x[ unit458_0[i][0] ] ^ unit458_0[i][1]) |(x[ unit458_0[i][2] ] ^ unit458_0[i][3]));
			}
		if(X_contra>0) L[458][0]=2;
		}
	//Check all rules of unit[458][1]
	L[458][1] = LargeX[458][0]>0 ? 1 : 0;
	satisfiable[458][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit458_1[i][0] ][ unit458_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit458_1[i][2] ][ unit458_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit458_1[i][4] ][ unit458_1[i][5] ] >0);
		X_contra = ( LargeX[458][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit458_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[458][0]=0; L[458][1]=1;}
			satisfiable[458][1]=satisfiable[458][1] & ((x[458] ^ 1) | (x[ unit458_1[i][0] ] ^ unit458_1[i][1]) |(x[ unit458_1[i][2] ] ^ unit458_1[i][3]));
			}
		if(X_contra>0) L[458][1]=2;
		}
	//Check all rules of unit[459][0]
	L[459][0] = LargeX[459][1]>0 ? 1 : 0;
	satisfiable[459][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit459_0[i][0] ][ unit459_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit459_0[i][2] ][ unit459_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit459_0[i][4] ][ unit459_0[i][5] ] >0);
		X_contra = ( LargeX[459][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit459_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[459][1]=0; L[459][0]=1;}
			satisfiable[459][0]=satisfiable[459][0] & ((x[459] ^ 0) | (x[ unit459_0[i][0] ] ^ unit459_0[i][1]) |(x[ unit459_0[i][2] ] ^ unit459_0[i][3]));
			}
		if(X_contra>0) L[459][0]=2;
		}
	//Check all rules of unit[459][1]
	L[459][1] = LargeX[459][0]>0 ? 1 : 0;
	satisfiable[459][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit459_1[i][0] ][ unit459_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit459_1[i][2] ][ unit459_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit459_1[i][4] ][ unit459_1[i][5] ] >0);
		X_contra = ( LargeX[459][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit459_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[459][0]=0; L[459][1]=1;}
			satisfiable[459][1]=satisfiable[459][1] & ((x[459] ^ 1) | (x[ unit459_1[i][0] ] ^ unit459_1[i][1]) |(x[ unit459_1[i][2] ] ^ unit459_1[i][3]));
			}
		if(X_contra>0) L[459][1]=2;
		}
	//Check all rules of unit[460][0]
	L[460][0] = LargeX[460][1]>0 ? 1 : 0;
	satisfiable[460][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit460_0[i][0] ][ unit460_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit460_0[i][2] ][ unit460_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit460_0[i][4] ][ unit460_0[i][5] ] >0);
		X_contra = ( LargeX[460][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit460_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[460][1]=0; L[460][0]=1;}
			satisfiable[460][0]=satisfiable[460][0] & ((x[460] ^ 0) | (x[ unit460_0[i][0] ] ^ unit460_0[i][1]) |(x[ unit460_0[i][2] ] ^ unit460_0[i][3]));
			}
		if(X_contra>0) L[460][0]=2;
		}
	//Check all rules of unit[460][1]
	L[460][1] = LargeX[460][0]>0 ? 1 : 0;
	satisfiable[460][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit460_1[i][0] ][ unit460_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit460_1[i][2] ][ unit460_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit460_1[i][4] ][ unit460_1[i][5] ] >0);
		X_contra = ( LargeX[460][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit460_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[460][0]=0; L[460][1]=1;}
			satisfiable[460][1]=satisfiable[460][1] & ((x[460] ^ 1) | (x[ unit460_1[i][0] ] ^ unit460_1[i][1]) |(x[ unit460_1[i][2] ] ^ unit460_1[i][3]));
			}
		if(X_contra>0) L[460][1]=2;
		}
	//Check all rules of unit[461][0]
	L[461][0] = LargeX[461][1]>0 ? 1 : 0;
	satisfiable[461][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit461_0[i][0] ][ unit461_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit461_0[i][2] ][ unit461_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit461_0[i][4] ][ unit461_0[i][5] ] >0);
		X_contra = ( LargeX[461][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit461_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[461][1]=0; L[461][0]=1;}
			satisfiable[461][0]=satisfiable[461][0] & ((x[461] ^ 0) | (x[ unit461_0[i][0] ] ^ unit461_0[i][1]) |(x[ unit461_0[i][2] ] ^ unit461_0[i][3]));
			}
		if(X_contra>0) L[461][0]=2;
		}
	//Check all rules of unit[461][1]
	L[461][1] = LargeX[461][0]>0 ? 1 : 0;
	satisfiable[461][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit461_1[i][0] ][ unit461_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit461_1[i][2] ][ unit461_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit461_1[i][4] ][ unit461_1[i][5] ] >0);
		X_contra = ( LargeX[461][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit461_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[461][0]=0; L[461][1]=1;}
			satisfiable[461][1]=satisfiable[461][1] & ((x[461] ^ 1) | (x[ unit461_1[i][0] ] ^ unit461_1[i][1]) |(x[ unit461_1[i][2] ] ^ unit461_1[i][3]));
			}
		if(X_contra>0) L[461][1]=2;
		}
	//Check all rules of unit[462][0]
	L[462][0] = LargeX[462][1]>0 ? 1 : 0;
	satisfiable[462][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit462_0[i][0] ][ unit462_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit462_0[i][2] ][ unit462_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit462_0[i][4] ][ unit462_0[i][5] ] >0);
		X_contra = ( LargeX[462][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit462_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[462][1]=0; L[462][0]=1;}
			satisfiable[462][0]=satisfiable[462][0] & ((x[462] ^ 0) | (x[ unit462_0[i][0] ] ^ unit462_0[i][1]) |(x[ unit462_0[i][2] ] ^ unit462_0[i][3]));
			}
		if(X_contra>0) L[462][0]=2;
		}
	//Check all rules of unit[462][1]
	L[462][1] = LargeX[462][0]>0 ? 1 : 0;
	satisfiable[462][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit462_1[i][0] ][ unit462_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit462_1[i][2] ][ unit462_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit462_1[i][4] ][ unit462_1[i][5] ] >0);
		X_contra = ( LargeX[462][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit462_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[462][0]=0; L[462][1]=1;}
			satisfiable[462][1]=satisfiable[462][1] & ((x[462] ^ 1) | (x[ unit462_1[i][0] ] ^ unit462_1[i][1]) |(x[ unit462_1[i][2] ] ^ unit462_1[i][3]));
			}
		if(X_contra>0) L[462][1]=2;
		}
	//Check all rules of unit[463][0]
	L[463][0] = LargeX[463][1]>0 ? 1 : 0;
	satisfiable[463][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit463_0[i][0] ][ unit463_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit463_0[i][2] ][ unit463_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit463_0[i][4] ][ unit463_0[i][5] ] >0);
		X_contra = ( LargeX[463][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit463_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[463][1]=0; L[463][0]=1;}
			satisfiable[463][0]=satisfiable[463][0] & ((x[463] ^ 0) | (x[ unit463_0[i][0] ] ^ unit463_0[i][1]) |(x[ unit463_0[i][2] ] ^ unit463_0[i][3]));
			}
		if(X_contra>0) L[463][0]=2;
		}
	//Check all rules of unit[463][1]
	L[463][1] = LargeX[463][0]>0 ? 1 : 0;
	satisfiable[463][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit463_1[i][0] ][ unit463_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit463_1[i][2] ][ unit463_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit463_1[i][4] ][ unit463_1[i][5] ] >0);
		X_contra = ( LargeX[463][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit463_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[463][0]=0; L[463][1]=1;}
			satisfiable[463][1]=satisfiable[463][1] & ((x[463] ^ 1) | (x[ unit463_1[i][0] ] ^ unit463_1[i][1]) |(x[ unit463_1[i][2] ] ^ unit463_1[i][3]));
			}
		if(X_contra>0) L[463][1]=2;
		}
	//Check all rules of unit[464][0]
	L[464][0] = LargeX[464][1]>0 ? 1 : 0;
	satisfiable[464][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit464_0[i][0] ][ unit464_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit464_0[i][2] ][ unit464_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit464_0[i][4] ][ unit464_0[i][5] ] >0);
		X_contra = ( LargeX[464][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit464_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[464][1]=0; L[464][0]=1;}
			satisfiable[464][0]=satisfiable[464][0] & ((x[464] ^ 0) | (x[ unit464_0[i][0] ] ^ unit464_0[i][1]) |(x[ unit464_0[i][2] ] ^ unit464_0[i][3]));
			}
		if(X_contra>0) L[464][0]=2;
		}
	//Check all rules of unit[464][1]
	L[464][1] = LargeX[464][0]>0 ? 1 : 0;
	satisfiable[464][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit464_1[i][0] ][ unit464_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit464_1[i][2] ][ unit464_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit464_1[i][4] ][ unit464_1[i][5] ] >0);
		X_contra = ( LargeX[464][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit464_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[464][0]=0; L[464][1]=1;}
			satisfiable[464][1]=satisfiable[464][1] & ((x[464] ^ 1) | (x[ unit464_1[i][0] ] ^ unit464_1[i][1]) |(x[ unit464_1[i][2] ] ^ unit464_1[i][3]));
			}
		if(X_contra>0) L[464][1]=2;
		}
	//Check all rules of unit[465][0]
	L[465][0] = LargeX[465][1]>0 ? 1 : 0;
	satisfiable[465][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit465_0[i][0] ][ unit465_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit465_0[i][2] ][ unit465_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit465_0[i][4] ][ unit465_0[i][5] ] >0);
		X_contra = ( LargeX[465][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit465_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[465][1]=0; L[465][0]=1;}
			satisfiable[465][0]=satisfiable[465][0] & ((x[465] ^ 0) | (x[ unit465_0[i][0] ] ^ unit465_0[i][1]) |(x[ unit465_0[i][2] ] ^ unit465_0[i][3]));
			}
		if(X_contra>0) L[465][0]=2;
		}
	//Check all rules of unit[465][1]
	L[465][1] = LargeX[465][0]>0 ? 1 : 0;
	satisfiable[465][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit465_1[i][0] ][ unit465_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit465_1[i][2] ][ unit465_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit465_1[i][4] ][ unit465_1[i][5] ] >0);
		X_contra = ( LargeX[465][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit465_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[465][0]=0; L[465][1]=1;}
			satisfiable[465][1]=satisfiable[465][1] & ((x[465] ^ 1) | (x[ unit465_1[i][0] ] ^ unit465_1[i][1]) |(x[ unit465_1[i][2] ] ^ unit465_1[i][3]));
			}
		if(X_contra>0) L[465][1]=2;
		}
	//Check all rules of unit[466][0]
	L[466][0] = LargeX[466][1]>0 ? 1 : 0;
	satisfiable[466][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit466_0[i][0] ][ unit466_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit466_0[i][2] ][ unit466_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit466_0[i][4] ][ unit466_0[i][5] ] >0);
		X_contra = ( LargeX[466][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit466_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[466][1]=0; L[466][0]=1;}
			satisfiable[466][0]=satisfiable[466][0] & ((x[466] ^ 0) | (x[ unit466_0[i][0] ] ^ unit466_0[i][1]) |(x[ unit466_0[i][2] ] ^ unit466_0[i][3]));
			}
		if(X_contra>0) L[466][0]=2;
		}
	//Check all rules of unit[466][1]
	L[466][1] = LargeX[466][0]>0 ? 1 : 0;
	satisfiable[466][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit466_1[i][0] ][ unit466_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit466_1[i][2] ][ unit466_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit466_1[i][4] ][ unit466_1[i][5] ] >0);
		X_contra = ( LargeX[466][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit466_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[466][0]=0; L[466][1]=1;}
			satisfiable[466][1]=satisfiable[466][1] & ((x[466] ^ 1) | (x[ unit466_1[i][0] ] ^ unit466_1[i][1]) |(x[ unit466_1[i][2] ] ^ unit466_1[i][3]));
			}
		if(X_contra>0) L[466][1]=2;
		}
	//Check all rules of unit[467][0]
	L[467][0] = LargeX[467][1]>0 ? 1 : 0;
	satisfiable[467][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit467_0[i][0] ][ unit467_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit467_0[i][2] ][ unit467_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit467_0[i][4] ][ unit467_0[i][5] ] >0);
		X_contra = ( LargeX[467][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit467_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[467][1]=0; L[467][0]=1;}
			satisfiable[467][0]=satisfiable[467][0] & ((x[467] ^ 0) | (x[ unit467_0[i][0] ] ^ unit467_0[i][1]) |(x[ unit467_0[i][2] ] ^ unit467_0[i][3]));
			}
		if(X_contra>0) L[467][0]=2;
		}
	//Check all rules of unit[467][1]
	L[467][1] = LargeX[467][0]>0 ? 1 : 0;
	satisfiable[467][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit467_1[i][0] ][ unit467_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit467_1[i][2] ][ unit467_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit467_1[i][4] ][ unit467_1[i][5] ] >0);
		X_contra = ( LargeX[467][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit467_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[467][0]=0; L[467][1]=1;}
			satisfiable[467][1]=satisfiable[467][1] & ((x[467] ^ 1) | (x[ unit467_1[i][0] ] ^ unit467_1[i][1]) |(x[ unit467_1[i][2] ] ^ unit467_1[i][3]));
			}
		if(X_contra>0) L[467][1]=2;
		}
	//Check all rules of unit[468][0]
	L[468][0] = LargeX[468][1]>0 ? 1 : 0;
	satisfiable[468][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit468_0[i][0] ][ unit468_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit468_0[i][2] ][ unit468_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit468_0[i][4] ][ unit468_0[i][5] ] >0);
		X_contra = ( LargeX[468][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit468_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[468][1]=0; L[468][0]=1;}
			satisfiable[468][0]=satisfiable[468][0] & ((x[468] ^ 0) | (x[ unit468_0[i][0] ] ^ unit468_0[i][1]) |(x[ unit468_0[i][2] ] ^ unit468_0[i][3]));
			}
		if(X_contra>0) L[468][0]=2;
		}
	//Check all rules of unit[468][1]
	L[468][1] = LargeX[468][0]>0 ? 1 : 0;
	satisfiable[468][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit468_1[i][0] ][ unit468_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit468_1[i][2] ][ unit468_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit468_1[i][4] ][ unit468_1[i][5] ] >0);
		X_contra = ( LargeX[468][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit468_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[468][0]=0; L[468][1]=1;}
			satisfiable[468][1]=satisfiable[468][1] & ((x[468] ^ 1) | (x[ unit468_1[i][0] ] ^ unit468_1[i][1]) |(x[ unit468_1[i][2] ] ^ unit468_1[i][3]));
			}
		if(X_contra>0) L[468][1]=2;
		}
	//Check all rules of unit[469][0]
	L[469][0] = LargeX[469][1]>0 ? 1 : 0;
	satisfiable[469][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit469_0[i][0] ][ unit469_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit469_0[i][2] ][ unit469_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit469_0[i][4] ][ unit469_0[i][5] ] >0);
		X_contra = ( LargeX[469][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit469_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[469][1]=0; L[469][0]=1;}
			satisfiable[469][0]=satisfiable[469][0] & ((x[469] ^ 0) | (x[ unit469_0[i][0] ] ^ unit469_0[i][1]) |(x[ unit469_0[i][2] ] ^ unit469_0[i][3]));
			}
		if(X_contra>0) L[469][0]=2;
		}
	//Check all rules of unit[469][1]
	L[469][1] = LargeX[469][0]>0 ? 1 : 0;
	satisfiable[469][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit469_1[i][0] ][ unit469_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit469_1[i][2] ][ unit469_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit469_1[i][4] ][ unit469_1[i][5] ] >0);
		X_contra = ( LargeX[469][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit469_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[469][0]=0; L[469][1]=1;}
			satisfiable[469][1]=satisfiable[469][1] & ((x[469] ^ 1) | (x[ unit469_1[i][0] ] ^ unit469_1[i][1]) |(x[ unit469_1[i][2] ] ^ unit469_1[i][3]));
			}
		if(X_contra>0) L[469][1]=2;
		}
	//Check all rules of unit[470][0]
	L[470][0] = LargeX[470][1]>0 ? 1 : 0;
	satisfiable[470][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit470_0[i][0] ][ unit470_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit470_0[i][2] ][ unit470_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit470_0[i][4] ][ unit470_0[i][5] ] >0);
		X_contra = ( LargeX[470][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit470_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[470][1]=0; L[470][0]=1;}
			satisfiable[470][0]=satisfiable[470][0] & ((x[470] ^ 0) | (x[ unit470_0[i][0] ] ^ unit470_0[i][1]) |(x[ unit470_0[i][2] ] ^ unit470_0[i][3]));
			}
		if(X_contra>0) L[470][0]=2;
		}
	//Check all rules of unit[470][1]
	L[470][1] = LargeX[470][0]>0 ? 1 : 0;
	satisfiable[470][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit470_1[i][0] ][ unit470_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit470_1[i][2] ][ unit470_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit470_1[i][4] ][ unit470_1[i][5] ] >0);
		X_contra = ( LargeX[470][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit470_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[470][0]=0; L[470][1]=1;}
			satisfiable[470][1]=satisfiable[470][1] & ((x[470] ^ 1) | (x[ unit470_1[i][0] ] ^ unit470_1[i][1]) |(x[ unit470_1[i][2] ] ^ unit470_1[i][3]));
			}
		if(X_contra>0) L[470][1]=2;
		}
	//Check all rules of unit[471][0]
	L[471][0] = LargeX[471][1]>0 ? 1 : 0;
	satisfiable[471][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit471_0[i][0] ][ unit471_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit471_0[i][2] ][ unit471_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit471_0[i][4] ][ unit471_0[i][5] ] >0);
		X_contra = ( LargeX[471][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit471_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[471][1]=0; L[471][0]=1;}
			satisfiable[471][0]=satisfiable[471][0] & ((x[471] ^ 0) | (x[ unit471_0[i][0] ] ^ unit471_0[i][1]) |(x[ unit471_0[i][2] ] ^ unit471_0[i][3]));
			}
		if(X_contra>0) L[471][0]=2;
		}
	//Check all rules of unit[471][1]
	L[471][1] = LargeX[471][0]>0 ? 1 : 0;
	satisfiable[471][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit471_1[i][0] ][ unit471_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit471_1[i][2] ][ unit471_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit471_1[i][4] ][ unit471_1[i][5] ] >0);
		X_contra = ( LargeX[471][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit471_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[471][0]=0; L[471][1]=1;}
			satisfiable[471][1]=satisfiable[471][1] & ((x[471] ^ 1) | (x[ unit471_1[i][0] ] ^ unit471_1[i][1]) |(x[ unit471_1[i][2] ] ^ unit471_1[i][3]));
			}
		if(X_contra>0) L[471][1]=2;
		}
	//Check all rules of unit[472][0]
	L[472][0] = LargeX[472][1]>0 ? 1 : 0;
	satisfiable[472][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit472_0[i][0] ][ unit472_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit472_0[i][2] ][ unit472_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit472_0[i][4] ][ unit472_0[i][5] ] >0);
		X_contra = ( LargeX[472][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit472_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[472][1]=0; L[472][0]=1;}
			satisfiable[472][0]=satisfiable[472][0] & ((x[472] ^ 0) | (x[ unit472_0[i][0] ] ^ unit472_0[i][1]) |(x[ unit472_0[i][2] ] ^ unit472_0[i][3]));
			}
		if(X_contra>0) L[472][0]=2;
		}
	//Check all rules of unit[472][1]
	L[472][1] = LargeX[472][0]>0 ? 1 : 0;
	satisfiable[472][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit472_1[i][0] ][ unit472_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit472_1[i][2] ][ unit472_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit472_1[i][4] ][ unit472_1[i][5] ] >0);
		X_contra = ( LargeX[472][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit472_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[472][0]=0; L[472][1]=1;}
			satisfiable[472][1]=satisfiable[472][1] & ((x[472] ^ 1) | (x[ unit472_1[i][0] ] ^ unit472_1[i][1]) |(x[ unit472_1[i][2] ] ^ unit472_1[i][3]));
			}
		if(X_contra>0) L[472][1]=2;
		}
	//Check all rules of unit[473][0]
	L[473][0] = LargeX[473][1]>0 ? 1 : 0;
	satisfiable[473][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit473_0[i][0] ][ unit473_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit473_0[i][2] ][ unit473_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit473_0[i][4] ][ unit473_0[i][5] ] >0);
		X_contra = ( LargeX[473][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit473_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[473][1]=0; L[473][0]=1;}
			satisfiable[473][0]=satisfiable[473][0] & ((x[473] ^ 0) | (x[ unit473_0[i][0] ] ^ unit473_0[i][1]) |(x[ unit473_0[i][2] ] ^ unit473_0[i][3]));
			}
		if(X_contra>0) L[473][0]=2;
		}
	//Check all rules of unit[473][1]
	L[473][1] = LargeX[473][0]>0 ? 1 : 0;
	satisfiable[473][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit473_1[i][0] ][ unit473_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit473_1[i][2] ][ unit473_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit473_1[i][4] ][ unit473_1[i][5] ] >0);
		X_contra = ( LargeX[473][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit473_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[473][0]=0; L[473][1]=1;}
			satisfiable[473][1]=satisfiable[473][1] & ((x[473] ^ 1) | (x[ unit473_1[i][0] ] ^ unit473_1[i][1]) |(x[ unit473_1[i][2] ] ^ unit473_1[i][3]));
			}
		if(X_contra>0) L[473][1]=2;
		}
	//Check all rules of unit[474][0]
	L[474][0] = LargeX[474][1]>0 ? 1 : 0;
	satisfiable[474][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit474_0[i][0] ][ unit474_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit474_0[i][2] ][ unit474_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit474_0[i][4] ][ unit474_0[i][5] ] >0);
		X_contra = ( LargeX[474][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit474_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[474][1]=0; L[474][0]=1;}
			satisfiable[474][0]=satisfiable[474][0] & ((x[474] ^ 0) | (x[ unit474_0[i][0] ] ^ unit474_0[i][1]) |(x[ unit474_0[i][2] ] ^ unit474_0[i][3]));
			}
		if(X_contra>0) L[474][0]=2;
		}
	//Check all rules of unit[474][1]
	L[474][1] = LargeX[474][0]>0 ? 1 : 0;
	satisfiable[474][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit474_1[i][0] ][ unit474_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit474_1[i][2] ][ unit474_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit474_1[i][4] ][ unit474_1[i][5] ] >0);
		X_contra = ( LargeX[474][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit474_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[474][0]=0; L[474][1]=1;}
			satisfiable[474][1]=satisfiable[474][1] & ((x[474] ^ 1) | (x[ unit474_1[i][0] ] ^ unit474_1[i][1]) |(x[ unit474_1[i][2] ] ^ unit474_1[i][3]));
			}
		if(X_contra>0) L[474][1]=2;
		}
	//Check all rules of unit[475][0]
	L[475][0] = LargeX[475][1]>0 ? 1 : 0;
	satisfiable[475][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit475_0[i][0] ][ unit475_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit475_0[i][2] ][ unit475_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit475_0[i][4] ][ unit475_0[i][5] ] >0);
		X_contra = ( LargeX[475][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit475_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[475][1]=0; L[475][0]=1;}
			satisfiable[475][0]=satisfiable[475][0] & ((x[475] ^ 0) | (x[ unit475_0[i][0] ] ^ unit475_0[i][1]) |(x[ unit475_0[i][2] ] ^ unit475_0[i][3]));
			}
		if(X_contra>0) L[475][0]=2;
		}
	//Check all rules of unit[475][1]
	L[475][1] = LargeX[475][0]>0 ? 1 : 0;
	satisfiable[475][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit475_1[i][0] ][ unit475_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit475_1[i][2] ][ unit475_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit475_1[i][4] ][ unit475_1[i][5] ] >0);
		X_contra = ( LargeX[475][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit475_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[475][0]=0; L[475][1]=1;}
			satisfiable[475][1]=satisfiable[475][1] & ((x[475] ^ 1) | (x[ unit475_1[i][0] ] ^ unit475_1[i][1]) |(x[ unit475_1[i][2] ] ^ unit475_1[i][3]));
			}
		if(X_contra>0) L[475][1]=2;
		}
	//Check all rules of unit[476][0]
	L[476][0] = LargeX[476][1]>0 ? 1 : 0;
	satisfiable[476][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit476_0[i][0] ][ unit476_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit476_0[i][2] ][ unit476_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit476_0[i][4] ][ unit476_0[i][5] ] >0);
		X_contra = ( LargeX[476][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit476_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[476][1]=0; L[476][0]=1;}
			satisfiable[476][0]=satisfiable[476][0] & ((x[476] ^ 0) | (x[ unit476_0[i][0] ] ^ unit476_0[i][1]) |(x[ unit476_0[i][2] ] ^ unit476_0[i][3]));
			}
		if(X_contra>0) L[476][0]=2;
		}
	//Check all rules of unit[476][1]
	L[476][1] = LargeX[476][0]>0 ? 1 : 0;
	satisfiable[476][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit476_1[i][0] ][ unit476_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit476_1[i][2] ][ unit476_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit476_1[i][4] ][ unit476_1[i][5] ] >0);
		X_contra = ( LargeX[476][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit476_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[476][0]=0; L[476][1]=1;}
			satisfiable[476][1]=satisfiable[476][1] & ((x[476] ^ 1) | (x[ unit476_1[i][0] ] ^ unit476_1[i][1]) |(x[ unit476_1[i][2] ] ^ unit476_1[i][3]));
			}
		if(X_contra>0) L[476][1]=2;
		}
	//Check all rules of unit[477][0]
	L[477][0] = LargeX[477][1]>0 ? 1 : 0;
	satisfiable[477][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit477_0[i][0] ][ unit477_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit477_0[i][2] ][ unit477_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit477_0[i][4] ][ unit477_0[i][5] ] >0);
		X_contra = ( LargeX[477][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit477_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[477][1]=0; L[477][0]=1;}
			satisfiable[477][0]=satisfiable[477][0] & ((x[477] ^ 0) | (x[ unit477_0[i][0] ] ^ unit477_0[i][1]) |(x[ unit477_0[i][2] ] ^ unit477_0[i][3]));
			}
		if(X_contra>0) L[477][0]=2;
		}
	//Check all rules of unit[477][1]
	L[477][1] = LargeX[477][0]>0 ? 1 : 0;
	satisfiable[477][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit477_1[i][0] ][ unit477_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit477_1[i][2] ][ unit477_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit477_1[i][4] ][ unit477_1[i][5] ] >0);
		X_contra = ( LargeX[477][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit477_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[477][0]=0; L[477][1]=1;}
			satisfiable[477][1]=satisfiable[477][1] & ((x[477] ^ 1) | (x[ unit477_1[i][0] ] ^ unit477_1[i][1]) |(x[ unit477_1[i][2] ] ^ unit477_1[i][3]));
			}
		if(X_contra>0) L[477][1]=2;
		}
	//Check all rules of unit[478][0]
	L[478][0] = LargeX[478][1]>0 ? 1 : 0;
	satisfiable[478][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit478_0[i][0] ][ unit478_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit478_0[i][2] ][ unit478_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit478_0[i][4] ][ unit478_0[i][5] ] >0);
		X_contra = ( LargeX[478][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit478_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[478][1]=0; L[478][0]=1;}
			satisfiable[478][0]=satisfiable[478][0] & ((x[478] ^ 0) | (x[ unit478_0[i][0] ] ^ unit478_0[i][1]) |(x[ unit478_0[i][2] ] ^ unit478_0[i][3]));
			}
		if(X_contra>0) L[478][0]=2;
		}
	//Check all rules of unit[478][1]
	L[478][1] = LargeX[478][0]>0 ? 1 : 0;
	satisfiable[478][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit478_1[i][0] ][ unit478_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit478_1[i][2] ][ unit478_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit478_1[i][4] ][ unit478_1[i][5] ] >0);
		X_contra = ( LargeX[478][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit478_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[478][0]=0; L[478][1]=1;}
			satisfiable[478][1]=satisfiable[478][1] & ((x[478] ^ 1) | (x[ unit478_1[i][0] ] ^ unit478_1[i][1]) |(x[ unit478_1[i][2] ] ^ unit478_1[i][3]));
			}
		if(X_contra>0) L[478][1]=2;
		}
	//Check all rules of unit[479][0]
	L[479][0] = LargeX[479][1]>0 ? 1 : 0;
	satisfiable[479][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit479_0[i][0] ][ unit479_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit479_0[i][2] ][ unit479_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit479_0[i][4] ][ unit479_0[i][5] ] >0);
		X_contra = ( LargeX[479][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit479_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[479][1]=0; L[479][0]=1;}
			satisfiable[479][0]=satisfiable[479][0] & ((x[479] ^ 0) | (x[ unit479_0[i][0] ] ^ unit479_0[i][1]) |(x[ unit479_0[i][2] ] ^ unit479_0[i][3]));
			}
		if(X_contra>0) L[479][0]=2;
		}
	//Check all rules of unit[479][1]
	L[479][1] = LargeX[479][0]>0 ? 1 : 0;
	satisfiable[479][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit479_1[i][0] ][ unit479_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit479_1[i][2] ][ unit479_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit479_1[i][4] ][ unit479_1[i][5] ] >0);
		X_contra = ( LargeX[479][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit479_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[479][0]=0; L[479][1]=1;}
			satisfiable[479][1]=satisfiable[479][1] & ((x[479] ^ 1) | (x[ unit479_1[i][0] ] ^ unit479_1[i][1]) |(x[ unit479_1[i][2] ] ^ unit479_1[i][3]));
			}
		if(X_contra>0) L[479][1]=2;
		}
	//Check all rules of unit[480][0]
	L[480][0] = LargeX[480][1]>0 ? 1 : 0;
	satisfiable[480][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit480_0[i][0] ][ unit480_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit480_0[i][2] ][ unit480_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit480_0[i][4] ][ unit480_0[i][5] ] >0);
		X_contra = ( LargeX[480][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit480_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[480][1]=0; L[480][0]=1;}
			satisfiable[480][0]=satisfiable[480][0] & ((x[480] ^ 0) | (x[ unit480_0[i][0] ] ^ unit480_0[i][1]) |(x[ unit480_0[i][2] ] ^ unit480_0[i][3]));
			}
		if(X_contra>0) L[480][0]=2;
		}
	//Check all rules of unit[480][1]
	L[480][1] = LargeX[480][0]>0 ? 1 : 0;
	satisfiable[480][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit480_1[i][0] ][ unit480_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit480_1[i][2] ][ unit480_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit480_1[i][4] ][ unit480_1[i][5] ] >0);
		X_contra = ( LargeX[480][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit480_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[480][0]=0; L[480][1]=1;}
			satisfiable[480][1]=satisfiable[480][1] & ((x[480] ^ 1) | (x[ unit480_1[i][0] ] ^ unit480_1[i][1]) |(x[ unit480_1[i][2] ] ^ unit480_1[i][3]));
			}
		if(X_contra>0) L[480][1]=2;
		}
	//Check all rules of unit[481][0]
	L[481][0] = LargeX[481][1]>0 ? 1 : 0;
	satisfiable[481][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit481_0[i][0] ][ unit481_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit481_0[i][2] ][ unit481_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit481_0[i][4] ][ unit481_0[i][5] ] >0);
		X_contra = ( LargeX[481][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit481_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[481][1]=0; L[481][0]=1;}
			satisfiable[481][0]=satisfiable[481][0] & ((x[481] ^ 0) | (x[ unit481_0[i][0] ] ^ unit481_0[i][1]) |(x[ unit481_0[i][2] ] ^ unit481_0[i][3]));
			}
		if(X_contra>0) L[481][0]=2;
		}
	//Check all rules of unit[481][1]
	L[481][1] = LargeX[481][0]>0 ? 1 : 0;
	satisfiable[481][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit481_1[i][0] ][ unit481_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit481_1[i][2] ][ unit481_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit481_1[i][4] ][ unit481_1[i][5] ] >0);
		X_contra = ( LargeX[481][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit481_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[481][0]=0; L[481][1]=1;}
			satisfiable[481][1]=satisfiable[481][1] & ((x[481] ^ 1) | (x[ unit481_1[i][0] ] ^ unit481_1[i][1]) |(x[ unit481_1[i][2] ] ^ unit481_1[i][3]));
			}
		if(X_contra>0) L[481][1]=2;
		}
	//Check all rules of unit[482][0]
	L[482][0] = LargeX[482][1]>0 ? 1 : 0;
	satisfiable[482][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit482_0[i][0] ][ unit482_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit482_0[i][2] ][ unit482_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit482_0[i][4] ][ unit482_0[i][5] ] >0);
		X_contra = ( LargeX[482][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit482_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[482][1]=0; L[482][0]=1;}
			satisfiable[482][0]=satisfiable[482][0] & ((x[482] ^ 0) | (x[ unit482_0[i][0] ] ^ unit482_0[i][1]) |(x[ unit482_0[i][2] ] ^ unit482_0[i][3]));
			}
		if(X_contra>0) L[482][0]=2;
		}
	//Check all rules of unit[482][1]
	L[482][1] = LargeX[482][0]>0 ? 1 : 0;
	satisfiable[482][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit482_1[i][0] ][ unit482_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit482_1[i][2] ][ unit482_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit482_1[i][4] ][ unit482_1[i][5] ] >0);
		X_contra = ( LargeX[482][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit482_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[482][0]=0; L[482][1]=1;}
			satisfiable[482][1]=satisfiable[482][1] & ((x[482] ^ 1) | (x[ unit482_1[i][0] ] ^ unit482_1[i][1]) |(x[ unit482_1[i][2] ] ^ unit482_1[i][3]));
			}
		if(X_contra>0) L[482][1]=2;
		}
	//Check all rules of unit[483][0]
	L[483][0] = LargeX[483][1]>0 ? 1 : 0;
	satisfiable[483][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit483_0[i][0] ][ unit483_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit483_0[i][2] ][ unit483_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit483_0[i][4] ][ unit483_0[i][5] ] >0);
		X_contra = ( LargeX[483][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit483_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[483][1]=0; L[483][0]=1;}
			satisfiable[483][0]=satisfiable[483][0] & ((x[483] ^ 0) | (x[ unit483_0[i][0] ] ^ unit483_0[i][1]) |(x[ unit483_0[i][2] ] ^ unit483_0[i][3]));
			}
		if(X_contra>0) L[483][0]=2;
		}
	//Check all rules of unit[483][1]
	L[483][1] = LargeX[483][0]>0 ? 1 : 0;
	satisfiable[483][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit483_1[i][0] ][ unit483_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit483_1[i][2] ][ unit483_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit483_1[i][4] ][ unit483_1[i][5] ] >0);
		X_contra = ( LargeX[483][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit483_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[483][0]=0; L[483][1]=1;}
			satisfiable[483][1]=satisfiable[483][1] & ((x[483] ^ 1) | (x[ unit483_1[i][0] ] ^ unit483_1[i][1]) |(x[ unit483_1[i][2] ] ^ unit483_1[i][3]));
			}
		if(X_contra>0) L[483][1]=2;
		}
	//Check all rules of unit[484][0]
	L[484][0] = LargeX[484][1]>0 ? 1 : 0;
	satisfiable[484][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit484_0[i][0] ][ unit484_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit484_0[i][2] ][ unit484_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit484_0[i][4] ][ unit484_0[i][5] ] >0);
		X_contra = ( LargeX[484][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit484_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[484][1]=0; L[484][0]=1;}
			satisfiable[484][0]=satisfiable[484][0] & ((x[484] ^ 0) | (x[ unit484_0[i][0] ] ^ unit484_0[i][1]) |(x[ unit484_0[i][2] ] ^ unit484_0[i][3]));
			}
		if(X_contra>0) L[484][0]=2;
		}
	//Check all rules of unit[484][1]
	L[484][1] = LargeX[484][0]>0 ? 1 : 0;
	satisfiable[484][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit484_1[i][0] ][ unit484_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit484_1[i][2] ][ unit484_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit484_1[i][4] ][ unit484_1[i][5] ] >0);
		X_contra = ( LargeX[484][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit484_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[484][0]=0; L[484][1]=1;}
			satisfiable[484][1]=satisfiable[484][1] & ((x[484] ^ 1) | (x[ unit484_1[i][0] ] ^ unit484_1[i][1]) |(x[ unit484_1[i][2] ] ^ unit484_1[i][3]));
			}
		if(X_contra>0) L[484][1]=2;
		}
	//Check all rules of unit[485][0]
	L[485][0] = LargeX[485][1]>0 ? 1 : 0;
	satisfiable[485][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit485_0[i][0] ][ unit485_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit485_0[i][2] ][ unit485_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit485_0[i][4] ][ unit485_0[i][5] ] >0);
		X_contra = ( LargeX[485][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit485_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[485][1]=0; L[485][0]=1;}
			satisfiable[485][0]=satisfiable[485][0] & ((x[485] ^ 0) | (x[ unit485_0[i][0] ] ^ unit485_0[i][1]) |(x[ unit485_0[i][2] ] ^ unit485_0[i][3]));
			}
		if(X_contra>0) L[485][0]=2;
		}
	//Check all rules of unit[485][1]
	L[485][1] = LargeX[485][0]>0 ? 1 : 0;
	satisfiable[485][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit485_1[i][0] ][ unit485_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit485_1[i][2] ][ unit485_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit485_1[i][4] ][ unit485_1[i][5] ] >0);
		X_contra = ( LargeX[485][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit485_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[485][0]=0; L[485][1]=1;}
			satisfiable[485][1]=satisfiable[485][1] & ((x[485] ^ 1) | (x[ unit485_1[i][0] ] ^ unit485_1[i][1]) |(x[ unit485_1[i][2] ] ^ unit485_1[i][3]));
			}
		if(X_contra>0) L[485][1]=2;
		}
	//Check all rules of unit[486][0]
	L[486][0] = LargeX[486][1]>0 ? 1 : 0;
	satisfiable[486][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit486_0[i][0] ][ unit486_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit486_0[i][2] ][ unit486_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit486_0[i][4] ][ unit486_0[i][5] ] >0);
		X_contra = ( LargeX[486][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit486_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[486][1]=0; L[486][0]=1;}
			satisfiable[486][0]=satisfiable[486][0] & ((x[486] ^ 0) | (x[ unit486_0[i][0] ] ^ unit486_0[i][1]) |(x[ unit486_0[i][2] ] ^ unit486_0[i][3]));
			}
		if(X_contra>0) L[486][0]=2;
		}
	//Check all rules of unit[486][1]
	L[486][1] = LargeX[486][0]>0 ? 1 : 0;
	satisfiable[486][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit486_1[i][0] ][ unit486_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit486_1[i][2] ][ unit486_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit486_1[i][4] ][ unit486_1[i][5] ] >0);
		X_contra = ( LargeX[486][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit486_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[486][0]=0; L[486][1]=1;}
			satisfiable[486][1]=satisfiable[486][1] & ((x[486] ^ 1) | (x[ unit486_1[i][0] ] ^ unit486_1[i][1]) |(x[ unit486_1[i][2] ] ^ unit486_1[i][3]));
			}
		if(X_contra>0) L[486][1]=2;
		}
	//Check all rules of unit[487][0]
	L[487][0] = LargeX[487][1]>0 ? 1 : 0;
	satisfiable[487][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit487_0[i][0] ][ unit487_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit487_0[i][2] ][ unit487_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit487_0[i][4] ][ unit487_0[i][5] ] >0);
		X_contra = ( LargeX[487][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit487_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[487][1]=0; L[487][0]=1;}
			satisfiable[487][0]=satisfiable[487][0] & ((x[487] ^ 0) | (x[ unit487_0[i][0] ] ^ unit487_0[i][1]) |(x[ unit487_0[i][2] ] ^ unit487_0[i][3]));
			}
		if(X_contra>0) L[487][0]=2;
		}
	//Check all rules of unit[487][1]
	L[487][1] = LargeX[487][0]>0 ? 1 : 0;
	satisfiable[487][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit487_1[i][0] ][ unit487_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit487_1[i][2] ][ unit487_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit487_1[i][4] ][ unit487_1[i][5] ] >0);
		X_contra = ( LargeX[487][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit487_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[487][0]=0; L[487][1]=1;}
			satisfiable[487][1]=satisfiable[487][1] & ((x[487] ^ 1) | (x[ unit487_1[i][0] ] ^ unit487_1[i][1]) |(x[ unit487_1[i][2] ] ^ unit487_1[i][3]));
			}
		if(X_contra>0) L[487][1]=2;
		}
	//Check all rules of unit[488][0]
	L[488][0] = LargeX[488][1]>0 ? 1 : 0;
	satisfiable[488][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit488_0[i][0] ][ unit488_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit488_0[i][2] ][ unit488_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit488_0[i][4] ][ unit488_0[i][5] ] >0);
		X_contra = ( LargeX[488][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit488_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[488][1]=0; L[488][0]=1;}
			satisfiable[488][0]=satisfiable[488][0] & ((x[488] ^ 0) | (x[ unit488_0[i][0] ] ^ unit488_0[i][1]) |(x[ unit488_0[i][2] ] ^ unit488_0[i][3]));
			}
		if(X_contra>0) L[488][0]=2;
		}
	//Check all rules of unit[488][1]
	L[488][1] = LargeX[488][0]>0 ? 1 : 0;
	satisfiable[488][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit488_1[i][0] ][ unit488_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit488_1[i][2] ][ unit488_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit488_1[i][4] ][ unit488_1[i][5] ] >0);
		X_contra = ( LargeX[488][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit488_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[488][0]=0; L[488][1]=1;}
			satisfiable[488][1]=satisfiable[488][1] & ((x[488] ^ 1) | (x[ unit488_1[i][0] ] ^ unit488_1[i][1]) |(x[ unit488_1[i][2] ] ^ unit488_1[i][3]));
			}
		if(X_contra>0) L[488][1]=2;
		}
	//Check all rules of unit[489][0]
	L[489][0] = LargeX[489][1]>0 ? 1 : 0;
	satisfiable[489][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit489_0[i][0] ][ unit489_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit489_0[i][2] ][ unit489_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit489_0[i][4] ][ unit489_0[i][5] ] >0);
		X_contra = ( LargeX[489][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit489_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[489][1]=0; L[489][0]=1;}
			satisfiable[489][0]=satisfiable[489][0] & ((x[489] ^ 0) | (x[ unit489_0[i][0] ] ^ unit489_0[i][1]) |(x[ unit489_0[i][2] ] ^ unit489_0[i][3]));
			}
		if(X_contra>0) L[489][0]=2;
		}
	//Check all rules of unit[489][1]
	L[489][1] = LargeX[489][0]>0 ? 1 : 0;
	satisfiable[489][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit489_1[i][0] ][ unit489_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit489_1[i][2] ][ unit489_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit489_1[i][4] ][ unit489_1[i][5] ] >0);
		X_contra = ( LargeX[489][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit489_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[489][0]=0; L[489][1]=1;}
			satisfiable[489][1]=satisfiable[489][1] & ((x[489] ^ 1) | (x[ unit489_1[i][0] ] ^ unit489_1[i][1]) |(x[ unit489_1[i][2] ] ^ unit489_1[i][3]));
			}
		if(X_contra>0) L[489][1]=2;
		}
	//Check all rules of unit[490][0]
	L[490][0] = LargeX[490][1]>0 ? 1 : 0;
	satisfiable[490][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit490_0[i][0] ][ unit490_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit490_0[i][2] ][ unit490_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit490_0[i][4] ][ unit490_0[i][5] ] >0);
		X_contra = ( LargeX[490][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit490_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[490][1]=0; L[490][0]=1;}
			satisfiable[490][0]=satisfiable[490][0] & ((x[490] ^ 0) | (x[ unit490_0[i][0] ] ^ unit490_0[i][1]) |(x[ unit490_0[i][2] ] ^ unit490_0[i][3]));
			}
		if(X_contra>0) L[490][0]=2;
		}
	//Check all rules of unit[490][1]
	L[490][1] = LargeX[490][0]>0 ? 1 : 0;
	satisfiable[490][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit490_1[i][0] ][ unit490_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit490_1[i][2] ][ unit490_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit490_1[i][4] ][ unit490_1[i][5] ] >0);
		X_contra = ( LargeX[490][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit490_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[490][0]=0; L[490][1]=1;}
			satisfiable[490][1]=satisfiable[490][1] & ((x[490] ^ 1) | (x[ unit490_1[i][0] ] ^ unit490_1[i][1]) |(x[ unit490_1[i][2] ] ^ unit490_1[i][3]));
			}
		if(X_contra>0) L[490][1]=2;
		}
	//Check all rules of unit[491][0]
	L[491][0] = LargeX[491][1]>0 ? 1 : 0;
	satisfiable[491][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit491_0[i][0] ][ unit491_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit491_0[i][2] ][ unit491_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit491_0[i][4] ][ unit491_0[i][5] ] >0);
		X_contra = ( LargeX[491][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit491_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[491][1]=0; L[491][0]=1;}
			satisfiable[491][0]=satisfiable[491][0] & ((x[491] ^ 0) | (x[ unit491_0[i][0] ] ^ unit491_0[i][1]) |(x[ unit491_0[i][2] ] ^ unit491_0[i][3]));
			}
		if(X_contra>0) L[491][0]=2;
		}
	//Check all rules of unit[491][1]
	L[491][1] = LargeX[491][0]>0 ? 1 : 0;
	satisfiable[491][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit491_1[i][0] ][ unit491_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit491_1[i][2] ][ unit491_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit491_1[i][4] ][ unit491_1[i][5] ] >0);
		X_contra = ( LargeX[491][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit491_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[491][0]=0; L[491][1]=1;}
			satisfiable[491][1]=satisfiable[491][1] & ((x[491] ^ 1) | (x[ unit491_1[i][0] ] ^ unit491_1[i][1]) |(x[ unit491_1[i][2] ] ^ unit491_1[i][3]));
			}
		if(X_contra>0) L[491][1]=2;
		}
	//Check all rules of unit[492][0]
	L[492][0] = LargeX[492][1]>0 ? 1 : 0;
	satisfiable[492][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit492_0[i][0] ][ unit492_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit492_0[i][2] ][ unit492_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit492_0[i][4] ][ unit492_0[i][5] ] >0);
		X_contra = ( LargeX[492][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit492_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[492][1]=0; L[492][0]=1;}
			satisfiable[492][0]=satisfiable[492][0] & ((x[492] ^ 0) | (x[ unit492_0[i][0] ] ^ unit492_0[i][1]) |(x[ unit492_0[i][2] ] ^ unit492_0[i][3]));
			}
		if(X_contra>0) L[492][0]=2;
		}
	//Check all rules of unit[492][1]
	L[492][1] = LargeX[492][0]>0 ? 1 : 0;
	satisfiable[492][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit492_1[i][0] ][ unit492_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit492_1[i][2] ][ unit492_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit492_1[i][4] ][ unit492_1[i][5] ] >0);
		X_contra = ( LargeX[492][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit492_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[492][0]=0; L[492][1]=1;}
			satisfiable[492][1]=satisfiable[492][1] & ((x[492] ^ 1) | (x[ unit492_1[i][0] ] ^ unit492_1[i][1]) |(x[ unit492_1[i][2] ] ^ unit492_1[i][3]));
			}
		if(X_contra>0) L[492][1]=2;
		}
	//Check all rules of unit[493][0]
	L[493][0] = LargeX[493][1]>0 ? 1 : 0;
	satisfiable[493][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit493_0[i][0] ][ unit493_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit493_0[i][2] ][ unit493_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit493_0[i][4] ][ unit493_0[i][5] ] >0);
		X_contra = ( LargeX[493][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit493_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[493][1]=0; L[493][0]=1;}
			satisfiable[493][0]=satisfiable[493][0] & ((x[493] ^ 0) | (x[ unit493_0[i][0] ] ^ unit493_0[i][1]) |(x[ unit493_0[i][2] ] ^ unit493_0[i][3]));
			}
		if(X_contra>0) L[493][0]=2;
		}
	//Check all rules of unit[493][1]
	L[493][1] = LargeX[493][0]>0 ? 1 : 0;
	satisfiable[493][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit493_1[i][0] ][ unit493_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit493_1[i][2] ][ unit493_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit493_1[i][4] ][ unit493_1[i][5] ] >0);
		X_contra = ( LargeX[493][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit493_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[493][0]=0; L[493][1]=1;}
			satisfiable[493][1]=satisfiable[493][1] & ((x[493] ^ 1) | (x[ unit493_1[i][0] ] ^ unit493_1[i][1]) |(x[ unit493_1[i][2] ] ^ unit493_1[i][3]));
			}
		if(X_contra>0) L[493][1]=2;
		}
	//Check all rules of unit[494][0]
	L[494][0] = LargeX[494][1]>0 ? 1 : 0;
	satisfiable[494][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit494_0[i][0] ][ unit494_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit494_0[i][2] ][ unit494_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit494_0[i][4] ][ unit494_0[i][5] ] >0);
		X_contra = ( LargeX[494][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit494_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[494][1]=0; L[494][0]=1;}
			satisfiable[494][0]=satisfiable[494][0] & ((x[494] ^ 0) | (x[ unit494_0[i][0] ] ^ unit494_0[i][1]) |(x[ unit494_0[i][2] ] ^ unit494_0[i][3]));
			}
		if(X_contra>0) L[494][0]=2;
		}
	//Check all rules of unit[494][1]
	L[494][1] = LargeX[494][0]>0 ? 1 : 0;
	satisfiable[494][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit494_1[i][0] ][ unit494_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit494_1[i][2] ][ unit494_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit494_1[i][4] ][ unit494_1[i][5] ] >0);
		X_contra = ( LargeX[494][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit494_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[494][0]=0; L[494][1]=1;}
			satisfiable[494][1]=satisfiable[494][1] & ((x[494] ^ 1) | (x[ unit494_1[i][0] ] ^ unit494_1[i][1]) |(x[ unit494_1[i][2] ] ^ unit494_1[i][3]));
			}
		if(X_contra>0) L[494][1]=2;
		}
	//Check all rules of unit[495][0]
	L[495][0] = LargeX[495][1]>0 ? 1 : 0;
	satisfiable[495][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit495_0[i][0] ][ unit495_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit495_0[i][2] ][ unit495_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit495_0[i][4] ][ unit495_0[i][5] ] >0);
		X_contra = ( LargeX[495][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit495_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[495][1]=0; L[495][0]=1;}
			satisfiable[495][0]=satisfiable[495][0] & ((x[495] ^ 0) | (x[ unit495_0[i][0] ] ^ unit495_0[i][1]) |(x[ unit495_0[i][2] ] ^ unit495_0[i][3]));
			}
		if(X_contra>0) L[495][0]=2;
		}
	//Check all rules of unit[495][1]
	L[495][1] = LargeX[495][0]>0 ? 1 : 0;
	satisfiable[495][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit495_1[i][0] ][ unit495_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit495_1[i][2] ][ unit495_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit495_1[i][4] ][ unit495_1[i][5] ] >0);
		X_contra = ( LargeX[495][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit495_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[495][0]=0; L[495][1]=1;}
			satisfiable[495][1]=satisfiable[495][1] & ((x[495] ^ 1) | (x[ unit495_1[i][0] ] ^ unit495_1[i][1]) |(x[ unit495_1[i][2] ] ^ unit495_1[i][3]));
			}
		if(X_contra>0) L[495][1]=2;
		}
	//Check all rules of unit[496][0]
	L[496][0] = LargeX[496][1]>0 ? 1 : 0;
	satisfiable[496][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit496_0[i][0] ][ unit496_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit496_0[i][2] ][ unit496_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit496_0[i][4] ][ unit496_0[i][5] ] >0);
		X_contra = ( LargeX[496][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit496_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[496][1]=0; L[496][0]=1;}
			satisfiable[496][0]=satisfiable[496][0] & ((x[496] ^ 0) | (x[ unit496_0[i][0] ] ^ unit496_0[i][1]) |(x[ unit496_0[i][2] ] ^ unit496_0[i][3]));
			}
		if(X_contra>0) L[496][0]=2;
		}
	//Check all rules of unit[496][1]
	L[496][1] = LargeX[496][0]>0 ? 1 : 0;
	satisfiable[496][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit496_1[i][0] ][ unit496_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit496_1[i][2] ][ unit496_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit496_1[i][4] ][ unit496_1[i][5] ] >0);
		X_contra = ( LargeX[496][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit496_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[496][0]=0; L[496][1]=1;}
			satisfiable[496][1]=satisfiable[496][1] & ((x[496] ^ 1) | (x[ unit496_1[i][0] ] ^ unit496_1[i][1]) |(x[ unit496_1[i][2] ] ^ unit496_1[i][3]));
			}
		if(X_contra>0) L[496][1]=2;
		}
	//Check all rules of unit[497][0]
	L[497][0] = LargeX[497][1]>0 ? 1 : 0;
	satisfiable[497][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit497_0[i][0] ][ unit497_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit497_0[i][2] ][ unit497_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit497_0[i][4] ][ unit497_0[i][5] ] >0);
		X_contra = ( LargeX[497][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit497_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[497][1]=0; L[497][0]=1;}
			satisfiable[497][0]=satisfiable[497][0] & ((x[497] ^ 0) | (x[ unit497_0[i][0] ] ^ unit497_0[i][1]) |(x[ unit497_0[i][2] ] ^ unit497_0[i][3]));
			}
		if(X_contra>0) L[497][0]=2;
		}
	//Check all rules of unit[497][1]
	L[497][1] = LargeX[497][0]>0 ? 1 : 0;
	satisfiable[497][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit497_1[i][0] ][ unit497_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit497_1[i][2] ][ unit497_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit497_1[i][4] ][ unit497_1[i][5] ] >0);
		X_contra = ( LargeX[497][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit497_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[497][0]=0; L[497][1]=1;}
			satisfiable[497][1]=satisfiable[497][1] & ((x[497] ^ 1) | (x[ unit497_1[i][0] ] ^ unit497_1[i][1]) |(x[ unit497_1[i][2] ] ^ unit497_1[i][3]));
			}
		if(X_contra>0) L[497][1]=2;
		}
	//Check all rules of unit[498][0]
	L[498][0] = LargeX[498][1]>0 ? 1 : 0;
	satisfiable[498][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit498_0[i][0] ][ unit498_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit498_0[i][2] ][ unit498_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit498_0[i][4] ][ unit498_0[i][5] ] >0);
		X_contra = ( LargeX[498][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit498_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[498][1]=0; L[498][0]=1;}
			satisfiable[498][0]=satisfiable[498][0] & ((x[498] ^ 0) | (x[ unit498_0[i][0] ] ^ unit498_0[i][1]) |(x[ unit498_0[i][2] ] ^ unit498_0[i][3]));
			}
		if(X_contra>0) L[498][0]=2;
		}
	//Check all rules of unit[498][1]
	L[498][1] = LargeX[498][0]>0 ? 1 : 0;
	satisfiable[498][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit498_1[i][0] ][ unit498_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit498_1[i][2] ][ unit498_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit498_1[i][4] ][ unit498_1[i][5] ] >0);
		X_contra = ( LargeX[498][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit498_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[498][0]=0; L[498][1]=1;}
			satisfiable[498][1]=satisfiable[498][1] & ((x[498] ^ 1) | (x[ unit498_1[i][0] ] ^ unit498_1[i][1]) |(x[ unit498_1[i][2] ] ^ unit498_1[i][3]));
			}
		if(X_contra>0) L[498][1]=2;
		}
	//Check all rules of unit[499][0]
	L[499][0] = LargeX[499][1]>0 ? 1 : 0;
	satisfiable[499][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit499_0[i][0] ][ unit499_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit499_0[i][2] ][ unit499_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit499_0[i][4] ][ unit499_0[i][5] ] >0);
		X_contra = ( LargeX[499][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit499_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[499][1]=0; L[499][0]=1;}
			satisfiable[499][0]=satisfiable[499][0] & ((x[499] ^ 0) | (x[ unit499_0[i][0] ] ^ unit499_0[i][1]) |(x[ unit499_0[i][2] ] ^ unit499_0[i][3]));
			}
		if(X_contra>0) L[499][0]=2;
		}
	//Check all rules of unit[499][1]
	L[499][1] = LargeX[499][0]>0 ? 1 : 0;
	satisfiable[499][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit499_1[i][0] ][ unit499_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit499_1[i][2] ][ unit499_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit499_1[i][4] ][ unit499_1[i][5] ] >0);
		X_contra = ( LargeX[499][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit499_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[499][0]=0; L[499][1]=1;}
			satisfiable[499][1]=satisfiable[499][1] & ((x[499] ^ 1) | (x[ unit499_1[i][0] ] ^ unit499_1[i][1]) |(x[ unit499_1[i][2] ] ^ unit499_1[i][3]));
			}
		if(X_contra>0) L[499][1]=2;
		}
	//Check all rules of unit[500][0]
	L[500][0] = LargeX[500][1]>0 ? 1 : 0;
	satisfiable[500][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit500_0[i][0] ][ unit500_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit500_0[i][2] ][ unit500_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit500_0[i][4] ][ unit500_0[i][5] ] >0);
		X_contra = ( LargeX[500][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit500_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[500][1]=0; L[500][0]=1;}
			satisfiable[500][0]=satisfiable[500][0] & ((x[500] ^ 0) | (x[ unit500_0[i][0] ] ^ unit500_0[i][1]) |(x[ unit500_0[i][2] ] ^ unit500_0[i][3]));
			}
		if(X_contra>0) L[500][0]=2;
		}
	//Check all rules of unit[500][1]
	L[500][1] = LargeX[500][0]>0 ? 1 : 0;
	satisfiable[500][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit500_1[i][0] ][ unit500_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit500_1[i][2] ][ unit500_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit500_1[i][4] ][ unit500_1[i][5] ] >0);
		X_contra = ( LargeX[500][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit500_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[500][0]=0; L[500][1]=1;}
			satisfiable[500][1]=satisfiable[500][1] & ((x[500] ^ 1) | (x[ unit500_1[i][0] ] ^ unit500_1[i][1]) |(x[ unit500_1[i][2] ] ^ unit500_1[i][3]));
			}
		if(X_contra>0) L[500][1]=2;
		}
	//Check all rules of unit[501][0]
	L[501][0] = LargeX[501][1]>0 ? 1 : 0;
	satisfiable[501][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit501_0[i][0] ][ unit501_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit501_0[i][2] ][ unit501_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit501_0[i][4] ][ unit501_0[i][5] ] >0);
		X_contra = ( LargeX[501][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit501_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[501][1]=0; L[501][0]=1;}
			satisfiable[501][0]=satisfiable[501][0] & ((x[501] ^ 0) | (x[ unit501_0[i][0] ] ^ unit501_0[i][1]) |(x[ unit501_0[i][2] ] ^ unit501_0[i][3]));
			}
		if(X_contra>0) L[501][0]=2;
		}
	//Check all rules of unit[501][1]
	L[501][1] = LargeX[501][0]>0 ? 1 : 0;
	satisfiable[501][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit501_1[i][0] ][ unit501_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit501_1[i][2] ][ unit501_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit501_1[i][4] ][ unit501_1[i][5] ] >0);
		X_contra = ( LargeX[501][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit501_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[501][0]=0; L[501][1]=1;}
			satisfiable[501][1]=satisfiable[501][1] & ((x[501] ^ 1) | (x[ unit501_1[i][0] ] ^ unit501_1[i][1]) |(x[ unit501_1[i][2] ] ^ unit501_1[i][3]));
			}
		if(X_contra>0) L[501][1]=2;
		}
	//Check all rules of unit[502][0]
	L[502][0] = LargeX[502][1]>0 ? 1 : 0;
	satisfiable[502][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit502_0[i][0] ][ unit502_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit502_0[i][2] ][ unit502_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit502_0[i][4] ][ unit502_0[i][5] ] >0);
		X_contra = ( LargeX[502][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit502_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[502][1]=0; L[502][0]=1;}
			satisfiable[502][0]=satisfiable[502][0] & ((x[502] ^ 0) | (x[ unit502_0[i][0] ] ^ unit502_0[i][1]) |(x[ unit502_0[i][2] ] ^ unit502_0[i][3]));
			}
		if(X_contra>0) L[502][0]=2;
		}
	//Check all rules of unit[502][1]
	L[502][1] = LargeX[502][0]>0 ? 1 : 0;
	satisfiable[502][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit502_1[i][0] ][ unit502_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit502_1[i][2] ][ unit502_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit502_1[i][4] ][ unit502_1[i][5] ] >0);
		X_contra = ( LargeX[502][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit502_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[502][0]=0; L[502][1]=1;}
			satisfiable[502][1]=satisfiable[502][1] & ((x[502] ^ 1) | (x[ unit502_1[i][0] ] ^ unit502_1[i][1]) |(x[ unit502_1[i][2] ] ^ unit502_1[i][3]));
			}
		if(X_contra>0) L[502][1]=2;
		}
	//Check all rules of unit[503][0]
	L[503][0] = LargeX[503][1]>0 ? 1 : 0;
	satisfiable[503][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit503_0[i][0] ][ unit503_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit503_0[i][2] ][ unit503_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit503_0[i][4] ][ unit503_0[i][5] ] >0);
		X_contra = ( LargeX[503][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit503_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[503][1]=0; L[503][0]=1;}
			satisfiable[503][0]=satisfiable[503][0] & ((x[503] ^ 0) | (x[ unit503_0[i][0] ] ^ unit503_0[i][1]) |(x[ unit503_0[i][2] ] ^ unit503_0[i][3]));
			}
		if(X_contra>0) L[503][0]=2;
		}
	//Check all rules of unit[503][1]
	L[503][1] = LargeX[503][0]>0 ? 1 : 0;
	satisfiable[503][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit503_1[i][0] ][ unit503_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit503_1[i][2] ][ unit503_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit503_1[i][4] ][ unit503_1[i][5] ] >0);
		X_contra = ( LargeX[503][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit503_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[503][0]=0; L[503][1]=1;}
			satisfiable[503][1]=satisfiable[503][1] & ((x[503] ^ 1) | (x[ unit503_1[i][0] ] ^ unit503_1[i][1]) |(x[ unit503_1[i][2] ] ^ unit503_1[i][3]));
			}
		if(X_contra>0) L[503][1]=2;
		}
	//Check all rules of unit[504][0]
	L[504][0] = LargeX[504][1]>0 ? 1 : 0;
	satisfiable[504][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit504_0[i][0] ][ unit504_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit504_0[i][2] ][ unit504_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit504_0[i][4] ][ unit504_0[i][5] ] >0);
		X_contra = ( LargeX[504][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit504_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[504][1]=0; L[504][0]=1;}
			satisfiable[504][0]=satisfiable[504][0] & ((x[504] ^ 0) | (x[ unit504_0[i][0] ] ^ unit504_0[i][1]) |(x[ unit504_0[i][2] ] ^ unit504_0[i][3]));
			}
		if(X_contra>0) L[504][0]=2;
		}
	//Check all rules of unit[504][1]
	L[504][1] = LargeX[504][0]>0 ? 1 : 0;
	satisfiable[504][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit504_1[i][0] ][ unit504_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit504_1[i][2] ][ unit504_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit504_1[i][4] ][ unit504_1[i][5] ] >0);
		X_contra = ( LargeX[504][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit504_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[504][0]=0; L[504][1]=1;}
			satisfiable[504][1]=satisfiable[504][1] & ((x[504] ^ 1) | (x[ unit504_1[i][0] ] ^ unit504_1[i][1]) |(x[ unit504_1[i][2] ] ^ unit504_1[i][3]));
			}
		if(X_contra>0) L[504][1]=2;
		}
	//Check all rules of unit[505][0]
	L[505][0] = LargeX[505][1]>0 ? 1 : 0;
	satisfiable[505][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit505_0[i][0] ][ unit505_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit505_0[i][2] ][ unit505_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit505_0[i][4] ][ unit505_0[i][5] ] >0);
		X_contra = ( LargeX[505][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit505_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[505][1]=0; L[505][0]=1;}
			satisfiable[505][0]=satisfiable[505][0] & ((x[505] ^ 0) | (x[ unit505_0[i][0] ] ^ unit505_0[i][1]) |(x[ unit505_0[i][2] ] ^ unit505_0[i][3]));
			}
		if(X_contra>0) L[505][0]=2;
		}
	//Check all rules of unit[505][1]
	L[505][1] = LargeX[505][0]>0 ? 1 : 0;
	satisfiable[505][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit505_1[i][0] ][ unit505_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit505_1[i][2] ][ unit505_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit505_1[i][4] ][ unit505_1[i][5] ] >0);
		X_contra = ( LargeX[505][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit505_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[505][0]=0; L[505][1]=1;}
			satisfiable[505][1]=satisfiable[505][1] & ((x[505] ^ 1) | (x[ unit505_1[i][0] ] ^ unit505_1[i][1]) |(x[ unit505_1[i][2] ] ^ unit505_1[i][3]));
			}
		if(X_contra>0) L[505][1]=2;
		}
	//Check all rules of unit[506][0]
	L[506][0] = LargeX[506][1]>0 ? 1 : 0;
	satisfiable[506][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit506_0[i][0] ][ unit506_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit506_0[i][2] ][ unit506_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit506_0[i][4] ][ unit506_0[i][5] ] >0);
		X_contra = ( LargeX[506][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit506_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[506][1]=0; L[506][0]=1;}
			satisfiable[506][0]=satisfiable[506][0] & ((x[506] ^ 0) | (x[ unit506_0[i][0] ] ^ unit506_0[i][1]) |(x[ unit506_0[i][2] ] ^ unit506_0[i][3]));
			}
		if(X_contra>0) L[506][0]=2;
		}
	//Check all rules of unit[506][1]
	L[506][1] = LargeX[506][0]>0 ? 1 : 0;
	satisfiable[506][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit506_1[i][0] ][ unit506_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit506_1[i][2] ][ unit506_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit506_1[i][4] ][ unit506_1[i][5] ] >0);
		X_contra = ( LargeX[506][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit506_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[506][0]=0; L[506][1]=1;}
			satisfiable[506][1]=satisfiable[506][1] & ((x[506] ^ 1) | (x[ unit506_1[i][0] ] ^ unit506_1[i][1]) |(x[ unit506_1[i][2] ] ^ unit506_1[i][3]));
			}
		if(X_contra>0) L[506][1]=2;
		}
	//Check all rules of unit[507][0]
	L[507][0] = LargeX[507][1]>0 ? 1 : 0;
	satisfiable[507][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit507_0[i][0] ][ unit507_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit507_0[i][2] ][ unit507_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit507_0[i][4] ][ unit507_0[i][5] ] >0);
		X_contra = ( LargeX[507][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit507_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[507][1]=0; L[507][0]=1;}
			satisfiable[507][0]=satisfiable[507][0] & ((x[507] ^ 0) | (x[ unit507_0[i][0] ] ^ unit507_0[i][1]) |(x[ unit507_0[i][2] ] ^ unit507_0[i][3]));
			}
		if(X_contra>0) L[507][0]=2;
		}
	//Check all rules of unit[507][1]
	L[507][1] = LargeX[507][0]>0 ? 1 : 0;
	satisfiable[507][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit507_1[i][0] ][ unit507_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit507_1[i][2] ][ unit507_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit507_1[i][4] ][ unit507_1[i][5] ] >0);
		X_contra = ( LargeX[507][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit507_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[507][0]=0; L[507][1]=1;}
			satisfiable[507][1]=satisfiable[507][1] & ((x[507] ^ 1) | (x[ unit507_1[i][0] ] ^ unit507_1[i][1]) |(x[ unit507_1[i][2] ] ^ unit507_1[i][3]));
			}
		if(X_contra>0) L[507][1]=2;
		}
	//Check all rules of unit[508][0]
	L[508][0] = LargeX[508][1]>0 ? 1 : 0;
	satisfiable[508][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit508_0[i][0] ][ unit508_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit508_0[i][2] ][ unit508_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit508_0[i][4] ][ unit508_0[i][5] ] >0);
		X_contra = ( LargeX[508][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit508_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[508][1]=0; L[508][0]=1;}
			satisfiable[508][0]=satisfiable[508][0] & ((x[508] ^ 0) | (x[ unit508_0[i][0] ] ^ unit508_0[i][1]) |(x[ unit508_0[i][2] ] ^ unit508_0[i][3]));
			}
		if(X_contra>0) L[508][0]=2;
		}
	//Check all rules of unit[508][1]
	L[508][1] = LargeX[508][0]>0 ? 1 : 0;
	satisfiable[508][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit508_1[i][0] ][ unit508_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit508_1[i][2] ][ unit508_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit508_1[i][4] ][ unit508_1[i][5] ] >0);
		X_contra = ( LargeX[508][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit508_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[508][0]=0; L[508][1]=1;}
			satisfiable[508][1]=satisfiable[508][1] & ((x[508] ^ 1) | (x[ unit508_1[i][0] ] ^ unit508_1[i][1]) |(x[ unit508_1[i][2] ] ^ unit508_1[i][3]));
			}
		if(X_contra>0) L[508][1]=2;
		}
	//Check all rules of unit[509][0]
	L[509][0] = LargeX[509][1]>0 ? 1 : 0;
	satisfiable[509][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit509_0[i][0] ][ unit509_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit509_0[i][2] ][ unit509_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit509_0[i][4] ][ unit509_0[i][5] ] >0);
		X_contra = ( LargeX[509][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit509_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[509][1]=0; L[509][0]=1;}
			satisfiable[509][0]=satisfiable[509][0] & ((x[509] ^ 0) | (x[ unit509_0[i][0] ] ^ unit509_0[i][1]) |(x[ unit509_0[i][2] ] ^ unit509_0[i][3]));
			}
		if(X_contra>0) L[509][0]=2;
		}
	//Check all rules of unit[509][1]
	L[509][1] = LargeX[509][0]>0 ? 1 : 0;
	satisfiable[509][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit509_1[i][0] ][ unit509_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit509_1[i][2] ][ unit509_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit509_1[i][4] ][ unit509_1[i][5] ] >0);
		X_contra = ( LargeX[509][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit509_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[509][0]=0; L[509][1]=1;}
			satisfiable[509][1]=satisfiable[509][1] & ((x[509] ^ 1) | (x[ unit509_1[i][0] ] ^ unit509_1[i][1]) |(x[ unit509_1[i][2] ] ^ unit509_1[i][3]));
			}
		if(X_contra>0) L[509][1]=2;
		}
	//Check all rules of unit[510][0]
	L[510][0] = LargeX[510][1]>0 ? 1 : 0;
	satisfiable[510][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit510_0[i][0] ][ unit510_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit510_0[i][2] ][ unit510_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit510_0[i][4] ][ unit510_0[i][5] ] >0);
		X_contra = ( LargeX[510][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit510_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[510][1]=0; L[510][0]=1;}
			satisfiable[510][0]=satisfiable[510][0] & ((x[510] ^ 0) | (x[ unit510_0[i][0] ] ^ unit510_0[i][1]) |(x[ unit510_0[i][2] ] ^ unit510_0[i][3]));
			}
		if(X_contra>0) L[510][0]=2;
		}
	//Check all rules of unit[510][1]
	L[510][1] = LargeX[510][0]>0 ? 1 : 0;
	satisfiable[510][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit510_1[i][0] ][ unit510_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit510_1[i][2] ][ unit510_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit510_1[i][4] ][ unit510_1[i][5] ] >0);
		X_contra = ( LargeX[510][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit510_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[510][0]=0; L[510][1]=1;}
			satisfiable[510][1]=satisfiable[510][1] & ((x[510] ^ 1) | (x[ unit510_1[i][0] ] ^ unit510_1[i][1]) |(x[ unit510_1[i][2] ] ^ unit510_1[i][3]));
			}
		if(X_contra>0) L[510][1]=2;
		}
	//Check all rules of unit[511][0]
	L[511][0] = LargeX[511][1]>0 ? 1 : 0;
	satisfiable[511][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit511_0[i][0] ][ unit511_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit511_0[i][2] ][ unit511_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit511_0[i][4] ][ unit511_0[i][5] ] >0);
		X_contra = ( LargeX[511][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit511_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[511][1]=0; L[511][0]=1;}
			satisfiable[511][0]=satisfiable[511][0] & ((x[511] ^ 0) | (x[ unit511_0[i][0] ] ^ unit511_0[i][1]) |(x[ unit511_0[i][2] ] ^ unit511_0[i][3]));
			}
		if(X_contra>0) L[511][0]=2;
		}
	//Check all rules of unit[511][1]
	L[511][1] = LargeX[511][0]>0 ? 1 : 0;
	satisfiable[511][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit511_1[i][0] ][ unit511_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit511_1[i][2] ][ unit511_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit511_1[i][4] ][ unit511_1[i][5] ] >0);
		X_contra = ( LargeX[511][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit511_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[511][0]=0; L[511][1]=1;}
			satisfiable[511][1]=satisfiable[511][1] & ((x[511] ^ 1) | (x[ unit511_1[i][0] ] ^ unit511_1[i][1]) |(x[ unit511_1[i][2] ] ^ unit511_1[i][3]));
			}
		if(X_contra>0) L[511][1]=2;
		}
	//Check all rules of unit[512][0]
	L[512][0] = LargeX[512][1]>0 ? 1 : 0;
	satisfiable[512][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit512_0[i][0] ][ unit512_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit512_0[i][2] ][ unit512_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit512_0[i][4] ][ unit512_0[i][5] ] >0);
		X_contra = ( LargeX[512][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit512_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[512][1]=0; L[512][0]=1;}
			satisfiable[512][0]=satisfiable[512][0] & ((x[512] ^ 0) | (x[ unit512_0[i][0] ] ^ unit512_0[i][1]) |(x[ unit512_0[i][2] ] ^ unit512_0[i][3]));
			}
		if(X_contra>0) L[512][0]=2;
		}
	//Check all rules of unit[512][1]
	L[512][1] = LargeX[512][0]>0 ? 1 : 0;
	satisfiable[512][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit512_1[i][0] ][ unit512_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit512_1[i][2] ][ unit512_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit512_1[i][4] ][ unit512_1[i][5] ] >0);
		X_contra = ( LargeX[512][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit512_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[512][0]=0; L[512][1]=1;}
			satisfiable[512][1]=satisfiable[512][1] & ((x[512] ^ 1) | (x[ unit512_1[i][0] ] ^ unit512_1[i][1]) |(x[ unit512_1[i][2] ] ^ unit512_1[i][3]));
			}
		if(X_contra>0) L[512][1]=2;
		}
	//Check all rules of unit[513][0]
	L[513][0] = LargeX[513][1]>0 ? 1 : 0;
	satisfiable[513][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit513_0[i][0] ][ unit513_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit513_0[i][2] ][ unit513_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit513_0[i][4] ][ unit513_0[i][5] ] >0);
		X_contra = ( LargeX[513][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit513_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[513][1]=0; L[513][0]=1;}
			satisfiable[513][0]=satisfiable[513][0] & ((x[513] ^ 0) | (x[ unit513_0[i][0] ] ^ unit513_0[i][1]) |(x[ unit513_0[i][2] ] ^ unit513_0[i][3]));
			}
		if(X_contra>0) L[513][0]=2;
		}
	//Check all rules of unit[513][1]
	L[513][1] = LargeX[513][0]>0 ? 1 : 0;
	satisfiable[513][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit513_1[i][0] ][ unit513_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit513_1[i][2] ][ unit513_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit513_1[i][4] ][ unit513_1[i][5] ] >0);
		X_contra = ( LargeX[513][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit513_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[513][0]=0; L[513][1]=1;}
			satisfiable[513][1]=satisfiable[513][1] & ((x[513] ^ 1) | (x[ unit513_1[i][0] ] ^ unit513_1[i][1]) |(x[ unit513_1[i][2] ] ^ unit513_1[i][3]));
			}
		if(X_contra>0) L[513][1]=2;
		}
	//Check all rules of unit[514][0]
	L[514][0] = LargeX[514][1]>0 ? 1 : 0;
	satisfiable[514][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit514_0[i][0] ][ unit514_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit514_0[i][2] ][ unit514_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit514_0[i][4] ][ unit514_0[i][5] ] >0);
		X_contra = ( LargeX[514][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit514_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[514][1]=0; L[514][0]=1;}
			satisfiable[514][0]=satisfiable[514][0] & ((x[514] ^ 0) | (x[ unit514_0[i][0] ] ^ unit514_0[i][1]) |(x[ unit514_0[i][2] ] ^ unit514_0[i][3]));
			}
		if(X_contra>0) L[514][0]=2;
		}
	//Check all rules of unit[514][1]
	L[514][1] = LargeX[514][0]>0 ? 1 : 0;
	satisfiable[514][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit514_1[i][0] ][ unit514_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit514_1[i][2] ][ unit514_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit514_1[i][4] ][ unit514_1[i][5] ] >0);
		X_contra = ( LargeX[514][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit514_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[514][0]=0; L[514][1]=1;}
			satisfiable[514][1]=satisfiable[514][1] & ((x[514] ^ 1) | (x[ unit514_1[i][0] ] ^ unit514_1[i][1]) |(x[ unit514_1[i][2] ] ^ unit514_1[i][3]));
			}
		if(X_contra>0) L[514][1]=2;
		}
	//Check all rules of unit[515][0]
	L[515][0] = LargeX[515][1]>0 ? 1 : 0;
	satisfiable[515][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit515_0[i][0] ][ unit515_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit515_0[i][2] ][ unit515_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit515_0[i][4] ][ unit515_0[i][5] ] >0);
		X_contra = ( LargeX[515][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit515_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[515][1]=0; L[515][0]=1;}
			satisfiable[515][0]=satisfiable[515][0] & ((x[515] ^ 0) | (x[ unit515_0[i][0] ] ^ unit515_0[i][1]) |(x[ unit515_0[i][2] ] ^ unit515_0[i][3]));
			}
		if(X_contra>0) L[515][0]=2;
		}
	//Check all rules of unit[515][1]
	L[515][1] = LargeX[515][0]>0 ? 1 : 0;
	satisfiable[515][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit515_1[i][0] ][ unit515_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit515_1[i][2] ][ unit515_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit515_1[i][4] ][ unit515_1[i][5] ] >0);
		X_contra = ( LargeX[515][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit515_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[515][0]=0; L[515][1]=1;}
			satisfiable[515][1]=satisfiable[515][1] & ((x[515] ^ 1) | (x[ unit515_1[i][0] ] ^ unit515_1[i][1]) |(x[ unit515_1[i][2] ] ^ unit515_1[i][3]));
			}
		if(X_contra>0) L[515][1]=2;
		}
	//Check all rules of unit[516][0]
	L[516][0] = LargeX[516][1]>0 ? 1 : 0;
	satisfiable[516][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit516_0[i][0] ][ unit516_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit516_0[i][2] ][ unit516_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit516_0[i][4] ][ unit516_0[i][5] ] >0);
		X_contra = ( LargeX[516][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit516_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[516][1]=0; L[516][0]=1;}
			satisfiable[516][0]=satisfiable[516][0] & ((x[516] ^ 0) | (x[ unit516_0[i][0] ] ^ unit516_0[i][1]) |(x[ unit516_0[i][2] ] ^ unit516_0[i][3]));
			}
		if(X_contra>0) L[516][0]=2;
		}
	//Check all rules of unit[516][1]
	L[516][1] = LargeX[516][0]>0 ? 1 : 0;
	satisfiable[516][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit516_1[i][0] ][ unit516_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit516_1[i][2] ][ unit516_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit516_1[i][4] ][ unit516_1[i][5] ] >0);
		X_contra = ( LargeX[516][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit516_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[516][0]=0; L[516][1]=1;}
			satisfiable[516][1]=satisfiable[516][1] & ((x[516] ^ 1) | (x[ unit516_1[i][0] ] ^ unit516_1[i][1]) |(x[ unit516_1[i][2] ] ^ unit516_1[i][3]));
			}
		if(X_contra>0) L[516][1]=2;
		}
	//Check all rules of unit[517][0]
	L[517][0] = LargeX[517][1]>0 ? 1 : 0;
	satisfiable[517][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit517_0[i][0] ][ unit517_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit517_0[i][2] ][ unit517_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit517_0[i][4] ][ unit517_0[i][5] ] >0);
		X_contra = ( LargeX[517][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit517_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[517][1]=0; L[517][0]=1;}
			satisfiable[517][0]=satisfiable[517][0] & ((x[517] ^ 0) | (x[ unit517_0[i][0] ] ^ unit517_0[i][1]) |(x[ unit517_0[i][2] ] ^ unit517_0[i][3]));
			}
		if(X_contra>0) L[517][0]=2;
		}
	//Check all rules of unit[517][1]
	L[517][1] = LargeX[517][0]>0 ? 1 : 0;
	satisfiable[517][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit517_1[i][0] ][ unit517_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit517_1[i][2] ][ unit517_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit517_1[i][4] ][ unit517_1[i][5] ] >0);
		X_contra = ( LargeX[517][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit517_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[517][0]=0; L[517][1]=1;}
			satisfiable[517][1]=satisfiable[517][1] & ((x[517] ^ 1) | (x[ unit517_1[i][0] ] ^ unit517_1[i][1]) |(x[ unit517_1[i][2] ] ^ unit517_1[i][3]));
			}
		if(X_contra>0) L[517][1]=2;
		}
	//Check all rules of unit[518][0]
	L[518][0] = LargeX[518][1]>0 ? 1 : 0;
	satisfiable[518][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit518_0[i][0] ][ unit518_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit518_0[i][2] ][ unit518_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit518_0[i][4] ][ unit518_0[i][5] ] >0);
		X_contra = ( LargeX[518][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit518_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[518][1]=0; L[518][0]=1;}
			satisfiable[518][0]=satisfiable[518][0] & ((x[518] ^ 0) | (x[ unit518_0[i][0] ] ^ unit518_0[i][1]) |(x[ unit518_0[i][2] ] ^ unit518_0[i][3]));
			}
		if(X_contra>0) L[518][0]=2;
		}
	//Check all rules of unit[518][1]
	L[518][1] = LargeX[518][0]>0 ? 1 : 0;
	satisfiable[518][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit518_1[i][0] ][ unit518_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit518_1[i][2] ][ unit518_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit518_1[i][4] ][ unit518_1[i][5] ] >0);
		X_contra = ( LargeX[518][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit518_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[518][0]=0; L[518][1]=1;}
			satisfiable[518][1]=satisfiable[518][1] & ((x[518] ^ 1) | (x[ unit518_1[i][0] ] ^ unit518_1[i][1]) |(x[ unit518_1[i][2] ] ^ unit518_1[i][3]));
			}
		if(X_contra>0) L[518][1]=2;
		}
	//Check all rules of unit[519][0]
	L[519][0] = LargeX[519][1]>0 ? 1 : 0;
	satisfiable[519][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit519_0[i][0] ][ unit519_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit519_0[i][2] ][ unit519_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit519_0[i][4] ][ unit519_0[i][5] ] >0);
		X_contra = ( LargeX[519][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit519_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[519][1]=0; L[519][0]=1;}
			satisfiable[519][0]=satisfiable[519][0] & ((x[519] ^ 0) | (x[ unit519_0[i][0] ] ^ unit519_0[i][1]) |(x[ unit519_0[i][2] ] ^ unit519_0[i][3]));
			}
		if(X_contra>0) L[519][0]=2;
		}
	//Check all rules of unit[519][1]
	L[519][1] = LargeX[519][0]>0 ? 1 : 0;
	satisfiable[519][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit519_1[i][0] ][ unit519_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit519_1[i][2] ][ unit519_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit519_1[i][4] ][ unit519_1[i][5] ] >0);
		X_contra = ( LargeX[519][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit519_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[519][0]=0; L[519][1]=1;}
			satisfiable[519][1]=satisfiable[519][1] & ((x[519] ^ 1) | (x[ unit519_1[i][0] ] ^ unit519_1[i][1]) |(x[ unit519_1[i][2] ] ^ unit519_1[i][3]));
			}
		if(X_contra>0) L[519][1]=2;
		}
	//Check all rules of unit[520][0]
	L[520][0] = LargeX[520][1]>0 ? 1 : 0;
	satisfiable[520][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit520_0[i][0] ][ unit520_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit520_0[i][2] ][ unit520_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit520_0[i][4] ][ unit520_0[i][5] ] >0);
		X_contra = ( LargeX[520][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit520_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[520][1]=0; L[520][0]=1;}
			satisfiable[520][0]=satisfiable[520][0] & ((x[520] ^ 0) | (x[ unit520_0[i][0] ] ^ unit520_0[i][1]) |(x[ unit520_0[i][2] ] ^ unit520_0[i][3]));
			}
		if(X_contra>0) L[520][0]=2;
		}
	//Check all rules of unit[520][1]
	L[520][1] = LargeX[520][0]>0 ? 1 : 0;
	satisfiable[520][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit520_1[i][0] ][ unit520_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit520_1[i][2] ][ unit520_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit520_1[i][4] ][ unit520_1[i][5] ] >0);
		X_contra = ( LargeX[520][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit520_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[520][0]=0; L[520][1]=1;}
			satisfiable[520][1]=satisfiable[520][1] & ((x[520] ^ 1) | (x[ unit520_1[i][0] ] ^ unit520_1[i][1]) |(x[ unit520_1[i][2] ] ^ unit520_1[i][3]));
			}
		if(X_contra>0) L[520][1]=2;
		}
	//Check all rules of unit[521][0]
	L[521][0] = LargeX[521][1]>0 ? 1 : 0;
	satisfiable[521][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit521_0[i][0] ][ unit521_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit521_0[i][2] ][ unit521_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit521_0[i][4] ][ unit521_0[i][5] ] >0);
		X_contra = ( LargeX[521][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit521_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[521][1]=0; L[521][0]=1;}
			satisfiable[521][0]=satisfiable[521][0] & ((x[521] ^ 0) | (x[ unit521_0[i][0] ] ^ unit521_0[i][1]) |(x[ unit521_0[i][2] ] ^ unit521_0[i][3]));
			}
		if(X_contra>0) L[521][0]=2;
		}
	//Check all rules of unit[521][1]
	L[521][1] = LargeX[521][0]>0 ? 1 : 0;
	satisfiable[521][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit521_1[i][0] ][ unit521_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit521_1[i][2] ][ unit521_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit521_1[i][4] ][ unit521_1[i][5] ] >0);
		X_contra = ( LargeX[521][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit521_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[521][0]=0; L[521][1]=1;}
			satisfiable[521][1]=satisfiable[521][1] & ((x[521] ^ 1) | (x[ unit521_1[i][0] ] ^ unit521_1[i][1]) |(x[ unit521_1[i][2] ] ^ unit521_1[i][3]));
			}
		if(X_contra>0) L[521][1]=2;
		}
	//Check all rules of unit[522][0]
	L[522][0] = LargeX[522][1]>0 ? 1 : 0;
	satisfiable[522][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit522_0[i][0] ][ unit522_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit522_0[i][2] ][ unit522_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit522_0[i][4] ][ unit522_0[i][5] ] >0);
		X_contra = ( LargeX[522][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit522_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[522][1]=0; L[522][0]=1;}
			satisfiable[522][0]=satisfiable[522][0] & ((x[522] ^ 0) | (x[ unit522_0[i][0] ] ^ unit522_0[i][1]) |(x[ unit522_0[i][2] ] ^ unit522_0[i][3]));
			}
		if(X_contra>0) L[522][0]=2;
		}
	//Check all rules of unit[522][1]
	L[522][1] = LargeX[522][0]>0 ? 1 : 0;
	satisfiable[522][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit522_1[i][0] ][ unit522_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit522_1[i][2] ][ unit522_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit522_1[i][4] ][ unit522_1[i][5] ] >0);
		X_contra = ( LargeX[522][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit522_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[522][0]=0; L[522][1]=1;}
			satisfiable[522][1]=satisfiable[522][1] & ((x[522] ^ 1) | (x[ unit522_1[i][0] ] ^ unit522_1[i][1]) |(x[ unit522_1[i][2] ] ^ unit522_1[i][3]));
			}
		if(X_contra>0) L[522][1]=2;
		}
	//Check all rules of unit[523][0]
	L[523][0] = LargeX[523][1]>0 ? 1 : 0;
	satisfiable[523][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit523_0[i][0] ][ unit523_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit523_0[i][2] ][ unit523_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit523_0[i][4] ][ unit523_0[i][5] ] >0);
		X_contra = ( LargeX[523][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit523_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[523][1]=0; L[523][0]=1;}
			satisfiable[523][0]=satisfiable[523][0] & ((x[523] ^ 0) | (x[ unit523_0[i][0] ] ^ unit523_0[i][1]) |(x[ unit523_0[i][2] ] ^ unit523_0[i][3]));
			}
		if(X_contra>0) L[523][0]=2;
		}
	//Check all rules of unit[523][1]
	L[523][1] = LargeX[523][0]>0 ? 1 : 0;
	satisfiable[523][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit523_1[i][0] ][ unit523_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit523_1[i][2] ][ unit523_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit523_1[i][4] ][ unit523_1[i][5] ] >0);
		X_contra = ( LargeX[523][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit523_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[523][0]=0; L[523][1]=1;}
			satisfiable[523][1]=satisfiable[523][1] & ((x[523] ^ 1) | (x[ unit523_1[i][0] ] ^ unit523_1[i][1]) |(x[ unit523_1[i][2] ] ^ unit523_1[i][3]));
			}
		if(X_contra>0) L[523][1]=2;
		}
	//Check all rules of unit[524][0]
	L[524][0] = LargeX[524][1]>0 ? 1 : 0;
	satisfiable[524][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit524_0[i][0] ][ unit524_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit524_0[i][2] ][ unit524_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit524_0[i][4] ][ unit524_0[i][5] ] >0);
		X_contra = ( LargeX[524][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit524_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[524][1]=0; L[524][0]=1;}
			satisfiable[524][0]=satisfiable[524][0] & ((x[524] ^ 0) | (x[ unit524_0[i][0] ] ^ unit524_0[i][1]) |(x[ unit524_0[i][2] ] ^ unit524_0[i][3]));
			}
		if(X_contra>0) L[524][0]=2;
		}
	//Check all rules of unit[524][1]
	L[524][1] = LargeX[524][0]>0 ? 1 : 0;
	satisfiable[524][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit524_1[i][0] ][ unit524_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit524_1[i][2] ][ unit524_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit524_1[i][4] ][ unit524_1[i][5] ] >0);
		X_contra = ( LargeX[524][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit524_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[524][0]=0; L[524][1]=1;}
			satisfiable[524][1]=satisfiable[524][1] & ((x[524] ^ 1) | (x[ unit524_1[i][0] ] ^ unit524_1[i][1]) |(x[ unit524_1[i][2] ] ^ unit524_1[i][3]));
			}
		if(X_contra>0) L[524][1]=2;
		}
	//Check all rules of unit[525][0]
	L[525][0] = LargeX[525][1]>0 ? 1 : 0;
	satisfiable[525][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit525_0[i][0] ][ unit525_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit525_0[i][2] ][ unit525_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit525_0[i][4] ][ unit525_0[i][5] ] >0);
		X_contra = ( LargeX[525][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit525_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[525][1]=0; L[525][0]=1;}
			satisfiable[525][0]=satisfiable[525][0] & ((x[525] ^ 0) | (x[ unit525_0[i][0] ] ^ unit525_0[i][1]) |(x[ unit525_0[i][2] ] ^ unit525_0[i][3]));
			}
		if(X_contra>0) L[525][0]=2;
		}
	//Check all rules of unit[525][1]
	L[525][1] = LargeX[525][0]>0 ? 1 : 0;
	satisfiable[525][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit525_1[i][0] ][ unit525_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit525_1[i][2] ][ unit525_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit525_1[i][4] ][ unit525_1[i][5] ] >0);
		X_contra = ( LargeX[525][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit525_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[525][0]=0; L[525][1]=1;}
			satisfiable[525][1]=satisfiable[525][1] & ((x[525] ^ 1) | (x[ unit525_1[i][0] ] ^ unit525_1[i][1]) |(x[ unit525_1[i][2] ] ^ unit525_1[i][3]));
			}
		if(X_contra>0) L[525][1]=2;
		}
	//Check all rules of unit[526][0]
	L[526][0] = LargeX[526][1]>0 ? 1 : 0;
	satisfiable[526][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit526_0[i][0] ][ unit526_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit526_0[i][2] ][ unit526_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit526_0[i][4] ][ unit526_0[i][5] ] >0);
		X_contra = ( LargeX[526][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit526_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[526][1]=0; L[526][0]=1;}
			satisfiable[526][0]=satisfiable[526][0] & ((x[526] ^ 0) | (x[ unit526_0[i][0] ] ^ unit526_0[i][1]) |(x[ unit526_0[i][2] ] ^ unit526_0[i][3]));
			}
		if(X_contra>0) L[526][0]=2;
		}
	//Check all rules of unit[526][1]
	L[526][1] = LargeX[526][0]>0 ? 1 : 0;
	satisfiable[526][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit526_1[i][0] ][ unit526_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit526_1[i][2] ][ unit526_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit526_1[i][4] ][ unit526_1[i][5] ] >0);
		X_contra = ( LargeX[526][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit526_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[526][0]=0; L[526][1]=1;}
			satisfiable[526][1]=satisfiable[526][1] & ((x[526] ^ 1) | (x[ unit526_1[i][0] ] ^ unit526_1[i][1]) |(x[ unit526_1[i][2] ] ^ unit526_1[i][3]));
			}
		if(X_contra>0) L[526][1]=2;
		}
	//Check all rules of unit[527][0]
	L[527][0] = LargeX[527][1]>0 ? 1 : 0;
	satisfiable[527][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit527_0[i][0] ][ unit527_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit527_0[i][2] ][ unit527_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit527_0[i][4] ][ unit527_0[i][5] ] >0);
		X_contra = ( LargeX[527][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit527_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[527][1]=0; L[527][0]=1;}
			satisfiable[527][0]=satisfiable[527][0] & ((x[527] ^ 0) | (x[ unit527_0[i][0] ] ^ unit527_0[i][1]) |(x[ unit527_0[i][2] ] ^ unit527_0[i][3]));
			}
		if(X_contra>0) L[527][0]=2;
		}
	//Check all rules of unit[527][1]
	L[527][1] = LargeX[527][0]>0 ? 1 : 0;
	satisfiable[527][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit527_1[i][0] ][ unit527_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit527_1[i][2] ][ unit527_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit527_1[i][4] ][ unit527_1[i][5] ] >0);
		X_contra = ( LargeX[527][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit527_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[527][0]=0; L[527][1]=1;}
			satisfiable[527][1]=satisfiable[527][1] & ((x[527] ^ 1) | (x[ unit527_1[i][0] ] ^ unit527_1[i][1]) |(x[ unit527_1[i][2] ] ^ unit527_1[i][3]));
			}
		if(X_contra>0) L[527][1]=2;
		}
	//Check all rules of unit[528][0]
	L[528][0] = LargeX[528][1]>0 ? 1 : 0;
	satisfiable[528][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit528_0[i][0] ][ unit528_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit528_0[i][2] ][ unit528_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit528_0[i][4] ][ unit528_0[i][5] ] >0);
		X_contra = ( LargeX[528][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit528_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[528][1]=0; L[528][0]=1;}
			satisfiable[528][0]=satisfiable[528][0] & ((x[528] ^ 0) | (x[ unit528_0[i][0] ] ^ unit528_0[i][1]) |(x[ unit528_0[i][2] ] ^ unit528_0[i][3]));
			}
		if(X_contra>0) L[528][0]=2;
		}
	//Check all rules of unit[528][1]
	L[528][1] = LargeX[528][0]>0 ? 1 : 0;
	satisfiable[528][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit528_1[i][0] ][ unit528_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit528_1[i][2] ][ unit528_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit528_1[i][4] ][ unit528_1[i][5] ] >0);
		X_contra = ( LargeX[528][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit528_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[528][0]=0; L[528][1]=1;}
			satisfiable[528][1]=satisfiable[528][1] & ((x[528] ^ 1) | (x[ unit528_1[i][0] ] ^ unit528_1[i][1]) |(x[ unit528_1[i][2] ] ^ unit528_1[i][3]));
			}
		if(X_contra>0) L[528][1]=2;
		}
	//Check all rules of unit[529][0]
	L[529][0] = LargeX[529][1]>0 ? 1 : 0;
	satisfiable[529][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit529_0[i][0] ][ unit529_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit529_0[i][2] ][ unit529_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit529_0[i][4] ][ unit529_0[i][5] ] >0);
		X_contra = ( LargeX[529][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit529_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[529][1]=0; L[529][0]=1;}
			satisfiable[529][0]=satisfiable[529][0] & ((x[529] ^ 0) | (x[ unit529_0[i][0] ] ^ unit529_0[i][1]) |(x[ unit529_0[i][2] ] ^ unit529_0[i][3]));
			}
		if(X_contra>0) L[529][0]=2;
		}
	//Check all rules of unit[529][1]
	L[529][1] = LargeX[529][0]>0 ? 1 : 0;
	satisfiable[529][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit529_1[i][0] ][ unit529_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit529_1[i][2] ][ unit529_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit529_1[i][4] ][ unit529_1[i][5] ] >0);
		X_contra = ( LargeX[529][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit529_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[529][0]=0; L[529][1]=1;}
			satisfiable[529][1]=satisfiable[529][1] & ((x[529] ^ 1) | (x[ unit529_1[i][0] ] ^ unit529_1[i][1]) |(x[ unit529_1[i][2] ] ^ unit529_1[i][3]));
			}
		if(X_contra>0) L[529][1]=2;
		}
	//Check all rules of unit[530][0]
	L[530][0] = LargeX[530][1]>0 ? 1 : 0;
	satisfiable[530][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit530_0[i][0] ][ unit530_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit530_0[i][2] ][ unit530_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit530_0[i][4] ][ unit530_0[i][5] ] >0);
		X_contra = ( LargeX[530][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit530_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[530][1]=0; L[530][0]=1;}
			satisfiable[530][0]=satisfiable[530][0] & ((x[530] ^ 0) | (x[ unit530_0[i][0] ] ^ unit530_0[i][1]) |(x[ unit530_0[i][2] ] ^ unit530_0[i][3]));
			}
		if(X_contra>0) L[530][0]=2;
		}
	//Check all rules of unit[530][1]
	L[530][1] = LargeX[530][0]>0 ? 1 : 0;
	satisfiable[530][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit530_1[i][0] ][ unit530_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit530_1[i][2] ][ unit530_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit530_1[i][4] ][ unit530_1[i][5] ] >0);
		X_contra = ( LargeX[530][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit530_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[530][0]=0; L[530][1]=1;}
			satisfiable[530][1]=satisfiable[530][1] & ((x[530] ^ 1) | (x[ unit530_1[i][0] ] ^ unit530_1[i][1]) |(x[ unit530_1[i][2] ] ^ unit530_1[i][3]));
			}
		if(X_contra>0) L[530][1]=2;
		}
	//Check all rules of unit[531][0]
	L[531][0] = LargeX[531][1]>0 ? 1 : 0;
	satisfiable[531][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit531_0[i][0] ][ unit531_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit531_0[i][2] ][ unit531_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit531_0[i][4] ][ unit531_0[i][5] ] >0);
		X_contra = ( LargeX[531][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit531_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[531][1]=0; L[531][0]=1;}
			satisfiable[531][0]=satisfiable[531][0] & ((x[531] ^ 0) | (x[ unit531_0[i][0] ] ^ unit531_0[i][1]) |(x[ unit531_0[i][2] ] ^ unit531_0[i][3]));
			}
		if(X_contra>0) L[531][0]=2;
		}
	//Check all rules of unit[531][1]
	L[531][1] = LargeX[531][0]>0 ? 1 : 0;
	satisfiable[531][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit531_1[i][0] ][ unit531_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit531_1[i][2] ][ unit531_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit531_1[i][4] ][ unit531_1[i][5] ] >0);
		X_contra = ( LargeX[531][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit531_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[531][0]=0; L[531][1]=1;}
			satisfiable[531][1]=satisfiable[531][1] & ((x[531] ^ 1) | (x[ unit531_1[i][0] ] ^ unit531_1[i][1]) |(x[ unit531_1[i][2] ] ^ unit531_1[i][3]));
			}
		if(X_contra>0) L[531][1]=2;
		}
	//Check all rules of unit[532][0]
	L[532][0] = LargeX[532][1]>0 ? 1 : 0;
	satisfiable[532][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit532_0[i][0] ][ unit532_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit532_0[i][2] ][ unit532_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit532_0[i][4] ][ unit532_0[i][5] ] >0);
		X_contra = ( LargeX[532][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit532_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[532][1]=0; L[532][0]=1;}
			satisfiable[532][0]=satisfiable[532][0] & ((x[532] ^ 0) | (x[ unit532_0[i][0] ] ^ unit532_0[i][1]) |(x[ unit532_0[i][2] ] ^ unit532_0[i][3]));
			}
		if(X_contra>0) L[532][0]=2;
		}
	//Check all rules of unit[532][1]
	L[532][1] = LargeX[532][0]>0 ? 1 : 0;
	satisfiable[532][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit532_1[i][0] ][ unit532_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit532_1[i][2] ][ unit532_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit532_1[i][4] ][ unit532_1[i][5] ] >0);
		X_contra = ( LargeX[532][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit532_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[532][0]=0; L[532][1]=1;}
			satisfiable[532][1]=satisfiable[532][1] & ((x[532] ^ 1) | (x[ unit532_1[i][0] ] ^ unit532_1[i][1]) |(x[ unit532_1[i][2] ] ^ unit532_1[i][3]));
			}
		if(X_contra>0) L[532][1]=2;
		}
	//Check all rules of unit[533][0]
	L[533][0] = LargeX[533][1]>0 ? 1 : 0;
	satisfiable[533][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit533_0[i][0] ][ unit533_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit533_0[i][2] ][ unit533_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit533_0[i][4] ][ unit533_0[i][5] ] >0);
		X_contra = ( LargeX[533][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit533_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[533][1]=0; L[533][0]=1;}
			satisfiable[533][0]=satisfiable[533][0] & ((x[533] ^ 0) | (x[ unit533_0[i][0] ] ^ unit533_0[i][1]) |(x[ unit533_0[i][2] ] ^ unit533_0[i][3]));
			}
		if(X_contra>0) L[533][0]=2;
		}
	//Check all rules of unit[533][1]
	L[533][1] = LargeX[533][0]>0 ? 1 : 0;
	satisfiable[533][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit533_1[i][0] ][ unit533_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit533_1[i][2] ][ unit533_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit533_1[i][4] ][ unit533_1[i][5] ] >0);
		X_contra = ( LargeX[533][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit533_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[533][0]=0; L[533][1]=1;}
			satisfiable[533][1]=satisfiable[533][1] & ((x[533] ^ 1) | (x[ unit533_1[i][0] ] ^ unit533_1[i][1]) |(x[ unit533_1[i][2] ] ^ unit533_1[i][3]));
			}
		if(X_contra>0) L[533][1]=2;
		}
	//Check all rules of unit[534][0]
	L[534][0] = LargeX[534][1]>0 ? 1 : 0;
	satisfiable[534][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit534_0[i][0] ][ unit534_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit534_0[i][2] ][ unit534_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit534_0[i][4] ][ unit534_0[i][5] ] >0);
		X_contra = ( LargeX[534][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit534_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[534][1]=0; L[534][0]=1;}
			satisfiable[534][0]=satisfiable[534][0] & ((x[534] ^ 0) | (x[ unit534_0[i][0] ] ^ unit534_0[i][1]) |(x[ unit534_0[i][2] ] ^ unit534_0[i][3]));
			}
		if(X_contra>0) L[534][0]=2;
		}
	//Check all rules of unit[534][1]
	L[534][1] = LargeX[534][0]>0 ? 1 : 0;
	satisfiable[534][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit534_1[i][0] ][ unit534_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit534_1[i][2] ][ unit534_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit534_1[i][4] ][ unit534_1[i][5] ] >0);
		X_contra = ( LargeX[534][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit534_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[534][0]=0; L[534][1]=1;}
			satisfiable[534][1]=satisfiable[534][1] & ((x[534] ^ 1) | (x[ unit534_1[i][0] ] ^ unit534_1[i][1]) |(x[ unit534_1[i][2] ] ^ unit534_1[i][3]));
			}
		if(X_contra>0) L[534][1]=2;
		}
	//Check all rules of unit[535][0]
	L[535][0] = LargeX[535][1]>0 ? 1 : 0;
	satisfiable[535][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit535_0[i][0] ][ unit535_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit535_0[i][2] ][ unit535_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit535_0[i][4] ][ unit535_0[i][5] ] >0);
		X_contra = ( LargeX[535][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit535_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[535][1]=0; L[535][0]=1;}
			satisfiable[535][0]=satisfiable[535][0] & ((x[535] ^ 0) | (x[ unit535_0[i][0] ] ^ unit535_0[i][1]) |(x[ unit535_0[i][2] ] ^ unit535_0[i][3]));
			}
		if(X_contra>0) L[535][0]=2;
		}
	//Check all rules of unit[535][1]
	L[535][1] = LargeX[535][0]>0 ? 1 : 0;
	satisfiable[535][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit535_1[i][0] ][ unit535_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit535_1[i][2] ][ unit535_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit535_1[i][4] ][ unit535_1[i][5] ] >0);
		X_contra = ( LargeX[535][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit535_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[535][0]=0; L[535][1]=1;}
			satisfiable[535][1]=satisfiable[535][1] & ((x[535] ^ 1) | (x[ unit535_1[i][0] ] ^ unit535_1[i][1]) |(x[ unit535_1[i][2] ] ^ unit535_1[i][3]));
			}
		if(X_contra>0) L[535][1]=2;
		}
	//Check all rules of unit[536][0]
	L[536][0] = LargeX[536][1]>0 ? 1 : 0;
	satisfiable[536][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit536_0[i][0] ][ unit536_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit536_0[i][2] ][ unit536_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit536_0[i][4] ][ unit536_0[i][5] ] >0);
		X_contra = ( LargeX[536][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit536_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[536][1]=0; L[536][0]=1;}
			satisfiable[536][0]=satisfiable[536][0] & ((x[536] ^ 0) | (x[ unit536_0[i][0] ] ^ unit536_0[i][1]) |(x[ unit536_0[i][2] ] ^ unit536_0[i][3]));
			}
		if(X_contra>0) L[536][0]=2;
		}
	//Check all rules of unit[536][1]
	L[536][1] = LargeX[536][0]>0 ? 1 : 0;
	satisfiable[536][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit536_1[i][0] ][ unit536_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit536_1[i][2] ][ unit536_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit536_1[i][4] ][ unit536_1[i][5] ] >0);
		X_contra = ( LargeX[536][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit536_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[536][0]=0; L[536][1]=1;}
			satisfiable[536][1]=satisfiable[536][1] & ((x[536] ^ 1) | (x[ unit536_1[i][0] ] ^ unit536_1[i][1]) |(x[ unit536_1[i][2] ] ^ unit536_1[i][3]));
			}
		if(X_contra>0) L[536][1]=2;
		}
	//Check all rules of unit[537][0]
	L[537][0] = LargeX[537][1]>0 ? 1 : 0;
	satisfiable[537][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit537_0[i][0] ][ unit537_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit537_0[i][2] ][ unit537_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit537_0[i][4] ][ unit537_0[i][5] ] >0);
		X_contra = ( LargeX[537][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit537_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[537][1]=0; L[537][0]=1;}
			satisfiable[537][0]=satisfiable[537][0] & ((x[537] ^ 0) | (x[ unit537_0[i][0] ] ^ unit537_0[i][1]) |(x[ unit537_0[i][2] ] ^ unit537_0[i][3]));
			}
		if(X_contra>0) L[537][0]=2;
		}
	//Check all rules of unit[537][1]
	L[537][1] = LargeX[537][0]>0 ? 1 : 0;
	satisfiable[537][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit537_1[i][0] ][ unit537_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit537_1[i][2] ][ unit537_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit537_1[i][4] ][ unit537_1[i][5] ] >0);
		X_contra = ( LargeX[537][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit537_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[537][0]=0; L[537][1]=1;}
			satisfiable[537][1]=satisfiable[537][1] & ((x[537] ^ 1) | (x[ unit537_1[i][0] ] ^ unit537_1[i][1]) |(x[ unit537_1[i][2] ] ^ unit537_1[i][3]));
			}
		if(X_contra>0) L[537][1]=2;
		}
	//Check all rules of unit[538][0]
	L[538][0] = LargeX[538][1]>0 ? 1 : 0;
	satisfiable[538][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit538_0[i][0] ][ unit538_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit538_0[i][2] ][ unit538_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit538_0[i][4] ][ unit538_0[i][5] ] >0);
		X_contra = ( LargeX[538][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit538_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[538][1]=0; L[538][0]=1;}
			satisfiable[538][0]=satisfiable[538][0] & ((x[538] ^ 0) | (x[ unit538_0[i][0] ] ^ unit538_0[i][1]) |(x[ unit538_0[i][2] ] ^ unit538_0[i][3]));
			}
		if(X_contra>0) L[538][0]=2;
		}
	//Check all rules of unit[538][1]
	L[538][1] = LargeX[538][0]>0 ? 1 : 0;
	satisfiable[538][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit538_1[i][0] ][ unit538_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit538_1[i][2] ][ unit538_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit538_1[i][4] ][ unit538_1[i][5] ] >0);
		X_contra = ( LargeX[538][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit538_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[538][0]=0; L[538][1]=1;}
			satisfiable[538][1]=satisfiable[538][1] & ((x[538] ^ 1) | (x[ unit538_1[i][0] ] ^ unit538_1[i][1]) |(x[ unit538_1[i][2] ] ^ unit538_1[i][3]));
			}
		if(X_contra>0) L[538][1]=2;
		}
	//Check all rules of unit[539][0]
	L[539][0] = LargeX[539][1]>0 ? 1 : 0;
	satisfiable[539][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit539_0[i][0] ][ unit539_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit539_0[i][2] ][ unit539_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit539_0[i][4] ][ unit539_0[i][5] ] >0);
		X_contra = ( LargeX[539][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit539_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[539][1]=0; L[539][0]=1;}
			satisfiable[539][0]=satisfiable[539][0] & ((x[539] ^ 0) | (x[ unit539_0[i][0] ] ^ unit539_0[i][1]) |(x[ unit539_0[i][2] ] ^ unit539_0[i][3]));
			}
		if(X_contra>0) L[539][0]=2;
		}
	//Check all rules of unit[539][1]
	L[539][1] = LargeX[539][0]>0 ? 1 : 0;
	satisfiable[539][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit539_1[i][0] ][ unit539_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit539_1[i][2] ][ unit539_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit539_1[i][4] ][ unit539_1[i][5] ] >0);
		X_contra = ( LargeX[539][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit539_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[539][0]=0; L[539][1]=1;}
			satisfiable[539][1]=satisfiable[539][1] & ((x[539] ^ 1) | (x[ unit539_1[i][0] ] ^ unit539_1[i][1]) |(x[ unit539_1[i][2] ] ^ unit539_1[i][3]));
			}
		if(X_contra>0) L[539][1]=2;
		}
	//Check all rules of unit[540][0]
	L[540][0] = LargeX[540][1]>0 ? 1 : 0;
	satisfiable[540][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit540_0[i][0] ][ unit540_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit540_0[i][2] ][ unit540_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit540_0[i][4] ][ unit540_0[i][5] ] >0);
		X_contra = ( LargeX[540][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit540_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[540][1]=0; L[540][0]=1;}
			satisfiable[540][0]=satisfiable[540][0] & ((x[540] ^ 0) | (x[ unit540_0[i][0] ] ^ unit540_0[i][1]) |(x[ unit540_0[i][2] ] ^ unit540_0[i][3]));
			}
		if(X_contra>0) L[540][0]=2;
		}
	//Check all rules of unit[540][1]
	L[540][1] = LargeX[540][0]>0 ? 1 : 0;
	satisfiable[540][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit540_1[i][0] ][ unit540_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit540_1[i][2] ][ unit540_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit540_1[i][4] ][ unit540_1[i][5] ] >0);
		X_contra = ( LargeX[540][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit540_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[540][0]=0; L[540][1]=1;}
			satisfiable[540][1]=satisfiable[540][1] & ((x[540] ^ 1) | (x[ unit540_1[i][0] ] ^ unit540_1[i][1]) |(x[ unit540_1[i][2] ] ^ unit540_1[i][3]));
			}
		if(X_contra>0) L[540][1]=2;
		}
	//Check all rules of unit[541][0]
	L[541][0] = LargeX[541][1]>0 ? 1 : 0;
	satisfiable[541][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit541_0[i][0] ][ unit541_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit541_0[i][2] ][ unit541_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit541_0[i][4] ][ unit541_0[i][5] ] >0);
		X_contra = ( LargeX[541][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit541_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[541][1]=0; L[541][0]=1;}
			satisfiable[541][0]=satisfiable[541][0] & ((x[541] ^ 0) | (x[ unit541_0[i][0] ] ^ unit541_0[i][1]) |(x[ unit541_0[i][2] ] ^ unit541_0[i][3]));
			}
		if(X_contra>0) L[541][0]=2;
		}
	//Check all rules of unit[541][1]
	L[541][1] = LargeX[541][0]>0 ? 1 : 0;
	satisfiable[541][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit541_1[i][0] ][ unit541_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit541_1[i][2] ][ unit541_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit541_1[i][4] ][ unit541_1[i][5] ] >0);
		X_contra = ( LargeX[541][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit541_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[541][0]=0; L[541][1]=1;}
			satisfiable[541][1]=satisfiable[541][1] & ((x[541] ^ 1) | (x[ unit541_1[i][0] ] ^ unit541_1[i][1]) |(x[ unit541_1[i][2] ] ^ unit541_1[i][3]));
			}
		if(X_contra>0) L[541][1]=2;
		}
	//Check all rules of unit[542][0]
	L[542][0] = LargeX[542][1]>0 ? 1 : 0;
	satisfiable[542][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit542_0[i][0] ][ unit542_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit542_0[i][2] ][ unit542_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit542_0[i][4] ][ unit542_0[i][5] ] >0);
		X_contra = ( LargeX[542][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit542_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[542][1]=0; L[542][0]=1;}
			satisfiable[542][0]=satisfiable[542][0] & ((x[542] ^ 0) | (x[ unit542_0[i][0] ] ^ unit542_0[i][1]) |(x[ unit542_0[i][2] ] ^ unit542_0[i][3]));
			}
		if(X_contra>0) L[542][0]=2;
		}
	//Check all rules of unit[542][1]
	L[542][1] = LargeX[542][0]>0 ? 1 : 0;
	satisfiable[542][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit542_1[i][0] ][ unit542_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit542_1[i][2] ][ unit542_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit542_1[i][4] ][ unit542_1[i][5] ] >0);
		X_contra = ( LargeX[542][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit542_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[542][0]=0; L[542][1]=1;}
			satisfiable[542][1]=satisfiable[542][1] & ((x[542] ^ 1) | (x[ unit542_1[i][0] ] ^ unit542_1[i][1]) |(x[ unit542_1[i][2] ] ^ unit542_1[i][3]));
			}
		if(X_contra>0) L[542][1]=2;
		}
	//Check all rules of unit[543][0]
	L[543][0] = LargeX[543][1]>0 ? 1 : 0;
	satisfiable[543][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit543_0[i][0] ][ unit543_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit543_0[i][2] ][ unit543_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit543_0[i][4] ][ unit543_0[i][5] ] >0);
		X_contra = ( LargeX[543][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit543_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[543][1]=0; L[543][0]=1;}
			satisfiable[543][0]=satisfiable[543][0] & ((x[543] ^ 0) | (x[ unit543_0[i][0] ] ^ unit543_0[i][1]) |(x[ unit543_0[i][2] ] ^ unit543_0[i][3]));
			}
		if(X_contra>0) L[543][0]=2;
		}
	//Check all rules of unit[543][1]
	L[543][1] = LargeX[543][0]>0 ? 1 : 0;
	satisfiable[543][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit543_1[i][0] ][ unit543_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit543_1[i][2] ][ unit543_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit543_1[i][4] ][ unit543_1[i][5] ] >0);
		X_contra = ( LargeX[543][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit543_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[543][0]=0; L[543][1]=1;}
			satisfiable[543][1]=satisfiable[543][1] & ((x[543] ^ 1) | (x[ unit543_1[i][0] ] ^ unit543_1[i][1]) |(x[ unit543_1[i][2] ] ^ unit543_1[i][3]));
			}
		if(X_contra>0) L[543][1]=2;
		}
	//Check all rules of unit[544][0]
	L[544][0] = LargeX[544][1]>0 ? 1 : 0;
	satisfiable[544][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit544_0[i][0] ][ unit544_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit544_0[i][2] ][ unit544_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit544_0[i][4] ][ unit544_0[i][5] ] >0);
		X_contra = ( LargeX[544][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit544_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[544][1]=0; L[544][0]=1;}
			satisfiable[544][0]=satisfiable[544][0] & ((x[544] ^ 0) | (x[ unit544_0[i][0] ] ^ unit544_0[i][1]) |(x[ unit544_0[i][2] ] ^ unit544_0[i][3]));
			}
		if(X_contra>0) L[544][0]=2;
		}
	//Check all rules of unit[544][1]
	L[544][1] = LargeX[544][0]>0 ? 1 : 0;
	satisfiable[544][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit544_1[i][0] ][ unit544_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit544_1[i][2] ][ unit544_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit544_1[i][4] ][ unit544_1[i][5] ] >0);
		X_contra = ( LargeX[544][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit544_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[544][0]=0; L[544][1]=1;}
			satisfiable[544][1]=satisfiable[544][1] & ((x[544] ^ 1) | (x[ unit544_1[i][0] ] ^ unit544_1[i][1]) |(x[ unit544_1[i][2] ] ^ unit544_1[i][3]));
			}
		if(X_contra>0) L[544][1]=2;
		}
	//Check all rules of unit[545][0]
	L[545][0] = LargeX[545][1]>0 ? 1 : 0;
	satisfiable[545][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit545_0[i][0] ][ unit545_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit545_0[i][2] ][ unit545_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit545_0[i][4] ][ unit545_0[i][5] ] >0);
		X_contra = ( LargeX[545][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit545_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[545][1]=0; L[545][0]=1;}
			satisfiable[545][0]=satisfiable[545][0] & ((x[545] ^ 0) | (x[ unit545_0[i][0] ] ^ unit545_0[i][1]) |(x[ unit545_0[i][2] ] ^ unit545_0[i][3]));
			}
		if(X_contra>0) L[545][0]=2;
		}
	//Check all rules of unit[545][1]
	L[545][1] = LargeX[545][0]>0 ? 1 : 0;
	satisfiable[545][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit545_1[i][0] ][ unit545_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit545_1[i][2] ][ unit545_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit545_1[i][4] ][ unit545_1[i][5] ] >0);
		X_contra = ( LargeX[545][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit545_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[545][0]=0; L[545][1]=1;}
			satisfiable[545][1]=satisfiable[545][1] & ((x[545] ^ 1) | (x[ unit545_1[i][0] ] ^ unit545_1[i][1]) |(x[ unit545_1[i][2] ] ^ unit545_1[i][3]));
			}
		if(X_contra>0) L[545][1]=2;
		}
	//Check all rules of unit[546][0]
	L[546][0] = LargeX[546][1]>0 ? 1 : 0;
	satisfiable[546][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit546_0[i][0] ][ unit546_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit546_0[i][2] ][ unit546_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit546_0[i][4] ][ unit546_0[i][5] ] >0);
		X_contra = ( LargeX[546][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit546_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[546][1]=0; L[546][0]=1;}
			satisfiable[546][0]=satisfiable[546][0] & ((x[546] ^ 0) | (x[ unit546_0[i][0] ] ^ unit546_0[i][1]) |(x[ unit546_0[i][2] ] ^ unit546_0[i][3]));
			}
		if(X_contra>0) L[546][0]=2;
		}
	//Check all rules of unit[546][1]
	L[546][1] = LargeX[546][0]>0 ? 1 : 0;
	satisfiable[546][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit546_1[i][0] ][ unit546_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit546_1[i][2] ][ unit546_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit546_1[i][4] ][ unit546_1[i][5] ] >0);
		X_contra = ( LargeX[546][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit546_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[546][0]=0; L[546][1]=1;}
			satisfiable[546][1]=satisfiable[546][1] & ((x[546] ^ 1) | (x[ unit546_1[i][0] ] ^ unit546_1[i][1]) |(x[ unit546_1[i][2] ] ^ unit546_1[i][3]));
			}
		if(X_contra>0) L[546][1]=2;
		}
	//Check all rules of unit[547][0]
	L[547][0] = LargeX[547][1]>0 ? 1 : 0;
	satisfiable[547][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit547_0[i][0] ][ unit547_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit547_0[i][2] ][ unit547_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit547_0[i][4] ][ unit547_0[i][5] ] >0);
		X_contra = ( LargeX[547][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit547_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[547][1]=0; L[547][0]=1;}
			satisfiable[547][0]=satisfiable[547][0] & ((x[547] ^ 0) | (x[ unit547_0[i][0] ] ^ unit547_0[i][1]) |(x[ unit547_0[i][2] ] ^ unit547_0[i][3]));
			}
		if(X_contra>0) L[547][0]=2;
		}
	//Check all rules of unit[547][1]
	L[547][1] = LargeX[547][0]>0 ? 1 : 0;
	satisfiable[547][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit547_1[i][0] ][ unit547_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit547_1[i][2] ][ unit547_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit547_1[i][4] ][ unit547_1[i][5] ] >0);
		X_contra = ( LargeX[547][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit547_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[547][0]=0; L[547][1]=1;}
			satisfiable[547][1]=satisfiable[547][1] & ((x[547] ^ 1) | (x[ unit547_1[i][0] ] ^ unit547_1[i][1]) |(x[ unit547_1[i][2] ] ^ unit547_1[i][3]));
			}
		if(X_contra>0) L[547][1]=2;
		}
	//Check all rules of unit[548][0]
	L[548][0] = LargeX[548][1]>0 ? 1 : 0;
	satisfiable[548][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit548_0[i][0] ][ unit548_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit548_0[i][2] ][ unit548_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit548_0[i][4] ][ unit548_0[i][5] ] >0);
		X_contra = ( LargeX[548][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit548_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[548][1]=0; L[548][0]=1;}
			satisfiable[548][0]=satisfiable[548][0] & ((x[548] ^ 0) | (x[ unit548_0[i][0] ] ^ unit548_0[i][1]) |(x[ unit548_0[i][2] ] ^ unit548_0[i][3]));
			}
		if(X_contra>0) L[548][0]=2;
		}
	//Check all rules of unit[548][1]
	L[548][1] = LargeX[548][0]>0 ? 1 : 0;
	satisfiable[548][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit548_1[i][0] ][ unit548_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit548_1[i][2] ][ unit548_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit548_1[i][4] ][ unit548_1[i][5] ] >0);
		X_contra = ( LargeX[548][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit548_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[548][0]=0; L[548][1]=1;}
			satisfiable[548][1]=satisfiable[548][1] & ((x[548] ^ 1) | (x[ unit548_1[i][0] ] ^ unit548_1[i][1]) |(x[ unit548_1[i][2] ] ^ unit548_1[i][3]));
			}
		if(X_contra>0) L[548][1]=2;
		}
	//Check all rules of unit[549][0]
	L[549][0] = LargeX[549][1]>0 ? 1 : 0;
	satisfiable[549][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit549_0[i][0] ][ unit549_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit549_0[i][2] ][ unit549_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit549_0[i][4] ][ unit549_0[i][5] ] >0);
		X_contra = ( LargeX[549][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit549_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[549][1]=0; L[549][0]=1;}
			satisfiable[549][0]=satisfiable[549][0] & ((x[549] ^ 0) | (x[ unit549_0[i][0] ] ^ unit549_0[i][1]) |(x[ unit549_0[i][2] ] ^ unit549_0[i][3]));
			}
		if(X_contra>0) L[549][0]=2;
		}
	//Check all rules of unit[549][1]
	L[549][1] = LargeX[549][0]>0 ? 1 : 0;
	satisfiable[549][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit549_1[i][0] ][ unit549_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit549_1[i][2] ][ unit549_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit549_1[i][4] ][ unit549_1[i][5] ] >0);
		X_contra = ( LargeX[549][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit549_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[549][0]=0; L[549][1]=1;}
			satisfiable[549][1]=satisfiable[549][1] & ((x[549] ^ 1) | (x[ unit549_1[i][0] ] ^ unit549_1[i][1]) |(x[ unit549_1[i][2] ] ^ unit549_1[i][3]));
			}
		if(X_contra>0) L[549][1]=2;
		}
	//Check all rules of unit[550][0]
	L[550][0] = LargeX[550][1]>0 ? 1 : 0;
	satisfiable[550][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit550_0[i][0] ][ unit550_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit550_0[i][2] ][ unit550_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit550_0[i][4] ][ unit550_0[i][5] ] >0);
		X_contra = ( LargeX[550][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit550_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[550][1]=0; L[550][0]=1;}
			satisfiable[550][0]=satisfiable[550][0] & ((x[550] ^ 0) | (x[ unit550_0[i][0] ] ^ unit550_0[i][1]) |(x[ unit550_0[i][2] ] ^ unit550_0[i][3]));
			}
		if(X_contra>0) L[550][0]=2;
		}
	//Check all rules of unit[550][1]
	L[550][1] = LargeX[550][0]>0 ? 1 : 0;
	satisfiable[550][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit550_1[i][0] ][ unit550_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit550_1[i][2] ][ unit550_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit550_1[i][4] ][ unit550_1[i][5] ] >0);
		X_contra = ( LargeX[550][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit550_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[550][0]=0; L[550][1]=1;}
			satisfiable[550][1]=satisfiable[550][1] & ((x[550] ^ 1) | (x[ unit550_1[i][0] ] ^ unit550_1[i][1]) |(x[ unit550_1[i][2] ] ^ unit550_1[i][3]));
			}
		if(X_contra>0) L[550][1]=2;
		}
	//Check all rules of unit[551][0]
	L[551][0] = LargeX[551][1]>0 ? 1 : 0;
	satisfiable[551][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit551_0[i][0] ][ unit551_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit551_0[i][2] ][ unit551_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit551_0[i][4] ][ unit551_0[i][5] ] >0);
		X_contra = ( LargeX[551][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit551_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[551][1]=0; L[551][0]=1;}
			satisfiable[551][0]=satisfiable[551][0] & ((x[551] ^ 0) | (x[ unit551_0[i][0] ] ^ unit551_0[i][1]) |(x[ unit551_0[i][2] ] ^ unit551_0[i][3]));
			}
		if(X_contra>0) L[551][0]=2;
		}
	//Check all rules of unit[551][1]
	L[551][1] = LargeX[551][0]>0 ? 1 : 0;
	satisfiable[551][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit551_1[i][0] ][ unit551_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit551_1[i][2] ][ unit551_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit551_1[i][4] ][ unit551_1[i][5] ] >0);
		X_contra = ( LargeX[551][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit551_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[551][0]=0; L[551][1]=1;}
			satisfiable[551][1]=satisfiable[551][1] & ((x[551] ^ 1) | (x[ unit551_1[i][0] ] ^ unit551_1[i][1]) |(x[ unit551_1[i][2] ] ^ unit551_1[i][3]));
			}
		if(X_contra>0) L[551][1]=2;
		}
	//Check all rules of unit[552][0]
	L[552][0] = LargeX[552][1]>0 ? 1 : 0;
	satisfiable[552][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit552_0[i][0] ][ unit552_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit552_0[i][2] ][ unit552_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit552_0[i][4] ][ unit552_0[i][5] ] >0);
		X_contra = ( LargeX[552][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit552_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[552][1]=0; L[552][0]=1;}
			satisfiable[552][0]=satisfiable[552][0] & ((x[552] ^ 0) | (x[ unit552_0[i][0] ] ^ unit552_0[i][1]) |(x[ unit552_0[i][2] ] ^ unit552_0[i][3]));
			}
		if(X_contra>0) L[552][0]=2;
		}
	//Check all rules of unit[552][1]
	L[552][1] = LargeX[552][0]>0 ? 1 : 0;
	satisfiable[552][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit552_1[i][0] ][ unit552_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit552_1[i][2] ][ unit552_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit552_1[i][4] ][ unit552_1[i][5] ] >0);
		X_contra = ( LargeX[552][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit552_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[552][0]=0; L[552][1]=1;}
			satisfiable[552][1]=satisfiable[552][1] & ((x[552] ^ 1) | (x[ unit552_1[i][0] ] ^ unit552_1[i][1]) |(x[ unit552_1[i][2] ] ^ unit552_1[i][3]));
			}
		if(X_contra>0) L[552][1]=2;
		}
	//Check all rules of unit[553][0]
	L[553][0] = LargeX[553][1]>0 ? 1 : 0;
	satisfiable[553][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit553_0[i][0] ][ unit553_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit553_0[i][2] ][ unit553_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit553_0[i][4] ][ unit553_0[i][5] ] >0);
		X_contra = ( LargeX[553][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit553_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[553][1]=0; L[553][0]=1;}
			satisfiable[553][0]=satisfiable[553][0] & ((x[553] ^ 0) | (x[ unit553_0[i][0] ] ^ unit553_0[i][1]) |(x[ unit553_0[i][2] ] ^ unit553_0[i][3]));
			}
		if(X_contra>0) L[553][0]=2;
		}
	//Check all rules of unit[553][1]
	L[553][1] = LargeX[553][0]>0 ? 1 : 0;
	satisfiable[553][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit553_1[i][0] ][ unit553_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit553_1[i][2] ][ unit553_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit553_1[i][4] ][ unit553_1[i][5] ] >0);
		X_contra = ( LargeX[553][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit553_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[553][0]=0; L[553][1]=1;}
			satisfiable[553][1]=satisfiable[553][1] & ((x[553] ^ 1) | (x[ unit553_1[i][0] ] ^ unit553_1[i][1]) |(x[ unit553_1[i][2] ] ^ unit553_1[i][3]));
			}
		if(X_contra>0) L[553][1]=2;
		}
	//Check all rules of unit[554][0]
	L[554][0] = LargeX[554][1]>0 ? 1 : 0;
	satisfiable[554][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit554_0[i][0] ][ unit554_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit554_0[i][2] ][ unit554_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit554_0[i][4] ][ unit554_0[i][5] ] >0);
		X_contra = ( LargeX[554][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit554_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[554][1]=0; L[554][0]=1;}
			satisfiable[554][0]=satisfiable[554][0] & ((x[554] ^ 0) | (x[ unit554_0[i][0] ] ^ unit554_0[i][1]) |(x[ unit554_0[i][2] ] ^ unit554_0[i][3]));
			}
		if(X_contra>0) L[554][0]=2;
		}
	//Check all rules of unit[554][1]
	L[554][1] = LargeX[554][0]>0 ? 1 : 0;
	satisfiable[554][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit554_1[i][0] ][ unit554_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit554_1[i][2] ][ unit554_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit554_1[i][4] ][ unit554_1[i][5] ] >0);
		X_contra = ( LargeX[554][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit554_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[554][0]=0; L[554][1]=1;}
			satisfiable[554][1]=satisfiable[554][1] & ((x[554] ^ 1) | (x[ unit554_1[i][0] ] ^ unit554_1[i][1]) |(x[ unit554_1[i][2] ] ^ unit554_1[i][3]));
			}
		if(X_contra>0) L[554][1]=2;
		}
	//Check all rules of unit[555][0]
	L[555][0] = LargeX[555][1]>0 ? 1 : 0;
	satisfiable[555][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit555_0[i][0] ][ unit555_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit555_0[i][2] ][ unit555_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit555_0[i][4] ][ unit555_0[i][5] ] >0);
		X_contra = ( LargeX[555][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit555_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[555][1]=0; L[555][0]=1;}
			satisfiable[555][0]=satisfiable[555][0] & ((x[555] ^ 0) | (x[ unit555_0[i][0] ] ^ unit555_0[i][1]) |(x[ unit555_0[i][2] ] ^ unit555_0[i][3]));
			}
		if(X_contra>0) L[555][0]=2;
		}
	//Check all rules of unit[555][1]
	L[555][1] = LargeX[555][0]>0 ? 1 : 0;
	satisfiable[555][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit555_1[i][0] ][ unit555_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit555_1[i][2] ][ unit555_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit555_1[i][4] ][ unit555_1[i][5] ] >0);
		X_contra = ( LargeX[555][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit555_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[555][0]=0; L[555][1]=1;}
			satisfiable[555][1]=satisfiable[555][1] & ((x[555] ^ 1) | (x[ unit555_1[i][0] ] ^ unit555_1[i][1]) |(x[ unit555_1[i][2] ] ^ unit555_1[i][3]));
			}
		if(X_contra>0) L[555][1]=2;
		}
	//Check all rules of unit[556][0]
	L[556][0] = LargeX[556][1]>0 ? 1 : 0;
	satisfiable[556][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit556_0[i][0] ][ unit556_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit556_0[i][2] ][ unit556_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit556_0[i][4] ][ unit556_0[i][5] ] >0);
		X_contra = ( LargeX[556][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit556_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[556][1]=0; L[556][0]=1;}
			satisfiable[556][0]=satisfiable[556][0] & ((x[556] ^ 0) | (x[ unit556_0[i][0] ] ^ unit556_0[i][1]) |(x[ unit556_0[i][2] ] ^ unit556_0[i][3]));
			}
		if(X_contra>0) L[556][0]=2;
		}
	//Check all rules of unit[556][1]
	L[556][1] = LargeX[556][0]>0 ? 1 : 0;
	satisfiable[556][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit556_1[i][0] ][ unit556_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit556_1[i][2] ][ unit556_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit556_1[i][4] ][ unit556_1[i][5] ] >0);
		X_contra = ( LargeX[556][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit556_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[556][0]=0; L[556][1]=1;}
			satisfiable[556][1]=satisfiable[556][1] & ((x[556] ^ 1) | (x[ unit556_1[i][0] ] ^ unit556_1[i][1]) |(x[ unit556_1[i][2] ] ^ unit556_1[i][3]));
			}
		if(X_contra>0) L[556][1]=2;
		}
	//Check all rules of unit[557][0]
	L[557][0] = LargeX[557][1]>0 ? 1 : 0;
	satisfiable[557][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit557_0[i][0] ][ unit557_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit557_0[i][2] ][ unit557_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit557_0[i][4] ][ unit557_0[i][5] ] >0);
		X_contra = ( LargeX[557][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit557_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[557][1]=0; L[557][0]=1;}
			satisfiable[557][0]=satisfiable[557][0] & ((x[557] ^ 0) | (x[ unit557_0[i][0] ] ^ unit557_0[i][1]) |(x[ unit557_0[i][2] ] ^ unit557_0[i][3]));
			}
		if(X_contra>0) L[557][0]=2;
		}
	//Check all rules of unit[557][1]
	L[557][1] = LargeX[557][0]>0 ? 1 : 0;
	satisfiable[557][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit557_1[i][0] ][ unit557_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit557_1[i][2] ][ unit557_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit557_1[i][4] ][ unit557_1[i][5] ] >0);
		X_contra = ( LargeX[557][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit557_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[557][0]=0; L[557][1]=1;}
			satisfiable[557][1]=satisfiable[557][1] & ((x[557] ^ 1) | (x[ unit557_1[i][0] ] ^ unit557_1[i][1]) |(x[ unit557_1[i][2] ] ^ unit557_1[i][3]));
			}
		if(X_contra>0) L[557][1]=2;
		}
	//Check all rules of unit[558][0]
	L[558][0] = LargeX[558][1]>0 ? 1 : 0;
	satisfiable[558][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit558_0[i][0] ][ unit558_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit558_0[i][2] ][ unit558_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit558_0[i][4] ][ unit558_0[i][5] ] >0);
		X_contra = ( LargeX[558][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit558_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[558][1]=0; L[558][0]=1;}
			satisfiable[558][0]=satisfiable[558][0] & ((x[558] ^ 0) | (x[ unit558_0[i][0] ] ^ unit558_0[i][1]) |(x[ unit558_0[i][2] ] ^ unit558_0[i][3]));
			}
		if(X_contra>0) L[558][0]=2;
		}
	//Check all rules of unit[558][1]
	L[558][1] = LargeX[558][0]>0 ? 1 : 0;
	satisfiable[558][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit558_1[i][0] ][ unit558_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit558_1[i][2] ][ unit558_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit558_1[i][4] ][ unit558_1[i][5] ] >0);
		X_contra = ( LargeX[558][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit558_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[558][0]=0; L[558][1]=1;}
			satisfiable[558][1]=satisfiable[558][1] & ((x[558] ^ 1) | (x[ unit558_1[i][0] ] ^ unit558_1[i][1]) |(x[ unit558_1[i][2] ] ^ unit558_1[i][3]));
			}
		if(X_contra>0) L[558][1]=2;
		}
	//Check all rules of unit[559][0]
	L[559][0] = LargeX[559][1]>0 ? 1 : 0;
	satisfiable[559][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit559_0[i][0] ][ unit559_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit559_0[i][2] ][ unit559_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit559_0[i][4] ][ unit559_0[i][5] ] >0);
		X_contra = ( LargeX[559][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit559_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[559][1]=0; L[559][0]=1;}
			satisfiable[559][0]=satisfiable[559][0] & ((x[559] ^ 0) | (x[ unit559_0[i][0] ] ^ unit559_0[i][1]) |(x[ unit559_0[i][2] ] ^ unit559_0[i][3]));
			}
		if(X_contra>0) L[559][0]=2;
		}
	//Check all rules of unit[559][1]
	L[559][1] = LargeX[559][0]>0 ? 1 : 0;
	satisfiable[559][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit559_1[i][0] ][ unit559_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit559_1[i][2] ][ unit559_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit559_1[i][4] ][ unit559_1[i][5] ] >0);
		X_contra = ( LargeX[559][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit559_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[559][0]=0; L[559][1]=1;}
			satisfiable[559][1]=satisfiable[559][1] & ((x[559] ^ 1) | (x[ unit559_1[i][0] ] ^ unit559_1[i][1]) |(x[ unit559_1[i][2] ] ^ unit559_1[i][3]));
			}
		if(X_contra>0) L[559][1]=2;
		}
	//Check all rules of unit[560][0]
	L[560][0] = LargeX[560][1]>0 ? 1 : 0;
	satisfiable[560][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit560_0[i][0] ][ unit560_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit560_0[i][2] ][ unit560_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit560_0[i][4] ][ unit560_0[i][5] ] >0);
		X_contra = ( LargeX[560][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit560_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[560][1]=0; L[560][0]=1;}
			satisfiable[560][0]=satisfiable[560][0] & ((x[560] ^ 0) | (x[ unit560_0[i][0] ] ^ unit560_0[i][1]) |(x[ unit560_0[i][2] ] ^ unit560_0[i][3]));
			}
		if(X_contra>0) L[560][0]=2;
		}
	//Check all rules of unit[560][1]
	L[560][1] = LargeX[560][0]>0 ? 1 : 0;
	satisfiable[560][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit560_1[i][0] ][ unit560_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit560_1[i][2] ][ unit560_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit560_1[i][4] ][ unit560_1[i][5] ] >0);
		X_contra = ( LargeX[560][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit560_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[560][0]=0; L[560][1]=1;}
			satisfiable[560][1]=satisfiable[560][1] & ((x[560] ^ 1) | (x[ unit560_1[i][0] ] ^ unit560_1[i][1]) |(x[ unit560_1[i][2] ] ^ unit560_1[i][3]));
			}
		if(X_contra>0) L[560][1]=2;
		}
	//Check all rules of unit[561][0]
	L[561][0] = LargeX[561][1]>0 ? 1 : 0;
	satisfiable[561][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit561_0[i][0] ][ unit561_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit561_0[i][2] ][ unit561_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit561_0[i][4] ][ unit561_0[i][5] ] >0);
		X_contra = ( LargeX[561][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit561_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[561][1]=0; L[561][0]=1;}
			satisfiable[561][0]=satisfiable[561][0] & ((x[561] ^ 0) | (x[ unit561_0[i][0] ] ^ unit561_0[i][1]) |(x[ unit561_0[i][2] ] ^ unit561_0[i][3]));
			}
		if(X_contra>0) L[561][0]=2;
		}
	//Check all rules of unit[561][1]
	L[561][1] = LargeX[561][0]>0 ? 1 : 0;
	satisfiable[561][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit561_1[i][0] ][ unit561_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit561_1[i][2] ][ unit561_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit561_1[i][4] ][ unit561_1[i][5] ] >0);
		X_contra = ( LargeX[561][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit561_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[561][0]=0; L[561][1]=1;}
			satisfiable[561][1]=satisfiable[561][1] & ((x[561] ^ 1) | (x[ unit561_1[i][0] ] ^ unit561_1[i][1]) |(x[ unit561_1[i][2] ] ^ unit561_1[i][3]));
			}
		if(X_contra>0) L[561][1]=2;
		}
	//Check all rules of unit[562][0]
	L[562][0] = LargeX[562][1]>0 ? 1 : 0;
	satisfiable[562][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit562_0[i][0] ][ unit562_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit562_0[i][2] ][ unit562_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit562_0[i][4] ][ unit562_0[i][5] ] >0);
		X_contra = ( LargeX[562][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit562_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[562][1]=0; L[562][0]=1;}
			satisfiable[562][0]=satisfiable[562][0] & ((x[562] ^ 0) | (x[ unit562_0[i][0] ] ^ unit562_0[i][1]) |(x[ unit562_0[i][2] ] ^ unit562_0[i][3]));
			}
		if(X_contra>0) L[562][0]=2;
		}
	//Check all rules of unit[562][1]
	L[562][1] = LargeX[562][0]>0 ? 1 : 0;
	satisfiable[562][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit562_1[i][0] ][ unit562_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit562_1[i][2] ][ unit562_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit562_1[i][4] ][ unit562_1[i][5] ] >0);
		X_contra = ( LargeX[562][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit562_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[562][0]=0; L[562][1]=1;}
			satisfiable[562][1]=satisfiable[562][1] & ((x[562] ^ 1) | (x[ unit562_1[i][0] ] ^ unit562_1[i][1]) |(x[ unit562_1[i][2] ] ^ unit562_1[i][3]));
			}
		if(X_contra>0) L[562][1]=2;
		}
	//Check all rules of unit[563][0]
	L[563][0] = LargeX[563][1]>0 ? 1 : 0;
	satisfiable[563][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit563_0[i][0] ][ unit563_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit563_0[i][2] ][ unit563_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit563_0[i][4] ][ unit563_0[i][5] ] >0);
		X_contra = ( LargeX[563][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit563_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[563][1]=0; L[563][0]=1;}
			satisfiable[563][0]=satisfiable[563][0] & ((x[563] ^ 0) | (x[ unit563_0[i][0] ] ^ unit563_0[i][1]) |(x[ unit563_0[i][2] ] ^ unit563_0[i][3]));
			}
		if(X_contra>0) L[563][0]=2;
		}
	//Check all rules of unit[563][1]
	L[563][1] = LargeX[563][0]>0 ? 1 : 0;
	satisfiable[563][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit563_1[i][0] ][ unit563_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit563_1[i][2] ][ unit563_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit563_1[i][4] ][ unit563_1[i][5] ] >0);
		X_contra = ( LargeX[563][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit563_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[563][0]=0; L[563][1]=1;}
			satisfiable[563][1]=satisfiable[563][1] & ((x[563] ^ 1) | (x[ unit563_1[i][0] ] ^ unit563_1[i][1]) |(x[ unit563_1[i][2] ] ^ unit563_1[i][3]));
			}
		if(X_contra>0) L[563][1]=2;
		}
	//Check all rules of unit[564][0]
	L[564][0] = LargeX[564][1]>0 ? 1 : 0;
	satisfiable[564][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit564_0[i][0] ][ unit564_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit564_0[i][2] ][ unit564_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit564_0[i][4] ][ unit564_0[i][5] ] >0);
		X_contra = ( LargeX[564][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit564_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[564][1]=0; L[564][0]=1;}
			satisfiable[564][0]=satisfiable[564][0] & ((x[564] ^ 0) | (x[ unit564_0[i][0] ] ^ unit564_0[i][1]) |(x[ unit564_0[i][2] ] ^ unit564_0[i][3]));
			}
		if(X_contra>0) L[564][0]=2;
		}
	//Check all rules of unit[564][1]
	L[564][1] = LargeX[564][0]>0 ? 1 : 0;
	satisfiable[564][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit564_1[i][0] ][ unit564_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit564_1[i][2] ][ unit564_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit564_1[i][4] ][ unit564_1[i][5] ] >0);
		X_contra = ( LargeX[564][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit564_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[564][0]=0; L[564][1]=1;}
			satisfiable[564][1]=satisfiable[564][1] & ((x[564] ^ 1) | (x[ unit564_1[i][0] ] ^ unit564_1[i][1]) |(x[ unit564_1[i][2] ] ^ unit564_1[i][3]));
			}
		if(X_contra>0) L[564][1]=2;
		}
	//Check all rules of unit[565][0]
	L[565][0] = LargeX[565][1]>0 ? 1 : 0;
	satisfiable[565][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit565_0[i][0] ][ unit565_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit565_0[i][2] ][ unit565_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit565_0[i][4] ][ unit565_0[i][5] ] >0);
		X_contra = ( LargeX[565][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit565_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[565][1]=0; L[565][0]=1;}
			satisfiable[565][0]=satisfiable[565][0] & ((x[565] ^ 0) | (x[ unit565_0[i][0] ] ^ unit565_0[i][1]) |(x[ unit565_0[i][2] ] ^ unit565_0[i][3]));
			}
		if(X_contra>0) L[565][0]=2;
		}
	//Check all rules of unit[565][1]
	L[565][1] = LargeX[565][0]>0 ? 1 : 0;
	satisfiable[565][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit565_1[i][0] ][ unit565_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit565_1[i][2] ][ unit565_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit565_1[i][4] ][ unit565_1[i][5] ] >0);
		X_contra = ( LargeX[565][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit565_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[565][0]=0; L[565][1]=1;}
			satisfiable[565][1]=satisfiable[565][1] & ((x[565] ^ 1) | (x[ unit565_1[i][0] ] ^ unit565_1[i][1]) |(x[ unit565_1[i][2] ] ^ unit565_1[i][3]));
			}
		if(X_contra>0) L[565][1]=2;
		}
	//Check all rules of unit[566][0]
	L[566][0] = LargeX[566][1]>0 ? 1 : 0;
	satisfiable[566][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit566_0[i][0] ][ unit566_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit566_0[i][2] ][ unit566_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit566_0[i][4] ][ unit566_0[i][5] ] >0);
		X_contra = ( LargeX[566][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit566_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[566][1]=0; L[566][0]=1;}
			satisfiable[566][0]=satisfiable[566][0] & ((x[566] ^ 0) | (x[ unit566_0[i][0] ] ^ unit566_0[i][1]) |(x[ unit566_0[i][2] ] ^ unit566_0[i][3]));
			}
		if(X_contra>0) L[566][0]=2;
		}
	//Check all rules of unit[566][1]
	L[566][1] = LargeX[566][0]>0 ? 1 : 0;
	satisfiable[566][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit566_1[i][0] ][ unit566_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit566_1[i][2] ][ unit566_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit566_1[i][4] ][ unit566_1[i][5] ] >0);
		X_contra = ( LargeX[566][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit566_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[566][0]=0; L[566][1]=1;}
			satisfiable[566][1]=satisfiable[566][1] & ((x[566] ^ 1) | (x[ unit566_1[i][0] ] ^ unit566_1[i][1]) |(x[ unit566_1[i][2] ] ^ unit566_1[i][3]));
			}
		if(X_contra>0) L[566][1]=2;
		}
	//Check all rules of unit[567][0]
	L[567][0] = LargeX[567][1]>0 ? 1 : 0;
	satisfiable[567][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit567_0[i][0] ][ unit567_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit567_0[i][2] ][ unit567_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit567_0[i][4] ][ unit567_0[i][5] ] >0);
		X_contra = ( LargeX[567][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit567_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[567][1]=0; L[567][0]=1;}
			satisfiable[567][0]=satisfiable[567][0] & ((x[567] ^ 0) | (x[ unit567_0[i][0] ] ^ unit567_0[i][1]) |(x[ unit567_0[i][2] ] ^ unit567_0[i][3]));
			}
		if(X_contra>0) L[567][0]=2;
		}
	//Check all rules of unit[567][1]
	L[567][1] = LargeX[567][0]>0 ? 1 : 0;
	satisfiable[567][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit567_1[i][0] ][ unit567_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit567_1[i][2] ][ unit567_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit567_1[i][4] ][ unit567_1[i][5] ] >0);
		X_contra = ( LargeX[567][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit567_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[567][0]=0; L[567][1]=1;}
			satisfiable[567][1]=satisfiable[567][1] & ((x[567] ^ 1) | (x[ unit567_1[i][0] ] ^ unit567_1[i][1]) |(x[ unit567_1[i][2] ] ^ unit567_1[i][3]));
			}
		if(X_contra>0) L[567][1]=2;
		}
	//Check all rules of unit[568][0]
	L[568][0] = LargeX[568][1]>0 ? 1 : 0;
	satisfiable[568][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit568_0[i][0] ][ unit568_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit568_0[i][2] ][ unit568_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit568_0[i][4] ][ unit568_0[i][5] ] >0);
		X_contra = ( LargeX[568][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit568_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[568][1]=0; L[568][0]=1;}
			satisfiable[568][0]=satisfiable[568][0] & ((x[568] ^ 0) | (x[ unit568_0[i][0] ] ^ unit568_0[i][1]) |(x[ unit568_0[i][2] ] ^ unit568_0[i][3]));
			}
		if(X_contra>0) L[568][0]=2;
		}
	//Check all rules of unit[568][1]
	L[568][1] = LargeX[568][0]>0 ? 1 : 0;
	satisfiable[568][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit568_1[i][0] ][ unit568_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit568_1[i][2] ][ unit568_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit568_1[i][4] ][ unit568_1[i][5] ] >0);
		X_contra = ( LargeX[568][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit568_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[568][0]=0; L[568][1]=1;}
			satisfiable[568][1]=satisfiable[568][1] & ((x[568] ^ 1) | (x[ unit568_1[i][0] ] ^ unit568_1[i][1]) |(x[ unit568_1[i][2] ] ^ unit568_1[i][3]));
			}
		if(X_contra>0) L[568][1]=2;
		}
	//Check all rules of unit[569][0]
	L[569][0] = LargeX[569][1]>0 ? 1 : 0;
	satisfiable[569][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit569_0[i][0] ][ unit569_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit569_0[i][2] ][ unit569_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit569_0[i][4] ][ unit569_0[i][5] ] >0);
		X_contra = ( LargeX[569][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit569_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[569][1]=0; L[569][0]=1;}
			satisfiable[569][0]=satisfiable[569][0] & ((x[569] ^ 0) | (x[ unit569_0[i][0] ] ^ unit569_0[i][1]) |(x[ unit569_0[i][2] ] ^ unit569_0[i][3]));
			}
		if(X_contra>0) L[569][0]=2;
		}
	//Check all rules of unit[569][1]
	L[569][1] = LargeX[569][0]>0 ? 1 : 0;
	satisfiable[569][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit569_1[i][0] ][ unit569_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit569_1[i][2] ][ unit569_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit569_1[i][4] ][ unit569_1[i][5] ] >0);
		X_contra = ( LargeX[569][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit569_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[569][0]=0; L[569][1]=1;}
			satisfiable[569][1]=satisfiable[569][1] & ((x[569] ^ 1) | (x[ unit569_1[i][0] ] ^ unit569_1[i][1]) |(x[ unit569_1[i][2] ] ^ unit569_1[i][3]));
			}
		if(X_contra>0) L[569][1]=2;
		}
	//Check all rules of unit[570][0]
	L[570][0] = LargeX[570][1]>0 ? 1 : 0;
	satisfiable[570][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit570_0[i][0] ][ unit570_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit570_0[i][2] ][ unit570_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit570_0[i][4] ][ unit570_0[i][5] ] >0);
		X_contra = ( LargeX[570][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit570_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[570][1]=0; L[570][0]=1;}
			satisfiable[570][0]=satisfiable[570][0] & ((x[570] ^ 0) | (x[ unit570_0[i][0] ] ^ unit570_0[i][1]) |(x[ unit570_0[i][2] ] ^ unit570_0[i][3]));
			}
		if(X_contra>0) L[570][0]=2;
		}
	//Check all rules of unit[570][1]
	L[570][1] = LargeX[570][0]>0 ? 1 : 0;
	satisfiable[570][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit570_1[i][0] ][ unit570_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit570_1[i][2] ][ unit570_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit570_1[i][4] ][ unit570_1[i][5] ] >0);
		X_contra = ( LargeX[570][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit570_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[570][0]=0; L[570][1]=1;}
			satisfiable[570][1]=satisfiable[570][1] & ((x[570] ^ 1) | (x[ unit570_1[i][0] ] ^ unit570_1[i][1]) |(x[ unit570_1[i][2] ] ^ unit570_1[i][3]));
			}
		if(X_contra>0) L[570][1]=2;
		}
	//Check all rules of unit[571][0]
	L[571][0] = LargeX[571][1]>0 ? 1 : 0;
	satisfiable[571][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit571_0[i][0] ][ unit571_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit571_0[i][2] ][ unit571_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit571_0[i][4] ][ unit571_0[i][5] ] >0);
		X_contra = ( LargeX[571][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit571_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[571][1]=0; L[571][0]=1;}
			satisfiable[571][0]=satisfiable[571][0] & ((x[571] ^ 0) | (x[ unit571_0[i][0] ] ^ unit571_0[i][1]) |(x[ unit571_0[i][2] ] ^ unit571_0[i][3]));
			}
		if(X_contra>0) L[571][0]=2;
		}
	//Check all rules of unit[571][1]
	L[571][1] = LargeX[571][0]>0 ? 1 : 0;
	satisfiable[571][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit571_1[i][0] ][ unit571_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit571_1[i][2] ][ unit571_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit571_1[i][4] ][ unit571_1[i][5] ] >0);
		X_contra = ( LargeX[571][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit571_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[571][0]=0; L[571][1]=1;}
			satisfiable[571][1]=satisfiable[571][1] & ((x[571] ^ 1) | (x[ unit571_1[i][0] ] ^ unit571_1[i][1]) |(x[ unit571_1[i][2] ] ^ unit571_1[i][3]));
			}
		if(X_contra>0) L[571][1]=2;
		}
	//Check all rules of unit[572][0]
	L[572][0] = LargeX[572][1]>0 ? 1 : 0;
	satisfiable[572][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit572_0[i][0] ][ unit572_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit572_0[i][2] ][ unit572_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit572_0[i][4] ][ unit572_0[i][5] ] >0);
		X_contra = ( LargeX[572][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit572_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[572][1]=0; L[572][0]=1;}
			satisfiable[572][0]=satisfiable[572][0] & ((x[572] ^ 0) | (x[ unit572_0[i][0] ] ^ unit572_0[i][1]) |(x[ unit572_0[i][2] ] ^ unit572_0[i][3]));
			}
		if(X_contra>0) L[572][0]=2;
		}
	//Check all rules of unit[572][1]
	L[572][1] = LargeX[572][0]>0 ? 1 : 0;
	satisfiable[572][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit572_1[i][0] ][ unit572_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit572_1[i][2] ][ unit572_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit572_1[i][4] ][ unit572_1[i][5] ] >0);
		X_contra = ( LargeX[572][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit572_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[572][0]=0; L[572][1]=1;}
			satisfiable[572][1]=satisfiable[572][1] & ((x[572] ^ 1) | (x[ unit572_1[i][0] ] ^ unit572_1[i][1]) |(x[ unit572_1[i][2] ] ^ unit572_1[i][3]));
			}
		if(X_contra>0) L[572][1]=2;
		}
	//Check all rules of unit[573][0]
	L[573][0] = LargeX[573][1]>0 ? 1 : 0;
	satisfiable[573][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit573_0[i][0] ][ unit573_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit573_0[i][2] ][ unit573_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit573_0[i][4] ][ unit573_0[i][5] ] >0);
		X_contra = ( LargeX[573][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit573_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[573][1]=0; L[573][0]=1;}
			satisfiable[573][0]=satisfiable[573][0] & ((x[573] ^ 0) | (x[ unit573_0[i][0] ] ^ unit573_0[i][1]) |(x[ unit573_0[i][2] ] ^ unit573_0[i][3]));
			}
		if(X_contra>0) L[573][0]=2;
		}
	//Check all rules of unit[573][1]
	L[573][1] = LargeX[573][0]>0 ? 1 : 0;
	satisfiable[573][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit573_1[i][0] ][ unit573_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit573_1[i][2] ][ unit573_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit573_1[i][4] ][ unit573_1[i][5] ] >0);
		X_contra = ( LargeX[573][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit573_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[573][0]=0; L[573][1]=1;}
			satisfiable[573][1]=satisfiable[573][1] & ((x[573] ^ 1) | (x[ unit573_1[i][0] ] ^ unit573_1[i][1]) |(x[ unit573_1[i][2] ] ^ unit573_1[i][3]));
			}
		if(X_contra>0) L[573][1]=2;
		}
	//Check all rules of unit[574][0]
	L[574][0] = LargeX[574][1]>0 ? 1 : 0;
	satisfiable[574][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit574_0[i][0] ][ unit574_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit574_0[i][2] ][ unit574_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit574_0[i][4] ][ unit574_0[i][5] ] >0);
		X_contra = ( LargeX[574][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit574_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[574][1]=0; L[574][0]=1;}
			satisfiable[574][0]=satisfiable[574][0] & ((x[574] ^ 0) | (x[ unit574_0[i][0] ] ^ unit574_0[i][1]) |(x[ unit574_0[i][2] ] ^ unit574_0[i][3]));
			}
		if(X_contra>0) L[574][0]=2;
		}
	//Check all rules of unit[574][1]
	L[574][1] = LargeX[574][0]>0 ? 1 : 0;
	satisfiable[574][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit574_1[i][0] ][ unit574_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit574_1[i][2] ][ unit574_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit574_1[i][4] ][ unit574_1[i][5] ] >0);
		X_contra = ( LargeX[574][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit574_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[574][0]=0; L[574][1]=1;}
			satisfiable[574][1]=satisfiable[574][1] & ((x[574] ^ 1) | (x[ unit574_1[i][0] ] ^ unit574_1[i][1]) |(x[ unit574_1[i][2] ] ^ unit574_1[i][3]));
			}
		if(X_contra>0) L[574][1]=2;
		}
	//Check all rules of unit[575][0]
	L[575][0] = LargeX[575][1]>0 ? 1 : 0;
	satisfiable[575][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit575_0[i][0] ][ unit575_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit575_0[i][2] ][ unit575_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit575_0[i][4] ][ unit575_0[i][5] ] >0);
		X_contra = ( LargeX[575][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit575_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[575][1]=0; L[575][0]=1;}
			satisfiable[575][0]=satisfiable[575][0] & ((x[575] ^ 0) | (x[ unit575_0[i][0] ] ^ unit575_0[i][1]) |(x[ unit575_0[i][2] ] ^ unit575_0[i][3]));
			}
		if(X_contra>0) L[575][0]=2;
		}
	//Check all rules of unit[575][1]
	L[575][1] = LargeX[575][0]>0 ? 1 : 0;
	satisfiable[575][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit575_1[i][0] ][ unit575_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit575_1[i][2] ][ unit575_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit575_1[i][4] ][ unit575_1[i][5] ] >0);
		X_contra = ( LargeX[575][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit575_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[575][0]=0; L[575][1]=1;}
			satisfiable[575][1]=satisfiable[575][1] & ((x[575] ^ 1) | (x[ unit575_1[i][0] ] ^ unit575_1[i][1]) |(x[ unit575_1[i][2] ] ^ unit575_1[i][3]));
			}
		if(X_contra>0) L[575][1]=2;
		}
	//Check all rules of unit[576][0]
	L[576][0] = LargeX[576][1]>0 ? 1 : 0;
	satisfiable[576][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit576_0[i][0] ][ unit576_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit576_0[i][2] ][ unit576_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit576_0[i][4] ][ unit576_0[i][5] ] >0);
		X_contra = ( LargeX[576][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit576_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[576][1]=0; L[576][0]=1;}
			satisfiable[576][0]=satisfiable[576][0] & ((x[576] ^ 0) | (x[ unit576_0[i][0] ] ^ unit576_0[i][1]) |(x[ unit576_0[i][2] ] ^ unit576_0[i][3]));
			}
		if(X_contra>0) L[576][0]=2;
		}
	//Check all rules of unit[576][1]
	L[576][1] = LargeX[576][0]>0 ? 1 : 0;
	satisfiable[576][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit576_1[i][0] ][ unit576_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit576_1[i][2] ][ unit576_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit576_1[i][4] ][ unit576_1[i][5] ] >0);
		X_contra = ( LargeX[576][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit576_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[576][0]=0; L[576][1]=1;}
			satisfiable[576][1]=satisfiable[576][1] & ((x[576] ^ 1) | (x[ unit576_1[i][0] ] ^ unit576_1[i][1]) |(x[ unit576_1[i][2] ] ^ unit576_1[i][3]));
			}
		if(X_contra>0) L[576][1]=2;
		}
	//Check all rules of unit[577][0]
	L[577][0] = LargeX[577][1]>0 ? 1 : 0;
	satisfiable[577][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit577_0[i][0] ][ unit577_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit577_0[i][2] ][ unit577_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit577_0[i][4] ][ unit577_0[i][5] ] >0);
		X_contra = ( LargeX[577][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit577_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[577][1]=0; L[577][0]=1;}
			satisfiable[577][0]=satisfiable[577][0] & ((x[577] ^ 0) | (x[ unit577_0[i][0] ] ^ unit577_0[i][1]) |(x[ unit577_0[i][2] ] ^ unit577_0[i][3]));
			}
		if(X_contra>0) L[577][0]=2;
		}
	//Check all rules of unit[577][1]
	L[577][1] = LargeX[577][0]>0 ? 1 : 0;
	satisfiable[577][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit577_1[i][0] ][ unit577_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit577_1[i][2] ][ unit577_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit577_1[i][4] ][ unit577_1[i][5] ] >0);
		X_contra = ( LargeX[577][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit577_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[577][0]=0; L[577][1]=1;}
			satisfiable[577][1]=satisfiable[577][1] & ((x[577] ^ 1) | (x[ unit577_1[i][0] ] ^ unit577_1[i][1]) |(x[ unit577_1[i][2] ] ^ unit577_1[i][3]));
			}
		if(X_contra>0) L[577][1]=2;
		}
	//Check all rules of unit[578][0]
	L[578][0] = LargeX[578][1]>0 ? 1 : 0;
	satisfiable[578][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit578_0[i][0] ][ unit578_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit578_0[i][2] ][ unit578_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit578_0[i][4] ][ unit578_0[i][5] ] >0);
		X_contra = ( LargeX[578][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit578_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[578][1]=0; L[578][0]=1;}
			satisfiable[578][0]=satisfiable[578][0] & ((x[578] ^ 0) | (x[ unit578_0[i][0] ] ^ unit578_0[i][1]) |(x[ unit578_0[i][2] ] ^ unit578_0[i][3]));
			}
		if(X_contra>0) L[578][0]=2;
		}
	//Check all rules of unit[578][1]
	L[578][1] = LargeX[578][0]>0 ? 1 : 0;
	satisfiable[578][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit578_1[i][0] ][ unit578_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit578_1[i][2] ][ unit578_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit578_1[i][4] ][ unit578_1[i][5] ] >0);
		X_contra = ( LargeX[578][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit578_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[578][0]=0; L[578][1]=1;}
			satisfiable[578][1]=satisfiable[578][1] & ((x[578] ^ 1) | (x[ unit578_1[i][0] ] ^ unit578_1[i][1]) |(x[ unit578_1[i][2] ] ^ unit578_1[i][3]));
			}
		if(X_contra>0) L[578][1]=2;
		}
	//Check all rules of unit[579][0]
	L[579][0] = LargeX[579][1]>0 ? 1 : 0;
	satisfiable[579][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit579_0[i][0] ][ unit579_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit579_0[i][2] ][ unit579_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit579_0[i][4] ][ unit579_0[i][5] ] >0);
		X_contra = ( LargeX[579][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit579_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[579][1]=0; L[579][0]=1;}
			satisfiable[579][0]=satisfiable[579][0] & ((x[579] ^ 0) | (x[ unit579_0[i][0] ] ^ unit579_0[i][1]) |(x[ unit579_0[i][2] ] ^ unit579_0[i][3]));
			}
		if(X_contra>0) L[579][0]=2;
		}
	//Check all rules of unit[579][1]
	L[579][1] = LargeX[579][0]>0 ? 1 : 0;
	satisfiable[579][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit579_1[i][0] ][ unit579_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit579_1[i][2] ][ unit579_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit579_1[i][4] ][ unit579_1[i][5] ] >0);
		X_contra = ( LargeX[579][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit579_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[579][0]=0; L[579][1]=1;}
			satisfiable[579][1]=satisfiable[579][1] & ((x[579] ^ 1) | (x[ unit579_1[i][0] ] ^ unit579_1[i][1]) |(x[ unit579_1[i][2] ] ^ unit579_1[i][3]));
			}
		if(X_contra>0) L[579][1]=2;
		}
	//Check all rules of unit[580][0]
	L[580][0] = LargeX[580][1]>0 ? 1 : 0;
	satisfiable[580][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit580_0[i][0] ][ unit580_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit580_0[i][2] ][ unit580_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit580_0[i][4] ][ unit580_0[i][5] ] >0);
		X_contra = ( LargeX[580][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit580_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[580][1]=0; L[580][0]=1;}
			satisfiable[580][0]=satisfiable[580][0] & ((x[580] ^ 0) | (x[ unit580_0[i][0] ] ^ unit580_0[i][1]) |(x[ unit580_0[i][2] ] ^ unit580_0[i][3]));
			}
		if(X_contra>0) L[580][0]=2;
		}
	//Check all rules of unit[580][1]
	L[580][1] = LargeX[580][0]>0 ? 1 : 0;
	satisfiable[580][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit580_1[i][0] ][ unit580_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit580_1[i][2] ][ unit580_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit580_1[i][4] ][ unit580_1[i][5] ] >0);
		X_contra = ( LargeX[580][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit580_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[580][0]=0; L[580][1]=1;}
			satisfiable[580][1]=satisfiable[580][1] & ((x[580] ^ 1) | (x[ unit580_1[i][0] ] ^ unit580_1[i][1]) |(x[ unit580_1[i][2] ] ^ unit580_1[i][3]));
			}
		if(X_contra>0) L[580][1]=2;
		}
	//Check all rules of unit[581][0]
	L[581][0] = LargeX[581][1]>0 ? 1 : 0;
	satisfiable[581][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit581_0[i][0] ][ unit581_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit581_0[i][2] ][ unit581_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit581_0[i][4] ][ unit581_0[i][5] ] >0);
		X_contra = ( LargeX[581][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit581_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[581][1]=0; L[581][0]=1;}
			satisfiable[581][0]=satisfiable[581][0] & ((x[581] ^ 0) | (x[ unit581_0[i][0] ] ^ unit581_0[i][1]) |(x[ unit581_0[i][2] ] ^ unit581_0[i][3]));
			}
		if(X_contra>0) L[581][0]=2;
		}
	//Check all rules of unit[581][1]
	L[581][1] = LargeX[581][0]>0 ? 1 : 0;
	satisfiable[581][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit581_1[i][0] ][ unit581_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit581_1[i][2] ][ unit581_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit581_1[i][4] ][ unit581_1[i][5] ] >0);
		X_contra = ( LargeX[581][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit581_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[581][0]=0; L[581][1]=1;}
			satisfiable[581][1]=satisfiable[581][1] & ((x[581] ^ 1) | (x[ unit581_1[i][0] ] ^ unit581_1[i][1]) |(x[ unit581_1[i][2] ] ^ unit581_1[i][3]));
			}
		if(X_contra>0) L[581][1]=2;
		}
	//Check all rules of unit[582][0]
	L[582][0] = LargeX[582][1]>0 ? 1 : 0;
	satisfiable[582][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit582_0[i][0] ][ unit582_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit582_0[i][2] ][ unit582_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit582_0[i][4] ][ unit582_0[i][5] ] >0);
		X_contra = ( LargeX[582][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit582_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[582][1]=0; L[582][0]=1;}
			satisfiable[582][0]=satisfiable[582][0] & ((x[582] ^ 0) | (x[ unit582_0[i][0] ] ^ unit582_0[i][1]) |(x[ unit582_0[i][2] ] ^ unit582_0[i][3]));
			}
		if(X_contra>0) L[582][0]=2;
		}
	//Check all rules of unit[582][1]
	L[582][1] = LargeX[582][0]>0 ? 1 : 0;
	satisfiable[582][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit582_1[i][0] ][ unit582_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit582_1[i][2] ][ unit582_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit582_1[i][4] ][ unit582_1[i][5] ] >0);
		X_contra = ( LargeX[582][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit582_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[582][0]=0; L[582][1]=1;}
			satisfiable[582][1]=satisfiable[582][1] & ((x[582] ^ 1) | (x[ unit582_1[i][0] ] ^ unit582_1[i][1]) |(x[ unit582_1[i][2] ] ^ unit582_1[i][3]));
			}
		if(X_contra>0) L[582][1]=2;
		}
	//Check all rules of unit[583][0]
	L[583][0] = LargeX[583][1]>0 ? 1 : 0;
	satisfiable[583][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit583_0[i][0] ][ unit583_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit583_0[i][2] ][ unit583_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit583_0[i][4] ][ unit583_0[i][5] ] >0);
		X_contra = ( LargeX[583][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit583_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[583][1]=0; L[583][0]=1;}
			satisfiable[583][0]=satisfiable[583][0] & ((x[583] ^ 0) | (x[ unit583_0[i][0] ] ^ unit583_0[i][1]) |(x[ unit583_0[i][2] ] ^ unit583_0[i][3]));
			}
		if(X_contra>0) L[583][0]=2;
		}
	//Check all rules of unit[583][1]
	L[583][1] = LargeX[583][0]>0 ? 1 : 0;
	satisfiable[583][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit583_1[i][0] ][ unit583_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit583_1[i][2] ][ unit583_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit583_1[i][4] ][ unit583_1[i][5] ] >0);
		X_contra = ( LargeX[583][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit583_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[583][0]=0; L[583][1]=1;}
			satisfiable[583][1]=satisfiable[583][1] & ((x[583] ^ 1) | (x[ unit583_1[i][0] ] ^ unit583_1[i][1]) |(x[ unit583_1[i][2] ] ^ unit583_1[i][3]));
			}
		if(X_contra>0) L[583][1]=2;
		}
	//Check all rules of unit[584][0]
	L[584][0] = LargeX[584][1]>0 ? 1 : 0;
	satisfiable[584][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit584_0[i][0] ][ unit584_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit584_0[i][2] ][ unit584_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit584_0[i][4] ][ unit584_0[i][5] ] >0);
		X_contra = ( LargeX[584][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit584_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[584][1]=0; L[584][0]=1;}
			satisfiable[584][0]=satisfiable[584][0] & ((x[584] ^ 0) | (x[ unit584_0[i][0] ] ^ unit584_0[i][1]) |(x[ unit584_0[i][2] ] ^ unit584_0[i][3]));
			}
		if(X_contra>0) L[584][0]=2;
		}
	//Check all rules of unit[584][1]
	L[584][1] = LargeX[584][0]>0 ? 1 : 0;
	satisfiable[584][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit584_1[i][0] ][ unit584_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit584_1[i][2] ][ unit584_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit584_1[i][4] ][ unit584_1[i][5] ] >0);
		X_contra = ( LargeX[584][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit584_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[584][0]=0; L[584][1]=1;}
			satisfiable[584][1]=satisfiable[584][1] & ((x[584] ^ 1) | (x[ unit584_1[i][0] ] ^ unit584_1[i][1]) |(x[ unit584_1[i][2] ] ^ unit584_1[i][3]));
			}
		if(X_contra>0) L[584][1]=2;
		}
	//Check all rules of unit[585][0]
	L[585][0] = LargeX[585][1]>0 ? 1 : 0;
	satisfiable[585][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit585_0[i][0] ][ unit585_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit585_0[i][2] ][ unit585_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit585_0[i][4] ][ unit585_0[i][5] ] >0);
		X_contra = ( LargeX[585][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit585_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[585][1]=0; L[585][0]=1;}
			satisfiable[585][0]=satisfiable[585][0] & ((x[585] ^ 0) | (x[ unit585_0[i][0] ] ^ unit585_0[i][1]) |(x[ unit585_0[i][2] ] ^ unit585_0[i][3]));
			}
		if(X_contra>0) L[585][0]=2;
		}
	//Check all rules of unit[585][1]
	L[585][1] = LargeX[585][0]>0 ? 1 : 0;
	satisfiable[585][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit585_1[i][0] ][ unit585_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit585_1[i][2] ][ unit585_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit585_1[i][4] ][ unit585_1[i][5] ] >0);
		X_contra = ( LargeX[585][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit585_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[585][0]=0; L[585][1]=1;}
			satisfiable[585][1]=satisfiable[585][1] & ((x[585] ^ 1) | (x[ unit585_1[i][0] ] ^ unit585_1[i][1]) |(x[ unit585_1[i][2] ] ^ unit585_1[i][3]));
			}
		if(X_contra>0) L[585][1]=2;
		}
	//Check all rules of unit[586][0]
	L[586][0] = LargeX[586][1]>0 ? 1 : 0;
	satisfiable[586][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit586_0[i][0] ][ unit586_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit586_0[i][2] ][ unit586_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit586_0[i][4] ][ unit586_0[i][5] ] >0);
		X_contra = ( LargeX[586][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit586_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[586][1]=0; L[586][0]=1;}
			satisfiable[586][0]=satisfiable[586][0] & ((x[586] ^ 0) | (x[ unit586_0[i][0] ] ^ unit586_0[i][1]) |(x[ unit586_0[i][2] ] ^ unit586_0[i][3]));
			}
		if(X_contra>0) L[586][0]=2;
		}
	//Check all rules of unit[586][1]
	L[586][1] = LargeX[586][0]>0 ? 1 : 0;
	satisfiable[586][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit586_1[i][0] ][ unit586_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit586_1[i][2] ][ unit586_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit586_1[i][4] ][ unit586_1[i][5] ] >0);
		X_contra = ( LargeX[586][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit586_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[586][0]=0; L[586][1]=1;}
			satisfiable[586][1]=satisfiable[586][1] & ((x[586] ^ 1) | (x[ unit586_1[i][0] ] ^ unit586_1[i][1]) |(x[ unit586_1[i][2] ] ^ unit586_1[i][3]));
			}
		if(X_contra>0) L[586][1]=2;
		}
	//Check all rules of unit[587][0]
	L[587][0] = LargeX[587][1]>0 ? 1 : 0;
	satisfiable[587][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit587_0[i][0] ][ unit587_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit587_0[i][2] ][ unit587_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit587_0[i][4] ][ unit587_0[i][5] ] >0);
		X_contra = ( LargeX[587][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit587_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[587][1]=0; L[587][0]=1;}
			satisfiable[587][0]=satisfiable[587][0] & ((x[587] ^ 0) | (x[ unit587_0[i][0] ] ^ unit587_0[i][1]) |(x[ unit587_0[i][2] ] ^ unit587_0[i][3]));
			}
		if(X_contra>0) L[587][0]=2;
		}
	//Check all rules of unit[587][1]
	L[587][1] = LargeX[587][0]>0 ? 1 : 0;
	satisfiable[587][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit587_1[i][0] ][ unit587_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit587_1[i][2] ][ unit587_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit587_1[i][4] ][ unit587_1[i][5] ] >0);
		X_contra = ( LargeX[587][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit587_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[587][0]=0; L[587][1]=1;}
			satisfiable[587][1]=satisfiable[587][1] & ((x[587] ^ 1) | (x[ unit587_1[i][0] ] ^ unit587_1[i][1]) |(x[ unit587_1[i][2] ] ^ unit587_1[i][3]));
			}
		if(X_contra>0) L[587][1]=2;
		}
	//Check all rules of unit[588][0]
	L[588][0] = LargeX[588][1]>0 ? 1 : 0;
	satisfiable[588][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit588_0[i][0] ][ unit588_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit588_0[i][2] ][ unit588_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit588_0[i][4] ][ unit588_0[i][5] ] >0);
		X_contra = ( LargeX[588][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit588_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[588][1]=0; L[588][0]=1;}
			satisfiable[588][0]=satisfiable[588][0] & ((x[588] ^ 0) | (x[ unit588_0[i][0] ] ^ unit588_0[i][1]) |(x[ unit588_0[i][2] ] ^ unit588_0[i][3]));
			}
		if(X_contra>0) L[588][0]=2;
		}
	//Check all rules of unit[588][1]
	L[588][1] = LargeX[588][0]>0 ? 1 : 0;
	satisfiable[588][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit588_1[i][0] ][ unit588_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit588_1[i][2] ][ unit588_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit588_1[i][4] ][ unit588_1[i][5] ] >0);
		X_contra = ( LargeX[588][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit588_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[588][0]=0; L[588][1]=1;}
			satisfiable[588][1]=satisfiable[588][1] & ((x[588] ^ 1) | (x[ unit588_1[i][0] ] ^ unit588_1[i][1]) |(x[ unit588_1[i][2] ] ^ unit588_1[i][3]));
			}
		if(X_contra>0) L[588][1]=2;
		}
	//Check all rules of unit[589][0]
	L[589][0] = LargeX[589][1]>0 ? 1 : 0;
	satisfiable[589][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit589_0[i][0] ][ unit589_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit589_0[i][2] ][ unit589_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit589_0[i][4] ][ unit589_0[i][5] ] >0);
		X_contra = ( LargeX[589][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit589_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[589][1]=0; L[589][0]=1;}
			satisfiable[589][0]=satisfiable[589][0] & ((x[589] ^ 0) | (x[ unit589_0[i][0] ] ^ unit589_0[i][1]) |(x[ unit589_0[i][2] ] ^ unit589_0[i][3]));
			}
		if(X_contra>0) L[589][0]=2;
		}
	//Check all rules of unit[589][1]
	L[589][1] = LargeX[589][0]>0 ? 1 : 0;
	satisfiable[589][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit589_1[i][0] ][ unit589_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit589_1[i][2] ][ unit589_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit589_1[i][4] ][ unit589_1[i][5] ] >0);
		X_contra = ( LargeX[589][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit589_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[589][0]=0; L[589][1]=1;}
			satisfiable[589][1]=satisfiable[589][1] & ((x[589] ^ 1) | (x[ unit589_1[i][0] ] ^ unit589_1[i][1]) |(x[ unit589_1[i][2] ] ^ unit589_1[i][3]));
			}
		if(X_contra>0) L[589][1]=2;
		}
	//Check all rules of unit[590][0]
	L[590][0] = LargeX[590][1]>0 ? 1 : 0;
	satisfiable[590][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit590_0[i][0] ][ unit590_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit590_0[i][2] ][ unit590_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit590_0[i][4] ][ unit590_0[i][5] ] >0);
		X_contra = ( LargeX[590][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit590_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[590][1]=0; L[590][0]=1;}
			satisfiable[590][0]=satisfiable[590][0] & ((x[590] ^ 0) | (x[ unit590_0[i][0] ] ^ unit590_0[i][1]) |(x[ unit590_0[i][2] ] ^ unit590_0[i][3]));
			}
		if(X_contra>0) L[590][0]=2;
		}
	//Check all rules of unit[590][1]
	L[590][1] = LargeX[590][0]>0 ? 1 : 0;
	satisfiable[590][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit590_1[i][0] ][ unit590_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit590_1[i][2] ][ unit590_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit590_1[i][4] ][ unit590_1[i][5] ] >0);
		X_contra = ( LargeX[590][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit590_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[590][0]=0; L[590][1]=1;}
			satisfiable[590][1]=satisfiable[590][1] & ((x[590] ^ 1) | (x[ unit590_1[i][0] ] ^ unit590_1[i][1]) |(x[ unit590_1[i][2] ] ^ unit590_1[i][3]));
			}
		if(X_contra>0) L[590][1]=2;
		}
	//Check all rules of unit[591][0]
	L[591][0] = LargeX[591][1]>0 ? 1 : 0;
	satisfiable[591][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit591_0[i][0] ][ unit591_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit591_0[i][2] ][ unit591_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit591_0[i][4] ][ unit591_0[i][5] ] >0);
		X_contra = ( LargeX[591][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit591_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[591][1]=0; L[591][0]=1;}
			satisfiable[591][0]=satisfiable[591][0] & ((x[591] ^ 0) | (x[ unit591_0[i][0] ] ^ unit591_0[i][1]) |(x[ unit591_0[i][2] ] ^ unit591_0[i][3]));
			}
		if(X_contra>0) L[591][0]=2;
		}
	//Check all rules of unit[591][1]
	L[591][1] = LargeX[591][0]>0 ? 1 : 0;
	satisfiable[591][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit591_1[i][0] ][ unit591_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit591_1[i][2] ][ unit591_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit591_1[i][4] ][ unit591_1[i][5] ] >0);
		X_contra = ( LargeX[591][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit591_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[591][0]=0; L[591][1]=1;}
			satisfiable[591][1]=satisfiable[591][1] & ((x[591] ^ 1) | (x[ unit591_1[i][0] ] ^ unit591_1[i][1]) |(x[ unit591_1[i][2] ] ^ unit591_1[i][3]));
			}
		if(X_contra>0) L[591][1]=2;
		}
	//Check all rules of unit[592][0]
	L[592][0] = LargeX[592][1]>0 ? 1 : 0;
	satisfiable[592][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit592_0[i][0] ][ unit592_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit592_0[i][2] ][ unit592_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit592_0[i][4] ][ unit592_0[i][5] ] >0);
		X_contra = ( LargeX[592][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit592_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[592][1]=0; L[592][0]=1;}
			satisfiable[592][0]=satisfiable[592][0] & ((x[592] ^ 0) | (x[ unit592_0[i][0] ] ^ unit592_0[i][1]) |(x[ unit592_0[i][2] ] ^ unit592_0[i][3]));
			}
		if(X_contra>0) L[592][0]=2;
		}
	//Check all rules of unit[592][1]
	L[592][1] = LargeX[592][0]>0 ? 1 : 0;
	satisfiable[592][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit592_1[i][0] ][ unit592_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit592_1[i][2] ][ unit592_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit592_1[i][4] ][ unit592_1[i][5] ] >0);
		X_contra = ( LargeX[592][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit592_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[592][0]=0; L[592][1]=1;}
			satisfiable[592][1]=satisfiable[592][1] & ((x[592] ^ 1) | (x[ unit592_1[i][0] ] ^ unit592_1[i][1]) |(x[ unit592_1[i][2] ] ^ unit592_1[i][3]));
			}
		if(X_contra>0) L[592][1]=2;
		}
	//Check all rules of unit[593][0]
	L[593][0] = LargeX[593][1]>0 ? 1 : 0;
	satisfiable[593][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit593_0[i][0] ][ unit593_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit593_0[i][2] ][ unit593_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit593_0[i][4] ][ unit593_0[i][5] ] >0);
		X_contra = ( LargeX[593][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit593_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[593][1]=0; L[593][0]=1;}
			satisfiable[593][0]=satisfiable[593][0] & ((x[593] ^ 0) | (x[ unit593_0[i][0] ] ^ unit593_0[i][1]) |(x[ unit593_0[i][2] ] ^ unit593_0[i][3]));
			}
		if(X_contra>0) L[593][0]=2;
		}
	//Check all rules of unit[593][1]
	L[593][1] = LargeX[593][0]>0 ? 1 : 0;
	satisfiable[593][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit593_1[i][0] ][ unit593_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit593_1[i][2] ][ unit593_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit593_1[i][4] ][ unit593_1[i][5] ] >0);
		X_contra = ( LargeX[593][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit593_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[593][0]=0; L[593][1]=1;}
			satisfiable[593][1]=satisfiable[593][1] & ((x[593] ^ 1) | (x[ unit593_1[i][0] ] ^ unit593_1[i][1]) |(x[ unit593_1[i][2] ] ^ unit593_1[i][3]));
			}
		if(X_contra>0) L[593][1]=2;
		}
	//Check all rules of unit[594][0]
	L[594][0] = LargeX[594][1]>0 ? 1 : 0;
	satisfiable[594][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit594_0[i][0] ][ unit594_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit594_0[i][2] ][ unit594_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit594_0[i][4] ][ unit594_0[i][5] ] >0);
		X_contra = ( LargeX[594][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit594_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[594][1]=0; L[594][0]=1;}
			satisfiable[594][0]=satisfiable[594][0] & ((x[594] ^ 0) | (x[ unit594_0[i][0] ] ^ unit594_0[i][1]) |(x[ unit594_0[i][2] ] ^ unit594_0[i][3]));
			}
		if(X_contra>0) L[594][0]=2;
		}
	//Check all rules of unit[594][1]
	L[594][1] = LargeX[594][0]>0 ? 1 : 0;
	satisfiable[594][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit594_1[i][0] ][ unit594_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit594_1[i][2] ][ unit594_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit594_1[i][4] ][ unit594_1[i][5] ] >0);
		X_contra = ( LargeX[594][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit594_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[594][0]=0; L[594][1]=1;}
			satisfiable[594][1]=satisfiable[594][1] & ((x[594] ^ 1) | (x[ unit594_1[i][0] ] ^ unit594_1[i][1]) |(x[ unit594_1[i][2] ] ^ unit594_1[i][3]));
			}
		if(X_contra>0) L[594][1]=2;
		}
	//Check all rules of unit[595][0]
	L[595][0] = LargeX[595][1]>0 ? 1 : 0;
	satisfiable[595][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit595_0[i][0] ][ unit595_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit595_0[i][2] ][ unit595_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit595_0[i][4] ][ unit595_0[i][5] ] >0);
		X_contra = ( LargeX[595][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit595_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[595][1]=0; L[595][0]=1;}
			satisfiable[595][0]=satisfiable[595][0] & ((x[595] ^ 0) | (x[ unit595_0[i][0] ] ^ unit595_0[i][1]) |(x[ unit595_0[i][2] ] ^ unit595_0[i][3]));
			}
		if(X_contra>0) L[595][0]=2;
		}
	//Check all rules of unit[595][1]
	L[595][1] = LargeX[595][0]>0 ? 1 : 0;
	satisfiable[595][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit595_1[i][0] ][ unit595_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit595_1[i][2] ][ unit595_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit595_1[i][4] ][ unit595_1[i][5] ] >0);
		X_contra = ( LargeX[595][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit595_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[595][0]=0; L[595][1]=1;}
			satisfiable[595][1]=satisfiable[595][1] & ((x[595] ^ 1) | (x[ unit595_1[i][0] ] ^ unit595_1[i][1]) |(x[ unit595_1[i][2] ] ^ unit595_1[i][3]));
			}
		if(X_contra>0) L[595][1]=2;
		}
	//Check all rules of unit[596][0]
	L[596][0] = LargeX[596][1]>0 ? 1 : 0;
	satisfiable[596][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit596_0[i][0] ][ unit596_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit596_0[i][2] ][ unit596_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit596_0[i][4] ][ unit596_0[i][5] ] >0);
		X_contra = ( LargeX[596][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit596_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[596][1]=0; L[596][0]=1;}
			satisfiable[596][0]=satisfiable[596][0] & ((x[596] ^ 0) | (x[ unit596_0[i][0] ] ^ unit596_0[i][1]) |(x[ unit596_0[i][2] ] ^ unit596_0[i][3]));
			}
		if(X_contra>0) L[596][0]=2;
		}
	//Check all rules of unit[596][1]
	L[596][1] = LargeX[596][0]>0 ? 1 : 0;
	satisfiable[596][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit596_1[i][0] ][ unit596_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit596_1[i][2] ][ unit596_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit596_1[i][4] ][ unit596_1[i][5] ] >0);
		X_contra = ( LargeX[596][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit596_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[596][0]=0; L[596][1]=1;}
			satisfiable[596][1]=satisfiable[596][1] & ((x[596] ^ 1) | (x[ unit596_1[i][0] ] ^ unit596_1[i][1]) |(x[ unit596_1[i][2] ] ^ unit596_1[i][3]));
			}
		if(X_contra>0) L[596][1]=2;
		}
	//Check all rules of unit[597][0]
	L[597][0] = LargeX[597][1]>0 ? 1 : 0;
	satisfiable[597][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit597_0[i][0] ][ unit597_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit597_0[i][2] ][ unit597_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit597_0[i][4] ][ unit597_0[i][5] ] >0);
		X_contra = ( LargeX[597][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit597_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[597][1]=0; L[597][0]=1;}
			satisfiable[597][0]=satisfiable[597][0] & ((x[597] ^ 0) | (x[ unit597_0[i][0] ] ^ unit597_0[i][1]) |(x[ unit597_0[i][2] ] ^ unit597_0[i][3]));
			}
		if(X_contra>0) L[597][0]=2;
		}
	//Check all rules of unit[597][1]
	L[597][1] = LargeX[597][0]>0 ? 1 : 0;
	satisfiable[597][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit597_1[i][0] ][ unit597_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit597_1[i][2] ][ unit597_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit597_1[i][4] ][ unit597_1[i][5] ] >0);
		X_contra = ( LargeX[597][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit597_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[597][0]=0; L[597][1]=1;}
			satisfiable[597][1]=satisfiable[597][1] & ((x[597] ^ 1) | (x[ unit597_1[i][0] ] ^ unit597_1[i][1]) |(x[ unit597_1[i][2] ] ^ unit597_1[i][3]));
			}
		if(X_contra>0) L[597][1]=2;
		}
	//Check all rules of unit[598][0]
	L[598][0] = LargeX[598][1]>0 ? 1 : 0;
	satisfiable[598][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit598_0[i][0] ][ unit598_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit598_0[i][2] ][ unit598_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit598_0[i][4] ][ unit598_0[i][5] ] >0);
		X_contra = ( LargeX[598][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit598_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[598][1]=0; L[598][0]=1;}
			satisfiable[598][0]=satisfiable[598][0] & ((x[598] ^ 0) | (x[ unit598_0[i][0] ] ^ unit598_0[i][1]) |(x[ unit598_0[i][2] ] ^ unit598_0[i][3]));
			}
		if(X_contra>0) L[598][0]=2;
		}
	//Check all rules of unit[598][1]
	L[598][1] = LargeX[598][0]>0 ? 1 : 0;
	satisfiable[598][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit598_1[i][0] ][ unit598_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit598_1[i][2] ][ unit598_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit598_1[i][4] ][ unit598_1[i][5] ] >0);
		X_contra = ( LargeX[598][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit598_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[598][0]=0; L[598][1]=1;}
			satisfiable[598][1]=satisfiable[598][1] & ((x[598] ^ 1) | (x[ unit598_1[i][0] ] ^ unit598_1[i][1]) |(x[ unit598_1[i][2] ] ^ unit598_1[i][3]));
			}
		if(X_contra>0) L[598][1]=2;
		}
	//Check all rules of unit[599][0]
	L[599][0] = LargeX[599][1]>0 ? 1 : 0;
	satisfiable[599][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit599_0[i][0] ][ unit599_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit599_0[i][2] ][ unit599_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit599_0[i][4] ][ unit599_0[i][5] ] >0);
		X_contra = ( LargeX[599][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit599_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[599][1]=0; L[599][0]=1;}
			satisfiable[599][0]=satisfiable[599][0] & ((x[599] ^ 0) | (x[ unit599_0[i][0] ] ^ unit599_0[i][1]) |(x[ unit599_0[i][2] ] ^ unit599_0[i][3]));
			}
		if(X_contra>0) L[599][0]=2;
		}
	//Check all rules of unit[599][1]
	L[599][1] = LargeX[599][0]>0 ? 1 : 0;
	satisfiable[599][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit599_1[i][0] ][ unit599_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit599_1[i][2] ][ unit599_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit599_1[i][4] ][ unit599_1[i][5] ] >0);
		X_contra = ( LargeX[599][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit599_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[599][0]=0; L[599][1]=1;}
			satisfiable[599][1]=satisfiable[599][1] & ((x[599] ^ 1) | (x[ unit599_1[i][0] ] ^ unit599_1[i][1]) |(x[ unit599_1[i][2] ] ^ unit599_1[i][3]));
			}
		if(X_contra>0) L[599][1]=2;
		}
	//Check all rules of unit[600][0]
	L[600][0] = LargeX[600][1]>0 ? 1 : 0;
	satisfiable[600][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit600_0[i][0] ][ unit600_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit600_0[i][2] ][ unit600_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit600_0[i][4] ][ unit600_0[i][5] ] >0);
		X_contra = ( LargeX[600][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit600_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[600][1]=0; L[600][0]=1;}
			satisfiable[600][0]=satisfiable[600][0] & ((x[600] ^ 0) | (x[ unit600_0[i][0] ] ^ unit600_0[i][1]) |(x[ unit600_0[i][2] ] ^ unit600_0[i][3]));
			}
		if(X_contra>0) L[600][0]=2;
		}
	//Check all rules of unit[600][1]
	L[600][1] = LargeX[600][0]>0 ? 1 : 0;
	satisfiable[600][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit600_1[i][0] ][ unit600_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit600_1[i][2] ][ unit600_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit600_1[i][4] ][ unit600_1[i][5] ] >0);
		X_contra = ( LargeX[600][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit600_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[600][0]=0; L[600][1]=1;}
			satisfiable[600][1]=satisfiable[600][1] & ((x[600] ^ 1) | (x[ unit600_1[i][0] ] ^ unit600_1[i][1]) |(x[ unit600_1[i][2] ] ^ unit600_1[i][3]));
			}
		if(X_contra>0) L[600][1]=2;
		}
	//Check all rules of unit[601][0]
	L[601][0] = LargeX[601][1]>0 ? 1 : 0;
	satisfiable[601][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit601_0[i][0] ][ unit601_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit601_0[i][2] ][ unit601_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit601_0[i][4] ][ unit601_0[i][5] ] >0);
		X_contra = ( LargeX[601][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit601_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[601][1]=0; L[601][0]=1;}
			satisfiable[601][0]=satisfiable[601][0] & ((x[601] ^ 0) | (x[ unit601_0[i][0] ] ^ unit601_0[i][1]) |(x[ unit601_0[i][2] ] ^ unit601_0[i][3]));
			}
		if(X_contra>0) L[601][0]=2;
		}
	//Check all rules of unit[601][1]
	L[601][1] = LargeX[601][0]>0 ? 1 : 0;
	satisfiable[601][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit601_1[i][0] ][ unit601_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit601_1[i][2] ][ unit601_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit601_1[i][4] ][ unit601_1[i][5] ] >0);
		X_contra = ( LargeX[601][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit601_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[601][0]=0; L[601][1]=1;}
			satisfiable[601][1]=satisfiable[601][1] & ((x[601] ^ 1) | (x[ unit601_1[i][0] ] ^ unit601_1[i][1]) |(x[ unit601_1[i][2] ] ^ unit601_1[i][3]));
			}
		if(X_contra>0) L[601][1]=2;
		}
	//Check all rules of unit[602][0]
	L[602][0] = LargeX[602][1]>0 ? 1 : 0;
	satisfiable[602][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit602_0[i][0] ][ unit602_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit602_0[i][2] ][ unit602_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit602_0[i][4] ][ unit602_0[i][5] ] >0);
		X_contra = ( LargeX[602][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit602_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[602][1]=0; L[602][0]=1;}
			satisfiable[602][0]=satisfiable[602][0] & ((x[602] ^ 0) | (x[ unit602_0[i][0] ] ^ unit602_0[i][1]) |(x[ unit602_0[i][2] ] ^ unit602_0[i][3]));
			}
		if(X_contra>0) L[602][0]=2;
		}
	//Check all rules of unit[602][1]
	L[602][1] = LargeX[602][0]>0 ? 1 : 0;
	satisfiable[602][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit602_1[i][0] ][ unit602_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit602_1[i][2] ][ unit602_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit602_1[i][4] ][ unit602_1[i][5] ] >0);
		X_contra = ( LargeX[602][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit602_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[602][0]=0; L[602][1]=1;}
			satisfiable[602][1]=satisfiable[602][1] & ((x[602] ^ 1) | (x[ unit602_1[i][0] ] ^ unit602_1[i][1]) |(x[ unit602_1[i][2] ] ^ unit602_1[i][3]));
			}
		if(X_contra>0) L[602][1]=2;
		}
	//Check all rules of unit[603][0]
	L[603][0] = LargeX[603][1]>0 ? 1 : 0;
	satisfiable[603][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit603_0[i][0] ][ unit603_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit603_0[i][2] ][ unit603_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit603_0[i][4] ][ unit603_0[i][5] ] >0);
		X_contra = ( LargeX[603][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit603_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[603][1]=0; L[603][0]=1;}
			satisfiable[603][0]=satisfiable[603][0] & ((x[603] ^ 0) | (x[ unit603_0[i][0] ] ^ unit603_0[i][1]) |(x[ unit603_0[i][2] ] ^ unit603_0[i][3]));
			}
		if(X_contra>0) L[603][0]=2;
		}
	//Check all rules of unit[603][1]
	L[603][1] = LargeX[603][0]>0 ? 1 : 0;
	satisfiable[603][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit603_1[i][0] ][ unit603_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit603_1[i][2] ][ unit603_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit603_1[i][4] ][ unit603_1[i][5] ] >0);
		X_contra = ( LargeX[603][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit603_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[603][0]=0; L[603][1]=1;}
			satisfiable[603][1]=satisfiable[603][1] & ((x[603] ^ 1) | (x[ unit603_1[i][0] ] ^ unit603_1[i][1]) |(x[ unit603_1[i][2] ] ^ unit603_1[i][3]));
			}
		if(X_contra>0) L[603][1]=2;
		}
	//Check all rules of unit[604][0]
	L[604][0] = LargeX[604][1]>0 ? 1 : 0;
	satisfiable[604][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit604_0[i][0] ][ unit604_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit604_0[i][2] ][ unit604_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit604_0[i][4] ][ unit604_0[i][5] ] >0);
		X_contra = ( LargeX[604][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit604_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[604][1]=0; L[604][0]=1;}
			satisfiable[604][0]=satisfiable[604][0] & ((x[604] ^ 0) | (x[ unit604_0[i][0] ] ^ unit604_0[i][1]) |(x[ unit604_0[i][2] ] ^ unit604_0[i][3]));
			}
		if(X_contra>0) L[604][0]=2;
		}
	//Check all rules of unit[604][1]
	L[604][1] = LargeX[604][0]>0 ? 1 : 0;
	satisfiable[604][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit604_1[i][0] ][ unit604_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit604_1[i][2] ][ unit604_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit604_1[i][4] ][ unit604_1[i][5] ] >0);
		X_contra = ( LargeX[604][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit604_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[604][0]=0; L[604][1]=1;}
			satisfiable[604][1]=satisfiable[604][1] & ((x[604] ^ 1) | (x[ unit604_1[i][0] ] ^ unit604_1[i][1]) |(x[ unit604_1[i][2] ] ^ unit604_1[i][3]));
			}
		if(X_contra>0) L[604][1]=2;
		}
	//Check all rules of unit[605][0]
	L[605][0] = LargeX[605][1]>0 ? 1 : 0;
	satisfiable[605][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit605_0[i][0] ][ unit605_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit605_0[i][2] ][ unit605_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit605_0[i][4] ][ unit605_0[i][5] ] >0);
		X_contra = ( LargeX[605][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit605_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[605][1]=0; L[605][0]=1;}
			satisfiable[605][0]=satisfiable[605][0] & ((x[605] ^ 0) | (x[ unit605_0[i][0] ] ^ unit605_0[i][1]) |(x[ unit605_0[i][2] ] ^ unit605_0[i][3]));
			}
		if(X_contra>0) L[605][0]=2;
		}
	//Check all rules of unit[605][1]
	L[605][1] = LargeX[605][0]>0 ? 1 : 0;
	satisfiable[605][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit605_1[i][0] ][ unit605_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit605_1[i][2] ][ unit605_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit605_1[i][4] ][ unit605_1[i][5] ] >0);
		X_contra = ( LargeX[605][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit605_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[605][0]=0; L[605][1]=1;}
			satisfiable[605][1]=satisfiable[605][1] & ((x[605] ^ 1) | (x[ unit605_1[i][0] ] ^ unit605_1[i][1]) |(x[ unit605_1[i][2] ] ^ unit605_1[i][3]));
			}
		if(X_contra>0) L[605][1]=2;
		}
	//Check all rules of unit[606][0]
	L[606][0] = LargeX[606][1]>0 ? 1 : 0;
	satisfiable[606][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit606_0[i][0] ][ unit606_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit606_0[i][2] ][ unit606_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit606_0[i][4] ][ unit606_0[i][5] ] >0);
		X_contra = ( LargeX[606][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit606_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[606][1]=0; L[606][0]=1;}
			satisfiable[606][0]=satisfiable[606][0] & ((x[606] ^ 0) | (x[ unit606_0[i][0] ] ^ unit606_0[i][1]) |(x[ unit606_0[i][2] ] ^ unit606_0[i][3]));
			}
		if(X_contra>0) L[606][0]=2;
		}
	//Check all rules of unit[606][1]
	L[606][1] = LargeX[606][0]>0 ? 1 : 0;
	satisfiable[606][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit606_1[i][0] ][ unit606_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit606_1[i][2] ][ unit606_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit606_1[i][4] ][ unit606_1[i][5] ] >0);
		X_contra = ( LargeX[606][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit606_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[606][0]=0; L[606][1]=1;}
			satisfiable[606][1]=satisfiable[606][1] & ((x[606] ^ 1) | (x[ unit606_1[i][0] ] ^ unit606_1[i][1]) |(x[ unit606_1[i][2] ] ^ unit606_1[i][3]));
			}
		if(X_contra>0) L[606][1]=2;
		}
	//Check all rules of unit[607][0]
	L[607][0] = LargeX[607][1]>0 ? 1 : 0;
	satisfiable[607][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit607_0[i][0] ][ unit607_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit607_0[i][2] ][ unit607_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit607_0[i][4] ][ unit607_0[i][5] ] >0);
		X_contra = ( LargeX[607][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit607_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[607][1]=0; L[607][0]=1;}
			satisfiable[607][0]=satisfiable[607][0] & ((x[607] ^ 0) | (x[ unit607_0[i][0] ] ^ unit607_0[i][1]) |(x[ unit607_0[i][2] ] ^ unit607_0[i][3]));
			}
		if(X_contra>0) L[607][0]=2;
		}
	//Check all rules of unit[607][1]
	L[607][1] = LargeX[607][0]>0 ? 1 : 0;
	satisfiable[607][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit607_1[i][0] ][ unit607_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit607_1[i][2] ][ unit607_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit607_1[i][4] ][ unit607_1[i][5] ] >0);
		X_contra = ( LargeX[607][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit607_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[607][0]=0; L[607][1]=1;}
			satisfiable[607][1]=satisfiable[607][1] & ((x[607] ^ 1) | (x[ unit607_1[i][0] ] ^ unit607_1[i][1]) |(x[ unit607_1[i][2] ] ^ unit607_1[i][3]));
			}
		if(X_contra>0) L[607][1]=2;
		}
	//Check all rules of unit[608][0]
	L[608][0] = LargeX[608][1]>0 ? 1 : 0;
	satisfiable[608][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit608_0[i][0] ][ unit608_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit608_0[i][2] ][ unit608_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit608_0[i][4] ][ unit608_0[i][5] ] >0);
		X_contra = ( LargeX[608][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit608_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[608][1]=0; L[608][0]=1;}
			satisfiable[608][0]=satisfiable[608][0] & ((x[608] ^ 0) | (x[ unit608_0[i][0] ] ^ unit608_0[i][1]) |(x[ unit608_0[i][2] ] ^ unit608_0[i][3]));
			}
		if(X_contra>0) L[608][0]=2;
		}
	//Check all rules of unit[608][1]
	L[608][1] = LargeX[608][0]>0 ? 1 : 0;
	satisfiable[608][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit608_1[i][0] ][ unit608_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit608_1[i][2] ][ unit608_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit608_1[i][4] ][ unit608_1[i][5] ] >0);
		X_contra = ( LargeX[608][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit608_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[608][0]=0; L[608][1]=1;}
			satisfiable[608][1]=satisfiable[608][1] & ((x[608] ^ 1) | (x[ unit608_1[i][0] ] ^ unit608_1[i][1]) |(x[ unit608_1[i][2] ] ^ unit608_1[i][3]));
			}
		if(X_contra>0) L[608][1]=2;
		}
	//Check all rules of unit[609][0]
	L[609][0] = LargeX[609][1]>0 ? 1 : 0;
	satisfiable[609][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit609_0[i][0] ][ unit609_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit609_0[i][2] ][ unit609_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit609_0[i][4] ][ unit609_0[i][5] ] >0);
		X_contra = ( LargeX[609][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit609_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[609][1]=0; L[609][0]=1;}
			satisfiable[609][0]=satisfiable[609][0] & ((x[609] ^ 0) | (x[ unit609_0[i][0] ] ^ unit609_0[i][1]) |(x[ unit609_0[i][2] ] ^ unit609_0[i][3]));
			}
		if(X_contra>0) L[609][0]=2;
		}
	//Check all rules of unit[609][1]
	L[609][1] = LargeX[609][0]>0 ? 1 : 0;
	satisfiable[609][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit609_1[i][0] ][ unit609_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit609_1[i][2] ][ unit609_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit609_1[i][4] ][ unit609_1[i][5] ] >0);
		X_contra = ( LargeX[609][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit609_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[609][0]=0; L[609][1]=1;}
			satisfiable[609][1]=satisfiable[609][1] & ((x[609] ^ 1) | (x[ unit609_1[i][0] ] ^ unit609_1[i][1]) |(x[ unit609_1[i][2] ] ^ unit609_1[i][3]));
			}
		if(X_contra>0) L[609][1]=2;
		}
	//Check all rules of unit[610][0]
	L[610][0] = LargeX[610][1]>0 ? 1 : 0;
	satisfiable[610][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit610_0[i][0] ][ unit610_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit610_0[i][2] ][ unit610_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit610_0[i][4] ][ unit610_0[i][5] ] >0);
		X_contra = ( LargeX[610][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit610_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[610][1]=0; L[610][0]=1;}
			satisfiable[610][0]=satisfiable[610][0] & ((x[610] ^ 0) | (x[ unit610_0[i][0] ] ^ unit610_0[i][1]) |(x[ unit610_0[i][2] ] ^ unit610_0[i][3]));
			}
		if(X_contra>0) L[610][0]=2;
		}
	//Check all rules of unit[610][1]
	L[610][1] = LargeX[610][0]>0 ? 1 : 0;
	satisfiable[610][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit610_1[i][0] ][ unit610_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit610_1[i][2] ][ unit610_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit610_1[i][4] ][ unit610_1[i][5] ] >0);
		X_contra = ( LargeX[610][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit610_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[610][0]=0; L[610][1]=1;}
			satisfiable[610][1]=satisfiable[610][1] & ((x[610] ^ 1) | (x[ unit610_1[i][0] ] ^ unit610_1[i][1]) |(x[ unit610_1[i][2] ] ^ unit610_1[i][3]));
			}
		if(X_contra>0) L[610][1]=2;
		}
	//Check all rules of unit[611][0]
	L[611][0] = LargeX[611][1]>0 ? 1 : 0;
	satisfiable[611][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit611_0[i][0] ][ unit611_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit611_0[i][2] ][ unit611_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit611_0[i][4] ][ unit611_0[i][5] ] >0);
		X_contra = ( LargeX[611][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit611_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[611][1]=0; L[611][0]=1;}
			satisfiable[611][0]=satisfiable[611][0] & ((x[611] ^ 0) | (x[ unit611_0[i][0] ] ^ unit611_0[i][1]) |(x[ unit611_0[i][2] ] ^ unit611_0[i][3]));
			}
		if(X_contra>0) L[611][0]=2;
		}
	//Check all rules of unit[611][1]
	L[611][1] = LargeX[611][0]>0 ? 1 : 0;
	satisfiable[611][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit611_1[i][0] ][ unit611_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit611_1[i][2] ][ unit611_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit611_1[i][4] ][ unit611_1[i][5] ] >0);
		X_contra = ( LargeX[611][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit611_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[611][0]=0; L[611][1]=1;}
			satisfiable[611][1]=satisfiable[611][1] & ((x[611] ^ 1) | (x[ unit611_1[i][0] ] ^ unit611_1[i][1]) |(x[ unit611_1[i][2] ] ^ unit611_1[i][3]));
			}
		if(X_contra>0) L[611][1]=2;
		}
	//Check all rules of unit[612][0]
	L[612][0] = LargeX[612][1]>0 ? 1 : 0;
	satisfiable[612][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit612_0[i][0] ][ unit612_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit612_0[i][2] ][ unit612_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit612_0[i][4] ][ unit612_0[i][5] ] >0);
		X_contra = ( LargeX[612][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit612_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[612][1]=0; L[612][0]=1;}
			satisfiable[612][0]=satisfiable[612][0] & ((x[612] ^ 0) | (x[ unit612_0[i][0] ] ^ unit612_0[i][1]) |(x[ unit612_0[i][2] ] ^ unit612_0[i][3]));
			}
		if(X_contra>0) L[612][0]=2;
		}
	//Check all rules of unit[612][1]
	L[612][1] = LargeX[612][0]>0 ? 1 : 0;
	satisfiable[612][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit612_1[i][0] ][ unit612_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit612_1[i][2] ][ unit612_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit612_1[i][4] ][ unit612_1[i][5] ] >0);
		X_contra = ( LargeX[612][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit612_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[612][0]=0; L[612][1]=1;}
			satisfiable[612][1]=satisfiable[612][1] & ((x[612] ^ 1) | (x[ unit612_1[i][0] ] ^ unit612_1[i][1]) |(x[ unit612_1[i][2] ] ^ unit612_1[i][3]));
			}
		if(X_contra>0) L[612][1]=2;
		}
	//Check all rules of unit[613][0]
	L[613][0] = LargeX[613][1]>0 ? 1 : 0;
	satisfiable[613][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit613_0[i][0] ][ unit613_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit613_0[i][2] ][ unit613_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit613_0[i][4] ][ unit613_0[i][5] ] >0);
		X_contra = ( LargeX[613][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit613_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[613][1]=0; L[613][0]=1;}
			satisfiable[613][0]=satisfiable[613][0] & ((x[613] ^ 0) | (x[ unit613_0[i][0] ] ^ unit613_0[i][1]) |(x[ unit613_0[i][2] ] ^ unit613_0[i][3]));
			}
		if(X_contra>0) L[613][0]=2;
		}
	//Check all rules of unit[613][1]
	L[613][1] = LargeX[613][0]>0 ? 1 : 0;
	satisfiable[613][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit613_1[i][0] ][ unit613_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit613_1[i][2] ][ unit613_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit613_1[i][4] ][ unit613_1[i][5] ] >0);
		X_contra = ( LargeX[613][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit613_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[613][0]=0; L[613][1]=1;}
			satisfiable[613][1]=satisfiable[613][1] & ((x[613] ^ 1) | (x[ unit613_1[i][0] ] ^ unit613_1[i][1]) |(x[ unit613_1[i][2] ] ^ unit613_1[i][3]));
			}
		if(X_contra>0) L[613][1]=2;
		}
	//Check all rules of unit[614][0]
	L[614][0] = LargeX[614][1]>0 ? 1 : 0;
	satisfiable[614][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit614_0[i][0] ][ unit614_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit614_0[i][2] ][ unit614_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit614_0[i][4] ][ unit614_0[i][5] ] >0);
		X_contra = ( LargeX[614][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit614_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[614][1]=0; L[614][0]=1;}
			satisfiable[614][0]=satisfiable[614][0] & ((x[614] ^ 0) | (x[ unit614_0[i][0] ] ^ unit614_0[i][1]) |(x[ unit614_0[i][2] ] ^ unit614_0[i][3]));
			}
		if(X_contra>0) L[614][0]=2;
		}
	//Check all rules of unit[614][1]
	L[614][1] = LargeX[614][0]>0 ? 1 : 0;
	satisfiable[614][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit614_1[i][0] ][ unit614_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit614_1[i][2] ][ unit614_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit614_1[i][4] ][ unit614_1[i][5] ] >0);
		X_contra = ( LargeX[614][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit614_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[614][0]=0; L[614][1]=1;}
			satisfiable[614][1]=satisfiable[614][1] & ((x[614] ^ 1) | (x[ unit614_1[i][0] ] ^ unit614_1[i][1]) |(x[ unit614_1[i][2] ] ^ unit614_1[i][3]));
			}
		if(X_contra>0) L[614][1]=2;
		}
	//Check all rules of unit[615][0]
	L[615][0] = LargeX[615][1]>0 ? 1 : 0;
	satisfiable[615][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit615_0[i][0] ][ unit615_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit615_0[i][2] ][ unit615_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit615_0[i][4] ][ unit615_0[i][5] ] >0);
		X_contra = ( LargeX[615][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit615_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[615][1]=0; L[615][0]=1;}
			satisfiable[615][0]=satisfiable[615][0] & ((x[615] ^ 0) | (x[ unit615_0[i][0] ] ^ unit615_0[i][1]) |(x[ unit615_0[i][2] ] ^ unit615_0[i][3]));
			}
		if(X_contra>0) L[615][0]=2;
		}
	//Check all rules of unit[615][1]
	L[615][1] = LargeX[615][0]>0 ? 1 : 0;
	satisfiable[615][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit615_1[i][0] ][ unit615_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit615_1[i][2] ][ unit615_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit615_1[i][4] ][ unit615_1[i][5] ] >0);
		X_contra = ( LargeX[615][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit615_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[615][0]=0; L[615][1]=1;}
			satisfiable[615][1]=satisfiable[615][1] & ((x[615] ^ 1) | (x[ unit615_1[i][0] ] ^ unit615_1[i][1]) |(x[ unit615_1[i][2] ] ^ unit615_1[i][3]));
			}
		if(X_contra>0) L[615][1]=2;
		}
	//Check all rules of unit[616][0]
	L[616][0] = LargeX[616][1]>0 ? 1 : 0;
	satisfiable[616][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit616_0[i][0] ][ unit616_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit616_0[i][2] ][ unit616_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit616_0[i][4] ][ unit616_0[i][5] ] >0);
		X_contra = ( LargeX[616][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit616_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[616][1]=0; L[616][0]=1;}
			satisfiable[616][0]=satisfiable[616][0] & ((x[616] ^ 0) | (x[ unit616_0[i][0] ] ^ unit616_0[i][1]) |(x[ unit616_0[i][2] ] ^ unit616_0[i][3]));
			}
		if(X_contra>0) L[616][0]=2;
		}
	//Check all rules of unit[616][1]
	L[616][1] = LargeX[616][0]>0 ? 1 : 0;
	satisfiable[616][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit616_1[i][0] ][ unit616_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit616_1[i][2] ][ unit616_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit616_1[i][4] ][ unit616_1[i][5] ] >0);
		X_contra = ( LargeX[616][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit616_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[616][0]=0; L[616][1]=1;}
			satisfiable[616][1]=satisfiable[616][1] & ((x[616] ^ 1) | (x[ unit616_1[i][0] ] ^ unit616_1[i][1]) |(x[ unit616_1[i][2] ] ^ unit616_1[i][3]));
			}
		if(X_contra>0) L[616][1]=2;
		}
	//Check all rules of unit[617][0]
	L[617][0] = LargeX[617][1]>0 ? 1 : 0;
	satisfiable[617][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit617_0[i][0] ][ unit617_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit617_0[i][2] ][ unit617_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit617_0[i][4] ][ unit617_0[i][5] ] >0);
		X_contra = ( LargeX[617][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit617_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[617][1]=0; L[617][0]=1;}
			satisfiable[617][0]=satisfiable[617][0] & ((x[617] ^ 0) | (x[ unit617_0[i][0] ] ^ unit617_0[i][1]) |(x[ unit617_0[i][2] ] ^ unit617_0[i][3]));
			}
		if(X_contra>0) L[617][0]=2;
		}
	//Check all rules of unit[617][1]
	L[617][1] = LargeX[617][0]>0 ? 1 : 0;
	satisfiable[617][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit617_1[i][0] ][ unit617_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit617_1[i][2] ][ unit617_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit617_1[i][4] ][ unit617_1[i][5] ] >0);
		X_contra = ( LargeX[617][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit617_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[617][0]=0; L[617][1]=1;}
			satisfiable[617][1]=satisfiable[617][1] & ((x[617] ^ 1) | (x[ unit617_1[i][0] ] ^ unit617_1[i][1]) |(x[ unit617_1[i][2] ] ^ unit617_1[i][3]));
			}
		if(X_contra>0) L[617][1]=2;
		}
	//Check all rules of unit[618][0]
	L[618][0] = LargeX[618][1]>0 ? 1 : 0;
	satisfiable[618][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit618_0[i][0] ][ unit618_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit618_0[i][2] ][ unit618_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit618_0[i][4] ][ unit618_0[i][5] ] >0);
		X_contra = ( LargeX[618][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit618_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[618][1]=0; L[618][0]=1;}
			satisfiable[618][0]=satisfiable[618][0] & ((x[618] ^ 0) | (x[ unit618_0[i][0] ] ^ unit618_0[i][1]) |(x[ unit618_0[i][2] ] ^ unit618_0[i][3]));
			}
		if(X_contra>0) L[618][0]=2;
		}
	//Check all rules of unit[618][1]
	L[618][1] = LargeX[618][0]>0 ? 1 : 0;
	satisfiable[618][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit618_1[i][0] ][ unit618_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit618_1[i][2] ][ unit618_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit618_1[i][4] ][ unit618_1[i][5] ] >0);
		X_contra = ( LargeX[618][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit618_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[618][0]=0; L[618][1]=1;}
			satisfiable[618][1]=satisfiable[618][1] & ((x[618] ^ 1) | (x[ unit618_1[i][0] ] ^ unit618_1[i][1]) |(x[ unit618_1[i][2] ] ^ unit618_1[i][3]));
			}
		if(X_contra>0) L[618][1]=2;
		}
	//Check all rules of unit[619][0]
	L[619][0] = LargeX[619][1]>0 ? 1 : 0;
	satisfiable[619][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit619_0[i][0] ][ unit619_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit619_0[i][2] ][ unit619_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit619_0[i][4] ][ unit619_0[i][5] ] >0);
		X_contra = ( LargeX[619][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit619_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[619][1]=0; L[619][0]=1;}
			satisfiable[619][0]=satisfiable[619][0] & ((x[619] ^ 0) | (x[ unit619_0[i][0] ] ^ unit619_0[i][1]) |(x[ unit619_0[i][2] ] ^ unit619_0[i][3]));
			}
		if(X_contra>0) L[619][0]=2;
		}
	//Check all rules of unit[619][1]
	L[619][1] = LargeX[619][0]>0 ? 1 : 0;
	satisfiable[619][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit619_1[i][0] ][ unit619_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit619_1[i][2] ][ unit619_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit619_1[i][4] ][ unit619_1[i][5] ] >0);
		X_contra = ( LargeX[619][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit619_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[619][0]=0; L[619][1]=1;}
			satisfiable[619][1]=satisfiable[619][1] & ((x[619] ^ 1) | (x[ unit619_1[i][0] ] ^ unit619_1[i][1]) |(x[ unit619_1[i][2] ] ^ unit619_1[i][3]));
			}
		if(X_contra>0) L[619][1]=2;
		}
	//Check all rules of unit[620][0]
	L[620][0] = LargeX[620][1]>0 ? 1 : 0;
	satisfiable[620][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit620_0[i][0] ][ unit620_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit620_0[i][2] ][ unit620_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit620_0[i][4] ][ unit620_0[i][5] ] >0);
		X_contra = ( LargeX[620][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit620_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[620][1]=0; L[620][0]=1;}
			satisfiable[620][0]=satisfiable[620][0] & ((x[620] ^ 0) | (x[ unit620_0[i][0] ] ^ unit620_0[i][1]) |(x[ unit620_0[i][2] ] ^ unit620_0[i][3]));
			}
		if(X_contra>0) L[620][0]=2;
		}
	//Check all rules of unit[620][1]
	L[620][1] = LargeX[620][0]>0 ? 1 : 0;
	satisfiable[620][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit620_1[i][0] ][ unit620_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit620_1[i][2] ][ unit620_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit620_1[i][4] ][ unit620_1[i][5] ] >0);
		X_contra = ( LargeX[620][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit620_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[620][0]=0; L[620][1]=1;}
			satisfiable[620][1]=satisfiable[620][1] & ((x[620] ^ 1) | (x[ unit620_1[i][0] ] ^ unit620_1[i][1]) |(x[ unit620_1[i][2] ] ^ unit620_1[i][3]));
			}
		if(X_contra>0) L[620][1]=2;
		}
	//Check all rules of unit[621][0]
	L[621][0] = LargeX[621][1]>0 ? 1 : 0;
	satisfiable[621][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit621_0[i][0] ][ unit621_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit621_0[i][2] ][ unit621_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit621_0[i][4] ][ unit621_0[i][5] ] >0);
		X_contra = ( LargeX[621][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit621_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[621][1]=0; L[621][0]=1;}
			satisfiable[621][0]=satisfiable[621][0] & ((x[621] ^ 0) | (x[ unit621_0[i][0] ] ^ unit621_0[i][1]) |(x[ unit621_0[i][2] ] ^ unit621_0[i][3]));
			}
		if(X_contra>0) L[621][0]=2;
		}
	//Check all rules of unit[621][1]
	L[621][1] = LargeX[621][0]>0 ? 1 : 0;
	satisfiable[621][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit621_1[i][0] ][ unit621_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit621_1[i][2] ][ unit621_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit621_1[i][4] ][ unit621_1[i][5] ] >0);
		X_contra = ( LargeX[621][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit621_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[621][0]=0; L[621][1]=1;}
			satisfiable[621][1]=satisfiable[621][1] & ((x[621] ^ 1) | (x[ unit621_1[i][0] ] ^ unit621_1[i][1]) |(x[ unit621_1[i][2] ] ^ unit621_1[i][3]));
			}
		if(X_contra>0) L[621][1]=2;
		}
	//Check all rules of unit[622][0]
	L[622][0] = LargeX[622][1]>0 ? 1 : 0;
	satisfiable[622][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit622_0[i][0] ][ unit622_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit622_0[i][2] ][ unit622_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit622_0[i][4] ][ unit622_0[i][5] ] >0);
		X_contra = ( LargeX[622][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit622_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[622][1]=0; L[622][0]=1;}
			satisfiable[622][0]=satisfiable[622][0] & ((x[622] ^ 0) | (x[ unit622_0[i][0] ] ^ unit622_0[i][1]) |(x[ unit622_0[i][2] ] ^ unit622_0[i][3]));
			}
		if(X_contra>0) L[622][0]=2;
		}
	//Check all rules of unit[622][1]
	L[622][1] = LargeX[622][0]>0 ? 1 : 0;
	satisfiable[622][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit622_1[i][0] ][ unit622_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit622_1[i][2] ][ unit622_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit622_1[i][4] ][ unit622_1[i][5] ] >0);
		X_contra = ( LargeX[622][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit622_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[622][0]=0; L[622][1]=1;}
			satisfiable[622][1]=satisfiable[622][1] & ((x[622] ^ 1) | (x[ unit622_1[i][0] ] ^ unit622_1[i][1]) |(x[ unit622_1[i][2] ] ^ unit622_1[i][3]));
			}
		if(X_contra>0) L[622][1]=2;
		}
	//Check all rules of unit[623][0]
	L[623][0] = LargeX[623][1]>0 ? 1 : 0;
	satisfiable[623][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit623_0[i][0] ][ unit623_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit623_0[i][2] ][ unit623_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit623_0[i][4] ][ unit623_0[i][5] ] >0);
		X_contra = ( LargeX[623][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit623_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[623][1]=0; L[623][0]=1;}
			satisfiable[623][0]=satisfiable[623][0] & ((x[623] ^ 0) | (x[ unit623_0[i][0] ] ^ unit623_0[i][1]) |(x[ unit623_0[i][2] ] ^ unit623_0[i][3]));
			}
		if(X_contra>0) L[623][0]=2;
		}
	//Check all rules of unit[623][1]
	L[623][1] = LargeX[623][0]>0 ? 1 : 0;
	satisfiable[623][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit623_1[i][0] ][ unit623_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit623_1[i][2] ][ unit623_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit623_1[i][4] ][ unit623_1[i][5] ] >0);
		X_contra = ( LargeX[623][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit623_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[623][0]=0; L[623][1]=1;}
			satisfiable[623][1]=satisfiable[623][1] & ((x[623] ^ 1) | (x[ unit623_1[i][0] ] ^ unit623_1[i][1]) |(x[ unit623_1[i][2] ] ^ unit623_1[i][3]));
			}
		if(X_contra>0) L[623][1]=2;
		}
	//Check all rules of unit[624][0]
	L[624][0] = LargeX[624][1]>0 ? 1 : 0;
	satisfiable[624][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit624_0[i][0] ][ unit624_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit624_0[i][2] ][ unit624_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit624_0[i][4] ][ unit624_0[i][5] ] >0);
		X_contra = ( LargeX[624][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit624_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[624][1]=0; L[624][0]=1;}
			satisfiable[624][0]=satisfiable[624][0] & ((x[624] ^ 0) | (x[ unit624_0[i][0] ] ^ unit624_0[i][1]) |(x[ unit624_0[i][2] ] ^ unit624_0[i][3]));
			}
		if(X_contra>0) L[624][0]=2;
		}
	//Check all rules of unit[624][1]
	L[624][1] = LargeX[624][0]>0 ? 1 : 0;
	satisfiable[624][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit624_1[i][0] ][ unit624_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit624_1[i][2] ][ unit624_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit624_1[i][4] ][ unit624_1[i][5] ] >0);
		X_contra = ( LargeX[624][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit624_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[624][0]=0; L[624][1]=1;}
			satisfiable[624][1]=satisfiable[624][1] & ((x[624] ^ 1) | (x[ unit624_1[i][0] ] ^ unit624_1[i][1]) |(x[ unit624_1[i][2] ] ^ unit624_1[i][3]));
			}
		if(X_contra>0) L[624][1]=2;
		}
	//Check all rules of unit[625][0]
	L[625][0] = LargeX[625][1]>0 ? 1 : 0;
	satisfiable[625][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit625_0[i][0] ][ unit625_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit625_0[i][2] ][ unit625_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit625_0[i][4] ][ unit625_0[i][5] ] >0);
		X_contra = ( LargeX[625][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit625_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[625][1]=0; L[625][0]=1;}
			satisfiable[625][0]=satisfiable[625][0] & ((x[625] ^ 0) | (x[ unit625_0[i][0] ] ^ unit625_0[i][1]) |(x[ unit625_0[i][2] ] ^ unit625_0[i][3]));
			}
		if(X_contra>0) L[625][0]=2;
		}
	//Check all rules of unit[625][1]
	L[625][1] = LargeX[625][0]>0 ? 1 : 0;
	satisfiable[625][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit625_1[i][0] ][ unit625_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit625_1[i][2] ][ unit625_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit625_1[i][4] ][ unit625_1[i][5] ] >0);
		X_contra = ( LargeX[625][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit625_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[625][0]=0; L[625][1]=1;}
			satisfiable[625][1]=satisfiable[625][1] & ((x[625] ^ 1) | (x[ unit625_1[i][0] ] ^ unit625_1[i][1]) |(x[ unit625_1[i][2] ] ^ unit625_1[i][3]));
			}
		if(X_contra>0) L[625][1]=2;
		}
	//Check all rules of unit[626][0]
	L[626][0] = LargeX[626][1]>0 ? 1 : 0;
	satisfiable[626][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit626_0[i][0] ][ unit626_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit626_0[i][2] ][ unit626_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit626_0[i][4] ][ unit626_0[i][5] ] >0);
		X_contra = ( LargeX[626][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit626_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[626][1]=0; L[626][0]=1;}
			satisfiable[626][0]=satisfiable[626][0] & ((x[626] ^ 0) | (x[ unit626_0[i][0] ] ^ unit626_0[i][1]) |(x[ unit626_0[i][2] ] ^ unit626_0[i][3]));
			}
		if(X_contra>0) L[626][0]=2;
		}
	//Check all rules of unit[626][1]
	L[626][1] = LargeX[626][0]>0 ? 1 : 0;
	satisfiable[626][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit626_1[i][0] ][ unit626_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit626_1[i][2] ][ unit626_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit626_1[i][4] ][ unit626_1[i][5] ] >0);
		X_contra = ( LargeX[626][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit626_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[626][0]=0; L[626][1]=1;}
			satisfiable[626][1]=satisfiable[626][1] & ((x[626] ^ 1) | (x[ unit626_1[i][0] ] ^ unit626_1[i][1]) |(x[ unit626_1[i][2] ] ^ unit626_1[i][3]));
			}
		if(X_contra>0) L[626][1]=2;
		}
	//Check all rules of unit[627][0]
	L[627][0] = LargeX[627][1]>0 ? 1 : 0;
	satisfiable[627][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit627_0[i][0] ][ unit627_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit627_0[i][2] ][ unit627_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit627_0[i][4] ][ unit627_0[i][5] ] >0);
		X_contra = ( LargeX[627][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit627_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[627][1]=0; L[627][0]=1;}
			satisfiable[627][0]=satisfiable[627][0] & ((x[627] ^ 0) | (x[ unit627_0[i][0] ] ^ unit627_0[i][1]) |(x[ unit627_0[i][2] ] ^ unit627_0[i][3]));
			}
		if(X_contra>0) L[627][0]=2;
		}
	//Check all rules of unit[627][1]
	L[627][1] = LargeX[627][0]>0 ? 1 : 0;
	satisfiable[627][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit627_1[i][0] ][ unit627_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit627_1[i][2] ][ unit627_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit627_1[i][4] ][ unit627_1[i][5] ] >0);
		X_contra = ( LargeX[627][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit627_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[627][0]=0; L[627][1]=1;}
			satisfiable[627][1]=satisfiable[627][1] & ((x[627] ^ 1) | (x[ unit627_1[i][0] ] ^ unit627_1[i][1]) |(x[ unit627_1[i][2] ] ^ unit627_1[i][3]));
			}
		if(X_contra>0) L[627][1]=2;
		}
	//Check all rules of unit[628][0]
	L[628][0] = LargeX[628][1]>0 ? 1 : 0;
	satisfiable[628][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit628_0[i][0] ][ unit628_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit628_0[i][2] ][ unit628_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit628_0[i][4] ][ unit628_0[i][5] ] >0);
		X_contra = ( LargeX[628][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit628_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[628][1]=0; L[628][0]=1;}
			satisfiable[628][0]=satisfiable[628][0] & ((x[628] ^ 0) | (x[ unit628_0[i][0] ] ^ unit628_0[i][1]) |(x[ unit628_0[i][2] ] ^ unit628_0[i][3]));
			}
		if(X_contra>0) L[628][0]=2;
		}
	//Check all rules of unit[628][1]
	L[628][1] = LargeX[628][0]>0 ? 1 : 0;
	satisfiable[628][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit628_1[i][0] ][ unit628_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit628_1[i][2] ][ unit628_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit628_1[i][4] ][ unit628_1[i][5] ] >0);
		X_contra = ( LargeX[628][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit628_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[628][0]=0; L[628][1]=1;}
			satisfiable[628][1]=satisfiable[628][1] & ((x[628] ^ 1) | (x[ unit628_1[i][0] ] ^ unit628_1[i][1]) |(x[ unit628_1[i][2] ] ^ unit628_1[i][3]));
			}
		if(X_contra>0) L[628][1]=2;
		}
	//Check all rules of unit[629][0]
	L[629][0] = LargeX[629][1]>0 ? 1 : 0;
	satisfiable[629][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit629_0[i][0] ][ unit629_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit629_0[i][2] ][ unit629_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit629_0[i][4] ][ unit629_0[i][5] ] >0);
		X_contra = ( LargeX[629][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit629_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[629][1]=0; L[629][0]=1;}
			satisfiable[629][0]=satisfiable[629][0] & ((x[629] ^ 0) | (x[ unit629_0[i][0] ] ^ unit629_0[i][1]) |(x[ unit629_0[i][2] ] ^ unit629_0[i][3]));
			}
		if(X_contra>0) L[629][0]=2;
		}
	//Check all rules of unit[629][1]
	L[629][1] = LargeX[629][0]>0 ? 1 : 0;
	satisfiable[629][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit629_1[i][0] ][ unit629_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit629_1[i][2] ][ unit629_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit629_1[i][4] ][ unit629_1[i][5] ] >0);
		X_contra = ( LargeX[629][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit629_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[629][0]=0; L[629][1]=1;}
			satisfiable[629][1]=satisfiable[629][1] & ((x[629] ^ 1) | (x[ unit629_1[i][0] ] ^ unit629_1[i][1]) |(x[ unit629_1[i][2] ] ^ unit629_1[i][3]));
			}
		if(X_contra>0) L[629][1]=2;
		}
	//Check all rules of unit[630][0]
	L[630][0] = LargeX[630][1]>0 ? 1 : 0;
	satisfiable[630][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit630_0[i][0] ][ unit630_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit630_0[i][2] ][ unit630_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit630_0[i][4] ][ unit630_0[i][5] ] >0);
		X_contra = ( LargeX[630][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit630_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[630][1]=0; L[630][0]=1;}
			satisfiable[630][0]=satisfiable[630][0] & ((x[630] ^ 0) | (x[ unit630_0[i][0] ] ^ unit630_0[i][1]) |(x[ unit630_0[i][2] ] ^ unit630_0[i][3]));
			}
		if(X_contra>0) L[630][0]=2;
		}
	//Check all rules of unit[630][1]
	L[630][1] = LargeX[630][0]>0 ? 1 : 0;
	satisfiable[630][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit630_1[i][0] ][ unit630_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit630_1[i][2] ][ unit630_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit630_1[i][4] ][ unit630_1[i][5] ] >0);
		X_contra = ( LargeX[630][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit630_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[630][0]=0; L[630][1]=1;}
			satisfiable[630][1]=satisfiable[630][1] & ((x[630] ^ 1) | (x[ unit630_1[i][0] ] ^ unit630_1[i][1]) |(x[ unit630_1[i][2] ] ^ unit630_1[i][3]));
			}
		if(X_contra>0) L[630][1]=2;
		}
	//Check all rules of unit[631][0]
	L[631][0] = LargeX[631][1]>0 ? 1 : 0;
	satisfiable[631][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit631_0[i][0] ][ unit631_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit631_0[i][2] ][ unit631_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit631_0[i][4] ][ unit631_0[i][5] ] >0);
		X_contra = ( LargeX[631][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit631_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[631][1]=0; L[631][0]=1;}
			satisfiable[631][0]=satisfiable[631][0] & ((x[631] ^ 0) | (x[ unit631_0[i][0] ] ^ unit631_0[i][1]) |(x[ unit631_0[i][2] ] ^ unit631_0[i][3]));
			}
		if(X_contra>0) L[631][0]=2;
		}
	//Check all rules of unit[631][1]
	L[631][1] = LargeX[631][0]>0 ? 1 : 0;
	satisfiable[631][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit631_1[i][0] ][ unit631_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit631_1[i][2] ][ unit631_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit631_1[i][4] ][ unit631_1[i][5] ] >0);
		X_contra = ( LargeX[631][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit631_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[631][0]=0; L[631][1]=1;}
			satisfiable[631][1]=satisfiable[631][1] & ((x[631] ^ 1) | (x[ unit631_1[i][0] ] ^ unit631_1[i][1]) |(x[ unit631_1[i][2] ] ^ unit631_1[i][3]));
			}
		if(X_contra>0) L[631][1]=2;
		}
	//Check all rules of unit[632][0]
	L[632][0] = LargeX[632][1]>0 ? 1 : 0;
	satisfiable[632][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit632_0[i][0] ][ unit632_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit632_0[i][2] ][ unit632_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit632_0[i][4] ][ unit632_0[i][5] ] >0);
		X_contra = ( LargeX[632][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit632_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[632][1]=0; L[632][0]=1;}
			satisfiable[632][0]=satisfiable[632][0] & ((x[632] ^ 0) | (x[ unit632_0[i][0] ] ^ unit632_0[i][1]) |(x[ unit632_0[i][2] ] ^ unit632_0[i][3]));
			}
		if(X_contra>0) L[632][0]=2;
		}
	//Check all rules of unit[632][1]
	L[632][1] = LargeX[632][0]>0 ? 1 : 0;
	satisfiable[632][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit632_1[i][0] ][ unit632_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit632_1[i][2] ][ unit632_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit632_1[i][4] ][ unit632_1[i][5] ] >0);
		X_contra = ( LargeX[632][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit632_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[632][0]=0; L[632][1]=1;}
			satisfiable[632][1]=satisfiable[632][1] & ((x[632] ^ 1) | (x[ unit632_1[i][0] ] ^ unit632_1[i][1]) |(x[ unit632_1[i][2] ] ^ unit632_1[i][3]));
			}
		if(X_contra>0) L[632][1]=2;
		}
	//Check all rules of unit[633][0]
	L[633][0] = LargeX[633][1]>0 ? 1 : 0;
	satisfiable[633][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit633_0[i][0] ][ unit633_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit633_0[i][2] ][ unit633_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit633_0[i][4] ][ unit633_0[i][5] ] >0);
		X_contra = ( LargeX[633][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit633_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[633][1]=0; L[633][0]=1;}
			satisfiable[633][0]=satisfiable[633][0] & ((x[633] ^ 0) | (x[ unit633_0[i][0] ] ^ unit633_0[i][1]) |(x[ unit633_0[i][2] ] ^ unit633_0[i][3]));
			}
		if(X_contra>0) L[633][0]=2;
		}
	//Check all rules of unit[633][1]
	L[633][1] = LargeX[633][0]>0 ? 1 : 0;
	satisfiable[633][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit633_1[i][0] ][ unit633_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit633_1[i][2] ][ unit633_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit633_1[i][4] ][ unit633_1[i][5] ] >0);
		X_contra = ( LargeX[633][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit633_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[633][0]=0; L[633][1]=1;}
			satisfiable[633][1]=satisfiable[633][1] & ((x[633] ^ 1) | (x[ unit633_1[i][0] ] ^ unit633_1[i][1]) |(x[ unit633_1[i][2] ] ^ unit633_1[i][3]));
			}
		if(X_contra>0) L[633][1]=2;
		}
	//Check all rules of unit[634][0]
	L[634][0] = LargeX[634][1]>0 ? 1 : 0;
	satisfiable[634][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit634_0[i][0] ][ unit634_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit634_0[i][2] ][ unit634_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit634_0[i][4] ][ unit634_0[i][5] ] >0);
		X_contra = ( LargeX[634][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit634_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[634][1]=0; L[634][0]=1;}
			satisfiable[634][0]=satisfiable[634][0] & ((x[634] ^ 0) | (x[ unit634_0[i][0] ] ^ unit634_0[i][1]) |(x[ unit634_0[i][2] ] ^ unit634_0[i][3]));
			}
		if(X_contra>0) L[634][0]=2;
		}
	//Check all rules of unit[634][1]
	L[634][1] = LargeX[634][0]>0 ? 1 : 0;
	satisfiable[634][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit634_1[i][0] ][ unit634_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit634_1[i][2] ][ unit634_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit634_1[i][4] ][ unit634_1[i][5] ] >0);
		X_contra = ( LargeX[634][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit634_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[634][0]=0; L[634][1]=1;}
			satisfiable[634][1]=satisfiable[634][1] & ((x[634] ^ 1) | (x[ unit634_1[i][0] ] ^ unit634_1[i][1]) |(x[ unit634_1[i][2] ] ^ unit634_1[i][3]));
			}
		if(X_contra>0) L[634][1]=2;
		}
	//Check all rules of unit[635][0]
	L[635][0] = LargeX[635][1]>0 ? 1 : 0;
	satisfiable[635][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit635_0[i][0] ][ unit635_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit635_0[i][2] ][ unit635_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit635_0[i][4] ][ unit635_0[i][5] ] >0);
		X_contra = ( LargeX[635][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit635_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[635][1]=0; L[635][0]=1;}
			satisfiable[635][0]=satisfiable[635][0] & ((x[635] ^ 0) | (x[ unit635_0[i][0] ] ^ unit635_0[i][1]) |(x[ unit635_0[i][2] ] ^ unit635_0[i][3]));
			}
		if(X_contra>0) L[635][0]=2;
		}
	//Check all rules of unit[635][1]
	L[635][1] = LargeX[635][0]>0 ? 1 : 0;
	satisfiable[635][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit635_1[i][0] ][ unit635_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit635_1[i][2] ][ unit635_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit635_1[i][4] ][ unit635_1[i][5] ] >0);
		X_contra = ( LargeX[635][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit635_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[635][0]=0; L[635][1]=1;}
			satisfiable[635][1]=satisfiable[635][1] & ((x[635] ^ 1) | (x[ unit635_1[i][0] ] ^ unit635_1[i][1]) |(x[ unit635_1[i][2] ] ^ unit635_1[i][3]));
			}
		if(X_contra>0) L[635][1]=2;
		}
	//Check all rules of unit[636][0]
	L[636][0] = LargeX[636][1]>0 ? 1 : 0;
	satisfiable[636][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit636_0[i][0] ][ unit636_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit636_0[i][2] ][ unit636_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit636_0[i][4] ][ unit636_0[i][5] ] >0);
		X_contra = ( LargeX[636][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit636_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[636][1]=0; L[636][0]=1;}
			satisfiable[636][0]=satisfiable[636][0] & ((x[636] ^ 0) | (x[ unit636_0[i][0] ] ^ unit636_0[i][1]) |(x[ unit636_0[i][2] ] ^ unit636_0[i][3]));
			}
		if(X_contra>0) L[636][0]=2;
		}
	//Check all rules of unit[636][1]
	L[636][1] = LargeX[636][0]>0 ? 1 : 0;
	satisfiable[636][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit636_1[i][0] ][ unit636_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit636_1[i][2] ][ unit636_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit636_1[i][4] ][ unit636_1[i][5] ] >0);
		X_contra = ( LargeX[636][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit636_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[636][0]=0; L[636][1]=1;}
			satisfiable[636][1]=satisfiable[636][1] & ((x[636] ^ 1) | (x[ unit636_1[i][0] ] ^ unit636_1[i][1]) |(x[ unit636_1[i][2] ] ^ unit636_1[i][3]));
			}
		if(X_contra>0) L[636][1]=2;
		}
	//Check all rules of unit[637][0]
	L[637][0] = LargeX[637][1]>0 ? 1 : 0;
	satisfiable[637][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit637_0[i][0] ][ unit637_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit637_0[i][2] ][ unit637_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit637_0[i][4] ][ unit637_0[i][5] ] >0);
		X_contra = ( LargeX[637][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit637_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[637][1]=0; L[637][0]=1;}
			satisfiable[637][0]=satisfiable[637][0] & ((x[637] ^ 0) | (x[ unit637_0[i][0] ] ^ unit637_0[i][1]) |(x[ unit637_0[i][2] ] ^ unit637_0[i][3]));
			}
		if(X_contra>0) L[637][0]=2;
		}
	//Check all rules of unit[637][1]
	L[637][1] = LargeX[637][0]>0 ? 1 : 0;
	satisfiable[637][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit637_1[i][0] ][ unit637_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit637_1[i][2] ][ unit637_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit637_1[i][4] ][ unit637_1[i][5] ] >0);
		X_contra = ( LargeX[637][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit637_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[637][0]=0; L[637][1]=1;}
			satisfiable[637][1]=satisfiable[637][1] & ((x[637] ^ 1) | (x[ unit637_1[i][0] ] ^ unit637_1[i][1]) |(x[ unit637_1[i][2] ] ^ unit637_1[i][3]));
			}
		if(X_contra>0) L[637][1]=2;
		}
	//Check all rules of unit[638][0]
	L[638][0] = LargeX[638][1]>0 ? 1 : 0;
	satisfiable[638][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit638_0[i][0] ][ unit638_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit638_0[i][2] ][ unit638_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit638_0[i][4] ][ unit638_0[i][5] ] >0);
		X_contra = ( LargeX[638][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit638_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[638][1]=0; L[638][0]=1;}
			satisfiable[638][0]=satisfiable[638][0] & ((x[638] ^ 0) | (x[ unit638_0[i][0] ] ^ unit638_0[i][1]) |(x[ unit638_0[i][2] ] ^ unit638_0[i][3]));
			}
		if(X_contra>0) L[638][0]=2;
		}
	//Check all rules of unit[638][1]
	L[638][1] = LargeX[638][0]>0 ? 1 : 0;
	satisfiable[638][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit638_1[i][0] ][ unit638_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit638_1[i][2] ][ unit638_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit638_1[i][4] ][ unit638_1[i][5] ] >0);
		X_contra = ( LargeX[638][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit638_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[638][0]=0; L[638][1]=1;}
			satisfiable[638][1]=satisfiable[638][1] & ((x[638] ^ 1) | (x[ unit638_1[i][0] ] ^ unit638_1[i][1]) |(x[ unit638_1[i][2] ] ^ unit638_1[i][3]));
			}
		if(X_contra>0) L[638][1]=2;
		}
	//Check all rules of unit[639][0]
	L[639][0] = LargeX[639][1]>0 ? 1 : 0;
	satisfiable[639][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit639_0[i][0] ][ unit639_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit639_0[i][2] ][ unit639_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit639_0[i][4] ][ unit639_0[i][5] ] >0);
		X_contra = ( LargeX[639][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit639_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[639][1]=0; L[639][0]=1;}
			satisfiable[639][0]=satisfiable[639][0] & ((x[639] ^ 0) | (x[ unit639_0[i][0] ] ^ unit639_0[i][1]) |(x[ unit639_0[i][2] ] ^ unit639_0[i][3]));
			}
		if(X_contra>0) L[639][0]=2;
		}
	//Check all rules of unit[639][1]
	L[639][1] = LargeX[639][0]>0 ? 1 : 0;
	satisfiable[639][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit639_1[i][0] ][ unit639_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit639_1[i][2] ][ unit639_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit639_1[i][4] ][ unit639_1[i][5] ] >0);
		X_contra = ( LargeX[639][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit639_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[639][0]=0; L[639][1]=1;}
			satisfiable[639][1]=satisfiable[639][1] & ((x[639] ^ 1) | (x[ unit639_1[i][0] ] ^ unit639_1[i][1]) |(x[ unit639_1[i][2] ] ^ unit639_1[i][3]));
			}
		if(X_contra>0) L[639][1]=2;
		}
	//Check all rules of unit[640][0]
	L[640][0] = LargeX[640][1]>0 ? 1 : 0;
	satisfiable[640][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit640_0[i][0] ][ unit640_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit640_0[i][2] ][ unit640_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit640_0[i][4] ][ unit640_0[i][5] ] >0);
		X_contra = ( LargeX[640][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit640_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[640][1]=0; L[640][0]=1;}
			satisfiable[640][0]=satisfiable[640][0] & ((x[640] ^ 0) | (x[ unit640_0[i][0] ] ^ unit640_0[i][1]) |(x[ unit640_0[i][2] ] ^ unit640_0[i][3]));
			}
		if(X_contra>0) L[640][0]=2;
		}
	//Check all rules of unit[640][1]
	L[640][1] = LargeX[640][0]>0 ? 1 : 0;
	satisfiable[640][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit640_1[i][0] ][ unit640_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit640_1[i][2] ][ unit640_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit640_1[i][4] ][ unit640_1[i][5] ] >0);
		X_contra = ( LargeX[640][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit640_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[640][0]=0; L[640][1]=1;}
			satisfiable[640][1]=satisfiable[640][1] & ((x[640] ^ 1) | (x[ unit640_1[i][0] ] ^ unit640_1[i][1]) |(x[ unit640_1[i][2] ] ^ unit640_1[i][3]));
			}
		if(X_contra>0) L[640][1]=2;
		}
	//Check all rules of unit[641][0]
	L[641][0] = LargeX[641][1]>0 ? 1 : 0;
	satisfiable[641][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit641_0[i][0] ][ unit641_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit641_0[i][2] ][ unit641_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit641_0[i][4] ][ unit641_0[i][5] ] >0);
		X_contra = ( LargeX[641][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit641_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[641][1]=0; L[641][0]=1;}
			satisfiable[641][0]=satisfiable[641][0] & ((x[641] ^ 0) | (x[ unit641_0[i][0] ] ^ unit641_0[i][1]) |(x[ unit641_0[i][2] ] ^ unit641_0[i][3]));
			}
		if(X_contra>0) L[641][0]=2;
		}
	//Check all rules of unit[641][1]
	L[641][1] = LargeX[641][0]>0 ? 1 : 0;
	satisfiable[641][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit641_1[i][0] ][ unit641_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit641_1[i][2] ][ unit641_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit641_1[i][4] ][ unit641_1[i][5] ] >0);
		X_contra = ( LargeX[641][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit641_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[641][0]=0; L[641][1]=1;}
			satisfiable[641][1]=satisfiable[641][1] & ((x[641] ^ 1) | (x[ unit641_1[i][0] ] ^ unit641_1[i][1]) |(x[ unit641_1[i][2] ] ^ unit641_1[i][3]));
			}
		if(X_contra>0) L[641][1]=2;
		}
	//Check all rules of unit[642][0]
	L[642][0] = LargeX[642][1]>0 ? 1 : 0;
	satisfiable[642][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit642_0[i][0] ][ unit642_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit642_0[i][2] ][ unit642_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit642_0[i][4] ][ unit642_0[i][5] ] >0);
		X_contra = ( LargeX[642][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit642_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[642][1]=0; L[642][0]=1;}
			satisfiable[642][0]=satisfiable[642][0] & ((x[642] ^ 0) | (x[ unit642_0[i][0] ] ^ unit642_0[i][1]) |(x[ unit642_0[i][2] ] ^ unit642_0[i][3]));
			}
		if(X_contra>0) L[642][0]=2;
		}
	//Check all rules of unit[642][1]
	L[642][1] = LargeX[642][0]>0 ? 1 : 0;
	satisfiable[642][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit642_1[i][0] ][ unit642_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit642_1[i][2] ][ unit642_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit642_1[i][4] ][ unit642_1[i][5] ] >0);
		X_contra = ( LargeX[642][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit642_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[642][0]=0; L[642][1]=1;}
			satisfiable[642][1]=satisfiable[642][1] & ((x[642] ^ 1) | (x[ unit642_1[i][0] ] ^ unit642_1[i][1]) |(x[ unit642_1[i][2] ] ^ unit642_1[i][3]));
			}
		if(X_contra>0) L[642][1]=2;
		}
	//Check all rules of unit[643][0]
	L[643][0] = LargeX[643][1]>0 ? 1 : 0;
	satisfiable[643][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit643_0[i][0] ][ unit643_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit643_0[i][2] ][ unit643_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit643_0[i][4] ][ unit643_0[i][5] ] >0);
		X_contra = ( LargeX[643][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit643_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[643][1]=0; L[643][0]=1;}
			satisfiable[643][0]=satisfiable[643][0] & ((x[643] ^ 0) | (x[ unit643_0[i][0] ] ^ unit643_0[i][1]) |(x[ unit643_0[i][2] ] ^ unit643_0[i][3]));
			}
		if(X_contra>0) L[643][0]=2;
		}
	//Check all rules of unit[643][1]
	L[643][1] = LargeX[643][0]>0 ? 1 : 0;
	satisfiable[643][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit643_1[i][0] ][ unit643_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit643_1[i][2] ][ unit643_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit643_1[i][4] ][ unit643_1[i][5] ] >0);
		X_contra = ( LargeX[643][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit643_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[643][0]=0; L[643][1]=1;}
			satisfiable[643][1]=satisfiable[643][1] & ((x[643] ^ 1) | (x[ unit643_1[i][0] ] ^ unit643_1[i][1]) |(x[ unit643_1[i][2] ] ^ unit643_1[i][3]));
			}
		if(X_contra>0) L[643][1]=2;
		}
	//Check all rules of unit[644][0]
	L[644][0] = LargeX[644][1]>0 ? 1 : 0;
	satisfiable[644][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit644_0[i][0] ][ unit644_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit644_0[i][2] ][ unit644_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit644_0[i][4] ][ unit644_0[i][5] ] >0);
		X_contra = ( LargeX[644][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit644_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[644][1]=0; L[644][0]=1;}
			satisfiable[644][0]=satisfiable[644][0] & ((x[644] ^ 0) | (x[ unit644_0[i][0] ] ^ unit644_0[i][1]) |(x[ unit644_0[i][2] ] ^ unit644_0[i][3]));
			}
		if(X_contra>0) L[644][0]=2;
		}
	//Check all rules of unit[644][1]
	L[644][1] = LargeX[644][0]>0 ? 1 : 0;
	satisfiable[644][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit644_1[i][0] ][ unit644_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit644_1[i][2] ][ unit644_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit644_1[i][4] ][ unit644_1[i][5] ] >0);
		X_contra = ( LargeX[644][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit644_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[644][0]=0; L[644][1]=1;}
			satisfiable[644][1]=satisfiable[644][1] & ((x[644] ^ 1) | (x[ unit644_1[i][0] ] ^ unit644_1[i][1]) |(x[ unit644_1[i][2] ] ^ unit644_1[i][3]));
			}
		if(X_contra>0) L[644][1]=2;
		}
	//Check all rules of unit[645][0]
	L[645][0] = LargeX[645][1]>0 ? 1 : 0;
	satisfiable[645][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit645_0[i][0] ][ unit645_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit645_0[i][2] ][ unit645_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit645_0[i][4] ][ unit645_0[i][5] ] >0);
		X_contra = ( LargeX[645][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit645_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[645][1]=0; L[645][0]=1;}
			satisfiable[645][0]=satisfiable[645][0] & ((x[645] ^ 0) | (x[ unit645_0[i][0] ] ^ unit645_0[i][1]) |(x[ unit645_0[i][2] ] ^ unit645_0[i][3]));
			}
		if(X_contra>0) L[645][0]=2;
		}
	//Check all rules of unit[645][1]
	L[645][1] = LargeX[645][0]>0 ? 1 : 0;
	satisfiable[645][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit645_1[i][0] ][ unit645_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit645_1[i][2] ][ unit645_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit645_1[i][4] ][ unit645_1[i][5] ] >0);
		X_contra = ( LargeX[645][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit645_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[645][0]=0; L[645][1]=1;}
			satisfiable[645][1]=satisfiable[645][1] & ((x[645] ^ 1) | (x[ unit645_1[i][0] ] ^ unit645_1[i][1]) |(x[ unit645_1[i][2] ] ^ unit645_1[i][3]));
			}
		if(X_contra>0) L[645][1]=2;
		}
	//Check all rules of unit[646][0]
	L[646][0] = LargeX[646][1]>0 ? 1 : 0;
	satisfiable[646][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit646_0[i][0] ][ unit646_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit646_0[i][2] ][ unit646_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit646_0[i][4] ][ unit646_0[i][5] ] >0);
		X_contra = ( LargeX[646][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit646_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[646][1]=0; L[646][0]=1;}
			satisfiable[646][0]=satisfiable[646][0] & ((x[646] ^ 0) | (x[ unit646_0[i][0] ] ^ unit646_0[i][1]) |(x[ unit646_0[i][2] ] ^ unit646_0[i][3]));
			}
		if(X_contra>0) L[646][0]=2;
		}
	//Check all rules of unit[646][1]
	L[646][1] = LargeX[646][0]>0 ? 1 : 0;
	satisfiable[646][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit646_1[i][0] ][ unit646_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit646_1[i][2] ][ unit646_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit646_1[i][4] ][ unit646_1[i][5] ] >0);
		X_contra = ( LargeX[646][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit646_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[646][0]=0; L[646][1]=1;}
			satisfiable[646][1]=satisfiable[646][1] & ((x[646] ^ 1) | (x[ unit646_1[i][0] ] ^ unit646_1[i][1]) |(x[ unit646_1[i][2] ] ^ unit646_1[i][3]));
			}
		if(X_contra>0) L[646][1]=2;
		}
	//Check all rules of unit[647][0]
	L[647][0] = LargeX[647][1]>0 ? 1 : 0;
	satisfiable[647][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit647_0[i][0] ][ unit647_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit647_0[i][2] ][ unit647_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit647_0[i][4] ][ unit647_0[i][5] ] >0);
		X_contra = ( LargeX[647][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit647_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[647][1]=0; L[647][0]=1;}
			satisfiable[647][0]=satisfiable[647][0] & ((x[647] ^ 0) | (x[ unit647_0[i][0] ] ^ unit647_0[i][1]) |(x[ unit647_0[i][2] ] ^ unit647_0[i][3]));
			}
		if(X_contra>0) L[647][0]=2;
		}
	//Check all rules of unit[647][1]
	L[647][1] = LargeX[647][0]>0 ? 1 : 0;
	satisfiable[647][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit647_1[i][0] ][ unit647_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit647_1[i][2] ][ unit647_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit647_1[i][4] ][ unit647_1[i][5] ] >0);
		X_contra = ( LargeX[647][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit647_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[647][0]=0; L[647][1]=1;}
			satisfiable[647][1]=satisfiable[647][1] & ((x[647] ^ 1) | (x[ unit647_1[i][0] ] ^ unit647_1[i][1]) |(x[ unit647_1[i][2] ] ^ unit647_1[i][3]));
			}
		if(X_contra>0) L[647][1]=2;
		}
	//Check all rules of unit[648][0]
	L[648][0] = LargeX[648][1]>0 ? 1 : 0;
	satisfiable[648][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit648_0[i][0] ][ unit648_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit648_0[i][2] ][ unit648_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit648_0[i][4] ][ unit648_0[i][5] ] >0);
		X_contra = ( LargeX[648][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit648_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[648][1]=0; L[648][0]=1;}
			satisfiable[648][0]=satisfiable[648][0] & ((x[648] ^ 0) | (x[ unit648_0[i][0] ] ^ unit648_0[i][1]) |(x[ unit648_0[i][2] ] ^ unit648_0[i][3]));
			}
		if(X_contra>0) L[648][0]=2;
		}
	//Check all rules of unit[648][1]
	L[648][1] = LargeX[648][0]>0 ? 1 : 0;
	satisfiable[648][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit648_1[i][0] ][ unit648_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit648_1[i][2] ][ unit648_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit648_1[i][4] ][ unit648_1[i][5] ] >0);
		X_contra = ( LargeX[648][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit648_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[648][0]=0; L[648][1]=1;}
			satisfiable[648][1]=satisfiable[648][1] & ((x[648] ^ 1) | (x[ unit648_1[i][0] ] ^ unit648_1[i][1]) |(x[ unit648_1[i][2] ] ^ unit648_1[i][3]));
			}
		if(X_contra>0) L[648][1]=2;
		}
	//Check all rules of unit[649][0]
	L[649][0] = LargeX[649][1]>0 ? 1 : 0;
	satisfiable[649][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit649_0[i][0] ][ unit649_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit649_0[i][2] ][ unit649_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit649_0[i][4] ][ unit649_0[i][5] ] >0);
		X_contra = ( LargeX[649][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit649_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[649][1]=0; L[649][0]=1;}
			satisfiable[649][0]=satisfiable[649][0] & ((x[649] ^ 0) | (x[ unit649_0[i][0] ] ^ unit649_0[i][1]) |(x[ unit649_0[i][2] ] ^ unit649_0[i][3]));
			}
		if(X_contra>0) L[649][0]=2;
		}
	//Check all rules of unit[649][1]
	L[649][1] = LargeX[649][0]>0 ? 1 : 0;
	satisfiable[649][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit649_1[i][0] ][ unit649_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit649_1[i][2] ][ unit649_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit649_1[i][4] ][ unit649_1[i][5] ] >0);
		X_contra = ( LargeX[649][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit649_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[649][0]=0; L[649][1]=1;}
			satisfiable[649][1]=satisfiable[649][1] & ((x[649] ^ 1) | (x[ unit649_1[i][0] ] ^ unit649_1[i][1]) |(x[ unit649_1[i][2] ] ^ unit649_1[i][3]));
			}
		if(X_contra>0) L[649][1]=2;
		}
	//Check all rules of unit[650][0]
	L[650][0] = LargeX[650][1]>0 ? 1 : 0;
	satisfiable[650][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit650_0[i][0] ][ unit650_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit650_0[i][2] ][ unit650_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit650_0[i][4] ][ unit650_0[i][5] ] >0);
		X_contra = ( LargeX[650][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit650_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[650][1]=0; L[650][0]=1;}
			satisfiable[650][0]=satisfiable[650][0] & ((x[650] ^ 0) | (x[ unit650_0[i][0] ] ^ unit650_0[i][1]) |(x[ unit650_0[i][2] ] ^ unit650_0[i][3]));
			}
		if(X_contra>0) L[650][0]=2;
		}
	//Check all rules of unit[650][1]
	L[650][1] = LargeX[650][0]>0 ? 1 : 0;
	satisfiable[650][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit650_1[i][0] ][ unit650_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit650_1[i][2] ][ unit650_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit650_1[i][4] ][ unit650_1[i][5] ] >0);
		X_contra = ( LargeX[650][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit650_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[650][0]=0; L[650][1]=1;}
			satisfiable[650][1]=satisfiable[650][1] & ((x[650] ^ 1) | (x[ unit650_1[i][0] ] ^ unit650_1[i][1]) |(x[ unit650_1[i][2] ] ^ unit650_1[i][3]));
			}
		if(X_contra>0) L[650][1]=2;
		}
	//Check all rules of unit[651][0]
	L[651][0] = LargeX[651][1]>0 ? 1 : 0;
	satisfiable[651][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit651_0[i][0] ][ unit651_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit651_0[i][2] ][ unit651_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit651_0[i][4] ][ unit651_0[i][5] ] >0);
		X_contra = ( LargeX[651][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit651_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[651][1]=0; L[651][0]=1;}
			satisfiable[651][0]=satisfiable[651][0] & ((x[651] ^ 0) | (x[ unit651_0[i][0] ] ^ unit651_0[i][1]) |(x[ unit651_0[i][2] ] ^ unit651_0[i][3]));
			}
		if(X_contra>0) L[651][0]=2;
		}
	//Check all rules of unit[651][1]
	L[651][1] = LargeX[651][0]>0 ? 1 : 0;
	satisfiable[651][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit651_1[i][0] ][ unit651_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit651_1[i][2] ][ unit651_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit651_1[i][4] ][ unit651_1[i][5] ] >0);
		X_contra = ( LargeX[651][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit651_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[651][0]=0; L[651][1]=1;}
			satisfiable[651][1]=satisfiable[651][1] & ((x[651] ^ 1) | (x[ unit651_1[i][0] ] ^ unit651_1[i][1]) |(x[ unit651_1[i][2] ] ^ unit651_1[i][3]));
			}
		if(X_contra>0) L[651][1]=2;
		}
	//Check all rules of unit[652][0]
	L[652][0] = LargeX[652][1]>0 ? 1 : 0;
	satisfiable[652][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit652_0[i][0] ][ unit652_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit652_0[i][2] ][ unit652_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit652_0[i][4] ][ unit652_0[i][5] ] >0);
		X_contra = ( LargeX[652][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit652_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[652][1]=0; L[652][0]=1;}
			satisfiable[652][0]=satisfiable[652][0] & ((x[652] ^ 0) | (x[ unit652_0[i][0] ] ^ unit652_0[i][1]) |(x[ unit652_0[i][2] ] ^ unit652_0[i][3]));
			}
		if(X_contra>0) L[652][0]=2;
		}
	//Check all rules of unit[652][1]
	L[652][1] = LargeX[652][0]>0 ? 1 : 0;
	satisfiable[652][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit652_1[i][0] ][ unit652_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit652_1[i][2] ][ unit652_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit652_1[i][4] ][ unit652_1[i][5] ] >0);
		X_contra = ( LargeX[652][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit652_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[652][0]=0; L[652][1]=1;}
			satisfiable[652][1]=satisfiable[652][1] & ((x[652] ^ 1) | (x[ unit652_1[i][0] ] ^ unit652_1[i][1]) |(x[ unit652_1[i][2] ] ^ unit652_1[i][3]));
			}
		if(X_contra>0) L[652][1]=2;
		}
	//Check all rules of unit[653][0]
	L[653][0] = LargeX[653][1]>0 ? 1 : 0;
	satisfiable[653][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit653_0[i][0] ][ unit653_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit653_0[i][2] ][ unit653_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit653_0[i][4] ][ unit653_0[i][5] ] >0);
		X_contra = ( LargeX[653][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit653_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[653][1]=0; L[653][0]=1;}
			satisfiable[653][0]=satisfiable[653][0] & ((x[653] ^ 0) | (x[ unit653_0[i][0] ] ^ unit653_0[i][1]) |(x[ unit653_0[i][2] ] ^ unit653_0[i][3]));
			}
		if(X_contra>0) L[653][0]=2;
		}
	//Check all rules of unit[653][1]
	L[653][1] = LargeX[653][0]>0 ? 1 : 0;
	satisfiable[653][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit653_1[i][0] ][ unit653_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit653_1[i][2] ][ unit653_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit653_1[i][4] ][ unit653_1[i][5] ] >0);
		X_contra = ( LargeX[653][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit653_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[653][0]=0; L[653][1]=1;}
			satisfiable[653][1]=satisfiable[653][1] & ((x[653] ^ 1) | (x[ unit653_1[i][0] ] ^ unit653_1[i][1]) |(x[ unit653_1[i][2] ] ^ unit653_1[i][3]));
			}
		if(X_contra>0) L[653][1]=2;
		}
	//Check all rules of unit[654][0]
	L[654][0] = LargeX[654][1]>0 ? 1 : 0;
	satisfiable[654][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit654_0[i][0] ][ unit654_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit654_0[i][2] ][ unit654_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit654_0[i][4] ][ unit654_0[i][5] ] >0);
		X_contra = ( LargeX[654][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit654_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[654][1]=0; L[654][0]=1;}
			satisfiable[654][0]=satisfiable[654][0] & ((x[654] ^ 0) | (x[ unit654_0[i][0] ] ^ unit654_0[i][1]) |(x[ unit654_0[i][2] ] ^ unit654_0[i][3]));
			}
		if(X_contra>0) L[654][0]=2;
		}
	//Check all rules of unit[654][1]
	L[654][1] = LargeX[654][0]>0 ? 1 : 0;
	satisfiable[654][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit654_1[i][0] ][ unit654_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit654_1[i][2] ][ unit654_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit654_1[i][4] ][ unit654_1[i][5] ] >0);
		X_contra = ( LargeX[654][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit654_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[654][0]=0; L[654][1]=1;}
			satisfiable[654][1]=satisfiable[654][1] & ((x[654] ^ 1) | (x[ unit654_1[i][0] ] ^ unit654_1[i][1]) |(x[ unit654_1[i][2] ] ^ unit654_1[i][3]));
			}
		if(X_contra>0) L[654][1]=2;
		}
	//Check all rules of unit[655][0]
	L[655][0] = LargeX[655][1]>0 ? 1 : 0;
	satisfiable[655][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit655_0[i][0] ][ unit655_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit655_0[i][2] ][ unit655_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit655_0[i][4] ][ unit655_0[i][5] ] >0);
		X_contra = ( LargeX[655][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit655_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[655][1]=0; L[655][0]=1;}
			satisfiable[655][0]=satisfiable[655][0] & ((x[655] ^ 0) | (x[ unit655_0[i][0] ] ^ unit655_0[i][1]) |(x[ unit655_0[i][2] ] ^ unit655_0[i][3]));
			}
		if(X_contra>0) L[655][0]=2;
		}
	//Check all rules of unit[655][1]
	L[655][1] = LargeX[655][0]>0 ? 1 : 0;
	satisfiable[655][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit655_1[i][0] ][ unit655_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit655_1[i][2] ][ unit655_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit655_1[i][4] ][ unit655_1[i][5] ] >0);
		X_contra = ( LargeX[655][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit655_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[655][0]=0; L[655][1]=1;}
			satisfiable[655][1]=satisfiable[655][1] & ((x[655] ^ 1) | (x[ unit655_1[i][0] ] ^ unit655_1[i][1]) |(x[ unit655_1[i][2] ] ^ unit655_1[i][3]));
			}
		if(X_contra>0) L[655][1]=2;
		}
	//Check all rules of unit[656][0]
	L[656][0] = LargeX[656][1]>0 ? 1 : 0;
	satisfiable[656][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit656_0[i][0] ][ unit656_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit656_0[i][2] ][ unit656_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit656_0[i][4] ][ unit656_0[i][5] ] >0);
		X_contra = ( LargeX[656][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit656_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[656][1]=0; L[656][0]=1;}
			satisfiable[656][0]=satisfiable[656][0] & ((x[656] ^ 0) | (x[ unit656_0[i][0] ] ^ unit656_0[i][1]) |(x[ unit656_0[i][2] ] ^ unit656_0[i][3]));
			}
		if(X_contra>0) L[656][0]=2;
		}
	//Check all rules of unit[656][1]
	L[656][1] = LargeX[656][0]>0 ? 1 : 0;
	satisfiable[656][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit656_1[i][0] ][ unit656_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit656_1[i][2] ][ unit656_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit656_1[i][4] ][ unit656_1[i][5] ] >0);
		X_contra = ( LargeX[656][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit656_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[656][0]=0; L[656][1]=1;}
			satisfiable[656][1]=satisfiable[656][1] & ((x[656] ^ 1) | (x[ unit656_1[i][0] ] ^ unit656_1[i][1]) |(x[ unit656_1[i][2] ] ^ unit656_1[i][3]));
			}
		if(X_contra>0) L[656][1]=2;
		}
	//Check all rules of unit[657][0]
	L[657][0] = LargeX[657][1]>0 ? 1 : 0;
	satisfiable[657][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit657_0[i][0] ][ unit657_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit657_0[i][2] ][ unit657_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit657_0[i][4] ][ unit657_0[i][5] ] >0);
		X_contra = ( LargeX[657][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit657_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[657][1]=0; L[657][0]=1;}
			satisfiable[657][0]=satisfiable[657][0] & ((x[657] ^ 0) | (x[ unit657_0[i][0] ] ^ unit657_0[i][1]) |(x[ unit657_0[i][2] ] ^ unit657_0[i][3]));
			}
		if(X_contra>0) L[657][0]=2;
		}
	//Check all rules of unit[657][1]
	L[657][1] = LargeX[657][0]>0 ? 1 : 0;
	satisfiable[657][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit657_1[i][0] ][ unit657_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit657_1[i][2] ][ unit657_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit657_1[i][4] ][ unit657_1[i][5] ] >0);
		X_contra = ( LargeX[657][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit657_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[657][0]=0; L[657][1]=1;}
			satisfiable[657][1]=satisfiable[657][1] & ((x[657] ^ 1) | (x[ unit657_1[i][0] ] ^ unit657_1[i][1]) |(x[ unit657_1[i][2] ] ^ unit657_1[i][3]));
			}
		if(X_contra>0) L[657][1]=2;
		}
	//Check all rules of unit[658][0]
	L[658][0] = LargeX[658][1]>0 ? 1 : 0;
	satisfiable[658][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit658_0[i][0] ][ unit658_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit658_0[i][2] ][ unit658_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit658_0[i][4] ][ unit658_0[i][5] ] >0);
		X_contra = ( LargeX[658][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit658_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[658][1]=0; L[658][0]=1;}
			satisfiable[658][0]=satisfiable[658][0] & ((x[658] ^ 0) | (x[ unit658_0[i][0] ] ^ unit658_0[i][1]) |(x[ unit658_0[i][2] ] ^ unit658_0[i][3]));
			}
		if(X_contra>0) L[658][0]=2;
		}
	//Check all rules of unit[658][1]
	L[658][1] = LargeX[658][0]>0 ? 1 : 0;
	satisfiable[658][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit658_1[i][0] ][ unit658_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit658_1[i][2] ][ unit658_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit658_1[i][4] ][ unit658_1[i][5] ] >0);
		X_contra = ( LargeX[658][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit658_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[658][0]=0; L[658][1]=1;}
			satisfiable[658][1]=satisfiable[658][1] & ((x[658] ^ 1) | (x[ unit658_1[i][0] ] ^ unit658_1[i][1]) |(x[ unit658_1[i][2] ] ^ unit658_1[i][3]));
			}
		if(X_contra>0) L[658][1]=2;
		}
	//Check all rules of unit[659][0]
	L[659][0] = LargeX[659][1]>0 ? 1 : 0;
	satisfiable[659][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit659_0[i][0] ][ unit659_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit659_0[i][2] ][ unit659_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit659_0[i][4] ][ unit659_0[i][5] ] >0);
		X_contra = ( LargeX[659][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit659_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[659][1]=0; L[659][0]=1;}
			satisfiable[659][0]=satisfiable[659][0] & ((x[659] ^ 0) | (x[ unit659_0[i][0] ] ^ unit659_0[i][1]) |(x[ unit659_0[i][2] ] ^ unit659_0[i][3]));
			}
		if(X_contra>0) L[659][0]=2;
		}
	//Check all rules of unit[659][1]
	L[659][1] = LargeX[659][0]>0 ? 1 : 0;
	satisfiable[659][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit659_1[i][0] ][ unit659_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit659_1[i][2] ][ unit659_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit659_1[i][4] ][ unit659_1[i][5] ] >0);
		X_contra = ( LargeX[659][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit659_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[659][0]=0; L[659][1]=1;}
			satisfiable[659][1]=satisfiable[659][1] & ((x[659] ^ 1) | (x[ unit659_1[i][0] ] ^ unit659_1[i][1]) |(x[ unit659_1[i][2] ] ^ unit659_1[i][3]));
			}
		if(X_contra>0) L[659][1]=2;
		}
	//Check all rules of unit[660][0]
	L[660][0] = LargeX[660][1]>0 ? 1 : 0;
	satisfiable[660][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit660_0[i][0] ][ unit660_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit660_0[i][2] ][ unit660_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit660_0[i][4] ][ unit660_0[i][5] ] >0);
		X_contra = ( LargeX[660][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit660_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[660][1]=0; L[660][0]=1;}
			satisfiable[660][0]=satisfiable[660][0] & ((x[660] ^ 0) | (x[ unit660_0[i][0] ] ^ unit660_0[i][1]) |(x[ unit660_0[i][2] ] ^ unit660_0[i][3]));
			}
		if(X_contra>0) L[660][0]=2;
		}
	//Check all rules of unit[660][1]
	L[660][1] = LargeX[660][0]>0 ? 1 : 0;
	satisfiable[660][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit660_1[i][0] ][ unit660_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit660_1[i][2] ][ unit660_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit660_1[i][4] ][ unit660_1[i][5] ] >0);
		X_contra = ( LargeX[660][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit660_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[660][0]=0; L[660][1]=1;}
			satisfiable[660][1]=satisfiable[660][1] & ((x[660] ^ 1) | (x[ unit660_1[i][0] ] ^ unit660_1[i][1]) |(x[ unit660_1[i][2] ] ^ unit660_1[i][3]));
			}
		if(X_contra>0) L[660][1]=2;
		}
	//Check all rules of unit[661][0]
	L[661][0] = LargeX[661][1]>0 ? 1 : 0;
	satisfiable[661][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit661_0[i][0] ][ unit661_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit661_0[i][2] ][ unit661_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit661_0[i][4] ][ unit661_0[i][5] ] >0);
		X_contra = ( LargeX[661][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit661_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[661][1]=0; L[661][0]=1;}
			satisfiable[661][0]=satisfiable[661][0] & ((x[661] ^ 0) | (x[ unit661_0[i][0] ] ^ unit661_0[i][1]) |(x[ unit661_0[i][2] ] ^ unit661_0[i][3]));
			}
		if(X_contra>0) L[661][0]=2;
		}
	//Check all rules of unit[661][1]
	L[661][1] = LargeX[661][0]>0 ? 1 : 0;
	satisfiable[661][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit661_1[i][0] ][ unit661_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit661_1[i][2] ][ unit661_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit661_1[i][4] ][ unit661_1[i][5] ] >0);
		X_contra = ( LargeX[661][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit661_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[661][0]=0; L[661][1]=1;}
			satisfiable[661][1]=satisfiable[661][1] & ((x[661] ^ 1) | (x[ unit661_1[i][0] ] ^ unit661_1[i][1]) |(x[ unit661_1[i][2] ] ^ unit661_1[i][3]));
			}
		if(X_contra>0) L[661][1]=2;
		}
	//Check all rules of unit[662][0]
	L[662][0] = LargeX[662][1]>0 ? 1 : 0;
	satisfiable[662][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit662_0[i][0] ][ unit662_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit662_0[i][2] ][ unit662_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit662_0[i][4] ][ unit662_0[i][5] ] >0);
		X_contra = ( LargeX[662][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit662_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[662][1]=0; L[662][0]=1;}
			satisfiable[662][0]=satisfiable[662][0] & ((x[662] ^ 0) | (x[ unit662_0[i][0] ] ^ unit662_0[i][1]) |(x[ unit662_0[i][2] ] ^ unit662_0[i][3]));
			}
		if(X_contra>0) L[662][0]=2;
		}
	//Check all rules of unit[662][1]
	L[662][1] = LargeX[662][0]>0 ? 1 : 0;
	satisfiable[662][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit662_1[i][0] ][ unit662_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit662_1[i][2] ][ unit662_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit662_1[i][4] ][ unit662_1[i][5] ] >0);
		X_contra = ( LargeX[662][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit662_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[662][0]=0; L[662][1]=1;}
			satisfiable[662][1]=satisfiable[662][1] & ((x[662] ^ 1) | (x[ unit662_1[i][0] ] ^ unit662_1[i][1]) |(x[ unit662_1[i][2] ] ^ unit662_1[i][3]));
			}
		if(X_contra>0) L[662][1]=2;
		}
	//Check all rules of unit[663][0]
	L[663][0] = LargeX[663][1]>0 ? 1 : 0;
	satisfiable[663][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit663_0[i][0] ][ unit663_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit663_0[i][2] ][ unit663_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit663_0[i][4] ][ unit663_0[i][5] ] >0);
		X_contra = ( LargeX[663][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit663_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[663][1]=0; L[663][0]=1;}
			satisfiable[663][0]=satisfiable[663][0] & ((x[663] ^ 0) | (x[ unit663_0[i][0] ] ^ unit663_0[i][1]) |(x[ unit663_0[i][2] ] ^ unit663_0[i][3]));
			}
		if(X_contra>0) L[663][0]=2;
		}
	//Check all rules of unit[663][1]
	L[663][1] = LargeX[663][0]>0 ? 1 : 0;
	satisfiable[663][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit663_1[i][0] ][ unit663_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit663_1[i][2] ][ unit663_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit663_1[i][4] ][ unit663_1[i][5] ] >0);
		X_contra = ( LargeX[663][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit663_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[663][0]=0; L[663][1]=1;}
			satisfiable[663][1]=satisfiable[663][1] & ((x[663] ^ 1) | (x[ unit663_1[i][0] ] ^ unit663_1[i][1]) |(x[ unit663_1[i][2] ] ^ unit663_1[i][3]));
			}
		if(X_contra>0) L[663][1]=2;
		}
	//Check all rules of unit[664][0]
	L[664][0] = LargeX[664][1]>0 ? 1 : 0;
	satisfiable[664][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit664_0[i][0] ][ unit664_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit664_0[i][2] ][ unit664_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit664_0[i][4] ][ unit664_0[i][5] ] >0);
		X_contra = ( LargeX[664][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit664_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[664][1]=0; L[664][0]=1;}
			satisfiable[664][0]=satisfiable[664][0] & ((x[664] ^ 0) | (x[ unit664_0[i][0] ] ^ unit664_0[i][1]) |(x[ unit664_0[i][2] ] ^ unit664_0[i][3]));
			}
		if(X_contra>0) L[664][0]=2;
		}
	//Check all rules of unit[664][1]
	L[664][1] = LargeX[664][0]>0 ? 1 : 0;
	satisfiable[664][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit664_1[i][0] ][ unit664_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit664_1[i][2] ][ unit664_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit664_1[i][4] ][ unit664_1[i][5] ] >0);
		X_contra = ( LargeX[664][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit664_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[664][0]=0; L[664][1]=1;}
			satisfiable[664][1]=satisfiable[664][1] & ((x[664] ^ 1) | (x[ unit664_1[i][0] ] ^ unit664_1[i][1]) |(x[ unit664_1[i][2] ] ^ unit664_1[i][3]));
			}
		if(X_contra>0) L[664][1]=2;
		}
	//Check all rules of unit[665][0]
	L[665][0] = LargeX[665][1]>0 ? 1 : 0;
	satisfiable[665][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit665_0[i][0] ][ unit665_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit665_0[i][2] ][ unit665_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit665_0[i][4] ][ unit665_0[i][5] ] >0);
		X_contra = ( LargeX[665][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit665_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[665][1]=0; L[665][0]=1;}
			satisfiable[665][0]=satisfiable[665][0] & ((x[665] ^ 0) | (x[ unit665_0[i][0] ] ^ unit665_0[i][1]) |(x[ unit665_0[i][2] ] ^ unit665_0[i][3]));
			}
		if(X_contra>0) L[665][0]=2;
		}
	//Check all rules of unit[665][1]
	L[665][1] = LargeX[665][0]>0 ? 1 : 0;
	satisfiable[665][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit665_1[i][0] ][ unit665_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit665_1[i][2] ][ unit665_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit665_1[i][4] ][ unit665_1[i][5] ] >0);
		X_contra = ( LargeX[665][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit665_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[665][0]=0; L[665][1]=1;}
			satisfiable[665][1]=satisfiable[665][1] & ((x[665] ^ 1) | (x[ unit665_1[i][0] ] ^ unit665_1[i][1]) |(x[ unit665_1[i][2] ] ^ unit665_1[i][3]));
			}
		if(X_contra>0) L[665][1]=2;
		}
	//Check all rules of unit[666][0]
	L[666][0] = LargeX[666][1]>0 ? 1 : 0;
	satisfiable[666][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit666_0[i][0] ][ unit666_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit666_0[i][2] ][ unit666_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit666_0[i][4] ][ unit666_0[i][5] ] >0);
		X_contra = ( LargeX[666][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit666_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[666][1]=0; L[666][0]=1;}
			satisfiable[666][0]=satisfiable[666][0] & ((x[666] ^ 0) | (x[ unit666_0[i][0] ] ^ unit666_0[i][1]) |(x[ unit666_0[i][2] ] ^ unit666_0[i][3]));
			}
		if(X_contra>0) L[666][0]=2;
		}
	//Check all rules of unit[666][1]
	L[666][1] = LargeX[666][0]>0 ? 1 : 0;
	satisfiable[666][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit666_1[i][0] ][ unit666_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit666_1[i][2] ][ unit666_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit666_1[i][4] ][ unit666_1[i][5] ] >0);
		X_contra = ( LargeX[666][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit666_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[666][0]=0; L[666][1]=1;}
			satisfiable[666][1]=satisfiable[666][1] & ((x[666] ^ 1) | (x[ unit666_1[i][0] ] ^ unit666_1[i][1]) |(x[ unit666_1[i][2] ] ^ unit666_1[i][3]));
			}
		if(X_contra>0) L[666][1]=2;
		}
	//Check all rules of unit[667][0]
	L[667][0] = LargeX[667][1]>0 ? 1 : 0;
	satisfiable[667][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit667_0[i][0] ][ unit667_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit667_0[i][2] ][ unit667_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit667_0[i][4] ][ unit667_0[i][5] ] >0);
		X_contra = ( LargeX[667][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit667_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[667][1]=0; L[667][0]=1;}
			satisfiable[667][0]=satisfiable[667][0] & ((x[667] ^ 0) | (x[ unit667_0[i][0] ] ^ unit667_0[i][1]) |(x[ unit667_0[i][2] ] ^ unit667_0[i][3]));
			}
		if(X_contra>0) L[667][0]=2;
		}
	//Check all rules of unit[667][1]
	L[667][1] = LargeX[667][0]>0 ? 1 : 0;
	satisfiable[667][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit667_1[i][0] ][ unit667_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit667_1[i][2] ][ unit667_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit667_1[i][4] ][ unit667_1[i][5] ] >0);
		X_contra = ( LargeX[667][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit667_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[667][0]=0; L[667][1]=1;}
			satisfiable[667][1]=satisfiable[667][1] & ((x[667] ^ 1) | (x[ unit667_1[i][0] ] ^ unit667_1[i][1]) |(x[ unit667_1[i][2] ] ^ unit667_1[i][3]));
			}
		if(X_contra>0) L[667][1]=2;
		}
	//Check all rules of unit[668][0]
	L[668][0] = LargeX[668][1]>0 ? 1 : 0;
	satisfiable[668][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit668_0[i][0] ][ unit668_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit668_0[i][2] ][ unit668_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit668_0[i][4] ][ unit668_0[i][5] ] >0);
		X_contra = ( LargeX[668][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit668_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[668][1]=0; L[668][0]=1;}
			satisfiable[668][0]=satisfiable[668][0] & ((x[668] ^ 0) | (x[ unit668_0[i][0] ] ^ unit668_0[i][1]) |(x[ unit668_0[i][2] ] ^ unit668_0[i][3]));
			}
		if(X_contra>0) L[668][0]=2;
		}
	//Check all rules of unit[668][1]
	L[668][1] = LargeX[668][0]>0 ? 1 : 0;
	satisfiable[668][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit668_1[i][0] ][ unit668_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit668_1[i][2] ][ unit668_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit668_1[i][4] ][ unit668_1[i][5] ] >0);
		X_contra = ( LargeX[668][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit668_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[668][0]=0; L[668][1]=1;}
			satisfiable[668][1]=satisfiable[668][1] & ((x[668] ^ 1) | (x[ unit668_1[i][0] ] ^ unit668_1[i][1]) |(x[ unit668_1[i][2] ] ^ unit668_1[i][3]));
			}
		if(X_contra>0) L[668][1]=2;
		}
	//Check all rules of unit[669][0]
	L[669][0] = LargeX[669][1]>0 ? 1 : 0;
	satisfiable[669][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit669_0[i][0] ][ unit669_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit669_0[i][2] ][ unit669_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit669_0[i][4] ][ unit669_0[i][5] ] >0);
		X_contra = ( LargeX[669][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit669_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[669][1]=0; L[669][0]=1;}
			satisfiable[669][0]=satisfiable[669][0] & ((x[669] ^ 0) | (x[ unit669_0[i][0] ] ^ unit669_0[i][1]) |(x[ unit669_0[i][2] ] ^ unit669_0[i][3]));
			}
		if(X_contra>0) L[669][0]=2;
		}
	//Check all rules of unit[669][1]
	L[669][1] = LargeX[669][0]>0 ? 1 : 0;
	satisfiable[669][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit669_1[i][0] ][ unit669_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit669_1[i][2] ][ unit669_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit669_1[i][4] ][ unit669_1[i][5] ] >0);
		X_contra = ( LargeX[669][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit669_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[669][0]=0; L[669][1]=1;}
			satisfiable[669][1]=satisfiable[669][1] & ((x[669] ^ 1) | (x[ unit669_1[i][0] ] ^ unit669_1[i][1]) |(x[ unit669_1[i][2] ] ^ unit669_1[i][3]));
			}
		if(X_contra>0) L[669][1]=2;
		}
	//Check all rules of unit[670][0]
	L[670][0] = LargeX[670][1]>0 ? 1 : 0;
	satisfiable[670][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit670_0[i][0] ][ unit670_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit670_0[i][2] ][ unit670_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit670_0[i][4] ][ unit670_0[i][5] ] >0);
		X_contra = ( LargeX[670][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit670_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[670][1]=0; L[670][0]=1;}
			satisfiable[670][0]=satisfiable[670][0] & ((x[670] ^ 0) | (x[ unit670_0[i][0] ] ^ unit670_0[i][1]) |(x[ unit670_0[i][2] ] ^ unit670_0[i][3]));
			}
		if(X_contra>0) L[670][0]=2;
		}
	//Check all rules of unit[670][1]
	L[670][1] = LargeX[670][0]>0 ? 1 : 0;
	satisfiable[670][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit670_1[i][0] ][ unit670_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit670_1[i][2] ][ unit670_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit670_1[i][4] ][ unit670_1[i][5] ] >0);
		X_contra = ( LargeX[670][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit670_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[670][0]=0; L[670][1]=1;}
			satisfiable[670][1]=satisfiable[670][1] & ((x[670] ^ 1) | (x[ unit670_1[i][0] ] ^ unit670_1[i][1]) |(x[ unit670_1[i][2] ] ^ unit670_1[i][3]));
			}
		if(X_contra>0) L[670][1]=2;
		}
	//Check all rules of unit[671][0]
	L[671][0] = LargeX[671][1]>0 ? 1 : 0;
	satisfiable[671][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit671_0[i][0] ][ unit671_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit671_0[i][2] ][ unit671_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit671_0[i][4] ][ unit671_0[i][5] ] >0);
		X_contra = ( LargeX[671][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit671_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[671][1]=0; L[671][0]=1;}
			satisfiable[671][0]=satisfiable[671][0] & ((x[671] ^ 0) | (x[ unit671_0[i][0] ] ^ unit671_0[i][1]) |(x[ unit671_0[i][2] ] ^ unit671_0[i][3]));
			}
		if(X_contra>0) L[671][0]=2;
		}
	//Check all rules of unit[671][1]
	L[671][1] = LargeX[671][0]>0 ? 1 : 0;
	satisfiable[671][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit671_1[i][0] ][ unit671_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit671_1[i][2] ][ unit671_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit671_1[i][4] ][ unit671_1[i][5] ] >0);
		X_contra = ( LargeX[671][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit671_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[671][0]=0; L[671][1]=1;}
			satisfiable[671][1]=satisfiable[671][1] & ((x[671] ^ 1) | (x[ unit671_1[i][0] ] ^ unit671_1[i][1]) |(x[ unit671_1[i][2] ] ^ unit671_1[i][3]));
			}
		if(X_contra>0) L[671][1]=2;
		}
	//Check all rules of unit[672][0]
	L[672][0] = LargeX[672][1]>0 ? 1 : 0;
	satisfiable[672][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit672_0[i][0] ][ unit672_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit672_0[i][2] ][ unit672_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit672_0[i][4] ][ unit672_0[i][5] ] >0);
		X_contra = ( LargeX[672][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit672_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[672][1]=0; L[672][0]=1;}
			satisfiable[672][0]=satisfiable[672][0] & ((x[672] ^ 0) | (x[ unit672_0[i][0] ] ^ unit672_0[i][1]) |(x[ unit672_0[i][2] ] ^ unit672_0[i][3]));
			}
		if(X_contra>0) L[672][0]=2;
		}
	//Check all rules of unit[672][1]
	L[672][1] = LargeX[672][0]>0 ? 1 : 0;
	satisfiable[672][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit672_1[i][0] ][ unit672_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit672_1[i][2] ][ unit672_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit672_1[i][4] ][ unit672_1[i][5] ] >0);
		X_contra = ( LargeX[672][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit672_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[672][0]=0; L[672][1]=1;}
			satisfiable[672][1]=satisfiable[672][1] & ((x[672] ^ 1) | (x[ unit672_1[i][0] ] ^ unit672_1[i][1]) |(x[ unit672_1[i][2] ] ^ unit672_1[i][3]));
			}
		if(X_contra>0) L[672][1]=2;
		}
	//Check all rules of unit[673][0]
	L[673][0] = LargeX[673][1]>0 ? 1 : 0;
	satisfiable[673][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit673_0[i][0] ][ unit673_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit673_0[i][2] ][ unit673_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit673_0[i][4] ][ unit673_0[i][5] ] >0);
		X_contra = ( LargeX[673][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit673_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[673][1]=0; L[673][0]=1;}
			satisfiable[673][0]=satisfiable[673][0] & ((x[673] ^ 0) | (x[ unit673_0[i][0] ] ^ unit673_0[i][1]) |(x[ unit673_0[i][2] ] ^ unit673_0[i][3]));
			}
		if(X_contra>0) L[673][0]=2;
		}
	//Check all rules of unit[673][1]
	L[673][1] = LargeX[673][0]>0 ? 1 : 0;
	satisfiable[673][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit673_1[i][0] ][ unit673_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit673_1[i][2] ][ unit673_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit673_1[i][4] ][ unit673_1[i][5] ] >0);
		X_contra = ( LargeX[673][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit673_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[673][0]=0; L[673][1]=1;}
			satisfiable[673][1]=satisfiable[673][1] & ((x[673] ^ 1) | (x[ unit673_1[i][0] ] ^ unit673_1[i][1]) |(x[ unit673_1[i][2] ] ^ unit673_1[i][3]));
			}
		if(X_contra>0) L[673][1]=2;
		}
	//Check all rules of unit[674][0]
	L[674][0] = LargeX[674][1]>0 ? 1 : 0;
	satisfiable[674][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit674_0[i][0] ][ unit674_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit674_0[i][2] ][ unit674_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit674_0[i][4] ][ unit674_0[i][5] ] >0);
		X_contra = ( LargeX[674][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit674_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[674][1]=0; L[674][0]=1;}
			satisfiable[674][0]=satisfiable[674][0] & ((x[674] ^ 0) | (x[ unit674_0[i][0] ] ^ unit674_0[i][1]) |(x[ unit674_0[i][2] ] ^ unit674_0[i][3]));
			}
		if(X_contra>0) L[674][0]=2;
		}
	//Check all rules of unit[674][1]
	L[674][1] = LargeX[674][0]>0 ? 1 : 0;
	satisfiable[674][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit674_1[i][0] ][ unit674_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit674_1[i][2] ][ unit674_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit674_1[i][4] ][ unit674_1[i][5] ] >0);
		X_contra = ( LargeX[674][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit674_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[674][0]=0; L[674][1]=1;}
			satisfiable[674][1]=satisfiable[674][1] & ((x[674] ^ 1) | (x[ unit674_1[i][0] ] ^ unit674_1[i][1]) |(x[ unit674_1[i][2] ] ^ unit674_1[i][3]));
			}
		if(X_contra>0) L[674][1]=2;
		}
	//Check all rules of unit[675][0]
	L[675][0] = LargeX[675][1]>0 ? 1 : 0;
	satisfiable[675][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit675_0[i][0] ][ unit675_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit675_0[i][2] ][ unit675_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit675_0[i][4] ][ unit675_0[i][5] ] >0);
		X_contra = ( LargeX[675][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit675_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[675][1]=0; L[675][0]=1;}
			satisfiable[675][0]=satisfiable[675][0] & ((x[675] ^ 0) | (x[ unit675_0[i][0] ] ^ unit675_0[i][1]) |(x[ unit675_0[i][2] ] ^ unit675_0[i][3]));
			}
		if(X_contra>0) L[675][0]=2;
		}
	//Check all rules of unit[675][1]
	L[675][1] = LargeX[675][0]>0 ? 1 : 0;
	satisfiable[675][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit675_1[i][0] ][ unit675_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit675_1[i][2] ][ unit675_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit675_1[i][4] ][ unit675_1[i][5] ] >0);
		X_contra = ( LargeX[675][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit675_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[675][0]=0; L[675][1]=1;}
			satisfiable[675][1]=satisfiable[675][1] & ((x[675] ^ 1) | (x[ unit675_1[i][0] ] ^ unit675_1[i][1]) |(x[ unit675_1[i][2] ] ^ unit675_1[i][3]));
			}
		if(X_contra>0) L[675][1]=2;
		}
	//Check all rules of unit[676][0]
	L[676][0] = LargeX[676][1]>0 ? 1 : 0;
	satisfiable[676][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit676_0[i][0] ][ unit676_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit676_0[i][2] ][ unit676_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit676_0[i][4] ][ unit676_0[i][5] ] >0);
		X_contra = ( LargeX[676][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit676_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[676][1]=0; L[676][0]=1;}
			satisfiable[676][0]=satisfiable[676][0] & ((x[676] ^ 0) | (x[ unit676_0[i][0] ] ^ unit676_0[i][1]) |(x[ unit676_0[i][2] ] ^ unit676_0[i][3]));
			}
		if(X_contra>0) L[676][0]=2;
		}
	//Check all rules of unit[676][1]
	L[676][1] = LargeX[676][0]>0 ? 1 : 0;
	satisfiable[676][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit676_1[i][0] ][ unit676_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit676_1[i][2] ][ unit676_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit676_1[i][4] ][ unit676_1[i][5] ] >0);
		X_contra = ( LargeX[676][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit676_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[676][0]=0; L[676][1]=1;}
			satisfiable[676][1]=satisfiable[676][1] & ((x[676] ^ 1) | (x[ unit676_1[i][0] ] ^ unit676_1[i][1]) |(x[ unit676_1[i][2] ] ^ unit676_1[i][3]));
			}
		if(X_contra>0) L[676][1]=2;
		}
	//Check all rules of unit[677][0]
	L[677][0] = LargeX[677][1]>0 ? 1 : 0;
	satisfiable[677][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit677_0[i][0] ][ unit677_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit677_0[i][2] ][ unit677_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit677_0[i][4] ][ unit677_0[i][5] ] >0);
		X_contra = ( LargeX[677][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit677_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[677][1]=0; L[677][0]=1;}
			satisfiable[677][0]=satisfiable[677][0] & ((x[677] ^ 0) | (x[ unit677_0[i][0] ] ^ unit677_0[i][1]) |(x[ unit677_0[i][2] ] ^ unit677_0[i][3]));
			}
		if(X_contra>0) L[677][0]=2;
		}
	//Check all rules of unit[677][1]
	L[677][1] = LargeX[677][0]>0 ? 1 : 0;
	satisfiable[677][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit677_1[i][0] ][ unit677_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit677_1[i][2] ][ unit677_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit677_1[i][4] ][ unit677_1[i][5] ] >0);
		X_contra = ( LargeX[677][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit677_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[677][0]=0; L[677][1]=1;}
			satisfiable[677][1]=satisfiable[677][1] & ((x[677] ^ 1) | (x[ unit677_1[i][0] ] ^ unit677_1[i][1]) |(x[ unit677_1[i][2] ] ^ unit677_1[i][3]));
			}
		if(X_contra>0) L[677][1]=2;
		}
	//Check all rules of unit[678][0]
	L[678][0] = LargeX[678][1]>0 ? 1 : 0;
	satisfiable[678][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit678_0[i][0] ][ unit678_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit678_0[i][2] ][ unit678_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit678_0[i][4] ][ unit678_0[i][5] ] >0);
		X_contra = ( LargeX[678][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit678_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[678][1]=0; L[678][0]=1;}
			satisfiable[678][0]=satisfiable[678][0] & ((x[678] ^ 0) | (x[ unit678_0[i][0] ] ^ unit678_0[i][1]) |(x[ unit678_0[i][2] ] ^ unit678_0[i][3]));
			}
		if(X_contra>0) L[678][0]=2;
		}
	//Check all rules of unit[678][1]
	L[678][1] = LargeX[678][0]>0 ? 1 : 0;
	satisfiable[678][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit678_1[i][0] ][ unit678_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit678_1[i][2] ][ unit678_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit678_1[i][4] ][ unit678_1[i][5] ] >0);
		X_contra = ( LargeX[678][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit678_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[678][0]=0; L[678][1]=1;}
			satisfiable[678][1]=satisfiable[678][1] & ((x[678] ^ 1) | (x[ unit678_1[i][0] ] ^ unit678_1[i][1]) |(x[ unit678_1[i][2] ] ^ unit678_1[i][3]));
			}
		if(X_contra>0) L[678][1]=2;
		}
	//Check all rules of unit[679][0]
	L[679][0] = LargeX[679][1]>0 ? 1 : 0;
	satisfiable[679][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit679_0[i][0] ][ unit679_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit679_0[i][2] ][ unit679_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit679_0[i][4] ][ unit679_0[i][5] ] >0);
		X_contra = ( LargeX[679][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit679_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[679][1]=0; L[679][0]=1;}
			satisfiable[679][0]=satisfiable[679][0] & ((x[679] ^ 0) | (x[ unit679_0[i][0] ] ^ unit679_0[i][1]) |(x[ unit679_0[i][2] ] ^ unit679_0[i][3]));
			}
		if(X_contra>0) L[679][0]=2;
		}
	//Check all rules of unit[679][1]
	L[679][1] = LargeX[679][0]>0 ? 1 : 0;
	satisfiable[679][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit679_1[i][0] ][ unit679_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit679_1[i][2] ][ unit679_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit679_1[i][4] ][ unit679_1[i][5] ] >0);
		X_contra = ( LargeX[679][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit679_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[679][0]=0; L[679][1]=1;}
			satisfiable[679][1]=satisfiable[679][1] & ((x[679] ^ 1) | (x[ unit679_1[i][0] ] ^ unit679_1[i][1]) |(x[ unit679_1[i][2] ] ^ unit679_1[i][3]));
			}
		if(X_contra>0) L[679][1]=2;
		}
	//Check all rules of unit[680][0]
	L[680][0] = LargeX[680][1]>0 ? 1 : 0;
	satisfiable[680][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit680_0[i][0] ][ unit680_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit680_0[i][2] ][ unit680_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit680_0[i][4] ][ unit680_0[i][5] ] >0);
		X_contra = ( LargeX[680][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit680_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[680][1]=0; L[680][0]=1;}
			satisfiable[680][0]=satisfiable[680][0] & ((x[680] ^ 0) | (x[ unit680_0[i][0] ] ^ unit680_0[i][1]) |(x[ unit680_0[i][2] ] ^ unit680_0[i][3]));
			}
		if(X_contra>0) L[680][0]=2;
		}
	//Check all rules of unit[680][1]
	L[680][1] = LargeX[680][0]>0 ? 1 : 0;
	satisfiable[680][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit680_1[i][0] ][ unit680_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit680_1[i][2] ][ unit680_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit680_1[i][4] ][ unit680_1[i][5] ] >0);
		X_contra = ( LargeX[680][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit680_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[680][0]=0; L[680][1]=1;}
			satisfiable[680][1]=satisfiable[680][1] & ((x[680] ^ 1) | (x[ unit680_1[i][0] ] ^ unit680_1[i][1]) |(x[ unit680_1[i][2] ] ^ unit680_1[i][3]));
			}
		if(X_contra>0) L[680][1]=2;
		}
	//Check all rules of unit[681][0]
	L[681][0] = LargeX[681][1]>0 ? 1 : 0;
	satisfiable[681][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit681_0[i][0] ][ unit681_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit681_0[i][2] ][ unit681_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit681_0[i][4] ][ unit681_0[i][5] ] >0);
		X_contra = ( LargeX[681][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit681_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[681][1]=0; L[681][0]=1;}
			satisfiable[681][0]=satisfiable[681][0] & ((x[681] ^ 0) | (x[ unit681_0[i][0] ] ^ unit681_0[i][1]) |(x[ unit681_0[i][2] ] ^ unit681_0[i][3]));
			}
		if(X_contra>0) L[681][0]=2;
		}
	//Check all rules of unit[681][1]
	L[681][1] = LargeX[681][0]>0 ? 1 : 0;
	satisfiable[681][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit681_1[i][0] ][ unit681_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit681_1[i][2] ][ unit681_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit681_1[i][4] ][ unit681_1[i][5] ] >0);
		X_contra = ( LargeX[681][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit681_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[681][0]=0; L[681][1]=1;}
			satisfiable[681][1]=satisfiable[681][1] & ((x[681] ^ 1) | (x[ unit681_1[i][0] ] ^ unit681_1[i][1]) |(x[ unit681_1[i][2] ] ^ unit681_1[i][3]));
			}
		if(X_contra>0) L[681][1]=2;
		}
	//Check all rules of unit[682][0]
	L[682][0] = LargeX[682][1]>0 ? 1 : 0;
	satisfiable[682][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit682_0[i][0] ][ unit682_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit682_0[i][2] ][ unit682_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit682_0[i][4] ][ unit682_0[i][5] ] >0);
		X_contra = ( LargeX[682][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit682_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[682][1]=0; L[682][0]=1;}
			satisfiable[682][0]=satisfiable[682][0] & ((x[682] ^ 0) | (x[ unit682_0[i][0] ] ^ unit682_0[i][1]) |(x[ unit682_0[i][2] ] ^ unit682_0[i][3]));
			}
		if(X_contra>0) L[682][0]=2;
		}
	//Check all rules of unit[682][1]
	L[682][1] = LargeX[682][0]>0 ? 1 : 0;
	satisfiable[682][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit682_1[i][0] ][ unit682_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit682_1[i][2] ][ unit682_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit682_1[i][4] ][ unit682_1[i][5] ] >0);
		X_contra = ( LargeX[682][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit682_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[682][0]=0; L[682][1]=1;}
			satisfiable[682][1]=satisfiable[682][1] & ((x[682] ^ 1) | (x[ unit682_1[i][0] ] ^ unit682_1[i][1]) |(x[ unit682_1[i][2] ] ^ unit682_1[i][3]));
			}
		if(X_contra>0) L[682][1]=2;
		}
	//Check all rules of unit[683][0]
	L[683][0] = LargeX[683][1]>0 ? 1 : 0;
	satisfiable[683][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit683_0[i][0] ][ unit683_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit683_0[i][2] ][ unit683_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit683_0[i][4] ][ unit683_0[i][5] ] >0);
		X_contra = ( LargeX[683][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit683_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[683][1]=0; L[683][0]=1;}
			satisfiable[683][0]=satisfiable[683][0] & ((x[683] ^ 0) | (x[ unit683_0[i][0] ] ^ unit683_0[i][1]) |(x[ unit683_0[i][2] ] ^ unit683_0[i][3]));
			}
		if(X_contra>0) L[683][0]=2;
		}
	//Check all rules of unit[683][1]
	L[683][1] = LargeX[683][0]>0 ? 1 : 0;
	satisfiable[683][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit683_1[i][0] ][ unit683_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit683_1[i][2] ][ unit683_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit683_1[i][4] ][ unit683_1[i][5] ] >0);
		X_contra = ( LargeX[683][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit683_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[683][0]=0; L[683][1]=1;}
			satisfiable[683][1]=satisfiable[683][1] & ((x[683] ^ 1) | (x[ unit683_1[i][0] ] ^ unit683_1[i][1]) |(x[ unit683_1[i][2] ] ^ unit683_1[i][3]));
			}
		if(X_contra>0) L[683][1]=2;
		}
	//Check all rules of unit[684][0]
	L[684][0] = LargeX[684][1]>0 ? 1 : 0;
	satisfiable[684][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit684_0[i][0] ][ unit684_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit684_0[i][2] ][ unit684_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit684_0[i][4] ][ unit684_0[i][5] ] >0);
		X_contra = ( LargeX[684][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit684_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[684][1]=0; L[684][0]=1;}
			satisfiable[684][0]=satisfiable[684][0] & ((x[684] ^ 0) | (x[ unit684_0[i][0] ] ^ unit684_0[i][1]) |(x[ unit684_0[i][2] ] ^ unit684_0[i][3]));
			}
		if(X_contra>0) L[684][0]=2;
		}
	//Check all rules of unit[684][1]
	L[684][1] = LargeX[684][0]>0 ? 1 : 0;
	satisfiable[684][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit684_1[i][0] ][ unit684_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit684_1[i][2] ][ unit684_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit684_1[i][4] ][ unit684_1[i][5] ] >0);
		X_contra = ( LargeX[684][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit684_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[684][0]=0; L[684][1]=1;}
			satisfiable[684][1]=satisfiable[684][1] & ((x[684] ^ 1) | (x[ unit684_1[i][0] ] ^ unit684_1[i][1]) |(x[ unit684_1[i][2] ] ^ unit684_1[i][3]));
			}
		if(X_contra>0) L[684][1]=2;
		}
	//Check all rules of unit[685][0]
	L[685][0] = LargeX[685][1]>0 ? 1 : 0;
	satisfiable[685][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit685_0[i][0] ][ unit685_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit685_0[i][2] ][ unit685_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit685_0[i][4] ][ unit685_0[i][5] ] >0);
		X_contra = ( LargeX[685][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit685_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[685][1]=0; L[685][0]=1;}
			satisfiable[685][0]=satisfiable[685][0] & ((x[685] ^ 0) | (x[ unit685_0[i][0] ] ^ unit685_0[i][1]) |(x[ unit685_0[i][2] ] ^ unit685_0[i][3]));
			}
		if(X_contra>0) L[685][0]=2;
		}
	//Check all rules of unit[685][1]
	L[685][1] = LargeX[685][0]>0 ? 1 : 0;
	satisfiable[685][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit685_1[i][0] ][ unit685_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit685_1[i][2] ][ unit685_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit685_1[i][4] ][ unit685_1[i][5] ] >0);
		X_contra = ( LargeX[685][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit685_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[685][0]=0; L[685][1]=1;}
			satisfiable[685][1]=satisfiable[685][1] & ((x[685] ^ 1) | (x[ unit685_1[i][0] ] ^ unit685_1[i][1]) |(x[ unit685_1[i][2] ] ^ unit685_1[i][3]));
			}
		if(X_contra>0) L[685][1]=2;
		}
	//Check all rules of unit[686][0]
	L[686][0] = LargeX[686][1]>0 ? 1 : 0;
	satisfiable[686][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit686_0[i][0] ][ unit686_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit686_0[i][2] ][ unit686_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit686_0[i][4] ][ unit686_0[i][5] ] >0);
		X_contra = ( LargeX[686][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit686_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[686][1]=0; L[686][0]=1;}
			satisfiable[686][0]=satisfiable[686][0] & ((x[686] ^ 0) | (x[ unit686_0[i][0] ] ^ unit686_0[i][1]) |(x[ unit686_0[i][2] ] ^ unit686_0[i][3]));
			}
		if(X_contra>0) L[686][0]=2;
		}
	//Check all rules of unit[686][1]
	L[686][1] = LargeX[686][0]>0 ? 1 : 0;
	satisfiable[686][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit686_1[i][0] ][ unit686_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit686_1[i][2] ][ unit686_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit686_1[i][4] ][ unit686_1[i][5] ] >0);
		X_contra = ( LargeX[686][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit686_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[686][0]=0; L[686][1]=1;}
			satisfiable[686][1]=satisfiable[686][1] & ((x[686] ^ 1) | (x[ unit686_1[i][0] ] ^ unit686_1[i][1]) |(x[ unit686_1[i][2] ] ^ unit686_1[i][3]));
			}
		if(X_contra>0) L[686][1]=2;
		}
	//Check all rules of unit[687][0]
	L[687][0] = LargeX[687][1]>0 ? 1 : 0;
	satisfiable[687][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit687_0[i][0] ][ unit687_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit687_0[i][2] ][ unit687_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit687_0[i][4] ][ unit687_0[i][5] ] >0);
		X_contra = ( LargeX[687][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit687_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[687][1]=0; L[687][0]=1;}
			satisfiable[687][0]=satisfiable[687][0] & ((x[687] ^ 0) | (x[ unit687_0[i][0] ] ^ unit687_0[i][1]) |(x[ unit687_0[i][2] ] ^ unit687_0[i][3]));
			}
		if(X_contra>0) L[687][0]=2;
		}
	//Check all rules of unit[687][1]
	L[687][1] = LargeX[687][0]>0 ? 1 : 0;
	satisfiable[687][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit687_1[i][0] ][ unit687_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit687_1[i][2] ][ unit687_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit687_1[i][4] ][ unit687_1[i][5] ] >0);
		X_contra = ( LargeX[687][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit687_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[687][0]=0; L[687][1]=1;}
			satisfiable[687][1]=satisfiable[687][1] & ((x[687] ^ 1) | (x[ unit687_1[i][0] ] ^ unit687_1[i][1]) |(x[ unit687_1[i][2] ] ^ unit687_1[i][3]));
			}
		if(X_contra>0) L[687][1]=2;
		}
	//Check all rules of unit[688][0]
	L[688][0] = LargeX[688][1]>0 ? 1 : 0;
	satisfiable[688][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit688_0[i][0] ][ unit688_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit688_0[i][2] ][ unit688_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit688_0[i][4] ][ unit688_0[i][5] ] >0);
		X_contra = ( LargeX[688][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit688_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[688][1]=0; L[688][0]=1;}
			satisfiable[688][0]=satisfiable[688][0] & ((x[688] ^ 0) | (x[ unit688_0[i][0] ] ^ unit688_0[i][1]) |(x[ unit688_0[i][2] ] ^ unit688_0[i][3]));
			}
		if(X_contra>0) L[688][0]=2;
		}
	//Check all rules of unit[688][1]
	L[688][1] = LargeX[688][0]>0 ? 1 : 0;
	satisfiable[688][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit688_1[i][0] ][ unit688_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit688_1[i][2] ][ unit688_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit688_1[i][4] ][ unit688_1[i][5] ] >0);
		X_contra = ( LargeX[688][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit688_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[688][0]=0; L[688][1]=1;}
			satisfiable[688][1]=satisfiable[688][1] & ((x[688] ^ 1) | (x[ unit688_1[i][0] ] ^ unit688_1[i][1]) |(x[ unit688_1[i][2] ] ^ unit688_1[i][3]));
			}
		if(X_contra>0) L[688][1]=2;
		}
	//Check all rules of unit[689][0]
	L[689][0] = LargeX[689][1]>0 ? 1 : 0;
	satisfiable[689][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit689_0[i][0] ][ unit689_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit689_0[i][2] ][ unit689_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit689_0[i][4] ][ unit689_0[i][5] ] >0);
		X_contra = ( LargeX[689][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit689_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[689][1]=0; L[689][0]=1;}
			satisfiable[689][0]=satisfiable[689][0] & ((x[689] ^ 0) | (x[ unit689_0[i][0] ] ^ unit689_0[i][1]) |(x[ unit689_0[i][2] ] ^ unit689_0[i][3]));
			}
		if(X_contra>0) L[689][0]=2;
		}
	//Check all rules of unit[689][1]
	L[689][1] = LargeX[689][0]>0 ? 1 : 0;
	satisfiable[689][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit689_1[i][0] ][ unit689_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit689_1[i][2] ][ unit689_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit689_1[i][4] ][ unit689_1[i][5] ] >0);
		X_contra = ( LargeX[689][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit689_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[689][0]=0; L[689][1]=1;}
			satisfiable[689][1]=satisfiable[689][1] & ((x[689] ^ 1) | (x[ unit689_1[i][0] ] ^ unit689_1[i][1]) |(x[ unit689_1[i][2] ] ^ unit689_1[i][3]));
			}
		if(X_contra>0) L[689][1]=2;
		}
	//Check all rules of unit[690][0]
	L[690][0] = LargeX[690][1]>0 ? 1 : 0;
	satisfiable[690][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit690_0[i][0] ][ unit690_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit690_0[i][2] ][ unit690_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit690_0[i][4] ][ unit690_0[i][5] ] >0);
		X_contra = ( LargeX[690][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit690_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[690][1]=0; L[690][0]=1;}
			satisfiable[690][0]=satisfiable[690][0] & ((x[690] ^ 0) | (x[ unit690_0[i][0] ] ^ unit690_0[i][1]) |(x[ unit690_0[i][2] ] ^ unit690_0[i][3]));
			}
		if(X_contra>0) L[690][0]=2;
		}
	//Check all rules of unit[690][1]
	L[690][1] = LargeX[690][0]>0 ? 1 : 0;
	satisfiable[690][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit690_1[i][0] ][ unit690_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit690_1[i][2] ][ unit690_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit690_1[i][4] ][ unit690_1[i][5] ] >0);
		X_contra = ( LargeX[690][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit690_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[690][0]=0; L[690][1]=1;}
			satisfiable[690][1]=satisfiable[690][1] & ((x[690] ^ 1) | (x[ unit690_1[i][0] ] ^ unit690_1[i][1]) |(x[ unit690_1[i][2] ] ^ unit690_1[i][3]));
			}
		if(X_contra>0) L[690][1]=2;
		}
	//Check all rules of unit[691][0]
	L[691][0] = LargeX[691][1]>0 ? 1 : 0;
	satisfiable[691][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit691_0[i][0] ][ unit691_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit691_0[i][2] ][ unit691_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit691_0[i][4] ][ unit691_0[i][5] ] >0);
		X_contra = ( LargeX[691][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit691_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[691][1]=0; L[691][0]=1;}
			satisfiable[691][0]=satisfiable[691][0] & ((x[691] ^ 0) | (x[ unit691_0[i][0] ] ^ unit691_0[i][1]) |(x[ unit691_0[i][2] ] ^ unit691_0[i][3]));
			}
		if(X_contra>0) L[691][0]=2;
		}
	//Check all rules of unit[691][1]
	L[691][1] = LargeX[691][0]>0 ? 1 : 0;
	satisfiable[691][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit691_1[i][0] ][ unit691_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit691_1[i][2] ][ unit691_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit691_1[i][4] ][ unit691_1[i][5] ] >0);
		X_contra = ( LargeX[691][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit691_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[691][0]=0; L[691][1]=1;}
			satisfiable[691][1]=satisfiable[691][1] & ((x[691] ^ 1) | (x[ unit691_1[i][0] ] ^ unit691_1[i][1]) |(x[ unit691_1[i][2] ] ^ unit691_1[i][3]));
			}
		if(X_contra>0) L[691][1]=2;
		}
	//Check all rules of unit[692][0]
	L[692][0] = LargeX[692][1]>0 ? 1 : 0;
	satisfiable[692][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit692_0[i][0] ][ unit692_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit692_0[i][2] ][ unit692_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit692_0[i][4] ][ unit692_0[i][5] ] >0);
		X_contra = ( LargeX[692][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit692_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[692][1]=0; L[692][0]=1;}
			satisfiable[692][0]=satisfiable[692][0] & ((x[692] ^ 0) | (x[ unit692_0[i][0] ] ^ unit692_0[i][1]) |(x[ unit692_0[i][2] ] ^ unit692_0[i][3]));
			}
		if(X_contra>0) L[692][0]=2;
		}
	//Check all rules of unit[692][1]
	L[692][1] = LargeX[692][0]>0 ? 1 : 0;
	satisfiable[692][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit692_1[i][0] ][ unit692_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit692_1[i][2] ][ unit692_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit692_1[i][4] ][ unit692_1[i][5] ] >0);
		X_contra = ( LargeX[692][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit692_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[692][0]=0; L[692][1]=1;}
			satisfiable[692][1]=satisfiable[692][1] & ((x[692] ^ 1) | (x[ unit692_1[i][0] ] ^ unit692_1[i][1]) |(x[ unit692_1[i][2] ] ^ unit692_1[i][3]));
			}
		if(X_contra>0) L[692][1]=2;
		}
	//Check all rules of unit[693][0]
	L[693][0] = LargeX[693][1]>0 ? 1 : 0;
	satisfiable[693][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit693_0[i][0] ][ unit693_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit693_0[i][2] ][ unit693_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit693_0[i][4] ][ unit693_0[i][5] ] >0);
		X_contra = ( LargeX[693][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit693_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[693][1]=0; L[693][0]=1;}
			satisfiable[693][0]=satisfiable[693][0] & ((x[693] ^ 0) | (x[ unit693_0[i][0] ] ^ unit693_0[i][1]) |(x[ unit693_0[i][2] ] ^ unit693_0[i][3]));
			}
		if(X_contra>0) L[693][0]=2;
		}
	//Check all rules of unit[693][1]
	L[693][1] = LargeX[693][0]>0 ? 1 : 0;
	satisfiable[693][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit693_1[i][0] ][ unit693_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit693_1[i][2] ][ unit693_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit693_1[i][4] ][ unit693_1[i][5] ] >0);
		X_contra = ( LargeX[693][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit693_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[693][0]=0; L[693][1]=1;}
			satisfiable[693][1]=satisfiable[693][1] & ((x[693] ^ 1) | (x[ unit693_1[i][0] ] ^ unit693_1[i][1]) |(x[ unit693_1[i][2] ] ^ unit693_1[i][3]));
			}
		if(X_contra>0) L[693][1]=2;
		}
	//Check all rules of unit[694][0]
	L[694][0] = LargeX[694][1]>0 ? 1 : 0;
	satisfiable[694][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit694_0[i][0] ][ unit694_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit694_0[i][2] ][ unit694_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit694_0[i][4] ][ unit694_0[i][5] ] >0);
		X_contra = ( LargeX[694][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit694_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[694][1]=0; L[694][0]=1;}
			satisfiable[694][0]=satisfiable[694][0] & ((x[694] ^ 0) | (x[ unit694_0[i][0] ] ^ unit694_0[i][1]) |(x[ unit694_0[i][2] ] ^ unit694_0[i][3]));
			}
		if(X_contra>0) L[694][0]=2;
		}
	//Check all rules of unit[694][1]
	L[694][1] = LargeX[694][0]>0 ? 1 : 0;
	satisfiable[694][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit694_1[i][0] ][ unit694_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit694_1[i][2] ][ unit694_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit694_1[i][4] ][ unit694_1[i][5] ] >0);
		X_contra = ( LargeX[694][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit694_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[694][0]=0; L[694][1]=1;}
			satisfiable[694][1]=satisfiable[694][1] & ((x[694] ^ 1) | (x[ unit694_1[i][0] ] ^ unit694_1[i][1]) |(x[ unit694_1[i][2] ] ^ unit694_1[i][3]));
			}
		if(X_contra>0) L[694][1]=2;
		}
	//Check all rules of unit[695][0]
	L[695][0] = LargeX[695][1]>0 ? 1 : 0;
	satisfiable[695][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit695_0[i][0] ][ unit695_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit695_0[i][2] ][ unit695_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit695_0[i][4] ][ unit695_0[i][5] ] >0);
		X_contra = ( LargeX[695][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit695_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[695][1]=0; L[695][0]=1;}
			satisfiable[695][0]=satisfiable[695][0] & ((x[695] ^ 0) | (x[ unit695_0[i][0] ] ^ unit695_0[i][1]) |(x[ unit695_0[i][2] ] ^ unit695_0[i][3]));
			}
		if(X_contra>0) L[695][0]=2;
		}
	//Check all rules of unit[695][1]
	L[695][1] = LargeX[695][0]>0 ? 1 : 0;
	satisfiable[695][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit695_1[i][0] ][ unit695_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit695_1[i][2] ][ unit695_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit695_1[i][4] ][ unit695_1[i][5] ] >0);
		X_contra = ( LargeX[695][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit695_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[695][0]=0; L[695][1]=1;}
			satisfiable[695][1]=satisfiable[695][1] & ((x[695] ^ 1) | (x[ unit695_1[i][0] ] ^ unit695_1[i][1]) |(x[ unit695_1[i][2] ] ^ unit695_1[i][3]));
			}
		if(X_contra>0) L[695][1]=2;
		}
	//Check all rules of unit[696][0]
	L[696][0] = LargeX[696][1]>0 ? 1 : 0;
	satisfiable[696][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit696_0[i][0] ][ unit696_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit696_0[i][2] ][ unit696_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit696_0[i][4] ][ unit696_0[i][5] ] >0);
		X_contra = ( LargeX[696][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit696_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[696][1]=0; L[696][0]=1;}
			satisfiable[696][0]=satisfiable[696][0] & ((x[696] ^ 0) | (x[ unit696_0[i][0] ] ^ unit696_0[i][1]) |(x[ unit696_0[i][2] ] ^ unit696_0[i][3]));
			}
		if(X_contra>0) L[696][0]=2;
		}
	//Check all rules of unit[696][1]
	L[696][1] = LargeX[696][0]>0 ? 1 : 0;
	satisfiable[696][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit696_1[i][0] ][ unit696_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit696_1[i][2] ][ unit696_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit696_1[i][4] ][ unit696_1[i][5] ] >0);
		X_contra = ( LargeX[696][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit696_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[696][0]=0; L[696][1]=1;}
			satisfiable[696][1]=satisfiable[696][1] & ((x[696] ^ 1) | (x[ unit696_1[i][0] ] ^ unit696_1[i][1]) |(x[ unit696_1[i][2] ] ^ unit696_1[i][3]));
			}
		if(X_contra>0) L[696][1]=2;
		}
	//Check all rules of unit[697][0]
	L[697][0] = LargeX[697][1]>0 ? 1 : 0;
	satisfiable[697][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit697_0[i][0] ][ unit697_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit697_0[i][2] ][ unit697_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit697_0[i][4] ][ unit697_0[i][5] ] >0);
		X_contra = ( LargeX[697][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit697_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[697][1]=0; L[697][0]=1;}
			satisfiable[697][0]=satisfiable[697][0] & ((x[697] ^ 0) | (x[ unit697_0[i][0] ] ^ unit697_0[i][1]) |(x[ unit697_0[i][2] ] ^ unit697_0[i][3]));
			}
		if(X_contra>0) L[697][0]=2;
		}
	//Check all rules of unit[697][1]
	L[697][1] = LargeX[697][0]>0 ? 1 : 0;
	satisfiable[697][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit697_1[i][0] ][ unit697_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit697_1[i][2] ][ unit697_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit697_1[i][4] ][ unit697_1[i][5] ] >0);
		X_contra = ( LargeX[697][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit697_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[697][0]=0; L[697][1]=1;}
			satisfiable[697][1]=satisfiable[697][1] & ((x[697] ^ 1) | (x[ unit697_1[i][0] ] ^ unit697_1[i][1]) |(x[ unit697_1[i][2] ] ^ unit697_1[i][3]));
			}
		if(X_contra>0) L[697][1]=2;
		}
	//Check all rules of unit[698][0]
	L[698][0] = LargeX[698][1]>0 ? 1 : 0;
	satisfiable[698][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit698_0[i][0] ][ unit698_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit698_0[i][2] ][ unit698_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit698_0[i][4] ][ unit698_0[i][5] ] >0);
		X_contra = ( LargeX[698][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit698_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[698][1]=0; L[698][0]=1;}
			satisfiable[698][0]=satisfiable[698][0] & ((x[698] ^ 0) | (x[ unit698_0[i][0] ] ^ unit698_0[i][1]) |(x[ unit698_0[i][2] ] ^ unit698_0[i][3]));
			}
		if(X_contra>0) L[698][0]=2;
		}
	//Check all rules of unit[698][1]
	L[698][1] = LargeX[698][0]>0 ? 1 : 0;
	satisfiable[698][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit698_1[i][0] ][ unit698_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit698_1[i][2] ][ unit698_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit698_1[i][4] ][ unit698_1[i][5] ] >0);
		X_contra = ( LargeX[698][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit698_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[698][0]=0; L[698][1]=1;}
			satisfiable[698][1]=satisfiable[698][1] & ((x[698] ^ 1) | (x[ unit698_1[i][0] ] ^ unit698_1[i][1]) |(x[ unit698_1[i][2] ] ^ unit698_1[i][3]));
			}
		if(X_contra>0) L[698][1]=2;
		}
	//Check all rules of unit[699][0]
	L[699][0] = LargeX[699][1]>0 ? 1 : 0;
	satisfiable[699][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit699_0[i][0] ][ unit699_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit699_0[i][2] ][ unit699_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit699_0[i][4] ][ unit699_0[i][5] ] >0);
		X_contra = ( LargeX[699][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit699_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[699][1]=0; L[699][0]=1;}
			satisfiable[699][0]=satisfiable[699][0] & ((x[699] ^ 0) | (x[ unit699_0[i][0] ] ^ unit699_0[i][1]) |(x[ unit699_0[i][2] ] ^ unit699_0[i][3]));
			}
		if(X_contra>0) L[699][0]=2;
		}
	//Check all rules of unit[699][1]
	L[699][1] = LargeX[699][0]>0 ? 1 : 0;
	satisfiable[699][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit699_1[i][0] ][ unit699_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit699_1[i][2] ][ unit699_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit699_1[i][4] ][ unit699_1[i][5] ] >0);
		X_contra = ( LargeX[699][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit699_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[699][0]=0; L[699][1]=1;}
			satisfiable[699][1]=satisfiable[699][1] & ((x[699] ^ 1) | (x[ unit699_1[i][0] ] ^ unit699_1[i][1]) |(x[ unit699_1[i][2] ] ^ unit699_1[i][3]));
			}
		if(X_contra>0) L[699][1]=2;
		}
	//Check all rules of unit[700][0]
	L[700][0] = LargeX[700][1]>0 ? 1 : 0;
	satisfiable[700][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit700_0[i][0] ][ unit700_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit700_0[i][2] ][ unit700_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit700_0[i][4] ][ unit700_0[i][5] ] >0);
		X_contra = ( LargeX[700][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit700_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[700][1]=0; L[700][0]=1;}
			satisfiable[700][0]=satisfiable[700][0] & ((x[700] ^ 0) | (x[ unit700_0[i][0] ] ^ unit700_0[i][1]) |(x[ unit700_0[i][2] ] ^ unit700_0[i][3]));
			}
		if(X_contra>0) L[700][0]=2;
		}
	//Check all rules of unit[700][1]
	L[700][1] = LargeX[700][0]>0 ? 1 : 0;
	satisfiable[700][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit700_1[i][0] ][ unit700_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit700_1[i][2] ][ unit700_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit700_1[i][4] ][ unit700_1[i][5] ] >0);
		X_contra = ( LargeX[700][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit700_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[700][0]=0; L[700][1]=1;}
			satisfiable[700][1]=satisfiable[700][1] & ((x[700] ^ 1) | (x[ unit700_1[i][0] ] ^ unit700_1[i][1]) |(x[ unit700_1[i][2] ] ^ unit700_1[i][3]));
			}
		if(X_contra>0) L[700][1]=2;
		}
	//Check all rules of unit[701][0]
	L[701][0] = LargeX[701][1]>0 ? 1 : 0;
	satisfiable[701][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit701_0[i][0] ][ unit701_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit701_0[i][2] ][ unit701_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit701_0[i][4] ][ unit701_0[i][5] ] >0);
		X_contra = ( LargeX[701][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit701_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[701][1]=0; L[701][0]=1;}
			satisfiable[701][0]=satisfiable[701][0] & ((x[701] ^ 0) | (x[ unit701_0[i][0] ] ^ unit701_0[i][1]) |(x[ unit701_0[i][2] ] ^ unit701_0[i][3]));
			}
		if(X_contra>0) L[701][0]=2;
		}
	//Check all rules of unit[701][1]
	L[701][1] = LargeX[701][0]>0 ? 1 : 0;
	satisfiable[701][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit701_1[i][0] ][ unit701_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit701_1[i][2] ][ unit701_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit701_1[i][4] ][ unit701_1[i][5] ] >0);
		X_contra = ( LargeX[701][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit701_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[701][0]=0; L[701][1]=1;}
			satisfiable[701][1]=satisfiable[701][1] & ((x[701] ^ 1) | (x[ unit701_1[i][0] ] ^ unit701_1[i][1]) |(x[ unit701_1[i][2] ] ^ unit701_1[i][3]));
			}
		if(X_contra>0) L[701][1]=2;
		}
	//Check all rules of unit[702][0]
	L[702][0] = LargeX[702][1]>0 ? 1 : 0;
	satisfiable[702][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit702_0[i][0] ][ unit702_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit702_0[i][2] ][ unit702_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit702_0[i][4] ][ unit702_0[i][5] ] >0);
		X_contra = ( LargeX[702][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit702_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[702][1]=0; L[702][0]=1;}
			satisfiable[702][0]=satisfiable[702][0] & ((x[702] ^ 0) | (x[ unit702_0[i][0] ] ^ unit702_0[i][1]) |(x[ unit702_0[i][2] ] ^ unit702_0[i][3]));
			}
		if(X_contra>0) L[702][0]=2;
		}
	//Check all rules of unit[702][1]
	L[702][1] = LargeX[702][0]>0 ? 1 : 0;
	satisfiable[702][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit702_1[i][0] ][ unit702_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit702_1[i][2] ][ unit702_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit702_1[i][4] ][ unit702_1[i][5] ] >0);
		X_contra = ( LargeX[702][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit702_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[702][0]=0; L[702][1]=1;}
			satisfiable[702][1]=satisfiable[702][1] & ((x[702] ^ 1) | (x[ unit702_1[i][0] ] ^ unit702_1[i][1]) |(x[ unit702_1[i][2] ] ^ unit702_1[i][3]));
			}
		if(X_contra>0) L[702][1]=2;
		}
	//Check all rules of unit[703][0]
	L[703][0] = LargeX[703][1]>0 ? 1 : 0;
	satisfiable[703][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit703_0[i][0] ][ unit703_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit703_0[i][2] ][ unit703_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit703_0[i][4] ][ unit703_0[i][5] ] >0);
		X_contra = ( LargeX[703][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit703_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[703][1]=0; L[703][0]=1;}
			satisfiable[703][0]=satisfiable[703][0] & ((x[703] ^ 0) | (x[ unit703_0[i][0] ] ^ unit703_0[i][1]) |(x[ unit703_0[i][2] ] ^ unit703_0[i][3]));
			}
		if(X_contra>0) L[703][0]=2;
		}
	//Check all rules of unit[703][1]
	L[703][1] = LargeX[703][0]>0 ? 1 : 0;
	satisfiable[703][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit703_1[i][0] ][ unit703_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit703_1[i][2] ][ unit703_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit703_1[i][4] ][ unit703_1[i][5] ] >0);
		X_contra = ( LargeX[703][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit703_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[703][0]=0; L[703][1]=1;}
			satisfiable[703][1]=satisfiable[703][1] & ((x[703] ^ 1) | (x[ unit703_1[i][0] ] ^ unit703_1[i][1]) |(x[ unit703_1[i][2] ] ^ unit703_1[i][3]));
			}
		if(X_contra>0) L[703][1]=2;
		}
	//Check all rules of unit[704][0]
	L[704][0] = LargeX[704][1]>0 ? 1 : 0;
	satisfiable[704][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit704_0[i][0] ][ unit704_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit704_0[i][2] ][ unit704_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit704_0[i][4] ][ unit704_0[i][5] ] >0);
		X_contra = ( LargeX[704][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit704_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[704][1]=0; L[704][0]=1;}
			satisfiable[704][0]=satisfiable[704][0] & ((x[704] ^ 0) | (x[ unit704_0[i][0] ] ^ unit704_0[i][1]) |(x[ unit704_0[i][2] ] ^ unit704_0[i][3]));
			}
		if(X_contra>0) L[704][0]=2;
		}
	//Check all rules of unit[704][1]
	L[704][1] = LargeX[704][0]>0 ? 1 : 0;
	satisfiable[704][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit704_1[i][0] ][ unit704_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit704_1[i][2] ][ unit704_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit704_1[i][4] ][ unit704_1[i][5] ] >0);
		X_contra = ( LargeX[704][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit704_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[704][0]=0; L[704][1]=1;}
			satisfiable[704][1]=satisfiable[704][1] & ((x[704] ^ 1) | (x[ unit704_1[i][0] ] ^ unit704_1[i][1]) |(x[ unit704_1[i][2] ] ^ unit704_1[i][3]));
			}
		if(X_contra>0) L[704][1]=2;
		}
	//Check all rules of unit[705][0]
	L[705][0] = LargeX[705][1]>0 ? 1 : 0;
	satisfiable[705][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit705_0[i][0] ][ unit705_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit705_0[i][2] ][ unit705_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit705_0[i][4] ][ unit705_0[i][5] ] >0);
		X_contra = ( LargeX[705][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit705_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[705][1]=0; L[705][0]=1;}
			satisfiable[705][0]=satisfiable[705][0] & ((x[705] ^ 0) | (x[ unit705_0[i][0] ] ^ unit705_0[i][1]) |(x[ unit705_0[i][2] ] ^ unit705_0[i][3]));
			}
		if(X_contra>0) L[705][0]=2;
		}
	//Check all rules of unit[705][1]
	L[705][1] = LargeX[705][0]>0 ? 1 : 0;
	satisfiable[705][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit705_1[i][0] ][ unit705_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit705_1[i][2] ][ unit705_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit705_1[i][4] ][ unit705_1[i][5] ] >0);
		X_contra = ( LargeX[705][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit705_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[705][0]=0; L[705][1]=1;}
			satisfiable[705][1]=satisfiable[705][1] & ((x[705] ^ 1) | (x[ unit705_1[i][0] ] ^ unit705_1[i][1]) |(x[ unit705_1[i][2] ] ^ unit705_1[i][3]));
			}
		if(X_contra>0) L[705][1]=2;
		}
	//Check all rules of unit[706][0]
	L[706][0] = LargeX[706][1]>0 ? 1 : 0;
	satisfiable[706][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit706_0[i][0] ][ unit706_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit706_0[i][2] ][ unit706_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit706_0[i][4] ][ unit706_0[i][5] ] >0);
		X_contra = ( LargeX[706][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit706_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[706][1]=0; L[706][0]=1;}
			satisfiable[706][0]=satisfiable[706][0] & ((x[706] ^ 0) | (x[ unit706_0[i][0] ] ^ unit706_0[i][1]) |(x[ unit706_0[i][2] ] ^ unit706_0[i][3]));
			}
		if(X_contra>0) L[706][0]=2;
		}
	//Check all rules of unit[706][1]
	L[706][1] = LargeX[706][0]>0 ? 1 : 0;
	satisfiable[706][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit706_1[i][0] ][ unit706_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit706_1[i][2] ][ unit706_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit706_1[i][4] ][ unit706_1[i][5] ] >0);
		X_contra = ( LargeX[706][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit706_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[706][0]=0; L[706][1]=1;}
			satisfiable[706][1]=satisfiable[706][1] & ((x[706] ^ 1) | (x[ unit706_1[i][0] ] ^ unit706_1[i][1]) |(x[ unit706_1[i][2] ] ^ unit706_1[i][3]));
			}
		if(X_contra>0) L[706][1]=2;
		}
	//Check all rules of unit[707][0]
	L[707][0] = LargeX[707][1]>0 ? 1 : 0;
	satisfiable[707][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit707_0[i][0] ][ unit707_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit707_0[i][2] ][ unit707_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit707_0[i][4] ][ unit707_0[i][5] ] >0);
		X_contra = ( LargeX[707][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit707_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[707][1]=0; L[707][0]=1;}
			satisfiable[707][0]=satisfiable[707][0] & ((x[707] ^ 0) | (x[ unit707_0[i][0] ] ^ unit707_0[i][1]) |(x[ unit707_0[i][2] ] ^ unit707_0[i][3]));
			}
		if(X_contra>0) L[707][0]=2;
		}
	//Check all rules of unit[707][1]
	L[707][1] = LargeX[707][0]>0 ? 1 : 0;
	satisfiable[707][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit707_1[i][0] ][ unit707_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit707_1[i][2] ][ unit707_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit707_1[i][4] ][ unit707_1[i][5] ] >0);
		X_contra = ( LargeX[707][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit707_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[707][0]=0; L[707][1]=1;}
			satisfiable[707][1]=satisfiable[707][1] & ((x[707] ^ 1) | (x[ unit707_1[i][0] ] ^ unit707_1[i][1]) |(x[ unit707_1[i][2] ] ^ unit707_1[i][3]));
			}
		if(X_contra>0) L[707][1]=2;
		}
	//Check all rules of unit[708][0]
	L[708][0] = LargeX[708][1]>0 ? 1 : 0;
	satisfiable[708][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit708_0[i][0] ][ unit708_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit708_0[i][2] ][ unit708_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit708_0[i][4] ][ unit708_0[i][5] ] >0);
		X_contra = ( LargeX[708][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit708_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[708][1]=0; L[708][0]=1;}
			satisfiable[708][0]=satisfiable[708][0] & ((x[708] ^ 0) | (x[ unit708_0[i][0] ] ^ unit708_0[i][1]) |(x[ unit708_0[i][2] ] ^ unit708_0[i][3]));
			}
		if(X_contra>0) L[708][0]=2;
		}
	//Check all rules of unit[708][1]
	L[708][1] = LargeX[708][0]>0 ? 1 : 0;
	satisfiable[708][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit708_1[i][0] ][ unit708_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit708_1[i][2] ][ unit708_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit708_1[i][4] ][ unit708_1[i][5] ] >0);
		X_contra = ( LargeX[708][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit708_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[708][0]=0; L[708][1]=1;}
			satisfiable[708][1]=satisfiable[708][1] & ((x[708] ^ 1) | (x[ unit708_1[i][0] ] ^ unit708_1[i][1]) |(x[ unit708_1[i][2] ] ^ unit708_1[i][3]));
			}
		if(X_contra>0) L[708][1]=2;
		}
	//Check all rules of unit[709][0]
	L[709][0] = LargeX[709][1]>0 ? 1 : 0;
	satisfiable[709][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit709_0[i][0] ][ unit709_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit709_0[i][2] ][ unit709_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit709_0[i][4] ][ unit709_0[i][5] ] >0);
		X_contra = ( LargeX[709][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit709_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[709][1]=0; L[709][0]=1;}
			satisfiable[709][0]=satisfiable[709][0] & ((x[709] ^ 0) | (x[ unit709_0[i][0] ] ^ unit709_0[i][1]) |(x[ unit709_0[i][2] ] ^ unit709_0[i][3]));
			}
		if(X_contra>0) L[709][0]=2;
		}
	//Check all rules of unit[709][1]
	L[709][1] = LargeX[709][0]>0 ? 1 : 0;
	satisfiable[709][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit709_1[i][0] ][ unit709_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit709_1[i][2] ][ unit709_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit709_1[i][4] ][ unit709_1[i][5] ] >0);
		X_contra = ( LargeX[709][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit709_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[709][0]=0; L[709][1]=1;}
			satisfiable[709][1]=satisfiable[709][1] & ((x[709] ^ 1) | (x[ unit709_1[i][0] ] ^ unit709_1[i][1]) |(x[ unit709_1[i][2] ] ^ unit709_1[i][3]));
			}
		if(X_contra>0) L[709][1]=2;
		}
	//Check all rules of unit[710][0]
	L[710][0] = LargeX[710][1]>0 ? 1 : 0;
	satisfiable[710][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit710_0[i][0] ][ unit710_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit710_0[i][2] ][ unit710_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit710_0[i][4] ][ unit710_0[i][5] ] >0);
		X_contra = ( LargeX[710][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit710_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[710][1]=0; L[710][0]=1;}
			satisfiable[710][0]=satisfiable[710][0] & ((x[710] ^ 0) | (x[ unit710_0[i][0] ] ^ unit710_0[i][1]) |(x[ unit710_0[i][2] ] ^ unit710_0[i][3]));
			}
		if(X_contra>0) L[710][0]=2;
		}
	//Check all rules of unit[710][1]
	L[710][1] = LargeX[710][0]>0 ? 1 : 0;
	satisfiable[710][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit710_1[i][0] ][ unit710_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit710_1[i][2] ][ unit710_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit710_1[i][4] ][ unit710_1[i][5] ] >0);
		X_contra = ( LargeX[710][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit710_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[710][0]=0; L[710][1]=1;}
			satisfiable[710][1]=satisfiable[710][1] & ((x[710] ^ 1) | (x[ unit710_1[i][0] ] ^ unit710_1[i][1]) |(x[ unit710_1[i][2] ] ^ unit710_1[i][3]));
			}
		if(X_contra>0) L[710][1]=2;
		}
	//Check all rules of unit[711][0]
	L[711][0] = LargeX[711][1]>0 ? 1 : 0;
	satisfiable[711][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit711_0[i][0] ][ unit711_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit711_0[i][2] ][ unit711_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit711_0[i][4] ][ unit711_0[i][5] ] >0);
		X_contra = ( LargeX[711][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit711_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[711][1]=0; L[711][0]=1;}
			satisfiable[711][0]=satisfiable[711][0] & ((x[711] ^ 0) | (x[ unit711_0[i][0] ] ^ unit711_0[i][1]) |(x[ unit711_0[i][2] ] ^ unit711_0[i][3]));
			}
		if(X_contra>0) L[711][0]=2;
		}
	//Check all rules of unit[711][1]
	L[711][1] = LargeX[711][0]>0 ? 1 : 0;
	satisfiable[711][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit711_1[i][0] ][ unit711_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit711_1[i][2] ][ unit711_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit711_1[i][4] ][ unit711_1[i][5] ] >0);
		X_contra = ( LargeX[711][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit711_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[711][0]=0; L[711][1]=1;}
			satisfiable[711][1]=satisfiable[711][1] & ((x[711] ^ 1) | (x[ unit711_1[i][0] ] ^ unit711_1[i][1]) |(x[ unit711_1[i][2] ] ^ unit711_1[i][3]));
			}
		if(X_contra>0) L[711][1]=2;
		}
	//Check all rules of unit[712][0]
	L[712][0] = LargeX[712][1]>0 ? 1 : 0;
	satisfiable[712][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit712_0[i][0] ][ unit712_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit712_0[i][2] ][ unit712_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit712_0[i][4] ][ unit712_0[i][5] ] >0);
		X_contra = ( LargeX[712][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit712_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[712][1]=0; L[712][0]=1;}
			satisfiable[712][0]=satisfiable[712][0] & ((x[712] ^ 0) | (x[ unit712_0[i][0] ] ^ unit712_0[i][1]) |(x[ unit712_0[i][2] ] ^ unit712_0[i][3]));
			}
		if(X_contra>0) L[712][0]=2;
		}
	//Check all rules of unit[712][1]
	L[712][1] = LargeX[712][0]>0 ? 1 : 0;
	satisfiable[712][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit712_1[i][0] ][ unit712_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit712_1[i][2] ][ unit712_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit712_1[i][4] ][ unit712_1[i][5] ] >0);
		X_contra = ( LargeX[712][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit712_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[712][0]=0; L[712][1]=1;}
			satisfiable[712][1]=satisfiable[712][1] & ((x[712] ^ 1) | (x[ unit712_1[i][0] ] ^ unit712_1[i][1]) |(x[ unit712_1[i][2] ] ^ unit712_1[i][3]));
			}
		if(X_contra>0) L[712][1]=2;
		}
	//Check all rules of unit[713][0]
	L[713][0] = LargeX[713][1]>0 ? 1 : 0;
	satisfiable[713][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit713_0[i][0] ][ unit713_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit713_0[i][2] ][ unit713_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit713_0[i][4] ][ unit713_0[i][5] ] >0);
		X_contra = ( LargeX[713][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit713_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[713][1]=0; L[713][0]=1;}
			satisfiable[713][0]=satisfiable[713][0] & ((x[713] ^ 0) | (x[ unit713_0[i][0] ] ^ unit713_0[i][1]) |(x[ unit713_0[i][2] ] ^ unit713_0[i][3]));
			}
		if(X_contra>0) L[713][0]=2;
		}
	//Check all rules of unit[713][1]
	L[713][1] = LargeX[713][0]>0 ? 1 : 0;
	satisfiable[713][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit713_1[i][0] ][ unit713_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit713_1[i][2] ][ unit713_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit713_1[i][4] ][ unit713_1[i][5] ] >0);
		X_contra = ( LargeX[713][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit713_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[713][0]=0; L[713][1]=1;}
			satisfiable[713][1]=satisfiable[713][1] & ((x[713] ^ 1) | (x[ unit713_1[i][0] ] ^ unit713_1[i][1]) |(x[ unit713_1[i][2] ] ^ unit713_1[i][3]));
			}
		if(X_contra>0) L[713][1]=2;
		}
	//Check all rules of unit[714][0]
	L[714][0] = LargeX[714][1]>0 ? 1 : 0;
	satisfiable[714][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit714_0[i][0] ][ unit714_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit714_0[i][2] ][ unit714_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit714_0[i][4] ][ unit714_0[i][5] ] >0);
		X_contra = ( LargeX[714][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit714_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[714][1]=0; L[714][0]=1;}
			satisfiable[714][0]=satisfiable[714][0] & ((x[714] ^ 0) | (x[ unit714_0[i][0] ] ^ unit714_0[i][1]) |(x[ unit714_0[i][2] ] ^ unit714_0[i][3]));
			}
		if(X_contra>0) L[714][0]=2;
		}
	//Check all rules of unit[714][1]
	L[714][1] = LargeX[714][0]>0 ? 1 : 0;
	satisfiable[714][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit714_1[i][0] ][ unit714_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit714_1[i][2] ][ unit714_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit714_1[i][4] ][ unit714_1[i][5] ] >0);
		X_contra = ( LargeX[714][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit714_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[714][0]=0; L[714][1]=1;}
			satisfiable[714][1]=satisfiable[714][1] & ((x[714] ^ 1) | (x[ unit714_1[i][0] ] ^ unit714_1[i][1]) |(x[ unit714_1[i][2] ] ^ unit714_1[i][3]));
			}
		if(X_contra>0) L[714][1]=2;
		}
	//Check all rules of unit[715][0]
	L[715][0] = LargeX[715][1]>0 ? 1 : 0;
	satisfiable[715][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit715_0[i][0] ][ unit715_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit715_0[i][2] ][ unit715_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit715_0[i][4] ][ unit715_0[i][5] ] >0);
		X_contra = ( LargeX[715][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit715_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[715][1]=0; L[715][0]=1;}
			satisfiable[715][0]=satisfiable[715][0] & ((x[715] ^ 0) | (x[ unit715_0[i][0] ] ^ unit715_0[i][1]) |(x[ unit715_0[i][2] ] ^ unit715_0[i][3]));
			}
		if(X_contra>0) L[715][0]=2;
		}
	//Check all rules of unit[715][1]
	L[715][1] = LargeX[715][0]>0 ? 1 : 0;
	satisfiable[715][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit715_1[i][0] ][ unit715_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit715_1[i][2] ][ unit715_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit715_1[i][4] ][ unit715_1[i][5] ] >0);
		X_contra = ( LargeX[715][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit715_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[715][0]=0; L[715][1]=1;}
			satisfiable[715][1]=satisfiable[715][1] & ((x[715] ^ 1) | (x[ unit715_1[i][0] ] ^ unit715_1[i][1]) |(x[ unit715_1[i][2] ] ^ unit715_1[i][3]));
			}
		if(X_contra>0) L[715][1]=2;
		}
	//Check all rules of unit[716][0]
	L[716][0] = LargeX[716][1]>0 ? 1 : 0;
	satisfiable[716][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit716_0[i][0] ][ unit716_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit716_0[i][2] ][ unit716_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit716_0[i][4] ][ unit716_0[i][5] ] >0);
		X_contra = ( LargeX[716][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit716_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[716][1]=0; L[716][0]=1;}
			satisfiable[716][0]=satisfiable[716][0] & ((x[716] ^ 0) | (x[ unit716_0[i][0] ] ^ unit716_0[i][1]) |(x[ unit716_0[i][2] ] ^ unit716_0[i][3]));
			}
		if(X_contra>0) L[716][0]=2;
		}
	//Check all rules of unit[716][1]
	L[716][1] = LargeX[716][0]>0 ? 1 : 0;
	satisfiable[716][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit716_1[i][0] ][ unit716_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit716_1[i][2] ][ unit716_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit716_1[i][4] ][ unit716_1[i][5] ] >0);
		X_contra = ( LargeX[716][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit716_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[716][0]=0; L[716][1]=1;}
			satisfiable[716][1]=satisfiable[716][1] & ((x[716] ^ 1) | (x[ unit716_1[i][0] ] ^ unit716_1[i][1]) |(x[ unit716_1[i][2] ] ^ unit716_1[i][3]));
			}
		if(X_contra>0) L[716][1]=2;
		}
	//Check all rules of unit[717][0]
	L[717][0] = LargeX[717][1]>0 ? 1 : 0;
	satisfiable[717][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit717_0[i][0] ][ unit717_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit717_0[i][2] ][ unit717_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit717_0[i][4] ][ unit717_0[i][5] ] >0);
		X_contra = ( LargeX[717][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit717_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[717][1]=0; L[717][0]=1;}
			satisfiable[717][0]=satisfiable[717][0] & ((x[717] ^ 0) | (x[ unit717_0[i][0] ] ^ unit717_0[i][1]) |(x[ unit717_0[i][2] ] ^ unit717_0[i][3]));
			}
		if(X_contra>0) L[717][0]=2;
		}
	//Check all rules of unit[717][1]
	L[717][1] = LargeX[717][0]>0 ? 1 : 0;
	satisfiable[717][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit717_1[i][0] ][ unit717_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit717_1[i][2] ][ unit717_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit717_1[i][4] ][ unit717_1[i][5] ] >0);
		X_contra = ( LargeX[717][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit717_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[717][0]=0; L[717][1]=1;}
			satisfiable[717][1]=satisfiable[717][1] & ((x[717] ^ 1) | (x[ unit717_1[i][0] ] ^ unit717_1[i][1]) |(x[ unit717_1[i][2] ] ^ unit717_1[i][3]));
			}
		if(X_contra>0) L[717][1]=2;
		}
	//Check all rules of unit[718][0]
	L[718][0] = LargeX[718][1]>0 ? 1 : 0;
	satisfiable[718][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit718_0[i][0] ][ unit718_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit718_0[i][2] ][ unit718_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit718_0[i][4] ][ unit718_0[i][5] ] >0);
		X_contra = ( LargeX[718][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit718_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[718][1]=0; L[718][0]=1;}
			satisfiable[718][0]=satisfiable[718][0] & ((x[718] ^ 0) | (x[ unit718_0[i][0] ] ^ unit718_0[i][1]) |(x[ unit718_0[i][2] ] ^ unit718_0[i][3]));
			}
		if(X_contra>0) L[718][0]=2;
		}
	//Check all rules of unit[718][1]
	L[718][1] = LargeX[718][0]>0 ? 1 : 0;
	satisfiable[718][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit718_1[i][0] ][ unit718_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit718_1[i][2] ][ unit718_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit718_1[i][4] ][ unit718_1[i][5] ] >0);
		X_contra = ( LargeX[718][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit718_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[718][0]=0; L[718][1]=1;}
			satisfiable[718][1]=satisfiable[718][1] & ((x[718] ^ 1) | (x[ unit718_1[i][0] ] ^ unit718_1[i][1]) |(x[ unit718_1[i][2] ] ^ unit718_1[i][3]));
			}
		if(X_contra>0) L[718][1]=2;
		}
	//Check all rules of unit[719][0]
	L[719][0] = LargeX[719][1]>0 ? 1 : 0;
	satisfiable[719][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit719_0[i][0] ][ unit719_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit719_0[i][2] ][ unit719_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit719_0[i][4] ][ unit719_0[i][5] ] >0);
		X_contra = ( LargeX[719][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit719_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[719][1]=0; L[719][0]=1;}
			satisfiable[719][0]=satisfiable[719][0] & ((x[719] ^ 0) | (x[ unit719_0[i][0] ] ^ unit719_0[i][1]) |(x[ unit719_0[i][2] ] ^ unit719_0[i][3]));
			}
		if(X_contra>0) L[719][0]=2;
		}
	//Check all rules of unit[719][1]
	L[719][1] = LargeX[719][0]>0 ? 1 : 0;
	satisfiable[719][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit719_1[i][0] ][ unit719_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit719_1[i][2] ][ unit719_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit719_1[i][4] ][ unit719_1[i][5] ] >0);
		X_contra = ( LargeX[719][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit719_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[719][0]=0; L[719][1]=1;}
			satisfiable[719][1]=satisfiable[719][1] & ((x[719] ^ 1) | (x[ unit719_1[i][0] ] ^ unit719_1[i][1]) |(x[ unit719_1[i][2] ] ^ unit719_1[i][3]));
			}
		if(X_contra>0) L[719][1]=2;
		}
	//Check all rules of unit[720][0]
	L[720][0] = LargeX[720][1]>0 ? 1 : 0;
	satisfiable[720][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit720_0[i][0] ][ unit720_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit720_0[i][2] ][ unit720_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit720_0[i][4] ][ unit720_0[i][5] ] >0);
		X_contra = ( LargeX[720][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit720_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[720][1]=0; L[720][0]=1;}
			satisfiable[720][0]=satisfiable[720][0] & ((x[720] ^ 0) | (x[ unit720_0[i][0] ] ^ unit720_0[i][1]) |(x[ unit720_0[i][2] ] ^ unit720_0[i][3]));
			}
		if(X_contra>0) L[720][0]=2;
		}
	//Check all rules of unit[720][1]
	L[720][1] = LargeX[720][0]>0 ? 1 : 0;
	satisfiable[720][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit720_1[i][0] ][ unit720_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit720_1[i][2] ][ unit720_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit720_1[i][4] ][ unit720_1[i][5] ] >0);
		X_contra = ( LargeX[720][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit720_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[720][0]=0; L[720][1]=1;}
			satisfiable[720][1]=satisfiable[720][1] & ((x[720] ^ 1) | (x[ unit720_1[i][0] ] ^ unit720_1[i][1]) |(x[ unit720_1[i][2] ] ^ unit720_1[i][3]));
			}
		if(X_contra>0) L[720][1]=2;
		}
	//Check all rules of unit[721][0]
	L[721][0] = LargeX[721][1]>0 ? 1 : 0;
	satisfiable[721][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit721_0[i][0] ][ unit721_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit721_0[i][2] ][ unit721_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit721_0[i][4] ][ unit721_0[i][5] ] >0);
		X_contra = ( LargeX[721][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit721_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[721][1]=0; L[721][0]=1;}
			satisfiable[721][0]=satisfiable[721][0] & ((x[721] ^ 0) | (x[ unit721_0[i][0] ] ^ unit721_0[i][1]) |(x[ unit721_0[i][2] ] ^ unit721_0[i][3]));
			}
		if(X_contra>0) L[721][0]=2;
		}
	//Check all rules of unit[721][1]
	L[721][1] = LargeX[721][0]>0 ? 1 : 0;
	satisfiable[721][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit721_1[i][0] ][ unit721_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit721_1[i][2] ][ unit721_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit721_1[i][4] ][ unit721_1[i][5] ] >0);
		X_contra = ( LargeX[721][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit721_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[721][0]=0; L[721][1]=1;}
			satisfiable[721][1]=satisfiable[721][1] & ((x[721] ^ 1) | (x[ unit721_1[i][0] ] ^ unit721_1[i][1]) |(x[ unit721_1[i][2] ] ^ unit721_1[i][3]));
			}
		if(X_contra>0) L[721][1]=2;
		}
	//Check all rules of unit[722][0]
	L[722][0] = LargeX[722][1]>0 ? 1 : 0;
	satisfiable[722][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit722_0[i][0] ][ unit722_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit722_0[i][2] ][ unit722_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit722_0[i][4] ][ unit722_0[i][5] ] >0);
		X_contra = ( LargeX[722][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit722_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[722][1]=0; L[722][0]=1;}
			satisfiable[722][0]=satisfiable[722][0] & ((x[722] ^ 0) | (x[ unit722_0[i][0] ] ^ unit722_0[i][1]) |(x[ unit722_0[i][2] ] ^ unit722_0[i][3]));
			}
		if(X_contra>0) L[722][0]=2;
		}
	//Check all rules of unit[722][1]
	L[722][1] = LargeX[722][0]>0 ? 1 : 0;
	satisfiable[722][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit722_1[i][0] ][ unit722_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit722_1[i][2] ][ unit722_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit722_1[i][4] ][ unit722_1[i][5] ] >0);
		X_contra = ( LargeX[722][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit722_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[722][0]=0; L[722][1]=1;}
			satisfiable[722][1]=satisfiable[722][1] & ((x[722] ^ 1) | (x[ unit722_1[i][0] ] ^ unit722_1[i][1]) |(x[ unit722_1[i][2] ] ^ unit722_1[i][3]));
			}
		if(X_contra>0) L[722][1]=2;
		}
	//Check all rules of unit[723][0]
	L[723][0] = LargeX[723][1]>0 ? 1 : 0;
	satisfiable[723][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit723_0[i][0] ][ unit723_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit723_0[i][2] ][ unit723_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit723_0[i][4] ][ unit723_0[i][5] ] >0);
		X_contra = ( LargeX[723][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit723_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[723][1]=0; L[723][0]=1;}
			satisfiable[723][0]=satisfiable[723][0] & ((x[723] ^ 0) | (x[ unit723_0[i][0] ] ^ unit723_0[i][1]) |(x[ unit723_0[i][2] ] ^ unit723_0[i][3]));
			}
		if(X_contra>0) L[723][0]=2;
		}
	//Check all rules of unit[723][1]
	L[723][1] = LargeX[723][0]>0 ? 1 : 0;
	satisfiable[723][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit723_1[i][0] ][ unit723_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit723_1[i][2] ][ unit723_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit723_1[i][4] ][ unit723_1[i][5] ] >0);
		X_contra = ( LargeX[723][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit723_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[723][0]=0; L[723][1]=1;}
			satisfiable[723][1]=satisfiable[723][1] & ((x[723] ^ 1) | (x[ unit723_1[i][0] ] ^ unit723_1[i][1]) |(x[ unit723_1[i][2] ] ^ unit723_1[i][3]));
			}
		if(X_contra>0) L[723][1]=2;
		}
	//Check all rules of unit[724][0]
	L[724][0] = LargeX[724][1]>0 ? 1 : 0;
	satisfiable[724][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit724_0[i][0] ][ unit724_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit724_0[i][2] ][ unit724_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit724_0[i][4] ][ unit724_0[i][5] ] >0);
		X_contra = ( LargeX[724][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit724_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[724][1]=0; L[724][0]=1;}
			satisfiable[724][0]=satisfiable[724][0] & ((x[724] ^ 0) | (x[ unit724_0[i][0] ] ^ unit724_0[i][1]) |(x[ unit724_0[i][2] ] ^ unit724_0[i][3]));
			}
		if(X_contra>0) L[724][0]=2;
		}
	//Check all rules of unit[724][1]
	L[724][1] = LargeX[724][0]>0 ? 1 : 0;
	satisfiable[724][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit724_1[i][0] ][ unit724_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit724_1[i][2] ][ unit724_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit724_1[i][4] ][ unit724_1[i][5] ] >0);
		X_contra = ( LargeX[724][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit724_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[724][0]=0; L[724][1]=1;}
			satisfiable[724][1]=satisfiable[724][1] & ((x[724] ^ 1) | (x[ unit724_1[i][0] ] ^ unit724_1[i][1]) |(x[ unit724_1[i][2] ] ^ unit724_1[i][3]));
			}
		if(X_contra>0) L[724][1]=2;
		}
	//Check all rules of unit[725][0]
	L[725][0] = LargeX[725][1]>0 ? 1 : 0;
	satisfiable[725][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit725_0[i][0] ][ unit725_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit725_0[i][2] ][ unit725_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit725_0[i][4] ][ unit725_0[i][5] ] >0);
		X_contra = ( LargeX[725][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit725_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[725][1]=0; L[725][0]=1;}
			satisfiable[725][0]=satisfiable[725][0] & ((x[725] ^ 0) | (x[ unit725_0[i][0] ] ^ unit725_0[i][1]) |(x[ unit725_0[i][2] ] ^ unit725_0[i][3]));
			}
		if(X_contra>0) L[725][0]=2;
		}
	//Check all rules of unit[725][1]
	L[725][1] = LargeX[725][0]>0 ? 1 : 0;
	satisfiable[725][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit725_1[i][0] ][ unit725_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit725_1[i][2] ][ unit725_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit725_1[i][4] ][ unit725_1[i][5] ] >0);
		X_contra = ( LargeX[725][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit725_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[725][0]=0; L[725][1]=1;}
			satisfiable[725][1]=satisfiable[725][1] & ((x[725] ^ 1) | (x[ unit725_1[i][0] ] ^ unit725_1[i][1]) |(x[ unit725_1[i][2] ] ^ unit725_1[i][3]));
			}
		if(X_contra>0) L[725][1]=2;
		}
	//Check all rules of unit[726][0]
	L[726][0] = LargeX[726][1]>0 ? 1 : 0;
	satisfiable[726][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit726_0[i][0] ][ unit726_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit726_0[i][2] ][ unit726_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit726_0[i][4] ][ unit726_0[i][5] ] >0);
		X_contra = ( LargeX[726][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit726_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[726][1]=0; L[726][0]=1;}
			satisfiable[726][0]=satisfiable[726][0] & ((x[726] ^ 0) | (x[ unit726_0[i][0] ] ^ unit726_0[i][1]) |(x[ unit726_0[i][2] ] ^ unit726_0[i][3]));
			}
		if(X_contra>0) L[726][0]=2;
		}
	//Check all rules of unit[726][1]
	L[726][1] = LargeX[726][0]>0 ? 1 : 0;
	satisfiable[726][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit726_1[i][0] ][ unit726_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit726_1[i][2] ][ unit726_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit726_1[i][4] ][ unit726_1[i][5] ] >0);
		X_contra = ( LargeX[726][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit726_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[726][0]=0; L[726][1]=1;}
			satisfiable[726][1]=satisfiable[726][1] & ((x[726] ^ 1) | (x[ unit726_1[i][0] ] ^ unit726_1[i][1]) |(x[ unit726_1[i][2] ] ^ unit726_1[i][3]));
			}
		if(X_contra>0) L[726][1]=2;
		}
	//Check all rules of unit[727][0]
	L[727][0] = LargeX[727][1]>0 ? 1 : 0;
	satisfiable[727][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit727_0[i][0] ][ unit727_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit727_0[i][2] ][ unit727_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit727_0[i][4] ][ unit727_0[i][5] ] >0);
		X_contra = ( LargeX[727][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit727_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[727][1]=0; L[727][0]=1;}
			satisfiable[727][0]=satisfiable[727][0] & ((x[727] ^ 0) | (x[ unit727_0[i][0] ] ^ unit727_0[i][1]) |(x[ unit727_0[i][2] ] ^ unit727_0[i][3]));
			}
		if(X_contra>0) L[727][0]=2;
		}
	//Check all rules of unit[727][1]
	L[727][1] = LargeX[727][0]>0 ? 1 : 0;
	satisfiable[727][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit727_1[i][0] ][ unit727_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit727_1[i][2] ][ unit727_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit727_1[i][4] ][ unit727_1[i][5] ] >0);
		X_contra = ( LargeX[727][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit727_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[727][0]=0; L[727][1]=1;}
			satisfiable[727][1]=satisfiable[727][1] & ((x[727] ^ 1) | (x[ unit727_1[i][0] ] ^ unit727_1[i][1]) |(x[ unit727_1[i][2] ] ^ unit727_1[i][3]));
			}
		if(X_contra>0) L[727][1]=2;
		}
	//Check all rules of unit[728][0]
	L[728][0] = LargeX[728][1]>0 ? 1 : 0;
	satisfiable[728][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit728_0[i][0] ][ unit728_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit728_0[i][2] ][ unit728_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit728_0[i][4] ][ unit728_0[i][5] ] >0);
		X_contra = ( LargeX[728][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit728_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[728][1]=0; L[728][0]=1;}
			satisfiable[728][0]=satisfiable[728][0] & ((x[728] ^ 0) | (x[ unit728_0[i][0] ] ^ unit728_0[i][1]) |(x[ unit728_0[i][2] ] ^ unit728_0[i][3]));
			}
		if(X_contra>0) L[728][0]=2;
		}
	//Check all rules of unit[728][1]
	L[728][1] = LargeX[728][0]>0 ? 1 : 0;
	satisfiable[728][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit728_1[i][0] ][ unit728_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit728_1[i][2] ][ unit728_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit728_1[i][4] ][ unit728_1[i][5] ] >0);
		X_contra = ( LargeX[728][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit728_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[728][0]=0; L[728][1]=1;}
			satisfiable[728][1]=satisfiable[728][1] & ((x[728] ^ 1) | (x[ unit728_1[i][0] ] ^ unit728_1[i][1]) |(x[ unit728_1[i][2] ] ^ unit728_1[i][3]));
			}
		if(X_contra>0) L[728][1]=2;
		}
	//Check all rules of unit[729][0]
	L[729][0] = LargeX[729][1]>0 ? 1 : 0;
	satisfiable[729][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit729_0[i][0] ][ unit729_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit729_0[i][2] ][ unit729_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit729_0[i][4] ][ unit729_0[i][5] ] >0);
		X_contra = ( LargeX[729][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit729_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[729][1]=0; L[729][0]=1;}
			satisfiable[729][0]=satisfiable[729][0] & ((x[729] ^ 0) | (x[ unit729_0[i][0] ] ^ unit729_0[i][1]) |(x[ unit729_0[i][2] ] ^ unit729_0[i][3]));
			}
		if(X_contra>0) L[729][0]=2;
		}
	//Check all rules of unit[729][1]
	L[729][1] = LargeX[729][0]>0 ? 1 : 0;
	satisfiable[729][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit729_1[i][0] ][ unit729_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit729_1[i][2] ][ unit729_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit729_1[i][4] ][ unit729_1[i][5] ] >0);
		X_contra = ( LargeX[729][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit729_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[729][0]=0; L[729][1]=1;}
			satisfiable[729][1]=satisfiable[729][1] & ((x[729] ^ 1) | (x[ unit729_1[i][0] ] ^ unit729_1[i][1]) |(x[ unit729_1[i][2] ] ^ unit729_1[i][3]));
			}
		if(X_contra>0) L[729][1]=2;
		}
	//Check all rules of unit[730][0]
	L[730][0] = LargeX[730][1]>0 ? 1 : 0;
	satisfiable[730][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit730_0[i][0] ][ unit730_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit730_0[i][2] ][ unit730_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit730_0[i][4] ][ unit730_0[i][5] ] >0);
		X_contra = ( LargeX[730][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit730_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[730][1]=0; L[730][0]=1;}
			satisfiable[730][0]=satisfiable[730][0] & ((x[730] ^ 0) | (x[ unit730_0[i][0] ] ^ unit730_0[i][1]) |(x[ unit730_0[i][2] ] ^ unit730_0[i][3]));
			}
		if(X_contra>0) L[730][0]=2;
		}
	//Check all rules of unit[730][1]
	L[730][1] = LargeX[730][0]>0 ? 1 : 0;
	satisfiable[730][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit730_1[i][0] ][ unit730_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit730_1[i][2] ][ unit730_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit730_1[i][4] ][ unit730_1[i][5] ] >0);
		X_contra = ( LargeX[730][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit730_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[730][0]=0; L[730][1]=1;}
			satisfiable[730][1]=satisfiable[730][1] & ((x[730] ^ 1) | (x[ unit730_1[i][0] ] ^ unit730_1[i][1]) |(x[ unit730_1[i][2] ] ^ unit730_1[i][3]));
			}
		if(X_contra>0) L[730][1]=2;
		}
	//Check all rules of unit[731][0]
	L[731][0] = LargeX[731][1]>0 ? 1 : 0;
	satisfiable[731][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit731_0[i][0] ][ unit731_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit731_0[i][2] ][ unit731_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit731_0[i][4] ][ unit731_0[i][5] ] >0);
		X_contra = ( LargeX[731][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit731_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[731][1]=0; L[731][0]=1;}
			satisfiable[731][0]=satisfiable[731][0] & ((x[731] ^ 0) | (x[ unit731_0[i][0] ] ^ unit731_0[i][1]) |(x[ unit731_0[i][2] ] ^ unit731_0[i][3]));
			}
		if(X_contra>0) L[731][0]=2;
		}
	//Check all rules of unit[731][1]
	L[731][1] = LargeX[731][0]>0 ? 1 : 0;
	satisfiable[731][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit731_1[i][0] ][ unit731_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit731_1[i][2] ][ unit731_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit731_1[i][4] ][ unit731_1[i][5] ] >0);
		X_contra = ( LargeX[731][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit731_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[731][0]=0; L[731][1]=1;}
			satisfiable[731][1]=satisfiable[731][1] & ((x[731] ^ 1) | (x[ unit731_1[i][0] ] ^ unit731_1[i][1]) |(x[ unit731_1[i][2] ] ^ unit731_1[i][3]));
			}
		if(X_contra>0) L[731][1]=2;
		}
	//Check all rules of unit[732][0]
	L[732][0] = LargeX[732][1]>0 ? 1 : 0;
	satisfiable[732][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit732_0[i][0] ][ unit732_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit732_0[i][2] ][ unit732_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit732_0[i][4] ][ unit732_0[i][5] ] >0);
		X_contra = ( LargeX[732][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit732_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[732][1]=0; L[732][0]=1;}
			satisfiable[732][0]=satisfiable[732][0] & ((x[732] ^ 0) | (x[ unit732_0[i][0] ] ^ unit732_0[i][1]) |(x[ unit732_0[i][2] ] ^ unit732_0[i][3]));
			}
		if(X_contra>0) L[732][0]=2;
		}
	//Check all rules of unit[732][1]
	L[732][1] = LargeX[732][0]>0 ? 1 : 0;
	satisfiable[732][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit732_1[i][0] ][ unit732_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit732_1[i][2] ][ unit732_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit732_1[i][4] ][ unit732_1[i][5] ] >0);
		X_contra = ( LargeX[732][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit732_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[732][0]=0; L[732][1]=1;}
			satisfiable[732][1]=satisfiable[732][1] & ((x[732] ^ 1) | (x[ unit732_1[i][0] ] ^ unit732_1[i][1]) |(x[ unit732_1[i][2] ] ^ unit732_1[i][3]));
			}
		if(X_contra>0) L[732][1]=2;
		}
	//Check all rules of unit[733][0]
	L[733][0] = LargeX[733][1]>0 ? 1 : 0;
	satisfiable[733][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit733_0[i][0] ][ unit733_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit733_0[i][2] ][ unit733_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit733_0[i][4] ][ unit733_0[i][5] ] >0);
		X_contra = ( LargeX[733][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit733_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[733][1]=0; L[733][0]=1;}
			satisfiable[733][0]=satisfiable[733][0] & ((x[733] ^ 0) | (x[ unit733_0[i][0] ] ^ unit733_0[i][1]) |(x[ unit733_0[i][2] ] ^ unit733_0[i][3]));
			}
		if(X_contra>0) L[733][0]=2;
		}
	//Check all rules of unit[733][1]
	L[733][1] = LargeX[733][0]>0 ? 1 : 0;
	satisfiable[733][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit733_1[i][0] ][ unit733_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit733_1[i][2] ][ unit733_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit733_1[i][4] ][ unit733_1[i][5] ] >0);
		X_contra = ( LargeX[733][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit733_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[733][0]=0; L[733][1]=1;}
			satisfiable[733][1]=satisfiable[733][1] & ((x[733] ^ 1) | (x[ unit733_1[i][0] ] ^ unit733_1[i][1]) |(x[ unit733_1[i][2] ] ^ unit733_1[i][3]));
			}
		if(X_contra>0) L[733][1]=2;
		}
	//Check all rules of unit[734][0]
	L[734][0] = LargeX[734][1]>0 ? 1 : 0;
	satisfiable[734][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit734_0[i][0] ][ unit734_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit734_0[i][2] ][ unit734_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit734_0[i][4] ][ unit734_0[i][5] ] >0);
		X_contra = ( LargeX[734][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit734_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[734][1]=0; L[734][0]=1;}
			satisfiable[734][0]=satisfiable[734][0] & ((x[734] ^ 0) | (x[ unit734_0[i][0] ] ^ unit734_0[i][1]) |(x[ unit734_0[i][2] ] ^ unit734_0[i][3]));
			}
		if(X_contra>0) L[734][0]=2;
		}
	//Check all rules of unit[734][1]
	L[734][1] = LargeX[734][0]>0 ? 1 : 0;
	satisfiable[734][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit734_1[i][0] ][ unit734_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit734_1[i][2] ][ unit734_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit734_1[i][4] ][ unit734_1[i][5] ] >0);
		X_contra = ( LargeX[734][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit734_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[734][0]=0; L[734][1]=1;}
			satisfiable[734][1]=satisfiable[734][1] & ((x[734] ^ 1) | (x[ unit734_1[i][0] ] ^ unit734_1[i][1]) |(x[ unit734_1[i][2] ] ^ unit734_1[i][3]));
			}
		if(X_contra>0) L[734][1]=2;
		}
	//Check all rules of unit[735][0]
	L[735][0] = LargeX[735][1]>0 ? 1 : 0;
	satisfiable[735][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit735_0[i][0] ][ unit735_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit735_0[i][2] ][ unit735_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit735_0[i][4] ][ unit735_0[i][5] ] >0);
		X_contra = ( LargeX[735][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit735_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[735][1]=0; L[735][0]=1;}
			satisfiable[735][0]=satisfiable[735][0] & ((x[735] ^ 0) | (x[ unit735_0[i][0] ] ^ unit735_0[i][1]) |(x[ unit735_0[i][2] ] ^ unit735_0[i][3]));
			}
		if(X_contra>0) L[735][0]=2;
		}
	//Check all rules of unit[735][1]
	L[735][1] = LargeX[735][0]>0 ? 1 : 0;
	satisfiable[735][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit735_1[i][0] ][ unit735_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit735_1[i][2] ][ unit735_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit735_1[i][4] ][ unit735_1[i][5] ] >0);
		X_contra = ( LargeX[735][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit735_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[735][0]=0; L[735][1]=1;}
			satisfiable[735][1]=satisfiable[735][1] & ((x[735] ^ 1) | (x[ unit735_1[i][0] ] ^ unit735_1[i][1]) |(x[ unit735_1[i][2] ] ^ unit735_1[i][3]));
			}
		if(X_contra>0) L[735][1]=2;
		}
	//Check all rules of unit[736][0]
	L[736][0] = LargeX[736][1]>0 ? 1 : 0;
	satisfiable[736][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit736_0[i][0] ][ unit736_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit736_0[i][2] ][ unit736_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit736_0[i][4] ][ unit736_0[i][5] ] >0);
		X_contra = ( LargeX[736][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit736_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[736][1]=0; L[736][0]=1;}
			satisfiable[736][0]=satisfiable[736][0] & ((x[736] ^ 0) | (x[ unit736_0[i][0] ] ^ unit736_0[i][1]) |(x[ unit736_0[i][2] ] ^ unit736_0[i][3]));
			}
		if(X_contra>0) L[736][0]=2;
		}
	//Check all rules of unit[736][1]
	L[736][1] = LargeX[736][0]>0 ? 1 : 0;
	satisfiable[736][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit736_1[i][0] ][ unit736_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit736_1[i][2] ][ unit736_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit736_1[i][4] ][ unit736_1[i][5] ] >0);
		X_contra = ( LargeX[736][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit736_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[736][0]=0; L[736][1]=1;}
			satisfiable[736][1]=satisfiable[736][1] & ((x[736] ^ 1) | (x[ unit736_1[i][0] ] ^ unit736_1[i][1]) |(x[ unit736_1[i][2] ] ^ unit736_1[i][3]));
			}
		if(X_contra>0) L[736][1]=2;
		}
	//Check all rules of unit[737][0]
	L[737][0] = LargeX[737][1]>0 ? 1 : 0;
	satisfiable[737][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit737_0[i][0] ][ unit737_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit737_0[i][2] ][ unit737_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit737_0[i][4] ][ unit737_0[i][5] ] >0);
		X_contra = ( LargeX[737][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit737_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[737][1]=0; L[737][0]=1;}
			satisfiable[737][0]=satisfiable[737][0] & ((x[737] ^ 0) | (x[ unit737_0[i][0] ] ^ unit737_0[i][1]) |(x[ unit737_0[i][2] ] ^ unit737_0[i][3]));
			}
		if(X_contra>0) L[737][0]=2;
		}
	//Check all rules of unit[737][1]
	L[737][1] = LargeX[737][0]>0 ? 1 : 0;
	satisfiable[737][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit737_1[i][0] ][ unit737_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit737_1[i][2] ][ unit737_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit737_1[i][4] ][ unit737_1[i][5] ] >0);
		X_contra = ( LargeX[737][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit737_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[737][0]=0; L[737][1]=1;}
			satisfiable[737][1]=satisfiable[737][1] & ((x[737] ^ 1) | (x[ unit737_1[i][0] ] ^ unit737_1[i][1]) |(x[ unit737_1[i][2] ] ^ unit737_1[i][3]));
			}
		if(X_contra>0) L[737][1]=2;
		}
	//Check all rules of unit[738][0]
	L[738][0] = LargeX[738][1]>0 ? 1 : 0;
	satisfiable[738][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit738_0[i][0] ][ unit738_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit738_0[i][2] ][ unit738_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit738_0[i][4] ][ unit738_0[i][5] ] >0);
		X_contra = ( LargeX[738][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit738_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[738][1]=0; L[738][0]=1;}
			satisfiable[738][0]=satisfiable[738][0] & ((x[738] ^ 0) | (x[ unit738_0[i][0] ] ^ unit738_0[i][1]) |(x[ unit738_0[i][2] ] ^ unit738_0[i][3]));
			}
		if(X_contra>0) L[738][0]=2;
		}
	//Check all rules of unit[738][1]
	L[738][1] = LargeX[738][0]>0 ? 1 : 0;
	satisfiable[738][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit738_1[i][0] ][ unit738_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit738_1[i][2] ][ unit738_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit738_1[i][4] ][ unit738_1[i][5] ] >0);
		X_contra = ( LargeX[738][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit738_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[738][0]=0; L[738][1]=1;}
			satisfiable[738][1]=satisfiable[738][1] & ((x[738] ^ 1) | (x[ unit738_1[i][0] ] ^ unit738_1[i][1]) |(x[ unit738_1[i][2] ] ^ unit738_1[i][3]));
			}
		if(X_contra>0) L[738][1]=2;
		}
	//Check all rules of unit[739][0]
	L[739][0] = LargeX[739][1]>0 ? 1 : 0;
	satisfiable[739][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit739_0[i][0] ][ unit739_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit739_0[i][2] ][ unit739_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit739_0[i][4] ][ unit739_0[i][5] ] >0);
		X_contra = ( LargeX[739][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit739_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[739][1]=0; L[739][0]=1;}
			satisfiable[739][0]=satisfiable[739][0] & ((x[739] ^ 0) | (x[ unit739_0[i][0] ] ^ unit739_0[i][1]) |(x[ unit739_0[i][2] ] ^ unit739_0[i][3]));
			}
		if(X_contra>0) L[739][0]=2;
		}
	//Check all rules of unit[739][1]
	L[739][1] = LargeX[739][0]>0 ? 1 : 0;
	satisfiable[739][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit739_1[i][0] ][ unit739_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit739_1[i][2] ][ unit739_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit739_1[i][4] ][ unit739_1[i][5] ] >0);
		X_contra = ( LargeX[739][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit739_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[739][0]=0; L[739][1]=1;}
			satisfiable[739][1]=satisfiable[739][1] & ((x[739] ^ 1) | (x[ unit739_1[i][0] ] ^ unit739_1[i][1]) |(x[ unit739_1[i][2] ] ^ unit739_1[i][3]));
			}
		if(X_contra>0) L[739][1]=2;
		}
	//Check all rules of unit[740][0]
	L[740][0] = LargeX[740][1]>0 ? 1 : 0;
	satisfiable[740][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit740_0[i][0] ][ unit740_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit740_0[i][2] ][ unit740_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit740_0[i][4] ][ unit740_0[i][5] ] >0);
		X_contra = ( LargeX[740][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit740_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[740][1]=0; L[740][0]=1;}
			satisfiable[740][0]=satisfiable[740][0] & ((x[740] ^ 0) | (x[ unit740_0[i][0] ] ^ unit740_0[i][1]) |(x[ unit740_0[i][2] ] ^ unit740_0[i][3]));
			}
		if(X_contra>0) L[740][0]=2;
		}
	//Check all rules of unit[740][1]
	L[740][1] = LargeX[740][0]>0 ? 1 : 0;
	satisfiable[740][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit740_1[i][0] ][ unit740_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit740_1[i][2] ][ unit740_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit740_1[i][4] ][ unit740_1[i][5] ] >0);
		X_contra = ( LargeX[740][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit740_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[740][0]=0; L[740][1]=1;}
			satisfiable[740][1]=satisfiable[740][1] & ((x[740] ^ 1) | (x[ unit740_1[i][0] ] ^ unit740_1[i][1]) |(x[ unit740_1[i][2] ] ^ unit740_1[i][3]));
			}
		if(X_contra>0) L[740][1]=2;
		}
	//Check all rules of unit[741][0]
	L[741][0] = LargeX[741][1]>0 ? 1 : 0;
	satisfiable[741][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit741_0[i][0] ][ unit741_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit741_0[i][2] ][ unit741_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit741_0[i][4] ][ unit741_0[i][5] ] >0);
		X_contra = ( LargeX[741][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit741_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[741][1]=0; L[741][0]=1;}
			satisfiable[741][0]=satisfiable[741][0] & ((x[741] ^ 0) | (x[ unit741_0[i][0] ] ^ unit741_0[i][1]) |(x[ unit741_0[i][2] ] ^ unit741_0[i][3]));
			}
		if(X_contra>0) L[741][0]=2;
		}
	//Check all rules of unit[741][1]
	L[741][1] = LargeX[741][0]>0 ? 1 : 0;
	satisfiable[741][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit741_1[i][0] ][ unit741_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit741_1[i][2] ][ unit741_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit741_1[i][4] ][ unit741_1[i][5] ] >0);
		X_contra = ( LargeX[741][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit741_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[741][0]=0; L[741][1]=1;}
			satisfiable[741][1]=satisfiable[741][1] & ((x[741] ^ 1) | (x[ unit741_1[i][0] ] ^ unit741_1[i][1]) |(x[ unit741_1[i][2] ] ^ unit741_1[i][3]));
			}
		if(X_contra>0) L[741][1]=2;
		}
	//Check all rules of unit[742][0]
	L[742][0] = LargeX[742][1]>0 ? 1 : 0;
	satisfiable[742][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit742_0[i][0] ][ unit742_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit742_0[i][2] ][ unit742_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit742_0[i][4] ][ unit742_0[i][5] ] >0);
		X_contra = ( LargeX[742][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit742_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[742][1]=0; L[742][0]=1;}
			satisfiable[742][0]=satisfiable[742][0] & ((x[742] ^ 0) | (x[ unit742_0[i][0] ] ^ unit742_0[i][1]) |(x[ unit742_0[i][2] ] ^ unit742_0[i][3]));
			}
		if(X_contra>0) L[742][0]=2;
		}
	//Check all rules of unit[742][1]
	L[742][1] = LargeX[742][0]>0 ? 1 : 0;
	satisfiable[742][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit742_1[i][0] ][ unit742_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit742_1[i][2] ][ unit742_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit742_1[i][4] ][ unit742_1[i][5] ] >0);
		X_contra = ( LargeX[742][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit742_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[742][0]=0; L[742][1]=1;}
			satisfiable[742][1]=satisfiable[742][1] & ((x[742] ^ 1) | (x[ unit742_1[i][0] ] ^ unit742_1[i][1]) |(x[ unit742_1[i][2] ] ^ unit742_1[i][3]));
			}
		if(X_contra>0) L[742][1]=2;
		}
	//Check all rules of unit[743][0]
	L[743][0] = LargeX[743][1]>0 ? 1 : 0;
	satisfiable[743][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit743_0[i][0] ][ unit743_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit743_0[i][2] ][ unit743_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit743_0[i][4] ][ unit743_0[i][5] ] >0);
		X_contra = ( LargeX[743][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit743_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[743][1]=0; L[743][0]=1;}
			satisfiable[743][0]=satisfiable[743][0] & ((x[743] ^ 0) | (x[ unit743_0[i][0] ] ^ unit743_0[i][1]) |(x[ unit743_0[i][2] ] ^ unit743_0[i][3]));
			}
		if(X_contra>0) L[743][0]=2;
		}
	//Check all rules of unit[743][1]
	L[743][1] = LargeX[743][0]>0 ? 1 : 0;
	satisfiable[743][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit743_1[i][0] ][ unit743_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit743_1[i][2] ][ unit743_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit743_1[i][4] ][ unit743_1[i][5] ] >0);
		X_contra = ( LargeX[743][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit743_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[743][0]=0; L[743][1]=1;}
			satisfiable[743][1]=satisfiable[743][1] & ((x[743] ^ 1) | (x[ unit743_1[i][0] ] ^ unit743_1[i][1]) |(x[ unit743_1[i][2] ] ^ unit743_1[i][3]));
			}
		if(X_contra>0) L[743][1]=2;
		}
	//Check all rules of unit[744][0]
	L[744][0] = LargeX[744][1]>0 ? 1 : 0;
	satisfiable[744][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit744_0[i][0] ][ unit744_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit744_0[i][2] ][ unit744_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit744_0[i][4] ][ unit744_0[i][5] ] >0);
		X_contra = ( LargeX[744][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit744_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[744][1]=0; L[744][0]=1;}
			satisfiable[744][0]=satisfiable[744][0] & ((x[744] ^ 0) | (x[ unit744_0[i][0] ] ^ unit744_0[i][1]) |(x[ unit744_0[i][2] ] ^ unit744_0[i][3]));
			}
		if(X_contra>0) L[744][0]=2;
		}
	//Check all rules of unit[744][1]
	L[744][1] = LargeX[744][0]>0 ? 1 : 0;
	satisfiable[744][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit744_1[i][0] ][ unit744_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit744_1[i][2] ][ unit744_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit744_1[i][4] ][ unit744_1[i][5] ] >0);
		X_contra = ( LargeX[744][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit744_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[744][0]=0; L[744][1]=1;}
			satisfiable[744][1]=satisfiable[744][1] & ((x[744] ^ 1) | (x[ unit744_1[i][0] ] ^ unit744_1[i][1]) |(x[ unit744_1[i][2] ] ^ unit744_1[i][3]));
			}
		if(X_contra>0) L[744][1]=2;
		}
	//Check all rules of unit[745][0]
	L[745][0] = LargeX[745][1]>0 ? 1 : 0;
	satisfiable[745][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit745_0[i][0] ][ unit745_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit745_0[i][2] ][ unit745_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit745_0[i][4] ][ unit745_0[i][5] ] >0);
		X_contra = ( LargeX[745][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit745_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[745][1]=0; L[745][0]=1;}
			satisfiable[745][0]=satisfiable[745][0] & ((x[745] ^ 0) | (x[ unit745_0[i][0] ] ^ unit745_0[i][1]) |(x[ unit745_0[i][2] ] ^ unit745_0[i][3]));
			}
		if(X_contra>0) L[745][0]=2;
		}
	//Check all rules of unit[745][1]
	L[745][1] = LargeX[745][0]>0 ? 1 : 0;
	satisfiable[745][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit745_1[i][0] ][ unit745_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit745_1[i][2] ][ unit745_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit745_1[i][4] ][ unit745_1[i][5] ] >0);
		X_contra = ( LargeX[745][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit745_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[745][0]=0; L[745][1]=1;}
			satisfiable[745][1]=satisfiable[745][1] & ((x[745] ^ 1) | (x[ unit745_1[i][0] ] ^ unit745_1[i][1]) |(x[ unit745_1[i][2] ] ^ unit745_1[i][3]));
			}
		if(X_contra>0) L[745][1]=2;
		}
	//Check all rules of unit[746][0]
	L[746][0] = LargeX[746][1]>0 ? 1 : 0;
	satisfiable[746][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit746_0[i][0] ][ unit746_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit746_0[i][2] ][ unit746_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit746_0[i][4] ][ unit746_0[i][5] ] >0);
		X_contra = ( LargeX[746][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit746_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[746][1]=0; L[746][0]=1;}
			satisfiable[746][0]=satisfiable[746][0] & ((x[746] ^ 0) | (x[ unit746_0[i][0] ] ^ unit746_0[i][1]) |(x[ unit746_0[i][2] ] ^ unit746_0[i][3]));
			}
		if(X_contra>0) L[746][0]=2;
		}
	//Check all rules of unit[746][1]
	L[746][1] = LargeX[746][0]>0 ? 1 : 0;
	satisfiable[746][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit746_1[i][0] ][ unit746_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit746_1[i][2] ][ unit746_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit746_1[i][4] ][ unit746_1[i][5] ] >0);
		X_contra = ( LargeX[746][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit746_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[746][0]=0; L[746][1]=1;}
			satisfiable[746][1]=satisfiable[746][1] & ((x[746] ^ 1) | (x[ unit746_1[i][0] ] ^ unit746_1[i][1]) |(x[ unit746_1[i][2] ] ^ unit746_1[i][3]));
			}
		if(X_contra>0) L[746][1]=2;
		}
	//Check all rules of unit[747][0]
	L[747][0] = LargeX[747][1]>0 ? 1 : 0;
	satisfiable[747][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit747_0[i][0] ][ unit747_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit747_0[i][2] ][ unit747_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit747_0[i][4] ][ unit747_0[i][5] ] >0);
		X_contra = ( LargeX[747][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit747_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[747][1]=0; L[747][0]=1;}
			satisfiable[747][0]=satisfiable[747][0] & ((x[747] ^ 0) | (x[ unit747_0[i][0] ] ^ unit747_0[i][1]) |(x[ unit747_0[i][2] ] ^ unit747_0[i][3]));
			}
		if(X_contra>0) L[747][0]=2;
		}
	//Check all rules of unit[747][1]
	L[747][1] = LargeX[747][0]>0 ? 1 : 0;
	satisfiable[747][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit747_1[i][0] ][ unit747_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit747_1[i][2] ][ unit747_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit747_1[i][4] ][ unit747_1[i][5] ] >0);
		X_contra = ( LargeX[747][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit747_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[747][0]=0; L[747][1]=1;}
			satisfiable[747][1]=satisfiable[747][1] & ((x[747] ^ 1) | (x[ unit747_1[i][0] ] ^ unit747_1[i][1]) |(x[ unit747_1[i][2] ] ^ unit747_1[i][3]));
			}
		if(X_contra>0) L[747][1]=2;
		}
	//Check all rules of unit[748][0]
	L[748][0] = LargeX[748][1]>0 ? 1 : 0;
	satisfiable[748][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit748_0[i][0] ][ unit748_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit748_0[i][2] ][ unit748_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit748_0[i][4] ][ unit748_0[i][5] ] >0);
		X_contra = ( LargeX[748][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit748_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[748][1]=0; L[748][0]=1;}
			satisfiable[748][0]=satisfiable[748][0] & ((x[748] ^ 0) | (x[ unit748_0[i][0] ] ^ unit748_0[i][1]) |(x[ unit748_0[i][2] ] ^ unit748_0[i][3]));
			}
		if(X_contra>0) L[748][0]=2;
		}
	//Check all rules of unit[748][1]
	L[748][1] = LargeX[748][0]>0 ? 1 : 0;
	satisfiable[748][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit748_1[i][0] ][ unit748_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit748_1[i][2] ][ unit748_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit748_1[i][4] ][ unit748_1[i][5] ] >0);
		X_contra = ( LargeX[748][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit748_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[748][0]=0; L[748][1]=1;}
			satisfiable[748][1]=satisfiable[748][1] & ((x[748] ^ 1) | (x[ unit748_1[i][0] ] ^ unit748_1[i][1]) |(x[ unit748_1[i][2] ] ^ unit748_1[i][3]));
			}
		if(X_contra>0) L[748][1]=2;
		}
	//Check all rules of unit[749][0]
	L[749][0] = LargeX[749][1]>0 ? 1 : 0;
	satisfiable[749][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit749_0[i][0] ][ unit749_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit749_0[i][2] ][ unit749_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit749_0[i][4] ][ unit749_0[i][5] ] >0);
		X_contra = ( LargeX[749][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit749_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[749][1]=0; L[749][0]=1;}
			satisfiable[749][0]=satisfiable[749][0] & ((x[749] ^ 0) | (x[ unit749_0[i][0] ] ^ unit749_0[i][1]) |(x[ unit749_0[i][2] ] ^ unit749_0[i][3]));
			}
		if(X_contra>0) L[749][0]=2;
		}
	//Check all rules of unit[749][1]
	L[749][1] = LargeX[749][0]>0 ? 1 : 0;
	satisfiable[749][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit749_1[i][0] ][ unit749_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit749_1[i][2] ][ unit749_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit749_1[i][4] ][ unit749_1[i][5] ] >0);
		X_contra = ( LargeX[749][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit749_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[749][0]=0; L[749][1]=1;}
			satisfiable[749][1]=satisfiable[749][1] & ((x[749] ^ 1) | (x[ unit749_1[i][0] ] ^ unit749_1[i][1]) |(x[ unit749_1[i][2] ] ^ unit749_1[i][3]));
			}
		if(X_contra>0) L[749][1]=2;
		}
	//Check all rules of unit[750][0]
	L[750][0] = LargeX[750][1]>0 ? 1 : 0;
	satisfiable[750][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit750_0[i][0] ][ unit750_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit750_0[i][2] ][ unit750_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit750_0[i][4] ][ unit750_0[i][5] ] >0);
		X_contra = ( LargeX[750][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit750_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[750][1]=0; L[750][0]=1;}
			satisfiable[750][0]=satisfiable[750][0] & ((x[750] ^ 0) | (x[ unit750_0[i][0] ] ^ unit750_0[i][1]) |(x[ unit750_0[i][2] ] ^ unit750_0[i][3]));
			}
		if(X_contra>0) L[750][0]=2;
		}
	//Check all rules of unit[750][1]
	L[750][1] = LargeX[750][0]>0 ? 1 : 0;
	satisfiable[750][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit750_1[i][0] ][ unit750_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit750_1[i][2] ][ unit750_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit750_1[i][4] ][ unit750_1[i][5] ] >0);
		X_contra = ( LargeX[750][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit750_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[750][0]=0; L[750][1]=1;}
			satisfiable[750][1]=satisfiable[750][1] & ((x[750] ^ 1) | (x[ unit750_1[i][0] ] ^ unit750_1[i][1]) |(x[ unit750_1[i][2] ] ^ unit750_1[i][3]));
			}
		if(X_contra>0) L[750][1]=2;
		}
	//Check all rules of unit[751][0]
	L[751][0] = LargeX[751][1]>0 ? 1 : 0;
	satisfiable[751][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit751_0[i][0] ][ unit751_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit751_0[i][2] ][ unit751_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit751_0[i][4] ][ unit751_0[i][5] ] >0);
		X_contra = ( LargeX[751][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit751_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[751][1]=0; L[751][0]=1;}
			satisfiable[751][0]=satisfiable[751][0] & ((x[751] ^ 0) | (x[ unit751_0[i][0] ] ^ unit751_0[i][1]) |(x[ unit751_0[i][2] ] ^ unit751_0[i][3]));
			}
		if(X_contra>0) L[751][0]=2;
		}
	//Check all rules of unit[751][1]
	L[751][1] = LargeX[751][0]>0 ? 1 : 0;
	satisfiable[751][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit751_1[i][0] ][ unit751_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit751_1[i][2] ][ unit751_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit751_1[i][4] ][ unit751_1[i][5] ] >0);
		X_contra = ( LargeX[751][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit751_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[751][0]=0; L[751][1]=1;}
			satisfiable[751][1]=satisfiable[751][1] & ((x[751] ^ 1) | (x[ unit751_1[i][0] ] ^ unit751_1[i][1]) |(x[ unit751_1[i][2] ] ^ unit751_1[i][3]));
			}
		if(X_contra>0) L[751][1]=2;
		}
	//Check all rules of unit[752][0]
	L[752][0] = LargeX[752][1]>0 ? 1 : 0;
	satisfiable[752][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit752_0[i][0] ][ unit752_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit752_0[i][2] ][ unit752_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit752_0[i][4] ][ unit752_0[i][5] ] >0);
		X_contra = ( LargeX[752][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit752_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[752][1]=0; L[752][0]=1;}
			satisfiable[752][0]=satisfiable[752][0] & ((x[752] ^ 0) | (x[ unit752_0[i][0] ] ^ unit752_0[i][1]) |(x[ unit752_0[i][2] ] ^ unit752_0[i][3]));
			}
		if(X_contra>0) L[752][0]=2;
		}
	//Check all rules of unit[752][1]
	L[752][1] = LargeX[752][0]>0 ? 1 : 0;
	satisfiable[752][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit752_1[i][0] ][ unit752_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit752_1[i][2] ][ unit752_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit752_1[i][4] ][ unit752_1[i][5] ] >0);
		X_contra = ( LargeX[752][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit752_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[752][0]=0; L[752][1]=1;}
			satisfiable[752][1]=satisfiable[752][1] & ((x[752] ^ 1) | (x[ unit752_1[i][0] ] ^ unit752_1[i][1]) |(x[ unit752_1[i][2] ] ^ unit752_1[i][3]));
			}
		if(X_contra>0) L[752][1]=2;
		}
	//Check all rules of unit[753][0]
	L[753][0] = LargeX[753][1]>0 ? 1 : 0;
	satisfiable[753][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit753_0[i][0] ][ unit753_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit753_0[i][2] ][ unit753_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit753_0[i][4] ][ unit753_0[i][5] ] >0);
		X_contra = ( LargeX[753][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit753_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[753][1]=0; L[753][0]=1;}
			satisfiable[753][0]=satisfiable[753][0] & ((x[753] ^ 0) | (x[ unit753_0[i][0] ] ^ unit753_0[i][1]) |(x[ unit753_0[i][2] ] ^ unit753_0[i][3]));
			}
		if(X_contra>0) L[753][0]=2;
		}
	//Check all rules of unit[753][1]
	L[753][1] = LargeX[753][0]>0 ? 1 : 0;
	satisfiable[753][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit753_1[i][0] ][ unit753_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit753_1[i][2] ][ unit753_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit753_1[i][4] ][ unit753_1[i][5] ] >0);
		X_contra = ( LargeX[753][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit753_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[753][0]=0; L[753][1]=1;}
			satisfiable[753][1]=satisfiable[753][1] & ((x[753] ^ 1) | (x[ unit753_1[i][0] ] ^ unit753_1[i][1]) |(x[ unit753_1[i][2] ] ^ unit753_1[i][3]));
			}
		if(X_contra>0) L[753][1]=2;
		}
	//Check all rules of unit[754][0]
	L[754][0] = LargeX[754][1]>0 ? 1 : 0;
	satisfiable[754][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit754_0[i][0] ][ unit754_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit754_0[i][2] ][ unit754_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit754_0[i][4] ][ unit754_0[i][5] ] >0);
		X_contra = ( LargeX[754][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit754_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[754][1]=0; L[754][0]=1;}
			satisfiable[754][0]=satisfiable[754][0] & ((x[754] ^ 0) | (x[ unit754_0[i][0] ] ^ unit754_0[i][1]) |(x[ unit754_0[i][2] ] ^ unit754_0[i][3]));
			}
		if(X_contra>0) L[754][0]=2;
		}
	//Check all rules of unit[754][1]
	L[754][1] = LargeX[754][0]>0 ? 1 : 0;
	satisfiable[754][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit754_1[i][0] ][ unit754_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit754_1[i][2] ][ unit754_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit754_1[i][4] ][ unit754_1[i][5] ] >0);
		X_contra = ( LargeX[754][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit754_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[754][0]=0; L[754][1]=1;}
			satisfiable[754][1]=satisfiable[754][1] & ((x[754] ^ 1) | (x[ unit754_1[i][0] ] ^ unit754_1[i][1]) |(x[ unit754_1[i][2] ] ^ unit754_1[i][3]));
			}
		if(X_contra>0) L[754][1]=2;
		}
	//Check all rules of unit[755][0]
	L[755][0] = LargeX[755][1]>0 ? 1 : 0;
	satisfiable[755][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit755_0[i][0] ][ unit755_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit755_0[i][2] ][ unit755_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit755_0[i][4] ][ unit755_0[i][5] ] >0);
		X_contra = ( LargeX[755][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit755_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[755][1]=0; L[755][0]=1;}
			satisfiable[755][0]=satisfiable[755][0] & ((x[755] ^ 0) | (x[ unit755_0[i][0] ] ^ unit755_0[i][1]) |(x[ unit755_0[i][2] ] ^ unit755_0[i][3]));
			}
		if(X_contra>0) L[755][0]=2;
		}
	//Check all rules of unit[755][1]
	L[755][1] = LargeX[755][0]>0 ? 1 : 0;
	satisfiable[755][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit755_1[i][0] ][ unit755_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit755_1[i][2] ][ unit755_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit755_1[i][4] ][ unit755_1[i][5] ] >0);
		X_contra = ( LargeX[755][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit755_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[755][0]=0; L[755][1]=1;}
			satisfiable[755][1]=satisfiable[755][1] & ((x[755] ^ 1) | (x[ unit755_1[i][0] ] ^ unit755_1[i][1]) |(x[ unit755_1[i][2] ] ^ unit755_1[i][3]));
			}
		if(X_contra>0) L[755][1]=2;
		}
	//Check all rules of unit[756][0]
	L[756][0] = LargeX[756][1]>0 ? 1 : 0;
	satisfiable[756][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit756_0[i][0] ][ unit756_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit756_0[i][2] ][ unit756_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit756_0[i][4] ][ unit756_0[i][5] ] >0);
		X_contra = ( LargeX[756][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit756_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[756][1]=0; L[756][0]=1;}
			satisfiable[756][0]=satisfiable[756][0] & ((x[756] ^ 0) | (x[ unit756_0[i][0] ] ^ unit756_0[i][1]) |(x[ unit756_0[i][2] ] ^ unit756_0[i][3]));
			}
		if(X_contra>0) L[756][0]=2;
		}
	//Check all rules of unit[756][1]
	L[756][1] = LargeX[756][0]>0 ? 1 : 0;
	satisfiable[756][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit756_1[i][0] ][ unit756_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit756_1[i][2] ][ unit756_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit756_1[i][4] ][ unit756_1[i][5] ] >0);
		X_contra = ( LargeX[756][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit756_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[756][0]=0; L[756][1]=1;}
			satisfiable[756][1]=satisfiable[756][1] & ((x[756] ^ 1) | (x[ unit756_1[i][0] ] ^ unit756_1[i][1]) |(x[ unit756_1[i][2] ] ^ unit756_1[i][3]));
			}
		if(X_contra>0) L[756][1]=2;
		}
	//Check all rules of unit[757][0]
	L[757][0] = LargeX[757][1]>0 ? 1 : 0;
	satisfiable[757][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit757_0[i][0] ][ unit757_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit757_0[i][2] ][ unit757_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit757_0[i][4] ][ unit757_0[i][5] ] >0);
		X_contra = ( LargeX[757][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit757_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[757][1]=0; L[757][0]=1;}
			satisfiable[757][0]=satisfiable[757][0] & ((x[757] ^ 0) | (x[ unit757_0[i][0] ] ^ unit757_0[i][1]) |(x[ unit757_0[i][2] ] ^ unit757_0[i][3]));
			}
		if(X_contra>0) L[757][0]=2;
		}
	//Check all rules of unit[757][1]
	L[757][1] = LargeX[757][0]>0 ? 1 : 0;
	satisfiable[757][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit757_1[i][0] ][ unit757_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit757_1[i][2] ][ unit757_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit757_1[i][4] ][ unit757_1[i][5] ] >0);
		X_contra = ( LargeX[757][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit757_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[757][0]=0; L[757][1]=1;}
			satisfiable[757][1]=satisfiable[757][1] & ((x[757] ^ 1) | (x[ unit757_1[i][0] ] ^ unit757_1[i][1]) |(x[ unit757_1[i][2] ] ^ unit757_1[i][3]));
			}
		if(X_contra>0) L[757][1]=2;
		}
	//Check all rules of unit[758][0]
	L[758][0] = LargeX[758][1]>0 ? 1 : 0;
	satisfiable[758][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit758_0[i][0] ][ unit758_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit758_0[i][2] ][ unit758_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit758_0[i][4] ][ unit758_0[i][5] ] >0);
		X_contra = ( LargeX[758][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit758_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[758][1]=0; L[758][0]=1;}
			satisfiable[758][0]=satisfiable[758][0] & ((x[758] ^ 0) | (x[ unit758_0[i][0] ] ^ unit758_0[i][1]) |(x[ unit758_0[i][2] ] ^ unit758_0[i][3]));
			}
		if(X_contra>0) L[758][0]=2;
		}
	//Check all rules of unit[758][1]
	L[758][1] = LargeX[758][0]>0 ? 1 : 0;
	satisfiable[758][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit758_1[i][0] ][ unit758_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit758_1[i][2] ][ unit758_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit758_1[i][4] ][ unit758_1[i][5] ] >0);
		X_contra = ( LargeX[758][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit758_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[758][0]=0; L[758][1]=1;}
			satisfiable[758][1]=satisfiable[758][1] & ((x[758] ^ 1) | (x[ unit758_1[i][0] ] ^ unit758_1[i][1]) |(x[ unit758_1[i][2] ] ^ unit758_1[i][3]));
			}
		if(X_contra>0) L[758][1]=2;
		}
	//Check all rules of unit[759][0]
	L[759][0] = LargeX[759][1]>0 ? 1 : 0;
	satisfiable[759][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit759_0[i][0] ][ unit759_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit759_0[i][2] ][ unit759_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit759_0[i][4] ][ unit759_0[i][5] ] >0);
		X_contra = ( LargeX[759][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit759_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[759][1]=0; L[759][0]=1;}
			satisfiable[759][0]=satisfiable[759][0] & ((x[759] ^ 0) | (x[ unit759_0[i][0] ] ^ unit759_0[i][1]) |(x[ unit759_0[i][2] ] ^ unit759_0[i][3]));
			}
		if(X_contra>0) L[759][0]=2;
		}
	//Check all rules of unit[759][1]
	L[759][1] = LargeX[759][0]>0 ? 1 : 0;
	satisfiable[759][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit759_1[i][0] ][ unit759_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit759_1[i][2] ][ unit759_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit759_1[i][4] ][ unit759_1[i][5] ] >0);
		X_contra = ( LargeX[759][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit759_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[759][0]=0; L[759][1]=1;}
			satisfiable[759][1]=satisfiable[759][1] & ((x[759] ^ 1) | (x[ unit759_1[i][0] ] ^ unit759_1[i][1]) |(x[ unit759_1[i][2] ] ^ unit759_1[i][3]));
			}
		if(X_contra>0) L[759][1]=2;
		}
	//Check all rules of unit[760][0]
	L[760][0] = LargeX[760][1]>0 ? 1 : 0;
	satisfiable[760][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit760_0[i][0] ][ unit760_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit760_0[i][2] ][ unit760_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit760_0[i][4] ][ unit760_0[i][5] ] >0);
		X_contra = ( LargeX[760][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit760_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[760][1]=0; L[760][0]=1;}
			satisfiable[760][0]=satisfiable[760][0] & ((x[760] ^ 0) | (x[ unit760_0[i][0] ] ^ unit760_0[i][1]) |(x[ unit760_0[i][2] ] ^ unit760_0[i][3]));
			}
		if(X_contra>0) L[760][0]=2;
		}
	//Check all rules of unit[760][1]
	L[760][1] = LargeX[760][0]>0 ? 1 : 0;
	satisfiable[760][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit760_1[i][0] ][ unit760_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit760_1[i][2] ][ unit760_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit760_1[i][4] ][ unit760_1[i][5] ] >0);
		X_contra = ( LargeX[760][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit760_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[760][0]=0; L[760][1]=1;}
			satisfiable[760][1]=satisfiable[760][1] & ((x[760] ^ 1) | (x[ unit760_1[i][0] ] ^ unit760_1[i][1]) |(x[ unit760_1[i][2] ] ^ unit760_1[i][3]));
			}
		if(X_contra>0) L[760][1]=2;
		}
	//Check all rules of unit[761][0]
	L[761][0] = LargeX[761][1]>0 ? 1 : 0;
	satisfiable[761][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit761_0[i][0] ][ unit761_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit761_0[i][2] ][ unit761_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit761_0[i][4] ][ unit761_0[i][5] ] >0);
		X_contra = ( LargeX[761][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit761_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[761][1]=0; L[761][0]=1;}
			satisfiable[761][0]=satisfiable[761][0] & ((x[761] ^ 0) | (x[ unit761_0[i][0] ] ^ unit761_0[i][1]) |(x[ unit761_0[i][2] ] ^ unit761_0[i][3]));
			}
		if(X_contra>0) L[761][0]=2;
		}
	//Check all rules of unit[761][1]
	L[761][1] = LargeX[761][0]>0 ? 1 : 0;
	satisfiable[761][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit761_1[i][0] ][ unit761_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit761_1[i][2] ][ unit761_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit761_1[i][4] ][ unit761_1[i][5] ] >0);
		X_contra = ( LargeX[761][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit761_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[761][0]=0; L[761][1]=1;}
			satisfiable[761][1]=satisfiable[761][1] & ((x[761] ^ 1) | (x[ unit761_1[i][0] ] ^ unit761_1[i][1]) |(x[ unit761_1[i][2] ] ^ unit761_1[i][3]));
			}
		if(X_contra>0) L[761][1]=2;
		}
	//Check all rules of unit[762][0]
	L[762][0] = LargeX[762][1]>0 ? 1 : 0;
	satisfiable[762][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit762_0[i][0] ][ unit762_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit762_0[i][2] ][ unit762_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit762_0[i][4] ][ unit762_0[i][5] ] >0);
		X_contra = ( LargeX[762][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit762_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[762][1]=0; L[762][0]=1;}
			satisfiable[762][0]=satisfiable[762][0] & ((x[762] ^ 0) | (x[ unit762_0[i][0] ] ^ unit762_0[i][1]) |(x[ unit762_0[i][2] ] ^ unit762_0[i][3]));
			}
		if(X_contra>0) L[762][0]=2;
		}
	//Check all rules of unit[762][1]
	L[762][1] = LargeX[762][0]>0 ? 1 : 0;
	satisfiable[762][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit762_1[i][0] ][ unit762_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit762_1[i][2] ][ unit762_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit762_1[i][4] ][ unit762_1[i][5] ] >0);
		X_contra = ( LargeX[762][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit762_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[762][0]=0; L[762][1]=1;}
			satisfiable[762][1]=satisfiable[762][1] & ((x[762] ^ 1) | (x[ unit762_1[i][0] ] ^ unit762_1[i][1]) |(x[ unit762_1[i][2] ] ^ unit762_1[i][3]));
			}
		if(X_contra>0) L[762][1]=2;
		}
	//Check all rules of unit[763][0]
	L[763][0] = LargeX[763][1]>0 ? 1 : 0;
	satisfiable[763][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit763_0[i][0] ][ unit763_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit763_0[i][2] ][ unit763_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit763_0[i][4] ][ unit763_0[i][5] ] >0);
		X_contra = ( LargeX[763][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit763_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[763][1]=0; L[763][0]=1;}
			satisfiable[763][0]=satisfiable[763][0] & ((x[763] ^ 0) | (x[ unit763_0[i][0] ] ^ unit763_0[i][1]) |(x[ unit763_0[i][2] ] ^ unit763_0[i][3]));
			}
		if(X_contra>0) L[763][0]=2;
		}
	//Check all rules of unit[763][1]
	L[763][1] = LargeX[763][0]>0 ? 1 : 0;
	satisfiable[763][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit763_1[i][0] ][ unit763_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit763_1[i][2] ][ unit763_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit763_1[i][4] ][ unit763_1[i][5] ] >0);
		X_contra = ( LargeX[763][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit763_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[763][0]=0; L[763][1]=1;}
			satisfiable[763][1]=satisfiable[763][1] & ((x[763] ^ 1) | (x[ unit763_1[i][0] ] ^ unit763_1[i][1]) |(x[ unit763_1[i][2] ] ^ unit763_1[i][3]));
			}
		if(X_contra>0) L[763][1]=2;
		}
	//Check all rules of unit[764][0]
	L[764][0] = LargeX[764][1]>0 ? 1 : 0;
	satisfiable[764][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit764_0[i][0] ][ unit764_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit764_0[i][2] ][ unit764_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit764_0[i][4] ][ unit764_0[i][5] ] >0);
		X_contra = ( LargeX[764][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit764_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[764][1]=0; L[764][0]=1;}
			satisfiable[764][0]=satisfiable[764][0] & ((x[764] ^ 0) | (x[ unit764_0[i][0] ] ^ unit764_0[i][1]) |(x[ unit764_0[i][2] ] ^ unit764_0[i][3]));
			}
		if(X_contra>0) L[764][0]=2;
		}
	//Check all rules of unit[764][1]
	L[764][1] = LargeX[764][0]>0 ? 1 : 0;
	satisfiable[764][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit764_1[i][0] ][ unit764_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit764_1[i][2] ][ unit764_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit764_1[i][4] ][ unit764_1[i][5] ] >0);
		X_contra = ( LargeX[764][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit764_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[764][0]=0; L[764][1]=1;}
			satisfiable[764][1]=satisfiable[764][1] & ((x[764] ^ 1) | (x[ unit764_1[i][0] ] ^ unit764_1[i][1]) |(x[ unit764_1[i][2] ] ^ unit764_1[i][3]));
			}
		if(X_contra>0) L[764][1]=2;
		}
	//Check all rules of unit[765][0]
	L[765][0] = LargeX[765][1]>0 ? 1 : 0;
	satisfiable[765][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit765_0[i][0] ][ unit765_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit765_0[i][2] ][ unit765_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit765_0[i][4] ][ unit765_0[i][5] ] >0);
		X_contra = ( LargeX[765][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit765_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[765][1]=0; L[765][0]=1;}
			satisfiable[765][0]=satisfiable[765][0] & ((x[765] ^ 0) | (x[ unit765_0[i][0] ] ^ unit765_0[i][1]) |(x[ unit765_0[i][2] ] ^ unit765_0[i][3]));
			}
		if(X_contra>0) L[765][0]=2;
		}
	//Check all rules of unit[765][1]
	L[765][1] = LargeX[765][0]>0 ? 1 : 0;
	satisfiable[765][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit765_1[i][0] ][ unit765_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit765_1[i][2] ][ unit765_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit765_1[i][4] ][ unit765_1[i][5] ] >0);
		X_contra = ( LargeX[765][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit765_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[765][0]=0; L[765][1]=1;}
			satisfiable[765][1]=satisfiable[765][1] & ((x[765] ^ 1) | (x[ unit765_1[i][0] ] ^ unit765_1[i][1]) |(x[ unit765_1[i][2] ] ^ unit765_1[i][3]));
			}
		if(X_contra>0) L[765][1]=2;
		}
	//Check all rules of unit[766][0]
	L[766][0] = LargeX[766][1]>0 ? 1 : 0;
	satisfiable[766][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit766_0[i][0] ][ unit766_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit766_0[i][2] ][ unit766_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit766_0[i][4] ][ unit766_0[i][5] ] >0);
		X_contra = ( LargeX[766][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit766_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[766][1]=0; L[766][0]=1;}
			satisfiable[766][0]=satisfiable[766][0] & ((x[766] ^ 0) | (x[ unit766_0[i][0] ] ^ unit766_0[i][1]) |(x[ unit766_0[i][2] ] ^ unit766_0[i][3]));
			}
		if(X_contra>0) L[766][0]=2;
		}
	//Check all rules of unit[766][1]
	L[766][1] = LargeX[766][0]>0 ? 1 : 0;
	satisfiable[766][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit766_1[i][0] ][ unit766_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit766_1[i][2] ][ unit766_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit766_1[i][4] ][ unit766_1[i][5] ] >0);
		X_contra = ( LargeX[766][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit766_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[766][0]=0; L[766][1]=1;}
			satisfiable[766][1]=satisfiable[766][1] & ((x[766] ^ 1) | (x[ unit766_1[i][0] ] ^ unit766_1[i][1]) |(x[ unit766_1[i][2] ] ^ unit766_1[i][3]));
			}
		if(X_contra>0) L[766][1]=2;
		}
	//Check all rules of unit[767][0]
	L[767][0] = LargeX[767][1]>0 ? 1 : 0;
	satisfiable[767][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit767_0[i][0] ][ unit767_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit767_0[i][2] ][ unit767_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit767_0[i][4] ][ unit767_0[i][5] ] >0);
		X_contra = ( LargeX[767][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit767_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[767][1]=0; L[767][0]=1;}
			satisfiable[767][0]=satisfiable[767][0] & ((x[767] ^ 0) | (x[ unit767_0[i][0] ] ^ unit767_0[i][1]) |(x[ unit767_0[i][2] ] ^ unit767_0[i][3]));
			}
		if(X_contra>0) L[767][0]=2;
		}
	//Check all rules of unit[767][1]
	L[767][1] = LargeX[767][0]>0 ? 1 : 0;
	satisfiable[767][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit767_1[i][0] ][ unit767_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit767_1[i][2] ][ unit767_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit767_1[i][4] ][ unit767_1[i][5] ] >0);
		X_contra = ( LargeX[767][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit767_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[767][0]=0; L[767][1]=1;}
			satisfiable[767][1]=satisfiable[767][1] & ((x[767] ^ 1) | (x[ unit767_1[i][0] ] ^ unit767_1[i][1]) |(x[ unit767_1[i][2] ] ^ unit767_1[i][3]));
			}
		if(X_contra>0) L[767][1]=2;
		}
	//Check all rules of unit[768][0]
	L[768][0] = LargeX[768][1]>0 ? 1 : 0;
	satisfiable[768][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit768_0[i][0] ][ unit768_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit768_0[i][2] ][ unit768_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit768_0[i][4] ][ unit768_0[i][5] ] >0);
		X_contra = ( LargeX[768][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit768_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[768][1]=0; L[768][0]=1;}
			satisfiable[768][0]=satisfiable[768][0] & ((x[768] ^ 0) | (x[ unit768_0[i][0] ] ^ unit768_0[i][1]) |(x[ unit768_0[i][2] ] ^ unit768_0[i][3]));
			}
		if(X_contra>0) L[768][0]=2;
		}
	//Check all rules of unit[768][1]
	L[768][1] = LargeX[768][0]>0 ? 1 : 0;
	satisfiable[768][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit768_1[i][0] ][ unit768_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit768_1[i][2] ][ unit768_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit768_1[i][4] ][ unit768_1[i][5] ] >0);
		X_contra = ( LargeX[768][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit768_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[768][0]=0; L[768][1]=1;}
			satisfiable[768][1]=satisfiable[768][1] & ((x[768] ^ 1) | (x[ unit768_1[i][0] ] ^ unit768_1[i][1]) |(x[ unit768_1[i][2] ] ^ unit768_1[i][3]));
			}
		if(X_contra>0) L[768][1]=2;
		}
	//Check all rules of unit[769][0]
	L[769][0] = LargeX[769][1]>0 ? 1 : 0;
	satisfiable[769][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit769_0[i][0] ][ unit769_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit769_0[i][2] ][ unit769_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit769_0[i][4] ][ unit769_0[i][5] ] >0);
		X_contra = ( LargeX[769][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit769_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[769][1]=0; L[769][0]=1;}
			satisfiable[769][0]=satisfiable[769][0] & ((x[769] ^ 0) | (x[ unit769_0[i][0] ] ^ unit769_0[i][1]) |(x[ unit769_0[i][2] ] ^ unit769_0[i][3]));
			}
		if(X_contra>0) L[769][0]=2;
		}
	//Check all rules of unit[769][1]
	L[769][1] = LargeX[769][0]>0 ? 1 : 0;
	satisfiable[769][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit769_1[i][0] ][ unit769_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit769_1[i][2] ][ unit769_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit769_1[i][4] ][ unit769_1[i][5] ] >0);
		X_contra = ( LargeX[769][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit769_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[769][0]=0; L[769][1]=1;}
			satisfiable[769][1]=satisfiable[769][1] & ((x[769] ^ 1) | (x[ unit769_1[i][0] ] ^ unit769_1[i][1]) |(x[ unit769_1[i][2] ] ^ unit769_1[i][3]));
			}
		if(X_contra>0) L[769][1]=2;
		}
	//Check all rules of unit[770][0]
	L[770][0] = LargeX[770][1]>0 ? 1 : 0;
	satisfiable[770][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit770_0[i][0] ][ unit770_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit770_0[i][2] ][ unit770_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit770_0[i][4] ][ unit770_0[i][5] ] >0);
		X_contra = ( LargeX[770][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit770_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[770][1]=0; L[770][0]=1;}
			satisfiable[770][0]=satisfiable[770][0] & ((x[770] ^ 0) | (x[ unit770_0[i][0] ] ^ unit770_0[i][1]) |(x[ unit770_0[i][2] ] ^ unit770_0[i][3]));
			}
		if(X_contra>0) L[770][0]=2;
		}
	//Check all rules of unit[770][1]
	L[770][1] = LargeX[770][0]>0 ? 1 : 0;
	satisfiable[770][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit770_1[i][0] ][ unit770_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit770_1[i][2] ][ unit770_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit770_1[i][4] ][ unit770_1[i][5] ] >0);
		X_contra = ( LargeX[770][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit770_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[770][0]=0; L[770][1]=1;}
			satisfiable[770][1]=satisfiable[770][1] & ((x[770] ^ 1) | (x[ unit770_1[i][0] ] ^ unit770_1[i][1]) |(x[ unit770_1[i][2] ] ^ unit770_1[i][3]));
			}
		if(X_contra>0) L[770][1]=2;
		}
	//Check all rules of unit[771][0]
	L[771][0] = LargeX[771][1]>0 ? 1 : 0;
	satisfiable[771][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit771_0[i][0] ][ unit771_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit771_0[i][2] ][ unit771_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit771_0[i][4] ][ unit771_0[i][5] ] >0);
		X_contra = ( LargeX[771][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit771_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[771][1]=0; L[771][0]=1;}
			satisfiable[771][0]=satisfiable[771][0] & ((x[771] ^ 0) | (x[ unit771_0[i][0] ] ^ unit771_0[i][1]) |(x[ unit771_0[i][2] ] ^ unit771_0[i][3]));
			}
		if(X_contra>0) L[771][0]=2;
		}
	//Check all rules of unit[771][1]
	L[771][1] = LargeX[771][0]>0 ? 1 : 0;
	satisfiable[771][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit771_1[i][0] ][ unit771_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit771_1[i][2] ][ unit771_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit771_1[i][4] ][ unit771_1[i][5] ] >0);
		X_contra = ( LargeX[771][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit771_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[771][0]=0; L[771][1]=1;}
			satisfiable[771][1]=satisfiable[771][1] & ((x[771] ^ 1) | (x[ unit771_1[i][0] ] ^ unit771_1[i][1]) |(x[ unit771_1[i][2] ] ^ unit771_1[i][3]));
			}
		if(X_contra>0) L[771][1]=2;
		}
	//Check all rules of unit[772][0]
	L[772][0] = LargeX[772][1]>0 ? 1 : 0;
	satisfiable[772][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit772_0[i][0] ][ unit772_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit772_0[i][2] ][ unit772_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit772_0[i][4] ][ unit772_0[i][5] ] >0);
		X_contra = ( LargeX[772][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit772_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[772][1]=0; L[772][0]=1;}
			satisfiable[772][0]=satisfiable[772][0] & ((x[772] ^ 0) | (x[ unit772_0[i][0] ] ^ unit772_0[i][1]) |(x[ unit772_0[i][2] ] ^ unit772_0[i][3]));
			}
		if(X_contra>0) L[772][0]=2;
		}
	//Check all rules of unit[772][1]
	L[772][1] = LargeX[772][0]>0 ? 1 : 0;
	satisfiable[772][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit772_1[i][0] ][ unit772_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit772_1[i][2] ][ unit772_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit772_1[i][4] ][ unit772_1[i][5] ] >0);
		X_contra = ( LargeX[772][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit772_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[772][0]=0; L[772][1]=1;}
			satisfiable[772][1]=satisfiable[772][1] & ((x[772] ^ 1) | (x[ unit772_1[i][0] ] ^ unit772_1[i][1]) |(x[ unit772_1[i][2] ] ^ unit772_1[i][3]));
			}
		if(X_contra>0) L[772][1]=2;
		}
	//Check all rules of unit[773][0]
	L[773][0] = LargeX[773][1]>0 ? 1 : 0;
	satisfiable[773][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit773_0[i][0] ][ unit773_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit773_0[i][2] ][ unit773_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit773_0[i][4] ][ unit773_0[i][5] ] >0);
		X_contra = ( LargeX[773][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit773_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[773][1]=0; L[773][0]=1;}
			satisfiable[773][0]=satisfiable[773][0] & ((x[773] ^ 0) | (x[ unit773_0[i][0] ] ^ unit773_0[i][1]) |(x[ unit773_0[i][2] ] ^ unit773_0[i][3]));
			}
		if(X_contra>0) L[773][0]=2;
		}
	//Check all rules of unit[773][1]
	L[773][1] = LargeX[773][0]>0 ? 1 : 0;
	satisfiable[773][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit773_1[i][0] ][ unit773_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit773_1[i][2] ][ unit773_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit773_1[i][4] ][ unit773_1[i][5] ] >0);
		X_contra = ( LargeX[773][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit773_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[773][0]=0; L[773][1]=1;}
			satisfiable[773][1]=satisfiable[773][1] & ((x[773] ^ 1) | (x[ unit773_1[i][0] ] ^ unit773_1[i][1]) |(x[ unit773_1[i][2] ] ^ unit773_1[i][3]));
			}
		if(X_contra>0) L[773][1]=2;
		}
	//Check all rules of unit[774][0]
	L[774][0] = LargeX[774][1]>0 ? 1 : 0;
	satisfiable[774][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit774_0[i][0] ][ unit774_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit774_0[i][2] ][ unit774_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit774_0[i][4] ][ unit774_0[i][5] ] >0);
		X_contra = ( LargeX[774][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit774_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[774][1]=0; L[774][0]=1;}
			satisfiable[774][0]=satisfiable[774][0] & ((x[774] ^ 0) | (x[ unit774_0[i][0] ] ^ unit774_0[i][1]) |(x[ unit774_0[i][2] ] ^ unit774_0[i][3]));
			}
		if(X_contra>0) L[774][0]=2;
		}
	//Check all rules of unit[774][1]
	L[774][1] = LargeX[774][0]>0 ? 1 : 0;
	satisfiable[774][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit774_1[i][0] ][ unit774_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit774_1[i][2] ][ unit774_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit774_1[i][4] ][ unit774_1[i][5] ] >0);
		X_contra = ( LargeX[774][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit774_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[774][0]=0; L[774][1]=1;}
			satisfiable[774][1]=satisfiable[774][1] & ((x[774] ^ 1) | (x[ unit774_1[i][0] ] ^ unit774_1[i][1]) |(x[ unit774_1[i][2] ] ^ unit774_1[i][3]));
			}
		if(X_contra>0) L[774][1]=2;
		}
	//Check all rules of unit[775][0]
	L[775][0] = LargeX[775][1]>0 ? 1 : 0;
	satisfiable[775][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit775_0[i][0] ][ unit775_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit775_0[i][2] ][ unit775_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit775_0[i][4] ][ unit775_0[i][5] ] >0);
		X_contra = ( LargeX[775][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit775_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[775][1]=0; L[775][0]=1;}
			satisfiable[775][0]=satisfiable[775][0] & ((x[775] ^ 0) | (x[ unit775_0[i][0] ] ^ unit775_0[i][1]) |(x[ unit775_0[i][2] ] ^ unit775_0[i][3]));
			}
		if(X_contra>0) L[775][0]=2;
		}
	//Check all rules of unit[775][1]
	L[775][1] = LargeX[775][0]>0 ? 1 : 0;
	satisfiable[775][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit775_1[i][0] ][ unit775_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit775_1[i][2] ][ unit775_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit775_1[i][4] ][ unit775_1[i][5] ] >0);
		X_contra = ( LargeX[775][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit775_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[775][0]=0; L[775][1]=1;}
			satisfiable[775][1]=satisfiable[775][1] & ((x[775] ^ 1) | (x[ unit775_1[i][0] ] ^ unit775_1[i][1]) |(x[ unit775_1[i][2] ] ^ unit775_1[i][3]));
			}
		if(X_contra>0) L[775][1]=2;
		}
	//Check all rules of unit[776][0]
	L[776][0] = LargeX[776][1]>0 ? 1 : 0;
	satisfiable[776][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit776_0[i][0] ][ unit776_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit776_0[i][2] ][ unit776_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit776_0[i][4] ][ unit776_0[i][5] ] >0);
		X_contra = ( LargeX[776][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit776_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[776][1]=0; L[776][0]=1;}
			satisfiable[776][0]=satisfiable[776][0] & ((x[776] ^ 0) | (x[ unit776_0[i][0] ] ^ unit776_0[i][1]) |(x[ unit776_0[i][2] ] ^ unit776_0[i][3]));
			}
		if(X_contra>0) L[776][0]=2;
		}
	//Check all rules of unit[776][1]
	L[776][1] = LargeX[776][0]>0 ? 1 : 0;
	satisfiable[776][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit776_1[i][0] ][ unit776_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit776_1[i][2] ][ unit776_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit776_1[i][4] ][ unit776_1[i][5] ] >0);
		X_contra = ( LargeX[776][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit776_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[776][0]=0; L[776][1]=1;}
			satisfiable[776][1]=satisfiable[776][1] & ((x[776] ^ 1) | (x[ unit776_1[i][0] ] ^ unit776_1[i][1]) |(x[ unit776_1[i][2] ] ^ unit776_1[i][3]));
			}
		if(X_contra>0) L[776][1]=2;
		}
	//Check all rules of unit[777][0]
	L[777][0] = LargeX[777][1]>0 ? 1 : 0;
	satisfiable[777][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit777_0[i][0] ][ unit777_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit777_0[i][2] ][ unit777_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit777_0[i][4] ][ unit777_0[i][5] ] >0);
		X_contra = ( LargeX[777][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit777_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[777][1]=0; L[777][0]=1;}
			satisfiable[777][0]=satisfiable[777][0] & ((x[777] ^ 0) | (x[ unit777_0[i][0] ] ^ unit777_0[i][1]) |(x[ unit777_0[i][2] ] ^ unit777_0[i][3]));
			}
		if(X_contra>0) L[777][0]=2;
		}
	//Check all rules of unit[777][1]
	L[777][1] = LargeX[777][0]>0 ? 1 : 0;
	satisfiable[777][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit777_1[i][0] ][ unit777_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit777_1[i][2] ][ unit777_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit777_1[i][4] ][ unit777_1[i][5] ] >0);
		X_contra = ( LargeX[777][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit777_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[777][0]=0; L[777][1]=1;}
			satisfiable[777][1]=satisfiable[777][1] & ((x[777] ^ 1) | (x[ unit777_1[i][0] ] ^ unit777_1[i][1]) |(x[ unit777_1[i][2] ] ^ unit777_1[i][3]));
			}
		if(X_contra>0) L[777][1]=2;
		}
	//Check all rules of unit[778][0]
	L[778][0] = LargeX[778][1]>0 ? 1 : 0;
	satisfiable[778][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit778_0[i][0] ][ unit778_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit778_0[i][2] ][ unit778_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit778_0[i][4] ][ unit778_0[i][5] ] >0);
		X_contra = ( LargeX[778][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit778_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[778][1]=0; L[778][0]=1;}
			satisfiable[778][0]=satisfiable[778][0] & ((x[778] ^ 0) | (x[ unit778_0[i][0] ] ^ unit778_0[i][1]) |(x[ unit778_0[i][2] ] ^ unit778_0[i][3]));
			}
		if(X_contra>0) L[778][0]=2;
		}
	//Check all rules of unit[778][1]
	L[778][1] = LargeX[778][0]>0 ? 1 : 0;
	satisfiable[778][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit778_1[i][0] ][ unit778_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit778_1[i][2] ][ unit778_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit778_1[i][4] ][ unit778_1[i][5] ] >0);
		X_contra = ( LargeX[778][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit778_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[778][0]=0; L[778][1]=1;}
			satisfiable[778][1]=satisfiable[778][1] & ((x[778] ^ 1) | (x[ unit778_1[i][0] ] ^ unit778_1[i][1]) |(x[ unit778_1[i][2] ] ^ unit778_1[i][3]));
			}
		if(X_contra>0) L[778][1]=2;
		}
	//Check all rules of unit[779][0]
	L[779][0] = LargeX[779][1]>0 ? 1 : 0;
	satisfiable[779][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit779_0[i][0] ][ unit779_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit779_0[i][2] ][ unit779_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit779_0[i][4] ][ unit779_0[i][5] ] >0);
		X_contra = ( LargeX[779][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit779_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[779][1]=0; L[779][0]=1;}
			satisfiable[779][0]=satisfiable[779][0] & ((x[779] ^ 0) | (x[ unit779_0[i][0] ] ^ unit779_0[i][1]) |(x[ unit779_0[i][2] ] ^ unit779_0[i][3]));
			}
		if(X_contra>0) L[779][0]=2;
		}
	//Check all rules of unit[779][1]
	L[779][1] = LargeX[779][0]>0 ? 1 : 0;
	satisfiable[779][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit779_1[i][0] ][ unit779_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit779_1[i][2] ][ unit779_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit779_1[i][4] ][ unit779_1[i][5] ] >0);
		X_contra = ( LargeX[779][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit779_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[779][0]=0; L[779][1]=1;}
			satisfiable[779][1]=satisfiable[779][1] & ((x[779] ^ 1) | (x[ unit779_1[i][0] ] ^ unit779_1[i][1]) |(x[ unit779_1[i][2] ] ^ unit779_1[i][3]));
			}
		if(X_contra>0) L[779][1]=2;
		}
	//Check all rules of unit[780][0]
	L[780][0] = LargeX[780][1]>0 ? 1 : 0;
	satisfiable[780][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit780_0[i][0] ][ unit780_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit780_0[i][2] ][ unit780_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit780_0[i][4] ][ unit780_0[i][5] ] >0);
		X_contra = ( LargeX[780][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit780_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[780][1]=0; L[780][0]=1;}
			satisfiable[780][0]=satisfiable[780][0] & ((x[780] ^ 0) | (x[ unit780_0[i][0] ] ^ unit780_0[i][1]) |(x[ unit780_0[i][2] ] ^ unit780_0[i][3]));
			}
		if(X_contra>0) L[780][0]=2;
		}
	//Check all rules of unit[780][1]
	L[780][1] = LargeX[780][0]>0 ? 1 : 0;
	satisfiable[780][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit780_1[i][0] ][ unit780_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit780_1[i][2] ][ unit780_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit780_1[i][4] ][ unit780_1[i][5] ] >0);
		X_contra = ( LargeX[780][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit780_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[780][0]=0; L[780][1]=1;}
			satisfiable[780][1]=satisfiable[780][1] & ((x[780] ^ 1) | (x[ unit780_1[i][0] ] ^ unit780_1[i][1]) |(x[ unit780_1[i][2] ] ^ unit780_1[i][3]));
			}
		if(X_contra>0) L[780][1]=2;
		}
	//Check all rules of unit[781][0]
	L[781][0] = LargeX[781][1]>0 ? 1 : 0;
	satisfiable[781][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit781_0[i][0] ][ unit781_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit781_0[i][2] ][ unit781_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit781_0[i][4] ][ unit781_0[i][5] ] >0);
		X_contra = ( LargeX[781][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit781_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[781][1]=0; L[781][0]=1;}
			satisfiable[781][0]=satisfiable[781][0] & ((x[781] ^ 0) | (x[ unit781_0[i][0] ] ^ unit781_0[i][1]) |(x[ unit781_0[i][2] ] ^ unit781_0[i][3]));
			}
		if(X_contra>0) L[781][0]=2;
		}
	//Check all rules of unit[781][1]
	L[781][1] = LargeX[781][0]>0 ? 1 : 0;
	satisfiable[781][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit781_1[i][0] ][ unit781_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit781_1[i][2] ][ unit781_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit781_1[i][4] ][ unit781_1[i][5] ] >0);
		X_contra = ( LargeX[781][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit781_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[781][0]=0; L[781][1]=1;}
			satisfiable[781][1]=satisfiable[781][1] & ((x[781] ^ 1) | (x[ unit781_1[i][0] ] ^ unit781_1[i][1]) |(x[ unit781_1[i][2] ] ^ unit781_1[i][3]));
			}
		if(X_contra>0) L[781][1]=2;
		}
	//Check all rules of unit[782][0]
	L[782][0] = LargeX[782][1]>0 ? 1 : 0;
	satisfiable[782][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit782_0[i][0] ][ unit782_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit782_0[i][2] ][ unit782_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit782_0[i][4] ][ unit782_0[i][5] ] >0);
		X_contra = ( LargeX[782][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit782_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[782][1]=0; L[782][0]=1;}
			satisfiable[782][0]=satisfiable[782][0] & ((x[782] ^ 0) | (x[ unit782_0[i][0] ] ^ unit782_0[i][1]) |(x[ unit782_0[i][2] ] ^ unit782_0[i][3]));
			}
		if(X_contra>0) L[782][0]=2;
		}
	//Check all rules of unit[782][1]
	L[782][1] = LargeX[782][0]>0 ? 1 : 0;
	satisfiable[782][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit782_1[i][0] ][ unit782_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit782_1[i][2] ][ unit782_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit782_1[i][4] ][ unit782_1[i][5] ] >0);
		X_contra = ( LargeX[782][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit782_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[782][0]=0; L[782][1]=1;}
			satisfiable[782][1]=satisfiable[782][1] & ((x[782] ^ 1) | (x[ unit782_1[i][0] ] ^ unit782_1[i][1]) |(x[ unit782_1[i][2] ] ^ unit782_1[i][3]));
			}
		if(X_contra>0) L[782][1]=2;
		}
	//Check all rules of unit[783][0]
	L[783][0] = LargeX[783][1]>0 ? 1 : 0;
	satisfiable[783][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit783_0[i][0] ][ unit783_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit783_0[i][2] ][ unit783_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit783_0[i][4] ][ unit783_0[i][5] ] >0);
		X_contra = ( LargeX[783][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit783_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[783][1]=0; L[783][0]=1;}
			satisfiable[783][0]=satisfiable[783][0] & ((x[783] ^ 0) | (x[ unit783_0[i][0] ] ^ unit783_0[i][1]) |(x[ unit783_0[i][2] ] ^ unit783_0[i][3]));
			}
		if(X_contra>0) L[783][0]=2;
		}
	//Check all rules of unit[783][1]
	L[783][1] = LargeX[783][0]>0 ? 1 : 0;
	satisfiable[783][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit783_1[i][0] ][ unit783_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit783_1[i][2] ][ unit783_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit783_1[i][4] ][ unit783_1[i][5] ] >0);
		X_contra = ( LargeX[783][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit783_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[783][0]=0; L[783][1]=1;}
			satisfiable[783][1]=satisfiable[783][1] & ((x[783] ^ 1) | (x[ unit783_1[i][0] ] ^ unit783_1[i][1]) |(x[ unit783_1[i][2] ] ^ unit783_1[i][3]));
			}
		if(X_contra>0) L[783][1]=2;
		}
	//Check all rules of unit[784][0]
	L[784][0] = LargeX[784][1]>0 ? 1 : 0;
	satisfiable[784][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit784_0[i][0] ][ unit784_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit784_0[i][2] ][ unit784_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit784_0[i][4] ][ unit784_0[i][5] ] >0);
		X_contra = ( LargeX[784][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit784_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[784][1]=0; L[784][0]=1;}
			satisfiable[784][0]=satisfiable[784][0] & ((x[784] ^ 0) | (x[ unit784_0[i][0] ] ^ unit784_0[i][1]) |(x[ unit784_0[i][2] ] ^ unit784_0[i][3]));
			}
		if(X_contra>0) L[784][0]=2;
		}
	//Check all rules of unit[784][1]
	L[784][1] = LargeX[784][0]>0 ? 1 : 0;
	satisfiable[784][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit784_1[i][0] ][ unit784_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit784_1[i][2] ][ unit784_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit784_1[i][4] ][ unit784_1[i][5] ] >0);
		X_contra = ( LargeX[784][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit784_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[784][0]=0; L[784][1]=1;}
			satisfiable[784][1]=satisfiable[784][1] & ((x[784] ^ 1) | (x[ unit784_1[i][0] ] ^ unit784_1[i][1]) |(x[ unit784_1[i][2] ] ^ unit784_1[i][3]));
			}
		if(X_contra>0) L[784][1]=2;
		}
	//Check all rules of unit[785][0]
	L[785][0] = LargeX[785][1]>0 ? 1 : 0;
	satisfiable[785][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit785_0[i][0] ][ unit785_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit785_0[i][2] ][ unit785_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit785_0[i][4] ][ unit785_0[i][5] ] >0);
		X_contra = ( LargeX[785][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit785_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[785][1]=0; L[785][0]=1;}
			satisfiable[785][0]=satisfiable[785][0] & ((x[785] ^ 0) | (x[ unit785_0[i][0] ] ^ unit785_0[i][1]) |(x[ unit785_0[i][2] ] ^ unit785_0[i][3]));
			}
		if(X_contra>0) L[785][0]=2;
		}
	//Check all rules of unit[785][1]
	L[785][1] = LargeX[785][0]>0 ? 1 : 0;
	satisfiable[785][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit785_1[i][0] ][ unit785_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit785_1[i][2] ][ unit785_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit785_1[i][4] ][ unit785_1[i][5] ] >0);
		X_contra = ( LargeX[785][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit785_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[785][0]=0; L[785][1]=1;}
			satisfiable[785][1]=satisfiable[785][1] & ((x[785] ^ 1) | (x[ unit785_1[i][0] ] ^ unit785_1[i][1]) |(x[ unit785_1[i][2] ] ^ unit785_1[i][3]));
			}
		if(X_contra>0) L[785][1]=2;
		}
	//Check all rules of unit[786][0]
	L[786][0] = LargeX[786][1]>0 ? 1 : 0;
	satisfiable[786][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit786_0[i][0] ][ unit786_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit786_0[i][2] ][ unit786_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit786_0[i][4] ][ unit786_0[i][5] ] >0);
		X_contra = ( LargeX[786][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit786_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[786][1]=0; L[786][0]=1;}
			satisfiable[786][0]=satisfiable[786][0] & ((x[786] ^ 0) | (x[ unit786_0[i][0] ] ^ unit786_0[i][1]) |(x[ unit786_0[i][2] ] ^ unit786_0[i][3]));
			}
		if(X_contra>0) L[786][0]=2;
		}
	//Check all rules of unit[786][1]
	L[786][1] = LargeX[786][0]>0 ? 1 : 0;
	satisfiable[786][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit786_1[i][0] ][ unit786_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit786_1[i][2] ][ unit786_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit786_1[i][4] ][ unit786_1[i][5] ] >0);
		X_contra = ( LargeX[786][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit786_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[786][0]=0; L[786][1]=1;}
			satisfiable[786][1]=satisfiable[786][1] & ((x[786] ^ 1) | (x[ unit786_1[i][0] ] ^ unit786_1[i][1]) |(x[ unit786_1[i][2] ] ^ unit786_1[i][3]));
			}
		if(X_contra>0) L[786][1]=2;
		}
	//Check all rules of unit[787][0]
	L[787][0] = LargeX[787][1]>0 ? 1 : 0;
	satisfiable[787][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit787_0[i][0] ][ unit787_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit787_0[i][2] ][ unit787_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit787_0[i][4] ][ unit787_0[i][5] ] >0);
		X_contra = ( LargeX[787][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit787_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[787][1]=0; L[787][0]=1;}
			satisfiable[787][0]=satisfiable[787][0] & ((x[787] ^ 0) | (x[ unit787_0[i][0] ] ^ unit787_0[i][1]) |(x[ unit787_0[i][2] ] ^ unit787_0[i][3]));
			}
		if(X_contra>0) L[787][0]=2;
		}
	//Check all rules of unit[787][1]
	L[787][1] = LargeX[787][0]>0 ? 1 : 0;
	satisfiable[787][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit787_1[i][0] ][ unit787_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit787_1[i][2] ][ unit787_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit787_1[i][4] ][ unit787_1[i][5] ] >0);
		X_contra = ( LargeX[787][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit787_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[787][0]=0; L[787][1]=1;}
			satisfiable[787][1]=satisfiable[787][1] & ((x[787] ^ 1) | (x[ unit787_1[i][0] ] ^ unit787_1[i][1]) |(x[ unit787_1[i][2] ] ^ unit787_1[i][3]));
			}
		if(X_contra>0) L[787][1]=2;
		}
	//Check all rules of unit[788][0]
	L[788][0] = LargeX[788][1]>0 ? 1 : 0;
	satisfiable[788][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit788_0[i][0] ][ unit788_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit788_0[i][2] ][ unit788_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit788_0[i][4] ][ unit788_0[i][5] ] >0);
		X_contra = ( LargeX[788][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit788_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[788][1]=0; L[788][0]=1;}
			satisfiable[788][0]=satisfiable[788][0] & ((x[788] ^ 0) | (x[ unit788_0[i][0] ] ^ unit788_0[i][1]) |(x[ unit788_0[i][2] ] ^ unit788_0[i][3]));
			}
		if(X_contra>0) L[788][0]=2;
		}
	//Check all rules of unit[788][1]
	L[788][1] = LargeX[788][0]>0 ? 1 : 0;
	satisfiable[788][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit788_1[i][0] ][ unit788_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit788_1[i][2] ][ unit788_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit788_1[i][4] ][ unit788_1[i][5] ] >0);
		X_contra = ( LargeX[788][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit788_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[788][0]=0; L[788][1]=1;}
			satisfiable[788][1]=satisfiable[788][1] & ((x[788] ^ 1) | (x[ unit788_1[i][0] ] ^ unit788_1[i][1]) |(x[ unit788_1[i][2] ] ^ unit788_1[i][3]));
			}
		if(X_contra>0) L[788][1]=2;
		}
	//Check all rules of unit[789][0]
	L[789][0] = LargeX[789][1]>0 ? 1 : 0;
	satisfiable[789][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit789_0[i][0] ][ unit789_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit789_0[i][2] ][ unit789_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit789_0[i][4] ][ unit789_0[i][5] ] >0);
		X_contra = ( LargeX[789][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit789_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[789][1]=0; L[789][0]=1;}
			satisfiable[789][0]=satisfiable[789][0] & ((x[789] ^ 0) | (x[ unit789_0[i][0] ] ^ unit789_0[i][1]) |(x[ unit789_0[i][2] ] ^ unit789_0[i][3]));
			}
		if(X_contra>0) L[789][0]=2;
		}
	//Check all rules of unit[789][1]
	L[789][1] = LargeX[789][0]>0 ? 1 : 0;
	satisfiable[789][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit789_1[i][0] ][ unit789_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit789_1[i][2] ][ unit789_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit789_1[i][4] ][ unit789_1[i][5] ] >0);
		X_contra = ( LargeX[789][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit789_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[789][0]=0; L[789][1]=1;}
			satisfiable[789][1]=satisfiable[789][1] & ((x[789] ^ 1) | (x[ unit789_1[i][0] ] ^ unit789_1[i][1]) |(x[ unit789_1[i][2] ] ^ unit789_1[i][3]));
			}
		if(X_contra>0) L[789][1]=2;
		}
	//Check all rules of unit[790][0]
	L[790][0] = LargeX[790][1]>0 ? 1 : 0;
	satisfiable[790][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit790_0[i][0] ][ unit790_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit790_0[i][2] ][ unit790_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit790_0[i][4] ][ unit790_0[i][5] ] >0);
		X_contra = ( LargeX[790][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit790_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[790][1]=0; L[790][0]=1;}
			satisfiable[790][0]=satisfiable[790][0] & ((x[790] ^ 0) | (x[ unit790_0[i][0] ] ^ unit790_0[i][1]) |(x[ unit790_0[i][2] ] ^ unit790_0[i][3]));
			}
		if(X_contra>0) L[790][0]=2;
		}
	//Check all rules of unit[790][1]
	L[790][1] = LargeX[790][0]>0 ? 1 : 0;
	satisfiable[790][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit790_1[i][0] ][ unit790_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit790_1[i][2] ][ unit790_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit790_1[i][4] ][ unit790_1[i][5] ] >0);
		X_contra = ( LargeX[790][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit790_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[790][0]=0; L[790][1]=1;}
			satisfiable[790][1]=satisfiable[790][1] & ((x[790] ^ 1) | (x[ unit790_1[i][0] ] ^ unit790_1[i][1]) |(x[ unit790_1[i][2] ] ^ unit790_1[i][3]));
			}
		if(X_contra>0) L[790][1]=2;
		}
	//Check all rules of unit[791][0]
	L[791][0] = LargeX[791][1]>0 ? 1 : 0;
	satisfiable[791][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit791_0[i][0] ][ unit791_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit791_0[i][2] ][ unit791_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit791_0[i][4] ][ unit791_0[i][5] ] >0);
		X_contra = ( LargeX[791][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit791_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[791][1]=0; L[791][0]=1;}
			satisfiable[791][0]=satisfiable[791][0] & ((x[791] ^ 0) | (x[ unit791_0[i][0] ] ^ unit791_0[i][1]) |(x[ unit791_0[i][2] ] ^ unit791_0[i][3]));
			}
		if(X_contra>0) L[791][0]=2;
		}
	//Check all rules of unit[791][1]
	L[791][1] = LargeX[791][0]>0 ? 1 : 0;
	satisfiable[791][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit791_1[i][0] ][ unit791_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit791_1[i][2] ][ unit791_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit791_1[i][4] ][ unit791_1[i][5] ] >0);
		X_contra = ( LargeX[791][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit791_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[791][0]=0; L[791][1]=1;}
			satisfiable[791][1]=satisfiable[791][1] & ((x[791] ^ 1) | (x[ unit791_1[i][0] ] ^ unit791_1[i][1]) |(x[ unit791_1[i][2] ] ^ unit791_1[i][3]));
			}
		if(X_contra>0) L[791][1]=2;
		}
	//Check all rules of unit[792][0]
	L[792][0] = LargeX[792][1]>0 ? 1 : 0;
	satisfiable[792][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit792_0[i][0] ][ unit792_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit792_0[i][2] ][ unit792_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit792_0[i][4] ][ unit792_0[i][5] ] >0);
		X_contra = ( LargeX[792][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit792_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[792][1]=0; L[792][0]=1;}
			satisfiable[792][0]=satisfiable[792][0] & ((x[792] ^ 0) | (x[ unit792_0[i][0] ] ^ unit792_0[i][1]) |(x[ unit792_0[i][2] ] ^ unit792_0[i][3]));
			}
		if(X_contra>0) L[792][0]=2;
		}
	//Check all rules of unit[792][1]
	L[792][1] = LargeX[792][0]>0 ? 1 : 0;
	satisfiable[792][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit792_1[i][0] ][ unit792_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit792_1[i][2] ][ unit792_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit792_1[i][4] ][ unit792_1[i][5] ] >0);
		X_contra = ( LargeX[792][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit792_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[792][0]=0; L[792][1]=1;}
			satisfiable[792][1]=satisfiable[792][1] & ((x[792] ^ 1) | (x[ unit792_1[i][0] ] ^ unit792_1[i][1]) |(x[ unit792_1[i][2] ] ^ unit792_1[i][3]));
			}
		if(X_contra>0) L[792][1]=2;
		}
	//Check all rules of unit[793][0]
	L[793][0] = LargeX[793][1]>0 ? 1 : 0;
	satisfiable[793][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit793_0[i][0] ][ unit793_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit793_0[i][2] ][ unit793_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit793_0[i][4] ][ unit793_0[i][5] ] >0);
		X_contra = ( LargeX[793][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit793_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[793][1]=0; L[793][0]=1;}
			satisfiable[793][0]=satisfiable[793][0] & ((x[793] ^ 0) | (x[ unit793_0[i][0] ] ^ unit793_0[i][1]) |(x[ unit793_0[i][2] ] ^ unit793_0[i][3]));
			}
		if(X_contra>0) L[793][0]=2;
		}
	//Check all rules of unit[793][1]
	L[793][1] = LargeX[793][0]>0 ? 1 : 0;
	satisfiable[793][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit793_1[i][0] ][ unit793_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit793_1[i][2] ][ unit793_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit793_1[i][4] ][ unit793_1[i][5] ] >0);
		X_contra = ( LargeX[793][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit793_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[793][0]=0; L[793][1]=1;}
			satisfiable[793][1]=satisfiable[793][1] & ((x[793] ^ 1) | (x[ unit793_1[i][0] ] ^ unit793_1[i][1]) |(x[ unit793_1[i][2] ] ^ unit793_1[i][3]));
			}
		if(X_contra>0) L[793][1]=2;
		}
	//Check all rules of unit[794][0]
	L[794][0] = LargeX[794][1]>0 ? 1 : 0;
	satisfiable[794][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit794_0[i][0] ][ unit794_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit794_0[i][2] ][ unit794_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit794_0[i][4] ][ unit794_0[i][5] ] >0);
		X_contra = ( LargeX[794][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit794_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[794][1]=0; L[794][0]=1;}
			satisfiable[794][0]=satisfiable[794][0] & ((x[794] ^ 0) | (x[ unit794_0[i][0] ] ^ unit794_0[i][1]) |(x[ unit794_0[i][2] ] ^ unit794_0[i][3]));
			}
		if(X_contra>0) L[794][0]=2;
		}
	//Check all rules of unit[794][1]
	L[794][1] = LargeX[794][0]>0 ? 1 : 0;
	satisfiable[794][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit794_1[i][0] ][ unit794_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit794_1[i][2] ][ unit794_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit794_1[i][4] ][ unit794_1[i][5] ] >0);
		X_contra = ( LargeX[794][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit794_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[794][0]=0; L[794][1]=1;}
			satisfiable[794][1]=satisfiable[794][1] & ((x[794] ^ 1) | (x[ unit794_1[i][0] ] ^ unit794_1[i][1]) |(x[ unit794_1[i][2] ] ^ unit794_1[i][3]));
			}
		if(X_contra>0) L[794][1]=2;
		}
	//Check all rules of unit[795][0]
	L[795][0] = LargeX[795][1]>0 ? 1 : 0;
	satisfiable[795][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit795_0[i][0] ][ unit795_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit795_0[i][2] ][ unit795_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit795_0[i][4] ][ unit795_0[i][5] ] >0);
		X_contra = ( LargeX[795][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit795_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[795][1]=0; L[795][0]=1;}
			satisfiable[795][0]=satisfiable[795][0] & ((x[795] ^ 0) | (x[ unit795_0[i][0] ] ^ unit795_0[i][1]) |(x[ unit795_0[i][2] ] ^ unit795_0[i][3]));
			}
		if(X_contra>0) L[795][0]=2;
		}
	//Check all rules of unit[795][1]
	L[795][1] = LargeX[795][0]>0 ? 1 : 0;
	satisfiable[795][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit795_1[i][0] ][ unit795_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit795_1[i][2] ][ unit795_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit795_1[i][4] ][ unit795_1[i][5] ] >0);
		X_contra = ( LargeX[795][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit795_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[795][0]=0; L[795][1]=1;}
			satisfiable[795][1]=satisfiable[795][1] & ((x[795] ^ 1) | (x[ unit795_1[i][0] ] ^ unit795_1[i][1]) |(x[ unit795_1[i][2] ] ^ unit795_1[i][3]));
			}
		if(X_contra>0) L[795][1]=2;
		}
	//Check all rules of unit[796][0]
	L[796][0] = LargeX[796][1]>0 ? 1 : 0;
	satisfiable[796][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit796_0[i][0] ][ unit796_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit796_0[i][2] ][ unit796_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit796_0[i][4] ][ unit796_0[i][5] ] >0);
		X_contra = ( LargeX[796][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit796_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[796][1]=0; L[796][0]=1;}
			satisfiable[796][0]=satisfiable[796][0] & ((x[796] ^ 0) | (x[ unit796_0[i][0] ] ^ unit796_0[i][1]) |(x[ unit796_0[i][2] ] ^ unit796_0[i][3]));
			}
		if(X_contra>0) L[796][0]=2;
		}
	//Check all rules of unit[796][1]
	L[796][1] = LargeX[796][0]>0 ? 1 : 0;
	satisfiable[796][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit796_1[i][0] ][ unit796_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit796_1[i][2] ][ unit796_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit796_1[i][4] ][ unit796_1[i][5] ] >0);
		X_contra = ( LargeX[796][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit796_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[796][0]=0; L[796][1]=1;}
			satisfiable[796][1]=satisfiable[796][1] & ((x[796] ^ 1) | (x[ unit796_1[i][0] ] ^ unit796_1[i][1]) |(x[ unit796_1[i][2] ] ^ unit796_1[i][3]));
			}
		if(X_contra>0) L[796][1]=2;
		}
	//Check all rules of unit[797][0]
	L[797][0] = LargeX[797][1]>0 ? 1 : 0;
	satisfiable[797][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit797_0[i][0] ][ unit797_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit797_0[i][2] ][ unit797_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit797_0[i][4] ][ unit797_0[i][5] ] >0);
		X_contra = ( LargeX[797][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit797_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[797][1]=0; L[797][0]=1;}
			satisfiable[797][0]=satisfiable[797][0] & ((x[797] ^ 0) | (x[ unit797_0[i][0] ] ^ unit797_0[i][1]) |(x[ unit797_0[i][2] ] ^ unit797_0[i][3]));
			}
		if(X_contra>0) L[797][0]=2;
		}
	//Check all rules of unit[797][1]
	L[797][1] = LargeX[797][0]>0 ? 1 : 0;
	satisfiable[797][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit797_1[i][0] ][ unit797_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit797_1[i][2] ][ unit797_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit797_1[i][4] ][ unit797_1[i][5] ] >0);
		X_contra = ( LargeX[797][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit797_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[797][0]=0; L[797][1]=1;}
			satisfiable[797][1]=satisfiable[797][1] & ((x[797] ^ 1) | (x[ unit797_1[i][0] ] ^ unit797_1[i][1]) |(x[ unit797_1[i][2] ] ^ unit797_1[i][3]));
			}
		if(X_contra>0) L[797][1]=2;
		}
	//Check all rules of unit[798][0]
	L[798][0] = LargeX[798][1]>0 ? 1 : 0;
	satisfiable[798][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit798_0[i][0] ][ unit798_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit798_0[i][2] ][ unit798_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit798_0[i][4] ][ unit798_0[i][5] ] >0);
		X_contra = ( LargeX[798][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit798_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[798][1]=0; L[798][0]=1;}
			satisfiable[798][0]=satisfiable[798][0] & ((x[798] ^ 0) | (x[ unit798_0[i][0] ] ^ unit798_0[i][1]) |(x[ unit798_0[i][2] ] ^ unit798_0[i][3]));
			}
		if(X_contra>0) L[798][0]=2;
		}
	//Check all rules of unit[798][1]
	L[798][1] = LargeX[798][0]>0 ? 1 : 0;
	satisfiable[798][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit798_1[i][0] ][ unit798_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit798_1[i][2] ][ unit798_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit798_1[i][4] ][ unit798_1[i][5] ] >0);
		X_contra = ( LargeX[798][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit798_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[798][0]=0; L[798][1]=1;}
			satisfiable[798][1]=satisfiable[798][1] & ((x[798] ^ 1) | (x[ unit798_1[i][0] ] ^ unit798_1[i][1]) |(x[ unit798_1[i][2] ] ^ unit798_1[i][3]));
			}
		if(X_contra>0) L[798][1]=2;
		}
	//Check all rules of unit[799][0]
	L[799][0] = LargeX[799][1]>0 ? 1 : 0;
	satisfiable[799][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit799_0[i][0] ][ unit799_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit799_0[i][2] ][ unit799_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit799_0[i][4] ][ unit799_0[i][5] ] >0);
		X_contra = ( LargeX[799][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit799_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[799][1]=0; L[799][0]=1;}
			satisfiable[799][0]=satisfiable[799][0] & ((x[799] ^ 0) | (x[ unit799_0[i][0] ] ^ unit799_0[i][1]) |(x[ unit799_0[i][2] ] ^ unit799_0[i][3]));
			}
		if(X_contra>0) L[799][0]=2;
		}
	//Check all rules of unit[799][1]
	L[799][1] = LargeX[799][0]>0 ? 1 : 0;
	satisfiable[799][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit799_1[i][0] ][ unit799_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit799_1[i][2] ][ unit799_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit799_1[i][4] ][ unit799_1[i][5] ] >0);
		X_contra = ( LargeX[799][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit799_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[799][0]=0; L[799][1]=1;}
			satisfiable[799][1]=satisfiable[799][1] & ((x[799] ^ 1) | (x[ unit799_1[i][0] ] ^ unit799_1[i][1]) |(x[ unit799_1[i][2] ] ^ unit799_1[i][3]));
			}
		if(X_contra>0) L[799][1]=2;
		}
	//Check all rules of unit[800][0]
	L[800][0] = LargeX[800][1]>0 ? 1 : 0;
	satisfiable[800][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit800_0[i][0] ][ unit800_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit800_0[i][2] ][ unit800_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit800_0[i][4] ][ unit800_0[i][5] ] >0);
		X_contra = ( LargeX[800][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit800_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[800][1]=0; L[800][0]=1;}
			satisfiable[800][0]=satisfiable[800][0] & ((x[800] ^ 0) | (x[ unit800_0[i][0] ] ^ unit800_0[i][1]) |(x[ unit800_0[i][2] ] ^ unit800_0[i][3]));
			}
		if(X_contra>0) L[800][0]=2;
		}
	//Check all rules of unit[800][1]
	L[800][1] = LargeX[800][0]>0 ? 1 : 0;
	satisfiable[800][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit800_1[i][0] ][ unit800_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit800_1[i][2] ][ unit800_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit800_1[i][4] ][ unit800_1[i][5] ] >0);
		X_contra = ( LargeX[800][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit800_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[800][0]=0; L[800][1]=1;}
			satisfiable[800][1]=satisfiable[800][1] & ((x[800] ^ 1) | (x[ unit800_1[i][0] ] ^ unit800_1[i][1]) |(x[ unit800_1[i][2] ] ^ unit800_1[i][3]));
			}
		if(X_contra>0) L[800][1]=2;
		}
	//Check all rules of unit[801][0]
	L[801][0] = LargeX[801][1]>0 ? 1 : 0;
	satisfiable[801][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit801_0[i][0] ][ unit801_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit801_0[i][2] ][ unit801_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit801_0[i][4] ][ unit801_0[i][5] ] >0);
		X_contra = ( LargeX[801][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit801_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[801][1]=0; L[801][0]=1;}
			satisfiable[801][0]=satisfiable[801][0] & ((x[801] ^ 0) | (x[ unit801_0[i][0] ] ^ unit801_0[i][1]) |(x[ unit801_0[i][2] ] ^ unit801_0[i][3]));
			}
		if(X_contra>0) L[801][0]=2;
		}
	//Check all rules of unit[801][1]
	L[801][1] = LargeX[801][0]>0 ? 1 : 0;
	satisfiable[801][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit801_1[i][0] ][ unit801_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit801_1[i][2] ][ unit801_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit801_1[i][4] ][ unit801_1[i][5] ] >0);
		X_contra = ( LargeX[801][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit801_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[801][0]=0; L[801][1]=1;}
			satisfiable[801][1]=satisfiable[801][1] & ((x[801] ^ 1) | (x[ unit801_1[i][0] ] ^ unit801_1[i][1]) |(x[ unit801_1[i][2] ] ^ unit801_1[i][3]));
			}
		if(X_contra>0) L[801][1]=2;
		}
	//Check all rules of unit[802][0]
	L[802][0] = LargeX[802][1]>0 ? 1 : 0;
	satisfiable[802][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit802_0[i][0] ][ unit802_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit802_0[i][2] ][ unit802_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit802_0[i][4] ][ unit802_0[i][5] ] >0);
		X_contra = ( LargeX[802][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit802_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[802][1]=0; L[802][0]=1;}
			satisfiable[802][0]=satisfiable[802][0] & ((x[802] ^ 0) | (x[ unit802_0[i][0] ] ^ unit802_0[i][1]) |(x[ unit802_0[i][2] ] ^ unit802_0[i][3]));
			}
		if(X_contra>0) L[802][0]=2;
		}
	//Check all rules of unit[802][1]
	L[802][1] = LargeX[802][0]>0 ? 1 : 0;
	satisfiable[802][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit802_1[i][0] ][ unit802_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit802_1[i][2] ][ unit802_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit802_1[i][4] ][ unit802_1[i][5] ] >0);
		X_contra = ( LargeX[802][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit802_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[802][0]=0; L[802][1]=1;}
			satisfiable[802][1]=satisfiable[802][1] & ((x[802] ^ 1) | (x[ unit802_1[i][0] ] ^ unit802_1[i][1]) |(x[ unit802_1[i][2] ] ^ unit802_1[i][3]));
			}
		if(X_contra>0) L[802][1]=2;
		}
	//Check all rules of unit[803][0]
	L[803][0] = LargeX[803][1]>0 ? 1 : 0;
	satisfiable[803][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit803_0[i][0] ][ unit803_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit803_0[i][2] ][ unit803_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit803_0[i][4] ][ unit803_0[i][5] ] >0);
		X_contra = ( LargeX[803][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit803_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[803][1]=0; L[803][0]=1;}
			satisfiable[803][0]=satisfiable[803][0] & ((x[803] ^ 0) | (x[ unit803_0[i][0] ] ^ unit803_0[i][1]) |(x[ unit803_0[i][2] ] ^ unit803_0[i][3]));
			}
		if(X_contra>0) L[803][0]=2;
		}
	//Check all rules of unit[803][1]
	L[803][1] = LargeX[803][0]>0 ? 1 : 0;
	satisfiable[803][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit803_1[i][0] ][ unit803_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit803_1[i][2] ][ unit803_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit803_1[i][4] ][ unit803_1[i][5] ] >0);
		X_contra = ( LargeX[803][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit803_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[803][0]=0; L[803][1]=1;}
			satisfiable[803][1]=satisfiable[803][1] & ((x[803] ^ 1) | (x[ unit803_1[i][0] ] ^ unit803_1[i][1]) |(x[ unit803_1[i][2] ] ^ unit803_1[i][3]));
			}
		if(X_contra>0) L[803][1]=2;
		}
	//Check all rules of unit[804][0]
	L[804][0] = LargeX[804][1]>0 ? 1 : 0;
	satisfiable[804][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit804_0[i][0] ][ unit804_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit804_0[i][2] ][ unit804_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit804_0[i][4] ][ unit804_0[i][5] ] >0);
		X_contra = ( LargeX[804][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit804_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[804][1]=0; L[804][0]=1;}
			satisfiable[804][0]=satisfiable[804][0] & ((x[804] ^ 0) | (x[ unit804_0[i][0] ] ^ unit804_0[i][1]) |(x[ unit804_0[i][2] ] ^ unit804_0[i][3]));
			}
		if(X_contra>0) L[804][0]=2;
		}
	//Check all rules of unit[804][1]
	L[804][1] = LargeX[804][0]>0 ? 1 : 0;
	satisfiable[804][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit804_1[i][0] ][ unit804_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit804_1[i][2] ][ unit804_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit804_1[i][4] ][ unit804_1[i][5] ] >0);
		X_contra = ( LargeX[804][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit804_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[804][0]=0; L[804][1]=1;}
			satisfiable[804][1]=satisfiable[804][1] & ((x[804] ^ 1) | (x[ unit804_1[i][0] ] ^ unit804_1[i][1]) |(x[ unit804_1[i][2] ] ^ unit804_1[i][3]));
			}
		if(X_contra>0) L[804][1]=2;
		}
	//Check all rules of unit[805][0]
	L[805][0] = LargeX[805][1]>0 ? 1 : 0;
	satisfiable[805][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit805_0[i][0] ][ unit805_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit805_0[i][2] ][ unit805_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit805_0[i][4] ][ unit805_0[i][5] ] >0);
		X_contra = ( LargeX[805][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit805_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[805][1]=0; L[805][0]=1;}
			satisfiable[805][0]=satisfiable[805][0] & ((x[805] ^ 0) | (x[ unit805_0[i][0] ] ^ unit805_0[i][1]) |(x[ unit805_0[i][2] ] ^ unit805_0[i][3]));
			}
		if(X_contra>0) L[805][0]=2;
		}
	//Check all rules of unit[805][1]
	L[805][1] = LargeX[805][0]>0 ? 1 : 0;
	satisfiable[805][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit805_1[i][0] ][ unit805_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit805_1[i][2] ][ unit805_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit805_1[i][4] ][ unit805_1[i][5] ] >0);
		X_contra = ( LargeX[805][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit805_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[805][0]=0; L[805][1]=1;}
			satisfiable[805][1]=satisfiable[805][1] & ((x[805] ^ 1) | (x[ unit805_1[i][0] ] ^ unit805_1[i][1]) |(x[ unit805_1[i][2] ] ^ unit805_1[i][3]));
			}
		if(X_contra>0) L[805][1]=2;
		}
	//Check all rules of unit[806][0]
	L[806][0] = LargeX[806][1]>0 ? 1 : 0;
	satisfiable[806][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit806_0[i][0] ][ unit806_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit806_0[i][2] ][ unit806_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit806_0[i][4] ][ unit806_0[i][5] ] >0);
		X_contra = ( LargeX[806][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit806_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[806][1]=0; L[806][0]=1;}
			satisfiable[806][0]=satisfiable[806][0] & ((x[806] ^ 0) | (x[ unit806_0[i][0] ] ^ unit806_0[i][1]) |(x[ unit806_0[i][2] ] ^ unit806_0[i][3]));
			}
		if(X_contra>0) L[806][0]=2;
		}
	//Check all rules of unit[806][1]
	L[806][1] = LargeX[806][0]>0 ? 1 : 0;
	satisfiable[806][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit806_1[i][0] ][ unit806_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit806_1[i][2] ][ unit806_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit806_1[i][4] ][ unit806_1[i][5] ] >0);
		X_contra = ( LargeX[806][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit806_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[806][0]=0; L[806][1]=1;}
			satisfiable[806][1]=satisfiable[806][1] & ((x[806] ^ 1) | (x[ unit806_1[i][0] ] ^ unit806_1[i][1]) |(x[ unit806_1[i][2] ] ^ unit806_1[i][3]));
			}
		if(X_contra>0) L[806][1]=2;
		}
	//Check all rules of unit[807][0]
	L[807][0] = LargeX[807][1]>0 ? 1 : 0;
	satisfiable[807][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit807_0[i][0] ][ unit807_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit807_0[i][2] ][ unit807_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit807_0[i][4] ][ unit807_0[i][5] ] >0);
		X_contra = ( LargeX[807][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit807_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[807][1]=0; L[807][0]=1;}
			satisfiable[807][0]=satisfiable[807][0] & ((x[807] ^ 0) | (x[ unit807_0[i][0] ] ^ unit807_0[i][1]) |(x[ unit807_0[i][2] ] ^ unit807_0[i][3]));
			}
		if(X_contra>0) L[807][0]=2;
		}
	//Check all rules of unit[807][1]
	L[807][1] = LargeX[807][0]>0 ? 1 : 0;
	satisfiable[807][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit807_1[i][0] ][ unit807_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit807_1[i][2] ][ unit807_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit807_1[i][4] ][ unit807_1[i][5] ] >0);
		X_contra = ( LargeX[807][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit807_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[807][0]=0; L[807][1]=1;}
			satisfiable[807][1]=satisfiable[807][1] & ((x[807] ^ 1) | (x[ unit807_1[i][0] ] ^ unit807_1[i][1]) |(x[ unit807_1[i][2] ] ^ unit807_1[i][3]));
			}
		if(X_contra>0) L[807][1]=2;
		}
	//Check all rules of unit[808][0]
	L[808][0] = LargeX[808][1]>0 ? 1 : 0;
	satisfiable[808][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit808_0[i][0] ][ unit808_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit808_0[i][2] ][ unit808_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit808_0[i][4] ][ unit808_0[i][5] ] >0);
		X_contra = ( LargeX[808][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit808_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[808][1]=0; L[808][0]=1;}
			satisfiable[808][0]=satisfiable[808][0] & ((x[808] ^ 0) | (x[ unit808_0[i][0] ] ^ unit808_0[i][1]) |(x[ unit808_0[i][2] ] ^ unit808_0[i][3]));
			}
		if(X_contra>0) L[808][0]=2;
		}
	//Check all rules of unit[808][1]
	L[808][1] = LargeX[808][0]>0 ? 1 : 0;
	satisfiable[808][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit808_1[i][0] ][ unit808_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit808_1[i][2] ][ unit808_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit808_1[i][4] ][ unit808_1[i][5] ] >0);
		X_contra = ( LargeX[808][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit808_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[808][0]=0; L[808][1]=1;}
			satisfiable[808][1]=satisfiable[808][1] & ((x[808] ^ 1) | (x[ unit808_1[i][0] ] ^ unit808_1[i][1]) |(x[ unit808_1[i][2] ] ^ unit808_1[i][3]));
			}
		if(X_contra>0) L[808][1]=2;
		}
	//Check all rules of unit[809][0]
	L[809][0] = LargeX[809][1]>0 ? 1 : 0;
	satisfiable[809][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit809_0[i][0] ][ unit809_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit809_0[i][2] ][ unit809_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit809_0[i][4] ][ unit809_0[i][5] ] >0);
		X_contra = ( LargeX[809][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit809_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[809][1]=0; L[809][0]=1;}
			satisfiable[809][0]=satisfiable[809][0] & ((x[809] ^ 0) | (x[ unit809_0[i][0] ] ^ unit809_0[i][1]) |(x[ unit809_0[i][2] ] ^ unit809_0[i][3]));
			}
		if(X_contra>0) L[809][0]=2;
		}
	//Check all rules of unit[809][1]
	L[809][1] = LargeX[809][0]>0 ? 1 : 0;
	satisfiable[809][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit809_1[i][0] ][ unit809_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit809_1[i][2] ][ unit809_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit809_1[i][4] ][ unit809_1[i][5] ] >0);
		X_contra = ( LargeX[809][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit809_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[809][0]=0; L[809][1]=1;}
			satisfiable[809][1]=satisfiable[809][1] & ((x[809] ^ 1) | (x[ unit809_1[i][0] ] ^ unit809_1[i][1]) |(x[ unit809_1[i][2] ] ^ unit809_1[i][3]));
			}
		if(X_contra>0) L[809][1]=2;
		}
	//Check all rules of unit[810][0]
	L[810][0] = LargeX[810][1]>0 ? 1 : 0;
	satisfiable[810][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit810_0[i][0] ][ unit810_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit810_0[i][2] ][ unit810_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit810_0[i][4] ][ unit810_0[i][5] ] >0);
		X_contra = ( LargeX[810][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit810_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[810][1]=0; L[810][0]=1;}
			satisfiable[810][0]=satisfiable[810][0] & ((x[810] ^ 0) | (x[ unit810_0[i][0] ] ^ unit810_0[i][1]) |(x[ unit810_0[i][2] ] ^ unit810_0[i][3]));
			}
		if(X_contra>0) L[810][0]=2;
		}
	//Check all rules of unit[810][1]
	L[810][1] = LargeX[810][0]>0 ? 1 : 0;
	satisfiable[810][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit810_1[i][0] ][ unit810_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit810_1[i][2] ][ unit810_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit810_1[i][4] ][ unit810_1[i][5] ] >0);
		X_contra = ( LargeX[810][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit810_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[810][0]=0; L[810][1]=1;}
			satisfiable[810][1]=satisfiable[810][1] & ((x[810] ^ 1) | (x[ unit810_1[i][0] ] ^ unit810_1[i][1]) |(x[ unit810_1[i][2] ] ^ unit810_1[i][3]));
			}
		if(X_contra>0) L[810][1]=2;
		}
	//Check all rules of unit[811][0]
	L[811][0] = LargeX[811][1]>0 ? 1 : 0;
	satisfiable[811][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit811_0[i][0] ][ unit811_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit811_0[i][2] ][ unit811_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit811_0[i][4] ][ unit811_0[i][5] ] >0);
		X_contra = ( LargeX[811][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit811_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[811][1]=0; L[811][0]=1;}
			satisfiable[811][0]=satisfiable[811][0] & ((x[811] ^ 0) | (x[ unit811_0[i][0] ] ^ unit811_0[i][1]) |(x[ unit811_0[i][2] ] ^ unit811_0[i][3]));
			}
		if(X_contra>0) L[811][0]=2;
		}
	//Check all rules of unit[811][1]
	L[811][1] = LargeX[811][0]>0 ? 1 : 0;
	satisfiable[811][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit811_1[i][0] ][ unit811_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit811_1[i][2] ][ unit811_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit811_1[i][4] ][ unit811_1[i][5] ] >0);
		X_contra = ( LargeX[811][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit811_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[811][0]=0; L[811][1]=1;}
			satisfiable[811][1]=satisfiable[811][1] & ((x[811] ^ 1) | (x[ unit811_1[i][0] ] ^ unit811_1[i][1]) |(x[ unit811_1[i][2] ] ^ unit811_1[i][3]));
			}
		if(X_contra>0) L[811][1]=2;
		}
	//Check all rules of unit[812][0]
	L[812][0] = LargeX[812][1]>0 ? 1 : 0;
	satisfiable[812][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit812_0[i][0] ][ unit812_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit812_0[i][2] ][ unit812_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit812_0[i][4] ][ unit812_0[i][5] ] >0);
		X_contra = ( LargeX[812][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit812_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[812][1]=0; L[812][0]=1;}
			satisfiable[812][0]=satisfiable[812][0] & ((x[812] ^ 0) | (x[ unit812_0[i][0] ] ^ unit812_0[i][1]) |(x[ unit812_0[i][2] ] ^ unit812_0[i][3]));
			}
		if(X_contra>0) L[812][0]=2;
		}
	//Check all rules of unit[812][1]
	L[812][1] = LargeX[812][0]>0 ? 1 : 0;
	satisfiable[812][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit812_1[i][0] ][ unit812_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit812_1[i][2] ][ unit812_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit812_1[i][4] ][ unit812_1[i][5] ] >0);
		X_contra = ( LargeX[812][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit812_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[812][0]=0; L[812][1]=1;}
			satisfiable[812][1]=satisfiable[812][1] & ((x[812] ^ 1) | (x[ unit812_1[i][0] ] ^ unit812_1[i][1]) |(x[ unit812_1[i][2] ] ^ unit812_1[i][3]));
			}
		if(X_contra>0) L[812][1]=2;
		}
	//Check all rules of unit[813][0]
	L[813][0] = LargeX[813][1]>0 ? 1 : 0;
	satisfiable[813][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit813_0[i][0] ][ unit813_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit813_0[i][2] ][ unit813_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit813_0[i][4] ][ unit813_0[i][5] ] >0);
		X_contra = ( LargeX[813][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit813_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[813][1]=0; L[813][0]=1;}
			satisfiable[813][0]=satisfiable[813][0] & ((x[813] ^ 0) | (x[ unit813_0[i][0] ] ^ unit813_0[i][1]) |(x[ unit813_0[i][2] ] ^ unit813_0[i][3]));
			}
		if(X_contra>0) L[813][0]=2;
		}
	//Check all rules of unit[813][1]
	L[813][1] = LargeX[813][0]>0 ? 1 : 0;
	satisfiable[813][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit813_1[i][0] ][ unit813_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit813_1[i][2] ][ unit813_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit813_1[i][4] ][ unit813_1[i][5] ] >0);
		X_contra = ( LargeX[813][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit813_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[813][0]=0; L[813][1]=1;}
			satisfiable[813][1]=satisfiable[813][1] & ((x[813] ^ 1) | (x[ unit813_1[i][0] ] ^ unit813_1[i][1]) |(x[ unit813_1[i][2] ] ^ unit813_1[i][3]));
			}
		if(X_contra>0) L[813][1]=2;
		}
	//Check all rules of unit[814][0]
	L[814][0] = LargeX[814][1]>0 ? 1 : 0;
	satisfiable[814][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit814_0[i][0] ][ unit814_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit814_0[i][2] ][ unit814_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit814_0[i][4] ][ unit814_0[i][5] ] >0);
		X_contra = ( LargeX[814][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit814_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[814][1]=0; L[814][0]=1;}
			satisfiable[814][0]=satisfiable[814][0] & ((x[814] ^ 0) | (x[ unit814_0[i][0] ] ^ unit814_0[i][1]) |(x[ unit814_0[i][2] ] ^ unit814_0[i][3]));
			}
		if(X_contra>0) L[814][0]=2;
		}
	//Check all rules of unit[814][1]
	L[814][1] = LargeX[814][0]>0 ? 1 : 0;
	satisfiable[814][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit814_1[i][0] ][ unit814_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit814_1[i][2] ][ unit814_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit814_1[i][4] ][ unit814_1[i][5] ] >0);
		X_contra = ( LargeX[814][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit814_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[814][0]=0; L[814][1]=1;}
			satisfiable[814][1]=satisfiable[814][1] & ((x[814] ^ 1) | (x[ unit814_1[i][0] ] ^ unit814_1[i][1]) |(x[ unit814_1[i][2] ] ^ unit814_1[i][3]));
			}
		if(X_contra>0) L[814][1]=2;
		}
	//Check all rules of unit[815][0]
	L[815][0] = LargeX[815][1]>0 ? 1 : 0;
	satisfiable[815][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit815_0[i][0] ][ unit815_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit815_0[i][2] ][ unit815_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit815_0[i][4] ][ unit815_0[i][5] ] >0);
		X_contra = ( LargeX[815][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit815_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[815][1]=0; L[815][0]=1;}
			satisfiable[815][0]=satisfiable[815][0] & ((x[815] ^ 0) | (x[ unit815_0[i][0] ] ^ unit815_0[i][1]) |(x[ unit815_0[i][2] ] ^ unit815_0[i][3]));
			}
		if(X_contra>0) L[815][0]=2;
		}
	//Check all rules of unit[815][1]
	L[815][1] = LargeX[815][0]>0 ? 1 : 0;
	satisfiable[815][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit815_1[i][0] ][ unit815_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit815_1[i][2] ][ unit815_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit815_1[i][4] ][ unit815_1[i][5] ] >0);
		X_contra = ( LargeX[815][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit815_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[815][0]=0; L[815][1]=1;}
			satisfiable[815][1]=satisfiable[815][1] & ((x[815] ^ 1) | (x[ unit815_1[i][0] ] ^ unit815_1[i][1]) |(x[ unit815_1[i][2] ] ^ unit815_1[i][3]));
			}
		if(X_contra>0) L[815][1]=2;
		}
	//Check all rules of unit[816][0]
	L[816][0] = LargeX[816][1]>0 ? 1 : 0;
	satisfiable[816][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit816_0[i][0] ][ unit816_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit816_0[i][2] ][ unit816_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit816_0[i][4] ][ unit816_0[i][5] ] >0);
		X_contra = ( LargeX[816][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit816_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[816][1]=0; L[816][0]=1;}
			satisfiable[816][0]=satisfiable[816][0] & ((x[816] ^ 0) | (x[ unit816_0[i][0] ] ^ unit816_0[i][1]) |(x[ unit816_0[i][2] ] ^ unit816_0[i][3]));
			}
		if(X_contra>0) L[816][0]=2;
		}
	//Check all rules of unit[816][1]
	L[816][1] = LargeX[816][0]>0 ? 1 : 0;
	satisfiable[816][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit816_1[i][0] ][ unit816_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit816_1[i][2] ][ unit816_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit816_1[i][4] ][ unit816_1[i][5] ] >0);
		X_contra = ( LargeX[816][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit816_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[816][0]=0; L[816][1]=1;}
			satisfiable[816][1]=satisfiable[816][1] & ((x[816] ^ 1) | (x[ unit816_1[i][0] ] ^ unit816_1[i][1]) |(x[ unit816_1[i][2] ] ^ unit816_1[i][3]));
			}
		if(X_contra>0) L[816][1]=2;
		}
	//Check all rules of unit[817][0]
	L[817][0] = LargeX[817][1]>0 ? 1 : 0;
	satisfiable[817][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit817_0[i][0] ][ unit817_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit817_0[i][2] ][ unit817_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit817_0[i][4] ][ unit817_0[i][5] ] >0);
		X_contra = ( LargeX[817][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit817_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[817][1]=0; L[817][0]=1;}
			satisfiable[817][0]=satisfiable[817][0] & ((x[817] ^ 0) | (x[ unit817_0[i][0] ] ^ unit817_0[i][1]) |(x[ unit817_0[i][2] ] ^ unit817_0[i][3]));
			}
		if(X_contra>0) L[817][0]=2;
		}
	//Check all rules of unit[817][1]
	L[817][1] = LargeX[817][0]>0 ? 1 : 0;
	satisfiable[817][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit817_1[i][0] ][ unit817_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit817_1[i][2] ][ unit817_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit817_1[i][4] ][ unit817_1[i][5] ] >0);
		X_contra = ( LargeX[817][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit817_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[817][0]=0; L[817][1]=1;}
			satisfiable[817][1]=satisfiable[817][1] & ((x[817] ^ 1) | (x[ unit817_1[i][0] ] ^ unit817_1[i][1]) |(x[ unit817_1[i][2] ] ^ unit817_1[i][3]));
			}
		if(X_contra>0) L[817][1]=2;
		}
	//Check all rules of unit[818][0]
	L[818][0] = LargeX[818][1]>0 ? 1 : 0;
	satisfiable[818][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit818_0[i][0] ][ unit818_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit818_0[i][2] ][ unit818_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit818_0[i][4] ][ unit818_0[i][5] ] >0);
		X_contra = ( LargeX[818][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit818_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[818][1]=0; L[818][0]=1;}
			satisfiable[818][0]=satisfiable[818][0] & ((x[818] ^ 0) | (x[ unit818_0[i][0] ] ^ unit818_0[i][1]) |(x[ unit818_0[i][2] ] ^ unit818_0[i][3]));
			}
		if(X_contra>0) L[818][0]=2;
		}
	//Check all rules of unit[818][1]
	L[818][1] = LargeX[818][0]>0 ? 1 : 0;
	satisfiable[818][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit818_1[i][0] ][ unit818_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit818_1[i][2] ][ unit818_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit818_1[i][4] ][ unit818_1[i][5] ] >0);
		X_contra = ( LargeX[818][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit818_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[818][0]=0; L[818][1]=1;}
			satisfiable[818][1]=satisfiable[818][1] & ((x[818] ^ 1) | (x[ unit818_1[i][0] ] ^ unit818_1[i][1]) |(x[ unit818_1[i][2] ] ^ unit818_1[i][3]));
			}
		if(X_contra>0) L[818][1]=2;
		}
	//Check all rules of unit[819][0]
	L[819][0] = LargeX[819][1]>0 ? 1 : 0;
	satisfiable[819][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit819_0[i][0] ][ unit819_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit819_0[i][2] ][ unit819_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit819_0[i][4] ][ unit819_0[i][5] ] >0);
		X_contra = ( LargeX[819][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit819_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[819][1]=0; L[819][0]=1;}
			satisfiable[819][0]=satisfiable[819][0] & ((x[819] ^ 0) | (x[ unit819_0[i][0] ] ^ unit819_0[i][1]) |(x[ unit819_0[i][2] ] ^ unit819_0[i][3]));
			}
		if(X_contra>0) L[819][0]=2;
		}
	//Check all rules of unit[819][1]
	L[819][1] = LargeX[819][0]>0 ? 1 : 0;
	satisfiable[819][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit819_1[i][0] ][ unit819_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit819_1[i][2] ][ unit819_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit819_1[i][4] ][ unit819_1[i][5] ] >0);
		X_contra = ( LargeX[819][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit819_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[819][0]=0; L[819][1]=1;}
			satisfiable[819][1]=satisfiable[819][1] & ((x[819] ^ 1) | (x[ unit819_1[i][0] ] ^ unit819_1[i][1]) |(x[ unit819_1[i][2] ] ^ unit819_1[i][3]));
			}
		if(X_contra>0) L[819][1]=2;
		}
	//Check all rules of unit[820][0]
	L[820][0] = LargeX[820][1]>0 ? 1 : 0;
	satisfiable[820][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit820_0[i][0] ][ unit820_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit820_0[i][2] ][ unit820_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit820_0[i][4] ][ unit820_0[i][5] ] >0);
		X_contra = ( LargeX[820][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit820_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[820][1]=0; L[820][0]=1;}
			satisfiable[820][0]=satisfiable[820][0] & ((x[820] ^ 0) | (x[ unit820_0[i][0] ] ^ unit820_0[i][1]) |(x[ unit820_0[i][2] ] ^ unit820_0[i][3]));
			}
		if(X_contra>0) L[820][0]=2;
		}
	//Check all rules of unit[820][1]
	L[820][1] = LargeX[820][0]>0 ? 1 : 0;
	satisfiable[820][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit820_1[i][0] ][ unit820_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit820_1[i][2] ][ unit820_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit820_1[i][4] ][ unit820_1[i][5] ] >0);
		X_contra = ( LargeX[820][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit820_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[820][0]=0; L[820][1]=1;}
			satisfiable[820][1]=satisfiable[820][1] & ((x[820] ^ 1) | (x[ unit820_1[i][0] ] ^ unit820_1[i][1]) |(x[ unit820_1[i][2] ] ^ unit820_1[i][3]));
			}
		if(X_contra>0) L[820][1]=2;
		}
	//Check all rules of unit[821][0]
	L[821][0] = LargeX[821][1]>0 ? 1 : 0;
	satisfiable[821][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit821_0[i][0] ][ unit821_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit821_0[i][2] ][ unit821_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit821_0[i][4] ][ unit821_0[i][5] ] >0);
		X_contra = ( LargeX[821][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit821_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[821][1]=0; L[821][0]=1;}
			satisfiable[821][0]=satisfiable[821][0] & ((x[821] ^ 0) | (x[ unit821_0[i][0] ] ^ unit821_0[i][1]) |(x[ unit821_0[i][2] ] ^ unit821_0[i][3]));
			}
		if(X_contra>0) L[821][0]=2;
		}
	//Check all rules of unit[821][1]
	L[821][1] = LargeX[821][0]>0 ? 1 : 0;
	satisfiable[821][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit821_1[i][0] ][ unit821_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit821_1[i][2] ][ unit821_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit821_1[i][4] ][ unit821_1[i][5] ] >0);
		X_contra = ( LargeX[821][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit821_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[821][0]=0; L[821][1]=1;}
			satisfiable[821][1]=satisfiable[821][1] & ((x[821] ^ 1) | (x[ unit821_1[i][0] ] ^ unit821_1[i][1]) |(x[ unit821_1[i][2] ] ^ unit821_1[i][3]));
			}
		if(X_contra>0) L[821][1]=2;
		}
	//Check all rules of unit[822][0]
	L[822][0] = LargeX[822][1]>0 ? 1 : 0;
	satisfiable[822][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit822_0[i][0] ][ unit822_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit822_0[i][2] ][ unit822_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit822_0[i][4] ][ unit822_0[i][5] ] >0);
		X_contra = ( LargeX[822][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit822_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[822][1]=0; L[822][0]=1;}
			satisfiable[822][0]=satisfiable[822][0] & ((x[822] ^ 0) | (x[ unit822_0[i][0] ] ^ unit822_0[i][1]) |(x[ unit822_0[i][2] ] ^ unit822_0[i][3]));
			}
		if(X_contra>0) L[822][0]=2;
		}
	//Check all rules of unit[822][1]
	L[822][1] = LargeX[822][0]>0 ? 1 : 0;
	satisfiable[822][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit822_1[i][0] ][ unit822_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit822_1[i][2] ][ unit822_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit822_1[i][4] ][ unit822_1[i][5] ] >0);
		X_contra = ( LargeX[822][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit822_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[822][0]=0; L[822][1]=1;}
			satisfiable[822][1]=satisfiable[822][1] & ((x[822] ^ 1) | (x[ unit822_1[i][0] ] ^ unit822_1[i][1]) |(x[ unit822_1[i][2] ] ^ unit822_1[i][3]));
			}
		if(X_contra>0) L[822][1]=2;
		}
	//Check all rules of unit[823][0]
	L[823][0] = LargeX[823][1]>0 ? 1 : 0;
	satisfiable[823][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit823_0[i][0] ][ unit823_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit823_0[i][2] ][ unit823_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit823_0[i][4] ][ unit823_0[i][5] ] >0);
		X_contra = ( LargeX[823][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit823_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[823][1]=0; L[823][0]=1;}
			satisfiable[823][0]=satisfiable[823][0] & ((x[823] ^ 0) | (x[ unit823_0[i][0] ] ^ unit823_0[i][1]) |(x[ unit823_0[i][2] ] ^ unit823_0[i][3]));
			}
		if(X_contra>0) L[823][0]=2;
		}
	//Check all rules of unit[823][1]
	L[823][1] = LargeX[823][0]>0 ? 1 : 0;
	satisfiable[823][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit823_1[i][0] ][ unit823_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit823_1[i][2] ][ unit823_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit823_1[i][4] ][ unit823_1[i][5] ] >0);
		X_contra = ( LargeX[823][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit823_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[823][0]=0; L[823][1]=1;}
			satisfiable[823][1]=satisfiable[823][1] & ((x[823] ^ 1) | (x[ unit823_1[i][0] ] ^ unit823_1[i][1]) |(x[ unit823_1[i][2] ] ^ unit823_1[i][3]));
			}
		if(X_contra>0) L[823][1]=2;
		}
	//Check all rules of unit[824][0]
	L[824][0] = LargeX[824][1]>0 ? 1 : 0;
	satisfiable[824][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit824_0[i][0] ][ unit824_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit824_0[i][2] ][ unit824_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit824_0[i][4] ][ unit824_0[i][5] ] >0);
		X_contra = ( LargeX[824][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit824_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[824][1]=0; L[824][0]=1;}
			satisfiable[824][0]=satisfiable[824][0] & ((x[824] ^ 0) | (x[ unit824_0[i][0] ] ^ unit824_0[i][1]) |(x[ unit824_0[i][2] ] ^ unit824_0[i][3]));
			}
		if(X_contra>0) L[824][0]=2;
		}
	//Check all rules of unit[824][1]
	L[824][1] = LargeX[824][0]>0 ? 1 : 0;
	satisfiable[824][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit824_1[i][0] ][ unit824_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit824_1[i][2] ][ unit824_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit824_1[i][4] ][ unit824_1[i][5] ] >0);
		X_contra = ( LargeX[824][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit824_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[824][0]=0; L[824][1]=1;}
			satisfiable[824][1]=satisfiable[824][1] & ((x[824] ^ 1) | (x[ unit824_1[i][0] ] ^ unit824_1[i][1]) |(x[ unit824_1[i][2] ] ^ unit824_1[i][3]));
			}
		if(X_contra>0) L[824][1]=2;
		}
	//Check all rules of unit[825][0]
	L[825][0] = LargeX[825][1]>0 ? 1 : 0;
	satisfiable[825][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit825_0[i][0] ][ unit825_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit825_0[i][2] ][ unit825_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit825_0[i][4] ][ unit825_0[i][5] ] >0);
		X_contra = ( LargeX[825][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit825_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[825][1]=0; L[825][0]=1;}
			satisfiable[825][0]=satisfiable[825][0] & ((x[825] ^ 0) | (x[ unit825_0[i][0] ] ^ unit825_0[i][1]) |(x[ unit825_0[i][2] ] ^ unit825_0[i][3]));
			}
		if(X_contra>0) L[825][0]=2;
		}
	//Check all rules of unit[825][1]
	L[825][1] = LargeX[825][0]>0 ? 1 : 0;
	satisfiable[825][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit825_1[i][0] ][ unit825_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit825_1[i][2] ][ unit825_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit825_1[i][4] ][ unit825_1[i][5] ] >0);
		X_contra = ( LargeX[825][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit825_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[825][0]=0; L[825][1]=1;}
			satisfiable[825][1]=satisfiable[825][1] & ((x[825] ^ 1) | (x[ unit825_1[i][0] ] ^ unit825_1[i][1]) |(x[ unit825_1[i][2] ] ^ unit825_1[i][3]));
			}
		if(X_contra>0) L[825][1]=2;
		}
	//Check all rules of unit[826][0]
	L[826][0] = LargeX[826][1]>0 ? 1 : 0;
	satisfiable[826][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit826_0[i][0] ][ unit826_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit826_0[i][2] ][ unit826_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit826_0[i][4] ][ unit826_0[i][5] ] >0);
		X_contra = ( LargeX[826][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit826_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[826][1]=0; L[826][0]=1;}
			satisfiable[826][0]=satisfiable[826][0] & ((x[826] ^ 0) | (x[ unit826_0[i][0] ] ^ unit826_0[i][1]) |(x[ unit826_0[i][2] ] ^ unit826_0[i][3]));
			}
		if(X_contra>0) L[826][0]=2;
		}
	//Check all rules of unit[826][1]
	L[826][1] = LargeX[826][0]>0 ? 1 : 0;
	satisfiable[826][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit826_1[i][0] ][ unit826_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit826_1[i][2] ][ unit826_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit826_1[i][4] ][ unit826_1[i][5] ] >0);
		X_contra = ( LargeX[826][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit826_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[826][0]=0; L[826][1]=1;}
			satisfiable[826][1]=satisfiable[826][1] & ((x[826] ^ 1) | (x[ unit826_1[i][0] ] ^ unit826_1[i][1]) |(x[ unit826_1[i][2] ] ^ unit826_1[i][3]));
			}
		if(X_contra>0) L[826][1]=2;
		}
	//Check all rules of unit[827][0]
	L[827][0] = LargeX[827][1]>0 ? 1 : 0;
	satisfiable[827][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit827_0[i][0] ][ unit827_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit827_0[i][2] ][ unit827_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit827_0[i][4] ][ unit827_0[i][5] ] >0);
		X_contra = ( LargeX[827][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit827_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[827][1]=0; L[827][0]=1;}
			satisfiable[827][0]=satisfiable[827][0] & ((x[827] ^ 0) | (x[ unit827_0[i][0] ] ^ unit827_0[i][1]) |(x[ unit827_0[i][2] ] ^ unit827_0[i][3]));
			}
		if(X_contra>0) L[827][0]=2;
		}
	//Check all rules of unit[827][1]
	L[827][1] = LargeX[827][0]>0 ? 1 : 0;
	satisfiable[827][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit827_1[i][0] ][ unit827_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit827_1[i][2] ][ unit827_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit827_1[i][4] ][ unit827_1[i][5] ] >0);
		X_contra = ( LargeX[827][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit827_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[827][0]=0; L[827][1]=1;}
			satisfiable[827][1]=satisfiable[827][1] & ((x[827] ^ 1) | (x[ unit827_1[i][0] ] ^ unit827_1[i][1]) |(x[ unit827_1[i][2] ] ^ unit827_1[i][3]));
			}
		if(X_contra>0) L[827][1]=2;
		}
	//Check all rules of unit[828][0]
	L[828][0] = LargeX[828][1]>0 ? 1 : 0;
	satisfiable[828][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit828_0[i][0] ][ unit828_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit828_0[i][2] ][ unit828_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit828_0[i][4] ][ unit828_0[i][5] ] >0);
		X_contra = ( LargeX[828][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit828_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[828][1]=0; L[828][0]=1;}
			satisfiable[828][0]=satisfiable[828][0] & ((x[828] ^ 0) | (x[ unit828_0[i][0] ] ^ unit828_0[i][1]) |(x[ unit828_0[i][2] ] ^ unit828_0[i][3]));
			}
		if(X_contra>0) L[828][0]=2;
		}
	//Check all rules of unit[828][1]
	L[828][1] = LargeX[828][0]>0 ? 1 : 0;
	satisfiable[828][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit828_1[i][0] ][ unit828_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit828_1[i][2] ][ unit828_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit828_1[i][4] ][ unit828_1[i][5] ] >0);
		X_contra = ( LargeX[828][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit828_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[828][0]=0; L[828][1]=1;}
			satisfiable[828][1]=satisfiable[828][1] & ((x[828] ^ 1) | (x[ unit828_1[i][0] ] ^ unit828_1[i][1]) |(x[ unit828_1[i][2] ] ^ unit828_1[i][3]));
			}
		if(X_contra>0) L[828][1]=2;
		}
	//Check all rules of unit[829][0]
	L[829][0] = LargeX[829][1]>0 ? 1 : 0;
	satisfiable[829][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit829_0[i][0] ][ unit829_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit829_0[i][2] ][ unit829_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit829_0[i][4] ][ unit829_0[i][5] ] >0);
		X_contra = ( LargeX[829][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit829_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[829][1]=0; L[829][0]=1;}
			satisfiable[829][0]=satisfiable[829][0] & ((x[829] ^ 0) | (x[ unit829_0[i][0] ] ^ unit829_0[i][1]) |(x[ unit829_0[i][2] ] ^ unit829_0[i][3]));
			}
		if(X_contra>0) L[829][0]=2;
		}
	//Check all rules of unit[829][1]
	L[829][1] = LargeX[829][0]>0 ? 1 : 0;
	satisfiable[829][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit829_1[i][0] ][ unit829_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit829_1[i][2] ][ unit829_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit829_1[i][4] ][ unit829_1[i][5] ] >0);
		X_contra = ( LargeX[829][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit829_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[829][0]=0; L[829][1]=1;}
			satisfiable[829][1]=satisfiable[829][1] & ((x[829] ^ 1) | (x[ unit829_1[i][0] ] ^ unit829_1[i][1]) |(x[ unit829_1[i][2] ] ^ unit829_1[i][3]));
			}
		if(X_contra>0) L[829][1]=2;
		}
	//Check all rules of unit[830][0]
	L[830][0] = LargeX[830][1]>0 ? 1 : 0;
	satisfiable[830][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit830_0[i][0] ][ unit830_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit830_0[i][2] ][ unit830_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit830_0[i][4] ][ unit830_0[i][5] ] >0);
		X_contra = ( LargeX[830][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit830_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[830][1]=0; L[830][0]=1;}
			satisfiable[830][0]=satisfiable[830][0] & ((x[830] ^ 0) | (x[ unit830_0[i][0] ] ^ unit830_0[i][1]) |(x[ unit830_0[i][2] ] ^ unit830_0[i][3]));
			}
		if(X_contra>0) L[830][0]=2;
		}
	//Check all rules of unit[830][1]
	L[830][1] = LargeX[830][0]>0 ? 1 : 0;
	satisfiable[830][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit830_1[i][0] ][ unit830_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit830_1[i][2] ][ unit830_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit830_1[i][4] ][ unit830_1[i][5] ] >0);
		X_contra = ( LargeX[830][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit830_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[830][0]=0; L[830][1]=1;}
			satisfiable[830][1]=satisfiable[830][1] & ((x[830] ^ 1) | (x[ unit830_1[i][0] ] ^ unit830_1[i][1]) |(x[ unit830_1[i][2] ] ^ unit830_1[i][3]));
			}
		if(X_contra>0) L[830][1]=2;
		}
	//Check all rules of unit[831][0]
	L[831][0] = LargeX[831][1]>0 ? 1 : 0;
	satisfiable[831][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit831_0[i][0] ][ unit831_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit831_0[i][2] ][ unit831_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit831_0[i][4] ][ unit831_0[i][5] ] >0);
		X_contra = ( LargeX[831][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit831_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[831][1]=0; L[831][0]=1;}
			satisfiable[831][0]=satisfiable[831][0] & ((x[831] ^ 0) | (x[ unit831_0[i][0] ] ^ unit831_0[i][1]) |(x[ unit831_0[i][2] ] ^ unit831_0[i][3]));
			}
		if(X_contra>0) L[831][0]=2;
		}
	//Check all rules of unit[831][1]
	L[831][1] = LargeX[831][0]>0 ? 1 : 0;
	satisfiable[831][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit831_1[i][0] ][ unit831_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit831_1[i][2] ][ unit831_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit831_1[i][4] ][ unit831_1[i][5] ] >0);
		X_contra = ( LargeX[831][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit831_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[831][0]=0; L[831][1]=1;}
			satisfiable[831][1]=satisfiable[831][1] & ((x[831] ^ 1) | (x[ unit831_1[i][0] ] ^ unit831_1[i][1]) |(x[ unit831_1[i][2] ] ^ unit831_1[i][3]));
			}
		if(X_contra>0) L[831][1]=2;
		}
	//Check all rules of unit[832][0]
	L[832][0] = LargeX[832][1]>0 ? 1 : 0;
	satisfiable[832][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit832_0[i][0] ][ unit832_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit832_0[i][2] ][ unit832_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit832_0[i][4] ][ unit832_0[i][5] ] >0);
		X_contra = ( LargeX[832][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit832_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[832][1]=0; L[832][0]=1;}
			satisfiable[832][0]=satisfiable[832][0] & ((x[832] ^ 0) | (x[ unit832_0[i][0] ] ^ unit832_0[i][1]) |(x[ unit832_0[i][2] ] ^ unit832_0[i][3]));
			}
		if(X_contra>0) L[832][0]=2;
		}
	//Check all rules of unit[832][1]
	L[832][1] = LargeX[832][0]>0 ? 1 : 0;
	satisfiable[832][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit832_1[i][0] ][ unit832_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit832_1[i][2] ][ unit832_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit832_1[i][4] ][ unit832_1[i][5] ] >0);
		X_contra = ( LargeX[832][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit832_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[832][0]=0; L[832][1]=1;}
			satisfiable[832][1]=satisfiable[832][1] & ((x[832] ^ 1) | (x[ unit832_1[i][0] ] ^ unit832_1[i][1]) |(x[ unit832_1[i][2] ] ^ unit832_1[i][3]));
			}
		if(X_contra>0) L[832][1]=2;
		}
	//Check all rules of unit[833][0]
	L[833][0] = LargeX[833][1]>0 ? 1 : 0;
	satisfiable[833][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit833_0[i][0] ][ unit833_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit833_0[i][2] ][ unit833_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit833_0[i][4] ][ unit833_0[i][5] ] >0);
		X_contra = ( LargeX[833][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit833_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[833][1]=0; L[833][0]=1;}
			satisfiable[833][0]=satisfiable[833][0] & ((x[833] ^ 0) | (x[ unit833_0[i][0] ] ^ unit833_0[i][1]) |(x[ unit833_0[i][2] ] ^ unit833_0[i][3]));
			}
		if(X_contra>0) L[833][0]=2;
		}
	//Check all rules of unit[833][1]
	L[833][1] = LargeX[833][0]>0 ? 1 : 0;
	satisfiable[833][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit833_1[i][0] ][ unit833_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit833_1[i][2] ][ unit833_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit833_1[i][4] ][ unit833_1[i][5] ] >0);
		X_contra = ( LargeX[833][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit833_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[833][0]=0; L[833][1]=1;}
			satisfiable[833][1]=satisfiable[833][1] & ((x[833] ^ 1) | (x[ unit833_1[i][0] ] ^ unit833_1[i][1]) |(x[ unit833_1[i][2] ] ^ unit833_1[i][3]));
			}
		if(X_contra>0) L[833][1]=2;
		}
	//Check all rules of unit[834][0]
	L[834][0] = LargeX[834][1]>0 ? 1 : 0;
	satisfiable[834][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit834_0[i][0] ][ unit834_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit834_0[i][2] ][ unit834_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit834_0[i][4] ][ unit834_0[i][5] ] >0);
		X_contra = ( LargeX[834][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit834_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[834][1]=0; L[834][0]=1;}
			satisfiable[834][0]=satisfiable[834][0] & ((x[834] ^ 0) | (x[ unit834_0[i][0] ] ^ unit834_0[i][1]) |(x[ unit834_0[i][2] ] ^ unit834_0[i][3]));
			}
		if(X_contra>0) L[834][0]=2;
		}
	//Check all rules of unit[834][1]
	L[834][1] = LargeX[834][0]>0 ? 1 : 0;
	satisfiable[834][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit834_1[i][0] ][ unit834_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit834_1[i][2] ][ unit834_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit834_1[i][4] ][ unit834_1[i][5] ] >0);
		X_contra = ( LargeX[834][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit834_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[834][0]=0; L[834][1]=1;}
			satisfiable[834][1]=satisfiable[834][1] & ((x[834] ^ 1) | (x[ unit834_1[i][0] ] ^ unit834_1[i][1]) |(x[ unit834_1[i][2] ] ^ unit834_1[i][3]));
			}
		if(X_contra>0) L[834][1]=2;
		}
	//Check all rules of unit[835][0]
	L[835][0] = LargeX[835][1]>0 ? 1 : 0;
	satisfiable[835][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit835_0[i][0] ][ unit835_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit835_0[i][2] ][ unit835_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit835_0[i][4] ][ unit835_0[i][5] ] >0);
		X_contra = ( LargeX[835][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit835_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[835][1]=0; L[835][0]=1;}
			satisfiable[835][0]=satisfiable[835][0] & ((x[835] ^ 0) | (x[ unit835_0[i][0] ] ^ unit835_0[i][1]) |(x[ unit835_0[i][2] ] ^ unit835_0[i][3]));
			}
		if(X_contra>0) L[835][0]=2;
		}
	//Check all rules of unit[835][1]
	L[835][1] = LargeX[835][0]>0 ? 1 : 0;
	satisfiable[835][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit835_1[i][0] ][ unit835_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit835_1[i][2] ][ unit835_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit835_1[i][4] ][ unit835_1[i][5] ] >0);
		X_contra = ( LargeX[835][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit835_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[835][0]=0; L[835][1]=1;}
			satisfiable[835][1]=satisfiable[835][1] & ((x[835] ^ 1) | (x[ unit835_1[i][0] ] ^ unit835_1[i][1]) |(x[ unit835_1[i][2] ] ^ unit835_1[i][3]));
			}
		if(X_contra>0) L[835][1]=2;
		}
	//Check all rules of unit[836][0]
	L[836][0] = LargeX[836][1]>0 ? 1 : 0;
	satisfiable[836][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit836_0[i][0] ][ unit836_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit836_0[i][2] ][ unit836_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit836_0[i][4] ][ unit836_0[i][5] ] >0);
		X_contra = ( LargeX[836][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit836_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[836][1]=0; L[836][0]=1;}
			satisfiable[836][0]=satisfiable[836][0] & ((x[836] ^ 0) | (x[ unit836_0[i][0] ] ^ unit836_0[i][1]) |(x[ unit836_0[i][2] ] ^ unit836_0[i][3]));
			}
		if(X_contra>0) L[836][0]=2;
		}
	//Check all rules of unit[836][1]
	L[836][1] = LargeX[836][0]>0 ? 1 : 0;
	satisfiable[836][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit836_1[i][0] ][ unit836_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit836_1[i][2] ][ unit836_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit836_1[i][4] ][ unit836_1[i][5] ] >0);
		X_contra = ( LargeX[836][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit836_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[836][0]=0; L[836][1]=1;}
			satisfiable[836][1]=satisfiable[836][1] & ((x[836] ^ 1) | (x[ unit836_1[i][0] ] ^ unit836_1[i][1]) |(x[ unit836_1[i][2] ] ^ unit836_1[i][3]));
			}
		if(X_contra>0) L[836][1]=2;
		}
	//Check all rules of unit[837][0]
	L[837][0] = LargeX[837][1]>0 ? 1 : 0;
	satisfiable[837][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit837_0[i][0] ][ unit837_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit837_0[i][2] ][ unit837_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit837_0[i][4] ][ unit837_0[i][5] ] >0);
		X_contra = ( LargeX[837][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit837_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[837][1]=0; L[837][0]=1;}
			satisfiable[837][0]=satisfiable[837][0] & ((x[837] ^ 0) | (x[ unit837_0[i][0] ] ^ unit837_0[i][1]) |(x[ unit837_0[i][2] ] ^ unit837_0[i][3]));
			}
		if(X_contra>0) L[837][0]=2;
		}
	//Check all rules of unit[837][1]
	L[837][1] = LargeX[837][0]>0 ? 1 : 0;
	satisfiable[837][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit837_1[i][0] ][ unit837_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit837_1[i][2] ][ unit837_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit837_1[i][4] ][ unit837_1[i][5] ] >0);
		X_contra = ( LargeX[837][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit837_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[837][0]=0; L[837][1]=1;}
			satisfiable[837][1]=satisfiable[837][1] & ((x[837] ^ 1) | (x[ unit837_1[i][0] ] ^ unit837_1[i][1]) |(x[ unit837_1[i][2] ] ^ unit837_1[i][3]));
			}
		if(X_contra>0) L[837][1]=2;
		}
	//Check all rules of unit[838][0]
	L[838][0] = LargeX[838][1]>0 ? 1 : 0;
	satisfiable[838][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit838_0[i][0] ][ unit838_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit838_0[i][2] ][ unit838_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit838_0[i][4] ][ unit838_0[i][5] ] >0);
		X_contra = ( LargeX[838][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit838_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[838][1]=0; L[838][0]=1;}
			satisfiable[838][0]=satisfiable[838][0] & ((x[838] ^ 0) | (x[ unit838_0[i][0] ] ^ unit838_0[i][1]) |(x[ unit838_0[i][2] ] ^ unit838_0[i][3]));
			}
		if(X_contra>0) L[838][0]=2;
		}
	//Check all rules of unit[838][1]
	L[838][1] = LargeX[838][0]>0 ? 1 : 0;
	satisfiable[838][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit838_1[i][0] ][ unit838_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit838_1[i][2] ][ unit838_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit838_1[i][4] ][ unit838_1[i][5] ] >0);
		X_contra = ( LargeX[838][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit838_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[838][0]=0; L[838][1]=1;}
			satisfiable[838][1]=satisfiable[838][1] & ((x[838] ^ 1) | (x[ unit838_1[i][0] ] ^ unit838_1[i][1]) |(x[ unit838_1[i][2] ] ^ unit838_1[i][3]));
			}
		if(X_contra>0) L[838][1]=2;
		}
	//Check all rules of unit[839][0]
	L[839][0] = LargeX[839][1]>0 ? 1 : 0;
	satisfiable[839][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit839_0[i][0] ][ unit839_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit839_0[i][2] ][ unit839_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit839_0[i][4] ][ unit839_0[i][5] ] >0);
		X_contra = ( LargeX[839][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit839_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[839][1]=0; L[839][0]=1;}
			satisfiable[839][0]=satisfiable[839][0] & ((x[839] ^ 0) | (x[ unit839_0[i][0] ] ^ unit839_0[i][1]) |(x[ unit839_0[i][2] ] ^ unit839_0[i][3]));
			}
		if(X_contra>0) L[839][0]=2;
		}
	//Check all rules of unit[839][1]
	L[839][1] = LargeX[839][0]>0 ? 1 : 0;
	satisfiable[839][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit839_1[i][0] ][ unit839_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit839_1[i][2] ][ unit839_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit839_1[i][4] ][ unit839_1[i][5] ] >0);
		X_contra = ( LargeX[839][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit839_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[839][0]=0; L[839][1]=1;}
			satisfiable[839][1]=satisfiable[839][1] & ((x[839] ^ 1) | (x[ unit839_1[i][0] ] ^ unit839_1[i][1]) |(x[ unit839_1[i][2] ] ^ unit839_1[i][3]));
			}
		if(X_contra>0) L[839][1]=2;
		}
	//Check all rules of unit[840][0]
	L[840][0] = LargeX[840][1]>0 ? 1 : 0;
	satisfiable[840][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit840_0[i][0] ][ unit840_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit840_0[i][2] ][ unit840_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit840_0[i][4] ][ unit840_0[i][5] ] >0);
		X_contra = ( LargeX[840][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit840_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[840][1]=0; L[840][0]=1;}
			satisfiable[840][0]=satisfiable[840][0] & ((x[840] ^ 0) | (x[ unit840_0[i][0] ] ^ unit840_0[i][1]) |(x[ unit840_0[i][2] ] ^ unit840_0[i][3]));
			}
		if(X_contra>0) L[840][0]=2;
		}
	//Check all rules of unit[840][1]
	L[840][1] = LargeX[840][0]>0 ? 1 : 0;
	satisfiable[840][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit840_1[i][0] ][ unit840_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit840_1[i][2] ][ unit840_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit840_1[i][4] ][ unit840_1[i][5] ] >0);
		X_contra = ( LargeX[840][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit840_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[840][0]=0; L[840][1]=1;}
			satisfiable[840][1]=satisfiable[840][1] & ((x[840] ^ 1) | (x[ unit840_1[i][0] ] ^ unit840_1[i][1]) |(x[ unit840_1[i][2] ] ^ unit840_1[i][3]));
			}
		if(X_contra>0) L[840][1]=2;
		}
	//Check all rules of unit[841][0]
	L[841][0] = LargeX[841][1]>0 ? 1 : 0;
	satisfiable[841][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit841_0[i][0] ][ unit841_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit841_0[i][2] ][ unit841_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit841_0[i][4] ][ unit841_0[i][5] ] >0);
		X_contra = ( LargeX[841][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit841_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[841][1]=0; L[841][0]=1;}
			satisfiable[841][0]=satisfiable[841][0] & ((x[841] ^ 0) | (x[ unit841_0[i][0] ] ^ unit841_0[i][1]) |(x[ unit841_0[i][2] ] ^ unit841_0[i][3]));
			}
		if(X_contra>0) L[841][0]=2;
		}
	//Check all rules of unit[841][1]
	L[841][1] = LargeX[841][0]>0 ? 1 : 0;
	satisfiable[841][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit841_1[i][0] ][ unit841_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit841_1[i][2] ][ unit841_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit841_1[i][4] ][ unit841_1[i][5] ] >0);
		X_contra = ( LargeX[841][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit841_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[841][0]=0; L[841][1]=1;}
			satisfiable[841][1]=satisfiable[841][1] & ((x[841] ^ 1) | (x[ unit841_1[i][0] ] ^ unit841_1[i][1]) |(x[ unit841_1[i][2] ] ^ unit841_1[i][3]));
			}
		if(X_contra>0) L[841][1]=2;
		}
	//Check all rules of unit[842][0]
	L[842][0] = LargeX[842][1]>0 ? 1 : 0;
	satisfiable[842][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit842_0[i][0] ][ unit842_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit842_0[i][2] ][ unit842_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit842_0[i][4] ][ unit842_0[i][5] ] >0);
		X_contra = ( LargeX[842][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit842_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[842][1]=0; L[842][0]=1;}
			satisfiable[842][0]=satisfiable[842][0] & ((x[842] ^ 0) | (x[ unit842_0[i][0] ] ^ unit842_0[i][1]) |(x[ unit842_0[i][2] ] ^ unit842_0[i][3]));
			}
		if(X_contra>0) L[842][0]=2;
		}
	//Check all rules of unit[842][1]
	L[842][1] = LargeX[842][0]>0 ? 1 : 0;
	satisfiable[842][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit842_1[i][0] ][ unit842_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit842_1[i][2] ][ unit842_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit842_1[i][4] ][ unit842_1[i][5] ] >0);
		X_contra = ( LargeX[842][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit842_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[842][0]=0; L[842][1]=1;}
			satisfiable[842][1]=satisfiable[842][1] & ((x[842] ^ 1) | (x[ unit842_1[i][0] ] ^ unit842_1[i][1]) |(x[ unit842_1[i][2] ] ^ unit842_1[i][3]));
			}
		if(X_contra>0) L[842][1]=2;
		}
	//Check all rules of unit[843][0]
	L[843][0] = LargeX[843][1]>0 ? 1 : 0;
	satisfiable[843][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit843_0[i][0] ][ unit843_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit843_0[i][2] ][ unit843_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit843_0[i][4] ][ unit843_0[i][5] ] >0);
		X_contra = ( LargeX[843][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit843_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[843][1]=0; L[843][0]=1;}
			satisfiable[843][0]=satisfiable[843][0] & ((x[843] ^ 0) | (x[ unit843_0[i][0] ] ^ unit843_0[i][1]) |(x[ unit843_0[i][2] ] ^ unit843_0[i][3]));
			}
		if(X_contra>0) L[843][0]=2;
		}
	//Check all rules of unit[843][1]
	L[843][1] = LargeX[843][0]>0 ? 1 : 0;
	satisfiable[843][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit843_1[i][0] ][ unit843_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit843_1[i][2] ][ unit843_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit843_1[i][4] ][ unit843_1[i][5] ] >0);
		X_contra = ( LargeX[843][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit843_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[843][0]=0; L[843][1]=1;}
			satisfiable[843][1]=satisfiable[843][1] & ((x[843] ^ 1) | (x[ unit843_1[i][0] ] ^ unit843_1[i][1]) |(x[ unit843_1[i][2] ] ^ unit843_1[i][3]));
			}
		if(X_contra>0) L[843][1]=2;
		}
	//Check all rules of unit[844][0]
	L[844][0] = LargeX[844][1]>0 ? 1 : 0;
	satisfiable[844][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit844_0[i][0] ][ unit844_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit844_0[i][2] ][ unit844_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit844_0[i][4] ][ unit844_0[i][5] ] >0);
		X_contra = ( LargeX[844][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit844_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[844][1]=0; L[844][0]=1;}
			satisfiable[844][0]=satisfiable[844][0] & ((x[844] ^ 0) | (x[ unit844_0[i][0] ] ^ unit844_0[i][1]) |(x[ unit844_0[i][2] ] ^ unit844_0[i][3]));
			}
		if(X_contra>0) L[844][0]=2;
		}
	//Check all rules of unit[844][1]
	L[844][1] = LargeX[844][0]>0 ? 1 : 0;
	satisfiable[844][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit844_1[i][0] ][ unit844_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit844_1[i][2] ][ unit844_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit844_1[i][4] ][ unit844_1[i][5] ] >0);
		X_contra = ( LargeX[844][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit844_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[844][0]=0; L[844][1]=1;}
			satisfiable[844][1]=satisfiable[844][1] & ((x[844] ^ 1) | (x[ unit844_1[i][0] ] ^ unit844_1[i][1]) |(x[ unit844_1[i][2] ] ^ unit844_1[i][3]));
			}
		if(X_contra>0) L[844][1]=2;
		}
	//Check all rules of unit[845][0]
	L[845][0] = LargeX[845][1]>0 ? 1 : 0;
	satisfiable[845][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit845_0[i][0] ][ unit845_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit845_0[i][2] ][ unit845_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit845_0[i][4] ][ unit845_0[i][5] ] >0);
		X_contra = ( LargeX[845][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit845_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[845][1]=0; L[845][0]=1;}
			satisfiable[845][0]=satisfiable[845][0] & ((x[845] ^ 0) | (x[ unit845_0[i][0] ] ^ unit845_0[i][1]) |(x[ unit845_0[i][2] ] ^ unit845_0[i][3]));
			}
		if(X_contra>0) L[845][0]=2;
		}
	//Check all rules of unit[845][1]
	L[845][1] = LargeX[845][0]>0 ? 1 : 0;
	satisfiable[845][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit845_1[i][0] ][ unit845_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit845_1[i][2] ][ unit845_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit845_1[i][4] ][ unit845_1[i][5] ] >0);
		X_contra = ( LargeX[845][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit845_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[845][0]=0; L[845][1]=1;}
			satisfiable[845][1]=satisfiable[845][1] & ((x[845] ^ 1) | (x[ unit845_1[i][0] ] ^ unit845_1[i][1]) |(x[ unit845_1[i][2] ] ^ unit845_1[i][3]));
			}
		if(X_contra>0) L[845][1]=2;
		}
	//Check all rules of unit[846][0]
	L[846][0] = LargeX[846][1]>0 ? 1 : 0;
	satisfiable[846][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit846_0[i][0] ][ unit846_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit846_0[i][2] ][ unit846_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit846_0[i][4] ][ unit846_0[i][5] ] >0);
		X_contra = ( LargeX[846][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit846_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[846][1]=0; L[846][0]=1;}
			satisfiable[846][0]=satisfiable[846][0] & ((x[846] ^ 0) | (x[ unit846_0[i][0] ] ^ unit846_0[i][1]) |(x[ unit846_0[i][2] ] ^ unit846_0[i][3]));
			}
		if(X_contra>0) L[846][0]=2;
		}
	//Check all rules of unit[846][1]
	L[846][1] = LargeX[846][0]>0 ? 1 : 0;
	satisfiable[846][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit846_1[i][0] ][ unit846_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit846_1[i][2] ][ unit846_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit846_1[i][4] ][ unit846_1[i][5] ] >0);
		X_contra = ( LargeX[846][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit846_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[846][0]=0; L[846][1]=1;}
			satisfiable[846][1]=satisfiable[846][1] & ((x[846] ^ 1) | (x[ unit846_1[i][0] ] ^ unit846_1[i][1]) |(x[ unit846_1[i][2] ] ^ unit846_1[i][3]));
			}
		if(X_contra>0) L[846][1]=2;
		}
	//Check all rules of unit[847][0]
	L[847][0] = LargeX[847][1]>0 ? 1 : 0;
	satisfiable[847][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit847_0[i][0] ][ unit847_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit847_0[i][2] ][ unit847_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit847_0[i][4] ][ unit847_0[i][5] ] >0);
		X_contra = ( LargeX[847][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit847_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[847][1]=0; L[847][0]=1;}
			satisfiable[847][0]=satisfiable[847][0] & ((x[847] ^ 0) | (x[ unit847_0[i][0] ] ^ unit847_0[i][1]) |(x[ unit847_0[i][2] ] ^ unit847_0[i][3]));
			}
		if(X_contra>0) L[847][0]=2;
		}
	//Check all rules of unit[847][1]
	L[847][1] = LargeX[847][0]>0 ? 1 : 0;
	satisfiable[847][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit847_1[i][0] ][ unit847_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit847_1[i][2] ][ unit847_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit847_1[i][4] ][ unit847_1[i][5] ] >0);
		X_contra = ( LargeX[847][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit847_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[847][0]=0; L[847][1]=1;}
			satisfiable[847][1]=satisfiable[847][1] & ((x[847] ^ 1) | (x[ unit847_1[i][0] ] ^ unit847_1[i][1]) |(x[ unit847_1[i][2] ] ^ unit847_1[i][3]));
			}
		if(X_contra>0) L[847][1]=2;
		}
	//Check all rules of unit[848][0]
	L[848][0] = LargeX[848][1]>0 ? 1 : 0;
	satisfiable[848][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit848_0[i][0] ][ unit848_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit848_0[i][2] ][ unit848_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit848_0[i][4] ][ unit848_0[i][5] ] >0);
		X_contra = ( LargeX[848][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit848_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[848][1]=0; L[848][0]=1;}
			satisfiable[848][0]=satisfiable[848][0] & ((x[848] ^ 0) | (x[ unit848_0[i][0] ] ^ unit848_0[i][1]) |(x[ unit848_0[i][2] ] ^ unit848_0[i][3]));
			}
		if(X_contra>0) L[848][0]=2;
		}
	//Check all rules of unit[848][1]
	L[848][1] = LargeX[848][0]>0 ? 1 : 0;
	satisfiable[848][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit848_1[i][0] ][ unit848_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit848_1[i][2] ][ unit848_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit848_1[i][4] ][ unit848_1[i][5] ] >0);
		X_contra = ( LargeX[848][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit848_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[848][0]=0; L[848][1]=1;}
			satisfiable[848][1]=satisfiable[848][1] & ((x[848] ^ 1) | (x[ unit848_1[i][0] ] ^ unit848_1[i][1]) |(x[ unit848_1[i][2] ] ^ unit848_1[i][3]));
			}
		if(X_contra>0) L[848][1]=2;
		}
	//Check all rules of unit[849][0]
	L[849][0] = LargeX[849][1]>0 ? 1 : 0;
	satisfiable[849][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit849_0[i][0] ][ unit849_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit849_0[i][2] ][ unit849_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit849_0[i][4] ][ unit849_0[i][5] ] >0);
		X_contra = ( LargeX[849][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit849_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[849][1]=0; L[849][0]=1;}
			satisfiable[849][0]=satisfiable[849][0] & ((x[849] ^ 0) | (x[ unit849_0[i][0] ] ^ unit849_0[i][1]) |(x[ unit849_0[i][2] ] ^ unit849_0[i][3]));
			}
		if(X_contra>0) L[849][0]=2;
		}
	//Check all rules of unit[849][1]
	L[849][1] = LargeX[849][0]>0 ? 1 : 0;
	satisfiable[849][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit849_1[i][0] ][ unit849_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit849_1[i][2] ][ unit849_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit849_1[i][4] ][ unit849_1[i][5] ] >0);
		X_contra = ( LargeX[849][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit849_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[849][0]=0; L[849][1]=1;}
			satisfiable[849][1]=satisfiable[849][1] & ((x[849] ^ 1) | (x[ unit849_1[i][0] ] ^ unit849_1[i][1]) |(x[ unit849_1[i][2] ] ^ unit849_1[i][3]));
			}
		if(X_contra>0) L[849][1]=2;
		}
	//Check all rules of unit[850][0]
	L[850][0] = LargeX[850][1]>0 ? 1 : 0;
	satisfiable[850][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit850_0[i][0] ][ unit850_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit850_0[i][2] ][ unit850_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit850_0[i][4] ][ unit850_0[i][5] ] >0);
		X_contra = ( LargeX[850][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit850_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[850][1]=0; L[850][0]=1;}
			satisfiable[850][0]=satisfiable[850][0] & ((x[850] ^ 0) | (x[ unit850_0[i][0] ] ^ unit850_0[i][1]) |(x[ unit850_0[i][2] ] ^ unit850_0[i][3]));
			}
		if(X_contra>0) L[850][0]=2;
		}
	//Check all rules of unit[850][1]
	L[850][1] = LargeX[850][0]>0 ? 1 : 0;
	satisfiable[850][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit850_1[i][0] ][ unit850_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit850_1[i][2] ][ unit850_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit850_1[i][4] ][ unit850_1[i][5] ] >0);
		X_contra = ( LargeX[850][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit850_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[850][0]=0; L[850][1]=1;}
			satisfiable[850][1]=satisfiable[850][1] & ((x[850] ^ 1) | (x[ unit850_1[i][0] ] ^ unit850_1[i][1]) |(x[ unit850_1[i][2] ] ^ unit850_1[i][3]));
			}
		if(X_contra>0) L[850][1]=2;
		}
	//Check all rules of unit[851][0]
	L[851][0] = LargeX[851][1]>0 ? 1 : 0;
	satisfiable[851][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit851_0[i][0] ][ unit851_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit851_0[i][2] ][ unit851_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit851_0[i][4] ][ unit851_0[i][5] ] >0);
		X_contra = ( LargeX[851][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit851_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[851][1]=0; L[851][0]=1;}
			satisfiable[851][0]=satisfiable[851][0] & ((x[851] ^ 0) | (x[ unit851_0[i][0] ] ^ unit851_0[i][1]) |(x[ unit851_0[i][2] ] ^ unit851_0[i][3]));
			}
		if(X_contra>0) L[851][0]=2;
		}
	//Check all rules of unit[851][1]
	L[851][1] = LargeX[851][0]>0 ? 1 : 0;
	satisfiable[851][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit851_1[i][0] ][ unit851_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit851_1[i][2] ][ unit851_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit851_1[i][4] ][ unit851_1[i][5] ] >0);
		X_contra = ( LargeX[851][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit851_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[851][0]=0; L[851][1]=1;}
			satisfiable[851][1]=satisfiable[851][1] & ((x[851] ^ 1) | (x[ unit851_1[i][0] ] ^ unit851_1[i][1]) |(x[ unit851_1[i][2] ] ^ unit851_1[i][3]));
			}
		if(X_contra>0) L[851][1]=2;
		}
	//Check all rules of unit[852][0]
	L[852][0] = LargeX[852][1]>0 ? 1 : 0;
	satisfiable[852][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit852_0[i][0] ][ unit852_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit852_0[i][2] ][ unit852_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit852_0[i][4] ][ unit852_0[i][5] ] >0);
		X_contra = ( LargeX[852][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit852_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[852][1]=0; L[852][0]=1;}
			satisfiable[852][0]=satisfiable[852][0] & ((x[852] ^ 0) | (x[ unit852_0[i][0] ] ^ unit852_0[i][1]) |(x[ unit852_0[i][2] ] ^ unit852_0[i][3]));
			}
		if(X_contra>0) L[852][0]=2;
		}
	//Check all rules of unit[852][1]
	L[852][1] = LargeX[852][0]>0 ? 1 : 0;
	satisfiable[852][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit852_1[i][0] ][ unit852_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit852_1[i][2] ][ unit852_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit852_1[i][4] ][ unit852_1[i][5] ] >0);
		X_contra = ( LargeX[852][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit852_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[852][0]=0; L[852][1]=1;}
			satisfiable[852][1]=satisfiable[852][1] & ((x[852] ^ 1) | (x[ unit852_1[i][0] ] ^ unit852_1[i][1]) |(x[ unit852_1[i][2] ] ^ unit852_1[i][3]));
			}
		if(X_contra>0) L[852][1]=2;
		}
	//Check all rules of unit[853][0]
	L[853][0] = LargeX[853][1]>0 ? 1 : 0;
	satisfiable[853][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit853_0[i][0] ][ unit853_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit853_0[i][2] ][ unit853_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit853_0[i][4] ][ unit853_0[i][5] ] >0);
		X_contra = ( LargeX[853][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit853_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[853][1]=0; L[853][0]=1;}
			satisfiable[853][0]=satisfiable[853][0] & ((x[853] ^ 0) | (x[ unit853_0[i][0] ] ^ unit853_0[i][1]) |(x[ unit853_0[i][2] ] ^ unit853_0[i][3]));
			}
		if(X_contra>0) L[853][0]=2;
		}
	//Check all rules of unit[853][1]
	L[853][1] = LargeX[853][0]>0 ? 1 : 0;
	satisfiable[853][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit853_1[i][0] ][ unit853_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit853_1[i][2] ][ unit853_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit853_1[i][4] ][ unit853_1[i][5] ] >0);
		X_contra = ( LargeX[853][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit853_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[853][0]=0; L[853][1]=1;}
			satisfiable[853][1]=satisfiable[853][1] & ((x[853] ^ 1) | (x[ unit853_1[i][0] ] ^ unit853_1[i][1]) |(x[ unit853_1[i][2] ] ^ unit853_1[i][3]));
			}
		if(X_contra>0) L[853][1]=2;
		}
	//Check all rules of unit[854][0]
	L[854][0] = LargeX[854][1]>0 ? 1 : 0;
	satisfiable[854][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit854_0[i][0] ][ unit854_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit854_0[i][2] ][ unit854_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit854_0[i][4] ][ unit854_0[i][5] ] >0);
		X_contra = ( LargeX[854][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit854_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[854][1]=0; L[854][0]=1;}
			satisfiable[854][0]=satisfiable[854][0] & ((x[854] ^ 0) | (x[ unit854_0[i][0] ] ^ unit854_0[i][1]) |(x[ unit854_0[i][2] ] ^ unit854_0[i][3]));
			}
		if(X_contra>0) L[854][0]=2;
		}
	//Check all rules of unit[854][1]
	L[854][1] = LargeX[854][0]>0 ? 1 : 0;
	satisfiable[854][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit854_1[i][0] ][ unit854_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit854_1[i][2] ][ unit854_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit854_1[i][4] ][ unit854_1[i][5] ] >0);
		X_contra = ( LargeX[854][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit854_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[854][0]=0; L[854][1]=1;}
			satisfiable[854][1]=satisfiable[854][1] & ((x[854] ^ 1) | (x[ unit854_1[i][0] ] ^ unit854_1[i][1]) |(x[ unit854_1[i][2] ] ^ unit854_1[i][3]));
			}
		if(X_contra>0) L[854][1]=2;
		}
	//Check all rules of unit[855][0]
	L[855][0] = LargeX[855][1]>0 ? 1 : 0;
	satisfiable[855][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit855_0[i][0] ][ unit855_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit855_0[i][2] ][ unit855_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit855_0[i][4] ][ unit855_0[i][5] ] >0);
		X_contra = ( LargeX[855][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit855_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[855][1]=0; L[855][0]=1;}
			satisfiable[855][0]=satisfiable[855][0] & ((x[855] ^ 0) | (x[ unit855_0[i][0] ] ^ unit855_0[i][1]) |(x[ unit855_0[i][2] ] ^ unit855_0[i][3]));
			}
		if(X_contra>0) L[855][0]=2;
		}
	//Check all rules of unit[855][1]
	L[855][1] = LargeX[855][0]>0 ? 1 : 0;
	satisfiable[855][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit855_1[i][0] ][ unit855_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit855_1[i][2] ][ unit855_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit855_1[i][4] ][ unit855_1[i][5] ] >0);
		X_contra = ( LargeX[855][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit855_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[855][0]=0; L[855][1]=1;}
			satisfiable[855][1]=satisfiable[855][1] & ((x[855] ^ 1) | (x[ unit855_1[i][0] ] ^ unit855_1[i][1]) |(x[ unit855_1[i][2] ] ^ unit855_1[i][3]));
			}
		if(X_contra>0) L[855][1]=2;
		}
	//Check all rules of unit[856][0]
	L[856][0] = LargeX[856][1]>0 ? 1 : 0;
	satisfiable[856][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit856_0[i][0] ][ unit856_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit856_0[i][2] ][ unit856_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit856_0[i][4] ][ unit856_0[i][5] ] >0);
		X_contra = ( LargeX[856][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit856_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[856][1]=0; L[856][0]=1;}
			satisfiable[856][0]=satisfiable[856][0] & ((x[856] ^ 0) | (x[ unit856_0[i][0] ] ^ unit856_0[i][1]) |(x[ unit856_0[i][2] ] ^ unit856_0[i][3]));
			}
		if(X_contra>0) L[856][0]=2;
		}
	//Check all rules of unit[856][1]
	L[856][1] = LargeX[856][0]>0 ? 1 : 0;
	satisfiable[856][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit856_1[i][0] ][ unit856_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit856_1[i][2] ][ unit856_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit856_1[i][4] ][ unit856_1[i][5] ] >0);
		X_contra = ( LargeX[856][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit856_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[856][0]=0; L[856][1]=1;}
			satisfiable[856][1]=satisfiable[856][1] & ((x[856] ^ 1) | (x[ unit856_1[i][0] ] ^ unit856_1[i][1]) |(x[ unit856_1[i][2] ] ^ unit856_1[i][3]));
			}
		if(X_contra>0) L[856][1]=2;
		}
	//Check all rules of unit[857][0]
	L[857][0] = LargeX[857][1]>0 ? 1 : 0;
	satisfiable[857][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit857_0[i][0] ][ unit857_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit857_0[i][2] ][ unit857_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit857_0[i][4] ][ unit857_0[i][5] ] >0);
		X_contra = ( LargeX[857][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit857_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[857][1]=0; L[857][0]=1;}
			satisfiable[857][0]=satisfiable[857][0] & ((x[857] ^ 0) | (x[ unit857_0[i][0] ] ^ unit857_0[i][1]) |(x[ unit857_0[i][2] ] ^ unit857_0[i][3]));
			}
		if(X_contra>0) L[857][0]=2;
		}
	//Check all rules of unit[857][1]
	L[857][1] = LargeX[857][0]>0 ? 1 : 0;
	satisfiable[857][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit857_1[i][0] ][ unit857_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit857_1[i][2] ][ unit857_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit857_1[i][4] ][ unit857_1[i][5] ] >0);
		X_contra = ( LargeX[857][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit857_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[857][0]=0; L[857][1]=1;}
			satisfiable[857][1]=satisfiable[857][1] & ((x[857] ^ 1) | (x[ unit857_1[i][0] ] ^ unit857_1[i][1]) |(x[ unit857_1[i][2] ] ^ unit857_1[i][3]));
			}
		if(X_contra>0) L[857][1]=2;
		}
	//Check all rules of unit[858][0]
	L[858][0] = LargeX[858][1]>0 ? 1 : 0;
	satisfiable[858][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit858_0[i][0] ][ unit858_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit858_0[i][2] ][ unit858_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit858_0[i][4] ][ unit858_0[i][5] ] >0);
		X_contra = ( LargeX[858][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit858_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[858][1]=0; L[858][0]=1;}
			satisfiable[858][0]=satisfiable[858][0] & ((x[858] ^ 0) | (x[ unit858_0[i][0] ] ^ unit858_0[i][1]) |(x[ unit858_0[i][2] ] ^ unit858_0[i][3]));
			}
		if(X_contra>0) L[858][0]=2;
		}
	//Check all rules of unit[858][1]
	L[858][1] = LargeX[858][0]>0 ? 1 : 0;
	satisfiable[858][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit858_1[i][0] ][ unit858_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit858_1[i][2] ][ unit858_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit858_1[i][4] ][ unit858_1[i][5] ] >0);
		X_contra = ( LargeX[858][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit858_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[858][0]=0; L[858][1]=1;}
			satisfiable[858][1]=satisfiable[858][1] & ((x[858] ^ 1) | (x[ unit858_1[i][0] ] ^ unit858_1[i][1]) |(x[ unit858_1[i][2] ] ^ unit858_1[i][3]));
			}
		if(X_contra>0) L[858][1]=2;
		}
	//Check all rules of unit[859][0]
	L[859][0] = LargeX[859][1]>0 ? 1 : 0;
	satisfiable[859][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit859_0[i][0] ][ unit859_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit859_0[i][2] ][ unit859_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit859_0[i][4] ][ unit859_0[i][5] ] >0);
		X_contra = ( LargeX[859][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit859_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[859][1]=0; L[859][0]=1;}
			satisfiable[859][0]=satisfiable[859][0] & ((x[859] ^ 0) | (x[ unit859_0[i][0] ] ^ unit859_0[i][1]) |(x[ unit859_0[i][2] ] ^ unit859_0[i][3]));
			}
		if(X_contra>0) L[859][0]=2;
		}
	//Check all rules of unit[859][1]
	L[859][1] = LargeX[859][0]>0 ? 1 : 0;
	satisfiable[859][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit859_1[i][0] ][ unit859_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit859_1[i][2] ][ unit859_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit859_1[i][4] ][ unit859_1[i][5] ] >0);
		X_contra = ( LargeX[859][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit859_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[859][0]=0; L[859][1]=1;}
			satisfiable[859][1]=satisfiable[859][1] & ((x[859] ^ 1) | (x[ unit859_1[i][0] ] ^ unit859_1[i][1]) |(x[ unit859_1[i][2] ] ^ unit859_1[i][3]));
			}
		if(X_contra>0) L[859][1]=2;
		}
	//Check all rules of unit[860][0]
	L[860][0] = LargeX[860][1]>0 ? 1 : 0;
	satisfiable[860][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit860_0[i][0] ][ unit860_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit860_0[i][2] ][ unit860_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit860_0[i][4] ][ unit860_0[i][5] ] >0);
		X_contra = ( LargeX[860][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit860_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[860][1]=0; L[860][0]=1;}
			satisfiable[860][0]=satisfiable[860][0] & ((x[860] ^ 0) | (x[ unit860_0[i][0] ] ^ unit860_0[i][1]) |(x[ unit860_0[i][2] ] ^ unit860_0[i][3]));
			}
		if(X_contra>0) L[860][0]=2;
		}
	//Check all rules of unit[860][1]
	L[860][1] = LargeX[860][0]>0 ? 1 : 0;
	satisfiable[860][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit860_1[i][0] ][ unit860_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit860_1[i][2] ][ unit860_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit860_1[i][4] ][ unit860_1[i][5] ] >0);
		X_contra = ( LargeX[860][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit860_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[860][0]=0; L[860][1]=1;}
			satisfiable[860][1]=satisfiable[860][1] & ((x[860] ^ 1) | (x[ unit860_1[i][0] ] ^ unit860_1[i][1]) |(x[ unit860_1[i][2] ] ^ unit860_1[i][3]));
			}
		if(X_contra>0) L[860][1]=2;
		}
	//Check all rules of unit[861][0]
	L[861][0] = LargeX[861][1]>0 ? 1 : 0;
	satisfiable[861][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit861_0[i][0] ][ unit861_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit861_0[i][2] ][ unit861_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit861_0[i][4] ][ unit861_0[i][5] ] >0);
		X_contra = ( LargeX[861][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit861_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[861][1]=0; L[861][0]=1;}
			satisfiable[861][0]=satisfiable[861][0] & ((x[861] ^ 0) | (x[ unit861_0[i][0] ] ^ unit861_0[i][1]) |(x[ unit861_0[i][2] ] ^ unit861_0[i][3]));
			}
		if(X_contra>0) L[861][0]=2;
		}
	//Check all rules of unit[861][1]
	L[861][1] = LargeX[861][0]>0 ? 1 : 0;
	satisfiable[861][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit861_1[i][0] ][ unit861_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit861_1[i][2] ][ unit861_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit861_1[i][4] ][ unit861_1[i][5] ] >0);
		X_contra = ( LargeX[861][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit861_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[861][0]=0; L[861][1]=1;}
			satisfiable[861][1]=satisfiable[861][1] & ((x[861] ^ 1) | (x[ unit861_1[i][0] ] ^ unit861_1[i][1]) |(x[ unit861_1[i][2] ] ^ unit861_1[i][3]));
			}
		if(X_contra>0) L[861][1]=2;
		}
	//Check all rules of unit[862][0]
	L[862][0] = LargeX[862][1]>0 ? 1 : 0;
	satisfiable[862][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit862_0[i][0] ][ unit862_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit862_0[i][2] ][ unit862_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit862_0[i][4] ][ unit862_0[i][5] ] >0);
		X_contra = ( LargeX[862][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit862_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[862][1]=0; L[862][0]=1;}
			satisfiable[862][0]=satisfiable[862][0] & ((x[862] ^ 0) | (x[ unit862_0[i][0] ] ^ unit862_0[i][1]) |(x[ unit862_0[i][2] ] ^ unit862_0[i][3]));
			}
		if(X_contra>0) L[862][0]=2;
		}
	//Check all rules of unit[862][1]
	L[862][1] = LargeX[862][0]>0 ? 1 : 0;
	satisfiable[862][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit862_1[i][0] ][ unit862_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit862_1[i][2] ][ unit862_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit862_1[i][4] ][ unit862_1[i][5] ] >0);
		X_contra = ( LargeX[862][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit862_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[862][0]=0; L[862][1]=1;}
			satisfiable[862][1]=satisfiable[862][1] & ((x[862] ^ 1) | (x[ unit862_1[i][0] ] ^ unit862_1[i][1]) |(x[ unit862_1[i][2] ] ^ unit862_1[i][3]));
			}
		if(X_contra>0) L[862][1]=2;
		}
	//Check all rules of unit[863][0]
	L[863][0] = LargeX[863][1]>0 ? 1 : 0;
	satisfiable[863][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit863_0[i][0] ][ unit863_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit863_0[i][2] ][ unit863_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit863_0[i][4] ][ unit863_0[i][5] ] >0);
		X_contra = ( LargeX[863][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit863_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[863][1]=0; L[863][0]=1;}
			satisfiable[863][0]=satisfiable[863][0] & ((x[863] ^ 0) | (x[ unit863_0[i][0] ] ^ unit863_0[i][1]) |(x[ unit863_0[i][2] ] ^ unit863_0[i][3]));
			}
		if(X_contra>0) L[863][0]=2;
		}
	//Check all rules of unit[863][1]
	L[863][1] = LargeX[863][0]>0 ? 1 : 0;
	satisfiable[863][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit863_1[i][0] ][ unit863_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit863_1[i][2] ][ unit863_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit863_1[i][4] ][ unit863_1[i][5] ] >0);
		X_contra = ( LargeX[863][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit863_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[863][0]=0; L[863][1]=1;}
			satisfiable[863][1]=satisfiable[863][1] & ((x[863] ^ 1) | (x[ unit863_1[i][0] ] ^ unit863_1[i][1]) |(x[ unit863_1[i][2] ] ^ unit863_1[i][3]));
			}
		if(X_contra>0) L[863][1]=2;
		}
	//Check all rules of unit[864][0]
	L[864][0] = LargeX[864][1]>0 ? 1 : 0;
	satisfiable[864][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit864_0[i][0] ][ unit864_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit864_0[i][2] ][ unit864_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit864_0[i][4] ][ unit864_0[i][5] ] >0);
		X_contra = ( LargeX[864][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit864_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[864][1]=0; L[864][0]=1;}
			satisfiable[864][0]=satisfiable[864][0] & ((x[864] ^ 0) | (x[ unit864_0[i][0] ] ^ unit864_0[i][1]) |(x[ unit864_0[i][2] ] ^ unit864_0[i][3]));
			}
		if(X_contra>0) L[864][0]=2;
		}
	//Check all rules of unit[864][1]
	L[864][1] = LargeX[864][0]>0 ? 1 : 0;
	satisfiable[864][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit864_1[i][0] ][ unit864_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit864_1[i][2] ][ unit864_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit864_1[i][4] ][ unit864_1[i][5] ] >0);
		X_contra = ( LargeX[864][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit864_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[864][0]=0; L[864][1]=1;}
			satisfiable[864][1]=satisfiable[864][1] & ((x[864] ^ 1) | (x[ unit864_1[i][0] ] ^ unit864_1[i][1]) |(x[ unit864_1[i][2] ] ^ unit864_1[i][3]));
			}
		if(X_contra>0) L[864][1]=2;
		}
	//Check all rules of unit[865][0]
	L[865][0] = LargeX[865][1]>0 ? 1 : 0;
	satisfiable[865][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit865_0[i][0] ][ unit865_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit865_0[i][2] ][ unit865_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit865_0[i][4] ][ unit865_0[i][5] ] >0);
		X_contra = ( LargeX[865][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit865_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[865][1]=0; L[865][0]=1;}
			satisfiable[865][0]=satisfiable[865][0] & ((x[865] ^ 0) | (x[ unit865_0[i][0] ] ^ unit865_0[i][1]) |(x[ unit865_0[i][2] ] ^ unit865_0[i][3]));
			}
		if(X_contra>0) L[865][0]=2;
		}
	//Check all rules of unit[865][1]
	L[865][1] = LargeX[865][0]>0 ? 1 : 0;
	satisfiable[865][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit865_1[i][0] ][ unit865_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit865_1[i][2] ][ unit865_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit865_1[i][4] ][ unit865_1[i][5] ] >0);
		X_contra = ( LargeX[865][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit865_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[865][0]=0; L[865][1]=1;}
			satisfiable[865][1]=satisfiable[865][1] & ((x[865] ^ 1) | (x[ unit865_1[i][0] ] ^ unit865_1[i][1]) |(x[ unit865_1[i][2] ] ^ unit865_1[i][3]));
			}
		if(X_contra>0) L[865][1]=2;
		}
	//Check all rules of unit[866][0]
	L[866][0] = LargeX[866][1]>0 ? 1 : 0;
	satisfiable[866][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit866_0[i][0] ][ unit866_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit866_0[i][2] ][ unit866_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit866_0[i][4] ][ unit866_0[i][5] ] >0);
		X_contra = ( LargeX[866][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit866_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[866][1]=0; L[866][0]=1;}
			satisfiable[866][0]=satisfiable[866][0] & ((x[866] ^ 0) | (x[ unit866_0[i][0] ] ^ unit866_0[i][1]) |(x[ unit866_0[i][2] ] ^ unit866_0[i][3]));
			}
		if(X_contra>0) L[866][0]=2;
		}
	//Check all rules of unit[866][1]
	L[866][1] = LargeX[866][0]>0 ? 1 : 0;
	satisfiable[866][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit866_1[i][0] ][ unit866_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit866_1[i][2] ][ unit866_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit866_1[i][4] ][ unit866_1[i][5] ] >0);
		X_contra = ( LargeX[866][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit866_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[866][0]=0; L[866][1]=1;}
			satisfiable[866][1]=satisfiable[866][1] & ((x[866] ^ 1) | (x[ unit866_1[i][0] ] ^ unit866_1[i][1]) |(x[ unit866_1[i][2] ] ^ unit866_1[i][3]));
			}
		if(X_contra>0) L[866][1]=2;
		}
	//Check all rules of unit[867][0]
	L[867][0] = LargeX[867][1]>0 ? 1 : 0;
	satisfiable[867][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit867_0[i][0] ][ unit867_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit867_0[i][2] ][ unit867_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit867_0[i][4] ][ unit867_0[i][5] ] >0);
		X_contra = ( LargeX[867][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit867_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[867][1]=0; L[867][0]=1;}
			satisfiable[867][0]=satisfiable[867][0] & ((x[867] ^ 0) | (x[ unit867_0[i][0] ] ^ unit867_0[i][1]) |(x[ unit867_0[i][2] ] ^ unit867_0[i][3]));
			}
		if(X_contra>0) L[867][0]=2;
		}
	//Check all rules of unit[867][1]
	L[867][1] = LargeX[867][0]>0 ? 1 : 0;
	satisfiable[867][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit867_1[i][0] ][ unit867_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit867_1[i][2] ][ unit867_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit867_1[i][4] ][ unit867_1[i][5] ] >0);
		X_contra = ( LargeX[867][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit867_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[867][0]=0; L[867][1]=1;}
			satisfiable[867][1]=satisfiable[867][1] & ((x[867] ^ 1) | (x[ unit867_1[i][0] ] ^ unit867_1[i][1]) |(x[ unit867_1[i][2] ] ^ unit867_1[i][3]));
			}
		if(X_contra>0) L[867][1]=2;
		}
	//Check all rules of unit[868][0]
	L[868][0] = LargeX[868][1]>0 ? 1 : 0;
	satisfiable[868][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit868_0[i][0] ][ unit868_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit868_0[i][2] ][ unit868_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit868_0[i][4] ][ unit868_0[i][5] ] >0);
		X_contra = ( LargeX[868][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit868_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[868][1]=0; L[868][0]=1;}
			satisfiable[868][0]=satisfiable[868][0] & ((x[868] ^ 0) | (x[ unit868_0[i][0] ] ^ unit868_0[i][1]) |(x[ unit868_0[i][2] ] ^ unit868_0[i][3]));
			}
		if(X_contra>0) L[868][0]=2;
		}
	//Check all rules of unit[868][1]
	L[868][1] = LargeX[868][0]>0 ? 1 : 0;
	satisfiable[868][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit868_1[i][0] ][ unit868_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit868_1[i][2] ][ unit868_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit868_1[i][4] ][ unit868_1[i][5] ] >0);
		X_contra = ( LargeX[868][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit868_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[868][0]=0; L[868][1]=1;}
			satisfiable[868][1]=satisfiable[868][1] & ((x[868] ^ 1) | (x[ unit868_1[i][0] ] ^ unit868_1[i][1]) |(x[ unit868_1[i][2] ] ^ unit868_1[i][3]));
			}
		if(X_contra>0) L[868][1]=2;
		}
	//Check all rules of unit[869][0]
	L[869][0] = LargeX[869][1]>0 ? 1 : 0;
	satisfiable[869][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit869_0[i][0] ][ unit869_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit869_0[i][2] ][ unit869_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit869_0[i][4] ][ unit869_0[i][5] ] >0);
		X_contra = ( LargeX[869][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit869_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[869][1]=0; L[869][0]=1;}
			satisfiable[869][0]=satisfiable[869][0] & ((x[869] ^ 0) | (x[ unit869_0[i][0] ] ^ unit869_0[i][1]) |(x[ unit869_0[i][2] ] ^ unit869_0[i][3]));
			}
		if(X_contra>0) L[869][0]=2;
		}
	//Check all rules of unit[869][1]
	L[869][1] = LargeX[869][0]>0 ? 1 : 0;
	satisfiable[869][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit869_1[i][0] ][ unit869_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit869_1[i][2] ][ unit869_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit869_1[i][4] ][ unit869_1[i][5] ] >0);
		X_contra = ( LargeX[869][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit869_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[869][0]=0; L[869][1]=1;}
			satisfiable[869][1]=satisfiable[869][1] & ((x[869] ^ 1) | (x[ unit869_1[i][0] ] ^ unit869_1[i][1]) |(x[ unit869_1[i][2] ] ^ unit869_1[i][3]));
			}
		if(X_contra>0) L[869][1]=2;
		}
	//Check all rules of unit[870][0]
	L[870][0] = LargeX[870][1]>0 ? 1 : 0;
	satisfiable[870][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit870_0[i][0] ][ unit870_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit870_0[i][2] ][ unit870_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit870_0[i][4] ][ unit870_0[i][5] ] >0);
		X_contra = ( LargeX[870][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit870_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[870][1]=0; L[870][0]=1;}
			satisfiable[870][0]=satisfiable[870][0] & ((x[870] ^ 0) | (x[ unit870_0[i][0] ] ^ unit870_0[i][1]) |(x[ unit870_0[i][2] ] ^ unit870_0[i][3]));
			}
		if(X_contra>0) L[870][0]=2;
		}
	//Check all rules of unit[870][1]
	L[870][1] = LargeX[870][0]>0 ? 1 : 0;
	satisfiable[870][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit870_1[i][0] ][ unit870_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit870_1[i][2] ][ unit870_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit870_1[i][4] ][ unit870_1[i][5] ] >0);
		X_contra = ( LargeX[870][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit870_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[870][0]=0; L[870][1]=1;}
			satisfiable[870][1]=satisfiable[870][1] & ((x[870] ^ 1) | (x[ unit870_1[i][0] ] ^ unit870_1[i][1]) |(x[ unit870_1[i][2] ] ^ unit870_1[i][3]));
			}
		if(X_contra>0) L[870][1]=2;
		}
	//Check all rules of unit[871][0]
	L[871][0] = LargeX[871][1]>0 ? 1 : 0;
	satisfiable[871][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit871_0[i][0] ][ unit871_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit871_0[i][2] ][ unit871_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit871_0[i][4] ][ unit871_0[i][5] ] >0);
		X_contra = ( LargeX[871][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit871_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[871][1]=0; L[871][0]=1;}
			satisfiable[871][0]=satisfiable[871][0] & ((x[871] ^ 0) | (x[ unit871_0[i][0] ] ^ unit871_0[i][1]) |(x[ unit871_0[i][2] ] ^ unit871_0[i][3]));
			}
		if(X_contra>0) L[871][0]=2;
		}
	//Check all rules of unit[871][1]
	L[871][1] = LargeX[871][0]>0 ? 1 : 0;
	satisfiable[871][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit871_1[i][0] ][ unit871_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit871_1[i][2] ][ unit871_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit871_1[i][4] ][ unit871_1[i][5] ] >0);
		X_contra = ( LargeX[871][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit871_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[871][0]=0; L[871][1]=1;}
			satisfiable[871][1]=satisfiable[871][1] & ((x[871] ^ 1) | (x[ unit871_1[i][0] ] ^ unit871_1[i][1]) |(x[ unit871_1[i][2] ] ^ unit871_1[i][3]));
			}
		if(X_contra>0) L[871][1]=2;
		}
	//Check all rules of unit[872][0]
	L[872][0] = LargeX[872][1]>0 ? 1 : 0;
	satisfiable[872][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit872_0[i][0] ][ unit872_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit872_0[i][2] ][ unit872_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit872_0[i][4] ][ unit872_0[i][5] ] >0);
		X_contra = ( LargeX[872][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit872_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[872][1]=0; L[872][0]=1;}
			satisfiable[872][0]=satisfiable[872][0] & ((x[872] ^ 0) | (x[ unit872_0[i][0] ] ^ unit872_0[i][1]) |(x[ unit872_0[i][2] ] ^ unit872_0[i][3]));
			}
		if(X_contra>0) L[872][0]=2;
		}
	//Check all rules of unit[872][1]
	L[872][1] = LargeX[872][0]>0 ? 1 : 0;
	satisfiable[872][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit872_1[i][0] ][ unit872_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit872_1[i][2] ][ unit872_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit872_1[i][4] ][ unit872_1[i][5] ] >0);
		X_contra = ( LargeX[872][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit872_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[872][0]=0; L[872][1]=1;}
			satisfiable[872][1]=satisfiable[872][1] & ((x[872] ^ 1) | (x[ unit872_1[i][0] ] ^ unit872_1[i][1]) |(x[ unit872_1[i][2] ] ^ unit872_1[i][3]));
			}
		if(X_contra>0) L[872][1]=2;
		}
	//Check all rules of unit[873][0]
	L[873][0] = LargeX[873][1]>0 ? 1 : 0;
	satisfiable[873][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit873_0[i][0] ][ unit873_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit873_0[i][2] ][ unit873_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit873_0[i][4] ][ unit873_0[i][5] ] >0);
		X_contra = ( LargeX[873][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit873_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[873][1]=0; L[873][0]=1;}
			satisfiable[873][0]=satisfiable[873][0] & ((x[873] ^ 0) | (x[ unit873_0[i][0] ] ^ unit873_0[i][1]) |(x[ unit873_0[i][2] ] ^ unit873_0[i][3]));
			}
		if(X_contra>0) L[873][0]=2;
		}
	//Check all rules of unit[873][1]
	L[873][1] = LargeX[873][0]>0 ? 1 : 0;
	satisfiable[873][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit873_1[i][0] ][ unit873_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit873_1[i][2] ][ unit873_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit873_1[i][4] ][ unit873_1[i][5] ] >0);
		X_contra = ( LargeX[873][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit873_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[873][0]=0; L[873][1]=1;}
			satisfiable[873][1]=satisfiable[873][1] & ((x[873] ^ 1) | (x[ unit873_1[i][0] ] ^ unit873_1[i][1]) |(x[ unit873_1[i][2] ] ^ unit873_1[i][3]));
			}
		if(X_contra>0) L[873][1]=2;
		}
	//Check all rules of unit[874][0]
	L[874][0] = LargeX[874][1]>0 ? 1 : 0;
	satisfiable[874][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit874_0[i][0] ][ unit874_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit874_0[i][2] ][ unit874_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit874_0[i][4] ][ unit874_0[i][5] ] >0);
		X_contra = ( LargeX[874][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit874_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[874][1]=0; L[874][0]=1;}
			satisfiable[874][0]=satisfiable[874][0] & ((x[874] ^ 0) | (x[ unit874_0[i][0] ] ^ unit874_0[i][1]) |(x[ unit874_0[i][2] ] ^ unit874_0[i][3]));
			}
		if(X_contra>0) L[874][0]=2;
		}
	//Check all rules of unit[874][1]
	L[874][1] = LargeX[874][0]>0 ? 1 : 0;
	satisfiable[874][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit874_1[i][0] ][ unit874_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit874_1[i][2] ][ unit874_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit874_1[i][4] ][ unit874_1[i][5] ] >0);
		X_contra = ( LargeX[874][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit874_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[874][0]=0; L[874][1]=1;}
			satisfiable[874][1]=satisfiable[874][1] & ((x[874] ^ 1) | (x[ unit874_1[i][0] ] ^ unit874_1[i][1]) |(x[ unit874_1[i][2] ] ^ unit874_1[i][3]));
			}
		if(X_contra>0) L[874][1]=2;
		}
	//Check all rules of unit[875][0]
	L[875][0] = LargeX[875][1]>0 ? 1 : 0;
	satisfiable[875][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit875_0[i][0] ][ unit875_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit875_0[i][2] ][ unit875_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit875_0[i][4] ][ unit875_0[i][5] ] >0);
		X_contra = ( LargeX[875][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit875_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[875][1]=0; L[875][0]=1;}
			satisfiable[875][0]=satisfiable[875][0] & ((x[875] ^ 0) | (x[ unit875_0[i][0] ] ^ unit875_0[i][1]) |(x[ unit875_0[i][2] ] ^ unit875_0[i][3]));
			}
		if(X_contra>0) L[875][0]=2;
		}
	//Check all rules of unit[875][1]
	L[875][1] = LargeX[875][0]>0 ? 1 : 0;
	satisfiable[875][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit875_1[i][0] ][ unit875_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit875_1[i][2] ][ unit875_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit875_1[i][4] ][ unit875_1[i][5] ] >0);
		X_contra = ( LargeX[875][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit875_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[875][0]=0; L[875][1]=1;}
			satisfiable[875][1]=satisfiable[875][1] & ((x[875] ^ 1) | (x[ unit875_1[i][0] ] ^ unit875_1[i][1]) |(x[ unit875_1[i][2] ] ^ unit875_1[i][3]));
			}
		if(X_contra>0) L[875][1]=2;
		}
	//Check all rules of unit[876][0]
	L[876][0] = LargeX[876][1]>0 ? 1 : 0;
	satisfiable[876][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit876_0[i][0] ][ unit876_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit876_0[i][2] ][ unit876_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit876_0[i][4] ][ unit876_0[i][5] ] >0);
		X_contra = ( LargeX[876][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit876_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[876][1]=0; L[876][0]=1;}
			satisfiable[876][0]=satisfiable[876][0] & ((x[876] ^ 0) | (x[ unit876_0[i][0] ] ^ unit876_0[i][1]) |(x[ unit876_0[i][2] ] ^ unit876_0[i][3]));
			}
		if(X_contra>0) L[876][0]=2;
		}
	//Check all rules of unit[876][1]
	L[876][1] = LargeX[876][0]>0 ? 1 : 0;
	satisfiable[876][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit876_1[i][0] ][ unit876_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit876_1[i][2] ][ unit876_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit876_1[i][4] ][ unit876_1[i][5] ] >0);
		X_contra = ( LargeX[876][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit876_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[876][0]=0; L[876][1]=1;}
			satisfiable[876][1]=satisfiable[876][1] & ((x[876] ^ 1) | (x[ unit876_1[i][0] ] ^ unit876_1[i][1]) |(x[ unit876_1[i][2] ] ^ unit876_1[i][3]));
			}
		if(X_contra>0) L[876][1]=2;
		}
	//Check all rules of unit[877][0]
	L[877][0] = LargeX[877][1]>0 ? 1 : 0;
	satisfiable[877][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit877_0[i][0] ][ unit877_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit877_0[i][2] ][ unit877_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit877_0[i][4] ][ unit877_0[i][5] ] >0);
		X_contra = ( LargeX[877][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit877_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[877][1]=0; L[877][0]=1;}
			satisfiable[877][0]=satisfiable[877][0] & ((x[877] ^ 0) | (x[ unit877_0[i][0] ] ^ unit877_0[i][1]) |(x[ unit877_0[i][2] ] ^ unit877_0[i][3]));
			}
		if(X_contra>0) L[877][0]=2;
		}
	//Check all rules of unit[877][1]
	L[877][1] = LargeX[877][0]>0 ? 1 : 0;
	satisfiable[877][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit877_1[i][0] ][ unit877_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit877_1[i][2] ][ unit877_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit877_1[i][4] ][ unit877_1[i][5] ] >0);
		X_contra = ( LargeX[877][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit877_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[877][0]=0; L[877][1]=1;}
			satisfiable[877][1]=satisfiable[877][1] & ((x[877] ^ 1) | (x[ unit877_1[i][0] ] ^ unit877_1[i][1]) |(x[ unit877_1[i][2] ] ^ unit877_1[i][3]));
			}
		if(X_contra>0) L[877][1]=2;
		}
	//Check all rules of unit[878][0]
	L[878][0] = LargeX[878][1]>0 ? 1 : 0;
	satisfiable[878][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit878_0[i][0] ][ unit878_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit878_0[i][2] ][ unit878_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit878_0[i][4] ][ unit878_0[i][5] ] >0);
		X_contra = ( LargeX[878][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit878_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[878][1]=0; L[878][0]=1;}
			satisfiable[878][0]=satisfiable[878][0] & ((x[878] ^ 0) | (x[ unit878_0[i][0] ] ^ unit878_0[i][1]) |(x[ unit878_0[i][2] ] ^ unit878_0[i][3]));
			}
		if(X_contra>0) L[878][0]=2;
		}
	//Check all rules of unit[878][1]
	L[878][1] = LargeX[878][0]>0 ? 1 : 0;
	satisfiable[878][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit878_1[i][0] ][ unit878_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit878_1[i][2] ][ unit878_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit878_1[i][4] ][ unit878_1[i][5] ] >0);
		X_contra = ( LargeX[878][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit878_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[878][0]=0; L[878][1]=1;}
			satisfiable[878][1]=satisfiable[878][1] & ((x[878] ^ 1) | (x[ unit878_1[i][0] ] ^ unit878_1[i][1]) |(x[ unit878_1[i][2] ] ^ unit878_1[i][3]));
			}
		if(X_contra>0) L[878][1]=2;
		}
	//Check all rules of unit[879][0]
	L[879][0] = LargeX[879][1]>0 ? 1 : 0;
	satisfiable[879][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit879_0[i][0] ][ unit879_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit879_0[i][2] ][ unit879_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit879_0[i][4] ][ unit879_0[i][5] ] >0);
		X_contra = ( LargeX[879][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit879_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[879][1]=0; L[879][0]=1;}
			satisfiable[879][0]=satisfiable[879][0] & ((x[879] ^ 0) | (x[ unit879_0[i][0] ] ^ unit879_0[i][1]) |(x[ unit879_0[i][2] ] ^ unit879_0[i][3]));
			}
		if(X_contra>0) L[879][0]=2;
		}
	//Check all rules of unit[879][1]
	L[879][1] = LargeX[879][0]>0 ? 1 : 0;
	satisfiable[879][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit879_1[i][0] ][ unit879_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit879_1[i][2] ][ unit879_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit879_1[i][4] ][ unit879_1[i][5] ] >0);
		X_contra = ( LargeX[879][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit879_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[879][0]=0; L[879][1]=1;}
			satisfiable[879][1]=satisfiable[879][1] & ((x[879] ^ 1) | (x[ unit879_1[i][0] ] ^ unit879_1[i][1]) |(x[ unit879_1[i][2] ] ^ unit879_1[i][3]));
			}
		if(X_contra>0) L[879][1]=2;
		}
	//Check all rules of unit[880][0]
	L[880][0] = LargeX[880][1]>0 ? 1 : 0;
	satisfiable[880][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit880_0[i][0] ][ unit880_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit880_0[i][2] ][ unit880_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit880_0[i][4] ][ unit880_0[i][5] ] >0);
		X_contra = ( LargeX[880][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit880_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[880][1]=0; L[880][0]=1;}
			satisfiable[880][0]=satisfiable[880][0] & ((x[880] ^ 0) | (x[ unit880_0[i][0] ] ^ unit880_0[i][1]) |(x[ unit880_0[i][2] ] ^ unit880_0[i][3]));
			}
		if(X_contra>0) L[880][0]=2;
		}
	//Check all rules of unit[880][1]
	L[880][1] = LargeX[880][0]>0 ? 1 : 0;
	satisfiable[880][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit880_1[i][0] ][ unit880_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit880_1[i][2] ][ unit880_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit880_1[i][4] ][ unit880_1[i][5] ] >0);
		X_contra = ( LargeX[880][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit880_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[880][0]=0; L[880][1]=1;}
			satisfiable[880][1]=satisfiable[880][1] & ((x[880] ^ 1) | (x[ unit880_1[i][0] ] ^ unit880_1[i][1]) |(x[ unit880_1[i][2] ] ^ unit880_1[i][3]));
			}
		if(X_contra>0) L[880][1]=2;
		}
	//Check all rules of unit[881][0]
	L[881][0] = LargeX[881][1]>0 ? 1 : 0;
	satisfiable[881][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit881_0[i][0] ][ unit881_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit881_0[i][2] ][ unit881_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit881_0[i][4] ][ unit881_0[i][5] ] >0);
		X_contra = ( LargeX[881][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit881_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[881][1]=0; L[881][0]=1;}
			satisfiable[881][0]=satisfiable[881][0] & ((x[881] ^ 0) | (x[ unit881_0[i][0] ] ^ unit881_0[i][1]) |(x[ unit881_0[i][2] ] ^ unit881_0[i][3]));
			}
		if(X_contra>0) L[881][0]=2;
		}
	//Check all rules of unit[881][1]
	L[881][1] = LargeX[881][0]>0 ? 1 : 0;
	satisfiable[881][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit881_1[i][0] ][ unit881_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit881_1[i][2] ][ unit881_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit881_1[i][4] ][ unit881_1[i][5] ] >0);
		X_contra = ( LargeX[881][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit881_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[881][0]=0; L[881][1]=1;}
			satisfiable[881][1]=satisfiable[881][1] & ((x[881] ^ 1) | (x[ unit881_1[i][0] ] ^ unit881_1[i][1]) |(x[ unit881_1[i][2] ] ^ unit881_1[i][3]));
			}
		if(X_contra>0) L[881][1]=2;
		}
	//Check all rules of unit[882][0]
	L[882][0] = LargeX[882][1]>0 ? 1 : 0;
	satisfiable[882][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit882_0[i][0] ][ unit882_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit882_0[i][2] ][ unit882_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit882_0[i][4] ][ unit882_0[i][5] ] >0);
		X_contra = ( LargeX[882][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit882_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[882][1]=0; L[882][0]=1;}
			satisfiable[882][0]=satisfiable[882][0] & ((x[882] ^ 0) | (x[ unit882_0[i][0] ] ^ unit882_0[i][1]) |(x[ unit882_0[i][2] ] ^ unit882_0[i][3]));
			}
		if(X_contra>0) L[882][0]=2;
		}
	//Check all rules of unit[882][1]
	L[882][1] = LargeX[882][0]>0 ? 1 : 0;
	satisfiable[882][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit882_1[i][0] ][ unit882_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit882_1[i][2] ][ unit882_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit882_1[i][4] ][ unit882_1[i][5] ] >0);
		X_contra = ( LargeX[882][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit882_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[882][0]=0; L[882][1]=1;}
			satisfiable[882][1]=satisfiable[882][1] & ((x[882] ^ 1) | (x[ unit882_1[i][0] ] ^ unit882_1[i][1]) |(x[ unit882_1[i][2] ] ^ unit882_1[i][3]));
			}
		if(X_contra>0) L[882][1]=2;
		}
	//Check all rules of unit[883][0]
	L[883][0] = LargeX[883][1]>0 ? 1 : 0;
	satisfiable[883][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit883_0[i][0] ][ unit883_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit883_0[i][2] ][ unit883_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit883_0[i][4] ][ unit883_0[i][5] ] >0);
		X_contra = ( LargeX[883][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit883_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[883][1]=0; L[883][0]=1;}
			satisfiable[883][0]=satisfiable[883][0] & ((x[883] ^ 0) | (x[ unit883_0[i][0] ] ^ unit883_0[i][1]) |(x[ unit883_0[i][2] ] ^ unit883_0[i][3]));
			}
		if(X_contra>0) L[883][0]=2;
		}
	//Check all rules of unit[883][1]
	L[883][1] = LargeX[883][0]>0 ? 1 : 0;
	satisfiable[883][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit883_1[i][0] ][ unit883_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit883_1[i][2] ][ unit883_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit883_1[i][4] ][ unit883_1[i][5] ] >0);
		X_contra = ( LargeX[883][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit883_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[883][0]=0; L[883][1]=1;}
			satisfiable[883][1]=satisfiable[883][1] & ((x[883] ^ 1) | (x[ unit883_1[i][0] ] ^ unit883_1[i][1]) |(x[ unit883_1[i][2] ] ^ unit883_1[i][3]));
			}
		if(X_contra>0) L[883][1]=2;
		}
	//Check all rules of unit[884][0]
	L[884][0] = LargeX[884][1]>0 ? 1 : 0;
	satisfiable[884][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit884_0[i][0] ][ unit884_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit884_0[i][2] ][ unit884_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit884_0[i][4] ][ unit884_0[i][5] ] >0);
		X_contra = ( LargeX[884][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit884_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[884][1]=0; L[884][0]=1;}
			satisfiable[884][0]=satisfiable[884][0] & ((x[884] ^ 0) | (x[ unit884_0[i][0] ] ^ unit884_0[i][1]) |(x[ unit884_0[i][2] ] ^ unit884_0[i][3]));
			}
		if(X_contra>0) L[884][0]=2;
		}
	//Check all rules of unit[884][1]
	L[884][1] = LargeX[884][0]>0 ? 1 : 0;
	satisfiable[884][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit884_1[i][0] ][ unit884_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit884_1[i][2] ][ unit884_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit884_1[i][4] ][ unit884_1[i][5] ] >0);
		X_contra = ( LargeX[884][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit884_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[884][0]=0; L[884][1]=1;}
			satisfiable[884][1]=satisfiable[884][1] & ((x[884] ^ 1) | (x[ unit884_1[i][0] ] ^ unit884_1[i][1]) |(x[ unit884_1[i][2] ] ^ unit884_1[i][3]));
			}
		if(X_contra>0) L[884][1]=2;
		}
	//Check all rules of unit[885][0]
	L[885][0] = LargeX[885][1]>0 ? 1 : 0;
	satisfiable[885][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit885_0[i][0] ][ unit885_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit885_0[i][2] ][ unit885_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit885_0[i][4] ][ unit885_0[i][5] ] >0);
		X_contra = ( LargeX[885][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit885_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[885][1]=0; L[885][0]=1;}
			satisfiable[885][0]=satisfiable[885][0] & ((x[885] ^ 0) | (x[ unit885_0[i][0] ] ^ unit885_0[i][1]) |(x[ unit885_0[i][2] ] ^ unit885_0[i][3]));
			}
		if(X_contra>0) L[885][0]=2;
		}
	//Check all rules of unit[885][1]
	L[885][1] = LargeX[885][0]>0 ? 1 : 0;
	satisfiable[885][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit885_1[i][0] ][ unit885_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit885_1[i][2] ][ unit885_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit885_1[i][4] ][ unit885_1[i][5] ] >0);
		X_contra = ( LargeX[885][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit885_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[885][0]=0; L[885][1]=1;}
			satisfiable[885][1]=satisfiable[885][1] & ((x[885] ^ 1) | (x[ unit885_1[i][0] ] ^ unit885_1[i][1]) |(x[ unit885_1[i][2] ] ^ unit885_1[i][3]));
			}
		if(X_contra>0) L[885][1]=2;
		}
	//Check all rules of unit[886][0]
	L[886][0] = LargeX[886][1]>0 ? 1 : 0;
	satisfiable[886][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit886_0[i][0] ][ unit886_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit886_0[i][2] ][ unit886_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit886_0[i][4] ][ unit886_0[i][5] ] >0);
		X_contra = ( LargeX[886][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit886_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[886][1]=0; L[886][0]=1;}
			satisfiable[886][0]=satisfiable[886][0] & ((x[886] ^ 0) | (x[ unit886_0[i][0] ] ^ unit886_0[i][1]) |(x[ unit886_0[i][2] ] ^ unit886_0[i][3]));
			}
		if(X_contra>0) L[886][0]=2;
		}
	//Check all rules of unit[886][1]
	L[886][1] = LargeX[886][0]>0 ? 1 : 0;
	satisfiable[886][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit886_1[i][0] ][ unit886_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit886_1[i][2] ][ unit886_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit886_1[i][4] ][ unit886_1[i][5] ] >0);
		X_contra = ( LargeX[886][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit886_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[886][0]=0; L[886][1]=1;}
			satisfiable[886][1]=satisfiable[886][1] & ((x[886] ^ 1) | (x[ unit886_1[i][0] ] ^ unit886_1[i][1]) |(x[ unit886_1[i][2] ] ^ unit886_1[i][3]));
			}
		if(X_contra>0) L[886][1]=2;
		}
	//Check all rules of unit[887][0]
	L[887][0] = LargeX[887][1]>0 ? 1 : 0;
	satisfiable[887][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit887_0[i][0] ][ unit887_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit887_0[i][2] ][ unit887_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit887_0[i][4] ][ unit887_0[i][5] ] >0);
		X_contra = ( LargeX[887][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit887_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[887][1]=0; L[887][0]=1;}
			satisfiable[887][0]=satisfiable[887][0] & ((x[887] ^ 0) | (x[ unit887_0[i][0] ] ^ unit887_0[i][1]) |(x[ unit887_0[i][2] ] ^ unit887_0[i][3]));
			}
		if(X_contra>0) L[887][0]=2;
		}
	//Check all rules of unit[887][1]
	L[887][1] = LargeX[887][0]>0 ? 1 : 0;
	satisfiable[887][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit887_1[i][0] ][ unit887_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit887_1[i][2] ][ unit887_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit887_1[i][4] ][ unit887_1[i][5] ] >0);
		X_contra = ( LargeX[887][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit887_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[887][0]=0; L[887][1]=1;}
			satisfiable[887][1]=satisfiable[887][1] & ((x[887] ^ 1) | (x[ unit887_1[i][0] ] ^ unit887_1[i][1]) |(x[ unit887_1[i][2] ] ^ unit887_1[i][3]));
			}
		if(X_contra>0) L[887][1]=2;
		}
	//Check all rules of unit[888][0]
	L[888][0] = LargeX[888][1]>0 ? 1 : 0;
	satisfiable[888][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit888_0[i][0] ][ unit888_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit888_0[i][2] ][ unit888_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit888_0[i][4] ][ unit888_0[i][5] ] >0);
		X_contra = ( LargeX[888][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit888_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[888][1]=0; L[888][0]=1;}
			satisfiable[888][0]=satisfiable[888][0] & ((x[888] ^ 0) | (x[ unit888_0[i][0] ] ^ unit888_0[i][1]) |(x[ unit888_0[i][2] ] ^ unit888_0[i][3]));
			}
		if(X_contra>0) L[888][0]=2;
		}
	//Check all rules of unit[888][1]
	L[888][1] = LargeX[888][0]>0 ? 1 : 0;
	satisfiable[888][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit888_1[i][0] ][ unit888_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit888_1[i][2] ][ unit888_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit888_1[i][4] ][ unit888_1[i][5] ] >0);
		X_contra = ( LargeX[888][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit888_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[888][0]=0; L[888][1]=1;}
			satisfiable[888][1]=satisfiable[888][1] & ((x[888] ^ 1) | (x[ unit888_1[i][0] ] ^ unit888_1[i][1]) |(x[ unit888_1[i][2] ] ^ unit888_1[i][3]));
			}
		if(X_contra>0) L[888][1]=2;
		}
	//Check all rules of unit[889][0]
	L[889][0] = LargeX[889][1]>0 ? 1 : 0;
	satisfiable[889][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit889_0[i][0] ][ unit889_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit889_0[i][2] ][ unit889_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit889_0[i][4] ][ unit889_0[i][5] ] >0);
		X_contra = ( LargeX[889][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit889_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[889][1]=0; L[889][0]=1;}
			satisfiable[889][0]=satisfiable[889][0] & ((x[889] ^ 0) | (x[ unit889_0[i][0] ] ^ unit889_0[i][1]) |(x[ unit889_0[i][2] ] ^ unit889_0[i][3]));
			}
		if(X_contra>0) L[889][0]=2;
		}
	//Check all rules of unit[889][1]
	L[889][1] = LargeX[889][0]>0 ? 1 : 0;
	satisfiable[889][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit889_1[i][0] ][ unit889_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit889_1[i][2] ][ unit889_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit889_1[i][4] ][ unit889_1[i][5] ] >0);
		X_contra = ( LargeX[889][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit889_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[889][0]=0; L[889][1]=1;}
			satisfiable[889][1]=satisfiable[889][1] & ((x[889] ^ 1) | (x[ unit889_1[i][0] ] ^ unit889_1[i][1]) |(x[ unit889_1[i][2] ] ^ unit889_1[i][3]));
			}
		if(X_contra>0) L[889][1]=2;
		}
	//Check all rules of unit[890][0]
	L[890][0] = LargeX[890][1]>0 ? 1 : 0;
	satisfiable[890][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit890_0[i][0] ][ unit890_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit890_0[i][2] ][ unit890_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit890_0[i][4] ][ unit890_0[i][5] ] >0);
		X_contra = ( LargeX[890][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit890_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[890][1]=0; L[890][0]=1;}
			satisfiable[890][0]=satisfiable[890][0] & ((x[890] ^ 0) | (x[ unit890_0[i][0] ] ^ unit890_0[i][1]) |(x[ unit890_0[i][2] ] ^ unit890_0[i][3]));
			}
		if(X_contra>0) L[890][0]=2;
		}
	//Check all rules of unit[890][1]
	L[890][1] = LargeX[890][0]>0 ? 1 : 0;
	satisfiable[890][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit890_1[i][0] ][ unit890_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit890_1[i][2] ][ unit890_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit890_1[i][4] ][ unit890_1[i][5] ] >0);
		X_contra = ( LargeX[890][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit890_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[890][0]=0; L[890][1]=1;}
			satisfiable[890][1]=satisfiable[890][1] & ((x[890] ^ 1) | (x[ unit890_1[i][0] ] ^ unit890_1[i][1]) |(x[ unit890_1[i][2] ] ^ unit890_1[i][3]));
			}
		if(X_contra>0) L[890][1]=2;
		}
	//Check all rules of unit[891][0]
	L[891][0] = LargeX[891][1]>0 ? 1 : 0;
	satisfiable[891][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit891_0[i][0] ][ unit891_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit891_0[i][2] ][ unit891_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit891_0[i][4] ][ unit891_0[i][5] ] >0);
		X_contra = ( LargeX[891][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit891_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[891][1]=0; L[891][0]=1;}
			satisfiable[891][0]=satisfiable[891][0] & ((x[891] ^ 0) | (x[ unit891_0[i][0] ] ^ unit891_0[i][1]) |(x[ unit891_0[i][2] ] ^ unit891_0[i][3]));
			}
		if(X_contra>0) L[891][0]=2;
		}
	//Check all rules of unit[891][1]
	L[891][1] = LargeX[891][0]>0 ? 1 : 0;
	satisfiable[891][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit891_1[i][0] ][ unit891_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit891_1[i][2] ][ unit891_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit891_1[i][4] ][ unit891_1[i][5] ] >0);
		X_contra = ( LargeX[891][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit891_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[891][0]=0; L[891][1]=1;}
			satisfiable[891][1]=satisfiable[891][1] & ((x[891] ^ 1) | (x[ unit891_1[i][0] ] ^ unit891_1[i][1]) |(x[ unit891_1[i][2] ] ^ unit891_1[i][3]));
			}
		if(X_contra>0) L[891][1]=2;
		}
	//Check all rules of unit[892][0]
	L[892][0] = LargeX[892][1]>0 ? 1 : 0;
	satisfiable[892][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit892_0[i][0] ][ unit892_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit892_0[i][2] ][ unit892_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit892_0[i][4] ][ unit892_0[i][5] ] >0);
		X_contra = ( LargeX[892][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit892_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[892][1]=0; L[892][0]=1;}
			satisfiable[892][0]=satisfiable[892][0] & ((x[892] ^ 0) | (x[ unit892_0[i][0] ] ^ unit892_0[i][1]) |(x[ unit892_0[i][2] ] ^ unit892_0[i][3]));
			}
		if(X_contra>0) L[892][0]=2;
		}
	//Check all rules of unit[892][1]
	L[892][1] = LargeX[892][0]>0 ? 1 : 0;
	satisfiable[892][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit892_1[i][0] ][ unit892_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit892_1[i][2] ][ unit892_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit892_1[i][4] ][ unit892_1[i][5] ] >0);
		X_contra = ( LargeX[892][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit892_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[892][0]=0; L[892][1]=1;}
			satisfiable[892][1]=satisfiable[892][1] & ((x[892] ^ 1) | (x[ unit892_1[i][0] ] ^ unit892_1[i][1]) |(x[ unit892_1[i][2] ] ^ unit892_1[i][3]));
			}
		if(X_contra>0) L[892][1]=2;
		}
	//Check all rules of unit[893][0]
	L[893][0] = LargeX[893][1]>0 ? 1 : 0;
	satisfiable[893][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit893_0[i][0] ][ unit893_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit893_0[i][2] ][ unit893_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit893_0[i][4] ][ unit893_0[i][5] ] >0);
		X_contra = ( LargeX[893][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit893_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[893][1]=0; L[893][0]=1;}
			satisfiable[893][0]=satisfiable[893][0] & ((x[893] ^ 0) | (x[ unit893_0[i][0] ] ^ unit893_0[i][1]) |(x[ unit893_0[i][2] ] ^ unit893_0[i][3]));
			}
		if(X_contra>0) L[893][0]=2;
		}
	//Check all rules of unit[893][1]
	L[893][1] = LargeX[893][0]>0 ? 1 : 0;
	satisfiable[893][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit893_1[i][0] ][ unit893_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit893_1[i][2] ][ unit893_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit893_1[i][4] ][ unit893_1[i][5] ] >0);
		X_contra = ( LargeX[893][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit893_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[893][0]=0; L[893][1]=1;}
			satisfiable[893][1]=satisfiable[893][1] & ((x[893] ^ 1) | (x[ unit893_1[i][0] ] ^ unit893_1[i][1]) |(x[ unit893_1[i][2] ] ^ unit893_1[i][3]));
			}
		if(X_contra>0) L[893][1]=2;
		}
	//Check all rules of unit[894][0]
	L[894][0] = LargeX[894][1]>0 ? 1 : 0;
	satisfiable[894][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit894_0[i][0] ][ unit894_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit894_0[i][2] ][ unit894_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit894_0[i][4] ][ unit894_0[i][5] ] >0);
		X_contra = ( LargeX[894][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit894_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[894][1]=0; L[894][0]=1;}
			satisfiable[894][0]=satisfiable[894][0] & ((x[894] ^ 0) | (x[ unit894_0[i][0] ] ^ unit894_0[i][1]) |(x[ unit894_0[i][2] ] ^ unit894_0[i][3]));
			}
		if(X_contra>0) L[894][0]=2;
		}
	//Check all rules of unit[894][1]
	L[894][1] = LargeX[894][0]>0 ? 1 : 0;
	satisfiable[894][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit894_1[i][0] ][ unit894_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit894_1[i][2] ][ unit894_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit894_1[i][4] ][ unit894_1[i][5] ] >0);
		X_contra = ( LargeX[894][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit894_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[894][0]=0; L[894][1]=1;}
			satisfiable[894][1]=satisfiable[894][1] & ((x[894] ^ 1) | (x[ unit894_1[i][0] ] ^ unit894_1[i][1]) |(x[ unit894_1[i][2] ] ^ unit894_1[i][3]));
			}
		if(X_contra>0) L[894][1]=2;
		}
	//Check all rules of unit[895][0]
	L[895][0] = LargeX[895][1]>0 ? 1 : 0;
	satisfiable[895][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit895_0[i][0] ][ unit895_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit895_0[i][2] ][ unit895_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit895_0[i][4] ][ unit895_0[i][5] ] >0);
		X_contra = ( LargeX[895][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit895_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[895][1]=0; L[895][0]=1;}
			satisfiable[895][0]=satisfiable[895][0] & ((x[895] ^ 0) | (x[ unit895_0[i][0] ] ^ unit895_0[i][1]) |(x[ unit895_0[i][2] ] ^ unit895_0[i][3]));
			}
		if(X_contra>0) L[895][0]=2;
		}
	//Check all rules of unit[895][1]
	L[895][1] = LargeX[895][0]>0 ? 1 : 0;
	satisfiable[895][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit895_1[i][0] ][ unit895_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit895_1[i][2] ][ unit895_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit895_1[i][4] ][ unit895_1[i][5] ] >0);
		X_contra = ( LargeX[895][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit895_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[895][0]=0; L[895][1]=1;}
			satisfiable[895][1]=satisfiable[895][1] & ((x[895] ^ 1) | (x[ unit895_1[i][0] ] ^ unit895_1[i][1]) |(x[ unit895_1[i][2] ] ^ unit895_1[i][3]));
			}
		if(X_contra>0) L[895][1]=2;
		}
	//Check all rules of unit[896][0]
	L[896][0] = LargeX[896][1]>0 ? 1 : 0;
	satisfiable[896][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit896_0[i][0] ][ unit896_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit896_0[i][2] ][ unit896_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit896_0[i][4] ][ unit896_0[i][5] ] >0);
		X_contra = ( LargeX[896][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit896_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[896][1]=0; L[896][0]=1;}
			satisfiable[896][0]=satisfiable[896][0] & ((x[896] ^ 0) | (x[ unit896_0[i][0] ] ^ unit896_0[i][1]) |(x[ unit896_0[i][2] ] ^ unit896_0[i][3]));
			}
		if(X_contra>0) L[896][0]=2;
		}
	//Check all rules of unit[896][1]
	L[896][1] = LargeX[896][0]>0 ? 1 : 0;
	satisfiable[896][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit896_1[i][0] ][ unit896_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit896_1[i][2] ][ unit896_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit896_1[i][4] ][ unit896_1[i][5] ] >0);
		X_contra = ( LargeX[896][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit896_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[896][0]=0; L[896][1]=1;}
			satisfiable[896][1]=satisfiable[896][1] & ((x[896] ^ 1) | (x[ unit896_1[i][0] ] ^ unit896_1[i][1]) |(x[ unit896_1[i][2] ] ^ unit896_1[i][3]));
			}
		if(X_contra>0) L[896][1]=2;
		}
	//Check all rules of unit[897][0]
	L[897][0] = LargeX[897][1]>0 ? 1 : 0;
	satisfiable[897][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit897_0[i][0] ][ unit897_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit897_0[i][2] ][ unit897_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit897_0[i][4] ][ unit897_0[i][5] ] >0);
		X_contra = ( LargeX[897][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit897_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[897][1]=0; L[897][0]=1;}
			satisfiable[897][0]=satisfiable[897][0] & ((x[897] ^ 0) | (x[ unit897_0[i][0] ] ^ unit897_0[i][1]) |(x[ unit897_0[i][2] ] ^ unit897_0[i][3]));
			}
		if(X_contra>0) L[897][0]=2;
		}
	//Check all rules of unit[897][1]
	L[897][1] = LargeX[897][0]>0 ? 1 : 0;
	satisfiable[897][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit897_1[i][0] ][ unit897_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit897_1[i][2] ][ unit897_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit897_1[i][4] ][ unit897_1[i][5] ] >0);
		X_contra = ( LargeX[897][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit897_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[897][0]=0; L[897][1]=1;}
			satisfiable[897][1]=satisfiable[897][1] & ((x[897] ^ 1) | (x[ unit897_1[i][0] ] ^ unit897_1[i][1]) |(x[ unit897_1[i][2] ] ^ unit897_1[i][3]));
			}
		if(X_contra>0) L[897][1]=2;
		}
	//Check all rules of unit[898][0]
	L[898][0] = LargeX[898][1]>0 ? 1 : 0;
	satisfiable[898][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit898_0[i][0] ][ unit898_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit898_0[i][2] ][ unit898_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit898_0[i][4] ][ unit898_0[i][5] ] >0);
		X_contra = ( LargeX[898][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit898_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[898][1]=0; L[898][0]=1;}
			satisfiable[898][0]=satisfiable[898][0] & ((x[898] ^ 0) | (x[ unit898_0[i][0] ] ^ unit898_0[i][1]) |(x[ unit898_0[i][2] ] ^ unit898_0[i][3]));
			}
		if(X_contra>0) L[898][0]=2;
		}
	//Check all rules of unit[898][1]
	L[898][1] = LargeX[898][0]>0 ? 1 : 0;
	satisfiable[898][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit898_1[i][0] ][ unit898_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit898_1[i][2] ][ unit898_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit898_1[i][4] ][ unit898_1[i][5] ] >0);
		X_contra = ( LargeX[898][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit898_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[898][0]=0; L[898][1]=1;}
			satisfiable[898][1]=satisfiable[898][1] & ((x[898] ^ 1) | (x[ unit898_1[i][0] ] ^ unit898_1[i][1]) |(x[ unit898_1[i][2] ] ^ unit898_1[i][3]));
			}
		if(X_contra>0) L[898][1]=2;
		}
	//Check all rules of unit[899][0]
	L[899][0] = LargeX[899][1]>0 ? 1 : 0;
	satisfiable[899][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit899_0[i][0] ][ unit899_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit899_0[i][2] ][ unit899_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit899_0[i][4] ][ unit899_0[i][5] ] >0);
		X_contra = ( LargeX[899][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit899_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[899][1]=0; L[899][0]=1;}
			satisfiable[899][0]=satisfiable[899][0] & ((x[899] ^ 0) | (x[ unit899_0[i][0] ] ^ unit899_0[i][1]) |(x[ unit899_0[i][2] ] ^ unit899_0[i][3]));
			}
		if(X_contra>0) L[899][0]=2;
		}
	//Check all rules of unit[899][1]
	L[899][1] = LargeX[899][0]>0 ? 1 : 0;
	satisfiable[899][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit899_1[i][0] ][ unit899_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit899_1[i][2] ][ unit899_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit899_1[i][4] ][ unit899_1[i][5] ] >0);
		X_contra = ( LargeX[899][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit899_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[899][0]=0; L[899][1]=1;}
			satisfiable[899][1]=satisfiable[899][1] & ((x[899] ^ 1) | (x[ unit899_1[i][0] ] ^ unit899_1[i][1]) |(x[ unit899_1[i][2] ] ^ unit899_1[i][3]));
			}
		if(X_contra>0) L[899][1]=2;
		}
	//Check all rules of unit[900][0]
	L[900][0] = LargeX[900][1]>0 ? 1 : 0;
	satisfiable[900][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit900_0[i][0] ][ unit900_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit900_0[i][2] ][ unit900_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit900_0[i][4] ][ unit900_0[i][5] ] >0);
		X_contra = ( LargeX[900][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit900_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[900][1]=0; L[900][0]=1;}
			satisfiable[900][0]=satisfiable[900][0] & ((x[900] ^ 0) | (x[ unit900_0[i][0] ] ^ unit900_0[i][1]) |(x[ unit900_0[i][2] ] ^ unit900_0[i][3]));
			}
		if(X_contra>0) L[900][0]=2;
		}
	//Check all rules of unit[900][1]
	L[900][1] = LargeX[900][0]>0 ? 1 : 0;
	satisfiable[900][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit900_1[i][0] ][ unit900_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit900_1[i][2] ][ unit900_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit900_1[i][4] ][ unit900_1[i][5] ] >0);
		X_contra = ( LargeX[900][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit900_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[900][0]=0; L[900][1]=1;}
			satisfiable[900][1]=satisfiable[900][1] & ((x[900] ^ 1) | (x[ unit900_1[i][0] ] ^ unit900_1[i][1]) |(x[ unit900_1[i][2] ] ^ unit900_1[i][3]));
			}
		if(X_contra>0) L[900][1]=2;
		}
	//Check all rules of unit[901][0]
	L[901][0] = LargeX[901][1]>0 ? 1 : 0;
	satisfiable[901][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit901_0[i][0] ][ unit901_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit901_0[i][2] ][ unit901_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit901_0[i][4] ][ unit901_0[i][5] ] >0);
		X_contra = ( LargeX[901][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit901_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[901][1]=0; L[901][0]=1;}
			satisfiable[901][0]=satisfiable[901][0] & ((x[901] ^ 0) | (x[ unit901_0[i][0] ] ^ unit901_0[i][1]) |(x[ unit901_0[i][2] ] ^ unit901_0[i][3]));
			}
		if(X_contra>0) L[901][0]=2;
		}
	//Check all rules of unit[901][1]
	L[901][1] = LargeX[901][0]>0 ? 1 : 0;
	satisfiable[901][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit901_1[i][0] ][ unit901_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit901_1[i][2] ][ unit901_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit901_1[i][4] ][ unit901_1[i][5] ] >0);
		X_contra = ( LargeX[901][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit901_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[901][0]=0; L[901][1]=1;}
			satisfiable[901][1]=satisfiable[901][1] & ((x[901] ^ 1) | (x[ unit901_1[i][0] ] ^ unit901_1[i][1]) |(x[ unit901_1[i][2] ] ^ unit901_1[i][3]));
			}
		if(X_contra>0) L[901][1]=2;
		}
	//Check all rules of unit[902][0]
	L[902][0] = LargeX[902][1]>0 ? 1 : 0;
	satisfiable[902][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit902_0[i][0] ][ unit902_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit902_0[i][2] ][ unit902_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit902_0[i][4] ][ unit902_0[i][5] ] >0);
		X_contra = ( LargeX[902][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit902_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[902][1]=0; L[902][0]=1;}
			satisfiable[902][0]=satisfiable[902][0] & ((x[902] ^ 0) | (x[ unit902_0[i][0] ] ^ unit902_0[i][1]) |(x[ unit902_0[i][2] ] ^ unit902_0[i][3]));
			}
		if(X_contra>0) L[902][0]=2;
		}
	//Check all rules of unit[902][1]
	L[902][1] = LargeX[902][0]>0 ? 1 : 0;
	satisfiable[902][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit902_1[i][0] ][ unit902_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit902_1[i][2] ][ unit902_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit902_1[i][4] ][ unit902_1[i][5] ] >0);
		X_contra = ( LargeX[902][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit902_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[902][0]=0; L[902][1]=1;}
			satisfiable[902][1]=satisfiable[902][1] & ((x[902] ^ 1) | (x[ unit902_1[i][0] ] ^ unit902_1[i][1]) |(x[ unit902_1[i][2] ] ^ unit902_1[i][3]));
			}
		if(X_contra>0) L[902][1]=2;
		}
	//Check all rules of unit[903][0]
	L[903][0] = LargeX[903][1]>0 ? 1 : 0;
	satisfiable[903][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit903_0[i][0] ][ unit903_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit903_0[i][2] ][ unit903_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit903_0[i][4] ][ unit903_0[i][5] ] >0);
		X_contra = ( LargeX[903][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit903_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[903][1]=0; L[903][0]=1;}
			satisfiable[903][0]=satisfiable[903][0] & ((x[903] ^ 0) | (x[ unit903_0[i][0] ] ^ unit903_0[i][1]) |(x[ unit903_0[i][2] ] ^ unit903_0[i][3]));
			}
		if(X_contra>0) L[903][0]=2;
		}
	//Check all rules of unit[903][1]
	L[903][1] = LargeX[903][0]>0 ? 1 : 0;
	satisfiable[903][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit903_1[i][0] ][ unit903_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit903_1[i][2] ][ unit903_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit903_1[i][4] ][ unit903_1[i][5] ] >0);
		X_contra = ( LargeX[903][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit903_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[903][0]=0; L[903][1]=1;}
			satisfiable[903][1]=satisfiable[903][1] & ((x[903] ^ 1) | (x[ unit903_1[i][0] ] ^ unit903_1[i][1]) |(x[ unit903_1[i][2] ] ^ unit903_1[i][3]));
			}
		if(X_contra>0) L[903][1]=2;
		}
	//Check all rules of unit[904][0]
	L[904][0] = LargeX[904][1]>0 ? 1 : 0;
	satisfiable[904][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit904_0[i][0] ][ unit904_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit904_0[i][2] ][ unit904_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit904_0[i][4] ][ unit904_0[i][5] ] >0);
		X_contra = ( LargeX[904][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit904_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[904][1]=0; L[904][0]=1;}
			satisfiable[904][0]=satisfiable[904][0] & ((x[904] ^ 0) | (x[ unit904_0[i][0] ] ^ unit904_0[i][1]) |(x[ unit904_0[i][2] ] ^ unit904_0[i][3]));
			}
		if(X_contra>0) L[904][0]=2;
		}
	//Check all rules of unit[904][1]
	L[904][1] = LargeX[904][0]>0 ? 1 : 0;
	satisfiable[904][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit904_1[i][0] ][ unit904_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit904_1[i][2] ][ unit904_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit904_1[i][4] ][ unit904_1[i][5] ] >0);
		X_contra = ( LargeX[904][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit904_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[904][0]=0; L[904][1]=1;}
			satisfiable[904][1]=satisfiable[904][1] & ((x[904] ^ 1) | (x[ unit904_1[i][0] ] ^ unit904_1[i][1]) |(x[ unit904_1[i][2] ] ^ unit904_1[i][3]));
			}
		if(X_contra>0) L[904][1]=2;
		}
	//Check all rules of unit[905][0]
	L[905][0] = LargeX[905][1]>0 ? 1 : 0;
	satisfiable[905][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit905_0[i][0] ][ unit905_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit905_0[i][2] ][ unit905_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit905_0[i][4] ][ unit905_0[i][5] ] >0);
		X_contra = ( LargeX[905][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit905_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[905][1]=0; L[905][0]=1;}
			satisfiable[905][0]=satisfiable[905][0] & ((x[905] ^ 0) | (x[ unit905_0[i][0] ] ^ unit905_0[i][1]) |(x[ unit905_0[i][2] ] ^ unit905_0[i][3]));
			}
		if(X_contra>0) L[905][0]=2;
		}
	//Check all rules of unit[905][1]
	L[905][1] = LargeX[905][0]>0 ? 1 : 0;
	satisfiable[905][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit905_1[i][0] ][ unit905_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit905_1[i][2] ][ unit905_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit905_1[i][4] ][ unit905_1[i][5] ] >0);
		X_contra = ( LargeX[905][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit905_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[905][0]=0; L[905][1]=1;}
			satisfiable[905][1]=satisfiable[905][1] & ((x[905] ^ 1) | (x[ unit905_1[i][0] ] ^ unit905_1[i][1]) |(x[ unit905_1[i][2] ] ^ unit905_1[i][3]));
			}
		if(X_contra>0) L[905][1]=2;
		}
	//Check all rules of unit[906][0]
	L[906][0] = LargeX[906][1]>0 ? 1 : 0;
	satisfiable[906][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit906_0[i][0] ][ unit906_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit906_0[i][2] ][ unit906_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit906_0[i][4] ][ unit906_0[i][5] ] >0);
		X_contra = ( LargeX[906][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit906_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[906][1]=0; L[906][0]=1;}
			satisfiable[906][0]=satisfiable[906][0] & ((x[906] ^ 0) | (x[ unit906_0[i][0] ] ^ unit906_0[i][1]) |(x[ unit906_0[i][2] ] ^ unit906_0[i][3]));
			}
		if(X_contra>0) L[906][0]=2;
		}
	//Check all rules of unit[906][1]
	L[906][1] = LargeX[906][0]>0 ? 1 : 0;
	satisfiable[906][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit906_1[i][0] ][ unit906_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit906_1[i][2] ][ unit906_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit906_1[i][4] ][ unit906_1[i][5] ] >0);
		X_contra = ( LargeX[906][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit906_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[906][0]=0; L[906][1]=1;}
			satisfiable[906][1]=satisfiable[906][1] & ((x[906] ^ 1) | (x[ unit906_1[i][0] ] ^ unit906_1[i][1]) |(x[ unit906_1[i][2] ] ^ unit906_1[i][3]));
			}
		if(X_contra>0) L[906][1]=2;
		}
	//Check all rules of unit[907][0]
	L[907][0] = LargeX[907][1]>0 ? 1 : 0;
	satisfiable[907][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit907_0[i][0] ][ unit907_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit907_0[i][2] ][ unit907_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit907_0[i][4] ][ unit907_0[i][5] ] >0);
		X_contra = ( LargeX[907][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit907_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[907][1]=0; L[907][0]=1;}
			satisfiable[907][0]=satisfiable[907][0] & ((x[907] ^ 0) | (x[ unit907_0[i][0] ] ^ unit907_0[i][1]) |(x[ unit907_0[i][2] ] ^ unit907_0[i][3]));
			}
		if(X_contra>0) L[907][0]=2;
		}
	//Check all rules of unit[907][1]
	L[907][1] = LargeX[907][0]>0 ? 1 : 0;
	satisfiable[907][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit907_1[i][0] ][ unit907_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit907_1[i][2] ][ unit907_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit907_1[i][4] ][ unit907_1[i][5] ] >0);
		X_contra = ( LargeX[907][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit907_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[907][0]=0; L[907][1]=1;}
			satisfiable[907][1]=satisfiable[907][1] & ((x[907] ^ 1) | (x[ unit907_1[i][0] ] ^ unit907_1[i][1]) |(x[ unit907_1[i][2] ] ^ unit907_1[i][3]));
			}
		if(X_contra>0) L[907][1]=2;
		}
	//Check all rules of unit[908][0]
	L[908][0] = LargeX[908][1]>0 ? 1 : 0;
	satisfiable[908][0]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit908_0[i][0] ][ unit908_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit908_0[i][2] ][ unit908_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit908_0[i][4] ][ unit908_0[i][5] ] >0);
		X_contra = ( LargeX[908][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit908_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[908][1]=0; L[908][0]=1;}
			satisfiable[908][0]=satisfiable[908][0] & ((x[908] ^ 0) | (x[ unit908_0[i][0] ] ^ unit908_0[i][1]) |(x[ unit908_0[i][2] ] ^ unit908_0[i][3]));
			}
		if(X_contra>0) L[908][0]=2;
		}
	//Check all rules of unit[908][1]
	L[908][1] = LargeX[908][0]>0 ? 1 : 0;
	satisfiable[908][1]=1; 
	for(int i=0;i<5;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit908_1[i][0] ][ unit908_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit908_1[i][2] ][ unit908_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit908_1[i][4] ][ unit908_1[i][5] ] >0);
		X_contra = ( LargeX[908][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit908_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[908][0]=0; L[908][1]=1;}
			satisfiable[908][1]=satisfiable[908][1] & ((x[908] ^ 1) | (x[ unit908_1[i][0] ] ^ unit908_1[i][1]) |(x[ unit908_1[i][2] ] ^ unit908_1[i][3]));
			}
		if(X_contra>0) L[908][1]=2;
		}
	//Check all rules of unit[909][0]
	L[909][0] = LargeX[909][1]>0 ? 1 : 0;
	satisfiable[909][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit909_0[i][0] ][ unit909_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit909_0[i][2] ][ unit909_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit909_0[i][4] ][ unit909_0[i][5] ] >0);
		X_contra = ( LargeX[909][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit909_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[909][1]=0; L[909][0]=1;}
			satisfiable[909][0]=satisfiable[909][0] & ((x[909] ^ 0) | (x[ unit909_0[i][0] ] ^ unit909_0[i][1]) |(x[ unit909_0[i][2] ] ^ unit909_0[i][3]));
			}
		if(X_contra>0) L[909][0]=2;
		}
	//Check all rules of unit[909][1]
	L[909][1] = LargeX[909][0]>0 ? 1 : 0;
	satisfiable[909][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit909_1[i][0] ][ unit909_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit909_1[i][2] ][ unit909_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit909_1[i][4] ][ unit909_1[i][5] ] >0);
		X_contra = ( LargeX[909][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit909_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[909][0]=0; L[909][1]=1;}
			satisfiable[909][1]=satisfiable[909][1] & ((x[909] ^ 1) | (x[ unit909_1[i][0] ] ^ unit909_1[i][1]) |(x[ unit909_1[i][2] ] ^ unit909_1[i][3]));
			}
		if(X_contra>0) L[909][1]=2;
		}
	//Check all rules of unit[910][0]
	L[910][0] = LargeX[910][1]>0 ? 1 : 0;
	satisfiable[910][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit910_0[i][0] ][ unit910_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit910_0[i][2] ][ unit910_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit910_0[i][4] ][ unit910_0[i][5] ] >0);
		X_contra = ( LargeX[910][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit910_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[910][1]=0; L[910][0]=1;}
			satisfiable[910][0]=satisfiable[910][0] & ((x[910] ^ 0) | (x[ unit910_0[i][0] ] ^ unit910_0[i][1]) |(x[ unit910_0[i][2] ] ^ unit910_0[i][3]));
			}
		if(X_contra>0) L[910][0]=2;
		}
	//Check all rules of unit[910][1]
	L[910][1] = LargeX[910][0]>0 ? 1 : 0;
	satisfiable[910][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit910_1[i][0] ][ unit910_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit910_1[i][2] ][ unit910_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit910_1[i][4] ][ unit910_1[i][5] ] >0);
		X_contra = ( LargeX[910][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit910_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[910][0]=0; L[910][1]=1;}
			satisfiable[910][1]=satisfiable[910][1] & ((x[910] ^ 1) | (x[ unit910_1[i][0] ] ^ unit910_1[i][1]) |(x[ unit910_1[i][2] ] ^ unit910_1[i][3]));
			}
		if(X_contra>0) L[910][1]=2;
		}
	//Check all rules of unit[911][0]
	L[911][0] = LargeX[911][1]>0 ? 1 : 0;
	satisfiable[911][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit911_0[i][0] ][ unit911_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit911_0[i][2] ][ unit911_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit911_0[i][4] ][ unit911_0[i][5] ] >0);
		X_contra = ( LargeX[911][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit911_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[911][1]=0; L[911][0]=1;}
			satisfiable[911][0]=satisfiable[911][0] & ((x[911] ^ 0) | (x[ unit911_0[i][0] ] ^ unit911_0[i][1]) |(x[ unit911_0[i][2] ] ^ unit911_0[i][3]));
			}
		if(X_contra>0) L[911][0]=2;
		}
	//Check all rules of unit[911][1]
	L[911][1] = LargeX[911][0]>0 ? 1 : 0;
	satisfiable[911][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit911_1[i][0] ][ unit911_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit911_1[i][2] ][ unit911_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit911_1[i][4] ][ unit911_1[i][5] ] >0);
		X_contra = ( LargeX[911][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit911_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[911][0]=0; L[911][1]=1;}
			satisfiable[911][1]=satisfiable[911][1] & ((x[911] ^ 1) | (x[ unit911_1[i][0] ] ^ unit911_1[i][1]) |(x[ unit911_1[i][2] ] ^ unit911_1[i][3]));
			}
		if(X_contra>0) L[911][1]=2;
		}
	//Check all rules of unit[912][0]
	L[912][0] = LargeX[912][1]>0 ? 1 : 0;
	satisfiable[912][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit912_0[i][0] ][ unit912_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit912_0[i][2] ][ unit912_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit912_0[i][4] ][ unit912_0[i][5] ] >0);
		X_contra = ( LargeX[912][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit912_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[912][1]=0; L[912][0]=1;}
			satisfiable[912][0]=satisfiable[912][0] & ((x[912] ^ 0) | (x[ unit912_0[i][0] ] ^ unit912_0[i][1]) |(x[ unit912_0[i][2] ] ^ unit912_0[i][3]));
			}
		if(X_contra>0) L[912][0]=2;
		}
	//Check all rules of unit[912][1]
	L[912][1] = LargeX[912][0]>0 ? 1 : 0;
	satisfiable[912][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit912_1[i][0] ][ unit912_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit912_1[i][2] ][ unit912_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit912_1[i][4] ][ unit912_1[i][5] ] >0);
		X_contra = ( LargeX[912][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit912_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[912][0]=0; L[912][1]=1;}
			satisfiable[912][1]=satisfiable[912][1] & ((x[912] ^ 1) | (x[ unit912_1[i][0] ] ^ unit912_1[i][1]) |(x[ unit912_1[i][2] ] ^ unit912_1[i][3]));
			}
		if(X_contra>0) L[912][1]=2;
		}
	//Check all rules of unit[913][0]
	L[913][0] = LargeX[913][1]>0 ? 1 : 0;
	satisfiable[913][0]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit913_0[i][0] ][ unit913_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit913_0[i][2] ][ unit913_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit913_0[i][4] ][ unit913_0[i][5] ] >0);
		X_contra = ( LargeX[913][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit913_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[913][1]=0; L[913][0]=1;}
			satisfiable[913][0]=satisfiable[913][0] & ((x[913] ^ 0) | (x[ unit913_0[i][0] ] ^ unit913_0[i][1]) |(x[ unit913_0[i][2] ] ^ unit913_0[i][3]));
			}
		if(X_contra>0) L[913][0]=2;
		}
	//Check all rules of unit[913][1]
	L[913][1] = LargeX[913][0]>0 ? 1 : 0;
	satisfiable[913][1]=1; 
	for(int i=0;i<6;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit913_1[i][0] ][ unit913_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit913_1[i][2] ][ unit913_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit913_1[i][4] ][ unit913_1[i][5] ] >0);
		X_contra = ( LargeX[913][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit913_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[913][0]=0; L[913][1]=1;}
			satisfiable[913][1]=satisfiable[913][1] & ((x[913] ^ 1) | (x[ unit913_1[i][0] ] ^ unit913_1[i][1]) |(x[ unit913_1[i][2] ] ^ unit913_1[i][3]));
			}
		if(X_contra>0) L[913][1]=2;
		}
	//Check all rules of unit[914][0]
	L[914][0] = LargeX[914][1]>0 ? 1 : 0;
	satisfiable[914][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit914_0[i][0] ][ unit914_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit914_0[i][2] ][ unit914_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit914_0[i][4] ][ unit914_0[i][5] ] >0);
		X_contra = ( LargeX[914][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit914_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[914][1]=0; L[914][0]=1;}
			satisfiable[914][0]=satisfiable[914][0] & ((x[914] ^ 0) | (x[ unit914_0[i][0] ] ^ unit914_0[i][1]) |(x[ unit914_0[i][2] ] ^ unit914_0[i][3]));
			}
		if(X_contra>0) L[914][0]=2;
		}
	//Check all rules of unit[914][1]
	L[914][1] = LargeX[914][0]>0 ? 1 : 0;
	satisfiable[914][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit914_1[i][0] ][ unit914_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit914_1[i][2] ][ unit914_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit914_1[i][4] ][ unit914_1[i][5] ] >0);
		X_contra = ( LargeX[914][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit914_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[914][0]=0; L[914][1]=1;}
			satisfiable[914][1]=satisfiable[914][1] & ((x[914] ^ 1) | (x[ unit914_1[i][0] ] ^ unit914_1[i][1]) |(x[ unit914_1[i][2] ] ^ unit914_1[i][3]));
			}
		if(X_contra>0) L[914][1]=2;
		}
	//Check all rules of unit[915][0]
	L[915][0] = LargeX[915][1]>0 ? 1 : 0;
	satisfiable[915][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit915_0[i][0] ][ unit915_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit915_0[i][2] ][ unit915_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit915_0[i][4] ][ unit915_0[i][5] ] >0);
		X_contra = ( LargeX[915][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit915_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[915][1]=0; L[915][0]=1;}
			satisfiable[915][0]=satisfiable[915][0] & ((x[915] ^ 0) | (x[ unit915_0[i][0] ] ^ unit915_0[i][1]) |(x[ unit915_0[i][2] ] ^ unit915_0[i][3]));
			}
		if(X_contra>0) L[915][0]=2;
		}
	//Check all rules of unit[915][1]
	L[915][1] = LargeX[915][0]>0 ? 1 : 0;
	satisfiable[915][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit915_1[i][0] ][ unit915_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit915_1[i][2] ][ unit915_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit915_1[i][4] ][ unit915_1[i][5] ] >0);
		X_contra = ( LargeX[915][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit915_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[915][0]=0; L[915][1]=1;}
			satisfiable[915][1]=satisfiable[915][1] & ((x[915] ^ 1) | (x[ unit915_1[i][0] ] ^ unit915_1[i][1]) |(x[ unit915_1[i][2] ] ^ unit915_1[i][3]));
			}
		if(X_contra>0) L[915][1]=2;
		}
	//Check all rules of unit[916][0]
	L[916][0] = LargeX[916][1]>0 ? 1 : 0;
	satisfiable[916][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit916_0[i][0] ][ unit916_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit916_0[i][2] ][ unit916_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit916_0[i][4] ][ unit916_0[i][5] ] >0);
		X_contra = ( LargeX[916][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit916_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[916][1]=0; L[916][0]=1;}
			satisfiable[916][0]=satisfiable[916][0] & ((x[916] ^ 0) | (x[ unit916_0[i][0] ] ^ unit916_0[i][1]) |(x[ unit916_0[i][2] ] ^ unit916_0[i][3]));
			}
		if(X_contra>0) L[916][0]=2;
		}
	//Check all rules of unit[916][1]
	L[916][1] = LargeX[916][0]>0 ? 1 : 0;
	satisfiable[916][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit916_1[i][0] ][ unit916_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit916_1[i][2] ][ unit916_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit916_1[i][4] ][ unit916_1[i][5] ] >0);
		X_contra = ( LargeX[916][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit916_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[916][0]=0; L[916][1]=1;}
			satisfiable[916][1]=satisfiable[916][1] & ((x[916] ^ 1) | (x[ unit916_1[i][0] ] ^ unit916_1[i][1]) |(x[ unit916_1[i][2] ] ^ unit916_1[i][3]));
			}
		if(X_contra>0) L[916][1]=2;
		}
	//Check all rules of unit[917][0]
	L[917][0] = LargeX[917][1]>0 ? 1 : 0;
	satisfiable[917][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit917_0[i][0] ][ unit917_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit917_0[i][2] ][ unit917_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit917_0[i][4] ][ unit917_0[i][5] ] >0);
		X_contra = ( LargeX[917][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit917_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[917][1]=0; L[917][0]=1;}
			satisfiable[917][0]=satisfiable[917][0] & ((x[917] ^ 0) | (x[ unit917_0[i][0] ] ^ unit917_0[i][1]) |(x[ unit917_0[i][2] ] ^ unit917_0[i][3]));
			}
		if(X_contra>0) L[917][0]=2;
		}
	//Check all rules of unit[917][1]
	L[917][1] = LargeX[917][0]>0 ? 1 : 0;
	satisfiable[917][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit917_1[i][0] ][ unit917_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit917_1[i][2] ][ unit917_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit917_1[i][4] ][ unit917_1[i][5] ] >0);
		X_contra = ( LargeX[917][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit917_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[917][0]=0; L[917][1]=1;}
			satisfiable[917][1]=satisfiable[917][1] & ((x[917] ^ 1) | (x[ unit917_1[i][0] ] ^ unit917_1[i][1]) |(x[ unit917_1[i][2] ] ^ unit917_1[i][3]));
			}
		if(X_contra>0) L[917][1]=2;
		}
	//Check all rules of unit[918][0]
	L[918][0] = LargeX[918][1]>0 ? 1 : 0;
	satisfiable[918][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit918_0[i][0] ][ unit918_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit918_0[i][2] ][ unit918_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit918_0[i][4] ][ unit918_0[i][5] ] >0);
		X_contra = ( LargeX[918][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit918_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[918][1]=0; L[918][0]=1;}
			satisfiable[918][0]=satisfiable[918][0] & ((x[918] ^ 0) | (x[ unit918_0[i][0] ] ^ unit918_0[i][1]) |(x[ unit918_0[i][2] ] ^ unit918_0[i][3]));
			}
		if(X_contra>0) L[918][0]=2;
		}
	//Check all rules of unit[918][1]
	L[918][1] = LargeX[918][0]>0 ? 1 : 0;
	satisfiable[918][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit918_1[i][0] ][ unit918_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit918_1[i][2] ][ unit918_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit918_1[i][4] ][ unit918_1[i][5] ] >0);
		X_contra = ( LargeX[918][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit918_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[918][0]=0; L[918][1]=1;}
			satisfiable[918][1]=satisfiable[918][1] & ((x[918] ^ 1) | (x[ unit918_1[i][0] ] ^ unit918_1[i][1]) |(x[ unit918_1[i][2] ] ^ unit918_1[i][3]));
			}
		if(X_contra>0) L[918][1]=2;
		}
	//Check all rules of unit[919][0]
	L[919][0] = LargeX[919][1]>0 ? 1 : 0;
	satisfiable[919][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit919_0[i][0] ][ unit919_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit919_0[i][2] ][ unit919_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit919_0[i][4] ][ unit919_0[i][5] ] >0);
		X_contra = ( LargeX[919][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit919_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[919][1]=0; L[919][0]=1;}
			satisfiable[919][0]=satisfiable[919][0] & ((x[919] ^ 0) | (x[ unit919_0[i][0] ] ^ unit919_0[i][1]) |(x[ unit919_0[i][2] ] ^ unit919_0[i][3]));
			}
		if(X_contra>0) L[919][0]=2;
		}
	//Check all rules of unit[919][1]
	L[919][1] = LargeX[919][0]>0 ? 1 : 0;
	satisfiable[919][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit919_1[i][0] ][ unit919_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit919_1[i][2] ][ unit919_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit919_1[i][4] ][ unit919_1[i][5] ] >0);
		X_contra = ( LargeX[919][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit919_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[919][0]=0; L[919][1]=1;}
			satisfiable[919][1]=satisfiable[919][1] & ((x[919] ^ 1) | (x[ unit919_1[i][0] ] ^ unit919_1[i][1]) |(x[ unit919_1[i][2] ] ^ unit919_1[i][3]));
			}
		if(X_contra>0) L[919][1]=2;
		}
	//Check all rules of unit[920][0]
	L[920][0] = LargeX[920][1]>0 ? 1 : 0;
	satisfiable[920][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit920_0[i][0] ][ unit920_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit920_0[i][2] ][ unit920_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit920_0[i][4] ][ unit920_0[i][5] ] >0);
		X_contra = ( LargeX[920][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit920_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[920][1]=0; L[920][0]=1;}
			satisfiable[920][0]=satisfiable[920][0] & ((x[920] ^ 0) | (x[ unit920_0[i][0] ] ^ unit920_0[i][1]) |(x[ unit920_0[i][2] ] ^ unit920_0[i][3]));
			}
		if(X_contra>0) L[920][0]=2;
		}
	//Check all rules of unit[920][1]
	L[920][1] = LargeX[920][0]>0 ? 1 : 0;
	satisfiable[920][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit920_1[i][0] ][ unit920_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit920_1[i][2] ][ unit920_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit920_1[i][4] ][ unit920_1[i][5] ] >0);
		X_contra = ( LargeX[920][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit920_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[920][0]=0; L[920][1]=1;}
			satisfiable[920][1]=satisfiable[920][1] & ((x[920] ^ 1) | (x[ unit920_1[i][0] ] ^ unit920_1[i][1]) |(x[ unit920_1[i][2] ] ^ unit920_1[i][3]));
			}
		if(X_contra>0) L[920][1]=2;
		}
	//Check all rules of unit[921][0]
	L[921][0] = LargeX[921][1]>0 ? 1 : 0;
	satisfiable[921][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit921_0[i][0] ][ unit921_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit921_0[i][2] ][ unit921_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit921_0[i][4] ][ unit921_0[i][5] ] >0);
		X_contra = ( LargeX[921][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit921_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[921][1]=0; L[921][0]=1;}
			satisfiable[921][0]=satisfiable[921][0] & ((x[921] ^ 0) | (x[ unit921_0[i][0] ] ^ unit921_0[i][1]) |(x[ unit921_0[i][2] ] ^ unit921_0[i][3]));
			}
		if(X_contra>0) L[921][0]=2;
		}
	//Check all rules of unit[921][1]
	L[921][1] = LargeX[921][0]>0 ? 1 : 0;
	satisfiable[921][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit921_1[i][0] ][ unit921_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit921_1[i][2] ][ unit921_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit921_1[i][4] ][ unit921_1[i][5] ] >0);
		X_contra = ( LargeX[921][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit921_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[921][0]=0; L[921][1]=1;}
			satisfiable[921][1]=satisfiable[921][1] & ((x[921] ^ 1) | (x[ unit921_1[i][0] ] ^ unit921_1[i][1]) |(x[ unit921_1[i][2] ] ^ unit921_1[i][3]));
			}
		if(X_contra>0) L[921][1]=2;
		}
	//Check all rules of unit[922][0]
	L[922][0] = LargeX[922][1]>0 ? 1 : 0;
	satisfiable[922][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit922_0[i][0] ][ unit922_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit922_0[i][2] ][ unit922_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit922_0[i][4] ][ unit922_0[i][5] ] >0);
		X_contra = ( LargeX[922][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit922_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[922][1]=0; L[922][0]=1;}
			satisfiable[922][0]=satisfiable[922][0] & ((x[922] ^ 0) | (x[ unit922_0[i][0] ] ^ unit922_0[i][1]) |(x[ unit922_0[i][2] ] ^ unit922_0[i][3]));
			}
		if(X_contra>0) L[922][0]=2;
		}
	//Check all rules of unit[922][1]
	L[922][1] = LargeX[922][0]>0 ? 1 : 0;
	satisfiable[922][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit922_1[i][0] ][ unit922_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit922_1[i][2] ][ unit922_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit922_1[i][4] ][ unit922_1[i][5] ] >0);
		X_contra = ( LargeX[922][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit922_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[922][0]=0; L[922][1]=1;}
			satisfiable[922][1]=satisfiable[922][1] & ((x[922] ^ 1) | (x[ unit922_1[i][0] ] ^ unit922_1[i][1]) |(x[ unit922_1[i][2] ] ^ unit922_1[i][3]));
			}
		if(X_contra>0) L[922][1]=2;
		}
	//Check all rules of unit[923][0]
	L[923][0] = LargeX[923][1]>0 ? 1 : 0;
	satisfiable[923][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit923_0[i][0] ][ unit923_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit923_0[i][2] ][ unit923_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit923_0[i][4] ][ unit923_0[i][5] ] >0);
		X_contra = ( LargeX[923][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit923_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[923][1]=0; L[923][0]=1;}
			satisfiable[923][0]=satisfiable[923][0] & ((x[923] ^ 0) | (x[ unit923_0[i][0] ] ^ unit923_0[i][1]) |(x[ unit923_0[i][2] ] ^ unit923_0[i][3]));
			}
		if(X_contra>0) L[923][0]=2;
		}
	//Check all rules of unit[923][1]
	L[923][1] = LargeX[923][0]>0 ? 1 : 0;
	satisfiable[923][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit923_1[i][0] ][ unit923_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit923_1[i][2] ][ unit923_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit923_1[i][4] ][ unit923_1[i][5] ] >0);
		X_contra = ( LargeX[923][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit923_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[923][0]=0; L[923][1]=1;}
			satisfiable[923][1]=satisfiable[923][1] & ((x[923] ^ 1) | (x[ unit923_1[i][0] ] ^ unit923_1[i][1]) |(x[ unit923_1[i][2] ] ^ unit923_1[i][3]));
			}
		if(X_contra>0) L[923][1]=2;
		}
	//Check all rules of unit[924][0]
	L[924][0] = LargeX[924][1]>0 ? 1 : 0;
	satisfiable[924][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit924_0[i][0] ][ unit924_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit924_0[i][2] ][ unit924_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit924_0[i][4] ][ unit924_0[i][5] ] >0);
		X_contra = ( LargeX[924][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit924_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[924][1]=0; L[924][0]=1;}
			satisfiable[924][0]=satisfiable[924][0] & ((x[924] ^ 0) | (x[ unit924_0[i][0] ] ^ unit924_0[i][1]) |(x[ unit924_0[i][2] ] ^ unit924_0[i][3]));
			}
		if(X_contra>0) L[924][0]=2;
		}
	//Check all rules of unit[924][1]
	L[924][1] = LargeX[924][0]>0 ? 1 : 0;
	satisfiable[924][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit924_1[i][0] ][ unit924_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit924_1[i][2] ][ unit924_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit924_1[i][4] ][ unit924_1[i][5] ] >0);
		X_contra = ( LargeX[924][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit924_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[924][0]=0; L[924][1]=1;}
			satisfiable[924][1]=satisfiable[924][1] & ((x[924] ^ 1) | (x[ unit924_1[i][0] ] ^ unit924_1[i][1]) |(x[ unit924_1[i][2] ] ^ unit924_1[i][3]));
			}
		if(X_contra>0) L[924][1]=2;
		}
	//Check all rules of unit[925][0]
	L[925][0] = LargeX[925][1]>0 ? 1 : 0;
	satisfiable[925][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit925_0[i][0] ][ unit925_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit925_0[i][2] ][ unit925_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit925_0[i][4] ][ unit925_0[i][5] ] >0);
		X_contra = ( LargeX[925][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit925_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[925][1]=0; L[925][0]=1;}
			satisfiable[925][0]=satisfiable[925][0] & ((x[925] ^ 0) | (x[ unit925_0[i][0] ] ^ unit925_0[i][1]) |(x[ unit925_0[i][2] ] ^ unit925_0[i][3]));
			}
		if(X_contra>0) L[925][0]=2;
		}
	//Check all rules of unit[925][1]
	L[925][1] = LargeX[925][0]>0 ? 1 : 0;
	satisfiable[925][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit925_1[i][0] ][ unit925_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit925_1[i][2] ][ unit925_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit925_1[i][4] ][ unit925_1[i][5] ] >0);
		X_contra = ( LargeX[925][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit925_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[925][0]=0; L[925][1]=1;}
			satisfiable[925][1]=satisfiable[925][1] & ((x[925] ^ 1) | (x[ unit925_1[i][0] ] ^ unit925_1[i][1]) |(x[ unit925_1[i][2] ] ^ unit925_1[i][3]));
			}
		if(X_contra>0) L[925][1]=2;
		}
	//Check all rules of unit[926][0]
	L[926][0] = LargeX[926][1]>0 ? 1 : 0;
	satisfiable[926][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit926_0[i][0] ][ unit926_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit926_0[i][2] ][ unit926_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit926_0[i][4] ][ unit926_0[i][5] ] >0);
		X_contra = ( LargeX[926][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit926_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[926][1]=0; L[926][0]=1;}
			satisfiable[926][0]=satisfiable[926][0] & ((x[926] ^ 0) | (x[ unit926_0[i][0] ] ^ unit926_0[i][1]) |(x[ unit926_0[i][2] ] ^ unit926_0[i][3]));
			}
		if(X_contra>0) L[926][0]=2;
		}
	//Check all rules of unit[926][1]
	L[926][1] = LargeX[926][0]>0 ? 1 : 0;
	satisfiable[926][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit926_1[i][0] ][ unit926_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit926_1[i][2] ][ unit926_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit926_1[i][4] ][ unit926_1[i][5] ] >0);
		X_contra = ( LargeX[926][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit926_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[926][0]=0; L[926][1]=1;}
			satisfiable[926][1]=satisfiable[926][1] & ((x[926] ^ 1) | (x[ unit926_1[i][0] ] ^ unit926_1[i][1]) |(x[ unit926_1[i][2] ] ^ unit926_1[i][3]));
			}
		if(X_contra>0) L[926][1]=2;
		}
	//Check all rules of unit[927][0]
	L[927][0] = LargeX[927][1]>0 ? 1 : 0;
	satisfiable[927][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit927_0[i][0] ][ unit927_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit927_0[i][2] ][ unit927_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit927_0[i][4] ][ unit927_0[i][5] ] >0);
		X_contra = ( LargeX[927][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit927_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[927][1]=0; L[927][0]=1;}
			satisfiable[927][0]=satisfiable[927][0] & ((x[927] ^ 0) | (x[ unit927_0[i][0] ] ^ unit927_0[i][1]) |(x[ unit927_0[i][2] ] ^ unit927_0[i][3]));
			}
		if(X_contra>0) L[927][0]=2;
		}
	//Check all rules of unit[927][1]
	L[927][1] = LargeX[927][0]>0 ? 1 : 0;
	satisfiable[927][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit927_1[i][0] ][ unit927_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit927_1[i][2] ][ unit927_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit927_1[i][4] ][ unit927_1[i][5] ] >0);
		X_contra = ( LargeX[927][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit927_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[927][0]=0; L[927][1]=1;}
			satisfiable[927][1]=satisfiable[927][1] & ((x[927] ^ 1) | (x[ unit927_1[i][0] ] ^ unit927_1[i][1]) |(x[ unit927_1[i][2] ] ^ unit927_1[i][3]));
			}
		if(X_contra>0) L[927][1]=2;
		}
	//Check all rules of unit[928][0]
	L[928][0] = LargeX[928][1]>0 ? 1 : 0;
	satisfiable[928][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit928_0[i][0] ][ unit928_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit928_0[i][2] ][ unit928_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit928_0[i][4] ][ unit928_0[i][5] ] >0);
		X_contra = ( LargeX[928][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit928_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[928][1]=0; L[928][0]=1;}
			satisfiable[928][0]=satisfiable[928][0] & ((x[928] ^ 0) | (x[ unit928_0[i][0] ] ^ unit928_0[i][1]) |(x[ unit928_0[i][2] ] ^ unit928_0[i][3]));
			}
		if(X_contra>0) L[928][0]=2;
		}
	//Check all rules of unit[928][1]
	L[928][1] = LargeX[928][0]>0 ? 1 : 0;
	satisfiable[928][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit928_1[i][0] ][ unit928_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit928_1[i][2] ][ unit928_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit928_1[i][4] ][ unit928_1[i][5] ] >0);
		X_contra = ( LargeX[928][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit928_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[928][0]=0; L[928][1]=1;}
			satisfiable[928][1]=satisfiable[928][1] & ((x[928] ^ 1) | (x[ unit928_1[i][0] ] ^ unit928_1[i][1]) |(x[ unit928_1[i][2] ] ^ unit928_1[i][3]));
			}
		if(X_contra>0) L[928][1]=2;
		}
	//Check all rules of unit[929][0]
	L[929][0] = LargeX[929][1]>0 ? 1 : 0;
	satisfiable[929][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit929_0[i][0] ][ unit929_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit929_0[i][2] ][ unit929_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit929_0[i][4] ][ unit929_0[i][5] ] >0);
		X_contra = ( LargeX[929][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit929_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[929][1]=0; L[929][0]=1;}
			satisfiable[929][0]=satisfiable[929][0] & ((x[929] ^ 0) | (x[ unit929_0[i][0] ] ^ unit929_0[i][1]) |(x[ unit929_0[i][2] ] ^ unit929_0[i][3]));
			}
		if(X_contra>0) L[929][0]=2;
		}
	//Check all rules of unit[929][1]
	L[929][1] = LargeX[929][0]>0 ? 1 : 0;
	satisfiable[929][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit929_1[i][0] ][ unit929_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit929_1[i][2] ][ unit929_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit929_1[i][4] ][ unit929_1[i][5] ] >0);
		X_contra = ( LargeX[929][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit929_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[929][0]=0; L[929][1]=1;}
			satisfiable[929][1]=satisfiable[929][1] & ((x[929] ^ 1) | (x[ unit929_1[i][0] ] ^ unit929_1[i][1]) |(x[ unit929_1[i][2] ] ^ unit929_1[i][3]));
			}
		if(X_contra>0) L[929][1]=2;
		}
	//Check all rules of unit[930][0]
	L[930][0] = LargeX[930][1]>0 ? 1 : 0;
	satisfiable[930][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit930_0[i][0] ][ unit930_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit930_0[i][2] ][ unit930_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit930_0[i][4] ][ unit930_0[i][5] ] >0);
		X_contra = ( LargeX[930][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit930_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[930][1]=0; L[930][0]=1;}
			satisfiable[930][0]=satisfiable[930][0] & ((x[930] ^ 0) | (x[ unit930_0[i][0] ] ^ unit930_0[i][1]) |(x[ unit930_0[i][2] ] ^ unit930_0[i][3]));
			}
		if(X_contra>0) L[930][0]=2;
		}
	//Check all rules of unit[930][1]
	L[930][1] = LargeX[930][0]>0 ? 1 : 0;
	satisfiable[930][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit930_1[i][0] ][ unit930_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit930_1[i][2] ][ unit930_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit930_1[i][4] ][ unit930_1[i][5] ] >0);
		X_contra = ( LargeX[930][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit930_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[930][0]=0; L[930][1]=1;}
			satisfiable[930][1]=satisfiable[930][1] & ((x[930] ^ 1) | (x[ unit930_1[i][0] ] ^ unit930_1[i][1]) |(x[ unit930_1[i][2] ] ^ unit930_1[i][3]));
			}
		if(X_contra>0) L[930][1]=2;
		}
	//Check all rules of unit[931][0]
	L[931][0] = LargeX[931][1]>0 ? 1 : 0;
	satisfiable[931][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit931_0[i][0] ][ unit931_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit931_0[i][2] ][ unit931_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit931_0[i][4] ][ unit931_0[i][5] ] >0);
		X_contra = ( LargeX[931][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit931_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[931][1]=0; L[931][0]=1;}
			satisfiable[931][0]=satisfiable[931][0] & ((x[931] ^ 0) | (x[ unit931_0[i][0] ] ^ unit931_0[i][1]) |(x[ unit931_0[i][2] ] ^ unit931_0[i][3]));
			}
		if(X_contra>0) L[931][0]=2;
		}
	//Check all rules of unit[931][1]
	L[931][1] = LargeX[931][0]>0 ? 1 : 0;
	satisfiable[931][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit931_1[i][0] ][ unit931_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit931_1[i][2] ][ unit931_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit931_1[i][4] ][ unit931_1[i][5] ] >0);
		X_contra = ( LargeX[931][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit931_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[931][0]=0; L[931][1]=1;}
			satisfiable[931][1]=satisfiable[931][1] & ((x[931] ^ 1) | (x[ unit931_1[i][0] ] ^ unit931_1[i][1]) |(x[ unit931_1[i][2] ] ^ unit931_1[i][3]));
			}
		if(X_contra>0) L[931][1]=2;
		}
	//Check all rules of unit[932][0]
	L[932][0] = LargeX[932][1]>0 ? 1 : 0;
	satisfiable[932][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit932_0[i][0] ][ unit932_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit932_0[i][2] ][ unit932_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit932_0[i][4] ][ unit932_0[i][5] ] >0);
		X_contra = ( LargeX[932][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit932_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[932][1]=0; L[932][0]=1;}
			satisfiable[932][0]=satisfiable[932][0] & ((x[932] ^ 0) | (x[ unit932_0[i][0] ] ^ unit932_0[i][1]) |(x[ unit932_0[i][2] ] ^ unit932_0[i][3]));
			}
		if(X_contra>0) L[932][0]=2;
		}
	//Check all rules of unit[932][1]
	L[932][1] = LargeX[932][0]>0 ? 1 : 0;
	satisfiable[932][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit932_1[i][0] ][ unit932_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit932_1[i][2] ][ unit932_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit932_1[i][4] ][ unit932_1[i][5] ] >0);
		X_contra = ( LargeX[932][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit932_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[932][0]=0; L[932][1]=1;}
			satisfiable[932][1]=satisfiable[932][1] & ((x[932] ^ 1) | (x[ unit932_1[i][0] ] ^ unit932_1[i][1]) |(x[ unit932_1[i][2] ] ^ unit932_1[i][3]));
			}
		if(X_contra>0) L[932][1]=2;
		}
	//Check all rules of unit[933][0]
	L[933][0] = LargeX[933][1]>0 ? 1 : 0;
	satisfiable[933][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit933_0[i][0] ][ unit933_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit933_0[i][2] ][ unit933_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit933_0[i][4] ][ unit933_0[i][5] ] >0);
		X_contra = ( LargeX[933][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit933_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[933][1]=0; L[933][0]=1;}
			satisfiable[933][0]=satisfiable[933][0] & ((x[933] ^ 0) | (x[ unit933_0[i][0] ] ^ unit933_0[i][1]) |(x[ unit933_0[i][2] ] ^ unit933_0[i][3]));
			}
		if(X_contra>0) L[933][0]=2;
		}
	//Check all rules of unit[933][1]
	L[933][1] = LargeX[933][0]>0 ? 1 : 0;
	satisfiable[933][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit933_1[i][0] ][ unit933_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit933_1[i][2] ][ unit933_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit933_1[i][4] ][ unit933_1[i][5] ] >0);
		X_contra = ( LargeX[933][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit933_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[933][0]=0; L[933][1]=1;}
			satisfiable[933][1]=satisfiable[933][1] & ((x[933] ^ 1) | (x[ unit933_1[i][0] ] ^ unit933_1[i][1]) |(x[ unit933_1[i][2] ] ^ unit933_1[i][3]));
			}
		if(X_contra>0) L[933][1]=2;
		}
	//Check all rules of unit[934][0]
	L[934][0] = LargeX[934][1]>0 ? 1 : 0;
	satisfiable[934][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit934_0[i][0] ][ unit934_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit934_0[i][2] ][ unit934_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit934_0[i][4] ][ unit934_0[i][5] ] >0);
		X_contra = ( LargeX[934][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit934_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[934][1]=0; L[934][0]=1;}
			satisfiable[934][0]=satisfiable[934][0] & ((x[934] ^ 0) | (x[ unit934_0[i][0] ] ^ unit934_0[i][1]) |(x[ unit934_0[i][2] ] ^ unit934_0[i][3]));
			}
		if(X_contra>0) L[934][0]=2;
		}
	//Check all rules of unit[934][1]
	L[934][1] = LargeX[934][0]>0 ? 1 : 0;
	satisfiable[934][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit934_1[i][0] ][ unit934_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit934_1[i][2] ][ unit934_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit934_1[i][4] ][ unit934_1[i][5] ] >0);
		X_contra = ( LargeX[934][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit934_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[934][0]=0; L[934][1]=1;}
			satisfiable[934][1]=satisfiable[934][1] & ((x[934] ^ 1) | (x[ unit934_1[i][0] ] ^ unit934_1[i][1]) |(x[ unit934_1[i][2] ] ^ unit934_1[i][3]));
			}
		if(X_contra>0) L[934][1]=2;
		}
	//Check all rules of unit[935][0]
	L[935][0] = LargeX[935][1]>0 ? 1 : 0;
	satisfiable[935][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit935_0[i][0] ][ unit935_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit935_0[i][2] ][ unit935_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit935_0[i][4] ][ unit935_0[i][5] ] >0);
		X_contra = ( LargeX[935][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit935_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[935][1]=0; L[935][0]=1;}
			satisfiable[935][0]=satisfiable[935][0] & ((x[935] ^ 0) | (x[ unit935_0[i][0] ] ^ unit935_0[i][1]) |(x[ unit935_0[i][2] ] ^ unit935_0[i][3]));
			}
		if(X_contra>0) L[935][0]=2;
		}
	//Check all rules of unit[935][1]
	L[935][1] = LargeX[935][0]>0 ? 1 : 0;
	satisfiable[935][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit935_1[i][0] ][ unit935_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit935_1[i][2] ][ unit935_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit935_1[i][4] ][ unit935_1[i][5] ] >0);
		X_contra = ( LargeX[935][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit935_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[935][0]=0; L[935][1]=1;}
			satisfiable[935][1]=satisfiable[935][1] & ((x[935] ^ 1) | (x[ unit935_1[i][0] ] ^ unit935_1[i][1]) |(x[ unit935_1[i][2] ] ^ unit935_1[i][3]));
			}
		if(X_contra>0) L[935][1]=2;
		}
	//Check all rules of unit[936][0]
	L[936][0] = LargeX[936][1]>0 ? 1 : 0;
	satisfiable[936][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit936_0[i][0] ][ unit936_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit936_0[i][2] ][ unit936_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit936_0[i][4] ][ unit936_0[i][5] ] >0);
		X_contra = ( LargeX[936][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit936_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[936][1]=0; L[936][0]=1;}
			satisfiable[936][0]=satisfiable[936][0] & ((x[936] ^ 0) | (x[ unit936_0[i][0] ] ^ unit936_0[i][1]) |(x[ unit936_0[i][2] ] ^ unit936_0[i][3]));
			}
		if(X_contra>0) L[936][0]=2;
		}
	//Check all rules of unit[936][1]
	L[936][1] = LargeX[936][0]>0 ? 1 : 0;
	satisfiable[936][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit936_1[i][0] ][ unit936_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit936_1[i][2] ][ unit936_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit936_1[i][4] ][ unit936_1[i][5] ] >0);
		X_contra = ( LargeX[936][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit936_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[936][0]=0; L[936][1]=1;}
			satisfiable[936][1]=satisfiable[936][1] & ((x[936] ^ 1) | (x[ unit936_1[i][0] ] ^ unit936_1[i][1]) |(x[ unit936_1[i][2] ] ^ unit936_1[i][3]));
			}
		if(X_contra>0) L[936][1]=2;
		}
	//Check all rules of unit[937][0]
	L[937][0] = LargeX[937][1]>0 ? 1 : 0;
	satisfiable[937][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit937_0[i][0] ][ unit937_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit937_0[i][2] ][ unit937_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit937_0[i][4] ][ unit937_0[i][5] ] >0);
		X_contra = ( LargeX[937][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit937_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[937][1]=0; L[937][0]=1;}
			satisfiable[937][0]=satisfiable[937][0] & ((x[937] ^ 0) | (x[ unit937_0[i][0] ] ^ unit937_0[i][1]) |(x[ unit937_0[i][2] ] ^ unit937_0[i][3]));
			}
		if(X_contra>0) L[937][0]=2;
		}
	//Check all rules of unit[937][1]
	L[937][1] = LargeX[937][0]>0 ? 1 : 0;
	satisfiable[937][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit937_1[i][0] ][ unit937_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit937_1[i][2] ][ unit937_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit937_1[i][4] ][ unit937_1[i][5] ] >0);
		X_contra = ( LargeX[937][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit937_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[937][0]=0; L[937][1]=1;}
			satisfiable[937][1]=satisfiable[937][1] & ((x[937] ^ 1) | (x[ unit937_1[i][0] ] ^ unit937_1[i][1]) |(x[ unit937_1[i][2] ] ^ unit937_1[i][3]));
			}
		if(X_contra>0) L[937][1]=2;
		}
	//Check all rules of unit[938][0]
	L[938][0] = LargeX[938][1]>0 ? 1 : 0;
	satisfiable[938][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit938_0[i][0] ][ unit938_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit938_0[i][2] ][ unit938_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit938_0[i][4] ][ unit938_0[i][5] ] >0);
		X_contra = ( LargeX[938][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit938_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[938][1]=0; L[938][0]=1;}
			satisfiable[938][0]=satisfiable[938][0] & ((x[938] ^ 0) | (x[ unit938_0[i][0] ] ^ unit938_0[i][1]) |(x[ unit938_0[i][2] ] ^ unit938_0[i][3]));
			}
		if(X_contra>0) L[938][0]=2;
		}
	//Check all rules of unit[938][1]
	L[938][1] = LargeX[938][0]>0 ? 1 : 0;
	satisfiable[938][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit938_1[i][0] ][ unit938_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit938_1[i][2] ][ unit938_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit938_1[i][4] ][ unit938_1[i][5] ] >0);
		X_contra = ( LargeX[938][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit938_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[938][0]=0; L[938][1]=1;}
			satisfiable[938][1]=satisfiable[938][1] & ((x[938] ^ 1) | (x[ unit938_1[i][0] ] ^ unit938_1[i][1]) |(x[ unit938_1[i][2] ] ^ unit938_1[i][3]));
			}
		if(X_contra>0) L[938][1]=2;
		}
	//Check all rules of unit[939][0]
	L[939][0] = LargeX[939][1]>0 ? 1 : 0;
	satisfiable[939][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit939_0[i][0] ][ unit939_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit939_0[i][2] ][ unit939_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit939_0[i][4] ][ unit939_0[i][5] ] >0);
		X_contra = ( LargeX[939][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit939_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[939][1]=0; L[939][0]=1;}
			satisfiable[939][0]=satisfiable[939][0] & ((x[939] ^ 0) | (x[ unit939_0[i][0] ] ^ unit939_0[i][1]) |(x[ unit939_0[i][2] ] ^ unit939_0[i][3]));
			}
		if(X_contra>0) L[939][0]=2;
		}
	//Check all rules of unit[939][1]
	L[939][1] = LargeX[939][0]>0 ? 1 : 0;
	satisfiable[939][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit939_1[i][0] ][ unit939_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit939_1[i][2] ][ unit939_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit939_1[i][4] ][ unit939_1[i][5] ] >0);
		X_contra = ( LargeX[939][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit939_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[939][0]=0; L[939][1]=1;}
			satisfiable[939][1]=satisfiable[939][1] & ((x[939] ^ 1) | (x[ unit939_1[i][0] ] ^ unit939_1[i][1]) |(x[ unit939_1[i][2] ] ^ unit939_1[i][3]));
			}
		if(X_contra>0) L[939][1]=2;
		}
	//Check all rules of unit[940][0]
	L[940][0] = LargeX[940][1]>0 ? 1 : 0;
	satisfiable[940][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit940_0[i][0] ][ unit940_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit940_0[i][2] ][ unit940_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit940_0[i][4] ][ unit940_0[i][5] ] >0);
		X_contra = ( LargeX[940][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit940_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[940][1]=0; L[940][0]=1;}
			satisfiable[940][0]=satisfiable[940][0] & ((x[940] ^ 0) | (x[ unit940_0[i][0] ] ^ unit940_0[i][1]) |(x[ unit940_0[i][2] ] ^ unit940_0[i][3]));
			}
		if(X_contra>0) L[940][0]=2;
		}
	//Check all rules of unit[940][1]
	L[940][1] = LargeX[940][0]>0 ? 1 : 0;
	satisfiable[940][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit940_1[i][0] ][ unit940_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit940_1[i][2] ][ unit940_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit940_1[i][4] ][ unit940_1[i][5] ] >0);
		X_contra = ( LargeX[940][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit940_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[940][0]=0; L[940][1]=1;}
			satisfiable[940][1]=satisfiable[940][1] & ((x[940] ^ 1) | (x[ unit940_1[i][0] ] ^ unit940_1[i][1]) |(x[ unit940_1[i][2] ] ^ unit940_1[i][3]));
			}
		if(X_contra>0) L[940][1]=2;
		}
	//Check all rules of unit[941][0]
	L[941][0] = LargeX[941][1]>0 ? 1 : 0;
	satisfiable[941][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit941_0[i][0] ][ unit941_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit941_0[i][2] ][ unit941_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit941_0[i][4] ][ unit941_0[i][5] ] >0);
		X_contra = ( LargeX[941][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit941_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[941][1]=0; L[941][0]=1;}
			satisfiable[941][0]=satisfiable[941][0] & ((x[941] ^ 0) | (x[ unit941_0[i][0] ] ^ unit941_0[i][1]) |(x[ unit941_0[i][2] ] ^ unit941_0[i][3]));
			}
		if(X_contra>0) L[941][0]=2;
		}
	//Check all rules of unit[941][1]
	L[941][1] = LargeX[941][0]>0 ? 1 : 0;
	satisfiable[941][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit941_1[i][0] ][ unit941_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit941_1[i][2] ][ unit941_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit941_1[i][4] ][ unit941_1[i][5] ] >0);
		X_contra = ( LargeX[941][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit941_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[941][0]=0; L[941][1]=1;}
			satisfiable[941][1]=satisfiable[941][1] & ((x[941] ^ 1) | (x[ unit941_1[i][0] ] ^ unit941_1[i][1]) |(x[ unit941_1[i][2] ] ^ unit941_1[i][3]));
			}
		if(X_contra>0) L[941][1]=2;
		}
	//Check all rules of unit[942][0]
	L[942][0] = LargeX[942][1]>0 ? 1 : 0;
	satisfiable[942][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit942_0[i][0] ][ unit942_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit942_0[i][2] ][ unit942_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit942_0[i][4] ][ unit942_0[i][5] ] >0);
		X_contra = ( LargeX[942][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit942_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[942][1]=0; L[942][0]=1;}
			satisfiable[942][0]=satisfiable[942][0] & ((x[942] ^ 0) | (x[ unit942_0[i][0] ] ^ unit942_0[i][1]) |(x[ unit942_0[i][2] ] ^ unit942_0[i][3]));
			}
		if(X_contra>0) L[942][0]=2;
		}
	//Check all rules of unit[942][1]
	L[942][1] = LargeX[942][0]>0 ? 1 : 0;
	satisfiable[942][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit942_1[i][0] ][ unit942_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit942_1[i][2] ][ unit942_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit942_1[i][4] ][ unit942_1[i][5] ] >0);
		X_contra = ( LargeX[942][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit942_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[942][0]=0; L[942][1]=1;}
			satisfiable[942][1]=satisfiable[942][1] & ((x[942] ^ 1) | (x[ unit942_1[i][0] ] ^ unit942_1[i][1]) |(x[ unit942_1[i][2] ] ^ unit942_1[i][3]));
			}
		if(X_contra>0) L[942][1]=2;
		}
	//Check all rules of unit[943][0]
	L[943][0] = LargeX[943][1]>0 ? 1 : 0;
	satisfiable[943][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit943_0[i][0] ][ unit943_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit943_0[i][2] ][ unit943_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit943_0[i][4] ][ unit943_0[i][5] ] >0);
		X_contra = ( LargeX[943][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit943_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[943][1]=0; L[943][0]=1;}
			satisfiable[943][0]=satisfiable[943][0] & ((x[943] ^ 0) | (x[ unit943_0[i][0] ] ^ unit943_0[i][1]) |(x[ unit943_0[i][2] ] ^ unit943_0[i][3]));
			}
		if(X_contra>0) L[943][0]=2;
		}
	//Check all rules of unit[943][1]
	L[943][1] = LargeX[943][0]>0 ? 1 : 0;
	satisfiable[943][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit943_1[i][0] ][ unit943_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit943_1[i][2] ][ unit943_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit943_1[i][4] ][ unit943_1[i][5] ] >0);
		X_contra = ( LargeX[943][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit943_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[943][0]=0; L[943][1]=1;}
			satisfiable[943][1]=satisfiable[943][1] & ((x[943] ^ 1) | (x[ unit943_1[i][0] ] ^ unit943_1[i][1]) |(x[ unit943_1[i][2] ] ^ unit943_1[i][3]));
			}
		if(X_contra>0) L[943][1]=2;
		}
	//Check all rules of unit[944][0]
	L[944][0] = LargeX[944][1]>0 ? 1 : 0;
	satisfiable[944][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit944_0[i][0] ][ unit944_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit944_0[i][2] ][ unit944_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit944_0[i][4] ][ unit944_0[i][5] ] >0);
		X_contra = ( LargeX[944][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit944_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[944][1]=0; L[944][0]=1;}
			satisfiable[944][0]=satisfiable[944][0] & ((x[944] ^ 0) | (x[ unit944_0[i][0] ] ^ unit944_0[i][1]) |(x[ unit944_0[i][2] ] ^ unit944_0[i][3]));
			}
		if(X_contra>0) L[944][0]=2;
		}
	//Check all rules of unit[944][1]
	L[944][1] = LargeX[944][0]>0 ? 1 : 0;
	satisfiable[944][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit944_1[i][0] ][ unit944_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit944_1[i][2] ][ unit944_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit944_1[i][4] ][ unit944_1[i][5] ] >0);
		X_contra = ( LargeX[944][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit944_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[944][0]=0; L[944][1]=1;}
			satisfiable[944][1]=satisfiable[944][1] & ((x[944] ^ 1) | (x[ unit944_1[i][0] ] ^ unit944_1[i][1]) |(x[ unit944_1[i][2] ] ^ unit944_1[i][3]));
			}
		if(X_contra>0) L[944][1]=2;
		}
	//Check all rules of unit[945][0]
	L[945][0] = LargeX[945][1]>0 ? 1 : 0;
	satisfiable[945][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit945_0[i][0] ][ unit945_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit945_0[i][2] ][ unit945_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit945_0[i][4] ][ unit945_0[i][5] ] >0);
		X_contra = ( LargeX[945][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit945_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[945][1]=0; L[945][0]=1;}
			satisfiable[945][0]=satisfiable[945][0] & ((x[945] ^ 0) | (x[ unit945_0[i][0] ] ^ unit945_0[i][1]) |(x[ unit945_0[i][2] ] ^ unit945_0[i][3]));
			}
		if(X_contra>0) L[945][0]=2;
		}
	//Check all rules of unit[945][1]
	L[945][1] = LargeX[945][0]>0 ? 1 : 0;
	satisfiable[945][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit945_1[i][0] ][ unit945_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit945_1[i][2] ][ unit945_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit945_1[i][4] ][ unit945_1[i][5] ] >0);
		X_contra = ( LargeX[945][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit945_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[945][0]=0; L[945][1]=1;}
			satisfiable[945][1]=satisfiable[945][1] & ((x[945] ^ 1) | (x[ unit945_1[i][0] ] ^ unit945_1[i][1]) |(x[ unit945_1[i][2] ] ^ unit945_1[i][3]));
			}
		if(X_contra>0) L[945][1]=2;
		}
	//Check all rules of unit[946][0]
	L[946][0] = LargeX[946][1]>0 ? 1 : 0;
	satisfiable[946][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit946_0[i][0] ][ unit946_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit946_0[i][2] ][ unit946_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit946_0[i][4] ][ unit946_0[i][5] ] >0);
		X_contra = ( LargeX[946][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit946_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[946][1]=0; L[946][0]=1;}
			satisfiable[946][0]=satisfiable[946][0] & ((x[946] ^ 0) | (x[ unit946_0[i][0] ] ^ unit946_0[i][1]) |(x[ unit946_0[i][2] ] ^ unit946_0[i][3]));
			}
		if(X_contra>0) L[946][0]=2;
		}
	//Check all rules of unit[946][1]
	L[946][1] = LargeX[946][0]>0 ? 1 : 0;
	satisfiable[946][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit946_1[i][0] ][ unit946_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit946_1[i][2] ][ unit946_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit946_1[i][4] ][ unit946_1[i][5] ] >0);
		X_contra = ( LargeX[946][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit946_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[946][0]=0; L[946][1]=1;}
			satisfiable[946][1]=satisfiable[946][1] & ((x[946] ^ 1) | (x[ unit946_1[i][0] ] ^ unit946_1[i][1]) |(x[ unit946_1[i][2] ] ^ unit946_1[i][3]));
			}
		if(X_contra>0) L[946][1]=2;
		}
	//Check all rules of unit[947][0]
	L[947][0] = LargeX[947][1]>0 ? 1 : 0;
	satisfiable[947][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit947_0[i][0] ][ unit947_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit947_0[i][2] ][ unit947_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit947_0[i][4] ][ unit947_0[i][5] ] >0);
		X_contra = ( LargeX[947][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit947_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[947][1]=0; L[947][0]=1;}
			satisfiable[947][0]=satisfiable[947][0] & ((x[947] ^ 0) | (x[ unit947_0[i][0] ] ^ unit947_0[i][1]) |(x[ unit947_0[i][2] ] ^ unit947_0[i][3]));
			}
		if(X_contra>0) L[947][0]=2;
		}
	//Check all rules of unit[947][1]
	L[947][1] = LargeX[947][0]>0 ? 1 : 0;
	satisfiable[947][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit947_1[i][0] ][ unit947_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit947_1[i][2] ][ unit947_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit947_1[i][4] ][ unit947_1[i][5] ] >0);
		X_contra = ( LargeX[947][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit947_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[947][0]=0; L[947][1]=1;}
			satisfiable[947][1]=satisfiable[947][1] & ((x[947] ^ 1) | (x[ unit947_1[i][0] ] ^ unit947_1[i][1]) |(x[ unit947_1[i][2] ] ^ unit947_1[i][3]));
			}
		if(X_contra>0) L[947][1]=2;
		}
	//Check all rules of unit[948][0]
	L[948][0] = LargeX[948][1]>0 ? 1 : 0;
	satisfiable[948][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit948_0[i][0] ][ unit948_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit948_0[i][2] ][ unit948_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit948_0[i][4] ][ unit948_0[i][5] ] >0);
		X_contra = ( LargeX[948][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit948_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[948][1]=0; L[948][0]=1;}
			satisfiable[948][0]=satisfiable[948][0] & ((x[948] ^ 0) | (x[ unit948_0[i][0] ] ^ unit948_0[i][1]) |(x[ unit948_0[i][2] ] ^ unit948_0[i][3]));
			}
		if(X_contra>0) L[948][0]=2;
		}
	//Check all rules of unit[948][1]
	L[948][1] = LargeX[948][0]>0 ? 1 : 0;
	satisfiable[948][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit948_1[i][0] ][ unit948_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit948_1[i][2] ][ unit948_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit948_1[i][4] ][ unit948_1[i][5] ] >0);
		X_contra = ( LargeX[948][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit948_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[948][0]=0; L[948][1]=1;}
			satisfiable[948][1]=satisfiable[948][1] & ((x[948] ^ 1) | (x[ unit948_1[i][0] ] ^ unit948_1[i][1]) |(x[ unit948_1[i][2] ] ^ unit948_1[i][3]));
			}
		if(X_contra>0) L[948][1]=2;
		}
	//Check all rules of unit[949][0]
	L[949][0] = LargeX[949][1]>0 ? 1 : 0;
	satisfiable[949][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit949_0[i][0] ][ unit949_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit949_0[i][2] ][ unit949_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit949_0[i][4] ][ unit949_0[i][5] ] >0);
		X_contra = ( LargeX[949][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit949_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[949][1]=0; L[949][0]=1;}
			satisfiable[949][0]=satisfiable[949][0] & ((x[949] ^ 0) | (x[ unit949_0[i][0] ] ^ unit949_0[i][1]) |(x[ unit949_0[i][2] ] ^ unit949_0[i][3]));
			}
		if(X_contra>0) L[949][0]=2;
		}
	//Check all rules of unit[949][1]
	L[949][1] = LargeX[949][0]>0 ? 1 : 0;
	satisfiable[949][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit949_1[i][0] ][ unit949_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit949_1[i][2] ][ unit949_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit949_1[i][4] ][ unit949_1[i][5] ] >0);
		X_contra = ( LargeX[949][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit949_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[949][0]=0; L[949][1]=1;}
			satisfiable[949][1]=satisfiable[949][1] & ((x[949] ^ 1) | (x[ unit949_1[i][0] ] ^ unit949_1[i][1]) |(x[ unit949_1[i][2] ] ^ unit949_1[i][3]));
			}
		if(X_contra>0) L[949][1]=2;
		}
	//Check all rules of unit[950][0]
	L[950][0] = LargeX[950][1]>0 ? 1 : 0;
	satisfiable[950][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit950_0[i][0] ][ unit950_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit950_0[i][2] ][ unit950_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit950_0[i][4] ][ unit950_0[i][5] ] >0);
		X_contra = ( LargeX[950][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit950_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[950][1]=0; L[950][0]=1;}
			satisfiable[950][0]=satisfiable[950][0] & ((x[950] ^ 0) | (x[ unit950_0[i][0] ] ^ unit950_0[i][1]) |(x[ unit950_0[i][2] ] ^ unit950_0[i][3]));
			}
		if(X_contra>0) L[950][0]=2;
		}
	//Check all rules of unit[950][1]
	L[950][1] = LargeX[950][0]>0 ? 1 : 0;
	satisfiable[950][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit950_1[i][0] ][ unit950_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit950_1[i][2] ][ unit950_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit950_1[i][4] ][ unit950_1[i][5] ] >0);
		X_contra = ( LargeX[950][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit950_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[950][0]=0; L[950][1]=1;}
			satisfiable[950][1]=satisfiable[950][1] & ((x[950] ^ 1) | (x[ unit950_1[i][0] ] ^ unit950_1[i][1]) |(x[ unit950_1[i][2] ] ^ unit950_1[i][3]));
			}
		if(X_contra>0) L[950][1]=2;
		}
	//Check all rules of unit[951][0]
	L[951][0] = LargeX[951][1]>0 ? 1 : 0;
	satisfiable[951][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit951_0[i][0] ][ unit951_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit951_0[i][2] ][ unit951_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit951_0[i][4] ][ unit951_0[i][5] ] >0);
		X_contra = ( LargeX[951][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit951_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[951][1]=0; L[951][0]=1;}
			satisfiable[951][0]=satisfiable[951][0] & ((x[951] ^ 0) | (x[ unit951_0[i][0] ] ^ unit951_0[i][1]) |(x[ unit951_0[i][2] ] ^ unit951_0[i][3]));
			}
		if(X_contra>0) L[951][0]=2;
		}
	//Check all rules of unit[951][1]
	L[951][1] = LargeX[951][0]>0 ? 1 : 0;
	satisfiable[951][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit951_1[i][0] ][ unit951_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit951_1[i][2] ][ unit951_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit951_1[i][4] ][ unit951_1[i][5] ] >0);
		X_contra = ( LargeX[951][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit951_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[951][0]=0; L[951][1]=1;}
			satisfiable[951][1]=satisfiable[951][1] & ((x[951] ^ 1) | (x[ unit951_1[i][0] ] ^ unit951_1[i][1]) |(x[ unit951_1[i][2] ] ^ unit951_1[i][3]));
			}
		if(X_contra>0) L[951][1]=2;
		}
	//Check all rules of unit[952][0]
	L[952][0] = LargeX[952][1]>0 ? 1 : 0;
	satisfiable[952][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit952_0[i][0] ][ unit952_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit952_0[i][2] ][ unit952_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit952_0[i][4] ][ unit952_0[i][5] ] >0);
		X_contra = ( LargeX[952][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit952_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[952][1]=0; L[952][0]=1;}
			satisfiable[952][0]=satisfiable[952][0] & ((x[952] ^ 0) | (x[ unit952_0[i][0] ] ^ unit952_0[i][1]) |(x[ unit952_0[i][2] ] ^ unit952_0[i][3]));
			}
		if(X_contra>0) L[952][0]=2;
		}
	//Check all rules of unit[952][1]
	L[952][1] = LargeX[952][0]>0 ? 1 : 0;
	satisfiable[952][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit952_1[i][0] ][ unit952_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit952_1[i][2] ][ unit952_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit952_1[i][4] ][ unit952_1[i][5] ] >0);
		X_contra = ( LargeX[952][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit952_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[952][0]=0; L[952][1]=1;}
			satisfiable[952][1]=satisfiable[952][1] & ((x[952] ^ 1) | (x[ unit952_1[i][0] ] ^ unit952_1[i][1]) |(x[ unit952_1[i][2] ] ^ unit952_1[i][3]));
			}
		if(X_contra>0) L[952][1]=2;
		}
	//Check all rules of unit[953][0]
	L[953][0] = LargeX[953][1]>0 ? 1 : 0;
	satisfiable[953][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit953_0[i][0] ][ unit953_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit953_0[i][2] ][ unit953_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit953_0[i][4] ][ unit953_0[i][5] ] >0);
		X_contra = ( LargeX[953][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit953_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[953][1]=0; L[953][0]=1;}
			satisfiable[953][0]=satisfiable[953][0] & ((x[953] ^ 0) | (x[ unit953_0[i][0] ] ^ unit953_0[i][1]) |(x[ unit953_0[i][2] ] ^ unit953_0[i][3]));
			}
		if(X_contra>0) L[953][0]=2;
		}
	//Check all rules of unit[953][1]
	L[953][1] = LargeX[953][0]>0 ? 1 : 0;
	satisfiable[953][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit953_1[i][0] ][ unit953_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit953_1[i][2] ][ unit953_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit953_1[i][4] ][ unit953_1[i][5] ] >0);
		X_contra = ( LargeX[953][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit953_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[953][0]=0; L[953][1]=1;}
			satisfiable[953][1]=satisfiable[953][1] & ((x[953] ^ 1) | (x[ unit953_1[i][0] ] ^ unit953_1[i][1]) |(x[ unit953_1[i][2] ] ^ unit953_1[i][3]));
			}
		if(X_contra>0) L[953][1]=2;
		}
	//Check all rules of unit[954][0]
	L[954][0] = LargeX[954][1]>0 ? 1 : 0;
	satisfiable[954][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit954_0[i][0] ][ unit954_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit954_0[i][2] ][ unit954_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit954_0[i][4] ][ unit954_0[i][5] ] >0);
		X_contra = ( LargeX[954][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit954_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[954][1]=0; L[954][0]=1;}
			satisfiable[954][0]=satisfiable[954][0] & ((x[954] ^ 0) | (x[ unit954_0[i][0] ] ^ unit954_0[i][1]) |(x[ unit954_0[i][2] ] ^ unit954_0[i][3]));
			}
		if(X_contra>0) L[954][0]=2;
		}
	//Check all rules of unit[954][1]
	L[954][1] = LargeX[954][0]>0 ? 1 : 0;
	satisfiable[954][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit954_1[i][0] ][ unit954_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit954_1[i][2] ][ unit954_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit954_1[i][4] ][ unit954_1[i][5] ] >0);
		X_contra = ( LargeX[954][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit954_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[954][0]=0; L[954][1]=1;}
			satisfiable[954][1]=satisfiable[954][1] & ((x[954] ^ 1) | (x[ unit954_1[i][0] ] ^ unit954_1[i][1]) |(x[ unit954_1[i][2] ] ^ unit954_1[i][3]));
			}
		if(X_contra>0) L[954][1]=2;
		}
	//Check all rules of unit[955][0]
	L[955][0] = LargeX[955][1]>0 ? 1 : 0;
	satisfiable[955][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit955_0[i][0] ][ unit955_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit955_0[i][2] ][ unit955_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit955_0[i][4] ][ unit955_0[i][5] ] >0);
		X_contra = ( LargeX[955][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit955_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[955][1]=0; L[955][0]=1;}
			satisfiable[955][0]=satisfiable[955][0] & ((x[955] ^ 0) | (x[ unit955_0[i][0] ] ^ unit955_0[i][1]) |(x[ unit955_0[i][2] ] ^ unit955_0[i][3]));
			}
		if(X_contra>0) L[955][0]=2;
		}
	//Check all rules of unit[955][1]
	L[955][1] = LargeX[955][0]>0 ? 1 : 0;
	satisfiable[955][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit955_1[i][0] ][ unit955_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit955_1[i][2] ][ unit955_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit955_1[i][4] ][ unit955_1[i][5] ] >0);
		X_contra = ( LargeX[955][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit955_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[955][0]=0; L[955][1]=1;}
			satisfiable[955][1]=satisfiable[955][1] & ((x[955] ^ 1) | (x[ unit955_1[i][0] ] ^ unit955_1[i][1]) |(x[ unit955_1[i][2] ] ^ unit955_1[i][3]));
			}
		if(X_contra>0) L[955][1]=2;
		}
	//Check all rules of unit[956][0]
	L[956][0] = LargeX[956][1]>0 ? 1 : 0;
	satisfiable[956][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit956_0[i][0] ][ unit956_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit956_0[i][2] ][ unit956_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit956_0[i][4] ][ unit956_0[i][5] ] >0);
		X_contra = ( LargeX[956][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit956_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[956][1]=0; L[956][0]=1;}
			satisfiable[956][0]=satisfiable[956][0] & ((x[956] ^ 0) | (x[ unit956_0[i][0] ] ^ unit956_0[i][1]) |(x[ unit956_0[i][2] ] ^ unit956_0[i][3]));
			}
		if(X_contra>0) L[956][0]=2;
		}
	//Check all rules of unit[956][1]
	L[956][1] = LargeX[956][0]>0 ? 1 : 0;
	satisfiable[956][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit956_1[i][0] ][ unit956_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit956_1[i][2] ][ unit956_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit956_1[i][4] ][ unit956_1[i][5] ] >0);
		X_contra = ( LargeX[956][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit956_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[956][0]=0; L[956][1]=1;}
			satisfiable[956][1]=satisfiable[956][1] & ((x[956] ^ 1) | (x[ unit956_1[i][0] ] ^ unit956_1[i][1]) |(x[ unit956_1[i][2] ] ^ unit956_1[i][3]));
			}
		if(X_contra>0) L[956][1]=2;
		}
	//Check all rules of unit[957][0]
	L[957][0] = LargeX[957][1]>0 ? 1 : 0;
	satisfiable[957][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit957_0[i][0] ][ unit957_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit957_0[i][2] ][ unit957_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit957_0[i][4] ][ unit957_0[i][5] ] >0);
		X_contra = ( LargeX[957][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit957_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[957][1]=0; L[957][0]=1;}
			satisfiable[957][0]=satisfiable[957][0] & ((x[957] ^ 0) | (x[ unit957_0[i][0] ] ^ unit957_0[i][1]) |(x[ unit957_0[i][2] ] ^ unit957_0[i][3]));
			}
		if(X_contra>0) L[957][0]=2;
		}
	//Check all rules of unit[957][1]
	L[957][1] = LargeX[957][0]>0 ? 1 : 0;
	satisfiable[957][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit957_1[i][0] ][ unit957_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit957_1[i][2] ][ unit957_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit957_1[i][4] ][ unit957_1[i][5] ] >0);
		X_contra = ( LargeX[957][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit957_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[957][0]=0; L[957][1]=1;}
			satisfiable[957][1]=satisfiable[957][1] & ((x[957] ^ 1) | (x[ unit957_1[i][0] ] ^ unit957_1[i][1]) |(x[ unit957_1[i][2] ] ^ unit957_1[i][3]));
			}
		if(X_contra>0) L[957][1]=2;
		}
	//Check all rules of unit[958][0]
	L[958][0] = LargeX[958][1]>0 ? 1 : 0;
	satisfiable[958][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit958_0[i][0] ][ unit958_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit958_0[i][2] ][ unit958_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit958_0[i][4] ][ unit958_0[i][5] ] >0);
		X_contra = ( LargeX[958][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit958_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[958][1]=0; L[958][0]=1;}
			satisfiable[958][0]=satisfiable[958][0] & ((x[958] ^ 0) | (x[ unit958_0[i][0] ] ^ unit958_0[i][1]) |(x[ unit958_0[i][2] ] ^ unit958_0[i][3]));
			}
		if(X_contra>0) L[958][0]=2;
		}
	//Check all rules of unit[958][1]
	L[958][1] = LargeX[958][0]>0 ? 1 : 0;
	satisfiable[958][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit958_1[i][0] ][ unit958_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit958_1[i][2] ][ unit958_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit958_1[i][4] ][ unit958_1[i][5] ] >0);
		X_contra = ( LargeX[958][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit958_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[958][0]=0; L[958][1]=1;}
			satisfiable[958][1]=satisfiable[958][1] & ((x[958] ^ 1) | (x[ unit958_1[i][0] ] ^ unit958_1[i][1]) |(x[ unit958_1[i][2] ] ^ unit958_1[i][3]));
			}
		if(X_contra>0) L[958][1]=2;
		}
	//Check all rules of unit[959][0]
	L[959][0] = LargeX[959][1]>0 ? 1 : 0;
	satisfiable[959][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit959_0[i][0] ][ unit959_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit959_0[i][2] ][ unit959_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit959_0[i][4] ][ unit959_0[i][5] ] >0);
		X_contra = ( LargeX[959][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit959_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[959][1]=0; L[959][0]=1;}
			satisfiable[959][0]=satisfiable[959][0] & ((x[959] ^ 0) | (x[ unit959_0[i][0] ] ^ unit959_0[i][1]) |(x[ unit959_0[i][2] ] ^ unit959_0[i][3]));
			}
		if(X_contra>0) L[959][0]=2;
		}
	//Check all rules of unit[959][1]
	L[959][1] = LargeX[959][0]>0 ? 1 : 0;
	satisfiable[959][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit959_1[i][0] ][ unit959_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit959_1[i][2] ][ unit959_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit959_1[i][4] ][ unit959_1[i][5] ] >0);
		X_contra = ( LargeX[959][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit959_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[959][0]=0; L[959][1]=1;}
			satisfiable[959][1]=satisfiable[959][1] & ((x[959] ^ 1) | (x[ unit959_1[i][0] ] ^ unit959_1[i][1]) |(x[ unit959_1[i][2] ] ^ unit959_1[i][3]));
			}
		if(X_contra>0) L[959][1]=2;
		}
	//Check all rules of unit[960][0]
	L[960][0] = LargeX[960][1]>0 ? 1 : 0;
	satisfiable[960][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit960_0[i][0] ][ unit960_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit960_0[i][2] ][ unit960_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit960_0[i][4] ][ unit960_0[i][5] ] >0);
		X_contra = ( LargeX[960][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit960_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[960][1]=0; L[960][0]=1;}
			satisfiable[960][0]=satisfiable[960][0] & ((x[960] ^ 0) | (x[ unit960_0[i][0] ] ^ unit960_0[i][1]) |(x[ unit960_0[i][2] ] ^ unit960_0[i][3]));
			}
		if(X_contra>0) L[960][0]=2;
		}
	//Check all rules of unit[960][1]
	L[960][1] = LargeX[960][0]>0 ? 1 : 0;
	satisfiable[960][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit960_1[i][0] ][ unit960_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit960_1[i][2] ][ unit960_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit960_1[i][4] ][ unit960_1[i][5] ] >0);
		X_contra = ( LargeX[960][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit960_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[960][0]=0; L[960][1]=1;}
			satisfiable[960][1]=satisfiable[960][1] & ((x[960] ^ 1) | (x[ unit960_1[i][0] ] ^ unit960_1[i][1]) |(x[ unit960_1[i][2] ] ^ unit960_1[i][3]));
			}
		if(X_contra>0) L[960][1]=2;
		}
	//Check all rules of unit[961][0]
	L[961][0] = LargeX[961][1]>0 ? 1 : 0;
	satisfiable[961][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit961_0[i][0] ][ unit961_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit961_0[i][2] ][ unit961_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit961_0[i][4] ][ unit961_0[i][5] ] >0);
		X_contra = ( LargeX[961][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit961_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[961][1]=0; L[961][0]=1;}
			satisfiable[961][0]=satisfiable[961][0] & ((x[961] ^ 0) | (x[ unit961_0[i][0] ] ^ unit961_0[i][1]) |(x[ unit961_0[i][2] ] ^ unit961_0[i][3]));
			}
		if(X_contra>0) L[961][0]=2;
		}
	//Check all rules of unit[961][1]
	L[961][1] = LargeX[961][0]>0 ? 1 : 0;
	satisfiable[961][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit961_1[i][0] ][ unit961_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit961_1[i][2] ][ unit961_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit961_1[i][4] ][ unit961_1[i][5] ] >0);
		X_contra = ( LargeX[961][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit961_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[961][0]=0; L[961][1]=1;}
			satisfiable[961][1]=satisfiable[961][1] & ((x[961] ^ 1) | (x[ unit961_1[i][0] ] ^ unit961_1[i][1]) |(x[ unit961_1[i][2] ] ^ unit961_1[i][3]));
			}
		if(X_contra>0) L[961][1]=2;
		}
	//Check all rules of unit[962][0]
	L[962][0] = LargeX[962][1]>0 ? 1 : 0;
	satisfiable[962][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit962_0[i][0] ][ unit962_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit962_0[i][2] ][ unit962_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit962_0[i][4] ][ unit962_0[i][5] ] >0);
		X_contra = ( LargeX[962][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit962_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[962][1]=0; L[962][0]=1;}
			satisfiable[962][0]=satisfiable[962][0] & ((x[962] ^ 0) | (x[ unit962_0[i][0] ] ^ unit962_0[i][1]) |(x[ unit962_0[i][2] ] ^ unit962_0[i][3]));
			}
		if(X_contra>0) L[962][0]=2;
		}
	//Check all rules of unit[962][1]
	L[962][1] = LargeX[962][0]>0 ? 1 : 0;
	satisfiable[962][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit962_1[i][0] ][ unit962_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit962_1[i][2] ][ unit962_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit962_1[i][4] ][ unit962_1[i][5] ] >0);
		X_contra = ( LargeX[962][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit962_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[962][0]=0; L[962][1]=1;}
			satisfiable[962][1]=satisfiable[962][1] & ((x[962] ^ 1) | (x[ unit962_1[i][0] ] ^ unit962_1[i][1]) |(x[ unit962_1[i][2] ] ^ unit962_1[i][3]));
			}
		if(X_contra>0) L[962][1]=2;
		}
	//Check all rules of unit[963][0]
	L[963][0] = LargeX[963][1]>0 ? 1 : 0;
	satisfiable[963][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit963_0[i][0] ][ unit963_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit963_0[i][2] ][ unit963_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit963_0[i][4] ][ unit963_0[i][5] ] >0);
		X_contra = ( LargeX[963][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit963_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[963][1]=0; L[963][0]=1;}
			satisfiable[963][0]=satisfiable[963][0] & ((x[963] ^ 0) | (x[ unit963_0[i][0] ] ^ unit963_0[i][1]) |(x[ unit963_0[i][2] ] ^ unit963_0[i][3]));
			}
		if(X_contra>0) L[963][0]=2;
		}
	//Check all rules of unit[963][1]
	L[963][1] = LargeX[963][0]>0 ? 1 : 0;
	satisfiable[963][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit963_1[i][0] ][ unit963_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit963_1[i][2] ][ unit963_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit963_1[i][4] ][ unit963_1[i][5] ] >0);
		X_contra = ( LargeX[963][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit963_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[963][0]=0; L[963][1]=1;}
			satisfiable[963][1]=satisfiable[963][1] & ((x[963] ^ 1) | (x[ unit963_1[i][0] ] ^ unit963_1[i][1]) |(x[ unit963_1[i][2] ] ^ unit963_1[i][3]));
			}
		if(X_contra>0) L[963][1]=2;
		}
	//Check all rules of unit[964][0]
	L[964][0] = LargeX[964][1]>0 ? 1 : 0;
	satisfiable[964][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit964_0[i][0] ][ unit964_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit964_0[i][2] ][ unit964_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit964_0[i][4] ][ unit964_0[i][5] ] >0);
		X_contra = ( LargeX[964][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit964_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[964][1]=0; L[964][0]=1;}
			satisfiable[964][0]=satisfiable[964][0] & ((x[964] ^ 0) | (x[ unit964_0[i][0] ] ^ unit964_0[i][1]) |(x[ unit964_0[i][2] ] ^ unit964_0[i][3]));
			}
		if(X_contra>0) L[964][0]=2;
		}
	//Check all rules of unit[964][1]
	L[964][1] = LargeX[964][0]>0 ? 1 : 0;
	satisfiable[964][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit964_1[i][0] ][ unit964_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit964_1[i][2] ][ unit964_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit964_1[i][4] ][ unit964_1[i][5] ] >0);
		X_contra = ( LargeX[964][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit964_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[964][0]=0; L[964][1]=1;}
			satisfiable[964][1]=satisfiable[964][1] & ((x[964] ^ 1) | (x[ unit964_1[i][0] ] ^ unit964_1[i][1]) |(x[ unit964_1[i][2] ] ^ unit964_1[i][3]));
			}
		if(X_contra>0) L[964][1]=2;
		}
	//Check all rules of unit[965][0]
	L[965][0] = LargeX[965][1]>0 ? 1 : 0;
	satisfiable[965][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit965_0[i][0] ][ unit965_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit965_0[i][2] ][ unit965_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit965_0[i][4] ][ unit965_0[i][5] ] >0);
		X_contra = ( LargeX[965][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit965_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[965][1]=0; L[965][0]=1;}
			satisfiable[965][0]=satisfiable[965][0] & ((x[965] ^ 0) | (x[ unit965_0[i][0] ] ^ unit965_0[i][1]) |(x[ unit965_0[i][2] ] ^ unit965_0[i][3]));
			}
		if(X_contra>0) L[965][0]=2;
		}
	//Check all rules of unit[965][1]
	L[965][1] = LargeX[965][0]>0 ? 1 : 0;
	satisfiable[965][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit965_1[i][0] ][ unit965_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit965_1[i][2] ][ unit965_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit965_1[i][4] ][ unit965_1[i][5] ] >0);
		X_contra = ( LargeX[965][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit965_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[965][0]=0; L[965][1]=1;}
			satisfiable[965][1]=satisfiable[965][1] & ((x[965] ^ 1) | (x[ unit965_1[i][0] ] ^ unit965_1[i][1]) |(x[ unit965_1[i][2] ] ^ unit965_1[i][3]));
			}
		if(X_contra>0) L[965][1]=2;
		}
	//Check all rules of unit[966][0]
	L[966][0] = LargeX[966][1]>0 ? 1 : 0;
	satisfiable[966][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit966_0[i][0] ][ unit966_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit966_0[i][2] ][ unit966_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit966_0[i][4] ][ unit966_0[i][5] ] >0);
		X_contra = ( LargeX[966][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit966_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[966][1]=0; L[966][0]=1;}
			satisfiable[966][0]=satisfiable[966][0] & ((x[966] ^ 0) | (x[ unit966_0[i][0] ] ^ unit966_0[i][1]) |(x[ unit966_0[i][2] ] ^ unit966_0[i][3]));
			}
		if(X_contra>0) L[966][0]=2;
		}
	//Check all rules of unit[966][1]
	L[966][1] = LargeX[966][0]>0 ? 1 : 0;
	satisfiable[966][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit966_1[i][0] ][ unit966_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit966_1[i][2] ][ unit966_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit966_1[i][4] ][ unit966_1[i][5] ] >0);
		X_contra = ( LargeX[966][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit966_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[966][0]=0; L[966][1]=1;}
			satisfiable[966][1]=satisfiable[966][1] & ((x[966] ^ 1) | (x[ unit966_1[i][0] ] ^ unit966_1[i][1]) |(x[ unit966_1[i][2] ] ^ unit966_1[i][3]));
			}
		if(X_contra>0) L[966][1]=2;
		}
	//Check all rules of unit[967][0]
	L[967][0] = LargeX[967][1]>0 ? 1 : 0;
	satisfiable[967][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit967_0[i][0] ][ unit967_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit967_0[i][2] ][ unit967_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit967_0[i][4] ][ unit967_0[i][5] ] >0);
		X_contra = ( LargeX[967][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit967_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[967][1]=0; L[967][0]=1;}
			satisfiable[967][0]=satisfiable[967][0] & ((x[967] ^ 0) | (x[ unit967_0[i][0] ] ^ unit967_0[i][1]) |(x[ unit967_0[i][2] ] ^ unit967_0[i][3]));
			}
		if(X_contra>0) L[967][0]=2;
		}
	//Check all rules of unit[967][1]
	L[967][1] = LargeX[967][0]>0 ? 1 : 0;
	satisfiable[967][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit967_1[i][0] ][ unit967_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit967_1[i][2] ][ unit967_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit967_1[i][4] ][ unit967_1[i][5] ] >0);
		X_contra = ( LargeX[967][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit967_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[967][0]=0; L[967][1]=1;}
			satisfiable[967][1]=satisfiable[967][1] & ((x[967] ^ 1) | (x[ unit967_1[i][0] ] ^ unit967_1[i][1]) |(x[ unit967_1[i][2] ] ^ unit967_1[i][3]));
			}
		if(X_contra>0) L[967][1]=2;
		}
	//Check all rules of unit[968][0]
	L[968][0] = LargeX[968][1]>0 ? 1 : 0;
	satisfiable[968][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit968_0[i][0] ][ unit968_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit968_0[i][2] ][ unit968_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit968_0[i][4] ][ unit968_0[i][5] ] >0);
		X_contra = ( LargeX[968][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit968_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[968][1]=0; L[968][0]=1;}
			satisfiable[968][0]=satisfiable[968][0] & ((x[968] ^ 0) | (x[ unit968_0[i][0] ] ^ unit968_0[i][1]) |(x[ unit968_0[i][2] ] ^ unit968_0[i][3]));
			}
		if(X_contra>0) L[968][0]=2;
		}
	//Check all rules of unit[968][1]
	L[968][1] = LargeX[968][0]>0 ? 1 : 0;
	satisfiable[968][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit968_1[i][0] ][ unit968_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit968_1[i][2] ][ unit968_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit968_1[i][4] ][ unit968_1[i][5] ] >0);
		X_contra = ( LargeX[968][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit968_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[968][0]=0; L[968][1]=1;}
			satisfiable[968][1]=satisfiable[968][1] & ((x[968] ^ 1) | (x[ unit968_1[i][0] ] ^ unit968_1[i][1]) |(x[ unit968_1[i][2] ] ^ unit968_1[i][3]));
			}
		if(X_contra>0) L[968][1]=2;
		}
	//Check all rules of unit[969][0]
	L[969][0] = LargeX[969][1]>0 ? 1 : 0;
	satisfiable[969][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit969_0[i][0] ][ unit969_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit969_0[i][2] ][ unit969_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit969_0[i][4] ][ unit969_0[i][5] ] >0);
		X_contra = ( LargeX[969][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit969_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[969][1]=0; L[969][0]=1;}
			satisfiable[969][0]=satisfiable[969][0] & ((x[969] ^ 0) | (x[ unit969_0[i][0] ] ^ unit969_0[i][1]) |(x[ unit969_0[i][2] ] ^ unit969_0[i][3]));
			}
		if(X_contra>0) L[969][0]=2;
		}
	//Check all rules of unit[969][1]
	L[969][1] = LargeX[969][0]>0 ? 1 : 0;
	satisfiable[969][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit969_1[i][0] ][ unit969_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit969_1[i][2] ][ unit969_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit969_1[i][4] ][ unit969_1[i][5] ] >0);
		X_contra = ( LargeX[969][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit969_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[969][0]=0; L[969][1]=1;}
			satisfiable[969][1]=satisfiable[969][1] & ((x[969] ^ 1) | (x[ unit969_1[i][0] ] ^ unit969_1[i][1]) |(x[ unit969_1[i][2] ] ^ unit969_1[i][3]));
			}
		if(X_contra>0) L[969][1]=2;
		}
	//Check all rules of unit[970][0]
	L[970][0] = LargeX[970][1]>0 ? 1 : 0;
	satisfiable[970][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit970_0[i][0] ][ unit970_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit970_0[i][2] ][ unit970_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit970_0[i][4] ][ unit970_0[i][5] ] >0);
		X_contra = ( LargeX[970][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit970_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[970][1]=0; L[970][0]=1;}
			satisfiable[970][0]=satisfiable[970][0] & ((x[970] ^ 0) | (x[ unit970_0[i][0] ] ^ unit970_0[i][1]) |(x[ unit970_0[i][2] ] ^ unit970_0[i][3]));
			}
		if(X_contra>0) L[970][0]=2;
		}
	//Check all rules of unit[970][1]
	L[970][1] = LargeX[970][0]>0 ? 1 : 0;
	satisfiable[970][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit970_1[i][0] ][ unit970_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit970_1[i][2] ][ unit970_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit970_1[i][4] ][ unit970_1[i][5] ] >0);
		X_contra = ( LargeX[970][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit970_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[970][0]=0; L[970][1]=1;}
			satisfiable[970][1]=satisfiable[970][1] & ((x[970] ^ 1) | (x[ unit970_1[i][0] ] ^ unit970_1[i][1]) |(x[ unit970_1[i][2] ] ^ unit970_1[i][3]));
			}
		if(X_contra>0) L[970][1]=2;
		}
	//Check all rules of unit[971][0]
	L[971][0] = LargeX[971][1]>0 ? 1 : 0;
	satisfiable[971][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit971_0[i][0] ][ unit971_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit971_0[i][2] ][ unit971_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit971_0[i][4] ][ unit971_0[i][5] ] >0);
		X_contra = ( LargeX[971][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit971_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[971][1]=0; L[971][0]=1;}
			satisfiable[971][0]=satisfiable[971][0] & ((x[971] ^ 0) | (x[ unit971_0[i][0] ] ^ unit971_0[i][1]) |(x[ unit971_0[i][2] ] ^ unit971_0[i][3]));
			}
		if(X_contra>0) L[971][0]=2;
		}
	//Check all rules of unit[971][1]
	L[971][1] = LargeX[971][0]>0 ? 1 : 0;
	satisfiable[971][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit971_1[i][0] ][ unit971_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit971_1[i][2] ][ unit971_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit971_1[i][4] ][ unit971_1[i][5] ] >0);
		X_contra = ( LargeX[971][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit971_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[971][0]=0; L[971][1]=1;}
			satisfiable[971][1]=satisfiable[971][1] & ((x[971] ^ 1) | (x[ unit971_1[i][0] ] ^ unit971_1[i][1]) |(x[ unit971_1[i][2] ] ^ unit971_1[i][3]));
			}
		if(X_contra>0) L[971][1]=2;
		}
	//Check all rules of unit[972][0]
	L[972][0] = LargeX[972][1]>0 ? 1 : 0;
	satisfiable[972][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit972_0[i][0] ][ unit972_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit972_0[i][2] ][ unit972_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit972_0[i][4] ][ unit972_0[i][5] ] >0);
		X_contra = ( LargeX[972][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit972_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[972][1]=0; L[972][0]=1;}
			satisfiable[972][0]=satisfiable[972][0] & ((x[972] ^ 0) | (x[ unit972_0[i][0] ] ^ unit972_0[i][1]) |(x[ unit972_0[i][2] ] ^ unit972_0[i][3]));
			}
		if(X_contra>0) L[972][0]=2;
		}
	//Check all rules of unit[972][1]
	L[972][1] = LargeX[972][0]>0 ? 1 : 0;
	satisfiable[972][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit972_1[i][0] ][ unit972_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit972_1[i][2] ][ unit972_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit972_1[i][4] ][ unit972_1[i][5] ] >0);
		X_contra = ( LargeX[972][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit972_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[972][0]=0; L[972][1]=1;}
			satisfiable[972][1]=satisfiable[972][1] & ((x[972] ^ 1) | (x[ unit972_1[i][0] ] ^ unit972_1[i][1]) |(x[ unit972_1[i][2] ] ^ unit972_1[i][3]));
			}
		if(X_contra>0) L[972][1]=2;
		}
	//Check all rules of unit[973][0]
	L[973][0] = LargeX[973][1]>0 ? 1 : 0;
	satisfiable[973][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit973_0[i][0] ][ unit973_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit973_0[i][2] ][ unit973_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit973_0[i][4] ][ unit973_0[i][5] ] >0);
		X_contra = ( LargeX[973][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit973_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[973][1]=0; L[973][0]=1;}
			satisfiable[973][0]=satisfiable[973][0] & ((x[973] ^ 0) | (x[ unit973_0[i][0] ] ^ unit973_0[i][1]) |(x[ unit973_0[i][2] ] ^ unit973_0[i][3]));
			}
		if(X_contra>0) L[973][0]=2;
		}
	//Check all rules of unit[973][1]
	L[973][1] = LargeX[973][0]>0 ? 1 : 0;
	satisfiable[973][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit973_1[i][0] ][ unit973_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit973_1[i][2] ][ unit973_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit973_1[i][4] ][ unit973_1[i][5] ] >0);
		X_contra = ( LargeX[973][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit973_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[973][0]=0; L[973][1]=1;}
			satisfiable[973][1]=satisfiable[973][1] & ((x[973] ^ 1) | (x[ unit973_1[i][0] ] ^ unit973_1[i][1]) |(x[ unit973_1[i][2] ] ^ unit973_1[i][3]));
			}
		if(X_contra>0) L[973][1]=2;
		}
	//Check all rules of unit[974][0]
	L[974][0] = LargeX[974][1]>0 ? 1 : 0;
	satisfiable[974][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit974_0[i][0] ][ unit974_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit974_0[i][2] ][ unit974_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit974_0[i][4] ][ unit974_0[i][5] ] >0);
		X_contra = ( LargeX[974][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit974_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[974][1]=0; L[974][0]=1;}
			satisfiable[974][0]=satisfiable[974][0] & ((x[974] ^ 0) | (x[ unit974_0[i][0] ] ^ unit974_0[i][1]) |(x[ unit974_0[i][2] ] ^ unit974_0[i][3]));
			}
		if(X_contra>0) L[974][0]=2;
		}
	//Check all rules of unit[974][1]
	L[974][1] = LargeX[974][0]>0 ? 1 : 0;
	satisfiable[974][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit974_1[i][0] ][ unit974_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit974_1[i][2] ][ unit974_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit974_1[i][4] ][ unit974_1[i][5] ] >0);
		X_contra = ( LargeX[974][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit974_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[974][0]=0; L[974][1]=1;}
			satisfiable[974][1]=satisfiable[974][1] & ((x[974] ^ 1) | (x[ unit974_1[i][0] ] ^ unit974_1[i][1]) |(x[ unit974_1[i][2] ] ^ unit974_1[i][3]));
			}
		if(X_contra>0) L[974][1]=2;
		}
	//Check all rules of unit[975][0]
	L[975][0] = LargeX[975][1]>0 ? 1 : 0;
	satisfiable[975][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit975_0[i][0] ][ unit975_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit975_0[i][2] ][ unit975_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit975_0[i][4] ][ unit975_0[i][5] ] >0);
		X_contra = ( LargeX[975][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit975_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[975][1]=0; L[975][0]=1;}
			satisfiable[975][0]=satisfiable[975][0] & ((x[975] ^ 0) | (x[ unit975_0[i][0] ] ^ unit975_0[i][1]) |(x[ unit975_0[i][2] ] ^ unit975_0[i][3]));
			}
		if(X_contra>0) L[975][0]=2;
		}
	//Check all rules of unit[975][1]
	L[975][1] = LargeX[975][0]>0 ? 1 : 0;
	satisfiable[975][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit975_1[i][0] ][ unit975_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit975_1[i][2] ][ unit975_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit975_1[i][4] ][ unit975_1[i][5] ] >0);
		X_contra = ( LargeX[975][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit975_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[975][0]=0; L[975][1]=1;}
			satisfiable[975][1]=satisfiable[975][1] & ((x[975] ^ 1) | (x[ unit975_1[i][0] ] ^ unit975_1[i][1]) |(x[ unit975_1[i][2] ] ^ unit975_1[i][3]));
			}
		if(X_contra>0) L[975][1]=2;
		}
	//Check all rules of unit[976][0]
	L[976][0] = LargeX[976][1]>0 ? 1 : 0;
	satisfiable[976][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit976_0[i][0] ][ unit976_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit976_0[i][2] ][ unit976_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit976_0[i][4] ][ unit976_0[i][5] ] >0);
		X_contra = ( LargeX[976][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit976_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[976][1]=0; L[976][0]=1;}
			satisfiable[976][0]=satisfiable[976][0] & ((x[976] ^ 0) | (x[ unit976_0[i][0] ] ^ unit976_0[i][1]) |(x[ unit976_0[i][2] ] ^ unit976_0[i][3]));
			}
		if(X_contra>0) L[976][0]=2;
		}
	//Check all rules of unit[976][1]
	L[976][1] = LargeX[976][0]>0 ? 1 : 0;
	satisfiable[976][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit976_1[i][0] ][ unit976_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit976_1[i][2] ][ unit976_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit976_1[i][4] ][ unit976_1[i][5] ] >0);
		X_contra = ( LargeX[976][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit976_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[976][0]=0; L[976][1]=1;}
			satisfiable[976][1]=satisfiable[976][1] & ((x[976] ^ 1) | (x[ unit976_1[i][0] ] ^ unit976_1[i][1]) |(x[ unit976_1[i][2] ] ^ unit976_1[i][3]));
			}
		if(X_contra>0) L[976][1]=2;
		}
	//Check all rules of unit[977][0]
	L[977][0] = LargeX[977][1]>0 ? 1 : 0;
	satisfiable[977][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit977_0[i][0] ][ unit977_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit977_0[i][2] ][ unit977_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit977_0[i][4] ][ unit977_0[i][5] ] >0);
		X_contra = ( LargeX[977][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit977_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[977][1]=0; L[977][0]=1;}
			satisfiable[977][0]=satisfiable[977][0] & ((x[977] ^ 0) | (x[ unit977_0[i][0] ] ^ unit977_0[i][1]) |(x[ unit977_0[i][2] ] ^ unit977_0[i][3]));
			}
		if(X_contra>0) L[977][0]=2;
		}
	//Check all rules of unit[977][1]
	L[977][1] = LargeX[977][0]>0 ? 1 : 0;
	satisfiable[977][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit977_1[i][0] ][ unit977_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit977_1[i][2] ][ unit977_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit977_1[i][4] ][ unit977_1[i][5] ] >0);
		X_contra = ( LargeX[977][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit977_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[977][0]=0; L[977][1]=1;}
			satisfiable[977][1]=satisfiable[977][1] & ((x[977] ^ 1) | (x[ unit977_1[i][0] ] ^ unit977_1[i][1]) |(x[ unit977_1[i][2] ] ^ unit977_1[i][3]));
			}
		if(X_contra>0) L[977][1]=2;
		}
	//Check all rules of unit[978][0]
	L[978][0] = LargeX[978][1]>0 ? 1 : 0;
	satisfiable[978][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit978_0[i][0] ][ unit978_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit978_0[i][2] ][ unit978_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit978_0[i][4] ][ unit978_0[i][5] ] >0);
		X_contra = ( LargeX[978][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit978_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[978][1]=0; L[978][0]=1;}
			satisfiable[978][0]=satisfiable[978][0] & ((x[978] ^ 0) | (x[ unit978_0[i][0] ] ^ unit978_0[i][1]) |(x[ unit978_0[i][2] ] ^ unit978_0[i][3]));
			}
		if(X_contra>0) L[978][0]=2;
		}
	//Check all rules of unit[978][1]
	L[978][1] = LargeX[978][0]>0 ? 1 : 0;
	satisfiable[978][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit978_1[i][0] ][ unit978_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit978_1[i][2] ][ unit978_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit978_1[i][4] ][ unit978_1[i][5] ] >0);
		X_contra = ( LargeX[978][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit978_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[978][0]=0; L[978][1]=1;}
			satisfiable[978][1]=satisfiable[978][1] & ((x[978] ^ 1) | (x[ unit978_1[i][0] ] ^ unit978_1[i][1]) |(x[ unit978_1[i][2] ] ^ unit978_1[i][3]));
			}
		if(X_contra>0) L[978][1]=2;
		}
	//Check all rules of unit[979][0]
	L[979][0] = LargeX[979][1]>0 ? 1 : 0;
	satisfiable[979][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit979_0[i][0] ][ unit979_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit979_0[i][2] ][ unit979_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit979_0[i][4] ][ unit979_0[i][5] ] >0);
		X_contra = ( LargeX[979][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit979_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[979][1]=0; L[979][0]=1;}
			satisfiable[979][0]=satisfiable[979][0] & ((x[979] ^ 0) | (x[ unit979_0[i][0] ] ^ unit979_0[i][1]) |(x[ unit979_0[i][2] ] ^ unit979_0[i][3]));
			}
		if(X_contra>0) L[979][0]=2;
		}
	//Check all rules of unit[979][1]
	L[979][1] = LargeX[979][0]>0 ? 1 : 0;
	satisfiable[979][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit979_1[i][0] ][ unit979_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit979_1[i][2] ][ unit979_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit979_1[i][4] ][ unit979_1[i][5] ] >0);
		X_contra = ( LargeX[979][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit979_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[979][0]=0; L[979][1]=1;}
			satisfiable[979][1]=satisfiable[979][1] & ((x[979] ^ 1) | (x[ unit979_1[i][0] ] ^ unit979_1[i][1]) |(x[ unit979_1[i][2] ] ^ unit979_1[i][3]));
			}
		if(X_contra>0) L[979][1]=2;
		}
	//Check all rules of unit[980][0]
	L[980][0] = LargeX[980][1]>0 ? 1 : 0;
	satisfiable[980][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit980_0[i][0] ][ unit980_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit980_0[i][2] ][ unit980_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit980_0[i][4] ][ unit980_0[i][5] ] >0);
		X_contra = ( LargeX[980][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit980_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[980][1]=0; L[980][0]=1;}
			satisfiable[980][0]=satisfiable[980][0] & ((x[980] ^ 0) | (x[ unit980_0[i][0] ] ^ unit980_0[i][1]) |(x[ unit980_0[i][2] ] ^ unit980_0[i][3]));
			}
		if(X_contra>0) L[980][0]=2;
		}
	//Check all rules of unit[980][1]
	L[980][1] = LargeX[980][0]>0 ? 1 : 0;
	satisfiable[980][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit980_1[i][0] ][ unit980_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit980_1[i][2] ][ unit980_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit980_1[i][4] ][ unit980_1[i][5] ] >0);
		X_contra = ( LargeX[980][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit980_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[980][0]=0; L[980][1]=1;}
			satisfiable[980][1]=satisfiable[980][1] & ((x[980] ^ 1) | (x[ unit980_1[i][0] ] ^ unit980_1[i][1]) |(x[ unit980_1[i][2] ] ^ unit980_1[i][3]));
			}
		if(X_contra>0) L[980][1]=2;
		}
	//Check all rules of unit[981][0]
	L[981][0] = LargeX[981][1]>0 ? 1 : 0;
	satisfiable[981][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit981_0[i][0] ][ unit981_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit981_0[i][2] ][ unit981_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit981_0[i][4] ][ unit981_0[i][5] ] >0);
		X_contra = ( LargeX[981][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit981_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[981][1]=0; L[981][0]=1;}
			satisfiable[981][0]=satisfiable[981][0] & ((x[981] ^ 0) | (x[ unit981_0[i][0] ] ^ unit981_0[i][1]) |(x[ unit981_0[i][2] ] ^ unit981_0[i][3]));
			}
		if(X_contra>0) L[981][0]=2;
		}
	//Check all rules of unit[981][1]
	L[981][1] = LargeX[981][0]>0 ? 1 : 0;
	satisfiable[981][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit981_1[i][0] ][ unit981_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit981_1[i][2] ][ unit981_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit981_1[i][4] ][ unit981_1[i][5] ] >0);
		X_contra = ( LargeX[981][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit981_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[981][0]=0; L[981][1]=1;}
			satisfiable[981][1]=satisfiable[981][1] & ((x[981] ^ 1) | (x[ unit981_1[i][0] ] ^ unit981_1[i][1]) |(x[ unit981_1[i][2] ] ^ unit981_1[i][3]));
			}
		if(X_contra>0) L[981][1]=2;
		}
	//Check all rules of unit[982][0]
	L[982][0] = LargeX[982][1]>0 ? 1 : 0;
	satisfiable[982][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit982_0[i][0] ][ unit982_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit982_0[i][2] ][ unit982_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit982_0[i][4] ][ unit982_0[i][5] ] >0);
		X_contra = ( LargeX[982][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit982_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[982][1]=0; L[982][0]=1;}
			satisfiable[982][0]=satisfiable[982][0] & ((x[982] ^ 0) | (x[ unit982_0[i][0] ] ^ unit982_0[i][1]) |(x[ unit982_0[i][2] ] ^ unit982_0[i][3]));
			}
		if(X_contra>0) L[982][0]=2;
		}
	//Check all rules of unit[982][1]
	L[982][1] = LargeX[982][0]>0 ? 1 : 0;
	satisfiable[982][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit982_1[i][0] ][ unit982_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit982_1[i][2] ][ unit982_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit982_1[i][4] ][ unit982_1[i][5] ] >0);
		X_contra = ( LargeX[982][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit982_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[982][0]=0; L[982][1]=1;}
			satisfiable[982][1]=satisfiable[982][1] & ((x[982] ^ 1) | (x[ unit982_1[i][0] ] ^ unit982_1[i][1]) |(x[ unit982_1[i][2] ] ^ unit982_1[i][3]));
			}
		if(X_contra>0) L[982][1]=2;
		}
	//Check all rules of unit[983][0]
	L[983][0] = LargeX[983][1]>0 ? 1 : 0;
	satisfiable[983][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit983_0[i][0] ][ unit983_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit983_0[i][2] ][ unit983_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit983_0[i][4] ][ unit983_0[i][5] ] >0);
		X_contra = ( LargeX[983][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit983_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[983][1]=0; L[983][0]=1;}
			satisfiable[983][0]=satisfiable[983][0] & ((x[983] ^ 0) | (x[ unit983_0[i][0] ] ^ unit983_0[i][1]) |(x[ unit983_0[i][2] ] ^ unit983_0[i][3]));
			}
		if(X_contra>0) L[983][0]=2;
		}
	//Check all rules of unit[983][1]
	L[983][1] = LargeX[983][0]>0 ? 1 : 0;
	satisfiable[983][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit983_1[i][0] ][ unit983_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit983_1[i][2] ][ unit983_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit983_1[i][4] ][ unit983_1[i][5] ] >0);
		X_contra = ( LargeX[983][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit983_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[983][0]=0; L[983][1]=1;}
			satisfiable[983][1]=satisfiable[983][1] & ((x[983] ^ 1) | (x[ unit983_1[i][0] ] ^ unit983_1[i][1]) |(x[ unit983_1[i][2] ] ^ unit983_1[i][3]));
			}
		if(X_contra>0) L[983][1]=2;
		}
	//Check all rules of unit[984][0]
	L[984][0] = LargeX[984][1]>0 ? 1 : 0;
	satisfiable[984][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit984_0[i][0] ][ unit984_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit984_0[i][2] ][ unit984_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit984_0[i][4] ][ unit984_0[i][5] ] >0);
		X_contra = ( LargeX[984][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit984_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[984][1]=0; L[984][0]=1;}
			satisfiable[984][0]=satisfiable[984][0] & ((x[984] ^ 0) | (x[ unit984_0[i][0] ] ^ unit984_0[i][1]) |(x[ unit984_0[i][2] ] ^ unit984_0[i][3]));
			}
		if(X_contra>0) L[984][0]=2;
		}
	//Check all rules of unit[984][1]
	L[984][1] = LargeX[984][0]>0 ? 1 : 0;
	satisfiable[984][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit984_1[i][0] ][ unit984_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit984_1[i][2] ][ unit984_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit984_1[i][4] ][ unit984_1[i][5] ] >0);
		X_contra = ( LargeX[984][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit984_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[984][0]=0; L[984][1]=1;}
			satisfiable[984][1]=satisfiable[984][1] & ((x[984] ^ 1) | (x[ unit984_1[i][0] ] ^ unit984_1[i][1]) |(x[ unit984_1[i][2] ] ^ unit984_1[i][3]));
			}
		if(X_contra>0) L[984][1]=2;
		}
	//Check all rules of unit[985][0]
	L[985][0] = LargeX[985][1]>0 ? 1 : 0;
	satisfiable[985][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit985_0[i][0] ][ unit985_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit985_0[i][2] ][ unit985_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit985_0[i][4] ][ unit985_0[i][5] ] >0);
		X_contra = ( LargeX[985][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit985_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[985][1]=0; L[985][0]=1;}
			satisfiable[985][0]=satisfiable[985][0] & ((x[985] ^ 0) | (x[ unit985_0[i][0] ] ^ unit985_0[i][1]) |(x[ unit985_0[i][2] ] ^ unit985_0[i][3]));
			}
		if(X_contra>0) L[985][0]=2;
		}
	//Check all rules of unit[985][1]
	L[985][1] = LargeX[985][0]>0 ? 1 : 0;
	satisfiable[985][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit985_1[i][0] ][ unit985_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit985_1[i][2] ][ unit985_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit985_1[i][4] ][ unit985_1[i][5] ] >0);
		X_contra = ( LargeX[985][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit985_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[985][0]=0; L[985][1]=1;}
			satisfiable[985][1]=satisfiable[985][1] & ((x[985] ^ 1) | (x[ unit985_1[i][0] ] ^ unit985_1[i][1]) |(x[ unit985_1[i][2] ] ^ unit985_1[i][3]));
			}
		if(X_contra>0) L[985][1]=2;
		}
	//Check all rules of unit[986][0]
	L[986][0] = LargeX[986][1]>0 ? 1 : 0;
	satisfiable[986][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit986_0[i][0] ][ unit986_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit986_0[i][2] ][ unit986_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit986_0[i][4] ][ unit986_0[i][5] ] >0);
		X_contra = ( LargeX[986][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit986_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[986][1]=0; L[986][0]=1;}
			satisfiable[986][0]=satisfiable[986][0] & ((x[986] ^ 0) | (x[ unit986_0[i][0] ] ^ unit986_0[i][1]) |(x[ unit986_0[i][2] ] ^ unit986_0[i][3]));
			}
		if(X_contra>0) L[986][0]=2;
		}
	//Check all rules of unit[986][1]
	L[986][1] = LargeX[986][0]>0 ? 1 : 0;
	satisfiable[986][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit986_1[i][0] ][ unit986_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit986_1[i][2] ][ unit986_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit986_1[i][4] ][ unit986_1[i][5] ] >0);
		X_contra = ( LargeX[986][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit986_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[986][0]=0; L[986][1]=1;}
			satisfiable[986][1]=satisfiable[986][1] & ((x[986] ^ 1) | (x[ unit986_1[i][0] ] ^ unit986_1[i][1]) |(x[ unit986_1[i][2] ] ^ unit986_1[i][3]));
			}
		if(X_contra>0) L[986][1]=2;
		}
	//Check all rules of unit[987][0]
	L[987][0] = LargeX[987][1]>0 ? 1 : 0;
	satisfiable[987][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit987_0[i][0] ][ unit987_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit987_0[i][2] ][ unit987_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit987_0[i][4] ][ unit987_0[i][5] ] >0);
		X_contra = ( LargeX[987][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit987_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[987][1]=0; L[987][0]=1;}
			satisfiable[987][0]=satisfiable[987][0] & ((x[987] ^ 0) | (x[ unit987_0[i][0] ] ^ unit987_0[i][1]) |(x[ unit987_0[i][2] ] ^ unit987_0[i][3]));
			}
		if(X_contra>0) L[987][0]=2;
		}
	//Check all rules of unit[987][1]
	L[987][1] = LargeX[987][0]>0 ? 1 : 0;
	satisfiable[987][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit987_1[i][0] ][ unit987_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit987_1[i][2] ][ unit987_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit987_1[i][4] ][ unit987_1[i][5] ] >0);
		X_contra = ( LargeX[987][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit987_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[987][0]=0; L[987][1]=1;}
			satisfiable[987][1]=satisfiable[987][1] & ((x[987] ^ 1) | (x[ unit987_1[i][0] ] ^ unit987_1[i][1]) |(x[ unit987_1[i][2] ] ^ unit987_1[i][3]));
			}
		if(X_contra>0) L[987][1]=2;
		}
	//Check all rules of unit[988][0]
	L[988][0] = LargeX[988][1]>0 ? 1 : 0;
	satisfiable[988][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit988_0[i][0] ][ unit988_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit988_0[i][2] ][ unit988_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit988_0[i][4] ][ unit988_0[i][5] ] >0);
		X_contra = ( LargeX[988][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit988_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[988][1]=0; L[988][0]=1;}
			satisfiable[988][0]=satisfiable[988][0] & ((x[988] ^ 0) | (x[ unit988_0[i][0] ] ^ unit988_0[i][1]) |(x[ unit988_0[i][2] ] ^ unit988_0[i][3]));
			}
		if(X_contra>0) L[988][0]=2;
		}
	//Check all rules of unit[988][1]
	L[988][1] = LargeX[988][0]>0 ? 1 : 0;
	satisfiable[988][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit988_1[i][0] ][ unit988_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit988_1[i][2] ][ unit988_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit988_1[i][4] ][ unit988_1[i][5] ] >0);
		X_contra = ( LargeX[988][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit988_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[988][0]=0; L[988][1]=1;}
			satisfiable[988][1]=satisfiable[988][1] & ((x[988] ^ 1) | (x[ unit988_1[i][0] ] ^ unit988_1[i][1]) |(x[ unit988_1[i][2] ] ^ unit988_1[i][3]));
			}
		if(X_contra>0) L[988][1]=2;
		}
	//Check all rules of unit[989][0]
	L[989][0] = LargeX[989][1]>0 ? 1 : 0;
	satisfiable[989][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit989_0[i][0] ][ unit989_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit989_0[i][2] ][ unit989_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit989_0[i][4] ][ unit989_0[i][5] ] >0);
		X_contra = ( LargeX[989][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit989_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[989][1]=0; L[989][0]=1;}
			satisfiable[989][0]=satisfiable[989][0] & ((x[989] ^ 0) | (x[ unit989_0[i][0] ] ^ unit989_0[i][1]) |(x[ unit989_0[i][2] ] ^ unit989_0[i][3]));
			}
		if(X_contra>0) L[989][0]=2;
		}
	//Check all rules of unit[989][1]
	L[989][1] = LargeX[989][0]>0 ? 1 : 0;
	satisfiable[989][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit989_1[i][0] ][ unit989_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit989_1[i][2] ][ unit989_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit989_1[i][4] ][ unit989_1[i][5] ] >0);
		X_contra = ( LargeX[989][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit989_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[989][0]=0; L[989][1]=1;}
			satisfiable[989][1]=satisfiable[989][1] & ((x[989] ^ 1) | (x[ unit989_1[i][0] ] ^ unit989_1[i][1]) |(x[ unit989_1[i][2] ] ^ unit989_1[i][3]));
			}
		if(X_contra>0) L[989][1]=2;
		}
	//Check all rules of unit[990][0]
	L[990][0] = LargeX[990][1]>0 ? 1 : 0;
	satisfiable[990][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit990_0[i][0] ][ unit990_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit990_0[i][2] ][ unit990_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit990_0[i][4] ][ unit990_0[i][5] ] >0);
		X_contra = ( LargeX[990][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit990_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[990][1]=0; L[990][0]=1;}
			satisfiable[990][0]=satisfiable[990][0] & ((x[990] ^ 0) | (x[ unit990_0[i][0] ] ^ unit990_0[i][1]) |(x[ unit990_0[i][2] ] ^ unit990_0[i][3]));
			}
		if(X_contra>0) L[990][0]=2;
		}
	//Check all rules of unit[990][1]
	L[990][1] = LargeX[990][0]>0 ? 1 : 0;
	satisfiable[990][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit990_1[i][0] ][ unit990_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit990_1[i][2] ][ unit990_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit990_1[i][4] ][ unit990_1[i][5] ] >0);
		X_contra = ( LargeX[990][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit990_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[990][0]=0; L[990][1]=1;}
			satisfiable[990][1]=satisfiable[990][1] & ((x[990] ^ 1) | (x[ unit990_1[i][0] ] ^ unit990_1[i][1]) |(x[ unit990_1[i][2] ] ^ unit990_1[i][3]));
			}
		if(X_contra>0) L[990][1]=2;
		}
	//Check all rules of unit[991][0]
	L[991][0] = LargeX[991][1]>0 ? 1 : 0;
	satisfiable[991][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit991_0[i][0] ][ unit991_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit991_0[i][2] ][ unit991_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit991_0[i][4] ][ unit991_0[i][5] ] >0);
		X_contra = ( LargeX[991][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit991_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[991][1]=0; L[991][0]=1;}
			satisfiable[991][0]=satisfiable[991][0] & ((x[991] ^ 0) | (x[ unit991_0[i][0] ] ^ unit991_0[i][1]) |(x[ unit991_0[i][2] ] ^ unit991_0[i][3]));
			}
		if(X_contra>0) L[991][0]=2;
		}
	//Check all rules of unit[991][1]
	L[991][1] = LargeX[991][0]>0 ? 1 : 0;
	satisfiable[991][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit991_1[i][0] ][ unit991_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit991_1[i][2] ][ unit991_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit991_1[i][4] ][ unit991_1[i][5] ] >0);
		X_contra = ( LargeX[991][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit991_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[991][0]=0; L[991][1]=1;}
			satisfiable[991][1]=satisfiable[991][1] & ((x[991] ^ 1) | (x[ unit991_1[i][0] ] ^ unit991_1[i][1]) |(x[ unit991_1[i][2] ] ^ unit991_1[i][3]));
			}
		if(X_contra>0) L[991][1]=2;
		}
	//Check all rules of unit[992][0]
	L[992][0] = LargeX[992][1]>0 ? 1 : 0;
	satisfiable[992][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit992_0[i][0] ][ unit992_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit992_0[i][2] ][ unit992_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit992_0[i][4] ][ unit992_0[i][5] ] >0);
		X_contra = ( LargeX[992][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit992_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[992][1]=0; L[992][0]=1;}
			satisfiable[992][0]=satisfiable[992][0] & ((x[992] ^ 0) | (x[ unit992_0[i][0] ] ^ unit992_0[i][1]) |(x[ unit992_0[i][2] ] ^ unit992_0[i][3]));
			}
		if(X_contra>0) L[992][0]=2;
		}
	//Check all rules of unit[992][1]
	L[992][1] = LargeX[992][0]>0 ? 1 : 0;
	satisfiable[992][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit992_1[i][0] ][ unit992_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit992_1[i][2] ][ unit992_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit992_1[i][4] ][ unit992_1[i][5] ] >0);
		X_contra = ( LargeX[992][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit992_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[992][0]=0; L[992][1]=1;}
			satisfiable[992][1]=satisfiable[992][1] & ((x[992] ^ 1) | (x[ unit992_1[i][0] ] ^ unit992_1[i][1]) |(x[ unit992_1[i][2] ] ^ unit992_1[i][3]));
			}
		if(X_contra>0) L[992][1]=2;
		}
	//Check all rules of unit[993][0]
	L[993][0] = LargeX[993][1]>0 ? 1 : 0;
	satisfiable[993][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit993_0[i][0] ][ unit993_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit993_0[i][2] ][ unit993_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit993_0[i][4] ][ unit993_0[i][5] ] >0);
		X_contra = ( LargeX[993][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit993_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[993][1]=0; L[993][0]=1;}
			satisfiable[993][0]=satisfiable[993][0] & ((x[993] ^ 0) | (x[ unit993_0[i][0] ] ^ unit993_0[i][1]) |(x[ unit993_0[i][2] ] ^ unit993_0[i][3]));
			}
		if(X_contra>0) L[993][0]=2;
		}
	//Check all rules of unit[993][1]
	L[993][1] = LargeX[993][0]>0 ? 1 : 0;
	satisfiable[993][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit993_1[i][0] ][ unit993_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit993_1[i][2] ][ unit993_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit993_1[i][4] ][ unit993_1[i][5] ] >0);
		X_contra = ( LargeX[993][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit993_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[993][0]=0; L[993][1]=1;}
			satisfiable[993][1]=satisfiable[993][1] & ((x[993] ^ 1) | (x[ unit993_1[i][0] ] ^ unit993_1[i][1]) |(x[ unit993_1[i][2] ] ^ unit993_1[i][3]));
			}
		if(X_contra>0) L[993][1]=2;
		}
	//Check all rules of unit[994][0]
	L[994][0] = LargeX[994][1]>0 ? 1 : 0;
	satisfiable[994][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit994_0[i][0] ][ unit994_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit994_0[i][2] ][ unit994_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit994_0[i][4] ][ unit994_0[i][5] ] >0);
		X_contra = ( LargeX[994][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit994_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[994][1]=0; L[994][0]=1;}
			satisfiable[994][0]=satisfiable[994][0] & ((x[994] ^ 0) | (x[ unit994_0[i][0] ] ^ unit994_0[i][1]) |(x[ unit994_0[i][2] ] ^ unit994_0[i][3]));
			}
		if(X_contra>0) L[994][0]=2;
		}
	//Check all rules of unit[994][1]
	L[994][1] = LargeX[994][0]>0 ? 1 : 0;
	satisfiable[994][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit994_1[i][0] ][ unit994_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit994_1[i][2] ][ unit994_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit994_1[i][4] ][ unit994_1[i][5] ] >0);
		X_contra = ( LargeX[994][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit994_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[994][0]=0; L[994][1]=1;}
			satisfiable[994][1]=satisfiable[994][1] & ((x[994] ^ 1) | (x[ unit994_1[i][0] ] ^ unit994_1[i][1]) |(x[ unit994_1[i][2] ] ^ unit994_1[i][3]));
			}
		if(X_contra>0) L[994][1]=2;
		}
	//Check all rules of unit[995][0]
	L[995][0] = LargeX[995][1]>0 ? 1 : 0;
	satisfiable[995][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit995_0[i][0] ][ unit995_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit995_0[i][2] ][ unit995_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit995_0[i][4] ][ unit995_0[i][5] ] >0);
		X_contra = ( LargeX[995][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit995_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[995][1]=0; L[995][0]=1;}
			satisfiable[995][0]=satisfiable[995][0] & ((x[995] ^ 0) | (x[ unit995_0[i][0] ] ^ unit995_0[i][1]) |(x[ unit995_0[i][2] ] ^ unit995_0[i][3]));
			}
		if(X_contra>0) L[995][0]=2;
		}
	//Check all rules of unit[995][1]
	L[995][1] = LargeX[995][0]>0 ? 1 : 0;
	satisfiable[995][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit995_1[i][0] ][ unit995_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit995_1[i][2] ][ unit995_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit995_1[i][4] ][ unit995_1[i][5] ] >0);
		X_contra = ( LargeX[995][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit995_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[995][0]=0; L[995][1]=1;}
			satisfiable[995][1]=satisfiable[995][1] & ((x[995] ^ 1) | (x[ unit995_1[i][0] ] ^ unit995_1[i][1]) |(x[ unit995_1[i][2] ] ^ unit995_1[i][3]));
			}
		if(X_contra>0) L[995][1]=2;
		}
	//Check all rules of unit[996][0]
	L[996][0] = LargeX[996][1]>0 ? 1 : 0;
	satisfiable[996][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit996_0[i][0] ][ unit996_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit996_0[i][2] ][ unit996_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit996_0[i][4] ][ unit996_0[i][5] ] >0);
		X_contra = ( LargeX[996][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit996_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[996][1]=0; L[996][0]=1;}
			satisfiable[996][0]=satisfiable[996][0] & ((x[996] ^ 0) | (x[ unit996_0[i][0] ] ^ unit996_0[i][1]) |(x[ unit996_0[i][2] ] ^ unit996_0[i][3]));
			}
		if(X_contra>0) L[996][0]=2;
		}
	//Check all rules of unit[996][1]
	L[996][1] = LargeX[996][0]>0 ? 1 : 0;
	satisfiable[996][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit996_1[i][0] ][ unit996_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit996_1[i][2] ][ unit996_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit996_1[i][4] ][ unit996_1[i][5] ] >0);
		X_contra = ( LargeX[996][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit996_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[996][0]=0; L[996][1]=1;}
			satisfiable[996][1]=satisfiable[996][1] & ((x[996] ^ 1) | (x[ unit996_1[i][0] ] ^ unit996_1[i][1]) |(x[ unit996_1[i][2] ] ^ unit996_1[i][3]));
			}
		if(X_contra>0) L[996][1]=2;
		}
	//Check all rules of unit[997][0]
	L[997][0] = LargeX[997][1]>0 ? 1 : 0;
	satisfiable[997][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit997_0[i][0] ][ unit997_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit997_0[i][2] ][ unit997_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit997_0[i][4] ][ unit997_0[i][5] ] >0);
		X_contra = ( LargeX[997][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit997_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[997][1]=0; L[997][0]=1;}
			satisfiable[997][0]=satisfiable[997][0] & ((x[997] ^ 0) | (x[ unit997_0[i][0] ] ^ unit997_0[i][1]) |(x[ unit997_0[i][2] ] ^ unit997_0[i][3]));
			}
		if(X_contra>0) L[997][0]=2;
		}
	//Check all rules of unit[997][1]
	L[997][1] = LargeX[997][0]>0 ? 1 : 0;
	satisfiable[997][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit997_1[i][0] ][ unit997_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit997_1[i][2] ][ unit997_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit997_1[i][4] ][ unit997_1[i][5] ] >0);
		X_contra = ( LargeX[997][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit997_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[997][0]=0; L[997][1]=1;}
			satisfiable[997][1]=satisfiable[997][1] & ((x[997] ^ 1) | (x[ unit997_1[i][0] ] ^ unit997_1[i][1]) |(x[ unit997_1[i][2] ] ^ unit997_1[i][3]));
			}
		if(X_contra>0) L[997][1]=2;
		}
	//Check all rules of unit[998][0]
	L[998][0] = LargeX[998][1]>0 ? 1 : 0;
	satisfiable[998][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit998_0[i][0] ][ unit998_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit998_0[i][2] ][ unit998_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit998_0[i][4] ][ unit998_0[i][5] ] >0);
		X_contra = ( LargeX[998][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit998_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[998][1]=0; L[998][0]=1;}
			satisfiable[998][0]=satisfiable[998][0] & ((x[998] ^ 0) | (x[ unit998_0[i][0] ] ^ unit998_0[i][1]) |(x[ unit998_0[i][2] ] ^ unit998_0[i][3]));
			}
		if(X_contra>0) L[998][0]=2;
		}
	//Check all rules of unit[998][1]
	L[998][1] = LargeX[998][0]>0 ? 1 : 0;
	satisfiable[998][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit998_1[i][0] ][ unit998_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit998_1[i][2] ][ unit998_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit998_1[i][4] ][ unit998_1[i][5] ] >0);
		X_contra = ( LargeX[998][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit998_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[998][0]=0; L[998][1]=1;}
			satisfiable[998][1]=satisfiable[998][1] & ((x[998] ^ 1) | (x[ unit998_1[i][0] ] ^ unit998_1[i][1]) |(x[ unit998_1[i][2] ] ^ unit998_1[i][3]));
			}
		if(X_contra>0) L[998][1]=2;
		}
	//Check all rules of unit[999][0]
	L[999][0] = LargeX[999][1]>0 ? 1 : 0;
	satisfiable[999][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit999_0[i][0] ][ unit999_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit999_0[i][2] ][ unit999_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit999_0[i][4] ][ unit999_0[i][5] ] >0);
		X_contra = ( LargeX[999][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit999_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[999][1]=0; L[999][0]=1;}
			satisfiable[999][0]=satisfiable[999][0] & ((x[999] ^ 0) | (x[ unit999_0[i][0] ] ^ unit999_0[i][1]) |(x[ unit999_0[i][2] ] ^ unit999_0[i][3]));
			}
		if(X_contra>0) L[999][0]=2;
		}
	//Check all rules of unit[999][1]
	L[999][1] = LargeX[999][0]>0 ? 1 : 0;
	satisfiable[999][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit999_1[i][0] ][ unit999_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit999_1[i][2] ][ unit999_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit999_1[i][4] ][ unit999_1[i][5] ] >0);
		X_contra = ( LargeX[999][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit999_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[999][0]=0; L[999][1]=1;}
			satisfiable[999][1]=satisfiable[999][1] & ((x[999] ^ 1) | (x[ unit999_1[i][0] ] ^ unit999_1[i][1]) |(x[ unit999_1[i][2] ] ^ unit999_1[i][3]));
			}
		if(X_contra>0) L[999][1]=2;
		}
	//Check all rules of unit[1000][0]
	L[1000][0] = LargeX[1000][1]>0 ? 1 : 0;
	satisfiable[1000][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1000_0[i][0] ][ unit1000_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1000_0[i][2] ][ unit1000_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1000_0[i][4] ][ unit1000_0[i][5] ] >0);
		X_contra = ( LargeX[1000][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1000_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1000][1]=0; L[1000][0]=1;}
			satisfiable[1000][0]=satisfiable[1000][0] & ((x[1000] ^ 0) | (x[ unit1000_0[i][0] ] ^ unit1000_0[i][1]) |(x[ unit1000_0[i][2] ] ^ unit1000_0[i][3]));
			}
		if(X_contra>0) L[1000][0]=2;
		}
	//Check all rules of unit[1000][1]
	L[1000][1] = LargeX[1000][0]>0 ? 1 : 0;
	satisfiable[1000][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1000_1[i][0] ][ unit1000_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1000_1[i][2] ][ unit1000_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1000_1[i][4] ][ unit1000_1[i][5] ] >0);
		X_contra = ( LargeX[1000][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1000_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1000][0]=0; L[1000][1]=1;}
			satisfiable[1000][1]=satisfiable[1000][1] & ((x[1000] ^ 1) | (x[ unit1000_1[i][0] ] ^ unit1000_1[i][1]) |(x[ unit1000_1[i][2] ] ^ unit1000_1[i][3]));
			}
		if(X_contra>0) L[1000][1]=2;
		}
	//Check all rules of unit[1001][0]
	L[1001][0] = LargeX[1001][1]>0 ? 1 : 0;
	satisfiable[1001][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1001_0[i][0] ][ unit1001_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1001_0[i][2] ][ unit1001_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1001_0[i][4] ][ unit1001_0[i][5] ] >0);
		X_contra = ( LargeX[1001][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1001_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1001][1]=0; L[1001][0]=1;}
			satisfiable[1001][0]=satisfiable[1001][0] & ((x[1001] ^ 0) | (x[ unit1001_0[i][0] ] ^ unit1001_0[i][1]) |(x[ unit1001_0[i][2] ] ^ unit1001_0[i][3]));
			}
		if(X_contra>0) L[1001][0]=2;
		}
	//Check all rules of unit[1001][1]
	L[1001][1] = LargeX[1001][0]>0 ? 1 : 0;
	satisfiable[1001][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1001_1[i][0] ][ unit1001_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1001_1[i][2] ][ unit1001_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1001_1[i][4] ][ unit1001_1[i][5] ] >0);
		X_contra = ( LargeX[1001][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1001_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1001][0]=0; L[1001][1]=1;}
			satisfiable[1001][1]=satisfiable[1001][1] & ((x[1001] ^ 1) | (x[ unit1001_1[i][0] ] ^ unit1001_1[i][1]) |(x[ unit1001_1[i][2] ] ^ unit1001_1[i][3]));
			}
		if(X_contra>0) L[1001][1]=2;
		}
	//Check all rules of unit[1002][0]
	L[1002][0] = LargeX[1002][1]>0 ? 1 : 0;
	satisfiable[1002][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1002_0[i][0] ][ unit1002_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1002_0[i][2] ][ unit1002_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1002_0[i][4] ][ unit1002_0[i][5] ] >0);
		X_contra = ( LargeX[1002][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1002_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1002][1]=0; L[1002][0]=1;}
			satisfiable[1002][0]=satisfiable[1002][0] & ((x[1002] ^ 0) | (x[ unit1002_0[i][0] ] ^ unit1002_0[i][1]) |(x[ unit1002_0[i][2] ] ^ unit1002_0[i][3]));
			}
		if(X_contra>0) L[1002][0]=2;
		}
	//Check all rules of unit[1002][1]
	L[1002][1] = LargeX[1002][0]>0 ? 1 : 0;
	satisfiable[1002][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1002_1[i][0] ][ unit1002_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1002_1[i][2] ][ unit1002_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1002_1[i][4] ][ unit1002_1[i][5] ] >0);
		X_contra = ( LargeX[1002][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1002_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1002][0]=0; L[1002][1]=1;}
			satisfiable[1002][1]=satisfiable[1002][1] & ((x[1002] ^ 1) | (x[ unit1002_1[i][0] ] ^ unit1002_1[i][1]) |(x[ unit1002_1[i][2] ] ^ unit1002_1[i][3]));
			}
		if(X_contra>0) L[1002][1]=2;
		}
	//Check all rules of unit[1003][0]
	L[1003][0] = LargeX[1003][1]>0 ? 1 : 0;
	satisfiable[1003][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1003_0[i][0] ][ unit1003_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1003_0[i][2] ][ unit1003_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1003_0[i][4] ][ unit1003_0[i][5] ] >0);
		X_contra = ( LargeX[1003][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1003_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1003][1]=0; L[1003][0]=1;}
			satisfiable[1003][0]=satisfiable[1003][0] & ((x[1003] ^ 0) | (x[ unit1003_0[i][0] ] ^ unit1003_0[i][1]) |(x[ unit1003_0[i][2] ] ^ unit1003_0[i][3]));
			}
		if(X_contra>0) L[1003][0]=2;
		}
	//Check all rules of unit[1003][1]
	L[1003][1] = LargeX[1003][0]>0 ? 1 : 0;
	satisfiable[1003][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1003_1[i][0] ][ unit1003_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1003_1[i][2] ][ unit1003_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1003_1[i][4] ][ unit1003_1[i][5] ] >0);
		X_contra = ( LargeX[1003][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1003_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1003][0]=0; L[1003][1]=1;}
			satisfiable[1003][1]=satisfiable[1003][1] & ((x[1003] ^ 1) | (x[ unit1003_1[i][0] ] ^ unit1003_1[i][1]) |(x[ unit1003_1[i][2] ] ^ unit1003_1[i][3]));
			}
		if(X_contra>0) L[1003][1]=2;
		}
	//Check all rules of unit[1004][0]
	L[1004][0] = LargeX[1004][1]>0 ? 1 : 0;
	satisfiable[1004][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1004_0[i][0] ][ unit1004_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1004_0[i][2] ][ unit1004_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1004_0[i][4] ][ unit1004_0[i][5] ] >0);
		X_contra = ( LargeX[1004][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1004_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1004][1]=0; L[1004][0]=1;}
			satisfiable[1004][0]=satisfiable[1004][0] & ((x[1004] ^ 0) | (x[ unit1004_0[i][0] ] ^ unit1004_0[i][1]) |(x[ unit1004_0[i][2] ] ^ unit1004_0[i][3]));
			}
		if(X_contra>0) L[1004][0]=2;
		}
	//Check all rules of unit[1004][1]
	L[1004][1] = LargeX[1004][0]>0 ? 1 : 0;
	satisfiable[1004][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1004_1[i][0] ][ unit1004_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1004_1[i][2] ][ unit1004_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1004_1[i][4] ][ unit1004_1[i][5] ] >0);
		X_contra = ( LargeX[1004][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1004_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1004][0]=0; L[1004][1]=1;}
			satisfiable[1004][1]=satisfiable[1004][1] & ((x[1004] ^ 1) | (x[ unit1004_1[i][0] ] ^ unit1004_1[i][1]) |(x[ unit1004_1[i][2] ] ^ unit1004_1[i][3]));
			}
		if(X_contra>0) L[1004][1]=2;
		}
	//Check all rules of unit[1005][0]
	L[1005][0] = LargeX[1005][1]>0 ? 1 : 0;
	satisfiable[1005][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1005_0[i][0] ][ unit1005_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1005_0[i][2] ][ unit1005_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1005_0[i][4] ][ unit1005_0[i][5] ] >0);
		X_contra = ( LargeX[1005][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1005_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1005][1]=0; L[1005][0]=1;}
			satisfiable[1005][0]=satisfiable[1005][0] & ((x[1005] ^ 0) | (x[ unit1005_0[i][0] ] ^ unit1005_0[i][1]) |(x[ unit1005_0[i][2] ] ^ unit1005_0[i][3]));
			}
		if(X_contra>0) L[1005][0]=2;
		}
	//Check all rules of unit[1005][1]
	L[1005][1] = LargeX[1005][0]>0 ? 1 : 0;
	satisfiable[1005][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1005_1[i][0] ][ unit1005_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1005_1[i][2] ][ unit1005_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1005_1[i][4] ][ unit1005_1[i][5] ] >0);
		X_contra = ( LargeX[1005][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1005_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1005][0]=0; L[1005][1]=1;}
			satisfiable[1005][1]=satisfiable[1005][1] & ((x[1005] ^ 1) | (x[ unit1005_1[i][0] ] ^ unit1005_1[i][1]) |(x[ unit1005_1[i][2] ] ^ unit1005_1[i][3]));
			}
		if(X_contra>0) L[1005][1]=2;
		}
	//Check all rules of unit[1006][0]
	L[1006][0] = LargeX[1006][1]>0 ? 1 : 0;
	satisfiable[1006][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1006_0[i][0] ][ unit1006_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1006_0[i][2] ][ unit1006_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1006_0[i][4] ][ unit1006_0[i][5] ] >0);
		X_contra = ( LargeX[1006][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1006_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1006][1]=0; L[1006][0]=1;}
			satisfiable[1006][0]=satisfiable[1006][0] & ((x[1006] ^ 0) | (x[ unit1006_0[i][0] ] ^ unit1006_0[i][1]) |(x[ unit1006_0[i][2] ] ^ unit1006_0[i][3]));
			}
		if(X_contra>0) L[1006][0]=2;
		}
	//Check all rules of unit[1006][1]
	L[1006][1] = LargeX[1006][0]>0 ? 1 : 0;
	satisfiable[1006][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1006_1[i][0] ][ unit1006_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1006_1[i][2] ][ unit1006_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1006_1[i][4] ][ unit1006_1[i][5] ] >0);
		X_contra = ( LargeX[1006][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1006_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1006][0]=0; L[1006][1]=1;}
			satisfiable[1006][1]=satisfiable[1006][1] & ((x[1006] ^ 1) | (x[ unit1006_1[i][0] ] ^ unit1006_1[i][1]) |(x[ unit1006_1[i][2] ] ^ unit1006_1[i][3]));
			}
		if(X_contra>0) L[1006][1]=2;
		}
	//Check all rules of unit[1007][0]
	L[1007][0] = LargeX[1007][1]>0 ? 1 : 0;
	satisfiable[1007][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1007_0[i][0] ][ unit1007_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1007_0[i][2] ][ unit1007_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1007_0[i][4] ][ unit1007_0[i][5] ] >0);
		X_contra = ( LargeX[1007][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1007_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1007][1]=0; L[1007][0]=1;}
			satisfiable[1007][0]=satisfiable[1007][0] & ((x[1007] ^ 0) | (x[ unit1007_0[i][0] ] ^ unit1007_0[i][1]) |(x[ unit1007_0[i][2] ] ^ unit1007_0[i][3]));
			}
		if(X_contra>0) L[1007][0]=2;
		}
	//Check all rules of unit[1007][1]
	L[1007][1] = LargeX[1007][0]>0 ? 1 : 0;
	satisfiable[1007][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1007_1[i][0] ][ unit1007_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1007_1[i][2] ][ unit1007_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1007_1[i][4] ][ unit1007_1[i][5] ] >0);
		X_contra = ( LargeX[1007][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1007_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1007][0]=0; L[1007][1]=1;}
			satisfiable[1007][1]=satisfiable[1007][1] & ((x[1007] ^ 1) | (x[ unit1007_1[i][0] ] ^ unit1007_1[i][1]) |(x[ unit1007_1[i][2] ] ^ unit1007_1[i][3]));
			}
		if(X_contra>0) L[1007][1]=2;
		}
	//Check all rules of unit[1008][0]
	L[1008][0] = LargeX[1008][1]>0 ? 1 : 0;
	satisfiable[1008][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1008_0[i][0] ][ unit1008_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1008_0[i][2] ][ unit1008_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1008_0[i][4] ][ unit1008_0[i][5] ] >0);
		X_contra = ( LargeX[1008][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1008_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1008][1]=0; L[1008][0]=1;}
			satisfiable[1008][0]=satisfiable[1008][0] & ((x[1008] ^ 0) | (x[ unit1008_0[i][0] ] ^ unit1008_0[i][1]) |(x[ unit1008_0[i][2] ] ^ unit1008_0[i][3]));
			}
		if(X_contra>0) L[1008][0]=2;
		}
	//Check all rules of unit[1008][1]
	L[1008][1] = LargeX[1008][0]>0 ? 1 : 0;
	satisfiable[1008][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1008_1[i][0] ][ unit1008_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1008_1[i][2] ][ unit1008_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1008_1[i][4] ][ unit1008_1[i][5] ] >0);
		X_contra = ( LargeX[1008][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1008_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1008][0]=0; L[1008][1]=1;}
			satisfiable[1008][1]=satisfiable[1008][1] & ((x[1008] ^ 1) | (x[ unit1008_1[i][0] ] ^ unit1008_1[i][1]) |(x[ unit1008_1[i][2] ] ^ unit1008_1[i][3]));
			}
		if(X_contra>0) L[1008][1]=2;
		}
	//Check all rules of unit[1009][0]
	L[1009][0] = LargeX[1009][1]>0 ? 1 : 0;
	satisfiable[1009][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1009_0[i][0] ][ unit1009_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1009_0[i][2] ][ unit1009_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1009_0[i][4] ][ unit1009_0[i][5] ] >0);
		X_contra = ( LargeX[1009][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1009_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1009][1]=0; L[1009][0]=1;}
			satisfiable[1009][0]=satisfiable[1009][0] & ((x[1009] ^ 0) | (x[ unit1009_0[i][0] ] ^ unit1009_0[i][1]) |(x[ unit1009_0[i][2] ] ^ unit1009_0[i][3]));
			}
		if(X_contra>0) L[1009][0]=2;
		}
	//Check all rules of unit[1009][1]
	L[1009][1] = LargeX[1009][0]>0 ? 1 : 0;
	satisfiable[1009][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1009_1[i][0] ][ unit1009_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1009_1[i][2] ][ unit1009_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1009_1[i][4] ][ unit1009_1[i][5] ] >0);
		X_contra = ( LargeX[1009][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1009_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1009][0]=0; L[1009][1]=1;}
			satisfiable[1009][1]=satisfiable[1009][1] & ((x[1009] ^ 1) | (x[ unit1009_1[i][0] ] ^ unit1009_1[i][1]) |(x[ unit1009_1[i][2] ] ^ unit1009_1[i][3]));
			}
		if(X_contra>0) L[1009][1]=2;
		}
	//Check all rules of unit[1010][0]
	L[1010][0] = LargeX[1010][1]>0 ? 1 : 0;
	satisfiable[1010][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1010_0[i][0] ][ unit1010_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1010_0[i][2] ][ unit1010_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1010_0[i][4] ][ unit1010_0[i][5] ] >0);
		X_contra = ( LargeX[1010][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1010_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1010][1]=0; L[1010][0]=1;}
			satisfiable[1010][0]=satisfiable[1010][0] & ((x[1010] ^ 0) | (x[ unit1010_0[i][0] ] ^ unit1010_0[i][1]) |(x[ unit1010_0[i][2] ] ^ unit1010_0[i][3]));
			}
		if(X_contra>0) L[1010][0]=2;
		}
	//Check all rules of unit[1010][1]
	L[1010][1] = LargeX[1010][0]>0 ? 1 : 0;
	satisfiable[1010][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1010_1[i][0] ][ unit1010_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1010_1[i][2] ][ unit1010_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1010_1[i][4] ][ unit1010_1[i][5] ] >0);
		X_contra = ( LargeX[1010][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1010_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1010][0]=0; L[1010][1]=1;}
			satisfiable[1010][1]=satisfiable[1010][1] & ((x[1010] ^ 1) | (x[ unit1010_1[i][0] ] ^ unit1010_1[i][1]) |(x[ unit1010_1[i][2] ] ^ unit1010_1[i][3]));
			}
		if(X_contra>0) L[1010][1]=2;
		}
	//Check all rules of unit[1011][0]
	L[1011][0] = LargeX[1011][1]>0 ? 1 : 0;
	satisfiable[1011][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1011_0[i][0] ][ unit1011_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1011_0[i][2] ][ unit1011_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1011_0[i][4] ][ unit1011_0[i][5] ] >0);
		X_contra = ( LargeX[1011][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1011_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1011][1]=0; L[1011][0]=1;}
			satisfiable[1011][0]=satisfiable[1011][0] & ((x[1011] ^ 0) | (x[ unit1011_0[i][0] ] ^ unit1011_0[i][1]) |(x[ unit1011_0[i][2] ] ^ unit1011_0[i][3]));
			}
		if(X_contra>0) L[1011][0]=2;
		}
	//Check all rules of unit[1011][1]
	L[1011][1] = LargeX[1011][0]>0 ? 1 : 0;
	satisfiable[1011][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1011_1[i][0] ][ unit1011_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1011_1[i][2] ][ unit1011_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1011_1[i][4] ][ unit1011_1[i][5] ] >0);
		X_contra = ( LargeX[1011][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1011_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1011][0]=0; L[1011][1]=1;}
			satisfiable[1011][1]=satisfiable[1011][1] & ((x[1011] ^ 1) | (x[ unit1011_1[i][0] ] ^ unit1011_1[i][1]) |(x[ unit1011_1[i][2] ] ^ unit1011_1[i][3]));
			}
		if(X_contra>0) L[1011][1]=2;
		}
	//Check all rules of unit[1012][0]
	L[1012][0] = LargeX[1012][1]>0 ? 1 : 0;
	satisfiable[1012][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1012_0[i][0] ][ unit1012_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1012_0[i][2] ][ unit1012_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1012_0[i][4] ][ unit1012_0[i][5] ] >0);
		X_contra = ( LargeX[1012][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1012_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1012][1]=0; L[1012][0]=1;}
			satisfiable[1012][0]=satisfiable[1012][0] & ((x[1012] ^ 0) | (x[ unit1012_0[i][0] ] ^ unit1012_0[i][1]) |(x[ unit1012_0[i][2] ] ^ unit1012_0[i][3]));
			}
		if(X_contra>0) L[1012][0]=2;
		}
	//Check all rules of unit[1012][1]
	L[1012][1] = LargeX[1012][0]>0 ? 1 : 0;
	satisfiable[1012][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1012_1[i][0] ][ unit1012_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1012_1[i][2] ][ unit1012_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1012_1[i][4] ][ unit1012_1[i][5] ] >0);
		X_contra = ( LargeX[1012][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1012_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1012][0]=0; L[1012][1]=1;}
			satisfiable[1012][1]=satisfiable[1012][1] & ((x[1012] ^ 1) | (x[ unit1012_1[i][0] ] ^ unit1012_1[i][1]) |(x[ unit1012_1[i][2] ] ^ unit1012_1[i][3]));
			}
		if(X_contra>0) L[1012][1]=2;
		}
	//Check all rules of unit[1013][0]
	L[1013][0] = LargeX[1013][1]>0 ? 1 : 0;
	satisfiable[1013][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1013_0[i][0] ][ unit1013_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1013_0[i][2] ][ unit1013_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1013_0[i][4] ][ unit1013_0[i][5] ] >0);
		X_contra = ( LargeX[1013][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1013_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1013][1]=0; L[1013][0]=1;}
			satisfiable[1013][0]=satisfiable[1013][0] & ((x[1013] ^ 0) | (x[ unit1013_0[i][0] ] ^ unit1013_0[i][1]) |(x[ unit1013_0[i][2] ] ^ unit1013_0[i][3]));
			}
		if(X_contra>0) L[1013][0]=2;
		}
	//Check all rules of unit[1013][1]
	L[1013][1] = LargeX[1013][0]>0 ? 1 : 0;
	satisfiable[1013][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1013_1[i][0] ][ unit1013_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1013_1[i][2] ][ unit1013_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1013_1[i][4] ][ unit1013_1[i][5] ] >0);
		X_contra = ( LargeX[1013][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1013_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1013][0]=0; L[1013][1]=1;}
			satisfiable[1013][1]=satisfiable[1013][1] & ((x[1013] ^ 1) | (x[ unit1013_1[i][0] ] ^ unit1013_1[i][1]) |(x[ unit1013_1[i][2] ] ^ unit1013_1[i][3]));
			}
		if(X_contra>0) L[1013][1]=2;
		}
	//Check all rules of unit[1014][0]
	L[1014][0] = LargeX[1014][1]>0 ? 1 : 0;
	satisfiable[1014][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1014_0[i][0] ][ unit1014_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1014_0[i][2] ][ unit1014_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1014_0[i][4] ][ unit1014_0[i][5] ] >0);
		X_contra = ( LargeX[1014][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1014_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1014][1]=0; L[1014][0]=1;}
			satisfiable[1014][0]=satisfiable[1014][0] & ((x[1014] ^ 0) | (x[ unit1014_0[i][0] ] ^ unit1014_0[i][1]) |(x[ unit1014_0[i][2] ] ^ unit1014_0[i][3]));
			}
		if(X_contra>0) L[1014][0]=2;
		}
	//Check all rules of unit[1014][1]
	L[1014][1] = LargeX[1014][0]>0 ? 1 : 0;
	satisfiable[1014][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1014_1[i][0] ][ unit1014_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1014_1[i][2] ][ unit1014_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1014_1[i][4] ][ unit1014_1[i][5] ] >0);
		X_contra = ( LargeX[1014][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1014_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1014][0]=0; L[1014][1]=1;}
			satisfiable[1014][1]=satisfiable[1014][1] & ((x[1014] ^ 1) | (x[ unit1014_1[i][0] ] ^ unit1014_1[i][1]) |(x[ unit1014_1[i][2] ] ^ unit1014_1[i][3]));
			}
		if(X_contra>0) L[1014][1]=2;
		}
	//Check all rules of unit[1015][0]
	L[1015][0] = LargeX[1015][1]>0 ? 1 : 0;
	satisfiable[1015][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1015_0[i][0] ][ unit1015_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1015_0[i][2] ][ unit1015_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1015_0[i][4] ][ unit1015_0[i][5] ] >0);
		X_contra = ( LargeX[1015][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1015_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1015][1]=0; L[1015][0]=1;}
			satisfiable[1015][0]=satisfiable[1015][0] & ((x[1015] ^ 0) | (x[ unit1015_0[i][0] ] ^ unit1015_0[i][1]) |(x[ unit1015_0[i][2] ] ^ unit1015_0[i][3]));
			}
		if(X_contra>0) L[1015][0]=2;
		}
	//Check all rules of unit[1015][1]
	L[1015][1] = LargeX[1015][0]>0 ? 1 : 0;
	satisfiable[1015][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1015_1[i][0] ][ unit1015_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1015_1[i][2] ][ unit1015_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1015_1[i][4] ][ unit1015_1[i][5] ] >0);
		X_contra = ( LargeX[1015][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1015_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1015][0]=0; L[1015][1]=1;}
			satisfiable[1015][1]=satisfiable[1015][1] & ((x[1015] ^ 1) | (x[ unit1015_1[i][0] ] ^ unit1015_1[i][1]) |(x[ unit1015_1[i][2] ] ^ unit1015_1[i][3]));
			}
		if(X_contra>0) L[1015][1]=2;
		}
	//Check all rules of unit[1016][0]
	L[1016][0] = LargeX[1016][1]>0 ? 1 : 0;
	satisfiable[1016][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1016_0[i][0] ][ unit1016_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1016_0[i][2] ][ unit1016_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1016_0[i][4] ][ unit1016_0[i][5] ] >0);
		X_contra = ( LargeX[1016][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1016_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1016][1]=0; L[1016][0]=1;}
			satisfiable[1016][0]=satisfiable[1016][0] & ((x[1016] ^ 0) | (x[ unit1016_0[i][0] ] ^ unit1016_0[i][1]) |(x[ unit1016_0[i][2] ] ^ unit1016_0[i][3]));
			}
		if(X_contra>0) L[1016][0]=2;
		}
	//Check all rules of unit[1016][1]
	L[1016][1] = LargeX[1016][0]>0 ? 1 : 0;
	satisfiable[1016][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1016_1[i][0] ][ unit1016_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1016_1[i][2] ][ unit1016_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1016_1[i][4] ][ unit1016_1[i][5] ] >0);
		X_contra = ( LargeX[1016][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1016_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1016][0]=0; L[1016][1]=1;}
			satisfiable[1016][1]=satisfiable[1016][1] & ((x[1016] ^ 1) | (x[ unit1016_1[i][0] ] ^ unit1016_1[i][1]) |(x[ unit1016_1[i][2] ] ^ unit1016_1[i][3]));
			}
		if(X_contra>0) L[1016][1]=2;
		}
	//Check all rules of unit[1017][0]
	L[1017][0] = LargeX[1017][1]>0 ? 1 : 0;
	satisfiable[1017][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1017_0[i][0] ][ unit1017_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1017_0[i][2] ][ unit1017_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1017_0[i][4] ][ unit1017_0[i][5] ] >0);
		X_contra = ( LargeX[1017][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1017_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1017][1]=0; L[1017][0]=1;}
			satisfiable[1017][0]=satisfiable[1017][0] & ((x[1017] ^ 0) | (x[ unit1017_0[i][0] ] ^ unit1017_0[i][1]) |(x[ unit1017_0[i][2] ] ^ unit1017_0[i][3]));
			}
		if(X_contra>0) L[1017][0]=2;
		}
	//Check all rules of unit[1017][1]
	L[1017][1] = LargeX[1017][0]>0 ? 1 : 0;
	satisfiable[1017][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1017_1[i][0] ][ unit1017_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1017_1[i][2] ][ unit1017_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1017_1[i][4] ][ unit1017_1[i][5] ] >0);
		X_contra = ( LargeX[1017][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1017_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1017][0]=0; L[1017][1]=1;}
			satisfiable[1017][1]=satisfiable[1017][1] & ((x[1017] ^ 1) | (x[ unit1017_1[i][0] ] ^ unit1017_1[i][1]) |(x[ unit1017_1[i][2] ] ^ unit1017_1[i][3]));
			}
		if(X_contra>0) L[1017][1]=2;
		}
	//Check all rules of unit[1018][0]
	L[1018][0] = LargeX[1018][1]>0 ? 1 : 0;
	satisfiable[1018][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1018_0[i][0] ][ unit1018_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1018_0[i][2] ][ unit1018_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1018_0[i][4] ][ unit1018_0[i][5] ] >0);
		X_contra = ( LargeX[1018][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1018_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1018][1]=0; L[1018][0]=1;}
			satisfiable[1018][0]=satisfiable[1018][0] & ((x[1018] ^ 0) | (x[ unit1018_0[i][0] ] ^ unit1018_0[i][1]) |(x[ unit1018_0[i][2] ] ^ unit1018_0[i][3]));
			}
		if(X_contra>0) L[1018][0]=2;
		}
	//Check all rules of unit[1018][1]
	L[1018][1] = LargeX[1018][0]>0 ? 1 : 0;
	satisfiable[1018][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1018_1[i][0] ][ unit1018_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1018_1[i][2] ][ unit1018_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1018_1[i][4] ][ unit1018_1[i][5] ] >0);
		X_contra = ( LargeX[1018][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1018_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1018][0]=0; L[1018][1]=1;}
			satisfiable[1018][1]=satisfiable[1018][1] & ((x[1018] ^ 1) | (x[ unit1018_1[i][0] ] ^ unit1018_1[i][1]) |(x[ unit1018_1[i][2] ] ^ unit1018_1[i][3]));
			}
		if(X_contra>0) L[1018][1]=2;
		}
	//Check all rules of unit[1019][0]
	L[1019][0] = LargeX[1019][1]>0 ? 1 : 0;
	satisfiable[1019][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1019_0[i][0] ][ unit1019_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1019_0[i][2] ][ unit1019_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1019_0[i][4] ][ unit1019_0[i][5] ] >0);
		X_contra = ( LargeX[1019][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1019_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1019][1]=0; L[1019][0]=1;}
			satisfiable[1019][0]=satisfiable[1019][0] & ((x[1019] ^ 0) | (x[ unit1019_0[i][0] ] ^ unit1019_0[i][1]) |(x[ unit1019_0[i][2] ] ^ unit1019_0[i][3]));
			}
		if(X_contra>0) L[1019][0]=2;
		}
	//Check all rules of unit[1019][1]
	L[1019][1] = LargeX[1019][0]>0 ? 1 : 0;
	satisfiable[1019][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1019_1[i][0] ][ unit1019_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1019_1[i][2] ][ unit1019_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1019_1[i][4] ][ unit1019_1[i][5] ] >0);
		X_contra = ( LargeX[1019][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1019_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1019][0]=0; L[1019][1]=1;}
			satisfiable[1019][1]=satisfiable[1019][1] & ((x[1019] ^ 1) | (x[ unit1019_1[i][0] ] ^ unit1019_1[i][1]) |(x[ unit1019_1[i][2] ] ^ unit1019_1[i][3]));
			}
		if(X_contra>0) L[1019][1]=2;
		}
	//Check all rules of unit[1020][0]
	L[1020][0] = LargeX[1020][1]>0 ? 1 : 0;
	satisfiable[1020][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1020_0[i][0] ][ unit1020_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1020_0[i][2] ][ unit1020_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1020_0[i][4] ][ unit1020_0[i][5] ] >0);
		X_contra = ( LargeX[1020][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1020_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1020][1]=0; L[1020][0]=1;}
			satisfiable[1020][0]=satisfiable[1020][0] & ((x[1020] ^ 0) | (x[ unit1020_0[i][0] ] ^ unit1020_0[i][1]) |(x[ unit1020_0[i][2] ] ^ unit1020_0[i][3]));
			}
		if(X_contra>0) L[1020][0]=2;
		}
	//Check all rules of unit[1020][1]
	L[1020][1] = LargeX[1020][0]>0 ? 1 : 0;
	satisfiable[1020][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1020_1[i][0] ][ unit1020_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1020_1[i][2] ][ unit1020_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1020_1[i][4] ][ unit1020_1[i][5] ] >0);
		X_contra = ( LargeX[1020][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1020_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1020][0]=0; L[1020][1]=1;}
			satisfiable[1020][1]=satisfiable[1020][1] & ((x[1020] ^ 1) | (x[ unit1020_1[i][0] ] ^ unit1020_1[i][1]) |(x[ unit1020_1[i][2] ] ^ unit1020_1[i][3]));
			}
		if(X_contra>0) L[1020][1]=2;
		}
	//Check all rules of unit[1021][0]
	L[1021][0] = LargeX[1021][1]>0 ? 1 : 0;
	satisfiable[1021][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1021_0[i][0] ][ unit1021_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1021_0[i][2] ][ unit1021_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1021_0[i][4] ][ unit1021_0[i][5] ] >0);
		X_contra = ( LargeX[1021][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1021_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1021][1]=0; L[1021][0]=1;}
			satisfiable[1021][0]=satisfiable[1021][0] & ((x[1021] ^ 0) | (x[ unit1021_0[i][0] ] ^ unit1021_0[i][1]) |(x[ unit1021_0[i][2] ] ^ unit1021_0[i][3]));
			}
		if(X_contra>0) L[1021][0]=2;
		}
	//Check all rules of unit[1021][1]
	L[1021][1] = LargeX[1021][0]>0 ? 1 : 0;
	satisfiable[1021][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1021_1[i][0] ][ unit1021_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1021_1[i][2] ][ unit1021_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1021_1[i][4] ][ unit1021_1[i][5] ] >0);
		X_contra = ( LargeX[1021][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1021_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1021][0]=0; L[1021][1]=1;}
			satisfiable[1021][1]=satisfiable[1021][1] & ((x[1021] ^ 1) | (x[ unit1021_1[i][0] ] ^ unit1021_1[i][1]) |(x[ unit1021_1[i][2] ] ^ unit1021_1[i][3]));
			}
		if(X_contra>0) L[1021][1]=2;
		}
	//Check all rules of unit[1022][0]
	L[1022][0] = LargeX[1022][1]>0 ? 1 : 0;
	satisfiable[1022][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1022_0[i][0] ][ unit1022_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1022_0[i][2] ][ unit1022_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1022_0[i][4] ][ unit1022_0[i][5] ] >0);
		X_contra = ( LargeX[1022][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1022_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1022][1]=0; L[1022][0]=1;}
			satisfiable[1022][0]=satisfiable[1022][0] & ((x[1022] ^ 0) | (x[ unit1022_0[i][0] ] ^ unit1022_0[i][1]) |(x[ unit1022_0[i][2] ] ^ unit1022_0[i][3]));
			}
		if(X_contra>0) L[1022][0]=2;
		}
	//Check all rules of unit[1022][1]
	L[1022][1] = LargeX[1022][0]>0 ? 1 : 0;
	satisfiable[1022][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1022_1[i][0] ][ unit1022_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1022_1[i][2] ][ unit1022_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1022_1[i][4] ][ unit1022_1[i][5] ] >0);
		X_contra = ( LargeX[1022][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1022_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1022][0]=0; L[1022][1]=1;}
			satisfiable[1022][1]=satisfiable[1022][1] & ((x[1022] ^ 1) | (x[ unit1022_1[i][0] ] ^ unit1022_1[i][1]) |(x[ unit1022_1[i][2] ] ^ unit1022_1[i][3]));
			}
		if(X_contra>0) L[1022][1]=2;
		}
	//Check all rules of unit[1023][0]
	L[1023][0] = LargeX[1023][1]>0 ? 1 : 0;
	satisfiable[1023][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1023_0[i][0] ][ unit1023_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1023_0[i][2] ][ unit1023_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1023_0[i][4] ][ unit1023_0[i][5] ] >0);
		X_contra = ( LargeX[1023][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1023_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1023][1]=0; L[1023][0]=1;}
			satisfiable[1023][0]=satisfiable[1023][0] & ((x[1023] ^ 0) | (x[ unit1023_0[i][0] ] ^ unit1023_0[i][1]) |(x[ unit1023_0[i][2] ] ^ unit1023_0[i][3]));
			}
		if(X_contra>0) L[1023][0]=2;
		}
	//Check all rules of unit[1023][1]
	L[1023][1] = LargeX[1023][0]>0 ? 1 : 0;
	satisfiable[1023][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1023_1[i][0] ][ unit1023_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1023_1[i][2] ][ unit1023_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1023_1[i][4] ][ unit1023_1[i][5] ] >0);
		X_contra = ( LargeX[1023][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1023_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1023][0]=0; L[1023][1]=1;}
			satisfiable[1023][1]=satisfiable[1023][1] & ((x[1023] ^ 1) | (x[ unit1023_1[i][0] ] ^ unit1023_1[i][1]) |(x[ unit1023_1[i][2] ] ^ unit1023_1[i][3]));
			}
		if(X_contra>0) L[1023][1]=2;
		}
	//Check all rules of unit[1024][0]
	L[1024][0] = LargeX[1024][1]>0 ? 1 : 0;
	satisfiable[1024][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1024_0[i][0] ][ unit1024_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1024_0[i][2] ][ unit1024_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1024_0[i][4] ][ unit1024_0[i][5] ] >0);
		X_contra = ( LargeX[1024][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1024_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1024][1]=0; L[1024][0]=1;}
			satisfiable[1024][0]=satisfiable[1024][0] & ((x[1024] ^ 0) | (x[ unit1024_0[i][0] ] ^ unit1024_0[i][1]) |(x[ unit1024_0[i][2] ] ^ unit1024_0[i][3]));
			}
		if(X_contra>0) L[1024][0]=2;
		}
	//Check all rules of unit[1024][1]
	L[1024][1] = LargeX[1024][0]>0 ? 1 : 0;
	satisfiable[1024][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1024_1[i][0] ][ unit1024_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1024_1[i][2] ][ unit1024_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1024_1[i][4] ][ unit1024_1[i][5] ] >0);
		X_contra = ( LargeX[1024][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1024_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1024][0]=0; L[1024][1]=1;}
			satisfiable[1024][1]=satisfiable[1024][1] & ((x[1024] ^ 1) | (x[ unit1024_1[i][0] ] ^ unit1024_1[i][1]) |(x[ unit1024_1[i][2] ] ^ unit1024_1[i][3]));
			}
		if(X_contra>0) L[1024][1]=2;
		}
	//Check all rules of unit[1025][0]
	L[1025][0] = LargeX[1025][1]>0 ? 1 : 0;
	satisfiable[1025][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1025_0[i][0] ][ unit1025_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1025_0[i][2] ][ unit1025_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1025_0[i][4] ][ unit1025_0[i][5] ] >0);
		X_contra = ( LargeX[1025][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1025_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1025][1]=0; L[1025][0]=1;}
			satisfiable[1025][0]=satisfiable[1025][0] & ((x[1025] ^ 0) | (x[ unit1025_0[i][0] ] ^ unit1025_0[i][1]) |(x[ unit1025_0[i][2] ] ^ unit1025_0[i][3]));
			}
		if(X_contra>0) L[1025][0]=2;
		}
	//Check all rules of unit[1025][1]
	L[1025][1] = LargeX[1025][0]>0 ? 1 : 0;
	satisfiable[1025][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1025_1[i][0] ][ unit1025_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1025_1[i][2] ][ unit1025_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1025_1[i][4] ][ unit1025_1[i][5] ] >0);
		X_contra = ( LargeX[1025][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1025_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1025][0]=0; L[1025][1]=1;}
			satisfiable[1025][1]=satisfiable[1025][1] & ((x[1025] ^ 1) | (x[ unit1025_1[i][0] ] ^ unit1025_1[i][1]) |(x[ unit1025_1[i][2] ] ^ unit1025_1[i][3]));
			}
		if(X_contra>0) L[1025][1]=2;
		}
	//Check all rules of unit[1026][0]
	L[1026][0] = LargeX[1026][1]>0 ? 1 : 0;
	satisfiable[1026][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1026_0[i][0] ][ unit1026_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1026_0[i][2] ][ unit1026_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1026_0[i][4] ][ unit1026_0[i][5] ] >0);
		X_contra = ( LargeX[1026][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1026_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1026][1]=0; L[1026][0]=1;}
			satisfiable[1026][0]=satisfiable[1026][0] & ((x[1026] ^ 0) | (x[ unit1026_0[i][0] ] ^ unit1026_0[i][1]) |(x[ unit1026_0[i][2] ] ^ unit1026_0[i][3]));
			}
		if(X_contra>0) L[1026][0]=2;
		}
	//Check all rules of unit[1026][1]
	L[1026][1] = LargeX[1026][0]>0 ? 1 : 0;
	satisfiable[1026][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1026_1[i][0] ][ unit1026_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1026_1[i][2] ][ unit1026_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1026_1[i][4] ][ unit1026_1[i][5] ] >0);
		X_contra = ( LargeX[1026][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1026_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1026][0]=0; L[1026][1]=1;}
			satisfiable[1026][1]=satisfiable[1026][1] & ((x[1026] ^ 1) | (x[ unit1026_1[i][0] ] ^ unit1026_1[i][1]) |(x[ unit1026_1[i][2] ] ^ unit1026_1[i][3]));
			}
		if(X_contra>0) L[1026][1]=2;
		}
	//Check all rules of unit[1027][0]
	L[1027][0] = LargeX[1027][1]>0 ? 1 : 0;
	satisfiable[1027][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1027_0[i][0] ][ unit1027_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1027_0[i][2] ][ unit1027_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1027_0[i][4] ][ unit1027_0[i][5] ] >0);
		X_contra = ( LargeX[1027][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1027_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1027][1]=0; L[1027][0]=1;}
			satisfiable[1027][0]=satisfiable[1027][0] & ((x[1027] ^ 0) | (x[ unit1027_0[i][0] ] ^ unit1027_0[i][1]) |(x[ unit1027_0[i][2] ] ^ unit1027_0[i][3]));
			}
		if(X_contra>0) L[1027][0]=2;
		}
	//Check all rules of unit[1027][1]
	L[1027][1] = LargeX[1027][0]>0 ? 1 : 0;
	satisfiable[1027][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1027_1[i][0] ][ unit1027_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1027_1[i][2] ][ unit1027_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1027_1[i][4] ][ unit1027_1[i][5] ] >0);
		X_contra = ( LargeX[1027][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1027_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1027][0]=0; L[1027][1]=1;}
			satisfiable[1027][1]=satisfiable[1027][1] & ((x[1027] ^ 1) | (x[ unit1027_1[i][0] ] ^ unit1027_1[i][1]) |(x[ unit1027_1[i][2] ] ^ unit1027_1[i][3]));
			}
		if(X_contra>0) L[1027][1]=2;
		}
	//Check all rules of unit[1028][0]
	L[1028][0] = LargeX[1028][1]>0 ? 1 : 0;
	satisfiable[1028][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1028_0[i][0] ][ unit1028_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1028_0[i][2] ][ unit1028_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1028_0[i][4] ][ unit1028_0[i][5] ] >0);
		X_contra = ( LargeX[1028][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1028_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1028][1]=0; L[1028][0]=1;}
			satisfiable[1028][0]=satisfiable[1028][0] & ((x[1028] ^ 0) | (x[ unit1028_0[i][0] ] ^ unit1028_0[i][1]) |(x[ unit1028_0[i][2] ] ^ unit1028_0[i][3]));
			}
		if(X_contra>0) L[1028][0]=2;
		}
	//Check all rules of unit[1028][1]
	L[1028][1] = LargeX[1028][0]>0 ? 1 : 0;
	satisfiable[1028][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1028_1[i][0] ][ unit1028_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1028_1[i][2] ][ unit1028_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1028_1[i][4] ][ unit1028_1[i][5] ] >0);
		X_contra = ( LargeX[1028][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1028_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1028][0]=0; L[1028][1]=1;}
			satisfiable[1028][1]=satisfiable[1028][1] & ((x[1028] ^ 1) | (x[ unit1028_1[i][0] ] ^ unit1028_1[i][1]) |(x[ unit1028_1[i][2] ] ^ unit1028_1[i][3]));
			}
		if(X_contra>0) L[1028][1]=2;
		}
	//Check all rules of unit[1029][0]
	L[1029][0] = LargeX[1029][1]>0 ? 1 : 0;
	satisfiable[1029][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1029_0[i][0] ][ unit1029_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1029_0[i][2] ][ unit1029_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1029_0[i][4] ][ unit1029_0[i][5] ] >0);
		X_contra = ( LargeX[1029][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1029_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1029][1]=0; L[1029][0]=1;}
			satisfiable[1029][0]=satisfiable[1029][0] & ((x[1029] ^ 0) | (x[ unit1029_0[i][0] ] ^ unit1029_0[i][1]) |(x[ unit1029_0[i][2] ] ^ unit1029_0[i][3]));
			}
		if(X_contra>0) L[1029][0]=2;
		}
	//Check all rules of unit[1029][1]
	L[1029][1] = LargeX[1029][0]>0 ? 1 : 0;
	satisfiable[1029][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1029_1[i][0] ][ unit1029_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1029_1[i][2] ][ unit1029_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1029_1[i][4] ][ unit1029_1[i][5] ] >0);
		X_contra = ( LargeX[1029][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1029_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1029][0]=0; L[1029][1]=1;}
			satisfiable[1029][1]=satisfiable[1029][1] & ((x[1029] ^ 1) | (x[ unit1029_1[i][0] ] ^ unit1029_1[i][1]) |(x[ unit1029_1[i][2] ] ^ unit1029_1[i][3]));
			}
		if(X_contra>0) L[1029][1]=2;
		}
	//Check all rules of unit[1030][0]
	L[1030][0] = LargeX[1030][1]>0 ? 1 : 0;
	satisfiable[1030][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1030_0[i][0] ][ unit1030_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1030_0[i][2] ][ unit1030_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1030_0[i][4] ][ unit1030_0[i][5] ] >0);
		X_contra = ( LargeX[1030][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1030_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1030][1]=0; L[1030][0]=1;}
			satisfiable[1030][0]=satisfiable[1030][0] & ((x[1030] ^ 0) | (x[ unit1030_0[i][0] ] ^ unit1030_0[i][1]) |(x[ unit1030_0[i][2] ] ^ unit1030_0[i][3]));
			}
		if(X_contra>0) L[1030][0]=2;
		}
	//Check all rules of unit[1030][1]
	L[1030][1] = LargeX[1030][0]>0 ? 1 : 0;
	satisfiable[1030][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1030_1[i][0] ][ unit1030_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1030_1[i][2] ][ unit1030_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1030_1[i][4] ][ unit1030_1[i][5] ] >0);
		X_contra = ( LargeX[1030][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1030_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1030][0]=0; L[1030][1]=1;}
			satisfiable[1030][1]=satisfiable[1030][1] & ((x[1030] ^ 1) | (x[ unit1030_1[i][0] ] ^ unit1030_1[i][1]) |(x[ unit1030_1[i][2] ] ^ unit1030_1[i][3]));
			}
		if(X_contra>0) L[1030][1]=2;
		}
	//Check all rules of unit[1031][0]
	L[1031][0] = LargeX[1031][1]>0 ? 1 : 0;
	satisfiable[1031][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1031_0[i][0] ][ unit1031_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1031_0[i][2] ][ unit1031_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1031_0[i][4] ][ unit1031_0[i][5] ] >0);
		X_contra = ( LargeX[1031][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1031_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1031][1]=0; L[1031][0]=1;}
			satisfiable[1031][0]=satisfiable[1031][0] & ((x[1031] ^ 0) | (x[ unit1031_0[i][0] ] ^ unit1031_0[i][1]) |(x[ unit1031_0[i][2] ] ^ unit1031_0[i][3]));
			}
		if(X_contra>0) L[1031][0]=2;
		}
	//Check all rules of unit[1031][1]
	L[1031][1] = LargeX[1031][0]>0 ? 1 : 0;
	satisfiable[1031][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1031_1[i][0] ][ unit1031_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1031_1[i][2] ][ unit1031_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1031_1[i][4] ][ unit1031_1[i][5] ] >0);
		X_contra = ( LargeX[1031][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1031_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1031][0]=0; L[1031][1]=1;}
			satisfiable[1031][1]=satisfiable[1031][1] & ((x[1031] ^ 1) | (x[ unit1031_1[i][0] ] ^ unit1031_1[i][1]) |(x[ unit1031_1[i][2] ] ^ unit1031_1[i][3]));
			}
		if(X_contra>0) L[1031][1]=2;
		}
	//Check all rules of unit[1032][0]
	L[1032][0] = LargeX[1032][1]>0 ? 1 : 0;
	satisfiable[1032][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1032_0[i][0] ][ unit1032_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1032_0[i][2] ][ unit1032_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1032_0[i][4] ][ unit1032_0[i][5] ] >0);
		X_contra = ( LargeX[1032][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1032_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1032][1]=0; L[1032][0]=1;}
			satisfiable[1032][0]=satisfiable[1032][0] & ((x[1032] ^ 0) | (x[ unit1032_0[i][0] ] ^ unit1032_0[i][1]) |(x[ unit1032_0[i][2] ] ^ unit1032_0[i][3]));
			}
		if(X_contra>0) L[1032][0]=2;
		}
	//Check all rules of unit[1032][1]
	L[1032][1] = LargeX[1032][0]>0 ? 1 : 0;
	satisfiable[1032][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1032_1[i][0] ][ unit1032_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1032_1[i][2] ][ unit1032_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1032_1[i][4] ][ unit1032_1[i][5] ] >0);
		X_contra = ( LargeX[1032][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1032_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1032][0]=0; L[1032][1]=1;}
			satisfiable[1032][1]=satisfiable[1032][1] & ((x[1032] ^ 1) | (x[ unit1032_1[i][0] ] ^ unit1032_1[i][1]) |(x[ unit1032_1[i][2] ] ^ unit1032_1[i][3]));
			}
		if(X_contra>0) L[1032][1]=2;
		}
	//Check all rules of unit[1033][0]
	L[1033][0] = LargeX[1033][1]>0 ? 1 : 0;
	satisfiable[1033][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1033_0[i][0] ][ unit1033_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1033_0[i][2] ][ unit1033_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1033_0[i][4] ][ unit1033_0[i][5] ] >0);
		X_contra = ( LargeX[1033][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1033_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1033][1]=0; L[1033][0]=1;}
			satisfiable[1033][0]=satisfiable[1033][0] & ((x[1033] ^ 0) | (x[ unit1033_0[i][0] ] ^ unit1033_0[i][1]) |(x[ unit1033_0[i][2] ] ^ unit1033_0[i][3]));
			}
		if(X_contra>0) L[1033][0]=2;
		}
	//Check all rules of unit[1033][1]
	L[1033][1] = LargeX[1033][0]>0 ? 1 : 0;
	satisfiable[1033][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1033_1[i][0] ][ unit1033_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1033_1[i][2] ][ unit1033_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1033_1[i][4] ][ unit1033_1[i][5] ] >0);
		X_contra = ( LargeX[1033][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1033_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1033][0]=0; L[1033][1]=1;}
			satisfiable[1033][1]=satisfiable[1033][1] & ((x[1033] ^ 1) | (x[ unit1033_1[i][0] ] ^ unit1033_1[i][1]) |(x[ unit1033_1[i][2] ] ^ unit1033_1[i][3]));
			}
		if(X_contra>0) L[1033][1]=2;
		}
	//Check all rules of unit[1034][0]
	L[1034][0] = LargeX[1034][1]>0 ? 1 : 0;
	satisfiable[1034][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1034_0[i][0] ][ unit1034_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1034_0[i][2] ][ unit1034_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1034_0[i][4] ][ unit1034_0[i][5] ] >0);
		X_contra = ( LargeX[1034][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1034_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1034][1]=0; L[1034][0]=1;}
			satisfiable[1034][0]=satisfiable[1034][0] & ((x[1034] ^ 0) | (x[ unit1034_0[i][0] ] ^ unit1034_0[i][1]) |(x[ unit1034_0[i][2] ] ^ unit1034_0[i][3]));
			}
		if(X_contra>0) L[1034][0]=2;
		}
	//Check all rules of unit[1034][1]
	L[1034][1] = LargeX[1034][0]>0 ? 1 : 0;
	satisfiable[1034][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1034_1[i][0] ][ unit1034_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1034_1[i][2] ][ unit1034_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1034_1[i][4] ][ unit1034_1[i][5] ] >0);
		X_contra = ( LargeX[1034][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1034_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1034][0]=0; L[1034][1]=1;}
			satisfiable[1034][1]=satisfiable[1034][1] & ((x[1034] ^ 1) | (x[ unit1034_1[i][0] ] ^ unit1034_1[i][1]) |(x[ unit1034_1[i][2] ] ^ unit1034_1[i][3]));
			}
		if(X_contra>0) L[1034][1]=2;
		}
	//Check all rules of unit[1035][0]
	L[1035][0] = LargeX[1035][1]>0 ? 1 : 0;
	satisfiable[1035][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1035_0[i][0] ][ unit1035_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1035_0[i][2] ][ unit1035_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1035_0[i][4] ][ unit1035_0[i][5] ] >0);
		X_contra = ( LargeX[1035][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1035_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1035][1]=0; L[1035][0]=1;}
			satisfiable[1035][0]=satisfiable[1035][0] & ((x[1035] ^ 0) | (x[ unit1035_0[i][0] ] ^ unit1035_0[i][1]) |(x[ unit1035_0[i][2] ] ^ unit1035_0[i][3]));
			}
		if(X_contra>0) L[1035][0]=2;
		}
	//Check all rules of unit[1035][1]
	L[1035][1] = LargeX[1035][0]>0 ? 1 : 0;
	satisfiable[1035][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1035_1[i][0] ][ unit1035_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1035_1[i][2] ][ unit1035_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1035_1[i][4] ][ unit1035_1[i][5] ] >0);
		X_contra = ( LargeX[1035][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1035_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1035][0]=0; L[1035][1]=1;}
			satisfiable[1035][1]=satisfiable[1035][1] & ((x[1035] ^ 1) | (x[ unit1035_1[i][0] ] ^ unit1035_1[i][1]) |(x[ unit1035_1[i][2] ] ^ unit1035_1[i][3]));
			}
		if(X_contra>0) L[1035][1]=2;
		}
	//Check all rules of unit[1036][0]
	L[1036][0] = LargeX[1036][1]>0 ? 1 : 0;
	satisfiable[1036][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1036_0[i][0] ][ unit1036_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1036_0[i][2] ][ unit1036_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1036_0[i][4] ][ unit1036_0[i][5] ] >0);
		X_contra = ( LargeX[1036][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1036_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1036][1]=0; L[1036][0]=1;}
			satisfiable[1036][0]=satisfiable[1036][0] & ((x[1036] ^ 0) | (x[ unit1036_0[i][0] ] ^ unit1036_0[i][1]) |(x[ unit1036_0[i][2] ] ^ unit1036_0[i][3]));
			}
		if(X_contra>0) L[1036][0]=2;
		}
	//Check all rules of unit[1036][1]
	L[1036][1] = LargeX[1036][0]>0 ? 1 : 0;
	satisfiable[1036][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1036_1[i][0] ][ unit1036_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1036_1[i][2] ][ unit1036_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1036_1[i][4] ][ unit1036_1[i][5] ] >0);
		X_contra = ( LargeX[1036][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1036_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1036][0]=0; L[1036][1]=1;}
			satisfiable[1036][1]=satisfiable[1036][1] & ((x[1036] ^ 1) | (x[ unit1036_1[i][0] ] ^ unit1036_1[i][1]) |(x[ unit1036_1[i][2] ] ^ unit1036_1[i][3]));
			}
		if(X_contra>0) L[1036][1]=2;
		}
	//Check all rules of unit[1037][0]
	L[1037][0] = LargeX[1037][1]>0 ? 1 : 0;
	satisfiable[1037][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1037_0[i][0] ][ unit1037_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1037_0[i][2] ][ unit1037_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1037_0[i][4] ][ unit1037_0[i][5] ] >0);
		X_contra = ( LargeX[1037][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1037_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1037][1]=0; L[1037][0]=1;}
			satisfiable[1037][0]=satisfiable[1037][0] & ((x[1037] ^ 0) | (x[ unit1037_0[i][0] ] ^ unit1037_0[i][1]) |(x[ unit1037_0[i][2] ] ^ unit1037_0[i][3]));
			}
		if(X_contra>0) L[1037][0]=2;
		}
	//Check all rules of unit[1037][1]
	L[1037][1] = LargeX[1037][0]>0 ? 1 : 0;
	satisfiable[1037][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1037_1[i][0] ][ unit1037_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1037_1[i][2] ][ unit1037_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1037_1[i][4] ][ unit1037_1[i][5] ] >0);
		X_contra = ( LargeX[1037][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1037_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1037][0]=0; L[1037][1]=1;}
			satisfiable[1037][1]=satisfiable[1037][1] & ((x[1037] ^ 1) | (x[ unit1037_1[i][0] ] ^ unit1037_1[i][1]) |(x[ unit1037_1[i][2] ] ^ unit1037_1[i][3]));
			}
		if(X_contra>0) L[1037][1]=2;
		}
	//Check all rules of unit[1038][0]
	L[1038][0] = LargeX[1038][1]>0 ? 1 : 0;
	satisfiable[1038][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1038_0[i][0] ][ unit1038_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1038_0[i][2] ][ unit1038_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1038_0[i][4] ][ unit1038_0[i][5] ] >0);
		X_contra = ( LargeX[1038][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1038_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1038][1]=0; L[1038][0]=1;}
			satisfiable[1038][0]=satisfiable[1038][0] & ((x[1038] ^ 0) | (x[ unit1038_0[i][0] ] ^ unit1038_0[i][1]) |(x[ unit1038_0[i][2] ] ^ unit1038_0[i][3]));
			}
		if(X_contra>0) L[1038][0]=2;
		}
	//Check all rules of unit[1038][1]
	L[1038][1] = LargeX[1038][0]>0 ? 1 : 0;
	satisfiable[1038][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1038_1[i][0] ][ unit1038_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1038_1[i][2] ][ unit1038_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1038_1[i][4] ][ unit1038_1[i][5] ] >0);
		X_contra = ( LargeX[1038][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1038_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1038][0]=0; L[1038][1]=1;}
			satisfiable[1038][1]=satisfiable[1038][1] & ((x[1038] ^ 1) | (x[ unit1038_1[i][0] ] ^ unit1038_1[i][1]) |(x[ unit1038_1[i][2] ] ^ unit1038_1[i][3]));
			}
		if(X_contra>0) L[1038][1]=2;
		}
	//Check all rules of unit[1039][0]
	L[1039][0] = LargeX[1039][1]>0 ? 1 : 0;
	satisfiable[1039][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1039_0[i][0] ][ unit1039_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1039_0[i][2] ][ unit1039_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1039_0[i][4] ][ unit1039_0[i][5] ] >0);
		X_contra = ( LargeX[1039][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1039_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1039][1]=0; L[1039][0]=1;}
			satisfiable[1039][0]=satisfiable[1039][0] & ((x[1039] ^ 0) | (x[ unit1039_0[i][0] ] ^ unit1039_0[i][1]) |(x[ unit1039_0[i][2] ] ^ unit1039_0[i][3]));
			}
		if(X_contra>0) L[1039][0]=2;
		}
	//Check all rules of unit[1039][1]
	L[1039][1] = LargeX[1039][0]>0 ? 1 : 0;
	satisfiable[1039][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1039_1[i][0] ][ unit1039_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1039_1[i][2] ][ unit1039_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1039_1[i][4] ][ unit1039_1[i][5] ] >0);
		X_contra = ( LargeX[1039][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1039_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1039][0]=0; L[1039][1]=1;}
			satisfiable[1039][1]=satisfiable[1039][1] & ((x[1039] ^ 1) | (x[ unit1039_1[i][0] ] ^ unit1039_1[i][1]) |(x[ unit1039_1[i][2] ] ^ unit1039_1[i][3]));
			}
		if(X_contra>0) L[1039][1]=2;
		}
	//Check all rules of unit[1040][0]
	L[1040][0] = LargeX[1040][1]>0 ? 1 : 0;
	satisfiable[1040][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1040_0[i][0] ][ unit1040_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1040_0[i][2] ][ unit1040_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1040_0[i][4] ][ unit1040_0[i][5] ] >0);
		X_contra = ( LargeX[1040][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1040_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1040][1]=0; L[1040][0]=1;}
			satisfiable[1040][0]=satisfiable[1040][0] & ((x[1040] ^ 0) | (x[ unit1040_0[i][0] ] ^ unit1040_0[i][1]) |(x[ unit1040_0[i][2] ] ^ unit1040_0[i][3]));
			}
		if(X_contra>0) L[1040][0]=2;
		}
	//Check all rules of unit[1040][1]
	L[1040][1] = LargeX[1040][0]>0 ? 1 : 0;
	satisfiable[1040][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1040_1[i][0] ][ unit1040_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1040_1[i][2] ][ unit1040_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1040_1[i][4] ][ unit1040_1[i][5] ] >0);
		X_contra = ( LargeX[1040][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1040_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1040][0]=0; L[1040][1]=1;}
			satisfiable[1040][1]=satisfiable[1040][1] & ((x[1040] ^ 1) | (x[ unit1040_1[i][0] ] ^ unit1040_1[i][1]) |(x[ unit1040_1[i][2] ] ^ unit1040_1[i][3]));
			}
		if(X_contra>0) L[1040][1]=2;
		}
	//Check all rules of unit[1041][0]
	L[1041][0] = LargeX[1041][1]>0 ? 1 : 0;
	satisfiable[1041][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1041_0[i][0] ][ unit1041_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1041_0[i][2] ][ unit1041_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1041_0[i][4] ][ unit1041_0[i][5] ] >0);
		X_contra = ( LargeX[1041][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1041_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1041][1]=0; L[1041][0]=1;}
			satisfiable[1041][0]=satisfiable[1041][0] & ((x[1041] ^ 0) | (x[ unit1041_0[i][0] ] ^ unit1041_0[i][1]) |(x[ unit1041_0[i][2] ] ^ unit1041_0[i][3]));
			}
		if(X_contra>0) L[1041][0]=2;
		}
	//Check all rules of unit[1041][1]
	L[1041][1] = LargeX[1041][0]>0 ? 1 : 0;
	satisfiable[1041][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1041_1[i][0] ][ unit1041_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1041_1[i][2] ][ unit1041_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1041_1[i][4] ][ unit1041_1[i][5] ] >0);
		X_contra = ( LargeX[1041][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1041_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1041][0]=0; L[1041][1]=1;}
			satisfiable[1041][1]=satisfiable[1041][1] & ((x[1041] ^ 1) | (x[ unit1041_1[i][0] ] ^ unit1041_1[i][1]) |(x[ unit1041_1[i][2] ] ^ unit1041_1[i][3]));
			}
		if(X_contra>0) L[1041][1]=2;
		}
	//Check all rules of unit[1042][0]
	L[1042][0] = LargeX[1042][1]>0 ? 1 : 0;
	satisfiable[1042][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1042_0[i][0] ][ unit1042_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1042_0[i][2] ][ unit1042_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1042_0[i][4] ][ unit1042_0[i][5] ] >0);
		X_contra = ( LargeX[1042][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1042_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1042][1]=0; L[1042][0]=1;}
			satisfiable[1042][0]=satisfiable[1042][0] & ((x[1042] ^ 0) | (x[ unit1042_0[i][0] ] ^ unit1042_0[i][1]) |(x[ unit1042_0[i][2] ] ^ unit1042_0[i][3]));
			}
		if(X_contra>0) L[1042][0]=2;
		}
	//Check all rules of unit[1042][1]
	L[1042][1] = LargeX[1042][0]>0 ? 1 : 0;
	satisfiable[1042][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1042_1[i][0] ][ unit1042_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1042_1[i][2] ][ unit1042_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1042_1[i][4] ][ unit1042_1[i][5] ] >0);
		X_contra = ( LargeX[1042][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1042_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1042][0]=0; L[1042][1]=1;}
			satisfiable[1042][1]=satisfiable[1042][1] & ((x[1042] ^ 1) | (x[ unit1042_1[i][0] ] ^ unit1042_1[i][1]) |(x[ unit1042_1[i][2] ] ^ unit1042_1[i][3]));
			}
		if(X_contra>0) L[1042][1]=2;
		}
	//Check all rules of unit[1043][0]
	L[1043][0] = LargeX[1043][1]>0 ? 1 : 0;
	satisfiable[1043][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1043_0[i][0] ][ unit1043_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1043_0[i][2] ][ unit1043_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1043_0[i][4] ][ unit1043_0[i][5] ] >0);
		X_contra = ( LargeX[1043][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1043_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1043][1]=0; L[1043][0]=1;}
			satisfiable[1043][0]=satisfiable[1043][0] & ((x[1043] ^ 0) | (x[ unit1043_0[i][0] ] ^ unit1043_0[i][1]) |(x[ unit1043_0[i][2] ] ^ unit1043_0[i][3]));
			}
		if(X_contra>0) L[1043][0]=2;
		}
	//Check all rules of unit[1043][1]
	L[1043][1] = LargeX[1043][0]>0 ? 1 : 0;
	satisfiable[1043][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1043_1[i][0] ][ unit1043_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1043_1[i][2] ][ unit1043_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1043_1[i][4] ][ unit1043_1[i][5] ] >0);
		X_contra = ( LargeX[1043][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1043_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1043][0]=0; L[1043][1]=1;}
			satisfiable[1043][1]=satisfiable[1043][1] & ((x[1043] ^ 1) | (x[ unit1043_1[i][0] ] ^ unit1043_1[i][1]) |(x[ unit1043_1[i][2] ] ^ unit1043_1[i][3]));
			}
		if(X_contra>0) L[1043][1]=2;
		}
	//Check all rules of unit[1044][0]
	L[1044][0] = LargeX[1044][1]>0 ? 1 : 0;
	satisfiable[1044][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1044_0[i][0] ][ unit1044_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1044_0[i][2] ][ unit1044_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1044_0[i][4] ][ unit1044_0[i][5] ] >0);
		X_contra = ( LargeX[1044][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1044_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1044][1]=0; L[1044][0]=1;}
			satisfiable[1044][0]=satisfiable[1044][0] & ((x[1044] ^ 0) | (x[ unit1044_0[i][0] ] ^ unit1044_0[i][1]) |(x[ unit1044_0[i][2] ] ^ unit1044_0[i][3]));
			}
		if(X_contra>0) L[1044][0]=2;
		}
	//Check all rules of unit[1044][1]
	L[1044][1] = LargeX[1044][0]>0 ? 1 : 0;
	satisfiable[1044][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1044_1[i][0] ][ unit1044_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1044_1[i][2] ][ unit1044_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1044_1[i][4] ][ unit1044_1[i][5] ] >0);
		X_contra = ( LargeX[1044][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1044_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1044][0]=0; L[1044][1]=1;}
			satisfiable[1044][1]=satisfiable[1044][1] & ((x[1044] ^ 1) | (x[ unit1044_1[i][0] ] ^ unit1044_1[i][1]) |(x[ unit1044_1[i][2] ] ^ unit1044_1[i][3]));
			}
		if(X_contra>0) L[1044][1]=2;
		}
	//Check all rules of unit[1045][0]
	L[1045][0] = LargeX[1045][1]>0 ? 1 : 0;
	satisfiable[1045][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1045_0[i][0] ][ unit1045_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1045_0[i][2] ][ unit1045_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1045_0[i][4] ][ unit1045_0[i][5] ] >0);
		X_contra = ( LargeX[1045][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1045_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1045][1]=0; L[1045][0]=1;}
			satisfiable[1045][0]=satisfiable[1045][0] & ((x[1045] ^ 0) | (x[ unit1045_0[i][0] ] ^ unit1045_0[i][1]) |(x[ unit1045_0[i][2] ] ^ unit1045_0[i][3]));
			}
		if(X_contra>0) L[1045][0]=2;
		}
	//Check all rules of unit[1045][1]
	L[1045][1] = LargeX[1045][0]>0 ? 1 : 0;
	satisfiable[1045][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1045_1[i][0] ][ unit1045_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1045_1[i][2] ][ unit1045_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1045_1[i][4] ][ unit1045_1[i][5] ] >0);
		X_contra = ( LargeX[1045][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1045_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1045][0]=0; L[1045][1]=1;}
			satisfiable[1045][1]=satisfiable[1045][1] & ((x[1045] ^ 1) | (x[ unit1045_1[i][0] ] ^ unit1045_1[i][1]) |(x[ unit1045_1[i][2] ] ^ unit1045_1[i][3]));
			}
		if(X_contra>0) L[1045][1]=2;
		}
	//Check all rules of unit[1046][0]
	L[1046][0] = LargeX[1046][1]>0 ? 1 : 0;
	satisfiable[1046][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1046_0[i][0] ][ unit1046_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1046_0[i][2] ][ unit1046_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1046_0[i][4] ][ unit1046_0[i][5] ] >0);
		X_contra = ( LargeX[1046][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1046_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1046][1]=0; L[1046][0]=1;}
			satisfiable[1046][0]=satisfiable[1046][0] & ((x[1046] ^ 0) | (x[ unit1046_0[i][0] ] ^ unit1046_0[i][1]) |(x[ unit1046_0[i][2] ] ^ unit1046_0[i][3]));
			}
		if(X_contra>0) L[1046][0]=2;
		}
	//Check all rules of unit[1046][1]
	L[1046][1] = LargeX[1046][0]>0 ? 1 : 0;
	satisfiable[1046][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1046_1[i][0] ][ unit1046_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1046_1[i][2] ][ unit1046_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1046_1[i][4] ][ unit1046_1[i][5] ] >0);
		X_contra = ( LargeX[1046][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1046_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1046][0]=0; L[1046][1]=1;}
			satisfiable[1046][1]=satisfiable[1046][1] & ((x[1046] ^ 1) | (x[ unit1046_1[i][0] ] ^ unit1046_1[i][1]) |(x[ unit1046_1[i][2] ] ^ unit1046_1[i][3]));
			}
		if(X_contra>0) L[1046][1]=2;
		}
	//Check all rules of unit[1047][0]
	L[1047][0] = LargeX[1047][1]>0 ? 1 : 0;
	satisfiable[1047][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1047_0[i][0] ][ unit1047_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1047_0[i][2] ][ unit1047_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1047_0[i][4] ][ unit1047_0[i][5] ] >0);
		X_contra = ( LargeX[1047][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1047_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1047][1]=0; L[1047][0]=1;}
			satisfiable[1047][0]=satisfiable[1047][0] & ((x[1047] ^ 0) | (x[ unit1047_0[i][0] ] ^ unit1047_0[i][1]) |(x[ unit1047_0[i][2] ] ^ unit1047_0[i][3]));
			}
		if(X_contra>0) L[1047][0]=2;
		}
	//Check all rules of unit[1047][1]
	L[1047][1] = LargeX[1047][0]>0 ? 1 : 0;
	satisfiable[1047][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1047_1[i][0] ][ unit1047_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1047_1[i][2] ][ unit1047_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1047_1[i][4] ][ unit1047_1[i][5] ] >0);
		X_contra = ( LargeX[1047][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1047_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1047][0]=0; L[1047][1]=1;}
			satisfiable[1047][1]=satisfiable[1047][1] & ((x[1047] ^ 1) | (x[ unit1047_1[i][0] ] ^ unit1047_1[i][1]) |(x[ unit1047_1[i][2] ] ^ unit1047_1[i][3]));
			}
		if(X_contra>0) L[1047][1]=2;
		}
	//Check all rules of unit[1048][0]
	L[1048][0] = LargeX[1048][1]>0 ? 1 : 0;
	satisfiable[1048][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1048_0[i][0] ][ unit1048_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1048_0[i][2] ][ unit1048_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1048_0[i][4] ][ unit1048_0[i][5] ] >0);
		X_contra = ( LargeX[1048][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1048_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1048][1]=0; L[1048][0]=1;}
			satisfiable[1048][0]=satisfiable[1048][0] & ((x[1048] ^ 0) | (x[ unit1048_0[i][0] ] ^ unit1048_0[i][1]) |(x[ unit1048_0[i][2] ] ^ unit1048_0[i][3]));
			}
		if(X_contra>0) L[1048][0]=2;
		}
	//Check all rules of unit[1048][1]
	L[1048][1] = LargeX[1048][0]>0 ? 1 : 0;
	satisfiable[1048][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1048_1[i][0] ][ unit1048_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1048_1[i][2] ][ unit1048_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1048_1[i][4] ][ unit1048_1[i][5] ] >0);
		X_contra = ( LargeX[1048][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1048_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1048][0]=0; L[1048][1]=1;}
			satisfiable[1048][1]=satisfiable[1048][1] & ((x[1048] ^ 1) | (x[ unit1048_1[i][0] ] ^ unit1048_1[i][1]) |(x[ unit1048_1[i][2] ] ^ unit1048_1[i][3]));
			}
		if(X_contra>0) L[1048][1]=2;
		}
	//Check all rules of unit[1049][0]
	L[1049][0] = LargeX[1049][1]>0 ? 1 : 0;
	satisfiable[1049][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1049_0[i][0] ][ unit1049_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1049_0[i][2] ][ unit1049_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1049_0[i][4] ][ unit1049_0[i][5] ] >0);
		X_contra = ( LargeX[1049][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1049_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1049][1]=0; L[1049][0]=1;}
			satisfiable[1049][0]=satisfiable[1049][0] & ((x[1049] ^ 0) | (x[ unit1049_0[i][0] ] ^ unit1049_0[i][1]) |(x[ unit1049_0[i][2] ] ^ unit1049_0[i][3]));
			}
		if(X_contra>0) L[1049][0]=2;
		}
	//Check all rules of unit[1049][1]
	L[1049][1] = LargeX[1049][0]>0 ? 1 : 0;
	satisfiable[1049][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1049_1[i][0] ][ unit1049_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1049_1[i][2] ][ unit1049_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1049_1[i][4] ][ unit1049_1[i][5] ] >0);
		X_contra = ( LargeX[1049][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1049_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1049][0]=0; L[1049][1]=1;}
			satisfiable[1049][1]=satisfiable[1049][1] & ((x[1049] ^ 1) | (x[ unit1049_1[i][0] ] ^ unit1049_1[i][1]) |(x[ unit1049_1[i][2] ] ^ unit1049_1[i][3]));
			}
		if(X_contra>0) L[1049][1]=2;
		}
	//Check all rules of unit[1050][0]
	L[1050][0] = LargeX[1050][1]>0 ? 1 : 0;
	satisfiable[1050][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1050_0[i][0] ][ unit1050_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1050_0[i][2] ][ unit1050_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1050_0[i][4] ][ unit1050_0[i][5] ] >0);
		X_contra = ( LargeX[1050][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1050_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1050][1]=0; L[1050][0]=1;}
			satisfiable[1050][0]=satisfiable[1050][0] & ((x[1050] ^ 0) | (x[ unit1050_0[i][0] ] ^ unit1050_0[i][1]) |(x[ unit1050_0[i][2] ] ^ unit1050_0[i][3]));
			}
		if(X_contra>0) L[1050][0]=2;
		}
	//Check all rules of unit[1050][1]
	L[1050][1] = LargeX[1050][0]>0 ? 1 : 0;
	satisfiable[1050][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1050_1[i][0] ][ unit1050_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1050_1[i][2] ][ unit1050_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1050_1[i][4] ][ unit1050_1[i][5] ] >0);
		X_contra = ( LargeX[1050][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1050_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1050][0]=0; L[1050][1]=1;}
			satisfiable[1050][1]=satisfiable[1050][1] & ((x[1050] ^ 1) | (x[ unit1050_1[i][0] ] ^ unit1050_1[i][1]) |(x[ unit1050_1[i][2] ] ^ unit1050_1[i][3]));
			}
		if(X_contra>0) L[1050][1]=2;
		}
	//Check all rules of unit[1051][0]
	L[1051][0] = LargeX[1051][1]>0 ? 1 : 0;
	satisfiable[1051][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1051_0[i][0] ][ unit1051_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1051_0[i][2] ][ unit1051_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1051_0[i][4] ][ unit1051_0[i][5] ] >0);
		X_contra = ( LargeX[1051][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1051_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1051][1]=0; L[1051][0]=1;}
			satisfiable[1051][0]=satisfiable[1051][0] & ((x[1051] ^ 0) | (x[ unit1051_0[i][0] ] ^ unit1051_0[i][1]) |(x[ unit1051_0[i][2] ] ^ unit1051_0[i][3]));
			}
		if(X_contra>0) L[1051][0]=2;
		}
	//Check all rules of unit[1051][1]
	L[1051][1] = LargeX[1051][0]>0 ? 1 : 0;
	satisfiable[1051][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1051_1[i][0] ][ unit1051_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1051_1[i][2] ][ unit1051_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1051_1[i][4] ][ unit1051_1[i][5] ] >0);
		X_contra = ( LargeX[1051][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1051_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1051][0]=0; L[1051][1]=1;}
			satisfiable[1051][1]=satisfiable[1051][1] & ((x[1051] ^ 1) | (x[ unit1051_1[i][0] ] ^ unit1051_1[i][1]) |(x[ unit1051_1[i][2] ] ^ unit1051_1[i][3]));
			}
		if(X_contra>0) L[1051][1]=2;
		}
	//Check all rules of unit[1052][0]
	L[1052][0] = LargeX[1052][1]>0 ? 1 : 0;
	satisfiable[1052][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1052_0[i][0] ][ unit1052_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1052_0[i][2] ][ unit1052_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1052_0[i][4] ][ unit1052_0[i][5] ] >0);
		X_contra = ( LargeX[1052][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1052_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1052][1]=0; L[1052][0]=1;}
			satisfiable[1052][0]=satisfiable[1052][0] & ((x[1052] ^ 0) | (x[ unit1052_0[i][0] ] ^ unit1052_0[i][1]) |(x[ unit1052_0[i][2] ] ^ unit1052_0[i][3]));
			}
		if(X_contra>0) L[1052][0]=2;
		}
	//Check all rules of unit[1052][1]
	L[1052][1] = LargeX[1052][0]>0 ? 1 : 0;
	satisfiable[1052][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1052_1[i][0] ][ unit1052_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1052_1[i][2] ][ unit1052_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1052_1[i][4] ][ unit1052_1[i][5] ] >0);
		X_contra = ( LargeX[1052][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1052_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1052][0]=0; L[1052][1]=1;}
			satisfiable[1052][1]=satisfiable[1052][1] & ((x[1052] ^ 1) | (x[ unit1052_1[i][0] ] ^ unit1052_1[i][1]) |(x[ unit1052_1[i][2] ] ^ unit1052_1[i][3]));
			}
		if(X_contra>0) L[1052][1]=2;
		}
	//Check all rules of unit[1053][0]
	L[1053][0] = LargeX[1053][1]>0 ? 1 : 0;
	satisfiable[1053][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1053_0[i][0] ][ unit1053_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1053_0[i][2] ][ unit1053_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1053_0[i][4] ][ unit1053_0[i][5] ] >0);
		X_contra = ( LargeX[1053][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1053_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1053][1]=0; L[1053][0]=1;}
			satisfiable[1053][0]=satisfiable[1053][0] & ((x[1053] ^ 0) | (x[ unit1053_0[i][0] ] ^ unit1053_0[i][1]) |(x[ unit1053_0[i][2] ] ^ unit1053_0[i][3]));
			}
		if(X_contra>0) L[1053][0]=2;
		}
	//Check all rules of unit[1053][1]
	L[1053][1] = LargeX[1053][0]>0 ? 1 : 0;
	satisfiable[1053][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1053_1[i][0] ][ unit1053_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1053_1[i][2] ][ unit1053_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1053_1[i][4] ][ unit1053_1[i][5] ] >0);
		X_contra = ( LargeX[1053][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1053_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1053][0]=0; L[1053][1]=1;}
			satisfiable[1053][1]=satisfiable[1053][1] & ((x[1053] ^ 1) | (x[ unit1053_1[i][0] ] ^ unit1053_1[i][1]) |(x[ unit1053_1[i][2] ] ^ unit1053_1[i][3]));
			}
		if(X_contra>0) L[1053][1]=2;
		}
	//Check all rules of unit[1054][0]
	L[1054][0] = LargeX[1054][1]>0 ? 1 : 0;
	satisfiable[1054][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1054_0[i][0] ][ unit1054_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1054_0[i][2] ][ unit1054_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1054_0[i][4] ][ unit1054_0[i][5] ] >0);
		X_contra = ( LargeX[1054][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1054_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1054][1]=0; L[1054][0]=1;}
			satisfiable[1054][0]=satisfiable[1054][0] & ((x[1054] ^ 0) | (x[ unit1054_0[i][0] ] ^ unit1054_0[i][1]) |(x[ unit1054_0[i][2] ] ^ unit1054_0[i][3]));
			}
		if(X_contra>0) L[1054][0]=2;
		}
	//Check all rules of unit[1054][1]
	L[1054][1] = LargeX[1054][0]>0 ? 1 : 0;
	satisfiable[1054][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1054_1[i][0] ][ unit1054_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1054_1[i][2] ][ unit1054_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1054_1[i][4] ][ unit1054_1[i][5] ] >0);
		X_contra = ( LargeX[1054][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1054_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1054][0]=0; L[1054][1]=1;}
			satisfiable[1054][1]=satisfiable[1054][1] & ((x[1054] ^ 1) | (x[ unit1054_1[i][0] ] ^ unit1054_1[i][1]) |(x[ unit1054_1[i][2] ] ^ unit1054_1[i][3]));
			}
		if(X_contra>0) L[1054][1]=2;
		}
	//Check all rules of unit[1055][0]
	L[1055][0] = LargeX[1055][1]>0 ? 1 : 0;
	satisfiable[1055][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1055_0[i][0] ][ unit1055_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1055_0[i][2] ][ unit1055_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1055_0[i][4] ][ unit1055_0[i][5] ] >0);
		X_contra = ( LargeX[1055][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1055_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1055][1]=0; L[1055][0]=1;}
			satisfiable[1055][0]=satisfiable[1055][0] & ((x[1055] ^ 0) | (x[ unit1055_0[i][0] ] ^ unit1055_0[i][1]) |(x[ unit1055_0[i][2] ] ^ unit1055_0[i][3]));
			}
		if(X_contra>0) L[1055][0]=2;
		}
	//Check all rules of unit[1055][1]
	L[1055][1] = LargeX[1055][0]>0 ? 1 : 0;
	satisfiable[1055][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1055_1[i][0] ][ unit1055_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1055_1[i][2] ][ unit1055_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1055_1[i][4] ][ unit1055_1[i][5] ] >0);
		X_contra = ( LargeX[1055][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1055_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1055][0]=0; L[1055][1]=1;}
			satisfiable[1055][1]=satisfiable[1055][1] & ((x[1055] ^ 1) | (x[ unit1055_1[i][0] ] ^ unit1055_1[i][1]) |(x[ unit1055_1[i][2] ] ^ unit1055_1[i][3]));
			}
		if(X_contra>0) L[1055][1]=2;
		}
	//Check all rules of unit[1056][0]
	L[1056][0] = LargeX[1056][1]>0 ? 1 : 0;
	satisfiable[1056][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1056_0[i][0] ][ unit1056_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1056_0[i][2] ][ unit1056_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1056_0[i][4] ][ unit1056_0[i][5] ] >0);
		X_contra = ( LargeX[1056][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1056_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1056][1]=0; L[1056][0]=1;}
			satisfiable[1056][0]=satisfiable[1056][0] & ((x[1056] ^ 0) | (x[ unit1056_0[i][0] ] ^ unit1056_0[i][1]) |(x[ unit1056_0[i][2] ] ^ unit1056_0[i][3]));
			}
		if(X_contra>0) L[1056][0]=2;
		}
	//Check all rules of unit[1056][1]
	L[1056][1] = LargeX[1056][0]>0 ? 1 : 0;
	satisfiable[1056][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1056_1[i][0] ][ unit1056_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1056_1[i][2] ][ unit1056_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1056_1[i][4] ][ unit1056_1[i][5] ] >0);
		X_contra = ( LargeX[1056][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1056_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1056][0]=0; L[1056][1]=1;}
			satisfiable[1056][1]=satisfiable[1056][1] & ((x[1056] ^ 1) | (x[ unit1056_1[i][0] ] ^ unit1056_1[i][1]) |(x[ unit1056_1[i][2] ] ^ unit1056_1[i][3]));
			}
		if(X_contra>0) L[1056][1]=2;
		}
	//Check all rules of unit[1057][0]
	L[1057][0] = LargeX[1057][1]>0 ? 1 : 0;
	satisfiable[1057][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1057_0[i][0] ][ unit1057_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1057_0[i][2] ][ unit1057_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1057_0[i][4] ][ unit1057_0[i][5] ] >0);
		X_contra = ( LargeX[1057][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1057_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1057][1]=0; L[1057][0]=1;}
			satisfiable[1057][0]=satisfiable[1057][0] & ((x[1057] ^ 0) | (x[ unit1057_0[i][0] ] ^ unit1057_0[i][1]) |(x[ unit1057_0[i][2] ] ^ unit1057_0[i][3]));
			}
		if(X_contra>0) L[1057][0]=2;
		}
	//Check all rules of unit[1057][1]
	L[1057][1] = LargeX[1057][0]>0 ? 1 : 0;
	satisfiable[1057][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1057_1[i][0] ][ unit1057_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1057_1[i][2] ][ unit1057_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1057_1[i][4] ][ unit1057_1[i][5] ] >0);
		X_contra = ( LargeX[1057][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1057_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1057][0]=0; L[1057][1]=1;}
			satisfiable[1057][1]=satisfiable[1057][1] & ((x[1057] ^ 1) | (x[ unit1057_1[i][0] ] ^ unit1057_1[i][1]) |(x[ unit1057_1[i][2] ] ^ unit1057_1[i][3]));
			}
		if(X_contra>0) L[1057][1]=2;
		}
	//Check all rules of unit[1058][0]
	L[1058][0] = LargeX[1058][1]>0 ? 1 : 0;
	satisfiable[1058][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1058_0[i][0] ][ unit1058_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1058_0[i][2] ][ unit1058_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1058_0[i][4] ][ unit1058_0[i][5] ] >0);
		X_contra = ( LargeX[1058][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1058_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1058][1]=0; L[1058][0]=1;}
			satisfiable[1058][0]=satisfiable[1058][0] & ((x[1058] ^ 0) | (x[ unit1058_0[i][0] ] ^ unit1058_0[i][1]) |(x[ unit1058_0[i][2] ] ^ unit1058_0[i][3]));
			}
		if(X_contra>0) L[1058][0]=2;
		}
	//Check all rules of unit[1058][1]
	L[1058][1] = LargeX[1058][0]>0 ? 1 : 0;
	satisfiable[1058][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1058_1[i][0] ][ unit1058_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1058_1[i][2] ][ unit1058_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1058_1[i][4] ][ unit1058_1[i][5] ] >0);
		X_contra = ( LargeX[1058][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1058_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1058][0]=0; L[1058][1]=1;}
			satisfiable[1058][1]=satisfiable[1058][1] & ((x[1058] ^ 1) | (x[ unit1058_1[i][0] ] ^ unit1058_1[i][1]) |(x[ unit1058_1[i][2] ] ^ unit1058_1[i][3]));
			}
		if(X_contra>0) L[1058][1]=2;
		}
	//Check all rules of unit[1059][0]
	L[1059][0] = LargeX[1059][1]>0 ? 1 : 0;
	satisfiable[1059][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1059_0[i][0] ][ unit1059_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1059_0[i][2] ][ unit1059_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1059_0[i][4] ][ unit1059_0[i][5] ] >0);
		X_contra = ( LargeX[1059][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1059_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1059][1]=0; L[1059][0]=1;}
			satisfiable[1059][0]=satisfiable[1059][0] & ((x[1059] ^ 0) | (x[ unit1059_0[i][0] ] ^ unit1059_0[i][1]) |(x[ unit1059_0[i][2] ] ^ unit1059_0[i][3]));
			}
		if(X_contra>0) L[1059][0]=2;
		}
	//Check all rules of unit[1059][1]
	L[1059][1] = LargeX[1059][0]>0 ? 1 : 0;
	satisfiable[1059][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1059_1[i][0] ][ unit1059_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1059_1[i][2] ][ unit1059_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1059_1[i][4] ][ unit1059_1[i][5] ] >0);
		X_contra = ( LargeX[1059][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1059_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1059][0]=0; L[1059][1]=1;}
			satisfiable[1059][1]=satisfiable[1059][1] & ((x[1059] ^ 1) | (x[ unit1059_1[i][0] ] ^ unit1059_1[i][1]) |(x[ unit1059_1[i][2] ] ^ unit1059_1[i][3]));
			}
		if(X_contra>0) L[1059][1]=2;
		}
	//Check all rules of unit[1060][0]
	L[1060][0] = LargeX[1060][1]>0 ? 1 : 0;
	satisfiable[1060][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1060_0[i][0] ][ unit1060_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1060_0[i][2] ][ unit1060_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1060_0[i][4] ][ unit1060_0[i][5] ] >0);
		X_contra = ( LargeX[1060][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1060_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1060][1]=0; L[1060][0]=1;}
			satisfiable[1060][0]=satisfiable[1060][0] & ((x[1060] ^ 0) | (x[ unit1060_0[i][0] ] ^ unit1060_0[i][1]) |(x[ unit1060_0[i][2] ] ^ unit1060_0[i][3]));
			}
		if(X_contra>0) L[1060][0]=2;
		}
	//Check all rules of unit[1060][1]
	L[1060][1] = LargeX[1060][0]>0 ? 1 : 0;
	satisfiable[1060][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1060_1[i][0] ][ unit1060_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1060_1[i][2] ][ unit1060_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1060_1[i][4] ][ unit1060_1[i][5] ] >0);
		X_contra = ( LargeX[1060][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1060_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1060][0]=0; L[1060][1]=1;}
			satisfiable[1060][1]=satisfiable[1060][1] & ((x[1060] ^ 1) | (x[ unit1060_1[i][0] ] ^ unit1060_1[i][1]) |(x[ unit1060_1[i][2] ] ^ unit1060_1[i][3]));
			}
		if(X_contra>0) L[1060][1]=2;
		}
	//Check all rules of unit[1061][0]
	L[1061][0] = LargeX[1061][1]>0 ? 1 : 0;
	satisfiable[1061][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1061_0[i][0] ][ unit1061_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1061_0[i][2] ][ unit1061_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1061_0[i][4] ][ unit1061_0[i][5] ] >0);
		X_contra = ( LargeX[1061][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1061_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1061][1]=0; L[1061][0]=1;}
			satisfiable[1061][0]=satisfiable[1061][0] & ((x[1061] ^ 0) | (x[ unit1061_0[i][0] ] ^ unit1061_0[i][1]) |(x[ unit1061_0[i][2] ] ^ unit1061_0[i][3]));
			}
		if(X_contra>0) L[1061][0]=2;
		}
	//Check all rules of unit[1061][1]
	L[1061][1] = LargeX[1061][0]>0 ? 1 : 0;
	satisfiable[1061][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1061_1[i][0] ][ unit1061_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1061_1[i][2] ][ unit1061_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1061_1[i][4] ][ unit1061_1[i][5] ] >0);
		X_contra = ( LargeX[1061][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1061_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1061][0]=0; L[1061][1]=1;}
			satisfiable[1061][1]=satisfiable[1061][1] & ((x[1061] ^ 1) | (x[ unit1061_1[i][0] ] ^ unit1061_1[i][1]) |(x[ unit1061_1[i][2] ] ^ unit1061_1[i][3]));
			}
		if(X_contra>0) L[1061][1]=2;
		}
	//Check all rules of unit[1062][0]
	L[1062][0] = LargeX[1062][1]>0 ? 1 : 0;
	satisfiable[1062][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1062_0[i][0] ][ unit1062_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1062_0[i][2] ][ unit1062_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1062_0[i][4] ][ unit1062_0[i][5] ] >0);
		X_contra = ( LargeX[1062][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1062_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1062][1]=0; L[1062][0]=1;}
			satisfiable[1062][0]=satisfiable[1062][0] & ((x[1062] ^ 0) | (x[ unit1062_0[i][0] ] ^ unit1062_0[i][1]) |(x[ unit1062_0[i][2] ] ^ unit1062_0[i][3]));
			}
		if(X_contra>0) L[1062][0]=2;
		}
	//Check all rules of unit[1062][1]
	L[1062][1] = LargeX[1062][0]>0 ? 1 : 0;
	satisfiable[1062][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1062_1[i][0] ][ unit1062_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1062_1[i][2] ][ unit1062_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1062_1[i][4] ][ unit1062_1[i][5] ] >0);
		X_contra = ( LargeX[1062][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1062_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1062][0]=0; L[1062][1]=1;}
			satisfiable[1062][1]=satisfiable[1062][1] & ((x[1062] ^ 1) | (x[ unit1062_1[i][0] ] ^ unit1062_1[i][1]) |(x[ unit1062_1[i][2] ] ^ unit1062_1[i][3]));
			}
		if(X_contra>0) L[1062][1]=2;
		}
	//Check all rules of unit[1063][0]
	L[1063][0] = LargeX[1063][1]>0 ? 1 : 0;
	satisfiable[1063][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1063_0[i][0] ][ unit1063_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1063_0[i][2] ][ unit1063_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1063_0[i][4] ][ unit1063_0[i][5] ] >0);
		X_contra = ( LargeX[1063][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1063_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1063][1]=0; L[1063][0]=1;}
			satisfiable[1063][0]=satisfiable[1063][0] & ((x[1063] ^ 0) | (x[ unit1063_0[i][0] ] ^ unit1063_0[i][1]) |(x[ unit1063_0[i][2] ] ^ unit1063_0[i][3]));
			}
		if(X_contra>0) L[1063][0]=2;
		}
	//Check all rules of unit[1063][1]
	L[1063][1] = LargeX[1063][0]>0 ? 1 : 0;
	satisfiable[1063][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1063_1[i][0] ][ unit1063_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1063_1[i][2] ][ unit1063_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1063_1[i][4] ][ unit1063_1[i][5] ] >0);
		X_contra = ( LargeX[1063][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1063_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1063][0]=0; L[1063][1]=1;}
			satisfiable[1063][1]=satisfiable[1063][1] & ((x[1063] ^ 1) | (x[ unit1063_1[i][0] ] ^ unit1063_1[i][1]) |(x[ unit1063_1[i][2] ] ^ unit1063_1[i][3]));
			}
		if(X_contra>0) L[1063][1]=2;
		}
	//Check all rules of unit[1064][0]
	L[1064][0] = LargeX[1064][1]>0 ? 1 : 0;
	satisfiable[1064][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1064_0[i][0] ][ unit1064_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1064_0[i][2] ][ unit1064_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1064_0[i][4] ][ unit1064_0[i][5] ] >0);
		X_contra = ( LargeX[1064][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1064_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1064][1]=0; L[1064][0]=1;}
			satisfiable[1064][0]=satisfiable[1064][0] & ((x[1064] ^ 0) | (x[ unit1064_0[i][0] ] ^ unit1064_0[i][1]) |(x[ unit1064_0[i][2] ] ^ unit1064_0[i][3]));
			}
		if(X_contra>0) L[1064][0]=2;
		}
	//Check all rules of unit[1064][1]
	L[1064][1] = LargeX[1064][0]>0 ? 1 : 0;
	satisfiable[1064][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1064_1[i][0] ][ unit1064_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1064_1[i][2] ][ unit1064_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1064_1[i][4] ][ unit1064_1[i][5] ] >0);
		X_contra = ( LargeX[1064][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1064_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1064][0]=0; L[1064][1]=1;}
			satisfiable[1064][1]=satisfiable[1064][1] & ((x[1064] ^ 1) | (x[ unit1064_1[i][0] ] ^ unit1064_1[i][1]) |(x[ unit1064_1[i][2] ] ^ unit1064_1[i][3]));
			}
		if(X_contra>0) L[1064][1]=2;
		}
	//Check all rules of unit[1065][0]
	L[1065][0] = LargeX[1065][1]>0 ? 1 : 0;
	satisfiable[1065][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1065_0[i][0] ][ unit1065_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1065_0[i][2] ][ unit1065_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1065_0[i][4] ][ unit1065_0[i][5] ] >0);
		X_contra = ( LargeX[1065][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1065_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1065][1]=0; L[1065][0]=1;}
			satisfiable[1065][0]=satisfiable[1065][0] & ((x[1065] ^ 0) | (x[ unit1065_0[i][0] ] ^ unit1065_0[i][1]) |(x[ unit1065_0[i][2] ] ^ unit1065_0[i][3]));
			}
		if(X_contra>0) L[1065][0]=2;
		}
	//Check all rules of unit[1065][1]
	L[1065][1] = LargeX[1065][0]>0 ? 1 : 0;
	satisfiable[1065][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1065_1[i][0] ][ unit1065_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1065_1[i][2] ][ unit1065_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1065_1[i][4] ][ unit1065_1[i][5] ] >0);
		X_contra = ( LargeX[1065][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1065_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1065][0]=0; L[1065][1]=1;}
			satisfiable[1065][1]=satisfiable[1065][1] & ((x[1065] ^ 1) | (x[ unit1065_1[i][0] ] ^ unit1065_1[i][1]) |(x[ unit1065_1[i][2] ] ^ unit1065_1[i][3]));
			}
		if(X_contra>0) L[1065][1]=2;
		}
	//Check all rules of unit[1066][0]
	L[1066][0] = LargeX[1066][1]>0 ? 1 : 0;
	satisfiable[1066][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1066_0[i][0] ][ unit1066_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1066_0[i][2] ][ unit1066_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1066_0[i][4] ][ unit1066_0[i][5] ] >0);
		X_contra = ( LargeX[1066][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1066_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1066][1]=0; L[1066][0]=1;}
			satisfiable[1066][0]=satisfiable[1066][0] & ((x[1066] ^ 0) | (x[ unit1066_0[i][0] ] ^ unit1066_0[i][1]) |(x[ unit1066_0[i][2] ] ^ unit1066_0[i][3]));
			}
		if(X_contra>0) L[1066][0]=2;
		}
	//Check all rules of unit[1066][1]
	L[1066][1] = LargeX[1066][0]>0 ? 1 : 0;
	satisfiable[1066][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1066_1[i][0] ][ unit1066_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1066_1[i][2] ][ unit1066_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1066_1[i][4] ][ unit1066_1[i][5] ] >0);
		X_contra = ( LargeX[1066][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1066_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1066][0]=0; L[1066][1]=1;}
			satisfiable[1066][1]=satisfiable[1066][1] & ((x[1066] ^ 1) | (x[ unit1066_1[i][0] ] ^ unit1066_1[i][1]) |(x[ unit1066_1[i][2] ] ^ unit1066_1[i][3]));
			}
		if(X_contra>0) L[1066][1]=2;
		}
	//Check all rules of unit[1067][0]
	L[1067][0] = LargeX[1067][1]>0 ? 1 : 0;
	satisfiable[1067][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1067_0[i][0] ][ unit1067_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1067_0[i][2] ][ unit1067_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1067_0[i][4] ][ unit1067_0[i][5] ] >0);
		X_contra = ( LargeX[1067][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1067_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1067][1]=0; L[1067][0]=1;}
			satisfiable[1067][0]=satisfiable[1067][0] & ((x[1067] ^ 0) | (x[ unit1067_0[i][0] ] ^ unit1067_0[i][1]) |(x[ unit1067_0[i][2] ] ^ unit1067_0[i][3]));
			}
		if(X_contra>0) L[1067][0]=2;
		}
	//Check all rules of unit[1067][1]
	L[1067][1] = LargeX[1067][0]>0 ? 1 : 0;
	satisfiable[1067][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1067_1[i][0] ][ unit1067_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1067_1[i][2] ][ unit1067_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1067_1[i][4] ][ unit1067_1[i][5] ] >0);
		X_contra = ( LargeX[1067][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1067_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1067][0]=0; L[1067][1]=1;}
			satisfiable[1067][1]=satisfiable[1067][1] & ((x[1067] ^ 1) | (x[ unit1067_1[i][0] ] ^ unit1067_1[i][1]) |(x[ unit1067_1[i][2] ] ^ unit1067_1[i][3]));
			}
		if(X_contra>0) L[1067][1]=2;
		}
	//Check all rules of unit[1068][0]
	L[1068][0] = LargeX[1068][1]>0 ? 1 : 0;
	satisfiable[1068][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1068_0[i][0] ][ unit1068_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1068_0[i][2] ][ unit1068_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1068_0[i][4] ][ unit1068_0[i][5] ] >0);
		X_contra = ( LargeX[1068][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1068_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1068][1]=0; L[1068][0]=1;}
			satisfiable[1068][0]=satisfiable[1068][0] & ((x[1068] ^ 0) | (x[ unit1068_0[i][0] ] ^ unit1068_0[i][1]) |(x[ unit1068_0[i][2] ] ^ unit1068_0[i][3]));
			}
		if(X_contra>0) L[1068][0]=2;
		}
	//Check all rules of unit[1068][1]
	L[1068][1] = LargeX[1068][0]>0 ? 1 : 0;
	satisfiable[1068][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1068_1[i][0] ][ unit1068_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1068_1[i][2] ][ unit1068_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1068_1[i][4] ][ unit1068_1[i][5] ] >0);
		X_contra = ( LargeX[1068][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1068_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1068][0]=0; L[1068][1]=1;}
			satisfiable[1068][1]=satisfiable[1068][1] & ((x[1068] ^ 1) | (x[ unit1068_1[i][0] ] ^ unit1068_1[i][1]) |(x[ unit1068_1[i][2] ] ^ unit1068_1[i][3]));
			}
		if(X_contra>0) L[1068][1]=2;
		}
	//Check all rules of unit[1069][0]
	L[1069][0] = LargeX[1069][1]>0 ? 1 : 0;
	satisfiable[1069][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1069_0[i][0] ][ unit1069_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1069_0[i][2] ][ unit1069_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1069_0[i][4] ][ unit1069_0[i][5] ] >0);
		X_contra = ( LargeX[1069][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1069_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1069][1]=0; L[1069][0]=1;}
			satisfiable[1069][0]=satisfiable[1069][0] & ((x[1069] ^ 0) | (x[ unit1069_0[i][0] ] ^ unit1069_0[i][1]) |(x[ unit1069_0[i][2] ] ^ unit1069_0[i][3]));
			}
		if(X_contra>0) L[1069][0]=2;
		}
	//Check all rules of unit[1069][1]
	L[1069][1] = LargeX[1069][0]>0 ? 1 : 0;
	satisfiable[1069][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1069_1[i][0] ][ unit1069_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1069_1[i][2] ][ unit1069_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1069_1[i][4] ][ unit1069_1[i][5] ] >0);
		X_contra = ( LargeX[1069][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1069_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1069][0]=0; L[1069][1]=1;}
			satisfiable[1069][1]=satisfiable[1069][1] & ((x[1069] ^ 1) | (x[ unit1069_1[i][0] ] ^ unit1069_1[i][1]) |(x[ unit1069_1[i][2] ] ^ unit1069_1[i][3]));
			}
		if(X_contra>0) L[1069][1]=2;
		}
	//Check all rules of unit[1070][0]
	L[1070][0] = LargeX[1070][1]>0 ? 1 : 0;
	satisfiable[1070][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1070_0[i][0] ][ unit1070_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1070_0[i][2] ][ unit1070_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1070_0[i][4] ][ unit1070_0[i][5] ] >0);
		X_contra = ( LargeX[1070][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1070_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1070][1]=0; L[1070][0]=1;}
			satisfiable[1070][0]=satisfiable[1070][0] & ((x[1070] ^ 0) | (x[ unit1070_0[i][0] ] ^ unit1070_0[i][1]) |(x[ unit1070_0[i][2] ] ^ unit1070_0[i][3]));
			}
		if(X_contra>0) L[1070][0]=2;
		}
	//Check all rules of unit[1070][1]
	L[1070][1] = LargeX[1070][0]>0 ? 1 : 0;
	satisfiable[1070][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1070_1[i][0] ][ unit1070_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1070_1[i][2] ][ unit1070_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1070_1[i][4] ][ unit1070_1[i][5] ] >0);
		X_contra = ( LargeX[1070][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1070_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1070][0]=0; L[1070][1]=1;}
			satisfiable[1070][1]=satisfiable[1070][1] & ((x[1070] ^ 1) | (x[ unit1070_1[i][0] ] ^ unit1070_1[i][1]) |(x[ unit1070_1[i][2] ] ^ unit1070_1[i][3]));
			}
		if(X_contra>0) L[1070][1]=2;
		}
	//Check all rules of unit[1071][0]
	L[1071][0] = LargeX[1071][1]>0 ? 1 : 0;
	satisfiable[1071][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1071_0[i][0] ][ unit1071_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1071_0[i][2] ][ unit1071_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1071_0[i][4] ][ unit1071_0[i][5] ] >0);
		X_contra = ( LargeX[1071][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1071_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1071][1]=0; L[1071][0]=1;}
			satisfiable[1071][0]=satisfiable[1071][0] & ((x[1071] ^ 0) | (x[ unit1071_0[i][0] ] ^ unit1071_0[i][1]) |(x[ unit1071_0[i][2] ] ^ unit1071_0[i][3]));
			}
		if(X_contra>0) L[1071][0]=2;
		}
	//Check all rules of unit[1071][1]
	L[1071][1] = LargeX[1071][0]>0 ? 1 : 0;
	satisfiable[1071][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1071_1[i][0] ][ unit1071_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1071_1[i][2] ][ unit1071_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1071_1[i][4] ][ unit1071_1[i][5] ] >0);
		X_contra = ( LargeX[1071][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1071_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1071][0]=0; L[1071][1]=1;}
			satisfiable[1071][1]=satisfiable[1071][1] & ((x[1071] ^ 1) | (x[ unit1071_1[i][0] ] ^ unit1071_1[i][1]) |(x[ unit1071_1[i][2] ] ^ unit1071_1[i][3]));
			}
		if(X_contra>0) L[1071][1]=2;
		}
	//Check all rules of unit[1072][0]
	L[1072][0] = LargeX[1072][1]>0 ? 1 : 0;
	satisfiable[1072][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1072_0[i][0] ][ unit1072_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1072_0[i][2] ][ unit1072_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1072_0[i][4] ][ unit1072_0[i][5] ] >0);
		X_contra = ( LargeX[1072][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1072_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1072][1]=0; L[1072][0]=1;}
			satisfiable[1072][0]=satisfiable[1072][0] & ((x[1072] ^ 0) | (x[ unit1072_0[i][0] ] ^ unit1072_0[i][1]) |(x[ unit1072_0[i][2] ] ^ unit1072_0[i][3]));
			}
		if(X_contra>0) L[1072][0]=2;
		}
	//Check all rules of unit[1072][1]
	L[1072][1] = LargeX[1072][0]>0 ? 1 : 0;
	satisfiable[1072][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1072_1[i][0] ][ unit1072_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1072_1[i][2] ][ unit1072_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1072_1[i][4] ][ unit1072_1[i][5] ] >0);
		X_contra = ( LargeX[1072][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1072_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1072][0]=0; L[1072][1]=1;}
			satisfiable[1072][1]=satisfiable[1072][1] & ((x[1072] ^ 1) | (x[ unit1072_1[i][0] ] ^ unit1072_1[i][1]) |(x[ unit1072_1[i][2] ] ^ unit1072_1[i][3]));
			}
		if(X_contra>0) L[1072][1]=2;
		}
	//Check all rules of unit[1073][0]
	L[1073][0] = LargeX[1073][1]>0 ? 1 : 0;
	satisfiable[1073][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1073_0[i][0] ][ unit1073_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1073_0[i][2] ][ unit1073_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1073_0[i][4] ][ unit1073_0[i][5] ] >0);
		X_contra = ( LargeX[1073][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1073_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1073][1]=0; L[1073][0]=1;}
			satisfiable[1073][0]=satisfiable[1073][0] & ((x[1073] ^ 0) | (x[ unit1073_0[i][0] ] ^ unit1073_0[i][1]) |(x[ unit1073_0[i][2] ] ^ unit1073_0[i][3]));
			}
		if(X_contra>0) L[1073][0]=2;
		}
	//Check all rules of unit[1073][1]
	L[1073][1] = LargeX[1073][0]>0 ? 1 : 0;
	satisfiable[1073][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1073_1[i][0] ][ unit1073_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1073_1[i][2] ][ unit1073_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1073_1[i][4] ][ unit1073_1[i][5] ] >0);
		X_contra = ( LargeX[1073][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1073_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1073][0]=0; L[1073][1]=1;}
			satisfiable[1073][1]=satisfiable[1073][1] & ((x[1073] ^ 1) | (x[ unit1073_1[i][0] ] ^ unit1073_1[i][1]) |(x[ unit1073_1[i][2] ] ^ unit1073_1[i][3]));
			}
		if(X_contra>0) L[1073][1]=2;
		}
	//Check all rules of unit[1074][0]
	L[1074][0] = LargeX[1074][1]>0 ? 1 : 0;
	satisfiable[1074][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1074_0[i][0] ][ unit1074_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1074_0[i][2] ][ unit1074_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1074_0[i][4] ][ unit1074_0[i][5] ] >0);
		X_contra = ( LargeX[1074][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1074_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1074][1]=0; L[1074][0]=1;}
			satisfiable[1074][0]=satisfiable[1074][0] & ((x[1074] ^ 0) | (x[ unit1074_0[i][0] ] ^ unit1074_0[i][1]) |(x[ unit1074_0[i][2] ] ^ unit1074_0[i][3]));
			}
		if(X_contra>0) L[1074][0]=2;
		}
	//Check all rules of unit[1074][1]
	L[1074][1] = LargeX[1074][0]>0 ? 1 : 0;
	satisfiable[1074][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1074_1[i][0] ][ unit1074_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1074_1[i][2] ][ unit1074_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1074_1[i][4] ][ unit1074_1[i][5] ] >0);
		X_contra = ( LargeX[1074][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1074_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1074][0]=0; L[1074][1]=1;}
			satisfiable[1074][1]=satisfiable[1074][1] & ((x[1074] ^ 1) | (x[ unit1074_1[i][0] ] ^ unit1074_1[i][1]) |(x[ unit1074_1[i][2] ] ^ unit1074_1[i][3]));
			}
		if(X_contra>0) L[1074][1]=2;
		}
	//Check all rules of unit[1075][0]
	L[1075][0] = LargeX[1075][1]>0 ? 1 : 0;
	satisfiable[1075][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1075_0[i][0] ][ unit1075_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1075_0[i][2] ][ unit1075_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1075_0[i][4] ][ unit1075_0[i][5] ] >0);
		X_contra = ( LargeX[1075][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1075_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1075][1]=0; L[1075][0]=1;}
			satisfiable[1075][0]=satisfiable[1075][0] & ((x[1075] ^ 0) | (x[ unit1075_0[i][0] ] ^ unit1075_0[i][1]) |(x[ unit1075_0[i][2] ] ^ unit1075_0[i][3]));
			}
		if(X_contra>0) L[1075][0]=2;
		}
	//Check all rules of unit[1075][1]
	L[1075][1] = LargeX[1075][0]>0 ? 1 : 0;
	satisfiable[1075][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1075_1[i][0] ][ unit1075_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1075_1[i][2] ][ unit1075_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1075_1[i][4] ][ unit1075_1[i][5] ] >0);
		X_contra = ( LargeX[1075][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1075_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1075][0]=0; L[1075][1]=1;}
			satisfiable[1075][1]=satisfiable[1075][1] & ((x[1075] ^ 1) | (x[ unit1075_1[i][0] ] ^ unit1075_1[i][1]) |(x[ unit1075_1[i][2] ] ^ unit1075_1[i][3]));
			}
		if(X_contra>0) L[1075][1]=2;
		}
	//Check all rules of unit[1076][0]
	L[1076][0] = LargeX[1076][1]>0 ? 1 : 0;
	satisfiable[1076][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1076_0[i][0] ][ unit1076_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1076_0[i][2] ][ unit1076_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1076_0[i][4] ][ unit1076_0[i][5] ] >0);
		X_contra = ( LargeX[1076][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1076_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1076][1]=0; L[1076][0]=1;}
			satisfiable[1076][0]=satisfiable[1076][0] & ((x[1076] ^ 0) | (x[ unit1076_0[i][0] ] ^ unit1076_0[i][1]) |(x[ unit1076_0[i][2] ] ^ unit1076_0[i][3]));
			}
		if(X_contra>0) L[1076][0]=2;
		}
	//Check all rules of unit[1076][1]
	L[1076][1] = LargeX[1076][0]>0 ? 1 : 0;
	satisfiable[1076][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1076_1[i][0] ][ unit1076_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1076_1[i][2] ][ unit1076_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1076_1[i][4] ][ unit1076_1[i][5] ] >0);
		X_contra = ( LargeX[1076][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1076_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1076][0]=0; L[1076][1]=1;}
			satisfiable[1076][1]=satisfiable[1076][1] & ((x[1076] ^ 1) | (x[ unit1076_1[i][0] ] ^ unit1076_1[i][1]) |(x[ unit1076_1[i][2] ] ^ unit1076_1[i][3]));
			}
		if(X_contra>0) L[1076][1]=2;
		}
	//Check all rules of unit[1077][0]
	L[1077][0] = LargeX[1077][1]>0 ? 1 : 0;
	satisfiable[1077][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1077_0[i][0] ][ unit1077_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1077_0[i][2] ][ unit1077_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1077_0[i][4] ][ unit1077_0[i][5] ] >0);
		X_contra = ( LargeX[1077][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1077_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1077][1]=0; L[1077][0]=1;}
			satisfiable[1077][0]=satisfiable[1077][0] & ((x[1077] ^ 0) | (x[ unit1077_0[i][0] ] ^ unit1077_0[i][1]) |(x[ unit1077_0[i][2] ] ^ unit1077_0[i][3]));
			}
		if(X_contra>0) L[1077][0]=2;
		}
	//Check all rules of unit[1077][1]
	L[1077][1] = LargeX[1077][0]>0 ? 1 : 0;
	satisfiable[1077][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1077_1[i][0] ][ unit1077_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1077_1[i][2] ][ unit1077_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1077_1[i][4] ][ unit1077_1[i][5] ] >0);
		X_contra = ( LargeX[1077][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1077_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1077][0]=0; L[1077][1]=1;}
			satisfiable[1077][1]=satisfiable[1077][1] & ((x[1077] ^ 1) | (x[ unit1077_1[i][0] ] ^ unit1077_1[i][1]) |(x[ unit1077_1[i][2] ] ^ unit1077_1[i][3]));
			}
		if(X_contra>0) L[1077][1]=2;
		}
	//Check all rules of unit[1078][0]
	L[1078][0] = LargeX[1078][1]>0 ? 1 : 0;
	satisfiable[1078][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1078_0[i][0] ][ unit1078_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1078_0[i][2] ][ unit1078_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1078_0[i][4] ][ unit1078_0[i][5] ] >0);
		X_contra = ( LargeX[1078][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1078_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1078][1]=0; L[1078][0]=1;}
			satisfiable[1078][0]=satisfiable[1078][0] & ((x[1078] ^ 0) | (x[ unit1078_0[i][0] ] ^ unit1078_0[i][1]) |(x[ unit1078_0[i][2] ] ^ unit1078_0[i][3]));
			}
		if(X_contra>0) L[1078][0]=2;
		}
	//Check all rules of unit[1078][1]
	L[1078][1] = LargeX[1078][0]>0 ? 1 : 0;
	satisfiable[1078][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1078_1[i][0] ][ unit1078_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1078_1[i][2] ][ unit1078_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1078_1[i][4] ][ unit1078_1[i][5] ] >0);
		X_contra = ( LargeX[1078][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1078_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1078][0]=0; L[1078][1]=1;}
			satisfiable[1078][1]=satisfiable[1078][1] & ((x[1078] ^ 1) | (x[ unit1078_1[i][0] ] ^ unit1078_1[i][1]) |(x[ unit1078_1[i][2] ] ^ unit1078_1[i][3]));
			}
		if(X_contra>0) L[1078][1]=2;
		}
	//Check all rules of unit[1079][0]
	L[1079][0] = LargeX[1079][1]>0 ? 1 : 0;
	satisfiable[1079][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1079_0[i][0] ][ unit1079_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1079_0[i][2] ][ unit1079_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1079_0[i][4] ][ unit1079_0[i][5] ] >0);
		X_contra = ( LargeX[1079][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1079_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1079][1]=0; L[1079][0]=1;}
			satisfiable[1079][0]=satisfiable[1079][0] & ((x[1079] ^ 0) | (x[ unit1079_0[i][0] ] ^ unit1079_0[i][1]) |(x[ unit1079_0[i][2] ] ^ unit1079_0[i][3]));
			}
		if(X_contra>0) L[1079][0]=2;
		}
	//Check all rules of unit[1079][1]
	L[1079][1] = LargeX[1079][0]>0 ? 1 : 0;
	satisfiable[1079][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1079_1[i][0] ][ unit1079_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1079_1[i][2] ][ unit1079_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1079_1[i][4] ][ unit1079_1[i][5] ] >0);
		X_contra = ( LargeX[1079][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1079_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1079][0]=0; L[1079][1]=1;}
			satisfiable[1079][1]=satisfiable[1079][1] & ((x[1079] ^ 1) | (x[ unit1079_1[i][0] ] ^ unit1079_1[i][1]) |(x[ unit1079_1[i][2] ] ^ unit1079_1[i][3]));
			}
		if(X_contra>0) L[1079][1]=2;
		}
	//Check all rules of unit[1080][0]
	L[1080][0] = LargeX[1080][1]>0 ? 1 : 0;
	satisfiable[1080][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1080_0[i][0] ][ unit1080_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1080_0[i][2] ][ unit1080_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1080_0[i][4] ][ unit1080_0[i][5] ] >0);
		X_contra = ( LargeX[1080][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1080_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1080][1]=0; L[1080][0]=1;}
			satisfiable[1080][0]=satisfiable[1080][0] & ((x[1080] ^ 0) | (x[ unit1080_0[i][0] ] ^ unit1080_0[i][1]) |(x[ unit1080_0[i][2] ] ^ unit1080_0[i][3]));
			}
		if(X_contra>0) L[1080][0]=2;
		}
	//Check all rules of unit[1080][1]
	L[1080][1] = LargeX[1080][0]>0 ? 1 : 0;
	satisfiable[1080][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1080_1[i][0] ][ unit1080_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1080_1[i][2] ][ unit1080_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1080_1[i][4] ][ unit1080_1[i][5] ] >0);
		X_contra = ( LargeX[1080][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1080_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1080][0]=0; L[1080][1]=1;}
			satisfiable[1080][1]=satisfiable[1080][1] & ((x[1080] ^ 1) | (x[ unit1080_1[i][0] ] ^ unit1080_1[i][1]) |(x[ unit1080_1[i][2] ] ^ unit1080_1[i][3]));
			}
		if(X_contra>0) L[1080][1]=2;
		}
	//Check all rules of unit[1081][0]
	L[1081][0] = LargeX[1081][1]>0 ? 1 : 0;
	satisfiable[1081][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1081_0[i][0] ][ unit1081_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1081_0[i][2] ][ unit1081_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1081_0[i][4] ][ unit1081_0[i][5] ] >0);
		X_contra = ( LargeX[1081][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1081_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1081][1]=0; L[1081][0]=1;}
			satisfiable[1081][0]=satisfiable[1081][0] & ((x[1081] ^ 0) | (x[ unit1081_0[i][0] ] ^ unit1081_0[i][1]) |(x[ unit1081_0[i][2] ] ^ unit1081_0[i][3]));
			}
		if(X_contra>0) L[1081][0]=2;
		}
	//Check all rules of unit[1081][1]
	L[1081][1] = LargeX[1081][0]>0 ? 1 : 0;
	satisfiable[1081][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1081_1[i][0] ][ unit1081_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1081_1[i][2] ][ unit1081_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1081_1[i][4] ][ unit1081_1[i][5] ] >0);
		X_contra = ( LargeX[1081][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1081_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1081][0]=0; L[1081][1]=1;}
			satisfiable[1081][1]=satisfiable[1081][1] & ((x[1081] ^ 1) | (x[ unit1081_1[i][0] ] ^ unit1081_1[i][1]) |(x[ unit1081_1[i][2] ] ^ unit1081_1[i][3]));
			}
		if(X_contra>0) L[1081][1]=2;
		}
	//Check all rules of unit[1082][0]
	L[1082][0] = LargeX[1082][1]>0 ? 1 : 0;
	satisfiable[1082][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1082_0[i][0] ][ unit1082_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1082_0[i][2] ][ unit1082_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1082_0[i][4] ][ unit1082_0[i][5] ] >0);
		X_contra = ( LargeX[1082][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1082_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1082][1]=0; L[1082][0]=1;}
			satisfiable[1082][0]=satisfiable[1082][0] & ((x[1082] ^ 0) | (x[ unit1082_0[i][0] ] ^ unit1082_0[i][1]) |(x[ unit1082_0[i][2] ] ^ unit1082_0[i][3]));
			}
		if(X_contra>0) L[1082][0]=2;
		}
	//Check all rules of unit[1082][1]
	L[1082][1] = LargeX[1082][0]>0 ? 1 : 0;
	satisfiable[1082][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1082_1[i][0] ][ unit1082_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1082_1[i][2] ][ unit1082_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1082_1[i][4] ][ unit1082_1[i][5] ] >0);
		X_contra = ( LargeX[1082][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1082_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1082][0]=0; L[1082][1]=1;}
			satisfiable[1082][1]=satisfiable[1082][1] & ((x[1082] ^ 1) | (x[ unit1082_1[i][0] ] ^ unit1082_1[i][1]) |(x[ unit1082_1[i][2] ] ^ unit1082_1[i][3]));
			}
		if(X_contra>0) L[1082][1]=2;
		}
	//Check all rules of unit[1083][0]
	L[1083][0] = LargeX[1083][1]>0 ? 1 : 0;
	satisfiable[1083][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1083_0[i][0] ][ unit1083_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1083_0[i][2] ][ unit1083_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1083_0[i][4] ][ unit1083_0[i][5] ] >0);
		X_contra = ( LargeX[1083][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1083_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1083][1]=0; L[1083][0]=1;}
			satisfiable[1083][0]=satisfiable[1083][0] & ((x[1083] ^ 0) | (x[ unit1083_0[i][0] ] ^ unit1083_0[i][1]) |(x[ unit1083_0[i][2] ] ^ unit1083_0[i][3]));
			}
		if(X_contra>0) L[1083][0]=2;
		}
	//Check all rules of unit[1083][1]
	L[1083][1] = LargeX[1083][0]>0 ? 1 : 0;
	satisfiable[1083][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1083_1[i][0] ][ unit1083_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1083_1[i][2] ][ unit1083_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1083_1[i][4] ][ unit1083_1[i][5] ] >0);
		X_contra = ( LargeX[1083][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1083_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1083][0]=0; L[1083][1]=1;}
			satisfiable[1083][1]=satisfiable[1083][1] & ((x[1083] ^ 1) | (x[ unit1083_1[i][0] ] ^ unit1083_1[i][1]) |(x[ unit1083_1[i][2] ] ^ unit1083_1[i][3]));
			}
		if(X_contra>0) L[1083][1]=2;
		}
	//Check all rules of unit[1084][0]
	L[1084][0] = LargeX[1084][1]>0 ? 1 : 0;
	satisfiable[1084][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1084_0[i][0] ][ unit1084_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1084_0[i][2] ][ unit1084_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1084_0[i][4] ][ unit1084_0[i][5] ] >0);
		X_contra = ( LargeX[1084][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1084_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1084][1]=0; L[1084][0]=1;}
			satisfiable[1084][0]=satisfiable[1084][0] & ((x[1084] ^ 0) | (x[ unit1084_0[i][0] ] ^ unit1084_0[i][1]) |(x[ unit1084_0[i][2] ] ^ unit1084_0[i][3]));
			}
		if(X_contra>0) L[1084][0]=2;
		}
	//Check all rules of unit[1084][1]
	L[1084][1] = LargeX[1084][0]>0 ? 1 : 0;
	satisfiable[1084][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1084_1[i][0] ][ unit1084_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1084_1[i][2] ][ unit1084_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1084_1[i][4] ][ unit1084_1[i][5] ] >0);
		X_contra = ( LargeX[1084][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1084_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1084][0]=0; L[1084][1]=1;}
			satisfiable[1084][1]=satisfiable[1084][1] & ((x[1084] ^ 1) | (x[ unit1084_1[i][0] ] ^ unit1084_1[i][1]) |(x[ unit1084_1[i][2] ] ^ unit1084_1[i][3]));
			}
		if(X_contra>0) L[1084][1]=2;
		}
	//Check all rules of unit[1085][0]
	L[1085][0] = LargeX[1085][1]>0 ? 1 : 0;
	satisfiable[1085][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1085_0[i][0] ][ unit1085_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1085_0[i][2] ][ unit1085_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1085_0[i][4] ][ unit1085_0[i][5] ] >0);
		X_contra = ( LargeX[1085][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1085_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1085][1]=0; L[1085][0]=1;}
			satisfiable[1085][0]=satisfiable[1085][0] & ((x[1085] ^ 0) | (x[ unit1085_0[i][0] ] ^ unit1085_0[i][1]) |(x[ unit1085_0[i][2] ] ^ unit1085_0[i][3]));
			}
		if(X_contra>0) L[1085][0]=2;
		}
	//Check all rules of unit[1085][1]
	L[1085][1] = LargeX[1085][0]>0 ? 1 : 0;
	satisfiable[1085][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1085_1[i][0] ][ unit1085_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1085_1[i][2] ][ unit1085_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1085_1[i][4] ][ unit1085_1[i][5] ] >0);
		X_contra = ( LargeX[1085][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1085_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1085][0]=0; L[1085][1]=1;}
			satisfiable[1085][1]=satisfiable[1085][1] & ((x[1085] ^ 1) | (x[ unit1085_1[i][0] ] ^ unit1085_1[i][1]) |(x[ unit1085_1[i][2] ] ^ unit1085_1[i][3]));
			}
		if(X_contra>0) L[1085][1]=2;
		}
	//Check all rules of unit[1086][0]
	L[1086][0] = LargeX[1086][1]>0 ? 1 : 0;
	satisfiable[1086][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1086_0[i][0] ][ unit1086_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1086_0[i][2] ][ unit1086_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1086_0[i][4] ][ unit1086_0[i][5] ] >0);
		X_contra = ( LargeX[1086][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1086_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1086][1]=0; L[1086][0]=1;}
			satisfiable[1086][0]=satisfiable[1086][0] & ((x[1086] ^ 0) | (x[ unit1086_0[i][0] ] ^ unit1086_0[i][1]) |(x[ unit1086_0[i][2] ] ^ unit1086_0[i][3]));
			}
		if(X_contra>0) L[1086][0]=2;
		}
	//Check all rules of unit[1086][1]
	L[1086][1] = LargeX[1086][0]>0 ? 1 : 0;
	satisfiable[1086][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1086_1[i][0] ][ unit1086_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1086_1[i][2] ][ unit1086_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1086_1[i][4] ][ unit1086_1[i][5] ] >0);
		X_contra = ( LargeX[1086][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1086_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1086][0]=0; L[1086][1]=1;}
			satisfiable[1086][1]=satisfiable[1086][1] & ((x[1086] ^ 1) | (x[ unit1086_1[i][0] ] ^ unit1086_1[i][1]) |(x[ unit1086_1[i][2] ] ^ unit1086_1[i][3]));
			}
		if(X_contra>0) L[1086][1]=2;
		}
	//Check all rules of unit[1087][0]
	L[1087][0] = LargeX[1087][1]>0 ? 1 : 0;
	satisfiable[1087][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1087_0[i][0] ][ unit1087_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1087_0[i][2] ][ unit1087_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1087_0[i][4] ][ unit1087_0[i][5] ] >0);
		X_contra = ( LargeX[1087][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1087_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1087][1]=0; L[1087][0]=1;}
			satisfiable[1087][0]=satisfiable[1087][0] & ((x[1087] ^ 0) | (x[ unit1087_0[i][0] ] ^ unit1087_0[i][1]) |(x[ unit1087_0[i][2] ] ^ unit1087_0[i][3]));
			}
		if(X_contra>0) L[1087][0]=2;
		}
	//Check all rules of unit[1087][1]
	L[1087][1] = LargeX[1087][0]>0 ? 1 : 0;
	satisfiable[1087][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1087_1[i][0] ][ unit1087_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1087_1[i][2] ][ unit1087_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1087_1[i][4] ][ unit1087_1[i][5] ] >0);
		X_contra = ( LargeX[1087][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1087_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1087][0]=0; L[1087][1]=1;}
			satisfiable[1087][1]=satisfiable[1087][1] & ((x[1087] ^ 1) | (x[ unit1087_1[i][0] ] ^ unit1087_1[i][1]) |(x[ unit1087_1[i][2] ] ^ unit1087_1[i][3]));
			}
		if(X_contra>0) L[1087][1]=2;
		}
	//Check all rules of unit[1088][0]
	L[1088][0] = LargeX[1088][1]>0 ? 1 : 0;
	satisfiable[1088][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1088_0[i][0] ][ unit1088_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1088_0[i][2] ][ unit1088_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1088_0[i][4] ][ unit1088_0[i][5] ] >0);
		X_contra = ( LargeX[1088][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1088_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1088][1]=0; L[1088][0]=1;}
			satisfiable[1088][0]=satisfiable[1088][0] & ((x[1088] ^ 0) | (x[ unit1088_0[i][0] ] ^ unit1088_0[i][1]) |(x[ unit1088_0[i][2] ] ^ unit1088_0[i][3]));
			}
		if(X_contra>0) L[1088][0]=2;
		}
	//Check all rules of unit[1088][1]
	L[1088][1] = LargeX[1088][0]>0 ? 1 : 0;
	satisfiable[1088][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1088_1[i][0] ][ unit1088_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1088_1[i][2] ][ unit1088_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1088_1[i][4] ][ unit1088_1[i][5] ] >0);
		X_contra = ( LargeX[1088][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1088_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1088][0]=0; L[1088][1]=1;}
			satisfiable[1088][1]=satisfiable[1088][1] & ((x[1088] ^ 1) | (x[ unit1088_1[i][0] ] ^ unit1088_1[i][1]) |(x[ unit1088_1[i][2] ] ^ unit1088_1[i][3]));
			}
		if(X_contra>0) L[1088][1]=2;
		}
	//Check all rules of unit[1089][0]
	L[1089][0] = LargeX[1089][1]>0 ? 1 : 0;
	satisfiable[1089][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1089_0[i][0] ][ unit1089_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1089_0[i][2] ][ unit1089_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1089_0[i][4] ][ unit1089_0[i][5] ] >0);
		X_contra = ( LargeX[1089][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1089_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1089][1]=0; L[1089][0]=1;}
			satisfiable[1089][0]=satisfiable[1089][0] & ((x[1089] ^ 0) | (x[ unit1089_0[i][0] ] ^ unit1089_0[i][1]) |(x[ unit1089_0[i][2] ] ^ unit1089_0[i][3]));
			}
		if(X_contra>0) L[1089][0]=2;
		}
	//Check all rules of unit[1089][1]
	L[1089][1] = LargeX[1089][0]>0 ? 1 : 0;
	satisfiable[1089][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1089_1[i][0] ][ unit1089_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1089_1[i][2] ][ unit1089_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1089_1[i][4] ][ unit1089_1[i][5] ] >0);
		X_contra = ( LargeX[1089][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1089_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1089][0]=0; L[1089][1]=1;}
			satisfiable[1089][1]=satisfiable[1089][1] & ((x[1089] ^ 1) | (x[ unit1089_1[i][0] ] ^ unit1089_1[i][1]) |(x[ unit1089_1[i][2] ] ^ unit1089_1[i][3]));
			}
		if(X_contra>0) L[1089][1]=2;
		}
	//Check all rules of unit[1090][0]
	L[1090][0] = LargeX[1090][1]>0 ? 1 : 0;
	satisfiable[1090][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1090_0[i][0] ][ unit1090_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1090_0[i][2] ][ unit1090_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1090_0[i][4] ][ unit1090_0[i][5] ] >0);
		X_contra = ( LargeX[1090][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1090_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1090][1]=0; L[1090][0]=1;}
			satisfiable[1090][0]=satisfiable[1090][0] & ((x[1090] ^ 0) | (x[ unit1090_0[i][0] ] ^ unit1090_0[i][1]) |(x[ unit1090_0[i][2] ] ^ unit1090_0[i][3]));
			}
		if(X_contra>0) L[1090][0]=2;
		}
	//Check all rules of unit[1090][1]
	L[1090][1] = LargeX[1090][0]>0 ? 1 : 0;
	satisfiable[1090][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1090_1[i][0] ][ unit1090_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1090_1[i][2] ][ unit1090_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1090_1[i][4] ][ unit1090_1[i][5] ] >0);
		X_contra = ( LargeX[1090][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1090_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1090][0]=0; L[1090][1]=1;}
			satisfiable[1090][1]=satisfiable[1090][1] & ((x[1090] ^ 1) | (x[ unit1090_1[i][0] ] ^ unit1090_1[i][1]) |(x[ unit1090_1[i][2] ] ^ unit1090_1[i][3]));
			}
		if(X_contra>0) L[1090][1]=2;
		}
	//Check all rules of unit[1091][0]
	L[1091][0] = LargeX[1091][1]>0 ? 1 : 0;
	satisfiable[1091][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1091_0[i][0] ][ unit1091_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1091_0[i][2] ][ unit1091_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1091_0[i][4] ][ unit1091_0[i][5] ] >0);
		X_contra = ( LargeX[1091][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1091_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1091][1]=0; L[1091][0]=1;}
			satisfiable[1091][0]=satisfiable[1091][0] & ((x[1091] ^ 0) | (x[ unit1091_0[i][0] ] ^ unit1091_0[i][1]) |(x[ unit1091_0[i][2] ] ^ unit1091_0[i][3]));
			}
		if(X_contra>0) L[1091][0]=2;
		}
	//Check all rules of unit[1091][1]
	L[1091][1] = LargeX[1091][0]>0 ? 1 : 0;
	satisfiable[1091][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1091_1[i][0] ][ unit1091_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1091_1[i][2] ][ unit1091_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1091_1[i][4] ][ unit1091_1[i][5] ] >0);
		X_contra = ( LargeX[1091][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1091_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1091][0]=0; L[1091][1]=1;}
			satisfiable[1091][1]=satisfiable[1091][1] & ((x[1091] ^ 1) | (x[ unit1091_1[i][0] ] ^ unit1091_1[i][1]) |(x[ unit1091_1[i][2] ] ^ unit1091_1[i][3]));
			}
		if(X_contra>0) L[1091][1]=2;
		}
	//Check all rules of unit[1092][0]
	L[1092][0] = LargeX[1092][1]>0 ? 1 : 0;
	satisfiable[1092][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1092_0[i][0] ][ unit1092_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1092_0[i][2] ][ unit1092_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1092_0[i][4] ][ unit1092_0[i][5] ] >0);
		X_contra = ( LargeX[1092][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1092_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1092][1]=0; L[1092][0]=1;}
			satisfiable[1092][0]=satisfiable[1092][0] & ((x[1092] ^ 0) | (x[ unit1092_0[i][0] ] ^ unit1092_0[i][1]) |(x[ unit1092_0[i][2] ] ^ unit1092_0[i][3]));
			}
		if(X_contra>0) L[1092][0]=2;
		}
	//Check all rules of unit[1092][1]
	L[1092][1] = LargeX[1092][0]>0 ? 1 : 0;
	satisfiable[1092][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1092_1[i][0] ][ unit1092_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1092_1[i][2] ][ unit1092_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1092_1[i][4] ][ unit1092_1[i][5] ] >0);
		X_contra = ( LargeX[1092][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1092_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1092][0]=0; L[1092][1]=1;}
			satisfiable[1092][1]=satisfiable[1092][1] & ((x[1092] ^ 1) | (x[ unit1092_1[i][0] ] ^ unit1092_1[i][1]) |(x[ unit1092_1[i][2] ] ^ unit1092_1[i][3]));
			}
		if(X_contra>0) L[1092][1]=2;
		}
	//Check all rules of unit[1093][0]
	L[1093][0] = LargeX[1093][1]>0 ? 1 : 0;
	satisfiable[1093][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1093_0[i][0] ][ unit1093_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1093_0[i][2] ][ unit1093_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1093_0[i][4] ][ unit1093_0[i][5] ] >0);
		X_contra = ( LargeX[1093][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1093_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1093][1]=0; L[1093][0]=1;}
			satisfiable[1093][0]=satisfiable[1093][0] & ((x[1093] ^ 0) | (x[ unit1093_0[i][0] ] ^ unit1093_0[i][1]) |(x[ unit1093_0[i][2] ] ^ unit1093_0[i][3]));
			}
		if(X_contra>0) L[1093][0]=2;
		}
	//Check all rules of unit[1093][1]
	L[1093][1] = LargeX[1093][0]>0 ? 1 : 0;
	satisfiable[1093][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1093_1[i][0] ][ unit1093_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1093_1[i][2] ][ unit1093_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1093_1[i][4] ][ unit1093_1[i][5] ] >0);
		X_contra = ( LargeX[1093][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1093_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1093][0]=0; L[1093][1]=1;}
			satisfiable[1093][1]=satisfiable[1093][1] & ((x[1093] ^ 1) | (x[ unit1093_1[i][0] ] ^ unit1093_1[i][1]) |(x[ unit1093_1[i][2] ] ^ unit1093_1[i][3]));
			}
		if(X_contra>0) L[1093][1]=2;
		}
	//Check all rules of unit[1094][0]
	L[1094][0] = LargeX[1094][1]>0 ? 1 : 0;
	satisfiable[1094][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1094_0[i][0] ][ unit1094_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1094_0[i][2] ][ unit1094_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1094_0[i][4] ][ unit1094_0[i][5] ] >0);
		X_contra = ( LargeX[1094][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1094_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1094][1]=0; L[1094][0]=1;}
			satisfiable[1094][0]=satisfiable[1094][0] & ((x[1094] ^ 0) | (x[ unit1094_0[i][0] ] ^ unit1094_0[i][1]) |(x[ unit1094_0[i][2] ] ^ unit1094_0[i][3]));
			}
		if(X_contra>0) L[1094][0]=2;
		}
	//Check all rules of unit[1094][1]
	L[1094][1] = LargeX[1094][0]>0 ? 1 : 0;
	satisfiable[1094][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1094_1[i][0] ][ unit1094_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1094_1[i][2] ][ unit1094_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1094_1[i][4] ][ unit1094_1[i][5] ] >0);
		X_contra = ( LargeX[1094][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1094_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1094][0]=0; L[1094][1]=1;}
			satisfiable[1094][1]=satisfiable[1094][1] & ((x[1094] ^ 1) | (x[ unit1094_1[i][0] ] ^ unit1094_1[i][1]) |(x[ unit1094_1[i][2] ] ^ unit1094_1[i][3]));
			}
		if(X_contra>0) L[1094][1]=2;
		}
	//Check all rules of unit[1095][0]
	L[1095][0] = LargeX[1095][1]>0 ? 1 : 0;
	satisfiable[1095][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1095_0[i][0] ][ unit1095_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1095_0[i][2] ][ unit1095_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1095_0[i][4] ][ unit1095_0[i][5] ] >0);
		X_contra = ( LargeX[1095][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1095_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1095][1]=0; L[1095][0]=1;}
			satisfiable[1095][0]=satisfiable[1095][0] & ((x[1095] ^ 0) | (x[ unit1095_0[i][0] ] ^ unit1095_0[i][1]) |(x[ unit1095_0[i][2] ] ^ unit1095_0[i][3]));
			}
		if(X_contra>0) L[1095][0]=2;
		}
	//Check all rules of unit[1095][1]
	L[1095][1] = LargeX[1095][0]>0 ? 1 : 0;
	satisfiable[1095][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1095_1[i][0] ][ unit1095_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1095_1[i][2] ][ unit1095_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1095_1[i][4] ][ unit1095_1[i][5] ] >0);
		X_contra = ( LargeX[1095][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1095_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1095][0]=0; L[1095][1]=1;}
			satisfiable[1095][1]=satisfiable[1095][1] & ((x[1095] ^ 1) | (x[ unit1095_1[i][0] ] ^ unit1095_1[i][1]) |(x[ unit1095_1[i][2] ] ^ unit1095_1[i][3]));
			}
		if(X_contra>0) L[1095][1]=2;
		}
	//Check all rules of unit[1096][0]
	L[1096][0] = LargeX[1096][1]>0 ? 1 : 0;
	satisfiable[1096][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1096_0[i][0] ][ unit1096_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1096_0[i][2] ][ unit1096_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1096_0[i][4] ][ unit1096_0[i][5] ] >0);
		X_contra = ( LargeX[1096][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1096_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1096][1]=0; L[1096][0]=1;}
			satisfiable[1096][0]=satisfiable[1096][0] & ((x[1096] ^ 0) | (x[ unit1096_0[i][0] ] ^ unit1096_0[i][1]) |(x[ unit1096_0[i][2] ] ^ unit1096_0[i][3]));
			}
		if(X_contra>0) L[1096][0]=2;
		}
	//Check all rules of unit[1096][1]
	L[1096][1] = LargeX[1096][0]>0 ? 1 : 0;
	satisfiable[1096][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1096_1[i][0] ][ unit1096_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1096_1[i][2] ][ unit1096_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1096_1[i][4] ][ unit1096_1[i][5] ] >0);
		X_contra = ( LargeX[1096][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1096_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1096][0]=0; L[1096][1]=1;}
			satisfiable[1096][1]=satisfiable[1096][1] & ((x[1096] ^ 1) | (x[ unit1096_1[i][0] ] ^ unit1096_1[i][1]) |(x[ unit1096_1[i][2] ] ^ unit1096_1[i][3]));
			}
		if(X_contra>0) L[1096][1]=2;
		}
	//Check all rules of unit[1097][0]
	L[1097][0] = LargeX[1097][1]>0 ? 1 : 0;
	satisfiable[1097][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1097_0[i][0] ][ unit1097_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1097_0[i][2] ][ unit1097_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1097_0[i][4] ][ unit1097_0[i][5] ] >0);
		X_contra = ( LargeX[1097][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1097_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1097][1]=0; L[1097][0]=1;}
			satisfiable[1097][0]=satisfiable[1097][0] & ((x[1097] ^ 0) | (x[ unit1097_0[i][0] ] ^ unit1097_0[i][1]) |(x[ unit1097_0[i][2] ] ^ unit1097_0[i][3]));
			}
		if(X_contra>0) L[1097][0]=2;
		}
	//Check all rules of unit[1097][1]
	L[1097][1] = LargeX[1097][0]>0 ? 1 : 0;
	satisfiable[1097][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1097_1[i][0] ][ unit1097_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1097_1[i][2] ][ unit1097_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1097_1[i][4] ][ unit1097_1[i][5] ] >0);
		X_contra = ( LargeX[1097][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1097_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1097][0]=0; L[1097][1]=1;}
			satisfiable[1097][1]=satisfiable[1097][1] & ((x[1097] ^ 1) | (x[ unit1097_1[i][0] ] ^ unit1097_1[i][1]) |(x[ unit1097_1[i][2] ] ^ unit1097_1[i][3]));
			}
		if(X_contra>0) L[1097][1]=2;
		}
	//Check all rules of unit[1098][0]
	L[1098][0] = LargeX[1098][1]>0 ? 1 : 0;
	satisfiable[1098][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1098_0[i][0] ][ unit1098_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1098_0[i][2] ][ unit1098_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1098_0[i][4] ][ unit1098_0[i][5] ] >0);
		X_contra = ( LargeX[1098][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1098_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1098][1]=0; L[1098][0]=1;}
			satisfiable[1098][0]=satisfiable[1098][0] & ((x[1098] ^ 0) | (x[ unit1098_0[i][0] ] ^ unit1098_0[i][1]) |(x[ unit1098_0[i][2] ] ^ unit1098_0[i][3]));
			}
		if(X_contra>0) L[1098][0]=2;
		}
	//Check all rules of unit[1098][1]
	L[1098][1] = LargeX[1098][0]>0 ? 1 : 0;
	satisfiable[1098][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1098_1[i][0] ][ unit1098_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1098_1[i][2] ][ unit1098_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1098_1[i][4] ][ unit1098_1[i][5] ] >0);
		X_contra = ( LargeX[1098][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1098_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1098][0]=0; L[1098][1]=1;}
			satisfiable[1098][1]=satisfiable[1098][1] & ((x[1098] ^ 1) | (x[ unit1098_1[i][0] ] ^ unit1098_1[i][1]) |(x[ unit1098_1[i][2] ] ^ unit1098_1[i][3]));
			}
		if(X_contra>0) L[1098][1]=2;
		}
	//Check all rules of unit[1099][0]
	L[1099][0] = LargeX[1099][1]>0 ? 1 : 0;
	satisfiable[1099][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1099_0[i][0] ][ unit1099_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1099_0[i][2] ][ unit1099_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1099_0[i][4] ][ unit1099_0[i][5] ] >0);
		X_contra = ( LargeX[1099][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1099_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1099][1]=0; L[1099][0]=1;}
			satisfiable[1099][0]=satisfiable[1099][0] & ((x[1099] ^ 0) | (x[ unit1099_0[i][0] ] ^ unit1099_0[i][1]) |(x[ unit1099_0[i][2] ] ^ unit1099_0[i][3]));
			}
		if(X_contra>0) L[1099][0]=2;
		}
	//Check all rules of unit[1099][1]
	L[1099][1] = LargeX[1099][0]>0 ? 1 : 0;
	satisfiable[1099][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1099_1[i][0] ][ unit1099_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1099_1[i][2] ][ unit1099_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1099_1[i][4] ][ unit1099_1[i][5] ] >0);
		X_contra = ( LargeX[1099][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1099_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1099][0]=0; L[1099][1]=1;}
			satisfiable[1099][1]=satisfiable[1099][1] & ((x[1099] ^ 1) | (x[ unit1099_1[i][0] ] ^ unit1099_1[i][1]) |(x[ unit1099_1[i][2] ] ^ unit1099_1[i][3]));
			}
		if(X_contra>0) L[1099][1]=2;
		}
	//Check all rules of unit[1100][0]
	L[1100][0] = LargeX[1100][1]>0 ? 1 : 0;
	satisfiable[1100][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1100_0[i][0] ][ unit1100_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1100_0[i][2] ][ unit1100_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1100_0[i][4] ][ unit1100_0[i][5] ] >0);
		X_contra = ( LargeX[1100][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1100_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1100][1]=0; L[1100][0]=1;}
			satisfiable[1100][0]=satisfiable[1100][0] & ((x[1100] ^ 0) | (x[ unit1100_0[i][0] ] ^ unit1100_0[i][1]) |(x[ unit1100_0[i][2] ] ^ unit1100_0[i][3]));
			}
		if(X_contra>0) L[1100][0]=2;
		}
	//Check all rules of unit[1100][1]
	L[1100][1] = LargeX[1100][0]>0 ? 1 : 0;
	satisfiable[1100][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1100_1[i][0] ][ unit1100_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1100_1[i][2] ][ unit1100_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1100_1[i][4] ][ unit1100_1[i][5] ] >0);
		X_contra = ( LargeX[1100][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1100_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1100][0]=0; L[1100][1]=1;}
			satisfiable[1100][1]=satisfiable[1100][1] & ((x[1100] ^ 1) | (x[ unit1100_1[i][0] ] ^ unit1100_1[i][1]) |(x[ unit1100_1[i][2] ] ^ unit1100_1[i][3]));
			}
		if(X_contra>0) L[1100][1]=2;
		}
	//Check all rules of unit[1101][0]
	L[1101][0] = LargeX[1101][1]>0 ? 1 : 0;
	satisfiable[1101][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1101_0[i][0] ][ unit1101_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1101_0[i][2] ][ unit1101_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1101_0[i][4] ][ unit1101_0[i][5] ] >0);
		X_contra = ( LargeX[1101][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1101_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1101][1]=0; L[1101][0]=1;}
			satisfiable[1101][0]=satisfiable[1101][0] & ((x[1101] ^ 0) | (x[ unit1101_0[i][0] ] ^ unit1101_0[i][1]) |(x[ unit1101_0[i][2] ] ^ unit1101_0[i][3]));
			}
		if(X_contra>0) L[1101][0]=2;
		}
	//Check all rules of unit[1101][1]
	L[1101][1] = LargeX[1101][0]>0 ? 1 : 0;
	satisfiable[1101][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1101_1[i][0] ][ unit1101_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1101_1[i][2] ][ unit1101_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1101_1[i][4] ][ unit1101_1[i][5] ] >0);
		X_contra = ( LargeX[1101][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1101_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1101][0]=0; L[1101][1]=1;}
			satisfiable[1101][1]=satisfiable[1101][1] & ((x[1101] ^ 1) | (x[ unit1101_1[i][0] ] ^ unit1101_1[i][1]) |(x[ unit1101_1[i][2] ] ^ unit1101_1[i][3]));
			}
		if(X_contra>0) L[1101][1]=2;
		}
	//Check all rules of unit[1102][0]
	L[1102][0] = LargeX[1102][1]>0 ? 1 : 0;
	satisfiable[1102][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1102_0[i][0] ][ unit1102_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1102_0[i][2] ][ unit1102_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1102_0[i][4] ][ unit1102_0[i][5] ] >0);
		X_contra = ( LargeX[1102][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1102_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1102][1]=0; L[1102][0]=1;}
			satisfiable[1102][0]=satisfiable[1102][0] & ((x[1102] ^ 0) | (x[ unit1102_0[i][0] ] ^ unit1102_0[i][1]) |(x[ unit1102_0[i][2] ] ^ unit1102_0[i][3]));
			}
		if(X_contra>0) L[1102][0]=2;
		}
	//Check all rules of unit[1102][1]
	L[1102][1] = LargeX[1102][0]>0 ? 1 : 0;
	satisfiable[1102][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1102_1[i][0] ][ unit1102_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1102_1[i][2] ][ unit1102_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1102_1[i][4] ][ unit1102_1[i][5] ] >0);
		X_contra = ( LargeX[1102][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1102_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1102][0]=0; L[1102][1]=1;}
			satisfiable[1102][1]=satisfiable[1102][1] & ((x[1102] ^ 1) | (x[ unit1102_1[i][0] ] ^ unit1102_1[i][1]) |(x[ unit1102_1[i][2] ] ^ unit1102_1[i][3]));
			}
		if(X_contra>0) L[1102][1]=2;
		}
	//Check all rules of unit[1103][0]
	L[1103][0] = LargeX[1103][1]>0 ? 1 : 0;
	satisfiable[1103][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1103_0[i][0] ][ unit1103_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1103_0[i][2] ][ unit1103_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1103_0[i][4] ][ unit1103_0[i][5] ] >0);
		X_contra = ( LargeX[1103][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1103_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1103][1]=0; L[1103][0]=1;}
			satisfiable[1103][0]=satisfiable[1103][0] & ((x[1103] ^ 0) | (x[ unit1103_0[i][0] ] ^ unit1103_0[i][1]) |(x[ unit1103_0[i][2] ] ^ unit1103_0[i][3]));
			}
		if(X_contra>0) L[1103][0]=2;
		}
	//Check all rules of unit[1103][1]
	L[1103][1] = LargeX[1103][0]>0 ? 1 : 0;
	satisfiable[1103][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1103_1[i][0] ][ unit1103_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1103_1[i][2] ][ unit1103_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1103_1[i][4] ][ unit1103_1[i][5] ] >0);
		X_contra = ( LargeX[1103][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1103_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1103][0]=0; L[1103][1]=1;}
			satisfiable[1103][1]=satisfiable[1103][1] & ((x[1103] ^ 1) | (x[ unit1103_1[i][0] ] ^ unit1103_1[i][1]) |(x[ unit1103_1[i][2] ] ^ unit1103_1[i][3]));
			}
		if(X_contra>0) L[1103][1]=2;
		}
	//Check all rules of unit[1104][0]
	L[1104][0] = LargeX[1104][1]>0 ? 1 : 0;
	satisfiable[1104][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1104_0[i][0] ][ unit1104_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1104_0[i][2] ][ unit1104_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1104_0[i][4] ][ unit1104_0[i][5] ] >0);
		X_contra = ( LargeX[1104][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1104_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1104][1]=0; L[1104][0]=1;}
			satisfiable[1104][0]=satisfiable[1104][0] & ((x[1104] ^ 0) | (x[ unit1104_0[i][0] ] ^ unit1104_0[i][1]) |(x[ unit1104_0[i][2] ] ^ unit1104_0[i][3]));
			}
		if(X_contra>0) L[1104][0]=2;
		}
	//Check all rules of unit[1104][1]
	L[1104][1] = LargeX[1104][0]>0 ? 1 : 0;
	satisfiable[1104][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1104_1[i][0] ][ unit1104_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1104_1[i][2] ][ unit1104_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1104_1[i][4] ][ unit1104_1[i][5] ] >0);
		X_contra = ( LargeX[1104][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1104_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1104][0]=0; L[1104][1]=1;}
			satisfiable[1104][1]=satisfiable[1104][1] & ((x[1104] ^ 1) | (x[ unit1104_1[i][0] ] ^ unit1104_1[i][1]) |(x[ unit1104_1[i][2] ] ^ unit1104_1[i][3]));
			}
		if(X_contra>0) L[1104][1]=2;
		}
	//Check all rules of unit[1105][0]
	L[1105][0] = LargeX[1105][1]>0 ? 1 : 0;
	satisfiable[1105][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1105_0[i][0] ][ unit1105_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1105_0[i][2] ][ unit1105_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1105_0[i][4] ][ unit1105_0[i][5] ] >0);
		X_contra = ( LargeX[1105][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1105_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1105][1]=0; L[1105][0]=1;}
			satisfiable[1105][0]=satisfiable[1105][0] & ((x[1105] ^ 0) | (x[ unit1105_0[i][0] ] ^ unit1105_0[i][1]) |(x[ unit1105_0[i][2] ] ^ unit1105_0[i][3]));
			}
		if(X_contra>0) L[1105][0]=2;
		}
	//Check all rules of unit[1105][1]
	L[1105][1] = LargeX[1105][0]>0 ? 1 : 0;
	satisfiable[1105][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1105_1[i][0] ][ unit1105_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1105_1[i][2] ][ unit1105_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1105_1[i][4] ][ unit1105_1[i][5] ] >0);
		X_contra = ( LargeX[1105][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1105_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1105][0]=0; L[1105][1]=1;}
			satisfiable[1105][1]=satisfiable[1105][1] & ((x[1105] ^ 1) | (x[ unit1105_1[i][0] ] ^ unit1105_1[i][1]) |(x[ unit1105_1[i][2] ] ^ unit1105_1[i][3]));
			}
		if(X_contra>0) L[1105][1]=2;
		}
	//Check all rules of unit[1106][0]
	L[1106][0] = LargeX[1106][1]>0 ? 1 : 0;
	satisfiable[1106][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1106_0[i][0] ][ unit1106_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1106_0[i][2] ][ unit1106_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1106_0[i][4] ][ unit1106_0[i][5] ] >0);
		X_contra = ( LargeX[1106][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1106_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1106][1]=0; L[1106][0]=1;}
			satisfiable[1106][0]=satisfiable[1106][0] & ((x[1106] ^ 0) | (x[ unit1106_0[i][0] ] ^ unit1106_0[i][1]) |(x[ unit1106_0[i][2] ] ^ unit1106_0[i][3]));
			}
		if(X_contra>0) L[1106][0]=2;
		}
	//Check all rules of unit[1106][1]
	L[1106][1] = LargeX[1106][0]>0 ? 1 : 0;
	satisfiable[1106][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1106_1[i][0] ][ unit1106_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1106_1[i][2] ][ unit1106_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1106_1[i][4] ][ unit1106_1[i][5] ] >0);
		X_contra = ( LargeX[1106][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1106_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1106][0]=0; L[1106][1]=1;}
			satisfiable[1106][1]=satisfiable[1106][1] & ((x[1106] ^ 1) | (x[ unit1106_1[i][0] ] ^ unit1106_1[i][1]) |(x[ unit1106_1[i][2] ] ^ unit1106_1[i][3]));
			}
		if(X_contra>0) L[1106][1]=2;
		}
	//Check all rules of unit[1107][0]
	L[1107][0] = LargeX[1107][1]>0 ? 1 : 0;
	satisfiable[1107][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1107_0[i][0] ][ unit1107_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1107_0[i][2] ][ unit1107_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1107_0[i][4] ][ unit1107_0[i][5] ] >0);
		X_contra = ( LargeX[1107][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1107_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1107][1]=0; L[1107][0]=1;}
			satisfiable[1107][0]=satisfiable[1107][0] & ((x[1107] ^ 0) | (x[ unit1107_0[i][0] ] ^ unit1107_0[i][1]) |(x[ unit1107_0[i][2] ] ^ unit1107_0[i][3]));
			}
		if(X_contra>0) L[1107][0]=2;
		}
	//Check all rules of unit[1107][1]
	L[1107][1] = LargeX[1107][0]>0 ? 1 : 0;
	satisfiable[1107][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1107_1[i][0] ][ unit1107_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1107_1[i][2] ][ unit1107_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1107_1[i][4] ][ unit1107_1[i][5] ] >0);
		X_contra = ( LargeX[1107][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1107_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1107][0]=0; L[1107][1]=1;}
			satisfiable[1107][1]=satisfiable[1107][1] & ((x[1107] ^ 1) | (x[ unit1107_1[i][0] ] ^ unit1107_1[i][1]) |(x[ unit1107_1[i][2] ] ^ unit1107_1[i][3]));
			}
		if(X_contra>0) L[1107][1]=2;
		}
	//Check all rules of unit[1108][0]
	L[1108][0] = LargeX[1108][1]>0 ? 1 : 0;
	satisfiable[1108][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1108_0[i][0] ][ unit1108_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1108_0[i][2] ][ unit1108_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1108_0[i][4] ][ unit1108_0[i][5] ] >0);
		X_contra = ( LargeX[1108][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1108_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1108][1]=0; L[1108][0]=1;}
			satisfiable[1108][0]=satisfiable[1108][0] & ((x[1108] ^ 0) | (x[ unit1108_0[i][0] ] ^ unit1108_0[i][1]) |(x[ unit1108_0[i][2] ] ^ unit1108_0[i][3]));
			}
		if(X_contra>0) L[1108][0]=2;
		}
	//Check all rules of unit[1108][1]
	L[1108][1] = LargeX[1108][0]>0 ? 1 : 0;
	satisfiable[1108][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1108_1[i][0] ][ unit1108_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1108_1[i][2] ][ unit1108_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1108_1[i][4] ][ unit1108_1[i][5] ] >0);
		X_contra = ( LargeX[1108][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1108_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1108][0]=0; L[1108][1]=1;}
			satisfiable[1108][1]=satisfiable[1108][1] & ((x[1108] ^ 1) | (x[ unit1108_1[i][0] ] ^ unit1108_1[i][1]) |(x[ unit1108_1[i][2] ] ^ unit1108_1[i][3]));
			}
		if(X_contra>0) L[1108][1]=2;
		}
	//Check all rules of unit[1109][0]
	L[1109][0] = LargeX[1109][1]>0 ? 1 : 0;
	satisfiable[1109][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1109_0[i][0] ][ unit1109_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1109_0[i][2] ][ unit1109_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1109_0[i][4] ][ unit1109_0[i][5] ] >0);
		X_contra = ( LargeX[1109][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1109_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1109][1]=0; L[1109][0]=1;}
			satisfiable[1109][0]=satisfiable[1109][0] & ((x[1109] ^ 0) | (x[ unit1109_0[i][0] ] ^ unit1109_0[i][1]) |(x[ unit1109_0[i][2] ] ^ unit1109_0[i][3]));
			}
		if(X_contra>0) L[1109][0]=2;
		}
	//Check all rules of unit[1109][1]
	L[1109][1] = LargeX[1109][0]>0 ? 1 : 0;
	satisfiable[1109][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1109_1[i][0] ][ unit1109_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1109_1[i][2] ][ unit1109_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1109_1[i][4] ][ unit1109_1[i][5] ] >0);
		X_contra = ( LargeX[1109][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1109_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1109][0]=0; L[1109][1]=1;}
			satisfiable[1109][1]=satisfiable[1109][1] & ((x[1109] ^ 1) | (x[ unit1109_1[i][0] ] ^ unit1109_1[i][1]) |(x[ unit1109_1[i][2] ] ^ unit1109_1[i][3]));
			}
		if(X_contra>0) L[1109][1]=2;
		}
	//Check all rules of unit[1110][0]
	L[1110][0] = LargeX[1110][1]>0 ? 1 : 0;
	satisfiable[1110][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1110_0[i][0] ][ unit1110_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1110_0[i][2] ][ unit1110_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1110_0[i][4] ][ unit1110_0[i][5] ] >0);
		X_contra = ( LargeX[1110][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1110_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1110][1]=0; L[1110][0]=1;}
			satisfiable[1110][0]=satisfiable[1110][0] & ((x[1110] ^ 0) | (x[ unit1110_0[i][0] ] ^ unit1110_0[i][1]) |(x[ unit1110_0[i][2] ] ^ unit1110_0[i][3]));
			}
		if(X_contra>0) L[1110][0]=2;
		}
	//Check all rules of unit[1110][1]
	L[1110][1] = LargeX[1110][0]>0 ? 1 : 0;
	satisfiable[1110][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1110_1[i][0] ][ unit1110_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1110_1[i][2] ][ unit1110_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1110_1[i][4] ][ unit1110_1[i][5] ] >0);
		X_contra = ( LargeX[1110][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1110_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1110][0]=0; L[1110][1]=1;}
			satisfiable[1110][1]=satisfiable[1110][1] & ((x[1110] ^ 1) | (x[ unit1110_1[i][0] ] ^ unit1110_1[i][1]) |(x[ unit1110_1[i][2] ] ^ unit1110_1[i][3]));
			}
		if(X_contra>0) L[1110][1]=2;
		}
	//Check all rules of unit[1111][0]
	L[1111][0] = LargeX[1111][1]>0 ? 1 : 0;
	satisfiable[1111][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1111_0[i][0] ][ unit1111_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1111_0[i][2] ][ unit1111_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1111_0[i][4] ][ unit1111_0[i][5] ] >0);
		X_contra = ( LargeX[1111][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1111_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1111][1]=0; L[1111][0]=1;}
			satisfiable[1111][0]=satisfiable[1111][0] & ((x[1111] ^ 0) | (x[ unit1111_0[i][0] ] ^ unit1111_0[i][1]) |(x[ unit1111_0[i][2] ] ^ unit1111_0[i][3]));
			}
		if(X_contra>0) L[1111][0]=2;
		}
	//Check all rules of unit[1111][1]
	L[1111][1] = LargeX[1111][0]>0 ? 1 : 0;
	satisfiable[1111][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1111_1[i][0] ][ unit1111_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1111_1[i][2] ][ unit1111_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1111_1[i][4] ][ unit1111_1[i][5] ] >0);
		X_contra = ( LargeX[1111][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1111_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1111][0]=0; L[1111][1]=1;}
			satisfiable[1111][1]=satisfiable[1111][1] & ((x[1111] ^ 1) | (x[ unit1111_1[i][0] ] ^ unit1111_1[i][1]) |(x[ unit1111_1[i][2] ] ^ unit1111_1[i][3]));
			}
		if(X_contra>0) L[1111][1]=2;
		}
	//Check all rules of unit[1112][0]
	L[1112][0] = LargeX[1112][1]>0 ? 1 : 0;
	satisfiable[1112][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1112_0[i][0] ][ unit1112_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1112_0[i][2] ][ unit1112_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1112_0[i][4] ][ unit1112_0[i][5] ] >0);
		X_contra = ( LargeX[1112][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1112_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1112][1]=0; L[1112][0]=1;}
			satisfiable[1112][0]=satisfiable[1112][0] & ((x[1112] ^ 0) | (x[ unit1112_0[i][0] ] ^ unit1112_0[i][1]) |(x[ unit1112_0[i][2] ] ^ unit1112_0[i][3]));
			}
		if(X_contra>0) L[1112][0]=2;
		}
	//Check all rules of unit[1112][1]
	L[1112][1] = LargeX[1112][0]>0 ? 1 : 0;
	satisfiable[1112][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1112_1[i][0] ][ unit1112_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1112_1[i][2] ][ unit1112_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1112_1[i][4] ][ unit1112_1[i][5] ] >0);
		X_contra = ( LargeX[1112][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1112_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1112][0]=0; L[1112][1]=1;}
			satisfiable[1112][1]=satisfiable[1112][1] & ((x[1112] ^ 1) | (x[ unit1112_1[i][0] ] ^ unit1112_1[i][1]) |(x[ unit1112_1[i][2] ] ^ unit1112_1[i][3]));
			}
		if(X_contra>0) L[1112][1]=2;
		}
	//Check all rules of unit[1113][0]
	L[1113][0] = LargeX[1113][1]>0 ? 1 : 0;
	satisfiable[1113][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1113_0[i][0] ][ unit1113_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1113_0[i][2] ][ unit1113_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1113_0[i][4] ][ unit1113_0[i][5] ] >0);
		X_contra = ( LargeX[1113][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1113_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1113][1]=0; L[1113][0]=1;}
			satisfiable[1113][0]=satisfiable[1113][0] & ((x[1113] ^ 0) | (x[ unit1113_0[i][0] ] ^ unit1113_0[i][1]) |(x[ unit1113_0[i][2] ] ^ unit1113_0[i][3]));
			}
		if(X_contra>0) L[1113][0]=2;
		}
	//Check all rules of unit[1113][1]
	L[1113][1] = LargeX[1113][0]>0 ? 1 : 0;
	satisfiable[1113][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1113_1[i][0] ][ unit1113_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1113_1[i][2] ][ unit1113_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1113_1[i][4] ][ unit1113_1[i][5] ] >0);
		X_contra = ( LargeX[1113][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1113_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1113][0]=0; L[1113][1]=1;}
			satisfiable[1113][1]=satisfiable[1113][1] & ((x[1113] ^ 1) | (x[ unit1113_1[i][0] ] ^ unit1113_1[i][1]) |(x[ unit1113_1[i][2] ] ^ unit1113_1[i][3]));
			}
		if(X_contra>0) L[1113][1]=2;
		}
	//Check all rules of unit[1114][0]
	L[1114][0] = LargeX[1114][1]>0 ? 1 : 0;
	satisfiable[1114][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1114_0[i][0] ][ unit1114_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1114_0[i][2] ][ unit1114_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1114_0[i][4] ][ unit1114_0[i][5] ] >0);
		X_contra = ( LargeX[1114][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1114_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1114][1]=0; L[1114][0]=1;}
			satisfiable[1114][0]=satisfiable[1114][0] & ((x[1114] ^ 0) | (x[ unit1114_0[i][0] ] ^ unit1114_0[i][1]) |(x[ unit1114_0[i][2] ] ^ unit1114_0[i][3]));
			}
		if(X_contra>0) L[1114][0]=2;
		}
	//Check all rules of unit[1114][1]
	L[1114][1] = LargeX[1114][0]>0 ? 1 : 0;
	satisfiable[1114][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1114_1[i][0] ][ unit1114_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1114_1[i][2] ][ unit1114_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1114_1[i][4] ][ unit1114_1[i][5] ] >0);
		X_contra = ( LargeX[1114][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1114_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1114][0]=0; L[1114][1]=1;}
			satisfiable[1114][1]=satisfiable[1114][1] & ((x[1114] ^ 1) | (x[ unit1114_1[i][0] ] ^ unit1114_1[i][1]) |(x[ unit1114_1[i][2] ] ^ unit1114_1[i][3]));
			}
		if(X_contra>0) L[1114][1]=2;
		}
	//Check all rules of unit[1115][0]
	L[1115][0] = LargeX[1115][1]>0 ? 1 : 0;
	satisfiable[1115][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1115_0[i][0] ][ unit1115_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1115_0[i][2] ][ unit1115_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1115_0[i][4] ][ unit1115_0[i][5] ] >0);
		X_contra = ( LargeX[1115][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1115_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1115][1]=0; L[1115][0]=1;}
			satisfiable[1115][0]=satisfiable[1115][0] & ((x[1115] ^ 0) | (x[ unit1115_0[i][0] ] ^ unit1115_0[i][1]) |(x[ unit1115_0[i][2] ] ^ unit1115_0[i][3]));
			}
		if(X_contra>0) L[1115][0]=2;
		}
	//Check all rules of unit[1115][1]
	L[1115][1] = LargeX[1115][0]>0 ? 1 : 0;
	satisfiable[1115][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1115_1[i][0] ][ unit1115_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1115_1[i][2] ][ unit1115_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1115_1[i][4] ][ unit1115_1[i][5] ] >0);
		X_contra = ( LargeX[1115][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1115_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1115][0]=0; L[1115][1]=1;}
			satisfiable[1115][1]=satisfiable[1115][1] & ((x[1115] ^ 1) | (x[ unit1115_1[i][0] ] ^ unit1115_1[i][1]) |(x[ unit1115_1[i][2] ] ^ unit1115_1[i][3]));
			}
		if(X_contra>0) L[1115][1]=2;
		}
	//Check all rules of unit[1116][0]
	L[1116][0] = LargeX[1116][1]>0 ? 1 : 0;
	satisfiable[1116][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1116_0[i][0] ][ unit1116_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1116_0[i][2] ][ unit1116_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1116_0[i][4] ][ unit1116_0[i][5] ] >0);
		X_contra = ( LargeX[1116][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1116_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1116][1]=0; L[1116][0]=1;}
			satisfiable[1116][0]=satisfiable[1116][0] & ((x[1116] ^ 0) | (x[ unit1116_0[i][0] ] ^ unit1116_0[i][1]) |(x[ unit1116_0[i][2] ] ^ unit1116_0[i][3]));
			}
		if(X_contra>0) L[1116][0]=2;
		}
	//Check all rules of unit[1116][1]
	L[1116][1] = LargeX[1116][0]>0 ? 1 : 0;
	satisfiable[1116][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1116_1[i][0] ][ unit1116_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1116_1[i][2] ][ unit1116_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1116_1[i][4] ][ unit1116_1[i][5] ] >0);
		X_contra = ( LargeX[1116][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1116_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1116][0]=0; L[1116][1]=1;}
			satisfiable[1116][1]=satisfiable[1116][1] & ((x[1116] ^ 1) | (x[ unit1116_1[i][0] ] ^ unit1116_1[i][1]) |(x[ unit1116_1[i][2] ] ^ unit1116_1[i][3]));
			}
		if(X_contra>0) L[1116][1]=2;
		}
	//Check all rules of unit[1117][0]
	L[1117][0] = LargeX[1117][1]>0 ? 1 : 0;
	satisfiable[1117][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1117_0[i][0] ][ unit1117_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1117_0[i][2] ][ unit1117_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1117_0[i][4] ][ unit1117_0[i][5] ] >0);
		X_contra = ( LargeX[1117][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1117_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1117][1]=0; L[1117][0]=1;}
			satisfiable[1117][0]=satisfiable[1117][0] & ((x[1117] ^ 0) | (x[ unit1117_0[i][0] ] ^ unit1117_0[i][1]) |(x[ unit1117_0[i][2] ] ^ unit1117_0[i][3]));
			}
		if(X_contra>0) L[1117][0]=2;
		}
	//Check all rules of unit[1117][1]
	L[1117][1] = LargeX[1117][0]>0 ? 1 : 0;
	satisfiable[1117][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1117_1[i][0] ][ unit1117_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1117_1[i][2] ][ unit1117_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1117_1[i][4] ][ unit1117_1[i][5] ] >0);
		X_contra = ( LargeX[1117][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1117_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1117][0]=0; L[1117][1]=1;}
			satisfiable[1117][1]=satisfiable[1117][1] & ((x[1117] ^ 1) | (x[ unit1117_1[i][0] ] ^ unit1117_1[i][1]) |(x[ unit1117_1[i][2] ] ^ unit1117_1[i][3]));
			}
		if(X_contra>0) L[1117][1]=2;
		}
	//Check all rules of unit[1118][0]
	L[1118][0] = LargeX[1118][1]>0 ? 1 : 0;
	satisfiable[1118][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1118_0[i][0] ][ unit1118_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1118_0[i][2] ][ unit1118_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1118_0[i][4] ][ unit1118_0[i][5] ] >0);
		X_contra = ( LargeX[1118][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1118_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1118][1]=0; L[1118][0]=1;}
			satisfiable[1118][0]=satisfiable[1118][0] & ((x[1118] ^ 0) | (x[ unit1118_0[i][0] ] ^ unit1118_0[i][1]) |(x[ unit1118_0[i][2] ] ^ unit1118_0[i][3]));
			}
		if(X_contra>0) L[1118][0]=2;
		}
	//Check all rules of unit[1118][1]
	L[1118][1] = LargeX[1118][0]>0 ? 1 : 0;
	satisfiable[1118][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1118_1[i][0] ][ unit1118_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1118_1[i][2] ][ unit1118_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1118_1[i][4] ][ unit1118_1[i][5] ] >0);
		X_contra = ( LargeX[1118][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1118_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1118][0]=0; L[1118][1]=1;}
			satisfiable[1118][1]=satisfiable[1118][1] & ((x[1118] ^ 1) | (x[ unit1118_1[i][0] ] ^ unit1118_1[i][1]) |(x[ unit1118_1[i][2] ] ^ unit1118_1[i][3]));
			}
		if(X_contra>0) L[1118][1]=2;
		}
	//Check all rules of unit[1119][0]
	L[1119][0] = LargeX[1119][1]>0 ? 1 : 0;
	satisfiable[1119][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1119_0[i][0] ][ unit1119_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1119_0[i][2] ][ unit1119_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1119_0[i][4] ][ unit1119_0[i][5] ] >0);
		X_contra = ( LargeX[1119][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1119_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1119][1]=0; L[1119][0]=1;}
			satisfiable[1119][0]=satisfiable[1119][0] & ((x[1119] ^ 0) | (x[ unit1119_0[i][0] ] ^ unit1119_0[i][1]) |(x[ unit1119_0[i][2] ] ^ unit1119_0[i][3]));
			}
		if(X_contra>0) L[1119][0]=2;
		}
	//Check all rules of unit[1119][1]
	L[1119][1] = LargeX[1119][0]>0 ? 1 : 0;
	satisfiable[1119][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1119_1[i][0] ][ unit1119_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1119_1[i][2] ][ unit1119_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1119_1[i][4] ][ unit1119_1[i][5] ] >0);
		X_contra = ( LargeX[1119][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1119_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1119][0]=0; L[1119][1]=1;}
			satisfiable[1119][1]=satisfiable[1119][1] & ((x[1119] ^ 1) | (x[ unit1119_1[i][0] ] ^ unit1119_1[i][1]) |(x[ unit1119_1[i][2] ] ^ unit1119_1[i][3]));
			}
		if(X_contra>0) L[1119][1]=2;
		}
	//Check all rules of unit[1120][0]
	L[1120][0] = LargeX[1120][1]>0 ? 1 : 0;
	satisfiable[1120][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1120_0[i][0] ][ unit1120_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1120_0[i][2] ][ unit1120_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1120_0[i][4] ][ unit1120_0[i][5] ] >0);
		X_contra = ( LargeX[1120][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1120_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1120][1]=0; L[1120][0]=1;}
			satisfiable[1120][0]=satisfiable[1120][0] & ((x[1120] ^ 0) | (x[ unit1120_0[i][0] ] ^ unit1120_0[i][1]) |(x[ unit1120_0[i][2] ] ^ unit1120_0[i][3]));
			}
		if(X_contra>0) L[1120][0]=2;
		}
	//Check all rules of unit[1120][1]
	L[1120][1] = LargeX[1120][0]>0 ? 1 : 0;
	satisfiable[1120][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1120_1[i][0] ][ unit1120_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1120_1[i][2] ][ unit1120_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1120_1[i][4] ][ unit1120_1[i][5] ] >0);
		X_contra = ( LargeX[1120][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1120_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1120][0]=0; L[1120][1]=1;}
			satisfiable[1120][1]=satisfiable[1120][1] & ((x[1120] ^ 1) | (x[ unit1120_1[i][0] ] ^ unit1120_1[i][1]) |(x[ unit1120_1[i][2] ] ^ unit1120_1[i][3]));
			}
		if(X_contra>0) L[1120][1]=2;
		}
	//Check all rules of unit[1121][0]
	L[1121][0] = LargeX[1121][1]>0 ? 1 : 0;
	satisfiable[1121][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1121_0[i][0] ][ unit1121_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1121_0[i][2] ][ unit1121_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1121_0[i][4] ][ unit1121_0[i][5] ] >0);
		X_contra = ( LargeX[1121][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1121_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1121][1]=0; L[1121][0]=1;}
			satisfiable[1121][0]=satisfiable[1121][0] & ((x[1121] ^ 0) | (x[ unit1121_0[i][0] ] ^ unit1121_0[i][1]) |(x[ unit1121_0[i][2] ] ^ unit1121_0[i][3]));
			}
		if(X_contra>0) L[1121][0]=2;
		}
	//Check all rules of unit[1121][1]
	L[1121][1] = LargeX[1121][0]>0 ? 1 : 0;
	satisfiable[1121][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1121_1[i][0] ][ unit1121_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1121_1[i][2] ][ unit1121_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1121_1[i][4] ][ unit1121_1[i][5] ] >0);
		X_contra = ( LargeX[1121][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1121_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1121][0]=0; L[1121][1]=1;}
			satisfiable[1121][1]=satisfiable[1121][1] & ((x[1121] ^ 1) | (x[ unit1121_1[i][0] ] ^ unit1121_1[i][1]) |(x[ unit1121_1[i][2] ] ^ unit1121_1[i][3]));
			}
		if(X_contra>0) L[1121][1]=2;
		}
	//Check all rules of unit[1122][0]
	L[1122][0] = LargeX[1122][1]>0 ? 1 : 0;
	satisfiable[1122][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1122_0[i][0] ][ unit1122_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1122_0[i][2] ][ unit1122_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1122_0[i][4] ][ unit1122_0[i][5] ] >0);
		X_contra = ( LargeX[1122][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1122_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1122][1]=0; L[1122][0]=1;}
			satisfiable[1122][0]=satisfiable[1122][0] & ((x[1122] ^ 0) | (x[ unit1122_0[i][0] ] ^ unit1122_0[i][1]) |(x[ unit1122_0[i][2] ] ^ unit1122_0[i][3]));
			}
		if(X_contra>0) L[1122][0]=2;
		}
	//Check all rules of unit[1122][1]
	L[1122][1] = LargeX[1122][0]>0 ? 1 : 0;
	satisfiable[1122][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1122_1[i][0] ][ unit1122_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1122_1[i][2] ][ unit1122_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1122_1[i][4] ][ unit1122_1[i][5] ] >0);
		X_contra = ( LargeX[1122][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1122_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1122][0]=0; L[1122][1]=1;}
			satisfiable[1122][1]=satisfiable[1122][1] & ((x[1122] ^ 1) | (x[ unit1122_1[i][0] ] ^ unit1122_1[i][1]) |(x[ unit1122_1[i][2] ] ^ unit1122_1[i][3]));
			}
		if(X_contra>0) L[1122][1]=2;
		}
	//Check all rules of unit[1123][0]
	L[1123][0] = LargeX[1123][1]>0 ? 1 : 0;
	satisfiable[1123][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1123_0[i][0] ][ unit1123_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1123_0[i][2] ][ unit1123_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1123_0[i][4] ][ unit1123_0[i][5] ] >0);
		X_contra = ( LargeX[1123][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1123_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1123][1]=0; L[1123][0]=1;}
			satisfiable[1123][0]=satisfiable[1123][0] & ((x[1123] ^ 0) | (x[ unit1123_0[i][0] ] ^ unit1123_0[i][1]) |(x[ unit1123_0[i][2] ] ^ unit1123_0[i][3]));
			}
		if(X_contra>0) L[1123][0]=2;
		}
	//Check all rules of unit[1123][1]
	L[1123][1] = LargeX[1123][0]>0 ? 1 : 0;
	satisfiable[1123][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1123_1[i][0] ][ unit1123_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1123_1[i][2] ][ unit1123_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1123_1[i][4] ][ unit1123_1[i][5] ] >0);
		X_contra = ( LargeX[1123][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1123_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1123][0]=0; L[1123][1]=1;}
			satisfiable[1123][1]=satisfiable[1123][1] & ((x[1123] ^ 1) | (x[ unit1123_1[i][0] ] ^ unit1123_1[i][1]) |(x[ unit1123_1[i][2] ] ^ unit1123_1[i][3]));
			}
		if(X_contra>0) L[1123][1]=2;
		}
	//Check all rules of unit[1124][0]
	L[1124][0] = LargeX[1124][1]>0 ? 1 : 0;
	satisfiable[1124][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1124_0[i][0] ][ unit1124_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1124_0[i][2] ][ unit1124_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1124_0[i][4] ][ unit1124_0[i][5] ] >0);
		X_contra = ( LargeX[1124][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1124_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1124][1]=0; L[1124][0]=1;}
			satisfiable[1124][0]=satisfiable[1124][0] & ((x[1124] ^ 0) | (x[ unit1124_0[i][0] ] ^ unit1124_0[i][1]) |(x[ unit1124_0[i][2] ] ^ unit1124_0[i][3]));
			}
		if(X_contra>0) L[1124][0]=2;
		}
	//Check all rules of unit[1124][1]
	L[1124][1] = LargeX[1124][0]>0 ? 1 : 0;
	satisfiable[1124][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1124_1[i][0] ][ unit1124_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1124_1[i][2] ][ unit1124_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1124_1[i][4] ][ unit1124_1[i][5] ] >0);
		X_contra = ( LargeX[1124][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1124_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1124][0]=0; L[1124][1]=1;}
			satisfiable[1124][1]=satisfiable[1124][1] & ((x[1124] ^ 1) | (x[ unit1124_1[i][0] ] ^ unit1124_1[i][1]) |(x[ unit1124_1[i][2] ] ^ unit1124_1[i][3]));
			}
		if(X_contra>0) L[1124][1]=2;
		}
	//Check all rules of unit[1125][0]
	L[1125][0] = LargeX[1125][1]>0 ? 1 : 0;
	satisfiable[1125][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1125_0[i][0] ][ unit1125_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1125_0[i][2] ][ unit1125_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1125_0[i][4] ][ unit1125_0[i][5] ] >0);
		X_contra = ( LargeX[1125][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1125_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1125][1]=0; L[1125][0]=1;}
			satisfiable[1125][0]=satisfiable[1125][0] & ((x[1125] ^ 0) | (x[ unit1125_0[i][0] ] ^ unit1125_0[i][1]) |(x[ unit1125_0[i][2] ] ^ unit1125_0[i][3]));
			}
		if(X_contra>0) L[1125][0]=2;
		}
	//Check all rules of unit[1125][1]
	L[1125][1] = LargeX[1125][0]>0 ? 1 : 0;
	satisfiable[1125][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1125_1[i][0] ][ unit1125_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1125_1[i][2] ][ unit1125_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1125_1[i][4] ][ unit1125_1[i][5] ] >0);
		X_contra = ( LargeX[1125][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1125_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1125][0]=0; L[1125][1]=1;}
			satisfiable[1125][1]=satisfiable[1125][1] & ((x[1125] ^ 1) | (x[ unit1125_1[i][0] ] ^ unit1125_1[i][1]) |(x[ unit1125_1[i][2] ] ^ unit1125_1[i][3]));
			}
		if(X_contra>0) L[1125][1]=2;
		}
	//Check all rules of unit[1126][0]
	L[1126][0] = LargeX[1126][1]>0 ? 1 : 0;
	satisfiable[1126][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1126_0[i][0] ][ unit1126_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1126_0[i][2] ][ unit1126_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1126_0[i][4] ][ unit1126_0[i][5] ] >0);
		X_contra = ( LargeX[1126][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1126_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1126][1]=0; L[1126][0]=1;}
			satisfiable[1126][0]=satisfiable[1126][0] & ((x[1126] ^ 0) | (x[ unit1126_0[i][0] ] ^ unit1126_0[i][1]) |(x[ unit1126_0[i][2] ] ^ unit1126_0[i][3]));
			}
		if(X_contra>0) L[1126][0]=2;
		}
	//Check all rules of unit[1126][1]
	L[1126][1] = LargeX[1126][0]>0 ? 1 : 0;
	satisfiable[1126][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1126_1[i][0] ][ unit1126_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1126_1[i][2] ][ unit1126_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1126_1[i][4] ][ unit1126_1[i][5] ] >0);
		X_contra = ( LargeX[1126][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1126_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1126][0]=0; L[1126][1]=1;}
			satisfiable[1126][1]=satisfiable[1126][1] & ((x[1126] ^ 1) | (x[ unit1126_1[i][0] ] ^ unit1126_1[i][1]) |(x[ unit1126_1[i][2] ] ^ unit1126_1[i][3]));
			}
		if(X_contra>0) L[1126][1]=2;
		}
	//Check all rules of unit[1127][0]
	L[1127][0] = LargeX[1127][1]>0 ? 1 : 0;
	satisfiable[1127][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1127_0[i][0] ][ unit1127_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1127_0[i][2] ][ unit1127_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1127_0[i][4] ][ unit1127_0[i][5] ] >0);
		X_contra = ( LargeX[1127][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1127_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1127][1]=0; L[1127][0]=1;}
			satisfiable[1127][0]=satisfiable[1127][0] & ((x[1127] ^ 0) | (x[ unit1127_0[i][0] ] ^ unit1127_0[i][1]) |(x[ unit1127_0[i][2] ] ^ unit1127_0[i][3]));
			}
		if(X_contra>0) L[1127][0]=2;
		}
	//Check all rules of unit[1127][1]
	L[1127][1] = LargeX[1127][0]>0 ? 1 : 0;
	satisfiable[1127][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1127_1[i][0] ][ unit1127_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1127_1[i][2] ][ unit1127_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1127_1[i][4] ][ unit1127_1[i][5] ] >0);
		X_contra = ( LargeX[1127][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1127_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1127][0]=0; L[1127][1]=1;}
			satisfiable[1127][1]=satisfiable[1127][1] & ((x[1127] ^ 1) | (x[ unit1127_1[i][0] ] ^ unit1127_1[i][1]) |(x[ unit1127_1[i][2] ] ^ unit1127_1[i][3]));
			}
		if(X_contra>0) L[1127][1]=2;
		}
	//Check all rules of unit[1128][0]
	L[1128][0] = LargeX[1128][1]>0 ? 1 : 0;
	satisfiable[1128][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1128_0[i][0] ][ unit1128_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1128_0[i][2] ][ unit1128_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1128_0[i][4] ][ unit1128_0[i][5] ] >0);
		X_contra = ( LargeX[1128][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1128_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1128][1]=0; L[1128][0]=1;}
			satisfiable[1128][0]=satisfiable[1128][0] & ((x[1128] ^ 0) | (x[ unit1128_0[i][0] ] ^ unit1128_0[i][1]) |(x[ unit1128_0[i][2] ] ^ unit1128_0[i][3]));
			}
		if(X_contra>0) L[1128][0]=2;
		}
	//Check all rules of unit[1128][1]
	L[1128][1] = LargeX[1128][0]>0 ? 1 : 0;
	satisfiable[1128][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1128_1[i][0] ][ unit1128_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1128_1[i][2] ][ unit1128_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1128_1[i][4] ][ unit1128_1[i][5] ] >0);
		X_contra = ( LargeX[1128][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1128_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1128][0]=0; L[1128][1]=1;}
			satisfiable[1128][1]=satisfiable[1128][1] & ((x[1128] ^ 1) | (x[ unit1128_1[i][0] ] ^ unit1128_1[i][1]) |(x[ unit1128_1[i][2] ] ^ unit1128_1[i][3]));
			}
		if(X_contra>0) L[1128][1]=2;
		}
	//Check all rules of unit[1129][0]
	L[1129][0] = LargeX[1129][1]>0 ? 1 : 0;
	satisfiable[1129][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1129_0[i][0] ][ unit1129_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1129_0[i][2] ][ unit1129_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1129_0[i][4] ][ unit1129_0[i][5] ] >0);
		X_contra = ( LargeX[1129][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1129_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1129][1]=0; L[1129][0]=1;}
			satisfiable[1129][0]=satisfiable[1129][0] & ((x[1129] ^ 0) | (x[ unit1129_0[i][0] ] ^ unit1129_0[i][1]) |(x[ unit1129_0[i][2] ] ^ unit1129_0[i][3]));
			}
		if(X_contra>0) L[1129][0]=2;
		}
	//Check all rules of unit[1129][1]
	L[1129][1] = LargeX[1129][0]>0 ? 1 : 0;
	satisfiable[1129][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1129_1[i][0] ][ unit1129_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1129_1[i][2] ][ unit1129_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1129_1[i][4] ][ unit1129_1[i][5] ] >0);
		X_contra = ( LargeX[1129][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1129_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1129][0]=0; L[1129][1]=1;}
			satisfiable[1129][1]=satisfiable[1129][1] & ((x[1129] ^ 1) | (x[ unit1129_1[i][0] ] ^ unit1129_1[i][1]) |(x[ unit1129_1[i][2] ] ^ unit1129_1[i][3]));
			}
		if(X_contra>0) L[1129][1]=2;
		}
	//Check all rules of unit[1130][0]
	L[1130][0] = LargeX[1130][1]>0 ? 1 : 0;
	satisfiable[1130][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1130_0[i][0] ][ unit1130_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1130_0[i][2] ][ unit1130_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1130_0[i][4] ][ unit1130_0[i][5] ] >0);
		X_contra = ( LargeX[1130][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1130_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1130][1]=0; L[1130][0]=1;}
			satisfiable[1130][0]=satisfiable[1130][0] & ((x[1130] ^ 0) | (x[ unit1130_0[i][0] ] ^ unit1130_0[i][1]) |(x[ unit1130_0[i][2] ] ^ unit1130_0[i][3]));
			}
		if(X_contra>0) L[1130][0]=2;
		}
	//Check all rules of unit[1130][1]
	L[1130][1] = LargeX[1130][0]>0 ? 1 : 0;
	satisfiable[1130][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1130_1[i][0] ][ unit1130_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1130_1[i][2] ][ unit1130_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1130_1[i][4] ][ unit1130_1[i][5] ] >0);
		X_contra = ( LargeX[1130][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1130_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1130][0]=0; L[1130][1]=1;}
			satisfiable[1130][1]=satisfiable[1130][1] & ((x[1130] ^ 1) | (x[ unit1130_1[i][0] ] ^ unit1130_1[i][1]) |(x[ unit1130_1[i][2] ] ^ unit1130_1[i][3]));
			}
		if(X_contra>0) L[1130][1]=2;
		}
	//Check all rules of unit[1131][0]
	L[1131][0] = LargeX[1131][1]>0 ? 1 : 0;
	satisfiable[1131][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1131_0[i][0] ][ unit1131_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1131_0[i][2] ][ unit1131_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1131_0[i][4] ][ unit1131_0[i][5] ] >0);
		X_contra = ( LargeX[1131][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1131_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1131][1]=0; L[1131][0]=1;}
			satisfiable[1131][0]=satisfiable[1131][0] & ((x[1131] ^ 0) | (x[ unit1131_0[i][0] ] ^ unit1131_0[i][1]) |(x[ unit1131_0[i][2] ] ^ unit1131_0[i][3]));
			}
		if(X_contra>0) L[1131][0]=2;
		}
	//Check all rules of unit[1131][1]
	L[1131][1] = LargeX[1131][0]>0 ? 1 : 0;
	satisfiable[1131][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1131_1[i][0] ][ unit1131_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1131_1[i][2] ][ unit1131_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1131_1[i][4] ][ unit1131_1[i][5] ] >0);
		X_contra = ( LargeX[1131][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1131_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1131][0]=0; L[1131][1]=1;}
			satisfiable[1131][1]=satisfiable[1131][1] & ((x[1131] ^ 1) | (x[ unit1131_1[i][0] ] ^ unit1131_1[i][1]) |(x[ unit1131_1[i][2] ] ^ unit1131_1[i][3]));
			}
		if(X_contra>0) L[1131][1]=2;
		}
	//Check all rules of unit[1132][0]
	L[1132][0] = LargeX[1132][1]>0 ? 1 : 0;
	satisfiable[1132][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1132_0[i][0] ][ unit1132_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1132_0[i][2] ][ unit1132_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1132_0[i][4] ][ unit1132_0[i][5] ] >0);
		X_contra = ( LargeX[1132][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1132_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1132][1]=0; L[1132][0]=1;}
			satisfiable[1132][0]=satisfiable[1132][0] & ((x[1132] ^ 0) | (x[ unit1132_0[i][0] ] ^ unit1132_0[i][1]) |(x[ unit1132_0[i][2] ] ^ unit1132_0[i][3]));
			}
		if(X_contra>0) L[1132][0]=2;
		}
	//Check all rules of unit[1132][1]
	L[1132][1] = LargeX[1132][0]>0 ? 1 : 0;
	satisfiable[1132][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1132_1[i][0] ][ unit1132_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1132_1[i][2] ][ unit1132_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1132_1[i][4] ][ unit1132_1[i][5] ] >0);
		X_contra = ( LargeX[1132][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1132_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1132][0]=0; L[1132][1]=1;}
			satisfiable[1132][1]=satisfiable[1132][1] & ((x[1132] ^ 1) | (x[ unit1132_1[i][0] ] ^ unit1132_1[i][1]) |(x[ unit1132_1[i][2] ] ^ unit1132_1[i][3]));
			}
		if(X_contra>0) L[1132][1]=2;
		}
	//Check all rules of unit[1133][0]
	L[1133][0] = LargeX[1133][1]>0 ? 1 : 0;
	satisfiable[1133][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1133_0[i][0] ][ unit1133_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1133_0[i][2] ][ unit1133_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1133_0[i][4] ][ unit1133_0[i][5] ] >0);
		X_contra = ( LargeX[1133][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1133_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1133][1]=0; L[1133][0]=1;}
			satisfiable[1133][0]=satisfiable[1133][0] & ((x[1133] ^ 0) | (x[ unit1133_0[i][0] ] ^ unit1133_0[i][1]) |(x[ unit1133_0[i][2] ] ^ unit1133_0[i][3]));
			}
		if(X_contra>0) L[1133][0]=2;
		}
	//Check all rules of unit[1133][1]
	L[1133][1] = LargeX[1133][0]>0 ? 1 : 0;
	satisfiable[1133][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1133_1[i][0] ][ unit1133_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1133_1[i][2] ][ unit1133_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1133_1[i][4] ][ unit1133_1[i][5] ] >0);
		X_contra = ( LargeX[1133][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1133_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1133][0]=0; L[1133][1]=1;}
			satisfiable[1133][1]=satisfiable[1133][1] & ((x[1133] ^ 1) | (x[ unit1133_1[i][0] ] ^ unit1133_1[i][1]) |(x[ unit1133_1[i][2] ] ^ unit1133_1[i][3]));
			}
		if(X_contra>0) L[1133][1]=2;
		}
	//Check all rules of unit[1134][0]
	L[1134][0] = LargeX[1134][1]>0 ? 1 : 0;
	satisfiable[1134][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1134_0[i][0] ][ unit1134_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1134_0[i][2] ][ unit1134_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1134_0[i][4] ][ unit1134_0[i][5] ] >0);
		X_contra = ( LargeX[1134][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1134_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1134][1]=0; L[1134][0]=1;}
			satisfiable[1134][0]=satisfiable[1134][0] & ((x[1134] ^ 0) | (x[ unit1134_0[i][0] ] ^ unit1134_0[i][1]) |(x[ unit1134_0[i][2] ] ^ unit1134_0[i][3]));
			}
		if(X_contra>0) L[1134][0]=2;
		}
	//Check all rules of unit[1134][1]
	L[1134][1] = LargeX[1134][0]>0 ? 1 : 0;
	satisfiable[1134][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1134_1[i][0] ][ unit1134_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1134_1[i][2] ][ unit1134_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1134_1[i][4] ][ unit1134_1[i][5] ] >0);
		X_contra = ( LargeX[1134][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1134_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1134][0]=0; L[1134][1]=1;}
			satisfiable[1134][1]=satisfiable[1134][1] & ((x[1134] ^ 1) | (x[ unit1134_1[i][0] ] ^ unit1134_1[i][1]) |(x[ unit1134_1[i][2] ] ^ unit1134_1[i][3]));
			}
		if(X_contra>0) L[1134][1]=2;
		}
	//Check all rules of unit[1135][0]
	L[1135][0] = LargeX[1135][1]>0 ? 1 : 0;
	satisfiable[1135][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1135_0[i][0] ][ unit1135_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1135_0[i][2] ][ unit1135_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1135_0[i][4] ][ unit1135_0[i][5] ] >0);
		X_contra = ( LargeX[1135][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1135_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1135][1]=0; L[1135][0]=1;}
			satisfiable[1135][0]=satisfiable[1135][0] & ((x[1135] ^ 0) | (x[ unit1135_0[i][0] ] ^ unit1135_0[i][1]) |(x[ unit1135_0[i][2] ] ^ unit1135_0[i][3]));
			}
		if(X_contra>0) L[1135][0]=2;
		}
	//Check all rules of unit[1135][1]
	L[1135][1] = LargeX[1135][0]>0 ? 1 : 0;
	satisfiable[1135][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1135_1[i][0] ][ unit1135_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1135_1[i][2] ][ unit1135_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1135_1[i][4] ][ unit1135_1[i][5] ] >0);
		X_contra = ( LargeX[1135][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1135_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1135][0]=0; L[1135][1]=1;}
			satisfiable[1135][1]=satisfiable[1135][1] & ((x[1135] ^ 1) | (x[ unit1135_1[i][0] ] ^ unit1135_1[i][1]) |(x[ unit1135_1[i][2] ] ^ unit1135_1[i][3]));
			}
		if(X_contra>0) L[1135][1]=2;
		}
	//Check all rules of unit[1136][0]
	L[1136][0] = LargeX[1136][1]>0 ? 1 : 0;
	satisfiable[1136][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1136_0[i][0] ][ unit1136_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1136_0[i][2] ][ unit1136_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1136_0[i][4] ][ unit1136_0[i][5] ] >0);
		X_contra = ( LargeX[1136][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1136_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1136][1]=0; L[1136][0]=1;}
			satisfiable[1136][0]=satisfiable[1136][0] & ((x[1136] ^ 0) | (x[ unit1136_0[i][0] ] ^ unit1136_0[i][1]) |(x[ unit1136_0[i][2] ] ^ unit1136_0[i][3]));
			}
		if(X_contra>0) L[1136][0]=2;
		}
	//Check all rules of unit[1136][1]
	L[1136][1] = LargeX[1136][0]>0 ? 1 : 0;
	satisfiable[1136][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1136_1[i][0] ][ unit1136_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1136_1[i][2] ][ unit1136_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1136_1[i][4] ][ unit1136_1[i][5] ] >0);
		X_contra = ( LargeX[1136][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1136_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1136][0]=0; L[1136][1]=1;}
			satisfiable[1136][1]=satisfiable[1136][1] & ((x[1136] ^ 1) | (x[ unit1136_1[i][0] ] ^ unit1136_1[i][1]) |(x[ unit1136_1[i][2] ] ^ unit1136_1[i][3]));
			}
		if(X_contra>0) L[1136][1]=2;
		}
	//Check all rules of unit[1137][0]
	L[1137][0] = LargeX[1137][1]>0 ? 1 : 0;
	satisfiable[1137][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1137_0[i][0] ][ unit1137_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1137_0[i][2] ][ unit1137_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1137_0[i][4] ][ unit1137_0[i][5] ] >0);
		X_contra = ( LargeX[1137][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1137_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1137][1]=0; L[1137][0]=1;}
			satisfiable[1137][0]=satisfiable[1137][0] & ((x[1137] ^ 0) | (x[ unit1137_0[i][0] ] ^ unit1137_0[i][1]) |(x[ unit1137_0[i][2] ] ^ unit1137_0[i][3]));
			}
		if(X_contra>0) L[1137][0]=2;
		}
	//Check all rules of unit[1137][1]
	L[1137][1] = LargeX[1137][0]>0 ? 1 : 0;
	satisfiable[1137][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1137_1[i][0] ][ unit1137_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1137_1[i][2] ][ unit1137_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1137_1[i][4] ][ unit1137_1[i][5] ] >0);
		X_contra = ( LargeX[1137][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1137_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1137][0]=0; L[1137][1]=1;}
			satisfiable[1137][1]=satisfiable[1137][1] & ((x[1137] ^ 1) | (x[ unit1137_1[i][0] ] ^ unit1137_1[i][1]) |(x[ unit1137_1[i][2] ] ^ unit1137_1[i][3]));
			}
		if(X_contra>0) L[1137][1]=2;
		}
	//Check all rules of unit[1138][0]
	L[1138][0] = LargeX[1138][1]>0 ? 1 : 0;
	satisfiable[1138][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1138_0[i][0] ][ unit1138_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1138_0[i][2] ][ unit1138_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1138_0[i][4] ][ unit1138_0[i][5] ] >0);
		X_contra = ( LargeX[1138][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1138_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1138][1]=0; L[1138][0]=1;}
			satisfiable[1138][0]=satisfiable[1138][0] & ((x[1138] ^ 0) | (x[ unit1138_0[i][0] ] ^ unit1138_0[i][1]) |(x[ unit1138_0[i][2] ] ^ unit1138_0[i][3]));
			}
		if(X_contra>0) L[1138][0]=2;
		}
	//Check all rules of unit[1138][1]
	L[1138][1] = LargeX[1138][0]>0 ? 1 : 0;
	satisfiable[1138][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1138_1[i][0] ][ unit1138_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1138_1[i][2] ][ unit1138_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1138_1[i][4] ][ unit1138_1[i][5] ] >0);
		X_contra = ( LargeX[1138][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1138_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1138][0]=0; L[1138][1]=1;}
			satisfiable[1138][1]=satisfiable[1138][1] & ((x[1138] ^ 1) | (x[ unit1138_1[i][0] ] ^ unit1138_1[i][1]) |(x[ unit1138_1[i][2] ] ^ unit1138_1[i][3]));
			}
		if(X_contra>0) L[1138][1]=2;
		}
	//Check all rules of unit[1139][0]
	L[1139][0] = LargeX[1139][1]>0 ? 1 : 0;
	satisfiable[1139][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1139_0[i][0] ][ unit1139_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1139_0[i][2] ][ unit1139_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1139_0[i][4] ][ unit1139_0[i][5] ] >0);
		X_contra = ( LargeX[1139][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1139_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1139][1]=0; L[1139][0]=1;}
			satisfiable[1139][0]=satisfiable[1139][0] & ((x[1139] ^ 0) | (x[ unit1139_0[i][0] ] ^ unit1139_0[i][1]) |(x[ unit1139_0[i][2] ] ^ unit1139_0[i][3]));
			}
		if(X_contra>0) L[1139][0]=2;
		}
	//Check all rules of unit[1139][1]
	L[1139][1] = LargeX[1139][0]>0 ? 1 : 0;
	satisfiable[1139][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1139_1[i][0] ][ unit1139_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1139_1[i][2] ][ unit1139_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1139_1[i][4] ][ unit1139_1[i][5] ] >0);
		X_contra = ( LargeX[1139][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1139_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1139][0]=0; L[1139][1]=1;}
			satisfiable[1139][1]=satisfiable[1139][1] & ((x[1139] ^ 1) | (x[ unit1139_1[i][0] ] ^ unit1139_1[i][1]) |(x[ unit1139_1[i][2] ] ^ unit1139_1[i][3]));
			}
		if(X_contra>0) L[1139][1]=2;
		}
	//Check all rules of unit[1140][0]
	L[1140][0] = LargeX[1140][1]>0 ? 1 : 0;
	satisfiable[1140][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1140_0[i][0] ][ unit1140_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1140_0[i][2] ][ unit1140_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1140_0[i][4] ][ unit1140_0[i][5] ] >0);
		X_contra = ( LargeX[1140][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1140_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1140][1]=0; L[1140][0]=1;}
			satisfiable[1140][0]=satisfiable[1140][0] & ((x[1140] ^ 0) | (x[ unit1140_0[i][0] ] ^ unit1140_0[i][1]) |(x[ unit1140_0[i][2] ] ^ unit1140_0[i][3]));
			}
		if(X_contra>0) L[1140][0]=2;
		}
	//Check all rules of unit[1140][1]
	L[1140][1] = LargeX[1140][0]>0 ? 1 : 0;
	satisfiable[1140][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1140_1[i][0] ][ unit1140_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1140_1[i][2] ][ unit1140_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1140_1[i][4] ][ unit1140_1[i][5] ] >0);
		X_contra = ( LargeX[1140][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1140_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1140][0]=0; L[1140][1]=1;}
			satisfiable[1140][1]=satisfiable[1140][1] & ((x[1140] ^ 1) | (x[ unit1140_1[i][0] ] ^ unit1140_1[i][1]) |(x[ unit1140_1[i][2] ] ^ unit1140_1[i][3]));
			}
		if(X_contra>0) L[1140][1]=2;
		}
	//Check all rules of unit[1141][0]
	L[1141][0] = LargeX[1141][1]>0 ? 1 : 0;
	satisfiable[1141][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1141_0[i][0] ][ unit1141_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1141_0[i][2] ][ unit1141_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1141_0[i][4] ][ unit1141_0[i][5] ] >0);
		X_contra = ( LargeX[1141][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1141_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1141][1]=0; L[1141][0]=1;}
			satisfiable[1141][0]=satisfiable[1141][0] & ((x[1141] ^ 0) | (x[ unit1141_0[i][0] ] ^ unit1141_0[i][1]) |(x[ unit1141_0[i][2] ] ^ unit1141_0[i][3]));
			}
		if(X_contra>0) L[1141][0]=2;
		}
	//Check all rules of unit[1141][1]
	L[1141][1] = LargeX[1141][0]>0 ? 1 : 0;
	satisfiable[1141][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1141_1[i][0] ][ unit1141_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1141_1[i][2] ][ unit1141_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1141_1[i][4] ][ unit1141_1[i][5] ] >0);
		X_contra = ( LargeX[1141][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1141_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1141][0]=0; L[1141][1]=1;}
			satisfiable[1141][1]=satisfiable[1141][1] & ((x[1141] ^ 1) | (x[ unit1141_1[i][0] ] ^ unit1141_1[i][1]) |(x[ unit1141_1[i][2] ] ^ unit1141_1[i][3]));
			}
		if(X_contra>0) L[1141][1]=2;
		}
	//Check all rules of unit[1142][0]
	L[1142][0] = LargeX[1142][1]>0 ? 1 : 0;
	satisfiable[1142][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1142_0[i][0] ][ unit1142_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1142_0[i][2] ][ unit1142_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1142_0[i][4] ][ unit1142_0[i][5] ] >0);
		X_contra = ( LargeX[1142][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1142_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1142][1]=0; L[1142][0]=1;}
			satisfiable[1142][0]=satisfiable[1142][0] & ((x[1142] ^ 0) | (x[ unit1142_0[i][0] ] ^ unit1142_0[i][1]) |(x[ unit1142_0[i][2] ] ^ unit1142_0[i][3]));
			}
		if(X_contra>0) L[1142][0]=2;
		}
	//Check all rules of unit[1142][1]
	L[1142][1] = LargeX[1142][0]>0 ? 1 : 0;
	satisfiable[1142][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1142_1[i][0] ][ unit1142_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1142_1[i][2] ][ unit1142_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1142_1[i][4] ][ unit1142_1[i][5] ] >0);
		X_contra = ( LargeX[1142][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1142_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1142][0]=0; L[1142][1]=1;}
			satisfiable[1142][1]=satisfiable[1142][1] & ((x[1142] ^ 1) | (x[ unit1142_1[i][0] ] ^ unit1142_1[i][1]) |(x[ unit1142_1[i][2] ] ^ unit1142_1[i][3]));
			}
		if(X_contra>0) L[1142][1]=2;
		}
	//Check all rules of unit[1143][0]
	L[1143][0] = LargeX[1143][1]>0 ? 1 : 0;
	satisfiable[1143][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1143_0[i][0] ][ unit1143_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1143_0[i][2] ][ unit1143_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1143_0[i][4] ][ unit1143_0[i][5] ] >0);
		X_contra = ( LargeX[1143][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1143_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1143][1]=0; L[1143][0]=1;}
			satisfiable[1143][0]=satisfiable[1143][0] & ((x[1143] ^ 0) | (x[ unit1143_0[i][0] ] ^ unit1143_0[i][1]) |(x[ unit1143_0[i][2] ] ^ unit1143_0[i][3]));
			}
		if(X_contra>0) L[1143][0]=2;
		}
	//Check all rules of unit[1143][1]
	L[1143][1] = LargeX[1143][0]>0 ? 1 : 0;
	satisfiable[1143][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1143_1[i][0] ][ unit1143_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1143_1[i][2] ][ unit1143_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1143_1[i][4] ][ unit1143_1[i][5] ] >0);
		X_contra = ( LargeX[1143][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1143_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1143][0]=0; L[1143][1]=1;}
			satisfiable[1143][1]=satisfiable[1143][1] & ((x[1143] ^ 1) | (x[ unit1143_1[i][0] ] ^ unit1143_1[i][1]) |(x[ unit1143_1[i][2] ] ^ unit1143_1[i][3]));
			}
		if(X_contra>0) L[1143][1]=2;
		}
	//Check all rules of unit[1144][0]
	L[1144][0] = LargeX[1144][1]>0 ? 1 : 0;
	satisfiable[1144][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1144_0[i][0] ][ unit1144_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1144_0[i][2] ][ unit1144_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1144_0[i][4] ][ unit1144_0[i][5] ] >0);
		X_contra = ( LargeX[1144][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1144_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1144][1]=0; L[1144][0]=1;}
			satisfiable[1144][0]=satisfiable[1144][0] & ((x[1144] ^ 0) | (x[ unit1144_0[i][0] ] ^ unit1144_0[i][1]) |(x[ unit1144_0[i][2] ] ^ unit1144_0[i][3]));
			}
		if(X_contra>0) L[1144][0]=2;
		}
	//Check all rules of unit[1144][1]
	L[1144][1] = LargeX[1144][0]>0 ? 1 : 0;
	satisfiable[1144][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1144_1[i][0] ][ unit1144_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1144_1[i][2] ][ unit1144_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1144_1[i][4] ][ unit1144_1[i][5] ] >0);
		X_contra = ( LargeX[1144][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1144_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1144][0]=0; L[1144][1]=1;}
			satisfiable[1144][1]=satisfiable[1144][1] & ((x[1144] ^ 1) | (x[ unit1144_1[i][0] ] ^ unit1144_1[i][1]) |(x[ unit1144_1[i][2] ] ^ unit1144_1[i][3]));
			}
		if(X_contra>0) L[1144][1]=2;
		}
	//Check all rules of unit[1145][0]
	L[1145][0] = LargeX[1145][1]>0 ? 1 : 0;
	satisfiable[1145][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1145_0[i][0] ][ unit1145_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1145_0[i][2] ][ unit1145_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1145_0[i][4] ][ unit1145_0[i][5] ] >0);
		X_contra = ( LargeX[1145][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1145_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1145][1]=0; L[1145][0]=1;}
			satisfiable[1145][0]=satisfiable[1145][0] & ((x[1145] ^ 0) | (x[ unit1145_0[i][0] ] ^ unit1145_0[i][1]) |(x[ unit1145_0[i][2] ] ^ unit1145_0[i][3]));
			}
		if(X_contra>0) L[1145][0]=2;
		}
	//Check all rules of unit[1145][1]
	L[1145][1] = LargeX[1145][0]>0 ? 1 : 0;
	satisfiable[1145][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1145_1[i][0] ][ unit1145_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1145_1[i][2] ][ unit1145_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1145_1[i][4] ][ unit1145_1[i][5] ] >0);
		X_contra = ( LargeX[1145][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1145_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1145][0]=0; L[1145][1]=1;}
			satisfiable[1145][1]=satisfiable[1145][1] & ((x[1145] ^ 1) | (x[ unit1145_1[i][0] ] ^ unit1145_1[i][1]) |(x[ unit1145_1[i][2] ] ^ unit1145_1[i][3]));
			}
		if(X_contra>0) L[1145][1]=2;
		}
	//Check all rules of unit[1146][0]
	L[1146][0] = LargeX[1146][1]>0 ? 1 : 0;
	satisfiable[1146][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1146_0[i][0] ][ unit1146_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1146_0[i][2] ][ unit1146_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1146_0[i][4] ][ unit1146_0[i][5] ] >0);
		X_contra = ( LargeX[1146][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1146_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1146][1]=0; L[1146][0]=1;}
			satisfiable[1146][0]=satisfiable[1146][0] & ((x[1146] ^ 0) | (x[ unit1146_0[i][0] ] ^ unit1146_0[i][1]) |(x[ unit1146_0[i][2] ] ^ unit1146_0[i][3]));
			}
		if(X_contra>0) L[1146][0]=2;
		}
	//Check all rules of unit[1146][1]
	L[1146][1] = LargeX[1146][0]>0 ? 1 : 0;
	satisfiable[1146][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1146_1[i][0] ][ unit1146_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1146_1[i][2] ][ unit1146_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1146_1[i][4] ][ unit1146_1[i][5] ] >0);
		X_contra = ( LargeX[1146][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1146_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1146][0]=0; L[1146][1]=1;}
			satisfiable[1146][1]=satisfiable[1146][1] & ((x[1146] ^ 1) | (x[ unit1146_1[i][0] ] ^ unit1146_1[i][1]) |(x[ unit1146_1[i][2] ] ^ unit1146_1[i][3]));
			}
		if(X_contra>0) L[1146][1]=2;
		}
	//Check all rules of unit[1147][0]
	L[1147][0] = LargeX[1147][1]>0 ? 1 : 0;
	satisfiable[1147][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1147_0[i][0] ][ unit1147_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1147_0[i][2] ][ unit1147_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1147_0[i][4] ][ unit1147_0[i][5] ] >0);
		X_contra = ( LargeX[1147][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1147_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1147][1]=0; L[1147][0]=1;}
			satisfiable[1147][0]=satisfiable[1147][0] & ((x[1147] ^ 0) | (x[ unit1147_0[i][0] ] ^ unit1147_0[i][1]) |(x[ unit1147_0[i][2] ] ^ unit1147_0[i][3]));
			}
		if(X_contra>0) L[1147][0]=2;
		}
	//Check all rules of unit[1147][1]
	L[1147][1] = LargeX[1147][0]>0 ? 1 : 0;
	satisfiable[1147][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1147_1[i][0] ][ unit1147_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1147_1[i][2] ][ unit1147_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1147_1[i][4] ][ unit1147_1[i][5] ] >0);
		X_contra = ( LargeX[1147][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1147_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1147][0]=0; L[1147][1]=1;}
			satisfiable[1147][1]=satisfiable[1147][1] & ((x[1147] ^ 1) | (x[ unit1147_1[i][0] ] ^ unit1147_1[i][1]) |(x[ unit1147_1[i][2] ] ^ unit1147_1[i][3]));
			}
		if(X_contra>0) L[1147][1]=2;
		}
	//Check all rules of unit[1148][0]
	L[1148][0] = LargeX[1148][1]>0 ? 1 : 0;
	satisfiable[1148][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1148_0[i][0] ][ unit1148_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1148_0[i][2] ][ unit1148_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1148_0[i][4] ][ unit1148_0[i][5] ] >0);
		X_contra = ( LargeX[1148][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1148_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1148][1]=0; L[1148][0]=1;}
			satisfiable[1148][0]=satisfiable[1148][0] & ((x[1148] ^ 0) | (x[ unit1148_0[i][0] ] ^ unit1148_0[i][1]) |(x[ unit1148_0[i][2] ] ^ unit1148_0[i][3]));
			}
		if(X_contra>0) L[1148][0]=2;
		}
	//Check all rules of unit[1148][1]
	L[1148][1] = LargeX[1148][0]>0 ? 1 : 0;
	satisfiable[1148][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1148_1[i][0] ][ unit1148_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1148_1[i][2] ][ unit1148_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1148_1[i][4] ][ unit1148_1[i][5] ] >0);
		X_contra = ( LargeX[1148][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1148_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1148][0]=0; L[1148][1]=1;}
			satisfiable[1148][1]=satisfiable[1148][1] & ((x[1148] ^ 1) | (x[ unit1148_1[i][0] ] ^ unit1148_1[i][1]) |(x[ unit1148_1[i][2] ] ^ unit1148_1[i][3]));
			}
		if(X_contra>0) L[1148][1]=2;
		}
	//Check all rules of unit[1149][0]
	L[1149][0] = LargeX[1149][1]>0 ? 1 : 0;
	satisfiable[1149][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1149_0[i][0] ][ unit1149_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1149_0[i][2] ][ unit1149_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1149_0[i][4] ][ unit1149_0[i][5] ] >0);
		X_contra = ( LargeX[1149][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1149_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1149][1]=0; L[1149][0]=1;}
			satisfiable[1149][0]=satisfiable[1149][0] & ((x[1149] ^ 0) | (x[ unit1149_0[i][0] ] ^ unit1149_0[i][1]) |(x[ unit1149_0[i][2] ] ^ unit1149_0[i][3]));
			}
		if(X_contra>0) L[1149][0]=2;
		}
	//Check all rules of unit[1149][1]
	L[1149][1] = LargeX[1149][0]>0 ? 1 : 0;
	satisfiable[1149][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1149_1[i][0] ][ unit1149_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1149_1[i][2] ][ unit1149_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1149_1[i][4] ][ unit1149_1[i][5] ] >0);
		X_contra = ( LargeX[1149][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1149_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1149][0]=0; L[1149][1]=1;}
			satisfiable[1149][1]=satisfiable[1149][1] & ((x[1149] ^ 1) | (x[ unit1149_1[i][0] ] ^ unit1149_1[i][1]) |(x[ unit1149_1[i][2] ] ^ unit1149_1[i][3]));
			}
		if(X_contra>0) L[1149][1]=2;
		}
	//Check all rules of unit[1150][0]
	L[1150][0] = LargeX[1150][1]>0 ? 1 : 0;
	satisfiable[1150][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1150_0[i][0] ][ unit1150_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1150_0[i][2] ][ unit1150_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1150_0[i][4] ][ unit1150_0[i][5] ] >0);
		X_contra = ( LargeX[1150][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1150_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1150][1]=0; L[1150][0]=1;}
			satisfiable[1150][0]=satisfiable[1150][0] & ((x[1150] ^ 0) | (x[ unit1150_0[i][0] ] ^ unit1150_0[i][1]) |(x[ unit1150_0[i][2] ] ^ unit1150_0[i][3]));
			}
		if(X_contra>0) L[1150][0]=2;
		}
	//Check all rules of unit[1150][1]
	L[1150][1] = LargeX[1150][0]>0 ? 1 : 0;
	satisfiable[1150][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1150_1[i][0] ][ unit1150_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1150_1[i][2] ][ unit1150_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1150_1[i][4] ][ unit1150_1[i][5] ] >0);
		X_contra = ( LargeX[1150][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1150_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1150][0]=0; L[1150][1]=1;}
			satisfiable[1150][1]=satisfiable[1150][1] & ((x[1150] ^ 1) | (x[ unit1150_1[i][0] ] ^ unit1150_1[i][1]) |(x[ unit1150_1[i][2] ] ^ unit1150_1[i][3]));
			}
		if(X_contra>0) L[1150][1]=2;
		}
	//Check all rules of unit[1151][0]
	L[1151][0] = LargeX[1151][1]>0 ? 1 : 0;
	satisfiable[1151][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1151_0[i][0] ][ unit1151_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1151_0[i][2] ][ unit1151_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1151_0[i][4] ][ unit1151_0[i][5] ] >0);
		X_contra = ( LargeX[1151][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1151_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1151][1]=0; L[1151][0]=1;}
			satisfiable[1151][0]=satisfiable[1151][0] & ((x[1151] ^ 0) | (x[ unit1151_0[i][0] ] ^ unit1151_0[i][1]) |(x[ unit1151_0[i][2] ] ^ unit1151_0[i][3]));
			}
		if(X_contra>0) L[1151][0]=2;
		}
	//Check all rules of unit[1151][1]
	L[1151][1] = LargeX[1151][0]>0 ? 1 : 0;
	satisfiable[1151][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1151_1[i][0] ][ unit1151_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1151_1[i][2] ][ unit1151_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1151_1[i][4] ][ unit1151_1[i][5] ] >0);
		X_contra = ( LargeX[1151][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1151_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1151][0]=0; L[1151][1]=1;}
			satisfiable[1151][1]=satisfiable[1151][1] & ((x[1151] ^ 1) | (x[ unit1151_1[i][0] ] ^ unit1151_1[i][1]) |(x[ unit1151_1[i][2] ] ^ unit1151_1[i][3]));
			}
		if(X_contra>0) L[1151][1]=2;
		}
	//Check all rules of unit[1152][0]
	L[1152][0] = LargeX[1152][1]>0 ? 1 : 0;
	satisfiable[1152][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1152_0[i][0] ][ unit1152_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1152_0[i][2] ][ unit1152_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1152_0[i][4] ][ unit1152_0[i][5] ] >0);
		X_contra = ( LargeX[1152][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1152_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1152][1]=0; L[1152][0]=1;}
			satisfiable[1152][0]=satisfiable[1152][0] & ((x[1152] ^ 0) | (x[ unit1152_0[i][0] ] ^ unit1152_0[i][1]) |(x[ unit1152_0[i][2] ] ^ unit1152_0[i][3]));
			}
		if(X_contra>0) L[1152][0]=2;
		}
	//Check all rules of unit[1152][1]
	L[1152][1] = LargeX[1152][0]>0 ? 1 : 0;
	satisfiable[1152][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1152_1[i][0] ][ unit1152_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1152_1[i][2] ][ unit1152_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1152_1[i][4] ][ unit1152_1[i][5] ] >0);
		X_contra = ( LargeX[1152][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1152_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1152][0]=0; L[1152][1]=1;}
			satisfiable[1152][1]=satisfiable[1152][1] & ((x[1152] ^ 1) | (x[ unit1152_1[i][0] ] ^ unit1152_1[i][1]) |(x[ unit1152_1[i][2] ] ^ unit1152_1[i][3]));
			}
		if(X_contra>0) L[1152][1]=2;
		}
	//Check all rules of unit[1153][0]
	L[1153][0] = LargeX[1153][1]>0 ? 1 : 0;
	satisfiable[1153][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1153_0[i][0] ][ unit1153_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1153_0[i][2] ][ unit1153_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1153_0[i][4] ][ unit1153_0[i][5] ] >0);
		X_contra = ( LargeX[1153][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1153_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1153][1]=0; L[1153][0]=1;}
			satisfiable[1153][0]=satisfiable[1153][0] & ((x[1153] ^ 0) | (x[ unit1153_0[i][0] ] ^ unit1153_0[i][1]) |(x[ unit1153_0[i][2] ] ^ unit1153_0[i][3]));
			}
		if(X_contra>0) L[1153][0]=2;
		}
	//Check all rules of unit[1153][1]
	L[1153][1] = LargeX[1153][0]>0 ? 1 : 0;
	satisfiable[1153][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1153_1[i][0] ][ unit1153_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1153_1[i][2] ][ unit1153_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1153_1[i][4] ][ unit1153_1[i][5] ] >0);
		X_contra = ( LargeX[1153][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1153_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1153][0]=0; L[1153][1]=1;}
			satisfiable[1153][1]=satisfiable[1153][1] & ((x[1153] ^ 1) | (x[ unit1153_1[i][0] ] ^ unit1153_1[i][1]) |(x[ unit1153_1[i][2] ] ^ unit1153_1[i][3]));
			}
		if(X_contra>0) L[1153][1]=2;
		}
	//Check all rules of unit[1154][0]
	L[1154][0] = LargeX[1154][1]>0 ? 1 : 0;
	satisfiable[1154][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1154_0[i][0] ][ unit1154_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1154_0[i][2] ][ unit1154_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1154_0[i][4] ][ unit1154_0[i][5] ] >0);
		X_contra = ( LargeX[1154][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1154_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1154][1]=0; L[1154][0]=1;}
			satisfiable[1154][0]=satisfiable[1154][0] & ((x[1154] ^ 0) | (x[ unit1154_0[i][0] ] ^ unit1154_0[i][1]) |(x[ unit1154_0[i][2] ] ^ unit1154_0[i][3]));
			}
		if(X_contra>0) L[1154][0]=2;
		}
	//Check all rules of unit[1154][1]
	L[1154][1] = LargeX[1154][0]>0 ? 1 : 0;
	satisfiable[1154][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1154_1[i][0] ][ unit1154_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1154_1[i][2] ][ unit1154_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1154_1[i][4] ][ unit1154_1[i][5] ] >0);
		X_contra = ( LargeX[1154][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1154_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1154][0]=0; L[1154][1]=1;}
			satisfiable[1154][1]=satisfiable[1154][1] & ((x[1154] ^ 1) | (x[ unit1154_1[i][0] ] ^ unit1154_1[i][1]) |(x[ unit1154_1[i][2] ] ^ unit1154_1[i][3]));
			}
		if(X_contra>0) L[1154][1]=2;
		}
	//Check all rules of unit[1155][0]
	L[1155][0] = LargeX[1155][1]>0 ? 1 : 0;
	satisfiable[1155][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1155_0[i][0] ][ unit1155_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1155_0[i][2] ][ unit1155_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1155_0[i][4] ][ unit1155_0[i][5] ] >0);
		X_contra = ( LargeX[1155][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1155_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1155][1]=0; L[1155][0]=1;}
			satisfiable[1155][0]=satisfiable[1155][0] & ((x[1155] ^ 0) | (x[ unit1155_0[i][0] ] ^ unit1155_0[i][1]) |(x[ unit1155_0[i][2] ] ^ unit1155_0[i][3]));
			}
		if(X_contra>0) L[1155][0]=2;
		}
	//Check all rules of unit[1155][1]
	L[1155][1] = LargeX[1155][0]>0 ? 1 : 0;
	satisfiable[1155][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1155_1[i][0] ][ unit1155_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1155_1[i][2] ][ unit1155_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1155_1[i][4] ][ unit1155_1[i][5] ] >0);
		X_contra = ( LargeX[1155][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1155_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1155][0]=0; L[1155][1]=1;}
			satisfiable[1155][1]=satisfiable[1155][1] & ((x[1155] ^ 1) | (x[ unit1155_1[i][0] ] ^ unit1155_1[i][1]) |(x[ unit1155_1[i][2] ] ^ unit1155_1[i][3]));
			}
		if(X_contra>0) L[1155][1]=2;
		}
	//Check all rules of unit[1156][0]
	L[1156][0] = LargeX[1156][1]>0 ? 1 : 0;
	satisfiable[1156][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1156_0[i][0] ][ unit1156_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1156_0[i][2] ][ unit1156_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1156_0[i][4] ][ unit1156_0[i][5] ] >0);
		X_contra = ( LargeX[1156][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1156_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1156][1]=0; L[1156][0]=1;}
			satisfiable[1156][0]=satisfiable[1156][0] & ((x[1156] ^ 0) | (x[ unit1156_0[i][0] ] ^ unit1156_0[i][1]) |(x[ unit1156_0[i][2] ] ^ unit1156_0[i][3]));
			}
		if(X_contra>0) L[1156][0]=2;
		}
	//Check all rules of unit[1156][1]
	L[1156][1] = LargeX[1156][0]>0 ? 1 : 0;
	satisfiable[1156][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1156_1[i][0] ][ unit1156_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1156_1[i][2] ][ unit1156_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1156_1[i][4] ][ unit1156_1[i][5] ] >0);
		X_contra = ( LargeX[1156][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1156_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1156][0]=0; L[1156][1]=1;}
			satisfiable[1156][1]=satisfiable[1156][1] & ((x[1156] ^ 1) | (x[ unit1156_1[i][0] ] ^ unit1156_1[i][1]) |(x[ unit1156_1[i][2] ] ^ unit1156_1[i][3]));
			}
		if(X_contra>0) L[1156][1]=2;
		}
	//Check all rules of unit[1157][0]
	L[1157][0] = LargeX[1157][1]>0 ? 1 : 0;
	satisfiable[1157][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1157_0[i][0] ][ unit1157_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1157_0[i][2] ][ unit1157_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1157_0[i][4] ][ unit1157_0[i][5] ] >0);
		X_contra = ( LargeX[1157][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1157_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1157][1]=0; L[1157][0]=1;}
			satisfiable[1157][0]=satisfiable[1157][0] & ((x[1157] ^ 0) | (x[ unit1157_0[i][0] ] ^ unit1157_0[i][1]) |(x[ unit1157_0[i][2] ] ^ unit1157_0[i][3]));
			}
		if(X_contra>0) L[1157][0]=2;
		}
	//Check all rules of unit[1157][1]
	L[1157][1] = LargeX[1157][0]>0 ? 1 : 0;
	satisfiable[1157][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1157_1[i][0] ][ unit1157_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1157_1[i][2] ][ unit1157_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1157_1[i][4] ][ unit1157_1[i][5] ] >0);
		X_contra = ( LargeX[1157][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1157_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1157][0]=0; L[1157][1]=1;}
			satisfiable[1157][1]=satisfiable[1157][1] & ((x[1157] ^ 1) | (x[ unit1157_1[i][0] ] ^ unit1157_1[i][1]) |(x[ unit1157_1[i][2] ] ^ unit1157_1[i][3]));
			}
		if(X_contra>0) L[1157][1]=2;
		}
	//Check all rules of unit[1158][0]
	L[1158][0] = LargeX[1158][1]>0 ? 1 : 0;
	satisfiable[1158][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1158_0[i][0] ][ unit1158_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1158_0[i][2] ][ unit1158_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1158_0[i][4] ][ unit1158_0[i][5] ] >0);
		X_contra = ( LargeX[1158][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1158_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1158][1]=0; L[1158][0]=1;}
			satisfiable[1158][0]=satisfiable[1158][0] & ((x[1158] ^ 0) | (x[ unit1158_0[i][0] ] ^ unit1158_0[i][1]) |(x[ unit1158_0[i][2] ] ^ unit1158_0[i][3]));
			}
		if(X_contra>0) L[1158][0]=2;
		}
	//Check all rules of unit[1158][1]
	L[1158][1] = LargeX[1158][0]>0 ? 1 : 0;
	satisfiable[1158][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1158_1[i][0] ][ unit1158_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1158_1[i][2] ][ unit1158_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1158_1[i][4] ][ unit1158_1[i][5] ] >0);
		X_contra = ( LargeX[1158][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1158_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1158][0]=0; L[1158][1]=1;}
			satisfiable[1158][1]=satisfiable[1158][1] & ((x[1158] ^ 1) | (x[ unit1158_1[i][0] ] ^ unit1158_1[i][1]) |(x[ unit1158_1[i][2] ] ^ unit1158_1[i][3]));
			}
		if(X_contra>0) L[1158][1]=2;
		}
	//Check all rules of unit[1159][0]
	L[1159][0] = LargeX[1159][1]>0 ? 1 : 0;
	satisfiable[1159][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1159_0[i][0] ][ unit1159_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1159_0[i][2] ][ unit1159_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1159_0[i][4] ][ unit1159_0[i][5] ] >0);
		X_contra = ( LargeX[1159][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1159_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1159][1]=0; L[1159][0]=1;}
			satisfiable[1159][0]=satisfiable[1159][0] & ((x[1159] ^ 0) | (x[ unit1159_0[i][0] ] ^ unit1159_0[i][1]) |(x[ unit1159_0[i][2] ] ^ unit1159_0[i][3]));
			}
		if(X_contra>0) L[1159][0]=2;
		}
	//Check all rules of unit[1159][1]
	L[1159][1] = LargeX[1159][0]>0 ? 1 : 0;
	satisfiable[1159][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1159_1[i][0] ][ unit1159_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1159_1[i][2] ][ unit1159_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1159_1[i][4] ][ unit1159_1[i][5] ] >0);
		X_contra = ( LargeX[1159][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1159_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1159][0]=0; L[1159][1]=1;}
			satisfiable[1159][1]=satisfiable[1159][1] & ((x[1159] ^ 1) | (x[ unit1159_1[i][0] ] ^ unit1159_1[i][1]) |(x[ unit1159_1[i][2] ] ^ unit1159_1[i][3]));
			}
		if(X_contra>0) L[1159][1]=2;
		}
	//Check all rules of unit[1160][0]
	L[1160][0] = LargeX[1160][1]>0 ? 1 : 0;
	satisfiable[1160][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1160_0[i][0] ][ unit1160_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1160_0[i][2] ][ unit1160_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1160_0[i][4] ][ unit1160_0[i][5] ] >0);
		X_contra = ( LargeX[1160][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1160_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1160][1]=0; L[1160][0]=1;}
			satisfiable[1160][0]=satisfiable[1160][0] & ((x[1160] ^ 0) | (x[ unit1160_0[i][0] ] ^ unit1160_0[i][1]) |(x[ unit1160_0[i][2] ] ^ unit1160_0[i][3]));
			}
		if(X_contra>0) L[1160][0]=2;
		}
	//Check all rules of unit[1160][1]
	L[1160][1] = LargeX[1160][0]>0 ? 1 : 0;
	satisfiable[1160][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1160_1[i][0] ][ unit1160_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1160_1[i][2] ][ unit1160_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1160_1[i][4] ][ unit1160_1[i][5] ] >0);
		X_contra = ( LargeX[1160][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1160_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1160][0]=0; L[1160][1]=1;}
			satisfiable[1160][1]=satisfiable[1160][1] & ((x[1160] ^ 1) | (x[ unit1160_1[i][0] ] ^ unit1160_1[i][1]) |(x[ unit1160_1[i][2] ] ^ unit1160_1[i][3]));
			}
		if(X_contra>0) L[1160][1]=2;
		}
	//Check all rules of unit[1161][0]
	L[1161][0] = LargeX[1161][1]>0 ? 1 : 0;
	satisfiable[1161][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1161_0[i][0] ][ unit1161_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1161_0[i][2] ][ unit1161_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1161_0[i][4] ][ unit1161_0[i][5] ] >0);
		X_contra = ( LargeX[1161][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1161_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1161][1]=0; L[1161][0]=1;}
			satisfiable[1161][0]=satisfiable[1161][0] & ((x[1161] ^ 0) | (x[ unit1161_0[i][0] ] ^ unit1161_0[i][1]) |(x[ unit1161_0[i][2] ] ^ unit1161_0[i][3]));
			}
		if(X_contra>0) L[1161][0]=2;
		}
	//Check all rules of unit[1161][1]
	L[1161][1] = LargeX[1161][0]>0 ? 1 : 0;
	satisfiable[1161][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1161_1[i][0] ][ unit1161_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1161_1[i][2] ][ unit1161_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1161_1[i][4] ][ unit1161_1[i][5] ] >0);
		X_contra = ( LargeX[1161][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1161_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1161][0]=0; L[1161][1]=1;}
			satisfiable[1161][1]=satisfiable[1161][1] & ((x[1161] ^ 1) | (x[ unit1161_1[i][0] ] ^ unit1161_1[i][1]) |(x[ unit1161_1[i][2] ] ^ unit1161_1[i][3]));
			}
		if(X_contra>0) L[1161][1]=2;
		}
	//Check all rules of unit[1162][0]
	L[1162][0] = LargeX[1162][1]>0 ? 1 : 0;
	satisfiable[1162][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1162_0[i][0] ][ unit1162_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1162_0[i][2] ][ unit1162_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1162_0[i][4] ][ unit1162_0[i][5] ] >0);
		X_contra = ( LargeX[1162][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1162_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1162][1]=0; L[1162][0]=1;}
			satisfiable[1162][0]=satisfiable[1162][0] & ((x[1162] ^ 0) | (x[ unit1162_0[i][0] ] ^ unit1162_0[i][1]) |(x[ unit1162_0[i][2] ] ^ unit1162_0[i][3]));
			}
		if(X_contra>0) L[1162][0]=2;
		}
	//Check all rules of unit[1162][1]
	L[1162][1] = LargeX[1162][0]>0 ? 1 : 0;
	satisfiable[1162][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1162_1[i][0] ][ unit1162_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1162_1[i][2] ][ unit1162_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1162_1[i][4] ][ unit1162_1[i][5] ] >0);
		X_contra = ( LargeX[1162][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1162_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1162][0]=0; L[1162][1]=1;}
			satisfiable[1162][1]=satisfiable[1162][1] & ((x[1162] ^ 1) | (x[ unit1162_1[i][0] ] ^ unit1162_1[i][1]) |(x[ unit1162_1[i][2] ] ^ unit1162_1[i][3]));
			}
		if(X_contra>0) L[1162][1]=2;
		}
	//Check all rules of unit[1163][0]
	L[1163][0] = LargeX[1163][1]>0 ? 1 : 0;
	satisfiable[1163][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1163_0[i][0] ][ unit1163_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1163_0[i][2] ][ unit1163_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1163_0[i][4] ][ unit1163_0[i][5] ] >0);
		X_contra = ( LargeX[1163][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1163_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1163][1]=0; L[1163][0]=1;}
			satisfiable[1163][0]=satisfiable[1163][0] & ((x[1163] ^ 0) | (x[ unit1163_0[i][0] ] ^ unit1163_0[i][1]) |(x[ unit1163_0[i][2] ] ^ unit1163_0[i][3]));
			}
		if(X_contra>0) L[1163][0]=2;
		}
	//Check all rules of unit[1163][1]
	L[1163][1] = LargeX[1163][0]>0 ? 1 : 0;
	satisfiable[1163][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1163_1[i][0] ][ unit1163_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1163_1[i][2] ][ unit1163_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1163_1[i][4] ][ unit1163_1[i][5] ] >0);
		X_contra = ( LargeX[1163][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1163_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1163][0]=0; L[1163][1]=1;}
			satisfiable[1163][1]=satisfiable[1163][1] & ((x[1163] ^ 1) | (x[ unit1163_1[i][0] ] ^ unit1163_1[i][1]) |(x[ unit1163_1[i][2] ] ^ unit1163_1[i][3]));
			}
		if(X_contra>0) L[1163][1]=2;
		}
	//Check all rules of unit[1164][0]
	L[1164][0] = LargeX[1164][1]>0 ? 1 : 0;
	satisfiable[1164][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1164_0[i][0] ][ unit1164_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1164_0[i][2] ][ unit1164_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1164_0[i][4] ][ unit1164_0[i][5] ] >0);
		X_contra = ( LargeX[1164][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1164_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1164][1]=0; L[1164][0]=1;}
			satisfiable[1164][0]=satisfiable[1164][0] & ((x[1164] ^ 0) | (x[ unit1164_0[i][0] ] ^ unit1164_0[i][1]) |(x[ unit1164_0[i][2] ] ^ unit1164_0[i][3]));
			}
		if(X_contra>0) L[1164][0]=2;
		}
	//Check all rules of unit[1164][1]
	L[1164][1] = LargeX[1164][0]>0 ? 1 : 0;
	satisfiable[1164][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1164_1[i][0] ][ unit1164_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1164_1[i][2] ][ unit1164_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1164_1[i][4] ][ unit1164_1[i][5] ] >0);
		X_contra = ( LargeX[1164][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1164_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1164][0]=0; L[1164][1]=1;}
			satisfiable[1164][1]=satisfiable[1164][1] & ((x[1164] ^ 1) | (x[ unit1164_1[i][0] ] ^ unit1164_1[i][1]) |(x[ unit1164_1[i][2] ] ^ unit1164_1[i][3]));
			}
		if(X_contra>0) L[1164][1]=2;
		}
	//Check all rules of unit[1165][0]
	L[1165][0] = LargeX[1165][1]>0 ? 1 : 0;
	satisfiable[1165][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1165_0[i][0] ][ unit1165_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1165_0[i][2] ][ unit1165_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1165_0[i][4] ][ unit1165_0[i][5] ] >0);
		X_contra = ( LargeX[1165][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1165_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1165][1]=0; L[1165][0]=1;}
			satisfiable[1165][0]=satisfiable[1165][0] & ((x[1165] ^ 0) | (x[ unit1165_0[i][0] ] ^ unit1165_0[i][1]) |(x[ unit1165_0[i][2] ] ^ unit1165_0[i][3]));
			}
		if(X_contra>0) L[1165][0]=2;
		}
	//Check all rules of unit[1165][1]
	L[1165][1] = LargeX[1165][0]>0 ? 1 : 0;
	satisfiable[1165][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1165_1[i][0] ][ unit1165_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1165_1[i][2] ][ unit1165_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1165_1[i][4] ][ unit1165_1[i][5] ] >0);
		X_contra = ( LargeX[1165][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1165_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1165][0]=0; L[1165][1]=1;}
			satisfiable[1165][1]=satisfiable[1165][1] & ((x[1165] ^ 1) | (x[ unit1165_1[i][0] ] ^ unit1165_1[i][1]) |(x[ unit1165_1[i][2] ] ^ unit1165_1[i][3]));
			}
		if(X_contra>0) L[1165][1]=2;
		}
	//Check all rules of unit[1166][0]
	L[1166][0] = LargeX[1166][1]>0 ? 1 : 0;
	satisfiable[1166][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1166_0[i][0] ][ unit1166_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1166_0[i][2] ][ unit1166_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1166_0[i][4] ][ unit1166_0[i][5] ] >0);
		X_contra = ( LargeX[1166][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1166_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1166][1]=0; L[1166][0]=1;}
			satisfiable[1166][0]=satisfiable[1166][0] & ((x[1166] ^ 0) | (x[ unit1166_0[i][0] ] ^ unit1166_0[i][1]) |(x[ unit1166_0[i][2] ] ^ unit1166_0[i][3]));
			}
		if(X_contra>0) L[1166][0]=2;
		}
	//Check all rules of unit[1166][1]
	L[1166][1] = LargeX[1166][0]>0 ? 1 : 0;
	satisfiable[1166][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1166_1[i][0] ][ unit1166_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1166_1[i][2] ][ unit1166_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1166_1[i][4] ][ unit1166_1[i][5] ] >0);
		X_contra = ( LargeX[1166][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1166_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1166][0]=0; L[1166][1]=1;}
			satisfiable[1166][1]=satisfiable[1166][1] & ((x[1166] ^ 1) | (x[ unit1166_1[i][0] ] ^ unit1166_1[i][1]) |(x[ unit1166_1[i][2] ] ^ unit1166_1[i][3]));
			}
		if(X_contra>0) L[1166][1]=2;
		}
	//Check all rules of unit[1167][0]
	L[1167][0] = LargeX[1167][1]>0 ? 1 : 0;
	satisfiable[1167][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1167_0[i][0] ][ unit1167_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1167_0[i][2] ][ unit1167_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1167_0[i][4] ][ unit1167_0[i][5] ] >0);
		X_contra = ( LargeX[1167][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1167_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1167][1]=0; L[1167][0]=1;}
			satisfiable[1167][0]=satisfiable[1167][0] & ((x[1167] ^ 0) | (x[ unit1167_0[i][0] ] ^ unit1167_0[i][1]) |(x[ unit1167_0[i][2] ] ^ unit1167_0[i][3]));
			}
		if(X_contra>0) L[1167][0]=2;
		}
	//Check all rules of unit[1167][1]
	L[1167][1] = LargeX[1167][0]>0 ? 1 : 0;
	satisfiable[1167][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1167_1[i][0] ][ unit1167_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1167_1[i][2] ][ unit1167_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1167_1[i][4] ][ unit1167_1[i][5] ] >0);
		X_contra = ( LargeX[1167][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1167_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1167][0]=0; L[1167][1]=1;}
			satisfiable[1167][1]=satisfiable[1167][1] & ((x[1167] ^ 1) | (x[ unit1167_1[i][0] ] ^ unit1167_1[i][1]) |(x[ unit1167_1[i][2] ] ^ unit1167_1[i][3]));
			}
		if(X_contra>0) L[1167][1]=2;
		}
	//Check all rules of unit[1168][0]
	L[1168][0] = LargeX[1168][1]>0 ? 1 : 0;
	satisfiable[1168][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1168_0[i][0] ][ unit1168_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1168_0[i][2] ][ unit1168_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1168_0[i][4] ][ unit1168_0[i][5] ] >0);
		X_contra = ( LargeX[1168][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1168_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1168][1]=0; L[1168][0]=1;}
			satisfiable[1168][0]=satisfiable[1168][0] & ((x[1168] ^ 0) | (x[ unit1168_0[i][0] ] ^ unit1168_0[i][1]) |(x[ unit1168_0[i][2] ] ^ unit1168_0[i][3]));
			}
		if(X_contra>0) L[1168][0]=2;
		}
	//Check all rules of unit[1168][1]
	L[1168][1] = LargeX[1168][0]>0 ? 1 : 0;
	satisfiable[1168][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1168_1[i][0] ][ unit1168_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1168_1[i][2] ][ unit1168_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1168_1[i][4] ][ unit1168_1[i][5] ] >0);
		X_contra = ( LargeX[1168][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1168_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1168][0]=0; L[1168][1]=1;}
			satisfiable[1168][1]=satisfiable[1168][1] & ((x[1168] ^ 1) | (x[ unit1168_1[i][0] ] ^ unit1168_1[i][1]) |(x[ unit1168_1[i][2] ] ^ unit1168_1[i][3]));
			}
		if(X_contra>0) L[1168][1]=2;
		}
	//Check all rules of unit[1169][0]
	L[1169][0] = LargeX[1169][1]>0 ? 1 : 0;
	satisfiable[1169][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1169_0[i][0] ][ unit1169_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1169_0[i][2] ][ unit1169_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1169_0[i][4] ][ unit1169_0[i][5] ] >0);
		X_contra = ( LargeX[1169][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1169_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1169][1]=0; L[1169][0]=1;}
			satisfiable[1169][0]=satisfiable[1169][0] & ((x[1169] ^ 0) | (x[ unit1169_0[i][0] ] ^ unit1169_0[i][1]) |(x[ unit1169_0[i][2] ] ^ unit1169_0[i][3]));
			}
		if(X_contra>0) L[1169][0]=2;
		}
	//Check all rules of unit[1169][1]
	L[1169][1] = LargeX[1169][0]>0 ? 1 : 0;
	satisfiable[1169][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1169_1[i][0] ][ unit1169_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1169_1[i][2] ][ unit1169_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1169_1[i][4] ][ unit1169_1[i][5] ] >0);
		X_contra = ( LargeX[1169][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1169_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1169][0]=0; L[1169][1]=1;}
			satisfiable[1169][1]=satisfiable[1169][1] & ((x[1169] ^ 1) | (x[ unit1169_1[i][0] ] ^ unit1169_1[i][1]) |(x[ unit1169_1[i][2] ] ^ unit1169_1[i][3]));
			}
		if(X_contra>0) L[1169][1]=2;
		}
	//Check all rules of unit[1170][0]
	L[1170][0] = LargeX[1170][1]>0 ? 1 : 0;
	satisfiable[1170][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1170_0[i][0] ][ unit1170_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1170_0[i][2] ][ unit1170_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1170_0[i][4] ][ unit1170_0[i][5] ] >0);
		X_contra = ( LargeX[1170][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1170_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1170][1]=0; L[1170][0]=1;}
			satisfiable[1170][0]=satisfiable[1170][0] & ((x[1170] ^ 0) | (x[ unit1170_0[i][0] ] ^ unit1170_0[i][1]) |(x[ unit1170_0[i][2] ] ^ unit1170_0[i][3]));
			}
		if(X_contra>0) L[1170][0]=2;
		}
	//Check all rules of unit[1170][1]
	L[1170][1] = LargeX[1170][0]>0 ? 1 : 0;
	satisfiable[1170][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1170_1[i][0] ][ unit1170_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1170_1[i][2] ][ unit1170_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1170_1[i][4] ][ unit1170_1[i][5] ] >0);
		X_contra = ( LargeX[1170][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1170_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1170][0]=0; L[1170][1]=1;}
			satisfiable[1170][1]=satisfiable[1170][1] & ((x[1170] ^ 1) | (x[ unit1170_1[i][0] ] ^ unit1170_1[i][1]) |(x[ unit1170_1[i][2] ] ^ unit1170_1[i][3]));
			}
		if(X_contra>0) L[1170][1]=2;
		}
	//Check all rules of unit[1171][0]
	L[1171][0] = LargeX[1171][1]>0 ? 1 : 0;
	satisfiable[1171][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1171_0[i][0] ][ unit1171_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1171_0[i][2] ][ unit1171_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1171_0[i][4] ][ unit1171_0[i][5] ] >0);
		X_contra = ( LargeX[1171][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1171_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1171][1]=0; L[1171][0]=1;}
			satisfiable[1171][0]=satisfiable[1171][0] & ((x[1171] ^ 0) | (x[ unit1171_0[i][0] ] ^ unit1171_0[i][1]) |(x[ unit1171_0[i][2] ] ^ unit1171_0[i][3]));
			}
		if(X_contra>0) L[1171][0]=2;
		}
	//Check all rules of unit[1171][1]
	L[1171][1] = LargeX[1171][0]>0 ? 1 : 0;
	satisfiable[1171][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1171_1[i][0] ][ unit1171_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1171_1[i][2] ][ unit1171_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1171_1[i][4] ][ unit1171_1[i][5] ] >0);
		X_contra = ( LargeX[1171][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1171_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1171][0]=0; L[1171][1]=1;}
			satisfiable[1171][1]=satisfiable[1171][1] & ((x[1171] ^ 1) | (x[ unit1171_1[i][0] ] ^ unit1171_1[i][1]) |(x[ unit1171_1[i][2] ] ^ unit1171_1[i][3]));
			}
		if(X_contra>0) L[1171][1]=2;
		}
	//Check all rules of unit[1172][0]
	L[1172][0] = LargeX[1172][1]>0 ? 1 : 0;
	satisfiable[1172][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1172_0[i][0] ][ unit1172_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1172_0[i][2] ][ unit1172_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1172_0[i][4] ][ unit1172_0[i][5] ] >0);
		X_contra = ( LargeX[1172][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1172_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1172][1]=0; L[1172][0]=1;}
			satisfiable[1172][0]=satisfiable[1172][0] & ((x[1172] ^ 0) | (x[ unit1172_0[i][0] ] ^ unit1172_0[i][1]) |(x[ unit1172_0[i][2] ] ^ unit1172_0[i][3]));
			}
		if(X_contra>0) L[1172][0]=2;
		}
	//Check all rules of unit[1172][1]
	L[1172][1] = LargeX[1172][0]>0 ? 1 : 0;
	satisfiable[1172][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1172_1[i][0] ][ unit1172_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1172_1[i][2] ][ unit1172_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1172_1[i][4] ][ unit1172_1[i][5] ] >0);
		X_contra = ( LargeX[1172][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1172_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1172][0]=0; L[1172][1]=1;}
			satisfiable[1172][1]=satisfiable[1172][1] & ((x[1172] ^ 1) | (x[ unit1172_1[i][0] ] ^ unit1172_1[i][1]) |(x[ unit1172_1[i][2] ] ^ unit1172_1[i][3]));
			}
		if(X_contra>0) L[1172][1]=2;
		}
	//Check all rules of unit[1173][0]
	L[1173][0] = LargeX[1173][1]>0 ? 1 : 0;
	satisfiable[1173][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1173_0[i][0] ][ unit1173_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1173_0[i][2] ][ unit1173_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1173_0[i][4] ][ unit1173_0[i][5] ] >0);
		X_contra = ( LargeX[1173][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1173_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1173][1]=0; L[1173][0]=1;}
			satisfiable[1173][0]=satisfiable[1173][0] & ((x[1173] ^ 0) | (x[ unit1173_0[i][0] ] ^ unit1173_0[i][1]) |(x[ unit1173_0[i][2] ] ^ unit1173_0[i][3]));
			}
		if(X_contra>0) L[1173][0]=2;
		}
	//Check all rules of unit[1173][1]
	L[1173][1] = LargeX[1173][0]>0 ? 1 : 0;
	satisfiable[1173][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1173_1[i][0] ][ unit1173_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1173_1[i][2] ][ unit1173_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1173_1[i][4] ][ unit1173_1[i][5] ] >0);
		X_contra = ( LargeX[1173][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1173_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1173][0]=0; L[1173][1]=1;}
			satisfiable[1173][1]=satisfiable[1173][1] & ((x[1173] ^ 1) | (x[ unit1173_1[i][0] ] ^ unit1173_1[i][1]) |(x[ unit1173_1[i][2] ] ^ unit1173_1[i][3]));
			}
		if(X_contra>0) L[1173][1]=2;
		}
	//Check all rules of unit[1174][0]
	L[1174][0] = LargeX[1174][1]>0 ? 1 : 0;
	satisfiable[1174][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1174_0[i][0] ][ unit1174_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1174_0[i][2] ][ unit1174_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1174_0[i][4] ][ unit1174_0[i][5] ] >0);
		X_contra = ( LargeX[1174][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1174_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1174][1]=0; L[1174][0]=1;}
			satisfiable[1174][0]=satisfiable[1174][0] & ((x[1174] ^ 0) | (x[ unit1174_0[i][0] ] ^ unit1174_0[i][1]) |(x[ unit1174_0[i][2] ] ^ unit1174_0[i][3]));
			}
		if(X_contra>0) L[1174][0]=2;
		}
	//Check all rules of unit[1174][1]
	L[1174][1] = LargeX[1174][0]>0 ? 1 : 0;
	satisfiable[1174][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1174_1[i][0] ][ unit1174_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1174_1[i][2] ][ unit1174_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1174_1[i][4] ][ unit1174_1[i][5] ] >0);
		X_contra = ( LargeX[1174][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1174_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1174][0]=0; L[1174][1]=1;}
			satisfiable[1174][1]=satisfiable[1174][1] & ((x[1174] ^ 1) | (x[ unit1174_1[i][0] ] ^ unit1174_1[i][1]) |(x[ unit1174_1[i][2] ] ^ unit1174_1[i][3]));
			}
		if(X_contra>0) L[1174][1]=2;
		}
	//Check all rules of unit[1175][0]
	L[1175][0] = LargeX[1175][1]>0 ? 1 : 0;
	satisfiable[1175][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1175_0[i][0] ][ unit1175_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1175_0[i][2] ][ unit1175_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1175_0[i][4] ][ unit1175_0[i][5] ] >0);
		X_contra = ( LargeX[1175][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1175_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1175][1]=0; L[1175][0]=1;}
			satisfiable[1175][0]=satisfiable[1175][0] & ((x[1175] ^ 0) | (x[ unit1175_0[i][0] ] ^ unit1175_0[i][1]) |(x[ unit1175_0[i][2] ] ^ unit1175_0[i][3]));
			}
		if(X_contra>0) L[1175][0]=2;
		}
	//Check all rules of unit[1175][1]
	L[1175][1] = LargeX[1175][0]>0 ? 1 : 0;
	satisfiable[1175][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1175_1[i][0] ][ unit1175_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1175_1[i][2] ][ unit1175_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1175_1[i][4] ][ unit1175_1[i][5] ] >0);
		X_contra = ( LargeX[1175][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1175_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1175][0]=0; L[1175][1]=1;}
			satisfiable[1175][1]=satisfiable[1175][1] & ((x[1175] ^ 1) | (x[ unit1175_1[i][0] ] ^ unit1175_1[i][1]) |(x[ unit1175_1[i][2] ] ^ unit1175_1[i][3]));
			}
		if(X_contra>0) L[1175][1]=2;
		}
	//Check all rules of unit[1176][0]
	L[1176][0] = LargeX[1176][1]>0 ? 1 : 0;
	satisfiable[1176][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1176_0[i][0] ][ unit1176_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1176_0[i][2] ][ unit1176_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1176_0[i][4] ][ unit1176_0[i][5] ] >0);
		X_contra = ( LargeX[1176][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1176_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1176][1]=0; L[1176][0]=1;}
			satisfiable[1176][0]=satisfiable[1176][0] & ((x[1176] ^ 0) | (x[ unit1176_0[i][0] ] ^ unit1176_0[i][1]) |(x[ unit1176_0[i][2] ] ^ unit1176_0[i][3]));
			}
		if(X_contra>0) L[1176][0]=2;
		}
	//Check all rules of unit[1176][1]
	L[1176][1] = LargeX[1176][0]>0 ? 1 : 0;
	satisfiable[1176][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1176_1[i][0] ][ unit1176_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1176_1[i][2] ][ unit1176_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1176_1[i][4] ][ unit1176_1[i][5] ] >0);
		X_contra = ( LargeX[1176][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1176_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1176][0]=0; L[1176][1]=1;}
			satisfiable[1176][1]=satisfiable[1176][1] & ((x[1176] ^ 1) | (x[ unit1176_1[i][0] ] ^ unit1176_1[i][1]) |(x[ unit1176_1[i][2] ] ^ unit1176_1[i][3]));
			}
		if(X_contra>0) L[1176][1]=2;
		}
	//Check all rules of unit[1177][0]
	L[1177][0] = LargeX[1177][1]>0 ? 1 : 0;
	satisfiable[1177][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1177_0[i][0] ][ unit1177_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1177_0[i][2] ][ unit1177_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1177_0[i][4] ][ unit1177_0[i][5] ] >0);
		X_contra = ( LargeX[1177][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1177_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1177][1]=0; L[1177][0]=1;}
			satisfiable[1177][0]=satisfiable[1177][0] & ((x[1177] ^ 0) | (x[ unit1177_0[i][0] ] ^ unit1177_0[i][1]) |(x[ unit1177_0[i][2] ] ^ unit1177_0[i][3]));
			}
		if(X_contra>0) L[1177][0]=2;
		}
	//Check all rules of unit[1177][1]
	L[1177][1] = LargeX[1177][0]>0 ? 1 : 0;
	satisfiable[1177][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1177_1[i][0] ][ unit1177_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1177_1[i][2] ][ unit1177_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1177_1[i][4] ][ unit1177_1[i][5] ] >0);
		X_contra = ( LargeX[1177][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1177_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1177][0]=0; L[1177][1]=1;}
			satisfiable[1177][1]=satisfiable[1177][1] & ((x[1177] ^ 1) | (x[ unit1177_1[i][0] ] ^ unit1177_1[i][1]) |(x[ unit1177_1[i][2] ] ^ unit1177_1[i][3]));
			}
		if(X_contra>0) L[1177][1]=2;
		}
	//Check all rules of unit[1178][0]
	L[1178][0] = LargeX[1178][1]>0 ? 1 : 0;
	satisfiable[1178][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1178_0[i][0] ][ unit1178_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1178_0[i][2] ][ unit1178_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1178_0[i][4] ][ unit1178_0[i][5] ] >0);
		X_contra = ( LargeX[1178][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1178_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1178][1]=0; L[1178][0]=1;}
			satisfiable[1178][0]=satisfiable[1178][0] & ((x[1178] ^ 0) | (x[ unit1178_0[i][0] ] ^ unit1178_0[i][1]) |(x[ unit1178_0[i][2] ] ^ unit1178_0[i][3]));
			}
		if(X_contra>0) L[1178][0]=2;
		}
	//Check all rules of unit[1178][1]
	L[1178][1] = LargeX[1178][0]>0 ? 1 : 0;
	satisfiable[1178][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1178_1[i][0] ][ unit1178_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1178_1[i][2] ][ unit1178_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1178_1[i][4] ][ unit1178_1[i][5] ] >0);
		X_contra = ( LargeX[1178][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1178_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1178][0]=0; L[1178][1]=1;}
			satisfiable[1178][1]=satisfiable[1178][1] & ((x[1178] ^ 1) | (x[ unit1178_1[i][0] ] ^ unit1178_1[i][1]) |(x[ unit1178_1[i][2] ] ^ unit1178_1[i][3]));
			}
		if(X_contra>0) L[1178][1]=2;
		}
	//Check all rules of unit[1179][0]
	L[1179][0] = LargeX[1179][1]>0 ? 1 : 0;
	satisfiable[1179][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1179_0[i][0] ][ unit1179_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1179_0[i][2] ][ unit1179_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1179_0[i][4] ][ unit1179_0[i][5] ] >0);
		X_contra = ( LargeX[1179][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1179_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1179][1]=0; L[1179][0]=1;}
			satisfiable[1179][0]=satisfiable[1179][0] & ((x[1179] ^ 0) | (x[ unit1179_0[i][0] ] ^ unit1179_0[i][1]) |(x[ unit1179_0[i][2] ] ^ unit1179_0[i][3]));
			}
		if(X_contra>0) L[1179][0]=2;
		}
	//Check all rules of unit[1179][1]
	L[1179][1] = LargeX[1179][0]>0 ? 1 : 0;
	satisfiable[1179][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1179_1[i][0] ][ unit1179_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1179_1[i][2] ][ unit1179_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1179_1[i][4] ][ unit1179_1[i][5] ] >0);
		X_contra = ( LargeX[1179][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1179_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1179][0]=0; L[1179][1]=1;}
			satisfiable[1179][1]=satisfiable[1179][1] & ((x[1179] ^ 1) | (x[ unit1179_1[i][0] ] ^ unit1179_1[i][1]) |(x[ unit1179_1[i][2] ] ^ unit1179_1[i][3]));
			}
		if(X_contra>0) L[1179][1]=2;
		}
	//Check all rules of unit[1180][0]
	L[1180][0] = LargeX[1180][1]>0 ? 1 : 0;
	satisfiable[1180][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1180_0[i][0] ][ unit1180_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1180_0[i][2] ][ unit1180_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1180_0[i][4] ][ unit1180_0[i][5] ] >0);
		X_contra = ( LargeX[1180][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1180_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1180][1]=0; L[1180][0]=1;}
			satisfiable[1180][0]=satisfiable[1180][0] & ((x[1180] ^ 0) | (x[ unit1180_0[i][0] ] ^ unit1180_0[i][1]) |(x[ unit1180_0[i][2] ] ^ unit1180_0[i][3]));
			}
		if(X_contra>0) L[1180][0]=2;
		}
	//Check all rules of unit[1180][1]
	L[1180][1] = LargeX[1180][0]>0 ? 1 : 0;
	satisfiable[1180][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1180_1[i][0] ][ unit1180_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1180_1[i][2] ][ unit1180_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1180_1[i][4] ][ unit1180_1[i][5] ] >0);
		X_contra = ( LargeX[1180][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1180_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1180][0]=0; L[1180][1]=1;}
			satisfiable[1180][1]=satisfiable[1180][1] & ((x[1180] ^ 1) | (x[ unit1180_1[i][0] ] ^ unit1180_1[i][1]) |(x[ unit1180_1[i][2] ] ^ unit1180_1[i][3]));
			}
		if(X_contra>0) L[1180][1]=2;
		}
	//Check all rules of unit[1181][0]
	L[1181][0] = LargeX[1181][1]>0 ? 1 : 0;
	satisfiable[1181][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1181_0[i][0] ][ unit1181_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1181_0[i][2] ][ unit1181_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1181_0[i][4] ][ unit1181_0[i][5] ] >0);
		X_contra = ( LargeX[1181][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1181_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1181][1]=0; L[1181][0]=1;}
			satisfiable[1181][0]=satisfiable[1181][0] & ((x[1181] ^ 0) | (x[ unit1181_0[i][0] ] ^ unit1181_0[i][1]) |(x[ unit1181_0[i][2] ] ^ unit1181_0[i][3]));
			}
		if(X_contra>0) L[1181][0]=2;
		}
	//Check all rules of unit[1181][1]
	L[1181][1] = LargeX[1181][0]>0 ? 1 : 0;
	satisfiable[1181][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1181_1[i][0] ][ unit1181_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1181_1[i][2] ][ unit1181_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1181_1[i][4] ][ unit1181_1[i][5] ] >0);
		X_contra = ( LargeX[1181][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1181_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1181][0]=0; L[1181][1]=1;}
			satisfiable[1181][1]=satisfiable[1181][1] & ((x[1181] ^ 1) | (x[ unit1181_1[i][0] ] ^ unit1181_1[i][1]) |(x[ unit1181_1[i][2] ] ^ unit1181_1[i][3]));
			}
		if(X_contra>0) L[1181][1]=2;
		}
	//Check all rules of unit[1182][0]
	L[1182][0] = LargeX[1182][1]>0 ? 1 : 0;
	satisfiable[1182][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1182_0[i][0] ][ unit1182_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1182_0[i][2] ][ unit1182_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1182_0[i][4] ][ unit1182_0[i][5] ] >0);
		X_contra = ( LargeX[1182][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1182_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1182][1]=0; L[1182][0]=1;}
			satisfiable[1182][0]=satisfiable[1182][0] & ((x[1182] ^ 0) | (x[ unit1182_0[i][0] ] ^ unit1182_0[i][1]) |(x[ unit1182_0[i][2] ] ^ unit1182_0[i][3]));
			}
		if(X_contra>0) L[1182][0]=2;
		}
	//Check all rules of unit[1182][1]
	L[1182][1] = LargeX[1182][0]>0 ? 1 : 0;
	satisfiable[1182][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1182_1[i][0] ][ unit1182_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1182_1[i][2] ][ unit1182_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1182_1[i][4] ][ unit1182_1[i][5] ] >0);
		X_contra = ( LargeX[1182][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1182_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1182][0]=0; L[1182][1]=1;}
			satisfiable[1182][1]=satisfiable[1182][1] & ((x[1182] ^ 1) | (x[ unit1182_1[i][0] ] ^ unit1182_1[i][1]) |(x[ unit1182_1[i][2] ] ^ unit1182_1[i][3]));
			}
		if(X_contra>0) L[1182][1]=2;
		}
	//Check all rules of unit[1183][0]
	L[1183][0] = LargeX[1183][1]>0 ? 1 : 0;
	satisfiable[1183][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1183_0[i][0] ][ unit1183_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1183_0[i][2] ][ unit1183_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1183_0[i][4] ][ unit1183_0[i][5] ] >0);
		X_contra = ( LargeX[1183][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1183_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1183][1]=0; L[1183][0]=1;}
			satisfiable[1183][0]=satisfiable[1183][0] & ((x[1183] ^ 0) | (x[ unit1183_0[i][0] ] ^ unit1183_0[i][1]) |(x[ unit1183_0[i][2] ] ^ unit1183_0[i][3]));
			}
		if(X_contra>0) L[1183][0]=2;
		}
	//Check all rules of unit[1183][1]
	L[1183][1] = LargeX[1183][0]>0 ? 1 : 0;
	satisfiable[1183][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1183_1[i][0] ][ unit1183_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1183_1[i][2] ][ unit1183_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1183_1[i][4] ][ unit1183_1[i][5] ] >0);
		X_contra = ( LargeX[1183][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1183_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1183][0]=0; L[1183][1]=1;}
			satisfiable[1183][1]=satisfiable[1183][1] & ((x[1183] ^ 1) | (x[ unit1183_1[i][0] ] ^ unit1183_1[i][1]) |(x[ unit1183_1[i][2] ] ^ unit1183_1[i][3]));
			}
		if(X_contra>0) L[1183][1]=2;
		}
	//Check all rules of unit[1184][0]
	L[1184][0] = LargeX[1184][1]>0 ? 1 : 0;
	satisfiable[1184][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1184_0[i][0] ][ unit1184_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1184_0[i][2] ][ unit1184_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1184_0[i][4] ][ unit1184_0[i][5] ] >0);
		X_contra = ( LargeX[1184][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1184_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1184][1]=0; L[1184][0]=1;}
			satisfiable[1184][0]=satisfiable[1184][0] & ((x[1184] ^ 0) | (x[ unit1184_0[i][0] ] ^ unit1184_0[i][1]) |(x[ unit1184_0[i][2] ] ^ unit1184_0[i][3]));
			}
		if(X_contra>0) L[1184][0]=2;
		}
	//Check all rules of unit[1184][1]
	L[1184][1] = LargeX[1184][0]>0 ? 1 : 0;
	satisfiable[1184][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1184_1[i][0] ][ unit1184_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1184_1[i][2] ][ unit1184_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1184_1[i][4] ][ unit1184_1[i][5] ] >0);
		X_contra = ( LargeX[1184][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1184_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1184][0]=0; L[1184][1]=1;}
			satisfiable[1184][1]=satisfiable[1184][1] & ((x[1184] ^ 1) | (x[ unit1184_1[i][0] ] ^ unit1184_1[i][1]) |(x[ unit1184_1[i][2] ] ^ unit1184_1[i][3]));
			}
		if(X_contra>0) L[1184][1]=2;
		}
	//Check all rules of unit[1185][0]
	L[1185][0] = LargeX[1185][1]>0 ? 1 : 0;
	satisfiable[1185][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1185_0[i][0] ][ unit1185_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1185_0[i][2] ][ unit1185_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1185_0[i][4] ][ unit1185_0[i][5] ] >0);
		X_contra = ( LargeX[1185][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1185_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1185][1]=0; L[1185][0]=1;}
			satisfiable[1185][0]=satisfiable[1185][0] & ((x[1185] ^ 0) | (x[ unit1185_0[i][0] ] ^ unit1185_0[i][1]) |(x[ unit1185_0[i][2] ] ^ unit1185_0[i][3]));
			}
		if(X_contra>0) L[1185][0]=2;
		}
	//Check all rules of unit[1185][1]
	L[1185][1] = LargeX[1185][0]>0 ? 1 : 0;
	satisfiable[1185][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1185_1[i][0] ][ unit1185_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1185_1[i][2] ][ unit1185_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1185_1[i][4] ][ unit1185_1[i][5] ] >0);
		X_contra = ( LargeX[1185][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1185_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1185][0]=0; L[1185][1]=1;}
			satisfiable[1185][1]=satisfiable[1185][1] & ((x[1185] ^ 1) | (x[ unit1185_1[i][0] ] ^ unit1185_1[i][1]) |(x[ unit1185_1[i][2] ] ^ unit1185_1[i][3]));
			}
		if(X_contra>0) L[1185][1]=2;
		}
	//Check all rules of unit[1186][0]
	L[1186][0] = LargeX[1186][1]>0 ? 1 : 0;
	satisfiable[1186][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1186_0[i][0] ][ unit1186_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1186_0[i][2] ][ unit1186_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1186_0[i][4] ][ unit1186_0[i][5] ] >0);
		X_contra = ( LargeX[1186][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1186_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1186][1]=0; L[1186][0]=1;}
			satisfiable[1186][0]=satisfiable[1186][0] & ((x[1186] ^ 0) | (x[ unit1186_0[i][0] ] ^ unit1186_0[i][1]) |(x[ unit1186_0[i][2] ] ^ unit1186_0[i][3]));
			}
		if(X_contra>0) L[1186][0]=2;
		}
	//Check all rules of unit[1186][1]
	L[1186][1] = LargeX[1186][0]>0 ? 1 : 0;
	satisfiable[1186][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1186_1[i][0] ][ unit1186_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1186_1[i][2] ][ unit1186_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1186_1[i][4] ][ unit1186_1[i][5] ] >0);
		X_contra = ( LargeX[1186][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1186_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1186][0]=0; L[1186][1]=1;}
			satisfiable[1186][1]=satisfiable[1186][1] & ((x[1186] ^ 1) | (x[ unit1186_1[i][0] ] ^ unit1186_1[i][1]) |(x[ unit1186_1[i][2] ] ^ unit1186_1[i][3]));
			}
		if(X_contra>0) L[1186][1]=2;
		}
	//Check all rules of unit[1187][0]
	L[1187][0] = LargeX[1187][1]>0 ? 1 : 0;
	satisfiable[1187][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1187_0[i][0] ][ unit1187_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1187_0[i][2] ][ unit1187_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1187_0[i][4] ][ unit1187_0[i][5] ] >0);
		X_contra = ( LargeX[1187][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1187_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1187][1]=0; L[1187][0]=1;}
			satisfiable[1187][0]=satisfiable[1187][0] & ((x[1187] ^ 0) | (x[ unit1187_0[i][0] ] ^ unit1187_0[i][1]) |(x[ unit1187_0[i][2] ] ^ unit1187_0[i][3]));
			}
		if(X_contra>0) L[1187][0]=2;
		}
	//Check all rules of unit[1187][1]
	L[1187][1] = LargeX[1187][0]>0 ? 1 : 0;
	satisfiable[1187][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1187_1[i][0] ][ unit1187_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1187_1[i][2] ][ unit1187_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1187_1[i][4] ][ unit1187_1[i][5] ] >0);
		X_contra = ( LargeX[1187][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1187_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1187][0]=0; L[1187][1]=1;}
			satisfiable[1187][1]=satisfiable[1187][1] & ((x[1187] ^ 1) | (x[ unit1187_1[i][0] ] ^ unit1187_1[i][1]) |(x[ unit1187_1[i][2] ] ^ unit1187_1[i][3]));
			}
		if(X_contra>0) L[1187][1]=2;
		}
	//Check all rules of unit[1188][0]
	L[1188][0] = LargeX[1188][1]>0 ? 1 : 0;
	satisfiable[1188][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1188_0[i][0] ][ unit1188_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1188_0[i][2] ][ unit1188_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1188_0[i][4] ][ unit1188_0[i][5] ] >0);
		X_contra = ( LargeX[1188][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1188_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1188][1]=0; L[1188][0]=1;}
			satisfiable[1188][0]=satisfiable[1188][0] & ((x[1188] ^ 0) | (x[ unit1188_0[i][0] ] ^ unit1188_0[i][1]) |(x[ unit1188_0[i][2] ] ^ unit1188_0[i][3]));
			}
		if(X_contra>0) L[1188][0]=2;
		}
	//Check all rules of unit[1188][1]
	L[1188][1] = LargeX[1188][0]>0 ? 1 : 0;
	satisfiable[1188][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1188_1[i][0] ][ unit1188_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1188_1[i][2] ][ unit1188_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1188_1[i][4] ][ unit1188_1[i][5] ] >0);
		X_contra = ( LargeX[1188][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1188_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1188][0]=0; L[1188][1]=1;}
			satisfiable[1188][1]=satisfiable[1188][1] & ((x[1188] ^ 1) | (x[ unit1188_1[i][0] ] ^ unit1188_1[i][1]) |(x[ unit1188_1[i][2] ] ^ unit1188_1[i][3]));
			}
		if(X_contra>0) L[1188][1]=2;
		}
	//Check all rules of unit[1189][0]
	L[1189][0] = LargeX[1189][1]>0 ? 1 : 0;
	satisfiable[1189][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1189_0[i][0] ][ unit1189_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1189_0[i][2] ][ unit1189_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1189_0[i][4] ][ unit1189_0[i][5] ] >0);
		X_contra = ( LargeX[1189][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1189_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1189][1]=0; L[1189][0]=1;}
			satisfiable[1189][0]=satisfiable[1189][0] & ((x[1189] ^ 0) | (x[ unit1189_0[i][0] ] ^ unit1189_0[i][1]) |(x[ unit1189_0[i][2] ] ^ unit1189_0[i][3]));
			}
		if(X_contra>0) L[1189][0]=2;
		}
	//Check all rules of unit[1189][1]
	L[1189][1] = LargeX[1189][0]>0 ? 1 : 0;
	satisfiable[1189][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1189_1[i][0] ][ unit1189_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1189_1[i][2] ][ unit1189_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1189_1[i][4] ][ unit1189_1[i][5] ] >0);
		X_contra = ( LargeX[1189][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1189_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1189][0]=0; L[1189][1]=1;}
			satisfiable[1189][1]=satisfiable[1189][1] & ((x[1189] ^ 1) | (x[ unit1189_1[i][0] ] ^ unit1189_1[i][1]) |(x[ unit1189_1[i][2] ] ^ unit1189_1[i][3]));
			}
		if(X_contra>0) L[1189][1]=2;
		}
	//Check all rules of unit[1190][0]
	L[1190][0] = LargeX[1190][1]>0 ? 1 : 0;
	satisfiable[1190][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1190_0[i][0] ][ unit1190_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1190_0[i][2] ][ unit1190_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1190_0[i][4] ][ unit1190_0[i][5] ] >0);
		X_contra = ( LargeX[1190][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1190_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1190][1]=0; L[1190][0]=1;}
			satisfiable[1190][0]=satisfiable[1190][0] & ((x[1190] ^ 0) | (x[ unit1190_0[i][0] ] ^ unit1190_0[i][1]) |(x[ unit1190_0[i][2] ] ^ unit1190_0[i][3]));
			}
		if(X_contra>0) L[1190][0]=2;
		}
	//Check all rules of unit[1190][1]
	L[1190][1] = LargeX[1190][0]>0 ? 1 : 0;
	satisfiable[1190][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1190_1[i][0] ][ unit1190_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1190_1[i][2] ][ unit1190_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1190_1[i][4] ][ unit1190_1[i][5] ] >0);
		X_contra = ( LargeX[1190][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1190_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1190][0]=0; L[1190][1]=1;}
			satisfiable[1190][1]=satisfiable[1190][1] & ((x[1190] ^ 1) | (x[ unit1190_1[i][0] ] ^ unit1190_1[i][1]) |(x[ unit1190_1[i][2] ] ^ unit1190_1[i][3]));
			}
		if(X_contra>0) L[1190][1]=2;
		}
	//Check all rules of unit[1191][0]
	L[1191][0] = LargeX[1191][1]>0 ? 1 : 0;
	satisfiable[1191][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1191_0[i][0] ][ unit1191_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1191_0[i][2] ][ unit1191_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1191_0[i][4] ][ unit1191_0[i][5] ] >0);
		X_contra = ( LargeX[1191][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1191_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1191][1]=0; L[1191][0]=1;}
			satisfiable[1191][0]=satisfiable[1191][0] & ((x[1191] ^ 0) | (x[ unit1191_0[i][0] ] ^ unit1191_0[i][1]) |(x[ unit1191_0[i][2] ] ^ unit1191_0[i][3]));
			}
		if(X_contra>0) L[1191][0]=2;
		}
	//Check all rules of unit[1191][1]
	L[1191][1] = LargeX[1191][0]>0 ? 1 : 0;
	satisfiable[1191][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1191_1[i][0] ][ unit1191_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1191_1[i][2] ][ unit1191_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1191_1[i][4] ][ unit1191_1[i][5] ] >0);
		X_contra = ( LargeX[1191][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1191_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1191][0]=0; L[1191][1]=1;}
			satisfiable[1191][1]=satisfiable[1191][1] & ((x[1191] ^ 1) | (x[ unit1191_1[i][0] ] ^ unit1191_1[i][1]) |(x[ unit1191_1[i][2] ] ^ unit1191_1[i][3]));
			}
		if(X_contra>0) L[1191][1]=2;
		}
	//Check all rules of unit[1192][0]
	L[1192][0] = LargeX[1192][1]>0 ? 1 : 0;
	satisfiable[1192][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1192_0[i][0] ][ unit1192_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1192_0[i][2] ][ unit1192_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1192_0[i][4] ][ unit1192_0[i][5] ] >0);
		X_contra = ( LargeX[1192][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1192_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1192][1]=0; L[1192][0]=1;}
			satisfiable[1192][0]=satisfiable[1192][0] & ((x[1192] ^ 0) | (x[ unit1192_0[i][0] ] ^ unit1192_0[i][1]) |(x[ unit1192_0[i][2] ] ^ unit1192_0[i][3]));
			}
		if(X_contra>0) L[1192][0]=2;
		}
	//Check all rules of unit[1192][1]
	L[1192][1] = LargeX[1192][0]>0 ? 1 : 0;
	satisfiable[1192][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1192_1[i][0] ][ unit1192_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1192_1[i][2] ][ unit1192_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1192_1[i][4] ][ unit1192_1[i][5] ] >0);
		X_contra = ( LargeX[1192][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1192_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1192][0]=0; L[1192][1]=1;}
			satisfiable[1192][1]=satisfiable[1192][1] & ((x[1192] ^ 1) | (x[ unit1192_1[i][0] ] ^ unit1192_1[i][1]) |(x[ unit1192_1[i][2] ] ^ unit1192_1[i][3]));
			}
		if(X_contra>0) L[1192][1]=2;
		}
	//Check all rules of unit[1193][0]
	L[1193][0] = LargeX[1193][1]>0 ? 1 : 0;
	satisfiable[1193][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1193_0[i][0] ][ unit1193_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1193_0[i][2] ][ unit1193_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1193_0[i][4] ][ unit1193_0[i][5] ] >0);
		X_contra = ( LargeX[1193][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1193_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1193][1]=0; L[1193][0]=1;}
			satisfiable[1193][0]=satisfiable[1193][0] & ((x[1193] ^ 0) | (x[ unit1193_0[i][0] ] ^ unit1193_0[i][1]) |(x[ unit1193_0[i][2] ] ^ unit1193_0[i][3]));
			}
		if(X_contra>0) L[1193][0]=2;
		}
	//Check all rules of unit[1193][1]
	L[1193][1] = LargeX[1193][0]>0 ? 1 : 0;
	satisfiable[1193][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1193_1[i][0] ][ unit1193_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1193_1[i][2] ][ unit1193_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1193_1[i][4] ][ unit1193_1[i][5] ] >0);
		X_contra = ( LargeX[1193][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1193_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1193][0]=0; L[1193][1]=1;}
			satisfiable[1193][1]=satisfiable[1193][1] & ((x[1193] ^ 1) | (x[ unit1193_1[i][0] ] ^ unit1193_1[i][1]) |(x[ unit1193_1[i][2] ] ^ unit1193_1[i][3]));
			}
		if(X_contra>0) L[1193][1]=2;
		}
	//Check all rules of unit[1194][0]
	L[1194][0] = LargeX[1194][1]>0 ? 1 : 0;
	satisfiable[1194][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1194_0[i][0] ][ unit1194_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1194_0[i][2] ][ unit1194_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1194_0[i][4] ][ unit1194_0[i][5] ] >0);
		X_contra = ( LargeX[1194][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1194_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1194][1]=0; L[1194][0]=1;}
			satisfiable[1194][0]=satisfiable[1194][0] & ((x[1194] ^ 0) | (x[ unit1194_0[i][0] ] ^ unit1194_0[i][1]) |(x[ unit1194_0[i][2] ] ^ unit1194_0[i][3]));
			}
		if(X_contra>0) L[1194][0]=2;
		}
	//Check all rules of unit[1194][1]
	L[1194][1] = LargeX[1194][0]>0 ? 1 : 0;
	satisfiable[1194][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1194_1[i][0] ][ unit1194_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1194_1[i][2] ][ unit1194_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1194_1[i][4] ][ unit1194_1[i][5] ] >0);
		X_contra = ( LargeX[1194][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1194_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1194][0]=0; L[1194][1]=1;}
			satisfiable[1194][1]=satisfiable[1194][1] & ((x[1194] ^ 1) | (x[ unit1194_1[i][0] ] ^ unit1194_1[i][1]) |(x[ unit1194_1[i][2] ] ^ unit1194_1[i][3]));
			}
		if(X_contra>0) L[1194][1]=2;
		}
	//Check all rules of unit[1195][0]
	L[1195][0] = LargeX[1195][1]>0 ? 1 : 0;
	satisfiable[1195][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1195_0[i][0] ][ unit1195_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1195_0[i][2] ][ unit1195_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1195_0[i][4] ][ unit1195_0[i][5] ] >0);
		X_contra = ( LargeX[1195][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1195_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1195][1]=0; L[1195][0]=1;}
			satisfiable[1195][0]=satisfiable[1195][0] & ((x[1195] ^ 0) | (x[ unit1195_0[i][0] ] ^ unit1195_0[i][1]) |(x[ unit1195_0[i][2] ] ^ unit1195_0[i][3]));
			}
		if(X_contra>0) L[1195][0]=2;
		}
	//Check all rules of unit[1195][1]
	L[1195][1] = LargeX[1195][0]>0 ? 1 : 0;
	satisfiable[1195][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1195_1[i][0] ][ unit1195_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1195_1[i][2] ][ unit1195_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1195_1[i][4] ][ unit1195_1[i][5] ] >0);
		X_contra = ( LargeX[1195][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1195_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1195][0]=0; L[1195][1]=1;}
			satisfiable[1195][1]=satisfiable[1195][1] & ((x[1195] ^ 1) | (x[ unit1195_1[i][0] ] ^ unit1195_1[i][1]) |(x[ unit1195_1[i][2] ] ^ unit1195_1[i][3]));
			}
		if(X_contra>0) L[1195][1]=2;
		}
	//Check all rules of unit[1196][0]
	L[1196][0] = LargeX[1196][1]>0 ? 1 : 0;
	satisfiable[1196][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1196_0[i][0] ][ unit1196_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1196_0[i][2] ][ unit1196_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1196_0[i][4] ][ unit1196_0[i][5] ] >0);
		X_contra = ( LargeX[1196][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1196_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1196][1]=0; L[1196][0]=1;}
			satisfiable[1196][0]=satisfiable[1196][0] & ((x[1196] ^ 0) | (x[ unit1196_0[i][0] ] ^ unit1196_0[i][1]) |(x[ unit1196_0[i][2] ] ^ unit1196_0[i][3]));
			}
		if(X_contra>0) L[1196][0]=2;
		}
	//Check all rules of unit[1196][1]
	L[1196][1] = LargeX[1196][0]>0 ? 1 : 0;
	satisfiable[1196][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1196_1[i][0] ][ unit1196_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1196_1[i][2] ][ unit1196_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1196_1[i][4] ][ unit1196_1[i][5] ] >0);
		X_contra = ( LargeX[1196][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1196_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1196][0]=0; L[1196][1]=1;}
			satisfiable[1196][1]=satisfiable[1196][1] & ((x[1196] ^ 1) | (x[ unit1196_1[i][0] ] ^ unit1196_1[i][1]) |(x[ unit1196_1[i][2] ] ^ unit1196_1[i][3]));
			}
		if(X_contra>0) L[1196][1]=2;
		}
	//Check all rules of unit[1197][0]
	L[1197][0] = LargeX[1197][1]>0 ? 1 : 0;
	satisfiable[1197][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1197_0[i][0] ][ unit1197_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1197_0[i][2] ][ unit1197_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1197_0[i][4] ][ unit1197_0[i][5] ] >0);
		X_contra = ( LargeX[1197][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1197_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1197][1]=0; L[1197][0]=1;}
			satisfiable[1197][0]=satisfiable[1197][0] & ((x[1197] ^ 0) | (x[ unit1197_0[i][0] ] ^ unit1197_0[i][1]) |(x[ unit1197_0[i][2] ] ^ unit1197_0[i][3]));
			}
		if(X_contra>0) L[1197][0]=2;
		}
	//Check all rules of unit[1197][1]
	L[1197][1] = LargeX[1197][0]>0 ? 1 : 0;
	satisfiable[1197][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1197_1[i][0] ][ unit1197_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1197_1[i][2] ][ unit1197_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1197_1[i][4] ][ unit1197_1[i][5] ] >0);
		X_contra = ( LargeX[1197][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1197_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1197][0]=0; L[1197][1]=1;}
			satisfiable[1197][1]=satisfiable[1197][1] & ((x[1197] ^ 1) | (x[ unit1197_1[i][0] ] ^ unit1197_1[i][1]) |(x[ unit1197_1[i][2] ] ^ unit1197_1[i][3]));
			}
		if(X_contra>0) L[1197][1]=2;
		}
	//Check all rules of unit[1198][0]
	L[1198][0] = LargeX[1198][1]>0 ? 1 : 0;
	satisfiable[1198][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1198_0[i][0] ][ unit1198_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1198_0[i][2] ][ unit1198_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1198_0[i][4] ][ unit1198_0[i][5] ] >0);
		X_contra = ( LargeX[1198][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1198_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1198][1]=0; L[1198][0]=1;}
			satisfiable[1198][0]=satisfiable[1198][0] & ((x[1198] ^ 0) | (x[ unit1198_0[i][0] ] ^ unit1198_0[i][1]) |(x[ unit1198_0[i][2] ] ^ unit1198_0[i][3]));
			}
		if(X_contra>0) L[1198][0]=2;
		}
	//Check all rules of unit[1198][1]
	L[1198][1] = LargeX[1198][0]>0 ? 1 : 0;
	satisfiable[1198][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1198_1[i][0] ][ unit1198_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1198_1[i][2] ][ unit1198_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1198_1[i][4] ][ unit1198_1[i][5] ] >0);
		X_contra = ( LargeX[1198][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1198_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1198][0]=0; L[1198][1]=1;}
			satisfiable[1198][1]=satisfiable[1198][1] & ((x[1198] ^ 1) | (x[ unit1198_1[i][0] ] ^ unit1198_1[i][1]) |(x[ unit1198_1[i][2] ] ^ unit1198_1[i][3]));
			}
		if(X_contra>0) L[1198][1]=2;
		}
	//Check all rules of unit[1199][0]
	L[1199][0] = LargeX[1199][1]>0 ? 1 : 0;
	satisfiable[1199][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1199_0[i][0] ][ unit1199_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1199_0[i][2] ][ unit1199_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1199_0[i][4] ][ unit1199_0[i][5] ] >0);
		X_contra = ( LargeX[1199][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1199_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1199][1]=0; L[1199][0]=1;}
			satisfiable[1199][0]=satisfiable[1199][0] & ((x[1199] ^ 0) | (x[ unit1199_0[i][0] ] ^ unit1199_0[i][1]) |(x[ unit1199_0[i][2] ] ^ unit1199_0[i][3]));
			}
		if(X_contra>0) L[1199][0]=2;
		}
	//Check all rules of unit[1199][1]
	L[1199][1] = LargeX[1199][0]>0 ? 1 : 0;
	satisfiable[1199][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1199_1[i][0] ][ unit1199_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1199_1[i][2] ][ unit1199_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1199_1[i][4] ][ unit1199_1[i][5] ] >0);
		X_contra = ( LargeX[1199][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1199_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1199][0]=0; L[1199][1]=1;}
			satisfiable[1199][1]=satisfiable[1199][1] & ((x[1199] ^ 1) | (x[ unit1199_1[i][0] ] ^ unit1199_1[i][1]) |(x[ unit1199_1[i][2] ] ^ unit1199_1[i][3]));
			}
		if(X_contra>0) L[1199][1]=2;
		}
	//Check all rules of unit[1200][0]
	L[1200][0] = LargeX[1200][1]>0 ? 1 : 0;
	satisfiable[1200][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1200_0[i][0] ][ unit1200_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1200_0[i][2] ][ unit1200_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1200_0[i][4] ][ unit1200_0[i][5] ] >0);
		X_contra = ( LargeX[1200][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1200_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1200][1]=0; L[1200][0]=1;}
			satisfiable[1200][0]=satisfiable[1200][0] & ((x[1200] ^ 0) | (x[ unit1200_0[i][0] ] ^ unit1200_0[i][1]) |(x[ unit1200_0[i][2] ] ^ unit1200_0[i][3]));
			}
		if(X_contra>0) L[1200][0]=2;
		}
	//Check all rules of unit[1200][1]
	L[1200][1] = LargeX[1200][0]>0 ? 1 : 0;
	satisfiable[1200][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1200_1[i][0] ][ unit1200_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1200_1[i][2] ][ unit1200_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1200_1[i][4] ][ unit1200_1[i][5] ] >0);
		X_contra = ( LargeX[1200][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1200_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1200][0]=0; L[1200][1]=1;}
			satisfiable[1200][1]=satisfiable[1200][1] & ((x[1200] ^ 1) | (x[ unit1200_1[i][0] ] ^ unit1200_1[i][1]) |(x[ unit1200_1[i][2] ] ^ unit1200_1[i][3]));
			}
		if(X_contra>0) L[1200][1]=2;
		}
	//Check all rules of unit[1201][0]
	L[1201][0] = LargeX[1201][1]>0 ? 1 : 0;
	satisfiable[1201][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1201_0[i][0] ][ unit1201_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1201_0[i][2] ][ unit1201_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1201_0[i][4] ][ unit1201_0[i][5] ] >0);
		X_contra = ( LargeX[1201][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1201_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1201][1]=0; L[1201][0]=1;}
			satisfiable[1201][0]=satisfiable[1201][0] & ((x[1201] ^ 0) | (x[ unit1201_0[i][0] ] ^ unit1201_0[i][1]) |(x[ unit1201_0[i][2] ] ^ unit1201_0[i][3]));
			}
		if(X_contra>0) L[1201][0]=2;
		}
	//Check all rules of unit[1201][1]
	L[1201][1] = LargeX[1201][0]>0 ? 1 : 0;
	satisfiable[1201][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1201_1[i][0] ][ unit1201_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1201_1[i][2] ][ unit1201_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1201_1[i][4] ][ unit1201_1[i][5] ] >0);
		X_contra = ( LargeX[1201][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1201_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1201][0]=0; L[1201][1]=1;}
			satisfiable[1201][1]=satisfiable[1201][1] & ((x[1201] ^ 1) | (x[ unit1201_1[i][0] ] ^ unit1201_1[i][1]) |(x[ unit1201_1[i][2] ] ^ unit1201_1[i][3]));
			}
		if(X_contra>0) L[1201][1]=2;
		}
	//Check all rules of unit[1202][0]
	L[1202][0] = LargeX[1202][1]>0 ? 1 : 0;
	satisfiable[1202][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1202_0[i][0] ][ unit1202_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1202_0[i][2] ][ unit1202_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1202_0[i][4] ][ unit1202_0[i][5] ] >0);
		X_contra = ( LargeX[1202][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1202_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1202][1]=0; L[1202][0]=1;}
			satisfiable[1202][0]=satisfiable[1202][0] & ((x[1202] ^ 0) | (x[ unit1202_0[i][0] ] ^ unit1202_0[i][1]) |(x[ unit1202_0[i][2] ] ^ unit1202_0[i][3]));
			}
		if(X_contra>0) L[1202][0]=2;
		}
	//Check all rules of unit[1202][1]
	L[1202][1] = LargeX[1202][0]>0 ? 1 : 0;
	satisfiable[1202][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1202_1[i][0] ][ unit1202_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1202_1[i][2] ][ unit1202_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1202_1[i][4] ][ unit1202_1[i][5] ] >0);
		X_contra = ( LargeX[1202][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1202_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1202][0]=0; L[1202][1]=1;}
			satisfiable[1202][1]=satisfiable[1202][1] & ((x[1202] ^ 1) | (x[ unit1202_1[i][0] ] ^ unit1202_1[i][1]) |(x[ unit1202_1[i][2] ] ^ unit1202_1[i][3]));
			}
		if(X_contra>0) L[1202][1]=2;
		}
	//Check all rules of unit[1203][0]
	L[1203][0] = LargeX[1203][1]>0 ? 1 : 0;
	satisfiable[1203][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1203_0[i][0] ][ unit1203_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1203_0[i][2] ][ unit1203_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1203_0[i][4] ][ unit1203_0[i][5] ] >0);
		X_contra = ( LargeX[1203][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1203_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1203][1]=0; L[1203][0]=1;}
			satisfiable[1203][0]=satisfiable[1203][0] & ((x[1203] ^ 0) | (x[ unit1203_0[i][0] ] ^ unit1203_0[i][1]) |(x[ unit1203_0[i][2] ] ^ unit1203_0[i][3]));
			}
		if(X_contra>0) L[1203][0]=2;
		}
	//Check all rules of unit[1203][1]
	L[1203][1] = LargeX[1203][0]>0 ? 1 : 0;
	satisfiable[1203][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1203_1[i][0] ][ unit1203_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1203_1[i][2] ][ unit1203_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1203_1[i][4] ][ unit1203_1[i][5] ] >0);
		X_contra = ( LargeX[1203][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1203_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1203][0]=0; L[1203][1]=1;}
			satisfiable[1203][1]=satisfiable[1203][1] & ((x[1203] ^ 1) | (x[ unit1203_1[i][0] ] ^ unit1203_1[i][1]) |(x[ unit1203_1[i][2] ] ^ unit1203_1[i][3]));
			}
		if(X_contra>0) L[1203][1]=2;
		}
	//Check all rules of unit[1204][0]
	L[1204][0] = LargeX[1204][1]>0 ? 1 : 0;
	satisfiable[1204][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1204_0[i][0] ][ unit1204_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1204_0[i][2] ][ unit1204_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1204_0[i][4] ][ unit1204_0[i][5] ] >0);
		X_contra = ( LargeX[1204][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1204_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1204][1]=0; L[1204][0]=1;}
			satisfiable[1204][0]=satisfiable[1204][0] & ((x[1204] ^ 0) | (x[ unit1204_0[i][0] ] ^ unit1204_0[i][1]) |(x[ unit1204_0[i][2] ] ^ unit1204_0[i][3]));
			}
		if(X_contra>0) L[1204][0]=2;
		}
	//Check all rules of unit[1204][1]
	L[1204][1] = LargeX[1204][0]>0 ? 1 : 0;
	satisfiable[1204][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1204_1[i][0] ][ unit1204_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1204_1[i][2] ][ unit1204_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1204_1[i][4] ][ unit1204_1[i][5] ] >0);
		X_contra = ( LargeX[1204][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1204_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1204][0]=0; L[1204][1]=1;}
			satisfiable[1204][1]=satisfiable[1204][1] & ((x[1204] ^ 1) | (x[ unit1204_1[i][0] ] ^ unit1204_1[i][1]) |(x[ unit1204_1[i][2] ] ^ unit1204_1[i][3]));
			}
		if(X_contra>0) L[1204][1]=2;
		}
	//Check all rules of unit[1205][0]
	L[1205][0] = LargeX[1205][1]>0 ? 1 : 0;
	satisfiable[1205][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1205_0[i][0] ][ unit1205_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1205_0[i][2] ][ unit1205_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1205_0[i][4] ][ unit1205_0[i][5] ] >0);
		X_contra = ( LargeX[1205][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1205_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1205][1]=0; L[1205][0]=1;}
			satisfiable[1205][0]=satisfiable[1205][0] & ((x[1205] ^ 0) | (x[ unit1205_0[i][0] ] ^ unit1205_0[i][1]) |(x[ unit1205_0[i][2] ] ^ unit1205_0[i][3]));
			}
		if(X_contra>0) L[1205][0]=2;
		}
	//Check all rules of unit[1205][1]
	L[1205][1] = LargeX[1205][0]>0 ? 1 : 0;
	satisfiable[1205][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1205_1[i][0] ][ unit1205_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1205_1[i][2] ][ unit1205_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1205_1[i][4] ][ unit1205_1[i][5] ] >0);
		X_contra = ( LargeX[1205][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1205_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1205][0]=0; L[1205][1]=1;}
			satisfiable[1205][1]=satisfiable[1205][1] & ((x[1205] ^ 1) | (x[ unit1205_1[i][0] ] ^ unit1205_1[i][1]) |(x[ unit1205_1[i][2] ] ^ unit1205_1[i][3]));
			}
		if(X_contra>0) L[1205][1]=2;
		}
	//Check all rules of unit[1206][0]
	L[1206][0] = LargeX[1206][1]>0 ? 1 : 0;
	satisfiable[1206][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1206_0[i][0] ][ unit1206_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1206_0[i][2] ][ unit1206_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1206_0[i][4] ][ unit1206_0[i][5] ] >0);
		X_contra = ( LargeX[1206][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1206_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1206][1]=0; L[1206][0]=1;}
			satisfiable[1206][0]=satisfiable[1206][0] & ((x[1206] ^ 0) | (x[ unit1206_0[i][0] ] ^ unit1206_0[i][1]) |(x[ unit1206_0[i][2] ] ^ unit1206_0[i][3]));
			}
		if(X_contra>0) L[1206][0]=2;
		}
	//Check all rules of unit[1206][1]
	L[1206][1] = LargeX[1206][0]>0 ? 1 : 0;
	satisfiable[1206][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1206_1[i][0] ][ unit1206_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1206_1[i][2] ][ unit1206_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1206_1[i][4] ][ unit1206_1[i][5] ] >0);
		X_contra = ( LargeX[1206][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1206_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1206][0]=0; L[1206][1]=1;}
			satisfiable[1206][1]=satisfiable[1206][1] & ((x[1206] ^ 1) | (x[ unit1206_1[i][0] ] ^ unit1206_1[i][1]) |(x[ unit1206_1[i][2] ] ^ unit1206_1[i][3]));
			}
		if(X_contra>0) L[1206][1]=2;
		}
	//Check all rules of unit[1207][0]
	L[1207][0] = LargeX[1207][1]>0 ? 1 : 0;
	satisfiable[1207][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1207_0[i][0] ][ unit1207_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1207_0[i][2] ][ unit1207_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1207_0[i][4] ][ unit1207_0[i][5] ] >0);
		X_contra = ( LargeX[1207][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1207_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1207][1]=0; L[1207][0]=1;}
			satisfiable[1207][0]=satisfiable[1207][0] & ((x[1207] ^ 0) | (x[ unit1207_0[i][0] ] ^ unit1207_0[i][1]) |(x[ unit1207_0[i][2] ] ^ unit1207_0[i][3]));
			}
		if(X_contra>0) L[1207][0]=2;
		}
	//Check all rules of unit[1207][1]
	L[1207][1] = LargeX[1207][0]>0 ? 1 : 0;
	satisfiable[1207][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1207_1[i][0] ][ unit1207_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1207_1[i][2] ][ unit1207_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1207_1[i][4] ][ unit1207_1[i][5] ] >0);
		X_contra = ( LargeX[1207][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1207_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1207][0]=0; L[1207][1]=1;}
			satisfiable[1207][1]=satisfiable[1207][1] & ((x[1207] ^ 1) | (x[ unit1207_1[i][0] ] ^ unit1207_1[i][1]) |(x[ unit1207_1[i][2] ] ^ unit1207_1[i][3]));
			}
		if(X_contra>0) L[1207][1]=2;
		}
	//Check all rules of unit[1208][0]
	L[1208][0] = LargeX[1208][1]>0 ? 1 : 0;
	satisfiable[1208][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1208_0[i][0] ][ unit1208_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1208_0[i][2] ][ unit1208_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1208_0[i][4] ][ unit1208_0[i][5] ] >0);
		X_contra = ( LargeX[1208][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1208_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1208][1]=0; L[1208][0]=1;}
			satisfiable[1208][0]=satisfiable[1208][0] & ((x[1208] ^ 0) | (x[ unit1208_0[i][0] ] ^ unit1208_0[i][1]) |(x[ unit1208_0[i][2] ] ^ unit1208_0[i][3]));
			}
		if(X_contra>0) L[1208][0]=2;
		}
	//Check all rules of unit[1208][1]
	L[1208][1] = LargeX[1208][0]>0 ? 1 : 0;
	satisfiable[1208][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1208_1[i][0] ][ unit1208_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1208_1[i][2] ][ unit1208_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1208_1[i][4] ][ unit1208_1[i][5] ] >0);
		X_contra = ( LargeX[1208][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1208_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1208][0]=0; L[1208][1]=1;}
			satisfiable[1208][1]=satisfiable[1208][1] & ((x[1208] ^ 1) | (x[ unit1208_1[i][0] ] ^ unit1208_1[i][1]) |(x[ unit1208_1[i][2] ] ^ unit1208_1[i][3]));
			}
		if(X_contra>0) L[1208][1]=2;
		}
	//Check all rules of unit[1209][0]
	L[1209][0] = LargeX[1209][1]>0 ? 1 : 0;
	satisfiable[1209][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1209_0[i][0] ][ unit1209_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1209_0[i][2] ][ unit1209_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1209_0[i][4] ][ unit1209_0[i][5] ] >0);
		X_contra = ( LargeX[1209][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1209_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1209][1]=0; L[1209][0]=1;}
			satisfiable[1209][0]=satisfiable[1209][0] & ((x[1209] ^ 0) | (x[ unit1209_0[i][0] ] ^ unit1209_0[i][1]) |(x[ unit1209_0[i][2] ] ^ unit1209_0[i][3]));
			}
		if(X_contra>0) L[1209][0]=2;
		}
	//Check all rules of unit[1209][1]
	L[1209][1] = LargeX[1209][0]>0 ? 1 : 0;
	satisfiable[1209][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1209_1[i][0] ][ unit1209_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1209_1[i][2] ][ unit1209_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1209_1[i][4] ][ unit1209_1[i][5] ] >0);
		X_contra = ( LargeX[1209][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1209_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1209][0]=0; L[1209][1]=1;}
			satisfiable[1209][1]=satisfiable[1209][1] & ((x[1209] ^ 1) | (x[ unit1209_1[i][0] ] ^ unit1209_1[i][1]) |(x[ unit1209_1[i][2] ] ^ unit1209_1[i][3]));
			}
		if(X_contra>0) L[1209][1]=2;
		}
	//Check all rules of unit[1210][0]
	L[1210][0] = LargeX[1210][1]>0 ? 1 : 0;
	satisfiable[1210][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1210_0[i][0] ][ unit1210_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1210_0[i][2] ][ unit1210_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1210_0[i][4] ][ unit1210_0[i][5] ] >0);
		X_contra = ( LargeX[1210][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1210_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1210][1]=0; L[1210][0]=1;}
			satisfiable[1210][0]=satisfiable[1210][0] & ((x[1210] ^ 0) | (x[ unit1210_0[i][0] ] ^ unit1210_0[i][1]) |(x[ unit1210_0[i][2] ] ^ unit1210_0[i][3]));
			}
		if(X_contra>0) L[1210][0]=2;
		}
	//Check all rules of unit[1210][1]
	L[1210][1] = LargeX[1210][0]>0 ? 1 : 0;
	satisfiable[1210][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1210_1[i][0] ][ unit1210_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1210_1[i][2] ][ unit1210_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1210_1[i][4] ][ unit1210_1[i][5] ] >0);
		X_contra = ( LargeX[1210][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1210_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1210][0]=0; L[1210][1]=1;}
			satisfiable[1210][1]=satisfiable[1210][1] & ((x[1210] ^ 1) | (x[ unit1210_1[i][0] ] ^ unit1210_1[i][1]) |(x[ unit1210_1[i][2] ] ^ unit1210_1[i][3]));
			}
		if(X_contra>0) L[1210][1]=2;
		}
	//Check all rules of unit[1211][0]
	L[1211][0] = LargeX[1211][1]>0 ? 1 : 0;
	satisfiable[1211][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1211_0[i][0] ][ unit1211_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1211_0[i][2] ][ unit1211_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1211_0[i][4] ][ unit1211_0[i][5] ] >0);
		X_contra = ( LargeX[1211][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1211_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1211][1]=0; L[1211][0]=1;}
			satisfiable[1211][0]=satisfiable[1211][0] & ((x[1211] ^ 0) | (x[ unit1211_0[i][0] ] ^ unit1211_0[i][1]) |(x[ unit1211_0[i][2] ] ^ unit1211_0[i][3]));
			}
		if(X_contra>0) L[1211][0]=2;
		}
	//Check all rules of unit[1211][1]
	L[1211][1] = LargeX[1211][0]>0 ? 1 : 0;
	satisfiable[1211][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1211_1[i][0] ][ unit1211_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1211_1[i][2] ][ unit1211_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1211_1[i][4] ][ unit1211_1[i][5] ] >0);
		X_contra = ( LargeX[1211][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1211_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1211][0]=0; L[1211][1]=1;}
			satisfiable[1211][1]=satisfiable[1211][1] & ((x[1211] ^ 1) | (x[ unit1211_1[i][0] ] ^ unit1211_1[i][1]) |(x[ unit1211_1[i][2] ] ^ unit1211_1[i][3]));
			}
		if(X_contra>0) L[1211][1]=2;
		}
	//Check all rules of unit[1212][0]
	L[1212][0] = LargeX[1212][1]>0 ? 1 : 0;
	satisfiable[1212][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1212_0[i][0] ][ unit1212_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1212_0[i][2] ][ unit1212_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1212_0[i][4] ][ unit1212_0[i][5] ] >0);
		X_contra = ( LargeX[1212][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1212_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1212][1]=0; L[1212][0]=1;}
			satisfiable[1212][0]=satisfiable[1212][0] & ((x[1212] ^ 0) | (x[ unit1212_0[i][0] ] ^ unit1212_0[i][1]) |(x[ unit1212_0[i][2] ] ^ unit1212_0[i][3]));
			}
		if(X_contra>0) L[1212][0]=2;
		}
	//Check all rules of unit[1212][1]
	L[1212][1] = LargeX[1212][0]>0 ? 1 : 0;
	satisfiable[1212][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1212_1[i][0] ][ unit1212_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1212_1[i][2] ][ unit1212_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1212_1[i][4] ][ unit1212_1[i][5] ] >0);
		X_contra = ( LargeX[1212][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1212_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1212][0]=0; L[1212][1]=1;}
			satisfiable[1212][1]=satisfiable[1212][1] & ((x[1212] ^ 1) | (x[ unit1212_1[i][0] ] ^ unit1212_1[i][1]) |(x[ unit1212_1[i][2] ] ^ unit1212_1[i][3]));
			}
		if(X_contra>0) L[1212][1]=2;
		}
	//Check all rules of unit[1213][0]
	L[1213][0] = LargeX[1213][1]>0 ? 1 : 0;
	satisfiable[1213][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1213_0[i][0] ][ unit1213_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1213_0[i][2] ][ unit1213_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1213_0[i][4] ][ unit1213_0[i][5] ] >0);
		X_contra = ( LargeX[1213][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1213_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1213][1]=0; L[1213][0]=1;}
			satisfiable[1213][0]=satisfiable[1213][0] & ((x[1213] ^ 0) | (x[ unit1213_0[i][0] ] ^ unit1213_0[i][1]) |(x[ unit1213_0[i][2] ] ^ unit1213_0[i][3]));
			}
		if(X_contra>0) L[1213][0]=2;
		}
	//Check all rules of unit[1213][1]
	L[1213][1] = LargeX[1213][0]>0 ? 1 : 0;
	satisfiable[1213][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1213_1[i][0] ][ unit1213_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1213_1[i][2] ][ unit1213_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1213_1[i][4] ][ unit1213_1[i][5] ] >0);
		X_contra = ( LargeX[1213][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1213_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1213][0]=0; L[1213][1]=1;}
			satisfiable[1213][1]=satisfiable[1213][1] & ((x[1213] ^ 1) | (x[ unit1213_1[i][0] ] ^ unit1213_1[i][1]) |(x[ unit1213_1[i][2] ] ^ unit1213_1[i][3]));
			}
		if(X_contra>0) L[1213][1]=2;
		}
	//Check all rules of unit[1214][0]
	L[1214][0] = LargeX[1214][1]>0 ? 1 : 0;
	satisfiable[1214][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1214_0[i][0] ][ unit1214_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1214_0[i][2] ][ unit1214_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1214_0[i][4] ][ unit1214_0[i][5] ] >0);
		X_contra = ( LargeX[1214][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1214_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1214][1]=0; L[1214][0]=1;}
			satisfiable[1214][0]=satisfiable[1214][0] & ((x[1214] ^ 0) | (x[ unit1214_0[i][0] ] ^ unit1214_0[i][1]) |(x[ unit1214_0[i][2] ] ^ unit1214_0[i][3]));
			}
		if(X_contra>0) L[1214][0]=2;
		}
	//Check all rules of unit[1214][1]
	L[1214][1] = LargeX[1214][0]>0 ? 1 : 0;
	satisfiable[1214][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1214_1[i][0] ][ unit1214_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1214_1[i][2] ][ unit1214_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1214_1[i][4] ][ unit1214_1[i][5] ] >0);
		X_contra = ( LargeX[1214][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1214_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1214][0]=0; L[1214][1]=1;}
			satisfiable[1214][1]=satisfiable[1214][1] & ((x[1214] ^ 1) | (x[ unit1214_1[i][0] ] ^ unit1214_1[i][1]) |(x[ unit1214_1[i][2] ] ^ unit1214_1[i][3]));
			}
		if(X_contra>0) L[1214][1]=2;
		}
	//Check all rules of unit[1215][0]
	L[1215][0] = LargeX[1215][1]>0 ? 1 : 0;
	satisfiable[1215][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1215_0[i][0] ][ unit1215_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1215_0[i][2] ][ unit1215_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1215_0[i][4] ][ unit1215_0[i][5] ] >0);
		X_contra = ( LargeX[1215][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1215_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1215][1]=0; L[1215][0]=1;}
			satisfiable[1215][0]=satisfiable[1215][0] & ((x[1215] ^ 0) | (x[ unit1215_0[i][0] ] ^ unit1215_0[i][1]) |(x[ unit1215_0[i][2] ] ^ unit1215_0[i][3]));
			}
		if(X_contra>0) L[1215][0]=2;
		}
	//Check all rules of unit[1215][1]
	L[1215][1] = LargeX[1215][0]>0 ? 1 : 0;
	satisfiable[1215][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1215_1[i][0] ][ unit1215_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1215_1[i][2] ][ unit1215_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1215_1[i][4] ][ unit1215_1[i][5] ] >0);
		X_contra = ( LargeX[1215][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1215_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1215][0]=0; L[1215][1]=1;}
			satisfiable[1215][1]=satisfiable[1215][1] & ((x[1215] ^ 1) | (x[ unit1215_1[i][0] ] ^ unit1215_1[i][1]) |(x[ unit1215_1[i][2] ] ^ unit1215_1[i][3]));
			}
		if(X_contra>0) L[1215][1]=2;
		}
	//Check all rules of unit[1216][0]
	L[1216][0] = LargeX[1216][1]>0 ? 1 : 0;
	satisfiable[1216][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1216_0[i][0] ][ unit1216_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1216_0[i][2] ][ unit1216_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1216_0[i][4] ][ unit1216_0[i][5] ] >0);
		X_contra = ( LargeX[1216][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1216_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1216][1]=0; L[1216][0]=1;}
			satisfiable[1216][0]=satisfiable[1216][0] & ((x[1216] ^ 0) | (x[ unit1216_0[i][0] ] ^ unit1216_0[i][1]) |(x[ unit1216_0[i][2] ] ^ unit1216_0[i][3]));
			}
		if(X_contra>0) L[1216][0]=2;
		}
	//Check all rules of unit[1216][1]
	L[1216][1] = LargeX[1216][0]>0 ? 1 : 0;
	satisfiable[1216][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1216_1[i][0] ][ unit1216_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1216_1[i][2] ][ unit1216_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1216_1[i][4] ][ unit1216_1[i][5] ] >0);
		X_contra = ( LargeX[1216][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1216_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1216][0]=0; L[1216][1]=1;}
			satisfiable[1216][1]=satisfiable[1216][1] & ((x[1216] ^ 1) | (x[ unit1216_1[i][0] ] ^ unit1216_1[i][1]) |(x[ unit1216_1[i][2] ] ^ unit1216_1[i][3]));
			}
		if(X_contra>0) L[1216][1]=2;
		}
	//Check all rules of unit[1217][0]
	L[1217][0] = LargeX[1217][1]>0 ? 1 : 0;
	satisfiable[1217][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1217_0[i][0] ][ unit1217_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1217_0[i][2] ][ unit1217_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1217_0[i][4] ][ unit1217_0[i][5] ] >0);
		X_contra = ( LargeX[1217][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1217_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1217][1]=0; L[1217][0]=1;}
			satisfiable[1217][0]=satisfiable[1217][0] & ((x[1217] ^ 0) | (x[ unit1217_0[i][0] ] ^ unit1217_0[i][1]) |(x[ unit1217_0[i][2] ] ^ unit1217_0[i][3]));
			}
		if(X_contra>0) L[1217][0]=2;
		}
	//Check all rules of unit[1217][1]
	L[1217][1] = LargeX[1217][0]>0 ? 1 : 0;
	satisfiable[1217][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1217_1[i][0] ][ unit1217_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1217_1[i][2] ][ unit1217_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1217_1[i][4] ][ unit1217_1[i][5] ] >0);
		X_contra = ( LargeX[1217][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1217_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1217][0]=0; L[1217][1]=1;}
			satisfiable[1217][1]=satisfiable[1217][1] & ((x[1217] ^ 1) | (x[ unit1217_1[i][0] ] ^ unit1217_1[i][1]) |(x[ unit1217_1[i][2] ] ^ unit1217_1[i][3]));
			}
		if(X_contra>0) L[1217][1]=2;
		}
	//Check all rules of unit[1218][0]
	L[1218][0] = LargeX[1218][1]>0 ? 1 : 0;
	satisfiable[1218][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1218_0[i][0] ][ unit1218_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1218_0[i][2] ][ unit1218_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1218_0[i][4] ][ unit1218_0[i][5] ] >0);
		X_contra = ( LargeX[1218][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1218_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1218][1]=0; L[1218][0]=1;}
			satisfiable[1218][0]=satisfiable[1218][0] & ((x[1218] ^ 0) | (x[ unit1218_0[i][0] ] ^ unit1218_0[i][1]) |(x[ unit1218_0[i][2] ] ^ unit1218_0[i][3]));
			}
		if(X_contra>0) L[1218][0]=2;
		}
	//Check all rules of unit[1218][1]
	L[1218][1] = LargeX[1218][0]>0 ? 1 : 0;
	satisfiable[1218][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1218_1[i][0] ][ unit1218_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1218_1[i][2] ][ unit1218_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1218_1[i][4] ][ unit1218_1[i][5] ] >0);
		X_contra = ( LargeX[1218][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1218_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1218][0]=0; L[1218][1]=1;}
			satisfiable[1218][1]=satisfiable[1218][1] & ((x[1218] ^ 1) | (x[ unit1218_1[i][0] ] ^ unit1218_1[i][1]) |(x[ unit1218_1[i][2] ] ^ unit1218_1[i][3]));
			}
		if(X_contra>0) L[1218][1]=2;
		}
	//Check all rules of unit[1219][0]
	L[1219][0] = LargeX[1219][1]>0 ? 1 : 0;
	satisfiable[1219][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1219_0[i][0] ][ unit1219_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1219_0[i][2] ][ unit1219_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1219_0[i][4] ][ unit1219_0[i][5] ] >0);
		X_contra = ( LargeX[1219][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1219_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1219][1]=0; L[1219][0]=1;}
			satisfiable[1219][0]=satisfiable[1219][0] & ((x[1219] ^ 0) | (x[ unit1219_0[i][0] ] ^ unit1219_0[i][1]) |(x[ unit1219_0[i][2] ] ^ unit1219_0[i][3]));
			}
		if(X_contra>0) L[1219][0]=2;
		}
	//Check all rules of unit[1219][1]
	L[1219][1] = LargeX[1219][0]>0 ? 1 : 0;
	satisfiable[1219][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1219_1[i][0] ][ unit1219_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1219_1[i][2] ][ unit1219_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1219_1[i][4] ][ unit1219_1[i][5] ] >0);
		X_contra = ( LargeX[1219][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1219_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1219][0]=0; L[1219][1]=1;}
			satisfiable[1219][1]=satisfiable[1219][1] & ((x[1219] ^ 1) | (x[ unit1219_1[i][0] ] ^ unit1219_1[i][1]) |(x[ unit1219_1[i][2] ] ^ unit1219_1[i][3]));
			}
		if(X_contra>0) L[1219][1]=2;
		}
	//Check all rules of unit[1220][0]
	L[1220][0] = LargeX[1220][1]>0 ? 1 : 0;
	satisfiable[1220][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1220_0[i][0] ][ unit1220_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1220_0[i][2] ][ unit1220_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1220_0[i][4] ][ unit1220_0[i][5] ] >0);
		X_contra = ( LargeX[1220][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1220_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1220][1]=0; L[1220][0]=1;}
			satisfiable[1220][0]=satisfiable[1220][0] & ((x[1220] ^ 0) | (x[ unit1220_0[i][0] ] ^ unit1220_0[i][1]) |(x[ unit1220_0[i][2] ] ^ unit1220_0[i][3]));
			}
		if(X_contra>0) L[1220][0]=2;
		}
	//Check all rules of unit[1220][1]
	L[1220][1] = LargeX[1220][0]>0 ? 1 : 0;
	satisfiable[1220][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1220_1[i][0] ][ unit1220_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1220_1[i][2] ][ unit1220_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1220_1[i][4] ][ unit1220_1[i][5] ] >0);
		X_contra = ( LargeX[1220][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1220_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1220][0]=0; L[1220][1]=1;}
			satisfiable[1220][1]=satisfiable[1220][1] & ((x[1220] ^ 1) | (x[ unit1220_1[i][0] ] ^ unit1220_1[i][1]) |(x[ unit1220_1[i][2] ] ^ unit1220_1[i][3]));
			}
		if(X_contra>0) L[1220][1]=2;
		}
	//Check all rules of unit[1221][0]
	L[1221][0] = LargeX[1221][1]>0 ? 1 : 0;
	satisfiable[1221][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1221_0[i][0] ][ unit1221_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1221_0[i][2] ][ unit1221_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1221_0[i][4] ][ unit1221_0[i][5] ] >0);
		X_contra = ( LargeX[1221][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1221_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1221][1]=0; L[1221][0]=1;}
			satisfiable[1221][0]=satisfiable[1221][0] & ((x[1221] ^ 0) | (x[ unit1221_0[i][0] ] ^ unit1221_0[i][1]) |(x[ unit1221_0[i][2] ] ^ unit1221_0[i][3]));
			}
		if(X_contra>0) L[1221][0]=2;
		}
	//Check all rules of unit[1221][1]
	L[1221][1] = LargeX[1221][0]>0 ? 1 : 0;
	satisfiable[1221][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1221_1[i][0] ][ unit1221_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1221_1[i][2] ][ unit1221_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1221_1[i][4] ][ unit1221_1[i][5] ] >0);
		X_contra = ( LargeX[1221][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1221_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1221][0]=0; L[1221][1]=1;}
			satisfiable[1221][1]=satisfiable[1221][1] & ((x[1221] ^ 1) | (x[ unit1221_1[i][0] ] ^ unit1221_1[i][1]) |(x[ unit1221_1[i][2] ] ^ unit1221_1[i][3]));
			}
		if(X_contra>0) L[1221][1]=2;
		}
	//Check all rules of unit[1222][0]
	L[1222][0] = LargeX[1222][1]>0 ? 1 : 0;
	satisfiable[1222][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1222_0[i][0] ][ unit1222_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1222_0[i][2] ][ unit1222_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1222_0[i][4] ][ unit1222_0[i][5] ] >0);
		X_contra = ( LargeX[1222][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1222_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1222][1]=0; L[1222][0]=1;}
			satisfiable[1222][0]=satisfiable[1222][0] & ((x[1222] ^ 0) | (x[ unit1222_0[i][0] ] ^ unit1222_0[i][1]) |(x[ unit1222_0[i][2] ] ^ unit1222_0[i][3]));
			}
		if(X_contra>0) L[1222][0]=2;
		}
	//Check all rules of unit[1222][1]
	L[1222][1] = LargeX[1222][0]>0 ? 1 : 0;
	satisfiable[1222][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1222_1[i][0] ][ unit1222_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1222_1[i][2] ][ unit1222_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1222_1[i][4] ][ unit1222_1[i][5] ] >0);
		X_contra = ( LargeX[1222][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1222_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1222][0]=0; L[1222][1]=1;}
			satisfiable[1222][1]=satisfiable[1222][1] & ((x[1222] ^ 1) | (x[ unit1222_1[i][0] ] ^ unit1222_1[i][1]) |(x[ unit1222_1[i][2] ] ^ unit1222_1[i][3]));
			}
		if(X_contra>0) L[1222][1]=2;
		}
	//Check all rules of unit[1223][0]
	L[1223][0] = LargeX[1223][1]>0 ? 1 : 0;
	satisfiable[1223][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1223_0[i][0] ][ unit1223_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1223_0[i][2] ][ unit1223_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1223_0[i][4] ][ unit1223_0[i][5] ] >0);
		X_contra = ( LargeX[1223][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1223_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1223][1]=0; L[1223][0]=1;}
			satisfiable[1223][0]=satisfiable[1223][0] & ((x[1223] ^ 0) | (x[ unit1223_0[i][0] ] ^ unit1223_0[i][1]) |(x[ unit1223_0[i][2] ] ^ unit1223_0[i][3]));
			}
		if(X_contra>0) L[1223][0]=2;
		}
	//Check all rules of unit[1223][1]
	L[1223][1] = LargeX[1223][0]>0 ? 1 : 0;
	satisfiable[1223][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1223_1[i][0] ][ unit1223_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1223_1[i][2] ][ unit1223_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1223_1[i][4] ][ unit1223_1[i][5] ] >0);
		X_contra = ( LargeX[1223][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1223_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1223][0]=0; L[1223][1]=1;}
			satisfiable[1223][1]=satisfiable[1223][1] & ((x[1223] ^ 1) | (x[ unit1223_1[i][0] ] ^ unit1223_1[i][1]) |(x[ unit1223_1[i][2] ] ^ unit1223_1[i][3]));
			}
		if(X_contra>0) L[1223][1]=2;
		}
	//Check all rules of unit[1224][0]
	L[1224][0] = LargeX[1224][1]>0 ? 1 : 0;
	satisfiable[1224][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1224_0[i][0] ][ unit1224_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1224_0[i][2] ][ unit1224_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1224_0[i][4] ][ unit1224_0[i][5] ] >0);
		X_contra = ( LargeX[1224][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1224_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1224][1]=0; L[1224][0]=1;}
			satisfiable[1224][0]=satisfiable[1224][0] & ((x[1224] ^ 0) | (x[ unit1224_0[i][0] ] ^ unit1224_0[i][1]) |(x[ unit1224_0[i][2] ] ^ unit1224_0[i][3]));
			}
		if(X_contra>0) L[1224][0]=2;
		}
	//Check all rules of unit[1224][1]
	L[1224][1] = LargeX[1224][0]>0 ? 1 : 0;
	satisfiable[1224][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1224_1[i][0] ][ unit1224_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1224_1[i][2] ][ unit1224_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1224_1[i][4] ][ unit1224_1[i][5] ] >0);
		X_contra = ( LargeX[1224][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1224_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1224][0]=0; L[1224][1]=1;}
			satisfiable[1224][1]=satisfiable[1224][1] & ((x[1224] ^ 1) | (x[ unit1224_1[i][0] ] ^ unit1224_1[i][1]) |(x[ unit1224_1[i][2] ] ^ unit1224_1[i][3]));
			}
		if(X_contra>0) L[1224][1]=2;
		}
	//Check all rules of unit[1225][0]
	L[1225][0] = LargeX[1225][1]>0 ? 1 : 0;
	satisfiable[1225][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1225_0[i][0] ][ unit1225_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1225_0[i][2] ][ unit1225_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1225_0[i][4] ][ unit1225_0[i][5] ] >0);
		X_contra = ( LargeX[1225][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1225_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1225][1]=0; L[1225][0]=1;}
			satisfiable[1225][0]=satisfiable[1225][0] & ((x[1225] ^ 0) | (x[ unit1225_0[i][0] ] ^ unit1225_0[i][1]) |(x[ unit1225_0[i][2] ] ^ unit1225_0[i][3]));
			}
		if(X_contra>0) L[1225][0]=2;
		}
	//Check all rules of unit[1225][1]
	L[1225][1] = LargeX[1225][0]>0 ? 1 : 0;
	satisfiable[1225][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1225_1[i][0] ][ unit1225_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1225_1[i][2] ][ unit1225_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1225_1[i][4] ][ unit1225_1[i][5] ] >0);
		X_contra = ( LargeX[1225][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1225_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1225][0]=0; L[1225][1]=1;}
			satisfiable[1225][1]=satisfiable[1225][1] & ((x[1225] ^ 1) | (x[ unit1225_1[i][0] ] ^ unit1225_1[i][1]) |(x[ unit1225_1[i][2] ] ^ unit1225_1[i][3]));
			}
		if(X_contra>0) L[1225][1]=2;
		}
	//Check all rules of unit[1226][0]
	L[1226][0] = LargeX[1226][1]>0 ? 1 : 0;
	satisfiable[1226][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1226_0[i][0] ][ unit1226_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1226_0[i][2] ][ unit1226_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1226_0[i][4] ][ unit1226_0[i][5] ] >0);
		X_contra = ( LargeX[1226][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1226_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1226][1]=0; L[1226][0]=1;}
			satisfiable[1226][0]=satisfiable[1226][0] & ((x[1226] ^ 0) | (x[ unit1226_0[i][0] ] ^ unit1226_0[i][1]) |(x[ unit1226_0[i][2] ] ^ unit1226_0[i][3]));
			}
		if(X_contra>0) L[1226][0]=2;
		}
	//Check all rules of unit[1226][1]
	L[1226][1] = LargeX[1226][0]>0 ? 1 : 0;
	satisfiable[1226][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1226_1[i][0] ][ unit1226_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1226_1[i][2] ][ unit1226_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1226_1[i][4] ][ unit1226_1[i][5] ] >0);
		X_contra = ( LargeX[1226][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1226_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1226][0]=0; L[1226][1]=1;}
			satisfiable[1226][1]=satisfiable[1226][1] & ((x[1226] ^ 1) | (x[ unit1226_1[i][0] ] ^ unit1226_1[i][1]) |(x[ unit1226_1[i][2] ] ^ unit1226_1[i][3]));
			}
		if(X_contra>0) L[1226][1]=2;
		}
	//Check all rules of unit[1227][0]
	L[1227][0] = LargeX[1227][1]>0 ? 1 : 0;
	satisfiable[1227][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1227_0[i][0] ][ unit1227_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1227_0[i][2] ][ unit1227_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1227_0[i][4] ][ unit1227_0[i][5] ] >0);
		X_contra = ( LargeX[1227][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1227_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1227][1]=0; L[1227][0]=1;}
			satisfiable[1227][0]=satisfiable[1227][0] & ((x[1227] ^ 0) | (x[ unit1227_0[i][0] ] ^ unit1227_0[i][1]) |(x[ unit1227_0[i][2] ] ^ unit1227_0[i][3]));
			}
		if(X_contra>0) L[1227][0]=2;
		}
	//Check all rules of unit[1227][1]
	L[1227][1] = LargeX[1227][0]>0 ? 1 : 0;
	satisfiable[1227][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1227_1[i][0] ][ unit1227_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1227_1[i][2] ][ unit1227_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1227_1[i][4] ][ unit1227_1[i][5] ] >0);
		X_contra = ( LargeX[1227][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1227_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1227][0]=0; L[1227][1]=1;}
			satisfiable[1227][1]=satisfiable[1227][1] & ((x[1227] ^ 1) | (x[ unit1227_1[i][0] ] ^ unit1227_1[i][1]) |(x[ unit1227_1[i][2] ] ^ unit1227_1[i][3]));
			}
		if(X_contra>0) L[1227][1]=2;
		}
	//Check all rules of unit[1228][0]
	L[1228][0] = LargeX[1228][1]>0 ? 1 : 0;
	satisfiable[1228][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1228_0[i][0] ][ unit1228_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1228_0[i][2] ][ unit1228_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1228_0[i][4] ][ unit1228_0[i][5] ] >0);
		X_contra = ( LargeX[1228][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1228_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1228][1]=0; L[1228][0]=1;}
			satisfiable[1228][0]=satisfiable[1228][0] & ((x[1228] ^ 0) | (x[ unit1228_0[i][0] ] ^ unit1228_0[i][1]) |(x[ unit1228_0[i][2] ] ^ unit1228_0[i][3]));
			}
		if(X_contra>0) L[1228][0]=2;
		}
	//Check all rules of unit[1228][1]
	L[1228][1] = LargeX[1228][0]>0 ? 1 : 0;
	satisfiable[1228][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1228_1[i][0] ][ unit1228_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1228_1[i][2] ][ unit1228_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1228_1[i][4] ][ unit1228_1[i][5] ] >0);
		X_contra = ( LargeX[1228][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1228_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1228][0]=0; L[1228][1]=1;}
			satisfiable[1228][1]=satisfiable[1228][1] & ((x[1228] ^ 1) | (x[ unit1228_1[i][0] ] ^ unit1228_1[i][1]) |(x[ unit1228_1[i][2] ] ^ unit1228_1[i][3]));
			}
		if(X_contra>0) L[1228][1]=2;
		}
	//Check all rules of unit[1229][0]
	L[1229][0] = LargeX[1229][1]>0 ? 1 : 0;
	satisfiable[1229][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1229_0[i][0] ][ unit1229_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1229_0[i][2] ][ unit1229_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1229_0[i][4] ][ unit1229_0[i][5] ] >0);
		X_contra = ( LargeX[1229][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1229_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1229][1]=0; L[1229][0]=1;}
			satisfiable[1229][0]=satisfiable[1229][0] & ((x[1229] ^ 0) | (x[ unit1229_0[i][0] ] ^ unit1229_0[i][1]) |(x[ unit1229_0[i][2] ] ^ unit1229_0[i][3]));
			}
		if(X_contra>0) L[1229][0]=2;
		}
	//Check all rules of unit[1229][1]
	L[1229][1] = LargeX[1229][0]>0 ? 1 : 0;
	satisfiable[1229][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1229_1[i][0] ][ unit1229_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1229_1[i][2] ][ unit1229_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1229_1[i][4] ][ unit1229_1[i][5] ] >0);
		X_contra = ( LargeX[1229][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1229_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1229][0]=0; L[1229][1]=1;}
			satisfiable[1229][1]=satisfiable[1229][1] & ((x[1229] ^ 1) | (x[ unit1229_1[i][0] ] ^ unit1229_1[i][1]) |(x[ unit1229_1[i][2] ] ^ unit1229_1[i][3]));
			}
		if(X_contra>0) L[1229][1]=2;
		}
	//Check all rules of unit[1230][0]
	L[1230][0] = LargeX[1230][1]>0 ? 1 : 0;
	satisfiable[1230][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1230_0[i][0] ][ unit1230_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1230_0[i][2] ][ unit1230_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1230_0[i][4] ][ unit1230_0[i][5] ] >0);
		X_contra = ( LargeX[1230][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1230_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1230][1]=0; L[1230][0]=1;}
			satisfiable[1230][0]=satisfiable[1230][0] & ((x[1230] ^ 0) | (x[ unit1230_0[i][0] ] ^ unit1230_0[i][1]) |(x[ unit1230_0[i][2] ] ^ unit1230_0[i][3]));
			}
		if(X_contra>0) L[1230][0]=2;
		}
	//Check all rules of unit[1230][1]
	L[1230][1] = LargeX[1230][0]>0 ? 1 : 0;
	satisfiable[1230][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1230_1[i][0] ][ unit1230_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1230_1[i][2] ][ unit1230_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1230_1[i][4] ][ unit1230_1[i][5] ] >0);
		X_contra = ( LargeX[1230][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1230_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1230][0]=0; L[1230][1]=1;}
			satisfiable[1230][1]=satisfiable[1230][1] & ((x[1230] ^ 1) | (x[ unit1230_1[i][0] ] ^ unit1230_1[i][1]) |(x[ unit1230_1[i][2] ] ^ unit1230_1[i][3]));
			}
		if(X_contra>0) L[1230][1]=2;
		}
	//Check all rules of unit[1231][0]
	L[1231][0] = LargeX[1231][1]>0 ? 1 : 0;
	satisfiable[1231][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1231_0[i][0] ][ unit1231_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1231_0[i][2] ][ unit1231_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1231_0[i][4] ][ unit1231_0[i][5] ] >0);
		X_contra = ( LargeX[1231][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1231_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1231][1]=0; L[1231][0]=1;}
			satisfiable[1231][0]=satisfiable[1231][0] & ((x[1231] ^ 0) | (x[ unit1231_0[i][0] ] ^ unit1231_0[i][1]) |(x[ unit1231_0[i][2] ] ^ unit1231_0[i][3]));
			}
		if(X_contra>0) L[1231][0]=2;
		}
	//Check all rules of unit[1231][1]
	L[1231][1] = LargeX[1231][0]>0 ? 1 : 0;
	satisfiable[1231][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1231_1[i][0] ][ unit1231_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1231_1[i][2] ][ unit1231_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1231_1[i][4] ][ unit1231_1[i][5] ] >0);
		X_contra = ( LargeX[1231][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1231_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1231][0]=0; L[1231][1]=1;}
			satisfiable[1231][1]=satisfiable[1231][1] & ((x[1231] ^ 1) | (x[ unit1231_1[i][0] ] ^ unit1231_1[i][1]) |(x[ unit1231_1[i][2] ] ^ unit1231_1[i][3]));
			}
		if(X_contra>0) L[1231][1]=2;
		}
	//Check all rules of unit[1232][0]
	L[1232][0] = LargeX[1232][1]>0 ? 1 : 0;
	satisfiable[1232][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1232_0[i][0] ][ unit1232_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1232_0[i][2] ][ unit1232_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1232_0[i][4] ][ unit1232_0[i][5] ] >0);
		X_contra = ( LargeX[1232][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1232_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1232][1]=0; L[1232][0]=1;}
			satisfiable[1232][0]=satisfiable[1232][0] & ((x[1232] ^ 0) | (x[ unit1232_0[i][0] ] ^ unit1232_0[i][1]) |(x[ unit1232_0[i][2] ] ^ unit1232_0[i][3]));
			}
		if(X_contra>0) L[1232][0]=2;
		}
	//Check all rules of unit[1232][1]
	L[1232][1] = LargeX[1232][0]>0 ? 1 : 0;
	satisfiable[1232][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1232_1[i][0] ][ unit1232_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1232_1[i][2] ][ unit1232_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1232_1[i][4] ][ unit1232_1[i][5] ] >0);
		X_contra = ( LargeX[1232][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1232_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1232][0]=0; L[1232][1]=1;}
			satisfiable[1232][1]=satisfiable[1232][1] & ((x[1232] ^ 1) | (x[ unit1232_1[i][0] ] ^ unit1232_1[i][1]) |(x[ unit1232_1[i][2] ] ^ unit1232_1[i][3]));
			}
		if(X_contra>0) L[1232][1]=2;
		}
	//Check all rules of unit[1233][0]
	L[1233][0] = LargeX[1233][1]>0 ? 1 : 0;
	satisfiable[1233][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1233_0[i][0] ][ unit1233_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1233_0[i][2] ][ unit1233_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1233_0[i][4] ][ unit1233_0[i][5] ] >0);
		X_contra = ( LargeX[1233][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1233_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1233][1]=0; L[1233][0]=1;}
			satisfiable[1233][0]=satisfiable[1233][0] & ((x[1233] ^ 0) | (x[ unit1233_0[i][0] ] ^ unit1233_0[i][1]) |(x[ unit1233_0[i][2] ] ^ unit1233_0[i][3]));
			}
		if(X_contra>0) L[1233][0]=2;
		}
	//Check all rules of unit[1233][1]
	L[1233][1] = LargeX[1233][0]>0 ? 1 : 0;
	satisfiable[1233][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1233_1[i][0] ][ unit1233_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1233_1[i][2] ][ unit1233_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1233_1[i][4] ][ unit1233_1[i][5] ] >0);
		X_contra = ( LargeX[1233][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1233_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1233][0]=0; L[1233][1]=1;}
			satisfiable[1233][1]=satisfiable[1233][1] & ((x[1233] ^ 1) | (x[ unit1233_1[i][0] ] ^ unit1233_1[i][1]) |(x[ unit1233_1[i][2] ] ^ unit1233_1[i][3]));
			}
		if(X_contra>0) L[1233][1]=2;
		}
	//Check all rules of unit[1234][0]
	L[1234][0] = LargeX[1234][1]>0 ? 1 : 0;
	satisfiable[1234][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1234_0[i][0] ][ unit1234_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1234_0[i][2] ][ unit1234_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1234_0[i][4] ][ unit1234_0[i][5] ] >0);
		X_contra = ( LargeX[1234][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1234_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1234][1]=0; L[1234][0]=1;}
			satisfiable[1234][0]=satisfiable[1234][0] & ((x[1234] ^ 0) | (x[ unit1234_0[i][0] ] ^ unit1234_0[i][1]) |(x[ unit1234_0[i][2] ] ^ unit1234_0[i][3]));
			}
		if(X_contra>0) L[1234][0]=2;
		}
	//Check all rules of unit[1234][1]
	L[1234][1] = LargeX[1234][0]>0 ? 1 : 0;
	satisfiable[1234][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1234_1[i][0] ][ unit1234_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1234_1[i][2] ][ unit1234_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1234_1[i][4] ][ unit1234_1[i][5] ] >0);
		X_contra = ( LargeX[1234][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1234_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1234][0]=0; L[1234][1]=1;}
			satisfiable[1234][1]=satisfiable[1234][1] & ((x[1234] ^ 1) | (x[ unit1234_1[i][0] ] ^ unit1234_1[i][1]) |(x[ unit1234_1[i][2] ] ^ unit1234_1[i][3]));
			}
		if(X_contra>0) L[1234][1]=2;
		}
	//Check all rules of unit[1235][0]
	L[1235][0] = LargeX[1235][1]>0 ? 1 : 0;
	satisfiable[1235][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1235_0[i][0] ][ unit1235_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1235_0[i][2] ][ unit1235_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1235_0[i][4] ][ unit1235_0[i][5] ] >0);
		X_contra = ( LargeX[1235][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1235_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1235][1]=0; L[1235][0]=1;}
			satisfiable[1235][0]=satisfiable[1235][0] & ((x[1235] ^ 0) | (x[ unit1235_0[i][0] ] ^ unit1235_0[i][1]) |(x[ unit1235_0[i][2] ] ^ unit1235_0[i][3]));
			}
		if(X_contra>0) L[1235][0]=2;
		}
	//Check all rules of unit[1235][1]
	L[1235][1] = LargeX[1235][0]>0 ? 1 : 0;
	satisfiable[1235][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1235_1[i][0] ][ unit1235_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1235_1[i][2] ][ unit1235_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1235_1[i][4] ][ unit1235_1[i][5] ] >0);
		X_contra = ( LargeX[1235][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1235_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1235][0]=0; L[1235][1]=1;}
			satisfiable[1235][1]=satisfiable[1235][1] & ((x[1235] ^ 1) | (x[ unit1235_1[i][0] ] ^ unit1235_1[i][1]) |(x[ unit1235_1[i][2] ] ^ unit1235_1[i][3]));
			}
		if(X_contra>0) L[1235][1]=2;
		}
	//Check all rules of unit[1236][0]
	L[1236][0] = LargeX[1236][1]>0 ? 1 : 0;
	satisfiable[1236][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1236_0[i][0] ][ unit1236_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1236_0[i][2] ][ unit1236_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1236_0[i][4] ][ unit1236_0[i][5] ] >0);
		X_contra = ( LargeX[1236][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1236_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1236][1]=0; L[1236][0]=1;}
			satisfiable[1236][0]=satisfiable[1236][0] & ((x[1236] ^ 0) | (x[ unit1236_0[i][0] ] ^ unit1236_0[i][1]) |(x[ unit1236_0[i][2] ] ^ unit1236_0[i][3]));
			}
		if(X_contra>0) L[1236][0]=2;
		}
	//Check all rules of unit[1236][1]
	L[1236][1] = LargeX[1236][0]>0 ? 1 : 0;
	satisfiable[1236][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1236_1[i][0] ][ unit1236_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1236_1[i][2] ][ unit1236_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1236_1[i][4] ][ unit1236_1[i][5] ] >0);
		X_contra = ( LargeX[1236][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1236_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1236][0]=0; L[1236][1]=1;}
			satisfiable[1236][1]=satisfiable[1236][1] & ((x[1236] ^ 1) | (x[ unit1236_1[i][0] ] ^ unit1236_1[i][1]) |(x[ unit1236_1[i][2] ] ^ unit1236_1[i][3]));
			}
		if(X_contra>0) L[1236][1]=2;
		}
	//Check all rules of unit[1237][0]
	L[1237][0] = LargeX[1237][1]>0 ? 1 : 0;
	satisfiable[1237][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1237_0[i][0] ][ unit1237_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1237_0[i][2] ][ unit1237_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1237_0[i][4] ][ unit1237_0[i][5] ] >0);
		X_contra = ( LargeX[1237][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1237_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1237][1]=0; L[1237][0]=1;}
			satisfiable[1237][0]=satisfiable[1237][0] & ((x[1237] ^ 0) | (x[ unit1237_0[i][0] ] ^ unit1237_0[i][1]) |(x[ unit1237_0[i][2] ] ^ unit1237_0[i][3]));
			}
		if(X_contra>0) L[1237][0]=2;
		}
	//Check all rules of unit[1237][1]
	L[1237][1] = LargeX[1237][0]>0 ? 1 : 0;
	satisfiable[1237][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1237_1[i][0] ][ unit1237_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1237_1[i][2] ][ unit1237_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1237_1[i][4] ][ unit1237_1[i][5] ] >0);
		X_contra = ( LargeX[1237][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1237_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1237][0]=0; L[1237][1]=1;}
			satisfiable[1237][1]=satisfiable[1237][1] & ((x[1237] ^ 1) | (x[ unit1237_1[i][0] ] ^ unit1237_1[i][1]) |(x[ unit1237_1[i][2] ] ^ unit1237_1[i][3]));
			}
		if(X_contra>0) L[1237][1]=2;
		}
	//Check all rules of unit[1238][0]
	L[1238][0] = LargeX[1238][1]>0 ? 1 : 0;
	satisfiable[1238][0]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1238_0[i][0] ][ unit1238_0[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1238_0[i][2] ][ unit1238_0[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1238_0[i][4] ][ unit1238_0[i][5] ] >0);
		X_contra = ( LargeX[1238][0] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1238_0[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1238][1]=0; L[1238][0]=1;}
			satisfiable[1238][0]=satisfiable[1238][0] & ((x[1238] ^ 0) | (x[ unit1238_0[i][0] ] ^ unit1238_0[i][1]) |(x[ unit1238_0[i][2] ] ^ unit1238_0[i][3]));
			}
		if(X_contra>0) L[1238][0]=2;
		}
	//Check all rules of unit[1238][1]
	L[1238][1] = LargeX[1238][0]>0 ? 1 : 0;
	satisfiable[1238][1]=1; 
	for(int i=0;i<0;i++){
		one_bit_t X_contra01;
		one_bit_t X_contra23;
		one_bit_t X_contra45;
		one_bit_t X_contra;
		X_contra01 = ( LargeX[ unit1238_1[i][0] ][ unit1238_1[i][1] ] >0);
		X_contra23 = ( LargeX[ unit1238_1[i][2] ][ unit1238_1[i][3] ] >0);
		X_contra45 = ( LargeX[ unit1238_1[i][4] ][ unit1238_1[i][5] ] >0);
		X_contra = ( LargeX[1238][1] >0) & X_contra01 & X_contra23 & X_contra45;
		if(unit1238_1[i][4]==0){
				if((X_contra01 & X_contra23)>0) {L[1238][0]=0; L[1238][1]=1;}
			satisfiable[1238][1]=satisfiable[1238][1] & ((x[1238] ^ 1) | (x[ unit1238_1[i][0] ] ^ unit1238_1[i][1]) |(x[ unit1238_1[i][2] ] ^ unit1238_1[i][3]));
			}
		if(X_contra>0) L[1238][1]=2;
		}
>>>>>>> hotfix
}
>>>>>>> 31afecb2918f4e984f1d28b18a7307f312737425
